
../bin/core:     file format elf64-x86-64


Disassembly of section .init:

0000000000004000 <_init>:
    4000:	f3 0f 1e fa          	endbr64 
    4004:	48 83 ec 08          	sub    rsp,0x8
    4008:	48 8b 05 d9 5f 04 00 	mov    rax,QWORD PTR [rip+0x45fd9]        # 49fe8 <__gmon_start__>
    400f:	48 85 c0             	test   rax,rax
    4012:	74 02                	je     4016 <_init+0x16>
    4014:	ff d0                	call   rax
    4016:	48 83 c4 08          	add    rsp,0x8
    401a:	c3                   	ret    

Disassembly of section .plt:

0000000000004020 <ftell@plt-0x10>:
    4020:	ff 35 e2 5f 04 00    	push   QWORD PTR [rip+0x45fe2]        # 4a008 <_GLOBAL_OFFSET_TABLE_+0x8>
    4026:	ff 25 e4 5f 04 00    	jmp    QWORD PTR [rip+0x45fe4]        # 4a010 <_GLOBAL_OFFSET_TABLE_+0x10>
    402c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000004030 <ftell@plt>:
    4030:	ff 25 e2 5f 04 00    	jmp    QWORD PTR [rip+0x45fe2]        # 4a018 <ftell@GLIBC_2.2.5>
    4036:	68 00 00 00 00       	push   0x0
    403b:	e9 e0 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004040 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const@plt>:
    4040:	ff 25 da 5f 04 00    	jmp    QWORD PTR [rip+0x45fda]        # 4a020 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const@GLIBCXX_3.4.21>
    4046:	68 01 00 00 00       	push   0x1
    404b:	e9 d0 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    4050:	ff 25 d2 5f 04 00    	jmp    QWORD PTR [rip+0x45fd2]        # 4a028 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    4056:	68 02 00 00 00       	push   0x2
    405b:	e9 c0 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004060 <__errno_location@plt>:
    4060:	ff 25 ca 5f 04 00    	jmp    QWORD PTR [rip+0x45fca]        # 4a030 <__errno_location@GLIBC_2.2.5>
    4066:	68 03 00 00 00       	push   0x3
    406b:	e9 b0 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004070 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)@plt>:
    4070:	ff 25 c2 5f 04 00    	jmp    QWORD PTR [rip+0x45fc2]        # 4a038 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)@GLIBCXX_3.4.21>
    4076:	68 04 00 00 00       	push   0x4
    407b:	e9 a0 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004080 <std::allocator<char>::~allocator()@plt>:
    4080:	ff 25 ba 5f 04 00    	jmp    QWORD PTR [rip+0x45fba]        # 4a040 <std::allocator<char>::~allocator()@GLIBCXX_3.4>
    4086:	68 05 00 00 00       	push   0x5
    408b:	e9 90 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004090 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>:
    4090:	ff 25 b2 5f 04 00    	jmp    QWORD PTR [rip+0x45fb2]        # 4a048 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@GLIBCXX_3.4.21>
    4096:	68 06 00 00 00       	push   0x6
    409b:	e9 80 ff ff ff       	jmp    4020 <_init+0x20>

00000000000040a0 <std::basic_ifstream<char, std::char_traits<char> >::close()@plt>:
    40a0:	ff 25 aa 5f 04 00    	jmp    QWORD PTR [rip+0x45faa]        # 4a050 <std::basic_ifstream<char, std::char_traits<char> >::close()@GLIBCXX_3.4>
    40a6:	68 07 00 00 00       	push   0x7
    40ab:	e9 70 ff ff ff       	jmp    4020 <_init+0x20>

00000000000040b0 <std::ostream::operator<<(unsigned long)@plt>:
    40b0:	ff 25 a2 5f 04 00    	jmp    QWORD PTR [rip+0x45fa2]        # 4a058 <std::ostream::operator<<(unsigned long)@GLIBCXX_3.4>
    40b6:	68 08 00 00 00       	push   0x8
    40bb:	e9 60 ff ff ff       	jmp    4020 <_init+0x20>

00000000000040c0 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@plt>:
    40c0:	ff 25 9a 5f 04 00    	jmp    QWORD PTR [rip+0x45f9a]        # 4a060 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@GLIBCXX_3.4>
    40c6:	68 09 00 00 00       	push   0x9
    40cb:	e9 50 ff ff ff       	jmp    4020 <_init+0x20>

00000000000040d0 <std::filesystem::__cxx11::path::_List::_Impl_deleter::operator()(std::filesystem::__cxx11::path::_List::_Impl*) const@plt>:
    40d0:	ff 25 92 5f 04 00    	jmp    QWORD PTR [rip+0x45f92]        # 4a068 <std::filesystem::__cxx11::path::_List::_Impl_deleter::operator()(std::filesystem::__cxx11::path::_List::_Impl*) const@GLIBCXX_3.4.26>
    40d6:	68 0a 00 00 00       	push   0xa
    40db:	e9 40 ff ff ff       	jmp    4020 <_init+0x20>

00000000000040e0 <std::filesystem::__cxx11::path::_List::_List()@plt>:
    40e0:	ff 25 8a 5f 04 00    	jmp    QWORD PTR [rip+0x45f8a]        # 4a070 <std::filesystem::__cxx11::path::_List::_List()@GLIBCXX_3.4.26>
    40e6:	68 0b 00 00 00       	push   0xb
    40eb:	e9 30 ff ff ff       	jmp    4020 <_init+0x20>

00000000000040f0 <snd_pcm_hw_params_set_access@plt>:
    40f0:	ff 25 82 5f 04 00    	jmp    QWORD PTR [rip+0x45f82]        # 4a078 <snd_pcm_hw_params_set_access@ALSA_0.9>
    40f6:	68 0c 00 00 00       	push   0xc
    40fb:	e9 20 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004100 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>:
    4100:	ff 25 7a 5f 04 00    	jmp    QWORD PTR [rip+0x45f7a]        # 4a080 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@GLIBCXX_3.4.21>
    4106:	68 0d 00 00 00       	push   0xd
    410b:	e9 10 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004110 <std::__throw_bad_alloc()@plt>:
    4110:	ff 25 72 5f 04 00    	jmp    QWORD PTR [rip+0x45f72]        # 4a088 <std::__throw_bad_alloc()@GLIBCXX_3.4>
    4116:	68 0e 00 00 00       	push   0xe
    411b:	e9 00 ff ff ff       	jmp    4020 <_init+0x20>

0000000000004120 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const@plt>:
    4120:	ff 25 6a 5f 04 00    	jmp    QWORD PTR [rip+0x45f6a]        # 4a090 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const@GLIBCXX_3.4.21>
    4126:	68 0f 00 00 00       	push   0xf
    412b:	e9 f0 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004130 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<char, std::char_traits<char> >)@plt>:
    4130:	ff 25 62 5f 04 00    	jmp    QWORD PTR [rip+0x45f62]        # 4a098 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<char, std::char_traits<char> >)@GLIBCXX_3.4.26>
    4136:	68 10 00 00 00       	push   0x10
    413b:	e9 e0 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004140 <__cxa_begin_catch@plt>:
    4140:	ff 25 5a 5f 04 00    	jmp    QWORD PTR [rip+0x45f5a]        # 4a0a0 <__cxa_begin_catch@CXXABI_1.3>
    4146:	68 11 00 00 00       	push   0x11
    414b:	e9 d0 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004150 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const@plt>:
    4150:	ff 25 52 5f 04 00    	jmp    QWORD PTR [rip+0x45f52]        # 4a0a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const@GLIBCXX_3.4.21>
    4156:	68 12 00 00 00       	push   0x12
    415b:	e9 c0 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004160 <snd_pcm_hw_params_get_buffer_size@plt>:
    4160:	ff 25 4a 5f 04 00    	jmp    QWORD PTR [rip+0x45f4a]        # 4a0b0 <snd_pcm_hw_params_get_buffer_size@ALSA_0.9.0rc4>
    4166:	68 13 00 00 00       	push   0x13
    416b:	e9 b0 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    4170:	ff 25 42 5f 04 00    	jmp    QWORD PTR [rip+0x45f42]        # 4a0b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    4176:	68 14 00 00 00       	push   0x14
    417b:	e9 a0 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004180 <strlen@plt>:
    4180:	ff 25 3a 5f 04 00    	jmp    QWORD PTR [rip+0x45f3a]        # 4a0c0 <strlen@GLIBC_2.2.5>
    4186:	68 15 00 00 00       	push   0x15
    418b:	e9 90 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004190 <memcmp@plt>:
    4190:	ff 25 32 5f 04 00    	jmp    QWORD PTR [rip+0x45f32]        # 4a0c8 <memcmp@GLIBC_2.2.5>
    4196:	68 16 00 00 00       	push   0x16
    419b:	e9 80 fe ff ff       	jmp    4020 <_init+0x20>

00000000000041a0 <strncmp@plt>:
    41a0:	ff 25 2a 5f 04 00    	jmp    QWORD PTR [rip+0x45f2a]        # 4a0d0 <strncmp@GLIBC_2.2.5>
    41a6:	68 17 00 00 00       	push   0x17
    41ab:	e9 70 fe ff ff       	jmp    4020 <_init+0x20>

00000000000041b0 <snd_pcm_hw_params_set_format@plt>:
    41b0:	ff 25 22 5f 04 00    	jmp    QWORD PTR [rip+0x45f22]        # 4a0d8 <snd_pcm_hw_params_set_format@ALSA_0.9>
    41b6:	68 18 00 00 00       	push   0x18
    41bb:	e9 60 fe ff ff       	jmp    4020 <_init+0x20>

00000000000041c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const@plt>:
    41c0:	ff 25 1a 5f 04 00    	jmp    QWORD PTR [rip+0x45f1a]        # 4a0e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const@GLIBCXX_3.4.21>
    41c6:	68 19 00 00 00       	push   0x19
    41cb:	e9 50 fe ff ff       	jmp    4020 <_init+0x20>

00000000000041d0 <std::__throw_length_error(char const*)@plt>:
    41d0:	ff 25 12 5f 04 00    	jmp    QWORD PTR [rip+0x45f12]        # 4a0e8 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
    41d6:	68 1a 00 00 00       	push   0x1a
    41db:	e9 40 fe ff ff       	jmp    4020 <_init+0x20>

00000000000041e0 <memset@plt>:
    41e0:	ff 25 0a 5f 04 00    	jmp    QWORD PTR [rip+0x45f0a]        # 4a0f0 <memset@GLIBC_2.2.5>
    41e6:	68 1b 00 00 00       	push   0x1b
    41eb:	e9 30 fe ff ff       	jmp    4020 <_init+0x20>

00000000000041f0 <dlerror@plt>:
    41f0:	ff 25 02 5f 04 00    	jmp    QWORD PTR [rip+0x45f02]        # 4a0f8 <dlerror@GLIBC_2.2.5>
    41f6:	68 1c 00 00 00       	push   0x1c
    41fb:	e9 20 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004200 <tan@plt>:
    4200:	ff 25 fa 5e 04 00    	jmp    QWORD PTR [rip+0x45efa]        # 4a100 <tan@GLIBC_2.2.5>
    4206:	68 1d 00 00 00       	push   0x1d
    420b:	e9 10 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004210 <std::allocator<char>::allocator(std::allocator<char> const&)@plt>:
    4210:	ff 25 f2 5e 04 00    	jmp    QWORD PTR [rip+0x45ef2]        # 4a108 <std::allocator<char>::allocator(std::allocator<char> const&)@GLIBCXX_3.4>
    4216:	68 1e 00 00 00       	push   0x1e
    421b:	e9 00 fe ff ff       	jmp    4020 <_init+0x20>

0000000000004220 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data()@plt>:
    4220:	ff 25 ea 5e 04 00    	jmp    QWORD PTR [rip+0x45eea]        # 4a110 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data()@GLIBCXX_3.4.26>
    4226:	68 1f 00 00 00       	push   0x1f
    422b:	e9 f0 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const@plt>:
    4230:	ff 25 e2 5e 04 00    	jmp    QWORD PTR [rip+0x45ee2]        # 4a118 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const@GLIBCXX_3.4.21>
    4236:	68 20 00 00 00       	push   0x20
    423b:	e9 e0 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>:
    4240:	ff 25 da 5e 04 00    	jmp    QWORD PTR [rip+0x45eda]        # 4a120 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@GLIBCXX_3.4.21>
    4246:	68 21 00 00 00       	push   0x21
    424b:	e9 d0 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004250 <std::__throw_invalid_argument(char const*)@plt>:
    4250:	ff 25 d2 5e 04 00    	jmp    QWORD PTR [rip+0x45ed2]        # 4a128 <std::__throw_invalid_argument(char const*)@GLIBCXX_3.4>
    4256:	68 22 00 00 00       	push   0x22
    425b:	e9 c0 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>:
    4260:	ff 25 ca 5e 04 00    	jmp    QWORD PTR [rip+0x45eca]        # 4a130 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@GLIBCXX_3.4.21>
    4266:	68 23 00 00 00       	push   0x23
    426b:	e9 b0 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004270 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)@plt>:
    4270:	ff 25 c2 5e 04 00    	jmp    QWORD PTR [rip+0x45ec2]        # 4a138 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)@GLIBCXX_3.4.21>
    4276:	68 24 00 00 00       	push   0x24
    427b:	e9 a0 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004280 <__assert_fail@plt>:
    4280:	ff 25 ba 5e 04 00    	jmp    QWORD PTR [rip+0x45eba]        # 4a140 <__assert_fail@GLIBC_2.2.5>
    4286:	68 25 00 00 00       	push   0x25
    428b:	e9 90 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004290 <snd_pcm_open@plt>:
    4290:	ff 25 b2 5e 04 00    	jmp    QWORD PTR [rip+0x45eb2]        # 4a148 <snd_pcm_open@ALSA_0.9>
    4296:	68 26 00 00 00       	push   0x26
    429b:	e9 80 fd ff ff       	jmp    4020 <_init+0x20>

00000000000042a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@plt>:
    42a0:	ff 25 aa 5e 04 00    	jmp    QWORD PTR [rip+0x45eaa]        # 4a150 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@GLIBCXX_3.4.21>
    42a6:	68 27 00 00 00       	push   0x27
    42ab:	e9 70 fd ff ff       	jmp    4020 <_init+0x20>

00000000000042b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>:
    42b0:	ff 25 a2 5e 04 00    	jmp    QWORD PTR [rip+0x45ea2]        # 4a158 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@GLIBCXX_3.4.21>
    42b6:	68 28 00 00 00       	push   0x28
    42bb:	e9 60 fd ff ff       	jmp    4020 <_init+0x20>

00000000000042c0 <std::__throw_logic_error(char const*)@plt>:
    42c0:	ff 25 9a 5e 04 00    	jmp    QWORD PTR [rip+0x45e9a]        # 4a160 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
    42c6:	68 29 00 00 00       	push   0x29
    42cb:	e9 50 fd ff ff       	jmp    4020 <_init+0x20>

00000000000042d0 <aligned_alloc@plt>:
    42d0:	ff 25 92 5e 04 00    	jmp    QWORD PTR [rip+0x45e92]        # 4a168 <aligned_alloc@GLIBC_2.16>
    42d6:	68 2a 00 00 00       	push   0x2a
    42db:	e9 40 fd ff ff       	jmp    4020 <_init+0x20>

00000000000042e0 <cosf@plt>:
    42e0:	ff 25 8a 5e 04 00    	jmp    QWORD PTR [rip+0x45e8a]        # 4a170 <cosf@GLIBC_2.2.5>
    42e6:	68 2b 00 00 00       	push   0x2b
    42eb:	e9 30 fd ff ff       	jmp    4020 <_init+0x20>

00000000000042f0 <std::ostream::operator<<(float)@plt>:
    42f0:	ff 25 82 5e 04 00    	jmp    QWORD PTR [rip+0x45e82]        # 4a178 <std::ostream::operator<<(float)@GLIBCXX_3.4>
    42f6:	68 2c 00 00 00       	push   0x2c
    42fb:	e9 20 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004300 <dlclose@plt>:
    4300:	ff 25 7a 5e 04 00    	jmp    QWORD PTR [rip+0x45e7a]        # 4a180 <dlclose@GLIBC_2.2.5>
    4306:	68 2d 00 00 00       	push   0x2d
    430b:	e9 10 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004310 <std::__throw_bad_array_new_length()@plt>:
    4310:	ff 25 72 5e 04 00    	jmp    QWORD PTR [rip+0x45e72]        # 4a188 <std::__throw_bad_array_new_length()@GLIBCXX_3.4.29>
    4316:	68 2e 00 00 00       	push   0x2e
    431b:	e9 00 fd ff ff       	jmp    4020 <_init+0x20>

0000000000004320 <snd_strerror@plt>:
    4320:	ff 25 6a 5e 04 00    	jmp    QWORD PTR [rip+0x45e6a]        # 4a190 <snd_strerror@ALSA_0.9>
    4326:	68 2f 00 00 00       	push   0x2f
    432b:	e9 f0 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004330 <std::filesystem::__cxx11::path::_M_split_cmpts()@plt>:
    4330:	ff 25 62 5e 04 00    	jmp    QWORD PTR [rip+0x45e62]        # 4a198 <std::filesystem::__cxx11::path::_M_split_cmpts()@GLIBCXX_3.4.26>
    4336:	68 30 00 00 00       	push   0x30
    433b:	e9 e0 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004340 <snd_pcm_hw_params_set_period_size_near@plt>:
    4340:	ff 25 5a 5e 04 00    	jmp    QWORD PTR [rip+0x45e5a]        # 4a1a0 <snd_pcm_hw_params_set_period_size_near@ALSA_0.9.0rc4>
    4346:	68 31 00 00 00       	push   0x31
    434b:	e9 d0 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>:
    4350:	ff 25 52 5e 04 00    	jmp    QWORD PTR [rip+0x45e52]        # 4a1a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@GLIBCXX_3.4.21>
    4356:	68 32 00 00 00       	push   0x32
    435b:	e9 c0 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004360 <std::filesystem::last_write_time(std::filesystem::__cxx11::path const&)@plt>:
    4360:	ff 25 4a 5e 04 00    	jmp    QWORD PTR [rip+0x45e4a]        # 4a1b0 <std::filesystem::last_write_time(std::filesystem::__cxx11::path const&)@GLIBCXX_3.4.26>
    4366:	68 33 00 00 00       	push   0x33
    436b:	e9 b0 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004370 <memcpy@plt>:
    4370:	ff 25 42 5e 04 00    	jmp    QWORD PTR [rip+0x45e42]        # 4a1b8 <memcpy@GLIBC_2.14>
    4376:	68 34 00 00 00       	push   0x34
    437b:	e9 a0 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004380 <sinf@plt>:
    4380:	ff 25 3a 5e 04 00    	jmp    QWORD PTR [rip+0x45e3a]        # 4a1c0 <sinf@GLIBC_2.2.5>
    4386:	68 35 00 00 00       	push   0x35
    438b:	e9 90 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004390 <snd_pcm_hw_params_get_period_size@plt>:
    4390:	ff 25 32 5e 04 00    	jmp    QWORD PTR [rip+0x45e32]        # 4a1c8 <snd_pcm_hw_params_get_period_size@ALSA_0.9.0rc4>
    4396:	68 36 00 00 00       	push   0x36
    439b:	e9 80 fc ff ff       	jmp    4020 <_init+0x20>

00000000000043a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@plt>:
    43a0:	ff 25 2a 5e 04 00    	jmp    QWORD PTR [rip+0x45e2a]        # 4a1d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@GLIBCXX_3.4.21>
    43a6:	68 37 00 00 00       	push   0x37
    43ab:	e9 70 fc ff ff       	jmp    4020 <_init+0x20>

00000000000043b0 <snd_pcm_writei@plt>:
    43b0:	ff 25 22 5e 04 00    	jmp    QWORD PTR [rip+0x45e22]        # 4a1d8 <snd_pcm_writei@ALSA_0.9>
    43b6:	68 38 00 00 00       	push   0x38
    43bb:	e9 60 fc ff ff       	jmp    4020 <_init+0x20>

00000000000043c0 <snd_pcm_hw_params@plt>:
    43c0:	ff 25 1a 5e 04 00    	jmp    QWORD PTR [rip+0x45e1a]        # 4a1e0 <snd_pcm_hw_params@ALSA_0.9>
    43c6:	68 39 00 00 00       	push   0x39
    43cb:	e9 50 fc ff ff       	jmp    4020 <_init+0x20>

00000000000043d0 <__cxa_atexit@plt>:
    43d0:	ff 25 12 5e 04 00    	jmp    QWORD PTR [rip+0x45e12]        # 4a1e8 <__cxa_atexit@GLIBC_2.2.5>
    43d6:	68 3a 00 00 00       	push   0x3a
    43db:	e9 40 fc ff ff       	jmp    4020 <_init+0x20>

00000000000043e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    43e0:	ff 25 0a 5e 04 00    	jmp    QWORD PTR [rip+0x45e0a]        # 4a1f0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    43e6:	68 3b 00 00 00       	push   0x3b
    43eb:	e9 30 fc ff ff       	jmp    4020 <_init+0x20>

00000000000043f0 <snd_pcm_prepare@plt>:
    43f0:	ff 25 02 5e 04 00    	jmp    QWORD PTR [rip+0x45e02]        # 4a1f8 <snd_pcm_prepare@ALSA_0.9>
    43f6:	68 3c 00 00 00       	push   0x3c
    43fb:	e9 20 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
    4400:	ff 25 fa 5d 04 00    	jmp    QWORD PTR [rip+0x45dfa]        # 4a200 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@GLIBCXX_3.4>
    4406:	68 3d 00 00 00       	push   0x3d
    440b:	e9 10 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004410 <snd_pcm_hw_params_set_rate_near@plt>:
    4410:	ff 25 f2 5d 04 00    	jmp    QWORD PTR [rip+0x45df2]        # 4a208 <snd_pcm_hw_params_set_rate_near@ALSA_0.9.0rc4>
    4416:	68 3e 00 00 00       	push   0x3e
    441b:	e9 00 fc ff ff       	jmp    4020 <_init+0x20>

0000000000004420 <fclose@plt>:
    4420:	ff 25 ea 5d 04 00    	jmp    QWORD PTR [rip+0x45dea]        # 4a210 <fclose@GLIBC_2.2.5>
    4426:	68 3f 00 00 00       	push   0x3f
    442b:	e9 f0 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004430 <operator new(unsigned long)@plt>:
    4430:	ff 25 e2 5d 04 00    	jmp    QWORD PTR [rip+0x45de2]        # 4a218 <operator new(unsigned long)@GLIBCXX_3.4>
    4436:	68 40 00 00 00       	push   0x40
    443b:	e9 e0 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004440 <operator delete(void*, unsigned long)@plt>:
    4440:	ff 25 da 5d 04 00    	jmp    QWORD PTR [rip+0x45dda]        # 4a220 <operator delete(void*, unsigned long)@CXXABI_1.3.9>
    4446:	68 41 00 00 00       	push   0x41
    444b:	e9 d0 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>:
    4450:	ff 25 d2 5d 04 00    	jmp    QWORD PTR [rip+0x45dd2]        # 4a228 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@GLIBCXX_3.4.21>
    4456:	68 42 00 00 00       	push   0x42
    445b:	e9 c0 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004460 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>:
    4460:	ff 25 ca 5d 04 00    	jmp    QWORD PTR [rip+0x45dca]        # 4a230 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@GLIBCXX_3.4>
    4466:	68 43 00 00 00       	push   0x43
    446b:	e9 b0 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004470 <acosf@plt>:
    4470:	ff 25 c2 5d 04 00    	jmp    QWORD PTR [rip+0x45dc2]        # 4a238 <acosf@GLIBC_2.2.5>
    4476:	68 44 00 00 00       	push   0x44
    447b:	e9 a0 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004480 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)@plt>:
    4480:	ff 25 ba 5d 04 00    	jmp    QWORD PTR [rip+0x45dba]        # 4a240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)@GLIBCXX_3.4.21>
    4486:	68 45 00 00 00       	push   0x45
    448b:	e9 90 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004490 <std::allocator<char>::~allocator()@plt>:
    4490:	ff 25 b2 5d 04 00    	jmp    QWORD PTR [rip+0x45db2]        # 4a248 <std::allocator<char>::~allocator()@GLIBCXX_3.4>
    4496:	68 46 00 00 00       	push   0x46
    449b:	e9 80 fb ff ff       	jmp    4020 <_init+0x20>

00000000000044a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@plt>:
    44a0:	ff 25 aa 5d 04 00    	jmp    QWORD PTR [rip+0x45daa]        # 4a250 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@GLIBCXX_3.4.21>
    44a6:	68 47 00 00 00       	push   0x47
    44ab:	e9 70 fb ff ff       	jmp    4020 <_init+0x20>

00000000000044b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const@plt>:
    44b0:	ff 25 a2 5d 04 00    	jmp    QWORD PTR [rip+0x45da2]        # 4a258 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const@GLIBCXX_3.4.21>
    44b6:	68 48 00 00 00       	push   0x48
    44bb:	e9 60 fb ff ff       	jmp    4020 <_init+0x20>

00000000000044c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@plt>:
    44c0:	ff 25 9a 5d 04 00    	jmp    QWORD PTR [rip+0x45d9a]        # 4a260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@GLIBCXX_3.4.21>
    44c6:	68 49 00 00 00       	push   0x49
    44cb:	e9 50 fb ff ff       	jmp    4020 <_init+0x20>

00000000000044d0 <fseek@plt>:
    44d0:	ff 25 92 5d 04 00    	jmp    QWORD PTR [rip+0x45d92]        # 4a268 <fseek@GLIBC_2.2.5>
    44d6:	68 4a 00 00 00       	push   0x4a
    44db:	e9 40 fb ff ff       	jmp    4020 <_init+0x20>

00000000000044e0 <__stack_chk_fail@plt>:
    44e0:	ff 25 8a 5d 04 00    	jmp    QWORD PTR [rip+0x45d8a]        # 4a270 <__stack_chk_fail@GLIBC_2.4>
    44e6:	68 4b 00 00 00       	push   0x4b
    44eb:	e9 30 fb ff ff       	jmp    4020 <_init+0x20>

00000000000044f0 <snd_pcm_hw_params_get_period_time@plt>:
    44f0:	ff 25 82 5d 04 00    	jmp    QWORD PTR [rip+0x45d82]        # 4a278 <snd_pcm_hw_params_get_period_time@ALSA_0.9.0rc4>
    44f6:	68 4c 00 00 00       	push   0x4c
    44fb:	e9 20 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004500 <snd_pcm_hw_params_sizeof@plt>:
    4500:	ff 25 7a 5d 04 00    	jmp    QWORD PTR [rip+0x45d7a]        # 4a280 <snd_pcm_hw_params_sizeof@ALSA_0.9>
    4506:	68 4d 00 00 00       	push   0x4d
    450b:	e9 10 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>:
    4510:	ff 25 72 5d 04 00    	jmp    QWORD PTR [rip+0x45d72]        # 4a288 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@GLIBCXX_3.4.21>
    4516:	68 4e 00 00 00       	push   0x4e
    451b:	e9 00 fb ff ff       	jmp    4020 <_init+0x20>

0000000000004520 <fopen@plt>:
    4520:	ff 25 6a 5d 04 00    	jmp    QWORD PTR [rip+0x45d6a]        # 4a290 <fopen@GLIBC_2.2.5>
    4526:	68 4f 00 00 00       	push   0x4f
    452b:	e9 f0 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004530 <free@plt>:
    4530:	ff 25 62 5d 04 00    	jmp    QWORD PTR [rip+0x45d62]        # 4a298 <free@GLIBC_2.2.5>
    4536:	68 50 00 00 00       	push   0x50
    453b:	e9 e0 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004540 <exit@plt>:
    4540:	ff 25 5a 5d 04 00    	jmp    QWORD PTR [rip+0x45d5a]        # 4a2a0 <exit@GLIBC_2.2.5>
    4546:	68 51 00 00 00       	push   0x51
    454b:	e9 d0 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>:
    4550:	ff 25 52 5d 04 00    	jmp    QWORD PTR [rip+0x45d52]        # 4a2a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@GLIBCXX_3.4.21>
    4556:	68 52 00 00 00       	push   0x52
    455b:	e9 c0 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()@plt>:
    4560:	ff 25 4a 5d 04 00    	jmp    QWORD PTR [rip+0x45d4a]        # 4a2b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()@GLIBCXX_3.4.21>
    4566:	68 53 00 00 00       	push   0x53
    456b:	e9 b0 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004570 <std::basic_ios<char, std::char_traits<char> >::operator bool() const@plt>:
    4570:	ff 25 42 5d 04 00    	jmp    QWORD PTR [rip+0x45d42]        # 4a2b8 <std::basic_ios<char, std::char_traits<char> >::operator bool() const@GLIBCXX_3.4.21>
    4576:	68 54 00 00 00       	push   0x54
    457b:	e9 a0 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004580 <snd_pcm_close@plt>:
    4580:	ff 25 3a 5d 04 00    	jmp    QWORD PTR [rip+0x45d3a]        # 4a2c0 <snd_pcm_close@ALSA_0.9>
    4586:	68 55 00 00 00       	push   0x55
    458b:	e9 90 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004590 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    4590:	ff 25 32 5d 04 00    	jmp    QWORD PTR [rip+0x45d32]        # 4a2c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    4596:	68 56 00 00 00       	push   0x56
    459b:	e9 80 fa ff ff       	jmp    4020 <_init+0x20>

00000000000045a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const@plt>:
    45a0:	ff 25 2a 5d 04 00    	jmp    QWORD PTR [rip+0x45d2a]        # 4a2d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const@GLIBCXX_3.4.21>
    45a6:	68 57 00 00 00       	push   0x57
    45ab:	e9 70 fa ff ff       	jmp    4020 <_init+0x20>

00000000000045b0 <snd_pcm_drain@plt>:
    45b0:	ff 25 22 5d 04 00    	jmp    QWORD PTR [rip+0x45d22]        # 4a2d8 <snd_pcm_drain@ALSA_0.9>
    45b6:	68 58 00 00 00       	push   0x58
    45bb:	e9 60 fa ff ff       	jmp    4020 <_init+0x20>

00000000000045c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()@plt>:
    45c0:	ff 25 1a 5d 04 00    	jmp    QWORD PTR [rip+0x45d1a]        # 4a2e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()@GLIBCXX_3.4.21>
    45c6:	68 59 00 00 00       	push   0x59
    45cb:	e9 50 fa ff ff       	jmp    4020 <_init+0x20>

00000000000045d0 <malloc@plt>:
    45d0:	ff 25 12 5d 04 00    	jmp    QWORD PTR [rip+0x45d12]        # 4a2e8 <malloc@GLIBC_2.2.5>
    45d6:	68 5a 00 00 00       	push   0x5a
    45db:	e9 40 fa ff ff       	jmp    4020 <_init+0x20>

00000000000045e0 <snd_pcm_hw_params_set_channels@plt>:
    45e0:	ff 25 0a 5d 04 00    	jmp    QWORD PTR [rip+0x45d0a]        # 4a2f0 <snd_pcm_hw_params_set_channels@ALSA_0.9>
    45e6:	68 5b 00 00 00       	push   0x5b
    45eb:	e9 30 fa ff ff       	jmp    4020 <_init+0x20>

00000000000045f0 <std::ostream::operator<<(unsigned int)@plt>:
    45f0:	ff 25 02 5d 04 00    	jmp    QWORD PTR [rip+0x45d02]        # 4a2f8 <std::ostream::operator<<(unsigned int)@GLIBCXX_3.4>
    45f6:	68 5c 00 00 00       	push   0x5c
    45fb:	e9 20 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004600 <ldexpf@plt>:
    4600:	ff 25 fa 5c 04 00    	jmp    QWORD PTR [rip+0x45cfa]        # 4a300 <ldexpf@GLIBC_2.2.5>
    4606:	68 5d 00 00 00       	push   0x5d
    460b:	e9 10 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004610 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)@plt>:
    4610:	ff 25 f2 5c 04 00    	jmp    QWORD PTR [rip+0x45cf2]        # 4a308 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)@GLIBCXX_3.4.21>
    4616:	68 5e 00 00 00       	push   0x5e
    461b:	e9 00 fa ff ff       	jmp    4020 <_init+0x20>

0000000000004620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>:
    4620:	ff 25 ea 5c 04 00    	jmp    QWORD PTR [rip+0x45cea]        # 4a310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@GLIBCXX_3.4.21>
    4626:	68 5f 00 00 00       	push   0x5f
    462b:	e9 f0 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004630 <strcmp@plt>:
    4630:	ff 25 e2 5c 04 00    	jmp    QWORD PTR [rip+0x45ce2]        # 4a318 <strcmp@GLIBC_2.2.5>
    4636:	68 60 00 00 00       	push   0x60
    463b:	e9 e0 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004640 <std::__throw_out_of_range(char const*)@plt>:
    4640:	ff 25 da 5c 04 00    	jmp    QWORD PTR [rip+0x45cda]        # 4a320 <std::__throw_out_of_range(char const*)@GLIBCXX_3.4>
    4646:	68 61 00 00 00       	push   0x61
    464b:	e9 d0 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004650 <__cxa_rethrow@plt>:
    4650:	ff 25 d2 5c 04 00    	jmp    QWORD PTR [rip+0x45cd2]        # 4a328 <__cxa_rethrow@CXXABI_1.3>
    4656:	68 62 00 00 00       	push   0x62
    465b:	e9 c0 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_to_string_view(std::basic_string_view<char, std::char_traits<char> >)@plt>:
    4660:	ff 25 ca 5c 04 00    	jmp    QWORD PTR [rip+0x45cca]        # 4a330 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_to_string_view(std::basic_string_view<char, std::char_traits<char> >)@GLIBCXX_3.4.26>
    4666:	68 63 00 00 00       	push   0x63
    466b:	e9 b0 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004670 <dlopen@plt>:
    4670:	ff 25 c2 5c 04 00    	jmp    QWORD PTR [rip+0x45cc2]        # 4a338 <dlopen@GLIBC_2.2.5>
    4676:	68 64 00 00 00       	push   0x64
    467b:	e9 a0 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004680 <fread@plt>:
    4680:	ff 25 ba 5c 04 00    	jmp    QWORD PTR [rip+0x45cba]        # 4a340 <fread@GLIBC_2.2.5>
    4686:	68 65 00 00 00       	push   0x65
    468b:	e9 90 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004690 <std::ios_base::Init::Init()@plt>:
    4690:	ff 25 b2 5c 04 00    	jmp    QWORD PTR [rip+0x45cb2]        # 4a348 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    4696:	68 66 00 00 00       	push   0x66
    469b:	e9 80 f9 ff ff       	jmp    4020 <_init+0x20>

00000000000046a0 <feof@plt>:
    46a0:	ff 25 aa 5c 04 00    	jmp    QWORD PTR [rip+0x45caa]        # 4a350 <feof@GLIBC_2.2.5>
    46a6:	68 67 00 00 00       	push   0x67
    46ab:	e9 70 f9 ff ff       	jmp    4020 <_init+0x20>

00000000000046b0 <powf@plt>:
    46b0:	ff 25 a2 5c 04 00    	jmp    QWORD PTR [rip+0x45ca2]        # 4a358 <powf@GLIBC_2.27>
    46b6:	68 68 00 00 00       	push   0x68
    46bb:	e9 60 f9 ff ff       	jmp    4020 <_init+0x20>

00000000000046c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)@plt>:
    46c0:	ff 25 9a 5c 04 00    	jmp    QWORD PTR [rip+0x45c9a]        # 4a360 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)@GLIBCXX_3.4.21>
    46c6:	68 69 00 00 00       	push   0x69
    46cb:	e9 50 f9 ff ff       	jmp    4020 <_init+0x20>

00000000000046d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    46d0:	ff 25 92 5c 04 00    	jmp    QWORD PTR [rip+0x45c92]        # 4a368 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    46d6:	68 6a 00 00 00       	push   0x6a
    46db:	e9 40 f9 ff ff       	jmp    4020 <_init+0x20>

00000000000046e0 <std::basic_ifstream<char, std::char_traits<char> >::is_open()@plt>:
    46e0:	ff 25 8a 5c 04 00    	jmp    QWORD PTR [rip+0x45c8a]        # 4a370 <std::basic_ifstream<char, std::char_traits<char> >::is_open()@GLIBCXX_3.4>
    46e6:	68 6b 00 00 00       	push   0x6b
    46eb:	e9 30 f9 ff ff       	jmp    4020 <_init+0x20>

00000000000046f0 <std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@plt>:
    46f0:	ff 25 82 5c 04 00    	jmp    QWORD PTR [rip+0x45c82]        # 4a378 <std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@GLIBCXX_3.4.21>
    46f6:	68 6c 00 00 00       	push   0x6c
    46fb:	e9 20 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004700 <memmove@plt>:
    4700:	ff 25 7a 5c 04 00    	jmp    QWORD PTR [rip+0x45c7a]        # 4a380 <memmove@GLIBC_2.2.5>
    4706:	68 6d 00 00 00       	push   0x6d
    470b:	e9 10 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004710 <__cxa_end_catch@plt>:
    4710:	ff 25 72 5c 04 00    	jmp    QWORD PTR [rip+0x45c72]        # 4a388 <__cxa_end_catch@CXXABI_1.3>
    4716:	68 6e 00 00 00       	push   0x6e
    471b:	e9 00 f9 ff ff       	jmp    4020 <_init+0x20>

0000000000004720 <realloc@plt>:
    4720:	ff 25 6a 5c 04 00    	jmp    QWORD PTR [rip+0x45c6a]        # 4a390 <realloc@GLIBC_2.2.5>
    4726:	68 6f 00 00 00       	push   0x6f
    472b:	e9 f0 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004730 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const@plt>:
    4730:	ff 25 62 5c 04 00    	jmp    QWORD PTR [rip+0x45c62]        # 4a398 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const@GLIBCXX_3.4.21>
    4736:	68 70 00 00 00       	push   0x70
    473b:	e9 e0 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)@plt>:
    4740:	ff 25 5a 5c 04 00    	jmp    QWORD PTR [rip+0x45c5a]        # 4a3a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)@GLIBCXX_3.4.21>
    4746:	68 71 00 00 00       	push   0x71
    474b:	e9 d0 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004750 <std::ostream::operator<<(int)@plt>:
    4750:	ff 25 52 5c 04 00    	jmp    QWORD PTR [rip+0x45c52]        # 4a3a8 <std::ostream::operator<<(int)@GLIBCXX_3.4>
    4756:	68 72 00 00 00       	push   0x72
    475b:	e9 c0 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004760 <_Unwind_Resume@plt>:
    4760:	ff 25 4a 5c 04 00    	jmp    QWORD PTR [rip+0x45c4a]        # 4a3b0 <_Unwind_Resume@GCC_3.0>
    4766:	68 73 00 00 00       	push   0x73
    476b:	e9 b0 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004770 <std::allocator<char>::allocator()@plt>:
    4770:	ff 25 42 5c 04 00    	jmp    QWORD PTR [rip+0x45c42]        # 4a3b8 <std::allocator<char>::allocator()@GLIBCXX_3.4>
    4776:	68 74 00 00 00       	push   0x74
    477b:	e9 a0 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004780 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
    4780:	ff 25 3a 5c 04 00    	jmp    QWORD PTR [rip+0x45c3a]        # 4a3c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
    4786:	68 75 00 00 00       	push   0x75
    478b:	e9 90 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004790 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long) const@plt>:
    4790:	ff 25 32 5c 04 00    	jmp    QWORD PTR [rip+0x45c32]        # 4a3c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long) const@GLIBCXX_3.4.21>
    4796:	68 76 00 00 00       	push   0x76
    479b:	e9 80 f8 ff ff       	jmp    4020 <_init+0x20>

00000000000047a0 <sqrtf@plt>:
    47a0:	ff 25 2a 5c 04 00    	jmp    QWORD PTR [rip+0x45c2a]        # 4a3d0 <sqrtf@GLIBC_2.2.5>
    47a6:	68 77 00 00 00       	push   0x77
    47ab:	e9 70 f8 ff ff       	jmp    4020 <_init+0x20>

00000000000047b0 <snd_pcm_hw_params_any@plt>:
    47b0:	ff 25 22 5c 04 00    	jmp    QWORD PTR [rip+0x45c22]        # 4a3d8 <snd_pcm_hw_params_any@ALSA_0.9>
    47b6:	68 78 00 00 00       	push   0x78
    47bb:	e9 60 f8 ff ff       	jmp    4020 <_init+0x20>

00000000000047c0 <dlsym@plt>:
    47c0:	ff 25 1a 5c 04 00    	jmp    QWORD PTR [rip+0x45c1a]        # 4a3e0 <dlsym@GLIBC_2.2.5>
    47c6:	68 79 00 00 00       	push   0x79
    47cb:	e9 50 f8 ff ff       	jmp    4020 <_init+0x20>

00000000000047d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper, std::allocator<char> const&)@plt>:
    47d0:	ff 25 12 5c 04 00    	jmp    QWORD PTR [rip+0x45c12]        # 4a3e8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper, std::allocator<char> const&)@GLIBCXX_3.4.26>
    47d6:	68 7a 00 00 00       	push   0x7a
    47db:	e9 40 f8 ff ff       	jmp    4020 <_init+0x20>

00000000000047e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>:
    47e0:	ff 25 0a 5c 04 00    	jmp    QWORD PTR [rip+0x45c0a]        # 4a3f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@GLIBCXX_3.4.21>
    47e6:	68 7b 00 00 00       	push   0x7b
    47eb:	e9 30 f8 ff ff       	jmp    4020 <_init+0x20>

00000000000047f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    47f0:	ff 25 02 5c 04 00    	jmp    QWORD PTR [rip+0x45c02]        # 4a3f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    47f6:	68 7c 00 00 00       	push   0x7c
    47fb:	e9 20 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@plt>:
    4800:	ff 25 fa 5b 04 00    	jmp    QWORD PTR [rip+0x45bfa]        # 4a400 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@GLIBCXX_3.4.21>
    4806:	68 7d 00 00 00       	push   0x7d
    480b:	e9 10 f8 ff ff       	jmp    4020 <_init+0x20>

0000000000004810 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)@plt>:
    4810:	ff 25 f2 5b 04 00    	jmp    QWORD PTR [rip+0x45bf2]        # 4a408 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)@GLIBCXX_3.4.21>
    4816:	68 7e 00 00 00       	push   0x7e
    481b:	e9 00 f8 ff ff       	jmp    4020 <_init+0x20>

Disassembly of section .plt.got:

0000000000004820 <strtol@plt>:
    4820:	ff 25 aa 57 04 00    	jmp    QWORD PTR [rip+0x457aa]        # 49fd0 <strtol@GLIBC_2.2.5>
    4826:	66 90                	xchg   ax,ax

Disassembly of section .text:

0000000000004830 <_start>:
    4830:	f3 0f 1e fa          	endbr64 
    4834:	31 ed                	xor    ebp,ebp
    4836:	49 89 d1             	mov    r9,rdx
    4839:	5e                   	pop    rsi
    483a:	48 89 e2             	mov    rdx,rsp
    483d:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
    4841:	50                   	push   rax
    4842:	54                   	push   rsp
    4843:	4c 8d 05 e6 4c 03 00 	lea    r8,[rip+0x34ce6]        # 39530 <__libc_csu_fini>
    484a:	48 8d 0d 6f 4c 03 00 	lea    rcx,[rip+0x34c6f]        # 394c0 <__libc_csu_init>
    4851:	48 8d 3d b2 f5 01 00 	lea    rdi,[rip+0x1f5b2]        # 23e0a <main>
    4858:	ff 15 82 57 04 00    	call   QWORD PTR [rip+0x45782]        # 49fe0 <__libc_start_main@GLIBC_2.2.5>
    485e:	f4                   	hlt    
    485f:	90                   	nop

0000000000004860 <deregister_tm_clones>:
    4860:	48 8d 3d a9 5c 04 00 	lea    rdi,[rip+0x45ca9]        # 4a510 <__TMC_END__>
    4867:	48 8d 05 a2 5c 04 00 	lea    rax,[rip+0x45ca2]        # 4a510 <__TMC_END__>
    486e:	48 39 f8             	cmp    rax,rdi
    4871:	74 15                	je     4888 <deregister_tm_clones+0x28>
    4873:	48 8b 05 5e 57 04 00 	mov    rax,QWORD PTR [rip+0x4575e]        # 49fd8 <_ITM_deregisterTMCloneTable>
    487a:	48 85 c0             	test   rax,rax
    487d:	74 09                	je     4888 <deregister_tm_clones+0x28>
    487f:	ff e0                	jmp    rax
    4881:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    4888:	c3                   	ret    
    4889:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000004890 <register_tm_clones>:
    4890:	48 8d 3d 79 5c 04 00 	lea    rdi,[rip+0x45c79]        # 4a510 <__TMC_END__>
    4897:	48 8d 35 72 5c 04 00 	lea    rsi,[rip+0x45c72]        # 4a510 <__TMC_END__>
    489e:	48 29 fe             	sub    rsi,rdi
    48a1:	48 89 f0             	mov    rax,rsi
    48a4:	48 c1 ee 3f          	shr    rsi,0x3f
    48a8:	48 c1 f8 03          	sar    rax,0x3
    48ac:	48 01 c6             	add    rsi,rax
    48af:	48 d1 fe             	sar    rsi,1
    48b2:	74 14                	je     48c8 <register_tm_clones+0x38>
    48b4:	48 8b 05 35 57 04 00 	mov    rax,QWORD PTR [rip+0x45735]        # 49ff0 <_ITM_registerTMCloneTable>
    48bb:	48 85 c0             	test   rax,rax
    48be:	74 08                	je     48c8 <register_tm_clones+0x38>
    48c0:	ff e0                	jmp    rax
    48c2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    48c8:	c3                   	ret    
    48c9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000000048d0 <__do_global_dtors_aux>:
    48d0:	f3 0f 1e fa          	endbr64 
    48d4:	80 3d 95 5e 04 00 00 	cmp    BYTE PTR [rip+0x45e95],0x0        # 4a770 <completed.0>
    48db:	75 33                	jne    4910 <__do_global_dtors_aux+0x40>
    48dd:	55                   	push   rbp
    48de:	48 83 3d d2 56 04 00 00 	cmp    QWORD PTR [rip+0x456d2],0x0        # 49fb8 <__cxa_finalize@GLIBC_2.2.5>
    48e6:	48 89 e5             	mov    rbp,rsp
    48e9:	74 0d                	je     48f8 <__do_global_dtors_aux+0x28>
    48eb:	48 8b 3d 36 5b 04 00 	mov    rdi,QWORD PTR [rip+0x45b36]        # 4a428 <__dso_handle>
    48f2:	ff 15 c0 56 04 00    	call   QWORD PTR [rip+0x456c0]        # 49fb8 <__cxa_finalize@GLIBC_2.2.5>
    48f8:	e8 63 ff ff ff       	call   4860 <deregister_tm_clones>
    48fd:	c6 05 6c 5e 04 00 01 	mov    BYTE PTR [rip+0x45e6c],0x1        # 4a770 <completed.0>
    4904:	5d                   	pop    rbp
    4905:	c3                   	ret    
    4906:	66 2e 0f 1f 84 00 00 00 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
    4910:	c3                   	ret    
    4911:	66 66 2e 0f 1f 84 00 00 00 00 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    491c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000004920 <frame_dummy>:
    4920:	f3 0f 1e fa          	endbr64 
    4924:	e9 67 ff ff ff       	jmp    4890 <register_tm_clones>
    4929:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000004930 <maxofthree_asm>:
    4930:	39 f7                	cmp    edi,esi
    4932:	0f 4c fe             	cmovl  edi,esi
    4935:	39 d7                	cmp    edi,edx
    4937:	0f 4c fa             	cmovl  edi,edx
    493a:	89 f8                	mov    eax,edi
    493c:	c3                   	ret    

000000000000493d <test_asm>:
    493d:	48 83 ec 14          	sub    rsp,0x14
    4941:	41 ba 09 00 00 00    	mov    r10d,0x9
    4947:	66 41 bb 78 0a       	mov    r11w,0xa78

000000000000494c <loop>:
    494c:	66 46 89 1c 54       	mov    WORD PTR [rsp+r10*2],r11w
    4951:	49 83 ea 01          	sub    r10,0x1
    4955:	75 f5                	jne    494c <loop>
    4957:	b8 01 00 00 00       	mov    eax,0x1
    495c:	bf 01 00 00 00       	mov    edi,0x1
    4961:	48 89 e6             	mov    rsi,rsp
    4964:	ba 14 00 00 00       	mov    edx,0x14
    4969:	0f 05                	syscall 
    496b:	48 83 c4 14          	add    rsp,0x14
    496f:	b8 00 00 00 00       	mov    eax,0x0
    4974:	c3                   	ret    

0000000000004975 <stbi__sse2_available()>:
    4975:	55                   	push   rbp
    4976:	48 89 e5             	mov    rbp,rsp
    4979:	b8 01 00 00 00       	mov    eax,0x1
    497e:	5d                   	pop    rbp
    497f:	c3                   	ret    

0000000000004980 <stbi__start_mem(stbi__context*, unsigned char const*, int)>:
    4980:	55                   	push   rbp
    4981:	48 89 e5             	mov    rbp,rsp
    4984:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4988:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    498c:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
    498f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4993:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
    499b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    499f:	c7 40 30 00 00 00 00 	mov    DWORD PTR [rax+0x30],0x0
    49a6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    49aa:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    49ae:	48 89 90 c8 00 00 00 	mov    QWORD PTR [rax+0xc8],rdx
    49b5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    49b9:	48 8b 90 c8 00 00 00 	mov    rdx,QWORD PTR [rax+0xc8]
    49c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    49c4:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    49cb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    49ce:	48 63 d0             	movsxd rdx,eax
    49d1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    49d5:	48 01 c2             	add    rdx,rax
    49d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    49dc:	48 89 90 d0 00 00 00 	mov    QWORD PTR [rax+0xd0],rdx
    49e3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    49e7:	48 8b 90 d0 00 00 00 	mov    rdx,QWORD PTR [rax+0xd0]
    49ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    49f2:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
    49f9:	90                   	nop
    49fa:	5d                   	pop    rbp
    49fb:	c3                   	ret    

00000000000049fc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>:
    49fc:	55                   	push   rbp
    49fd:	48 89 e5             	mov    rbp,rsp
    4a00:	48 83 ec 20          	sub    rsp,0x20
    4a04:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4a08:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    4a0c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    4a10:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    4a14:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
    4a18:	48 8b 06             	mov    rax,QWORD PTR [rsi]
    4a1b:	48 8b 56 08          	mov    rdx,QWORD PTR [rsi+0x8]
    4a1f:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
    4a23:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
    4a27:	48 8b 46 10          	mov    rax,QWORD PTR [rsi+0x10]
    4a2b:	48 89 41 20          	mov    QWORD PTR [rcx+0x20],rax
    4a2f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a33:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    4a37:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
    4a3b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a3f:	c7 40 34 80 00 00 00 	mov    DWORD PTR [rax+0x34],0x80
    4a46:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a4a:	c7 40 30 01 00 00 00 	mov    DWORD PTR [rax+0x30],0x1
    4a51:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a55:	48 8d 50 38          	lea    rdx,[rax+0x38]
    4a59:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a5d:	48 89 90 c8 00 00 00 	mov    QWORD PTR [rax+0xc8],rdx
    4a64:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a68:	48 89 c7             	mov    rdi,rax
    4a6b:	e8 f2 19 00 00       	call   6462 <stbi__refill_buffer(stbi__context*)>
    4a70:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a74:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
    4a7b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4a7f:	48 89 90 d0 00 00 00 	mov    QWORD PTR [rax+0xd0],rdx
    4a86:	90                   	nop
    4a87:	c9                   	leave  
    4a88:	c3                   	ret    

0000000000004a89 <stbi__stdio_read(void*, char*, int)>:
    4a89:	55                   	push   rbp
    4a8a:	48 89 e5             	mov    rbp,rsp
    4a8d:	48 83 ec 20          	sub    rsp,0x20
    4a91:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4a95:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    4a99:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
    4a9c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    4a9f:	48 63 d0             	movsxd rdx,eax
    4aa2:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    4aa6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    4aaa:	be 01 00 00 00       	mov    esi,0x1
    4aaf:	48 89 c7             	mov    rdi,rax
    4ab2:	e8 c9 fb ff ff       	call   4680 <fread@plt>
    4ab7:	c9                   	leave  
    4ab8:	c3                   	ret    

0000000000004ab9 <stbi__stdio_skip(void*, int)>:
    4ab9:	55                   	push   rbp
    4aba:	48 89 e5             	mov    rbp,rsp
    4abd:	48 83 ec 10          	sub    rsp,0x10
    4ac1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4ac5:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    4ac8:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    4acb:	48 63 c8             	movsxd rcx,eax
    4ace:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4ad2:	ba 01 00 00 00       	mov    edx,0x1
    4ad7:	48 89 ce             	mov    rsi,rcx
    4ada:	48 89 c7             	mov    rdi,rax
    4add:	e8 ee f9 ff ff       	call   44d0 <fseek@plt>
    4ae2:	90                   	nop
    4ae3:	c9                   	leave  
    4ae4:	c3                   	ret    

0000000000004ae5 <stbi__stdio_eof(void*)>:
    4ae5:	55                   	push   rbp
    4ae6:	48 89 e5             	mov    rbp,rsp
    4ae9:	48 83 ec 10          	sub    rsp,0x10
    4aed:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4af1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4af5:	48 89 c7             	mov    rdi,rax
    4af8:	e8 a3 fb ff ff       	call   46a0 <feof@plt>
    4afd:	c9                   	leave  
    4afe:	c3                   	ret    

0000000000004aff <stbi__start_file(stbi__context*, _IO_FILE*)>:
    4aff:	55                   	push   rbp
    4b00:	48 89 e5             	mov    rbp,rsp
    4b03:	48 83 ec 10          	sub    rsp,0x10
    4b07:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4b0b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    4b0f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    4b13:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4b17:	48 8d 0d d2 59 04 00 	lea    rcx,[rip+0x459d2]        # 4a4f0 <stbi__stdio_callbacks>
    4b1e:	48 89 ce             	mov    rsi,rcx
    4b21:	48 89 c7             	mov    rdi,rax
    4b24:	e8 d3 fe ff ff       	call   49fc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>
    4b29:	90                   	nop
    4b2a:	c9                   	leave  
    4b2b:	c3                   	ret    

0000000000004b2c <stbi__rewind(stbi__context*)>:
    4b2c:	55                   	push   rbp
    4b2d:	48 89 e5             	mov    rbp,rsp
    4b30:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4b34:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4b38:	48 8b 90 c8 00 00 00 	mov    rdx,QWORD PTR [rax+0xc8]
    4b3f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4b43:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    4b4a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4b4e:	48 8b 90 d0 00 00 00 	mov    rdx,QWORD PTR [rax+0xd0]
    4b55:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4b59:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
    4b60:	90                   	nop
    4b61:	5d                   	pop    rbp
    4b62:	c3                   	ret    

0000000000004b63 <stbi_failure_reason>:
    4b63:	55                   	push   rbp
    4b64:	48 89 e5             	mov    rbp,rsp
    4b67:	64 48 8b 04 25 f0 ff ff ff 	mov    rax,QWORD PTR fs:0xfffffffffffffff0
    4b70:	5d                   	pop    rbp
    4b71:	c3                   	ret    

0000000000004b72 <stbi__err(char const*)>:
    4b72:	55                   	push   rbp
    4b73:	48 89 e5             	mov    rbp,rsp
    4b76:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4b7a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4b7e:	64 48 89 04 25 f0 ff ff ff 	mov    QWORD PTR fs:0xfffffffffffffff0,rax
    4b87:	b8 00 00 00 00       	mov    eax,0x0
    4b8c:	5d                   	pop    rbp
    4b8d:	c3                   	ret    

0000000000004b8e <stbi__malloc(unsigned long)>:
    4b8e:	55                   	push   rbp
    4b8f:	48 89 e5             	mov    rbp,rsp
    4b92:	48 83 ec 10          	sub    rsp,0x10
    4b96:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4b9a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4b9e:	48 89 c7             	mov    rdi,rax
    4ba1:	e8 2a fa ff ff       	call   45d0 <malloc@plt>
    4ba6:	c9                   	leave  
    4ba7:	c3                   	ret    

0000000000004ba8 <stbi__addsizes_valid(int, int)>:
    4ba8:	55                   	push   rbp
    4ba9:	48 89 e5             	mov    rbp,rsp
    4bac:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4baf:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4bb2:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
    4bb6:	79 07                	jns    4bbf <stbi__addsizes_valid(int, int)+0x17>
    4bb8:	b8 00 00 00 00       	mov    eax,0x0
    4bbd:	eb 11                	jmp    4bd0 <stbi__addsizes_valid(int, int)+0x28>
    4bbf:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
    4bc4:	2b 45 f8             	sub    eax,DWORD PTR [rbp-0x8]
    4bc7:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
    4bca:	0f 9e c0             	setle  al
    4bcd:	0f b6 c0             	movzx  eax,al
    4bd0:	5d                   	pop    rbp
    4bd1:	c3                   	ret    

0000000000004bd2 <stbi__mul2sizes_valid(int, int)>:
    4bd2:	55                   	push   rbp
    4bd3:	48 89 e5             	mov    rbp,rsp
    4bd6:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4bd9:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4bdc:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
    4be0:	78 06                	js     4be8 <stbi__mul2sizes_valid(int, int)+0x16>
    4be2:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
    4be6:	79 07                	jns    4bef <stbi__mul2sizes_valid(int, int)+0x1d>
    4be8:	b8 00 00 00 00       	mov    eax,0x0
    4bed:	eb 1f                	jmp    4c0e <stbi__mul2sizes_valid(int, int)+0x3c>
    4bef:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
    4bf3:	75 07                	jne    4bfc <stbi__mul2sizes_valid(int, int)+0x2a>
    4bf5:	b8 01 00 00 00       	mov    eax,0x1
    4bfa:	eb 12                	jmp    4c0e <stbi__mul2sizes_valid(int, int)+0x3c>
    4bfc:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
    4c01:	99                   	cdq    
    4c02:	f7 7d f8             	idiv   DWORD PTR [rbp-0x8]
    4c05:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
    4c08:	0f 9e c0             	setle  al
    4c0b:	0f b6 c0             	movzx  eax,al
    4c0e:	5d                   	pop    rbp
    4c0f:	c3                   	ret    

0000000000004c10 <stbi__mad2sizes_valid(int, int, int)>:
    4c10:	55                   	push   rbp
    4c11:	48 89 e5             	mov    rbp,rsp
    4c14:	48 83 ec 10          	sub    rsp,0x10
    4c18:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4c1b:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4c1e:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    4c21:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    4c24:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4c27:	89 d6                	mov    esi,edx
    4c29:	89 c7                	mov    edi,eax
    4c2b:	e8 a2 ff ff ff       	call   4bd2 <stbi__mul2sizes_valid(int, int)>
    4c30:	85 c0                	test   eax,eax
    4c32:	74 1e                	je     4c52 <stbi__mad2sizes_valid(int, int, int)+0x42>
    4c34:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4c37:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4c3b:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    4c3e:	89 d6                	mov    esi,edx
    4c40:	89 c7                	mov    edi,eax
    4c42:	e8 61 ff ff ff       	call   4ba8 <stbi__addsizes_valid(int, int)>
    4c47:	85 c0                	test   eax,eax
    4c49:	74 07                	je     4c52 <stbi__mad2sizes_valid(int, int, int)+0x42>
    4c4b:	b8 01 00 00 00       	mov    eax,0x1
    4c50:	eb 05                	jmp    4c57 <stbi__mad2sizes_valid(int, int, int)+0x47>
    4c52:	b8 00 00 00 00       	mov    eax,0x0
    4c57:	0f b6 c0             	movzx  eax,al
    4c5a:	c9                   	leave  
    4c5b:	c3                   	ret    

0000000000004c5c <stbi__mad3sizes_valid(int, int, int, int)>:
    4c5c:	55                   	push   rbp
    4c5d:	48 89 e5             	mov    rbp,rsp
    4c60:	48 83 ec 10          	sub    rsp,0x10
    4c64:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4c67:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4c6a:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    4c6d:	89 4d f0             	mov    DWORD PTR [rbp-0x10],ecx
    4c70:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    4c73:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4c76:	89 d6                	mov    esi,edx
    4c78:	89 c7                	mov    edi,eax
    4c7a:	e8 53 ff ff ff       	call   4bd2 <stbi__mul2sizes_valid(int, int)>
    4c7f:	85 c0                	test   eax,eax
    4c81:	74 39                	je     4cbc <stbi__mad3sizes_valid(int, int, int, int)+0x60>
    4c83:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4c86:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4c8a:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    4c8d:	89 d6                	mov    esi,edx
    4c8f:	89 c7                	mov    edi,eax
    4c91:	e8 3c ff ff ff       	call   4bd2 <stbi__mul2sizes_valid(int, int)>
    4c96:	85 c0                	test   eax,eax
    4c98:	74 22                	je     4cbc <stbi__mad3sizes_valid(int, int, int, int)+0x60>
    4c9a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4c9d:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4ca1:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
    4ca5:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    4ca8:	89 d6                	mov    esi,edx
    4caa:	89 c7                	mov    edi,eax
    4cac:	e8 f7 fe ff ff       	call   4ba8 <stbi__addsizes_valid(int, int)>
    4cb1:	85 c0                	test   eax,eax
    4cb3:	74 07                	je     4cbc <stbi__mad3sizes_valid(int, int, int, int)+0x60>
    4cb5:	b8 01 00 00 00       	mov    eax,0x1
    4cba:	eb 05                	jmp    4cc1 <stbi__mad3sizes_valid(int, int, int, int)+0x65>
    4cbc:	b8 00 00 00 00       	mov    eax,0x0
    4cc1:	0f b6 c0             	movzx  eax,al
    4cc4:	c9                   	leave  
    4cc5:	c3                   	ret    

0000000000004cc6 <stbi__mad4sizes_valid(int, int, int, int, int)>:
    4cc6:	55                   	push   rbp
    4cc7:	48 89 e5             	mov    rbp,rsp
    4cca:	48 83 ec 18          	sub    rsp,0x18
    4cce:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4cd1:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4cd4:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    4cd7:	89 4d f0             	mov    DWORD PTR [rbp-0x10],ecx
    4cda:	44 89 45 ec          	mov    DWORD PTR [rbp-0x14],r8d
    4cde:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    4ce1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4ce4:	89 d6                	mov    esi,edx
    4ce6:	89 c7                	mov    edi,eax
    4ce8:	e8 e5 fe ff ff       	call   4bd2 <stbi__mul2sizes_valid(int, int)>
    4ced:	85 c0                	test   eax,eax
    4cef:	74 58                	je     4d49 <stbi__mad4sizes_valid(int, int, int, int, int)+0x83>
    4cf1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4cf4:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4cf8:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    4cfb:	89 d6                	mov    esi,edx
    4cfd:	89 c7                	mov    edi,eax
    4cff:	e8 ce fe ff ff       	call   4bd2 <stbi__mul2sizes_valid(int, int)>
    4d04:	85 c0                	test   eax,eax
    4d06:	74 41                	je     4d49 <stbi__mad4sizes_valid(int, int, int, int, int)+0x83>
    4d08:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4d0b:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4d0f:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
    4d13:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    4d16:	89 d6                	mov    esi,edx
    4d18:	89 c7                	mov    edi,eax
    4d1a:	e8 b3 fe ff ff       	call   4bd2 <stbi__mul2sizes_valid(int, int)>
    4d1f:	85 c0                	test   eax,eax
    4d21:	74 26                	je     4d49 <stbi__mad4sizes_valid(int, int, int, int, int)+0x83>
    4d23:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4d26:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4d2a:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
    4d2e:	0f af 45 f0          	imul   eax,DWORD PTR [rbp-0x10]
    4d32:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
    4d35:	89 d6                	mov    esi,edx
    4d37:	89 c7                	mov    edi,eax
    4d39:	e8 6a fe ff ff       	call   4ba8 <stbi__addsizes_valid(int, int)>
    4d3e:	85 c0                	test   eax,eax
    4d40:	74 07                	je     4d49 <stbi__mad4sizes_valid(int, int, int, int, int)+0x83>
    4d42:	b8 01 00 00 00       	mov    eax,0x1
    4d47:	eb 05                	jmp    4d4e <stbi__mad4sizes_valid(int, int, int, int, int)+0x88>
    4d49:	b8 00 00 00 00       	mov    eax,0x0
    4d4e:	0f b6 c0             	movzx  eax,al
    4d51:	c9                   	leave  
    4d52:	c3                   	ret    

0000000000004d53 <stbi__malloc_mad2(int, int, int)>:
    4d53:	55                   	push   rbp
    4d54:	48 89 e5             	mov    rbp,rsp
    4d57:	48 83 ec 10          	sub    rsp,0x10
    4d5b:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4d5e:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4d61:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    4d64:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    4d67:	8b 4d f8             	mov    ecx,DWORD PTR [rbp-0x8]
    4d6a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4d6d:	89 ce                	mov    esi,ecx
    4d6f:	89 c7                	mov    edi,eax
    4d71:	e8 9a fe ff ff       	call   4c10 <stbi__mad2sizes_valid(int, int, int)>
    4d76:	85 c0                	test   eax,eax
    4d78:	0f 94 c0             	sete   al
    4d7b:	84 c0                	test   al,al
    4d7d:	74 07                	je     4d86 <stbi__malloc_mad2(int, int, int)+0x33>
    4d7f:	b8 00 00 00 00       	mov    eax,0x0
    4d84:	eb 19                	jmp    4d9f <stbi__malloc_mad2(int, int, int)+0x4c>
    4d86:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4d89:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4d8d:	89 c2                	mov    edx,eax
    4d8f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    4d92:	01 d0                	add    eax,edx
    4d94:	48 98                	cdqe   
    4d96:	48 89 c7             	mov    rdi,rax
    4d99:	e8 f0 fd ff ff       	call   4b8e <stbi__malloc(unsigned long)>
    4d9e:	90                   	nop
    4d9f:	c9                   	leave  
    4da0:	c3                   	ret    

0000000000004da1 <stbi__malloc_mad3(int, int, int, int)>:
    4da1:	55                   	push   rbp
    4da2:	48 89 e5             	mov    rbp,rsp
    4da5:	48 83 ec 10          	sub    rsp,0x10
    4da9:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4dac:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4daf:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    4db2:	89 4d f0             	mov    DWORD PTR [rbp-0x10],ecx
    4db5:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
    4db8:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    4dbb:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
    4dbe:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4dc1:	89 c7                	mov    edi,eax
    4dc3:	e8 94 fe ff ff       	call   4c5c <stbi__mad3sizes_valid(int, int, int, int)>
    4dc8:	85 c0                	test   eax,eax
    4dca:	0f 94 c0             	sete   al
    4dcd:	84 c0                	test   al,al
    4dcf:	74 07                	je     4dd8 <stbi__malloc_mad3(int, int, int, int)+0x37>
    4dd1:	b8 00 00 00 00       	mov    eax,0x0
    4dd6:	eb 1d                	jmp    4df5 <stbi__malloc_mad3(int, int, int, int)+0x54>
    4dd8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4ddb:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4ddf:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
    4de3:	89 c2                	mov    edx,eax
    4de5:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    4de8:	01 d0                	add    eax,edx
    4dea:	48 98                	cdqe   
    4dec:	48 89 c7             	mov    rdi,rax
    4def:	e8 9a fd ff ff       	call   4b8e <stbi__malloc(unsigned long)>
    4df4:	90                   	nop
    4df5:	c9                   	leave  
    4df6:	c3                   	ret    

0000000000004df7 <stbi__malloc_mad4(int, int, int, int, int)>:
    4df7:	55                   	push   rbp
    4df8:	48 89 e5             	mov    rbp,rsp
    4dfb:	48 83 ec 20          	sub    rsp,0x20
    4dff:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4e02:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    4e05:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    4e08:	89 4d f0             	mov    DWORD PTR [rbp-0x10],ecx
    4e0b:	44 89 45 ec          	mov    DWORD PTR [rbp-0x14],r8d
    4e0f:	8b 7d ec             	mov    edi,DWORD PTR [rbp-0x14]
    4e12:	8b 4d f0             	mov    ecx,DWORD PTR [rbp-0x10]
    4e15:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    4e18:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
    4e1b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4e1e:	41 89 f8             	mov    r8d,edi
    4e21:	89 c7                	mov    edi,eax
    4e23:	e8 9e fe ff ff       	call   4cc6 <stbi__mad4sizes_valid(int, int, int, int, int)>
    4e28:	85 c0                	test   eax,eax
    4e2a:	0f 94 c0             	sete   al
    4e2d:	84 c0                	test   al,al
    4e2f:	74 07                	je     4e38 <stbi__malloc_mad4(int, int, int, int, int)+0x41>
    4e31:	b8 00 00 00 00       	mov    eax,0x0
    4e36:	eb 21                	jmp    4e59 <stbi__malloc_mad4(int, int, int, int, int)+0x62>
    4e38:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4e3b:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
    4e3f:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
    4e43:	0f af 45 f0          	imul   eax,DWORD PTR [rbp-0x10]
    4e47:	89 c2                	mov    edx,eax
    4e49:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    4e4c:	01 d0                	add    eax,edx
    4e4e:	48 98                	cdqe   
    4e50:	48 89 c7             	mov    rdi,rax
    4e53:	e8 36 fd ff ff       	call   4b8e <stbi__malloc(unsigned long)>
    4e58:	90                   	nop
    4e59:	c9                   	leave  
    4e5a:	c3                   	ret    

0000000000004e5b <stbi_image_free>:
    4e5b:	55                   	push   rbp
    4e5c:	48 89 e5             	mov    rbp,rsp
    4e5f:	48 83 ec 10          	sub    rsp,0x10
    4e63:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    4e67:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    4e6b:	48 89 c7             	mov    rdi,rax
    4e6e:	e8 bd f6 ff ff       	call   4530 <free@plt>
    4e73:	90                   	nop
    4e74:	c9                   	leave  
    4e75:	c3                   	ret    

0000000000004e76 <stbi_set_flip_vertically_on_load>:
    4e76:	55                   	push   rbp
    4e77:	48 89 e5             	mov    rbp,rsp
    4e7a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4e7d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4e80:	89 05 ee 58 04 00    	mov    DWORD PTR [rip+0x458ee],eax        # 4a774 <stbi__vertically_flip_on_load_global>
    4e86:	90                   	nop
    4e87:	5d                   	pop    rbp
    4e88:	c3                   	ret    

0000000000004e89 <stbi_set_flip_vertically_on_load_thread>:
    4e89:	55                   	push   rbp
    4e8a:	48 89 e5             	mov    rbp,rsp
    4e8d:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    4e90:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    4e93:	64 89 04 25 f8 ff ff ff 	mov    DWORD PTR fs:0xfffffffffffffff8,eax
    4e9b:	64 c7 04 25 fc ff ff ff 01 00 00 00 	mov    DWORD PTR fs:0xfffffffffffffffc,0x1
    4ea7:	90                   	nop
    4ea8:	5d                   	pop    rbp
    4ea9:	c3                   	ret    

0000000000004eaa <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)>:
    4eaa:	55                   	push   rbp
    4eab:	48 89 e5             	mov    rbp,rsp
    4eae:	48 83 ec 40          	sub    rsp,0x40
    4eb2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    4eb6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    4eba:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    4ebe:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    4ec2:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
    4ec6:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
    4eca:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    4ece:	ba 0c 00 00 00       	mov    edx,0xc
    4ed3:	be 00 00 00 00       	mov    esi,0x0
    4ed8:	48 89 c7             	mov    rdi,rax
    4edb:	e8 00 f3 ff ff       	call   41e0 <memset@plt>
    4ee0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    4ee4:	c7 00 08 00 00 00    	mov    DWORD PTR [rax],0x8
    4eea:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    4eee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
    4ef5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    4ef9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
    4f00:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4f04:	48 89 c7             	mov    rdi,rax
    4f07:	e8 67 e7 00 00       	call   13673 <stbi__jpeg_test(stbi__context*)>
    4f0c:	85 c0                	test   eax,eax
    4f0e:	0f 95 c0             	setne  al
    4f11:	84 c0                	test   al,al
    4f13:	74 2a                	je     4f3f <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x95>
    4f15:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    4f19:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    4f1c:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    4f20:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    4f24:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    4f28:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4f2c:	4d 89 c1             	mov    r9,r8
    4f2f:	41 89 f8             	mov    r8d,edi
    4f32:	48 89 c7             	mov    rdi,rax
    4f35:	e8 c0 e6 00 00       	call   135fa <stbi__jpeg_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    4f3a:	e9 39 02 00 00       	jmp    5178 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2ce>
    4f3f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4f43:	48 89 c7             	mov    rdi,rax
    4f46:	e8 f5 31 01 00       	call   18140 <stbi__png_test(stbi__context*)>
    4f4b:	85 c0                	test   eax,eax
    4f4d:	0f 95 c0             	setne  al
    4f50:	84 c0                	test   al,al
    4f52:	74 2a                	je     4f7e <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0xd4>
    4f54:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    4f58:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    4f5b:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    4f5f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    4f63:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    4f67:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4f6b:	4d 89 c1             	mov    r9,r8
    4f6e:	41 89 f8             	mov    r8d,edi
    4f71:	48 89 c7             	mov    rdi,rax
    4f74:	e8 55 31 01 00       	call   180ce <stbi__png_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    4f79:	e9 fa 01 00 00       	jmp    5178 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2ce>
    4f7e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4f82:	48 89 c7             	mov    rdi,rax
    4f85:	e8 1a 34 01 00       	call   183a4 <stbi__bmp_test(stbi__context*)>
    4f8a:	85 c0                	test   eax,eax
    4f8c:	0f 95 c0             	setne  al
    4f8f:	84 c0                	test   al,al
    4f91:	74 2a                	je     4fbd <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x113>
    4f93:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    4f97:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    4f9a:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    4f9e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    4fa2:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    4fa6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4faa:	4d 89 c1             	mov    r9,r8
    4fad:	41 89 f8             	mov    r8d,edi
    4fb0:	48 89 c7             	mov    rdi,rax
    4fb3:	e8 56 3a 01 00       	call   18a0e <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    4fb8:	e9 bb 01 00 00       	jmp    5178 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2ce>
    4fbd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4fc1:	48 89 c7             	mov    rdi,rax
    4fc4:	e8 dd 6b 01 00       	call   1bba6 <stbi__gif_test(stbi__context*)>
    4fc9:	85 c0                	test   eax,eax
    4fcb:	0f 95 c0             	setne  al
    4fce:	84 c0                	test   al,al
    4fd0:	74 2a                	je     4ffc <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x152>
    4fd2:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    4fd6:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    4fd9:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    4fdd:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    4fe1:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    4fe5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    4fe9:	4d 89 c1             	mov    r9,r8
    4fec:	41 89 f8             	mov    r8d,edi
    4fef:	48 89 c7             	mov    rdi,rax
    4ff2:	e8 ed 7f 01 00       	call   1cfe4 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    4ff7:	e9 7c 01 00 00       	jmp    5178 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2ce>
    4ffc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5000:	48 89 c7             	mov    rdi,rax
    5003:	e8 89 58 01 00       	call   1a891 <stbi__psd_test(stbi__context*)>
    5008:	85 c0                	test   eax,eax
    500a:	0f 95 c0             	setne  al
    500d:	84 c0                	test   al,al
    500f:	74 31                	je     5042 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x198>
    5011:	4c 8b 4d c0          	mov    r9,QWORD PTR [rbp-0x40]
    5015:	44 8b 45 cc          	mov    r8d,DWORD PTR [rbp-0x34]
    5019:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    501d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    5021:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    5025:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5029:	48 83 ec 08          	sub    rsp,0x8
    502d:	8b 7d 10             	mov    edi,DWORD PTR [rbp+0x10]
    5030:	57                   	push   rdi
    5031:	48 89 c7             	mov    rdi,rax
    5034:	e8 86 59 01 00       	call   1a9bf <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)>
    5039:	48 83 c4 10          	add    rsp,0x10
    503d:	e9 36 01 00 00       	jmp    5178 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2ce>
    5042:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5046:	48 89 c7             	mov    rdi,rax
    5049:	e8 81 6a 01 00       	call   1bacf <stbi__pic_test(stbi__context*)>
    504e:	85 c0                	test   eax,eax
    5050:	0f 95 c0             	setne  al
    5053:	84 c0                	test   al,al
    5055:	74 2a                	je     5081 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x1d7>
    5057:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    505b:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    505e:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    5062:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    5066:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    506a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    506e:	4d 89 c1             	mov    r9,r8
    5071:	41 89 f8             	mov    r8d,edi
    5074:	48 89 c7             	mov    rdi,rax
    5077:	e8 7d 68 01 00       	call   1b8f9 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    507c:	e9 f7 00 00 00       	jmp    5178 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2ce>
    5081:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5085:	48 89 c7             	mov    rdi,rax
    5088:	e8 33 95 01 00       	call   1e5c0 <stbi__pnm_test(stbi__context*)>
    508d:	85 c0                	test   eax,eax
    508f:	0f 95 c0             	setne  al
    5092:	84 c0                	test   al,al
    5094:	74 2a                	je     50c0 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x216>
    5096:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    509a:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    509d:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    50a1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    50a5:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    50a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    50ad:	4d 89 c1             	mov    r9,r8
    50b0:	41 89 f8             	mov    r8d,edi
    50b3:	48 89 c7             	mov    rdi,rax
    50b6:	e8 5b 95 01 00       	call   1e616 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    50bb:	e9 b8 00 00 00       	jmp    5178 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2ce>
    50c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    50c4:	48 89 c7             	mov    rdi,rax
    50c7:	e8 39 81 01 00       	call   1d205 <stbi__hdr_test(stbi__context*)>
    50cc:	85 c0                	test   eax,eax
    50ce:	0f 95 c0             	setne  al
    50d1:	84 c0                	test   al,al
    50d3:	74 53                	je     5128 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x27e>
    50d5:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    50d9:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    50dc:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    50e0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    50e4:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    50e8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    50ec:	4d 89 c1             	mov    r9,r8
    50ef:	41 89 f8             	mov    r8d,edi
    50f2:	48 89 c7             	mov    rdi,rax
    50f5:	e8 15 84 01 00       	call   1d50f <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    50fa:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    50fe:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
    5102:	75 08                	jne    510c <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x262>
    5104:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    5108:	8b 00                	mov    eax,DWORD PTR [rax]
    510a:	eb 03                	jmp    510f <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x265>
    510c:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    510f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    5113:	8b 12                	mov    edx,DWORD PTR [rdx]
    5115:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
    5119:	8b 31                	mov    esi,DWORD PTR [rcx]
    511b:	48 8b 7d f8          	mov    rdi,QWORD PTR [rbp-0x8]
    511f:	89 c1                	mov    ecx,eax
    5121:	e8 a0 24 00 00       	call   75c6 <stbi__hdr_to_ldr(float*, int, int, int)>
    5126:	eb 50                	jmp    5178 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2ce>
    5128:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    512c:	48 89 c7             	mov    rdi,rax
    512f:	e8 64 4c 01 00       	call   19d98 <stbi__tga_test(stbi__context*)>
    5134:	85 c0                	test   eax,eax
    5136:	0f 95 c0             	setne  al
    5139:	84 c0                	test   al,al
    513b:	74 27                	je     5164 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2ba>
    513d:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
    5141:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    5144:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    5148:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    514c:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    5150:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5154:	4d 89 c1             	mov    r9,r8
    5157:	41 89 f8             	mov    r8d,edi
    515a:	48 89 c7             	mov    rdi,rax
    515d:	e8 9b 4e 01 00       	call   19ffd <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    5162:	eb 14                	jmp    5178 <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2ce>
    5164:	48 8d 05 b5 4e 03 00 	lea    rax,[rip+0x34eb5]        # 3a020 <_IO_stdin_used+0x20>
    516b:	48 89 c7             	mov    rdi,rax
    516e:	e8 ff f9 ff ff       	call   4b72 <stbi__err(char const*)>
    5173:	b8 00 00 00 00       	mov    eax,0x0
    5178:	c9                   	leave  
    5179:	c3                   	ret    

000000000000517a <stbi__convert_16_to_8(unsigned short*, int, int, int)>:
    517a:	55                   	push   rbp
    517b:	48 89 e5             	mov    rbp,rsp
    517e:	48 83 ec 30          	sub    rsp,0x30
    5182:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    5186:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    5189:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
    518c:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    518f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    5192:	0f af 45 e0          	imul   eax,DWORD PTR [rbp-0x20]
    5196:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
    5199:	0f af c2             	imul   eax,edx
    519c:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    519f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    51a2:	48 98                	cdqe   
    51a4:	48 89 c7             	mov    rdi,rax
    51a7:	e8 e2 f9 ff ff       	call   4b8e <stbi__malloc(unsigned long)>
    51ac:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    51b0:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    51b5:	75 16                	jne    51cd <stbi__convert_16_to_8(unsigned short*, int, int, int)+0x53>
    51b7:	48 8d 05 75 4e 03 00 	lea    rax,[rip+0x34e75]        # 3a033 <_IO_stdin_used+0x33>
    51be:	48 89 c7             	mov    rdi,rax
    51c1:	e8 ac f9 ff ff       	call   4b72 <stbi__err(char const*)>
    51c6:	b8 00 00 00 00       	mov    eax,0x0
    51cb:	eb 4f                	jmp    521c <stbi__convert_16_to_8(unsigned short*, int, int, int)+0xa2>
    51cd:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
    51d4:	eb 2e                	jmp    5204 <stbi__convert_16_to_8(unsigned short*, int, int, int)+0x8a>
    51d6:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    51d9:	48 98                	cdqe   
    51db:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    51df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    51e3:	48 01 d0             	add    rax,rdx
    51e6:	0f b7 00             	movzx  eax,WORD PTR [rax]
    51e9:	66 c1 e8 08          	shr    ax,0x8
    51ed:	89 c1                	mov    ecx,eax
    51ef:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    51f2:	48 63 d0             	movsxd rdx,eax
    51f5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    51f9:	48 01 d0             	add    rax,rdx
    51fc:	89 ca                	mov    edx,ecx
    51fe:	88 10                	mov    BYTE PTR [rax],dl
    5200:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
    5204:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    5207:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
    520a:	7c ca                	jl     51d6 <stbi__convert_16_to_8(unsigned short*, int, int, int)+0x5c>
    520c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5210:	48 89 c7             	mov    rdi,rax
    5213:	e8 18 f3 ff ff       	call   4530 <free@plt>
    5218:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    521c:	c9                   	leave  
    521d:	c3                   	ret    

000000000000521e <stbi__convert_8_to_16(unsigned char*, int, int, int)>:
    521e:	55                   	push   rbp
    521f:	48 89 e5             	mov    rbp,rsp
    5222:	48 83 ec 30          	sub    rsp,0x30
    5226:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    522a:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    522d:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
    5230:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    5233:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    5236:	0f af 45 e0          	imul   eax,DWORD PTR [rbp-0x20]
    523a:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
    523d:	0f af c2             	imul   eax,edx
    5240:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    5243:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    5246:	01 c0                	add    eax,eax
    5248:	48 98                	cdqe   
    524a:	48 89 c7             	mov    rdi,rax
    524d:	e8 3c f9 ff ff       	call   4b8e <stbi__malloc(unsigned long)>
    5252:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5256:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    525b:	75 16                	jne    5273 <stbi__convert_8_to_16(unsigned char*, int, int, int)+0x55>
    525d:	48 8d 05 cf 4d 03 00 	lea    rax,[rip+0x34dcf]        # 3a033 <_IO_stdin_used+0x33>
    5264:	48 89 c7             	mov    rdi,rax
    5267:	e8 06 f9 ff ff       	call   4b72 <stbi__err(char const*)>
    526c:	b8 00 00 00 00       	mov    eax,0x0
    5271:	eb 65                	jmp    52d8 <stbi__convert_8_to_16(unsigned char*, int, int, int)+0xba>
    5273:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
    527a:	eb 44                	jmp    52c0 <stbi__convert_8_to_16(unsigned char*, int, int, int)+0xa2>
    527c:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    527f:	48 63 d0             	movsxd rdx,eax
    5282:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5286:	48 01 d0             	add    rax,rdx
    5289:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    528c:	0f b6 c0             	movzx  eax,al
    528f:	c1 e0 08             	shl    eax,0x8
    5292:	89 c1                	mov    ecx,eax
    5294:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    5297:	48 63 d0             	movsxd rdx,eax
    529a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    529e:	48 01 d0             	add    rax,rdx
    52a1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    52a4:	0f b6 d0             	movzx  edx,al
    52a7:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    52aa:	48 98                	cdqe   
    52ac:	48 8d 34 00          	lea    rsi,[rax+rax*1]
    52b0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    52b4:	48 01 f0             	add    rax,rsi
    52b7:	01 ca                	add    edx,ecx
    52b9:	66 89 10             	mov    WORD PTR [rax],dx
    52bc:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
    52c0:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    52c3:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
    52c6:	7c b4                	jl     527c <stbi__convert_8_to_16(unsigned char*, int, int, int)+0x5e>
    52c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    52cc:	48 89 c7             	mov    rdi,rax
    52cf:	e8 5c f2 ff ff       	call   4530 <free@plt>
    52d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    52d8:	c9                   	leave  
    52d9:	c3                   	ret    

00000000000052da <stbi__vertical_flip(void*, int, int, int)>:
    52da:	55                   	push   rbp
    52db:	48 89 e5             	mov    rbp,rsp
    52de:	48 81 ec 70 08 00 00 	sub    rsp,0x870
    52e5:	48 89 bd a8 f7 ff ff 	mov    QWORD PTR [rbp-0x858],rdi
    52ec:	89 b5 a4 f7 ff ff    	mov    DWORD PTR [rbp-0x85c],esi
    52f2:	89 95 a0 f7 ff ff    	mov    DWORD PTR [rbp-0x860],edx
    52f8:	89 8d 9c f7 ff ff    	mov    DWORD PTR [rbp-0x864],ecx
    52fe:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5307:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    530b:	31 c0                	xor    eax,eax
    530d:	8b 85 a4 f7 ff ff    	mov    eax,DWORD PTR [rbp-0x85c]
    5313:	48 63 d0             	movsxd rdx,eax
    5316:	8b 85 9c f7 ff ff    	mov    eax,DWORD PTR [rbp-0x864]
    531c:	48 98                	cdqe   
    531e:	48 0f af c2          	imul   rax,rdx
    5322:	48 89 85 d8 f7 ff ff 	mov    QWORD PTR [rbp-0x828],rax
    5329:	48 8b 85 a8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x858]
    5330:	48 89 85 e0 f7 ff ff 	mov    QWORD PTR [rbp-0x820],rax
    5337:	c7 85 bc f7 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x844],0x0
    5341:	e9 1d 01 00 00       	jmp    5463 <stbi__vertical_flip(void*, int, int, int)+0x189>
    5346:	8b 85 bc f7 ff ff    	mov    eax,DWORD PTR [rbp-0x844]
    534c:	48 98                	cdqe   
    534e:	48 0f af 85 d8 f7 ff ff 	imul   rax,QWORD PTR [rbp-0x828]
    5356:	48 89 c2             	mov    rdx,rax
    5359:	48 8b 85 e0 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x820]
    5360:	48 01 d0             	add    rax,rdx
    5363:	48 89 85 c0 f7 ff ff 	mov    QWORD PTR [rbp-0x840],rax
    536a:	8b 85 a0 f7 ff ff    	mov    eax,DWORD PTR [rbp-0x860]
    5370:	2b 85 bc f7 ff ff    	sub    eax,DWORD PTR [rbp-0x844]
    5376:	83 e8 01             	sub    eax,0x1
    5379:	48 98                	cdqe   
    537b:	48 0f af 85 d8 f7 ff ff 	imul   rax,QWORD PTR [rbp-0x828]
    5383:	48 89 c2             	mov    rdx,rax
    5386:	48 8b 85 e0 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x820]
    538d:	48 01 d0             	add    rax,rdx
    5390:	48 89 85 c8 f7 ff ff 	mov    QWORD PTR [rbp-0x838],rax
    5397:	48 8b 85 d8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x828]
    539e:	48 89 85 d0 f7 ff ff 	mov    QWORD PTR [rbp-0x830],rax
    53a5:	e9 a4 00 00 00       	jmp    544e <stbi__vertical_flip(void*, int, int, int)+0x174>
    53aa:	48 8b 85 d0 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x830]
    53b1:	ba 00 08 00 00       	mov    edx,0x800
    53b6:	48 39 d0             	cmp    rax,rdx
    53b9:	48 0f 47 c2          	cmova  rax,rdx
    53bd:	48 89 85 e8 f7 ff ff 	mov    QWORD PTR [rbp-0x818],rax
    53c4:	48 8b 95 e8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x818]
    53cb:	48 8b 8d c0 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x840]
    53d2:	48 8d 85 f0 f7 ff ff 	lea    rax,[rbp-0x810]
    53d9:	48 89 ce             	mov    rsi,rcx
    53dc:	48 89 c7             	mov    rdi,rax
    53df:	e8 8c ef ff ff       	call   4370 <memcpy@plt>
    53e4:	48 8b 95 e8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x818]
    53eb:	48 8b 8d c8 f7 ff ff 	mov    rcx,QWORD PTR [rbp-0x838]
    53f2:	48 8b 85 c0 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x840]
    53f9:	48 89 ce             	mov    rsi,rcx
    53fc:	48 89 c7             	mov    rdi,rax
    53ff:	e8 6c ef ff ff       	call   4370 <memcpy@plt>
    5404:	48 8b 95 e8 f7 ff ff 	mov    rdx,QWORD PTR [rbp-0x818]
    540b:	48 8d 8d f0 f7 ff ff 	lea    rcx,[rbp-0x810]
    5412:	48 8b 85 c8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x838]
    5419:	48 89 ce             	mov    rsi,rcx
    541c:	48 89 c7             	mov    rdi,rax
    541f:	e8 4c ef ff ff       	call   4370 <memcpy@plt>
    5424:	48 8b 85 e8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x818]
    542b:	48 01 85 c0 f7 ff ff 	add    QWORD PTR [rbp-0x840],rax
    5432:	48 8b 85 e8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x818]
    5439:	48 01 85 c8 f7 ff ff 	add    QWORD PTR [rbp-0x838],rax
    5440:	48 8b 85 e8 f7 ff ff 	mov    rax,QWORD PTR [rbp-0x818]
    5447:	48 29 85 d0 f7 ff ff 	sub    QWORD PTR [rbp-0x830],rax
    544e:	48 83 bd d0 f7 ff ff 00 	cmp    QWORD PTR [rbp-0x830],0x0
    5456:	0f 85 4e ff ff ff    	jne    53aa <stbi__vertical_flip(void*, int, int, int)+0xd0>
    545c:	83 85 bc f7 ff ff 01 	add    DWORD PTR [rbp-0x844],0x1
    5463:	8b 85 a0 f7 ff ff    	mov    eax,DWORD PTR [rbp-0x860]
    5469:	d1 f8                	sar    eax,1
    546b:	39 85 bc f7 ff ff    	cmp    DWORD PTR [rbp-0x844],eax
    5471:	0f 8c cf fe ff ff    	jl     5346 <stbi__vertical_flip(void*, int, int, int)+0x6c>
    5477:	90                   	nop
    5478:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    547c:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
    5485:	74 05                	je     548c <stbi__vertical_flip(void*, int, int, int)+0x1b2>
    5487:	e8 54 f0 ff ff       	call   44e0 <__stack_chk_fail@plt>
    548c:	c9                   	leave  
    548d:	c3                   	ret    

000000000000548e <stbi__vertical_flip_slices(void*, int, int, int, int)>:
    548e:	55                   	push   rbp
    548f:	48 89 e5             	mov    rbp,rsp
    5492:	48 83 ec 30          	sub    rsp,0x30
    5496:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    549a:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    549d:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
    54a0:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
    54a3:	44 89 45 d8          	mov    DWORD PTR [rbp-0x28],r8d
    54a7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    54aa:	0f af 45 e0          	imul   eax,DWORD PTR [rbp-0x20]
    54ae:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
    54b1:	0f af c2             	imul   eax,edx
    54b4:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    54b7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    54bb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    54bf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
    54c6:	eb 22                	jmp    54ea <stbi__vertical_flip_slices(void*, int, int, int, int)+0x5c>
    54c8:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
    54cb:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
    54ce:	8b 75 e4             	mov    esi,DWORD PTR [rbp-0x1c]
    54d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    54d5:	48 89 c7             	mov    rdi,rax
    54d8:	e8 fd fd ff ff       	call   52da <stbi__vertical_flip(void*, int, int, int)>
    54dd:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    54e0:	48 98                	cdqe   
    54e2:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
    54e6:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
    54ea:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    54ed:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
    54f0:	7c d6                	jl     54c8 <stbi__vertical_flip_slices(void*, int, int, int, int)+0x3a>
    54f2:	90                   	nop
    54f3:	90                   	nop
    54f4:	c9                   	leave  
    54f5:	c3                   	ret    

00000000000054f6 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)>:
    54f6:	55                   	push   rbp
    54f7:	48 89 e5             	mov    rbp,rsp
    54fa:	48 83 ec 60          	sub    rsp,0x60
    54fe:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    5502:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
    5506:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    550a:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    550e:	44 89 45 ac          	mov    DWORD PTR [rbp-0x54],r8d
    5512:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    551b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    551f:	31 c0                	xor    eax,eax
    5521:	4c 8d 45 ec          	lea    r8,[rbp-0x14]
    5525:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
    5528:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
    552c:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    5530:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
    5534:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    5538:	48 83 ec 08          	sub    rsp,0x8
    553c:	6a 08                	push   0x8
    553e:	4d 89 c1             	mov    r9,r8
    5541:	41 89 f8             	mov    r8d,edi
    5544:	48 89 c7             	mov    rdi,rax
    5547:	e8 5e f9 ff ff       	call   4eaa <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)>
    554c:	48 83 c4 10          	add    rsp,0x10
    5550:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    5554:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
    5559:	75 0a                	jne    5565 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0x6f>
    555b:	b8 00 00 00 00       	mov    eax,0x0
    5560:	e9 be 00 00 00       	jmp    5623 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0x12d>
    5565:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    5568:	83 f8 08             	cmp    eax,0x8
    556b:	74 63                	je     55d0 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0xda>
    556d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    5570:	83 f8 10             	cmp    eax,0x10
    5573:	74 28                	je     559d <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0xa7>
    5575:	48 8d 05 c4 4a 03 00 	lea    rax,[rip+0x34ac4]        # 3a040 <_IO_stdin_used+0x40>
    557c:	48 89 c1             	mov    rcx,rax
    557f:	ba 97 04 00 00       	mov    edx,0x497
    5584:	48 8d 05 0d 4b 03 00 	lea    rax,[rip+0x34b0d]        # 3a098 <_IO_stdin_used+0x98>
    558b:	48 89 c6             	mov    rsi,rax
    558e:	48 8d 05 23 4b 03 00 	lea    rax,[rip+0x34b23]        # 3a0b8 <_IO_stdin_used+0xb8>
    5595:	48 89 c7             	mov    rdi,rax
    5598:	e8 e3 ec ff ff       	call   4280 <__assert_fail@plt>
    559d:	83 7d ac 00          	cmp    DWORD PTR [rbp-0x54],0x0
    55a1:	75 08                	jne    55ab <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0xb5>
    55a3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    55a7:	8b 00                	mov    eax,DWORD PTR [rax]
    55a9:	eb 03                	jmp    55ae <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0xb8>
    55ab:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
    55ae:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    55b2:	8b 12                	mov    edx,DWORD PTR [rdx]
    55b4:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
    55b8:	8b 31                	mov    esi,DWORD PTR [rcx]
    55ba:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
    55be:	89 c1                	mov    ecx,eax
    55c0:	e8 b5 fb ff ff       	call   517a <stbi__convert_16_to_8(unsigned short*, int, int, int)>
    55c5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    55c9:	c7 45 ec 08 00 00 00 	mov    DWORD PTR [rbp-0x14],0x8
    55d0:	64 8b 04 25 fc ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffffc
    55d8:	85 c0                	test   eax,eax
    55da:	74 0a                	je     55e6 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0xf0>
    55dc:	64 8b 04 25 f8 ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffff8
    55e4:	eb 06                	jmp    55ec <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0xf6>
    55e6:	8b 05 88 51 04 00    	mov    eax,DWORD PTR [rip+0x45188]        # 4a774 <stbi__vertically_flip_on_load_global>
    55ec:	85 c0                	test   eax,eax
    55ee:	74 2f                	je     561f <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0x129>
    55f0:	83 7d ac 00          	cmp    DWORD PTR [rbp-0x54],0x0
    55f4:	75 08                	jne    55fe <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0x108>
    55f6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    55fa:	8b 00                	mov    eax,DWORD PTR [rax]
    55fc:	eb 03                	jmp    5601 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0x10b>
    55fe:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
    5601:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    5604:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    5608:	8b 10                	mov    edx,DWORD PTR [rax]
    560a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    560e:	8b 30                	mov    esi,DWORD PTR [rax]
    5610:	8b 4d dc             	mov    ecx,DWORD PTR [rbp-0x24]
    5613:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    5617:	48 89 c7             	mov    rdi,rax
    561a:	e8 bb fc ff ff       	call   52da <stbi__vertical_flip(void*, int, int, int)>
    561f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    5623:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    5627:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    5630:	74 05                	je     5637 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)+0x141>
    5632:	e8 a9 ee ff ff       	call   44e0 <__stack_chk_fail@plt>
    5637:	c9                   	leave  
    5638:	c3                   	ret    

0000000000005639 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)>:
    5639:	55                   	push   rbp
    563a:	48 89 e5             	mov    rbp,rsp
    563d:	48 83 ec 60          	sub    rsp,0x60
    5641:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    5645:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
    5649:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    564d:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    5651:	44 89 45 ac          	mov    DWORD PTR [rbp-0x54],r8d
    5655:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    565e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5662:	31 c0                	xor    eax,eax
    5664:	4c 8d 45 ec          	lea    r8,[rbp-0x14]
    5668:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
    566b:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
    566f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    5673:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
    5677:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    567b:	48 83 ec 08          	sub    rsp,0x8
    567f:	6a 10                	push   0x10
    5681:	4d 89 c1             	mov    r9,r8
    5684:	41 89 f8             	mov    r8d,edi
    5687:	48 89 c7             	mov    rdi,rax
    568a:	e8 1b f8 ff ff       	call   4eaa <stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)>
    568f:	48 83 c4 10          	add    rsp,0x10
    5693:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    5697:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
    569c:	75 0a                	jne    56a8 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0x6f>
    569e:	b8 00 00 00 00       	mov    eax,0x0
    56a3:	e9 c4 00 00 00       	jmp    576c <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0x133>
    56a8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    56ab:	83 f8 10             	cmp    eax,0x10
    56ae:	74 63                	je     5713 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0xda>
    56b0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    56b3:	83 f8 08             	cmp    eax,0x8
    56b6:	74 28                	je     56e0 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0xa7>
    56b8:	48 8d 05 19 4a 03 00 	lea    rax,[rip+0x34a19]        # 3a0d8 <_IO_stdin_used+0xd8>
    56bf:	48 89 c1             	mov    rcx,rax
    56c2:	ba af 04 00 00       	mov    edx,0x4af
    56c7:	48 8d 05 ca 49 03 00 	lea    rax,[rip+0x349ca]        # 3a098 <_IO_stdin_used+0x98>
    56ce:	48 89 c6             	mov    rsi,rax
    56d1:	48 8d 05 56 4a 03 00 	lea    rax,[rip+0x34a56]        # 3a12e <_IO_stdin_used+0x12e>
    56d8:	48 89 c7             	mov    rdi,rax
    56db:	e8 a0 eb ff ff       	call   4280 <__assert_fail@plt>
    56e0:	83 7d ac 00          	cmp    DWORD PTR [rbp-0x54],0x0
    56e4:	75 08                	jne    56ee <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0xb5>
    56e6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    56ea:	8b 00                	mov    eax,DWORD PTR [rax]
    56ec:	eb 03                	jmp    56f1 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0xb8>
    56ee:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
    56f1:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    56f5:	8b 12                	mov    edx,DWORD PTR [rdx]
    56f7:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
    56fb:	8b 31                	mov    esi,DWORD PTR [rcx]
    56fd:	48 8b 7d e0          	mov    rdi,QWORD PTR [rbp-0x20]
    5701:	89 c1                	mov    ecx,eax
    5703:	e8 16 fb ff ff       	call   521e <stbi__convert_8_to_16(unsigned char*, int, int, int)>
    5708:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    570c:	c7 45 ec 10 00 00 00 	mov    DWORD PTR [rbp-0x14],0x10
    5713:	64 8b 04 25 fc ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffffc
    571b:	85 c0                	test   eax,eax
    571d:	74 0a                	je     5729 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0xf0>
    571f:	64 8b 04 25 f8 ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffff8
    5727:	eb 06                	jmp    572f <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0xf6>
    5729:	8b 05 45 50 04 00    	mov    eax,DWORD PTR [rip+0x45045]        # 4a774 <stbi__vertically_flip_on_load_global>
    572f:	85 c0                	test   eax,eax
    5731:	74 35                	je     5768 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0x12f>
    5733:	83 7d ac 00          	cmp    DWORD PTR [rbp-0x54],0x0
    5737:	75 08                	jne    5741 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0x108>
    5739:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    573d:	8b 00                	mov    eax,DWORD PTR [rax]
    573f:	eb 03                	jmp    5744 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0x10b>
    5741:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
    5744:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    5747:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    574a:	48 98                	cdqe   
    574c:	01 c0                	add    eax,eax
    574e:	89 c1                	mov    ecx,eax
    5750:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    5754:	8b 10                	mov    edx,DWORD PTR [rax]
    5756:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    575a:	8b 30                	mov    esi,DWORD PTR [rax]
    575c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    5760:	48 89 c7             	mov    rdi,rax
    5763:	e8 72 fb ff ff       	call   52da <stbi__vertical_flip(void*, int, int, int)>
    5768:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    576c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    5770:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    5779:	74 05                	je     5780 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)+0x147>
    577b:	e8 60 ed ff ff       	call   44e0 <__stack_chk_fail@plt>
    5780:	c9                   	leave  
    5781:	c3                   	ret    

0000000000005782 <stbi__float_postprocess(float*, int*, int*, int*, int)>:
    5782:	55                   	push   rbp
    5783:	48 89 e5             	mov    rbp,rsp
    5786:	48 83 ec 40          	sub    rsp,0x40
    578a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    578e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    5792:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    5796:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    579a:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
    579e:	64 8b 04 25 fc ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffffc
    57a6:	85 c0                	test   eax,eax
    57a8:	74 0a                	je     57b4 <stbi__float_postprocess(float*, int*, int*, int*, int)+0x32>
    57aa:	64 8b 04 25 f8 ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffff8
    57b2:	eb 06                	jmp    57ba <stbi__float_postprocess(float*, int*, int*, int*, int)+0x38>
    57b4:	8b 05 ba 4f 04 00    	mov    eax,DWORD PTR [rip+0x44fba]        # 4a774 <stbi__vertically_flip_on_load_global>
    57ba:	85 c0                	test   eax,eax
    57bc:	74 3d                	je     57fb <stbi__float_postprocess(float*, int*, int*, int*, int)+0x79>
    57be:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
    57c3:	74 36                	je     57fb <stbi__float_postprocess(float*, int*, int*, int*, int)+0x79>
    57c5:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
    57c9:	75 08                	jne    57d3 <stbi__float_postprocess(float*, int*, int*, int*, int)+0x51>
    57cb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    57cf:	8b 00                	mov    eax,DWORD PTR [rax]
    57d1:	eb 03                	jmp    57d6 <stbi__float_postprocess(float*, int*, int*, int*, int)+0x54>
    57d3:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    57d6:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    57d9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    57dc:	48 98                	cdqe   
    57de:	c1 e0 02             	shl    eax,0x2
    57e1:	89 c1                	mov    ecx,eax
    57e3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    57e7:	8b 10                	mov    edx,DWORD PTR [rax]
    57e9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    57ed:	8b 30                	mov    esi,DWORD PTR [rax]
    57ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    57f3:	48 89 c7             	mov    rdi,rax
    57f6:	e8 df fa ff ff       	call   52da <stbi__vertical_flip(void*, int, int, int)>
    57fb:	90                   	nop
    57fc:	c9                   	leave  
    57fd:	c3                   	ret    

00000000000057fe <stbi__fopen(char const*, char const*)>:
    57fe:	55                   	push   rbp
    57ff:	48 89 e5             	mov    rbp,rsp
    5802:	48 83 ec 20          	sub    rsp,0x20
    5806:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    580a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    580e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    5812:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5816:	48 89 d6             	mov    rsi,rdx
    5819:	48 89 c7             	mov    rdi,rax
    581c:	e8 ff ec ff ff       	call   4520 <fopen@plt>
    5821:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5825:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    5829:	c9                   	leave  
    582a:	c3                   	ret    

000000000000582b <stbi_load>:
    582b:	55                   	push   rbp
    582c:	48 89 e5             	mov    rbp,rsp
    582f:	48 83 ec 40          	sub    rsp,0x40
    5833:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    5837:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    583b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    583f:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    5843:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
    5847:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    584b:	48 8d 15 f5 48 03 00 	lea    rdx,[rip+0x348f5]        # 3a147 <_IO_stdin_used+0x147>
    5852:	48 89 d6             	mov    rsi,rdx
    5855:	48 89 c7             	mov    rdi,rax
    5858:	e8 a1 ff ff ff       	call   57fe <stbi__fopen(char const*, char const*)>
    585d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    5861:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
    5866:	75 16                	jne    587e <stbi_load+0x53>
    5868:	48 8d 05 db 48 03 00 	lea    rax,[rip+0x348db]        # 3a14a <_IO_stdin_used+0x14a>
    586f:	48 89 c7             	mov    rdi,rax
    5872:	e8 fb f2 ff ff       	call   4b72 <stbi__err(char const*)>
    5877:	b8 00 00 00 00       	mov    eax,0x0
    587c:	eb 32                	jmp    58b0 <stbi_load+0x85>
    587e:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    5881:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    5885:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    5889:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    588d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    5891:	41 89 f8             	mov    r8d,edi
    5894:	48 89 c7             	mov    rdi,rax
    5897:	e8 16 00 00 00       	call   58b2 <stbi_load_from_file>
    589c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    58a0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    58a4:	48 89 c7             	mov    rdi,rax
    58a7:	e8 74 eb ff ff       	call   4420 <fclose@plt>
    58ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    58b0:	c9                   	leave  
    58b1:	c3                   	ret    

00000000000058b2 <stbi_load_from_file>:
    58b2:	55                   	push   rbp
    58b3:	48 89 e5             	mov    rbp,rsp
    58b6:	48 81 ec 20 01 00 00 	sub    rsp,0x120
    58bd:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
    58c4:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
    58cb:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
    58d2:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
    58d9:	44 89 85 ec fe ff ff 	mov    DWORD PTR [rbp-0x114],r8d
    58e0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    58e9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    58ed:	31 c0                	xor    eax,eax
    58ef:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
    58f6:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    58fd:	48 89 d6             	mov    rsi,rdx
    5900:	48 89 c7             	mov    rdi,rax
    5903:	e8 f7 f1 ff ff       	call   4aff <stbi__start_file(stbi__context*, _IO_FILE*)>
    5908:	8b bd ec fe ff ff    	mov    edi,DWORD PTR [rbp-0x114]
    590e:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
    5915:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
    591c:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
    5923:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    592a:	41 89 f8             	mov    r8d,edi
    592d:	48 89 c7             	mov    rdi,rax
    5930:	e8 c1 fb ff ff       	call   54f6 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)>
    5935:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
    593c:	48 83 bd 18 ff ff ff 00 	cmp    QWORD PTR [rbp-0xe8],0x0
    5944:	74 27                	je     596d <stbi_load_from_file+0xbb>
    5946:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    594a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    594e:	48 29 d0             	sub    rax,rdx
    5951:	f7 d8                	neg    eax
    5953:	48 63 c8             	movsxd rcx,eax
    5956:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
    595d:	ba 01 00 00 00       	mov    edx,0x1
    5962:	48 89 ce             	mov    rsi,rcx
    5965:	48 89 c7             	mov    rdi,rax
    5968:	e8 63 eb ff ff       	call   44d0 <fseek@plt>
    596d:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
    5974:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    5978:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    5981:	74 05                	je     5988 <stbi_load_from_file+0xd6>
    5983:	e8 58 eb ff ff       	call   44e0 <__stack_chk_fail@plt>
    5988:	c9                   	leave  
    5989:	c3                   	ret    

000000000000598a <stbi_load_from_file_16>:
    598a:	55                   	push   rbp
    598b:	48 89 e5             	mov    rbp,rsp
    598e:	48 81 ec 20 01 00 00 	sub    rsp,0x120
    5995:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
    599c:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
    59a3:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
    59aa:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
    59b1:	44 89 85 ec fe ff ff 	mov    DWORD PTR [rbp-0x114],r8d
    59b8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    59c1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    59c5:	31 c0                	xor    eax,eax
    59c7:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
    59ce:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    59d5:	48 89 d6             	mov    rsi,rdx
    59d8:	48 89 c7             	mov    rdi,rax
    59db:	e8 1f f1 ff ff       	call   4aff <stbi__start_file(stbi__context*, _IO_FILE*)>
    59e0:	8b bd ec fe ff ff    	mov    edi,DWORD PTR [rbp-0x114]
    59e6:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
    59ed:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
    59f4:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
    59fb:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5a02:	41 89 f8             	mov    r8d,edi
    5a05:	48 89 c7             	mov    rdi,rax
    5a08:	e8 2c fc ff ff       	call   5639 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)>
    5a0d:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
    5a14:	48 83 bd 18 ff ff ff 00 	cmp    QWORD PTR [rbp-0xe8],0x0
    5a1c:	74 27                	je     5a45 <stbi_load_from_file_16+0xbb>
    5a1e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    5a22:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    5a26:	48 29 d0             	sub    rax,rdx
    5a29:	f7 d8                	neg    eax
    5a2b:	48 63 c8             	movsxd rcx,eax
    5a2e:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
    5a35:	ba 01 00 00 00       	mov    edx,0x1
    5a3a:	48 89 ce             	mov    rsi,rcx
    5a3d:	48 89 c7             	mov    rdi,rax
    5a40:	e8 8b ea ff ff       	call   44d0 <fseek@plt>
    5a45:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
    5a4c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    5a50:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    5a59:	74 05                	je     5a60 <stbi_load_from_file_16+0xd6>
    5a5b:	e8 80 ea ff ff       	call   44e0 <__stack_chk_fail@plt>
    5a60:	c9                   	leave  
    5a61:	c3                   	ret    

0000000000005a62 <stbi_load_16>:
    5a62:	55                   	push   rbp
    5a63:	48 89 e5             	mov    rbp,rsp
    5a66:	48 83 ec 40          	sub    rsp,0x40
    5a6a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    5a6e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    5a72:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    5a76:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    5a7a:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
    5a7e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    5a82:	48 8d 15 be 46 03 00 	lea    rdx,[rip+0x346be]        # 3a147 <_IO_stdin_used+0x147>
    5a89:	48 89 d6             	mov    rsi,rdx
    5a8c:	48 89 c7             	mov    rdi,rax
    5a8f:	e8 6a fd ff ff       	call   57fe <stbi__fopen(char const*, char const*)>
    5a94:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    5a98:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
    5a9d:	75 16                	jne    5ab5 <stbi_load_16+0x53>
    5a9f:	48 8d 05 a4 46 03 00 	lea    rax,[rip+0x346a4]        # 3a14a <_IO_stdin_used+0x14a>
    5aa6:	48 89 c7             	mov    rdi,rax
    5aa9:	e8 c4 f0 ff ff       	call   4b72 <stbi__err(char const*)>
    5aae:	b8 00 00 00 00       	mov    eax,0x0
    5ab3:	eb 32                	jmp    5ae7 <stbi_load_16+0x85>
    5ab5:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    5ab8:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    5abc:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    5ac0:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    5ac4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    5ac8:	41 89 f8             	mov    r8d,edi
    5acb:	48 89 c7             	mov    rdi,rax
    5ace:	e8 b7 fe ff ff       	call   598a <stbi_load_from_file_16>
    5ad3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5ad7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    5adb:	48 89 c7             	mov    rdi,rax
    5ade:	e8 3d e9 ff ff       	call   4420 <fclose@plt>
    5ae3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    5ae7:	c9                   	leave  
    5ae8:	c3                   	ret    

0000000000005ae9 <stbi_load_16_from_memory>:
    5ae9:	55                   	push   rbp
    5aea:	48 89 e5             	mov    rbp,rsp
    5aed:	48 81 ec 10 01 00 00 	sub    rsp,0x110
    5af4:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    5afb:	89 b5 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],esi
    5b01:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
    5b08:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
    5b0f:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
    5b16:	44 89 8d 10 ff ff ff 	mov    DWORD PTR [rbp-0xf0],r9d
    5b1d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5b26:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5b2a:	31 c0                	xor    eax,eax
    5b2c:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
    5b32:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    5b39:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5b40:	48 89 ce             	mov    rsi,rcx
    5b43:	48 89 c7             	mov    rdi,rax
    5b46:	e8 35 ee ff ff       	call   4980 <stbi__start_mem(stbi__context*, unsigned char const*, int)>
    5b4b:	8b bd 10 ff ff ff    	mov    edi,DWORD PTR [rbp-0xf0]
    5b51:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
    5b58:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
    5b5f:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
    5b66:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5b6d:	41 89 f8             	mov    r8d,edi
    5b70:	48 89 c7             	mov    rdi,rax
    5b73:	e8 c1 fa ff ff       	call   5639 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)>
    5b78:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    5b7c:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    5b85:	74 05                	je     5b8c <stbi_load_16_from_memory+0xa3>
    5b87:	e8 54 e9 ff ff       	call   44e0 <__stack_chk_fail@plt>
    5b8c:	c9                   	leave  
    5b8d:	c3                   	ret    

0000000000005b8e <stbi_load_16_from_callbacks>:
    5b8e:	55                   	push   rbp
    5b8f:	48 89 e5             	mov    rbp,rsp
    5b92:	48 81 ec 10 01 00 00 	sub    rsp,0x110
    5b99:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    5ba0:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
    5ba7:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
    5bae:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
    5bb5:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
    5bbc:	44 89 8d f4 fe ff ff 	mov    DWORD PTR [rbp-0x10c],r9d
    5bc3:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5bcc:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5bd0:	31 c0                	xor    eax,eax
    5bd2:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
    5bd9:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    5be0:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5be7:	48 89 ce             	mov    rsi,rcx
    5bea:	48 89 c7             	mov    rdi,rax
    5bed:	e8 0a ee ff ff       	call   49fc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>
    5bf2:	8b bd f4 fe ff ff    	mov    edi,DWORD PTR [rbp-0x10c]
    5bf8:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
    5bff:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
    5c06:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
    5c0d:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5c14:	41 89 f8             	mov    r8d,edi
    5c17:	48 89 c7             	mov    rdi,rax
    5c1a:	e8 1a fa ff ff       	call   5639 <stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)>
    5c1f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    5c23:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    5c2c:	74 05                	je     5c33 <stbi_load_16_from_callbacks+0xa5>
    5c2e:	e8 ad e8 ff ff       	call   44e0 <__stack_chk_fail@plt>
    5c33:	c9                   	leave  
    5c34:	c3                   	ret    

0000000000005c35 <stbi_load_from_memory>:
    5c35:	55                   	push   rbp
    5c36:	48 89 e5             	mov    rbp,rsp
    5c39:	48 81 ec 10 01 00 00 	sub    rsp,0x110
    5c40:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    5c47:	89 b5 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],esi
    5c4d:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
    5c54:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
    5c5b:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
    5c62:	44 89 8d 10 ff ff ff 	mov    DWORD PTR [rbp-0xf0],r9d
    5c69:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5c72:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5c76:	31 c0                	xor    eax,eax
    5c78:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
    5c7e:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    5c85:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5c8c:	48 89 ce             	mov    rsi,rcx
    5c8f:	48 89 c7             	mov    rdi,rax
    5c92:	e8 e9 ec ff ff       	call   4980 <stbi__start_mem(stbi__context*, unsigned char const*, int)>
    5c97:	8b bd 10 ff ff ff    	mov    edi,DWORD PTR [rbp-0xf0]
    5c9d:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
    5ca4:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
    5cab:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
    5cb2:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5cb9:	41 89 f8             	mov    r8d,edi
    5cbc:	48 89 c7             	mov    rdi,rax
    5cbf:	e8 32 f8 ff ff       	call   54f6 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)>
    5cc4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    5cc8:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    5cd1:	74 05                	je     5cd8 <stbi_load_from_memory+0xa3>
    5cd3:	e8 08 e8 ff ff       	call   44e0 <__stack_chk_fail@plt>
    5cd8:	c9                   	leave  
    5cd9:	c3                   	ret    

0000000000005cda <stbi_load_from_callbacks>:
    5cda:	55                   	push   rbp
    5cdb:	48 89 e5             	mov    rbp,rsp
    5cde:	48 81 ec 10 01 00 00 	sub    rsp,0x110
    5ce5:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    5cec:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
    5cf3:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
    5cfa:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
    5d01:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
    5d08:	44 89 8d f4 fe ff ff 	mov    DWORD PTR [rbp-0x10c],r9d
    5d0f:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5d18:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5d1c:	31 c0                	xor    eax,eax
    5d1e:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
    5d25:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    5d2c:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5d33:	48 89 ce             	mov    rsi,rcx
    5d36:	48 89 c7             	mov    rdi,rax
    5d39:	e8 be ec ff ff       	call   49fc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>
    5d3e:	8b bd f4 fe ff ff    	mov    edi,DWORD PTR [rbp-0x10c]
    5d44:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
    5d4b:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
    5d52:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
    5d59:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5d60:	41 89 f8             	mov    r8d,edi
    5d63:	48 89 c7             	mov    rdi,rax
    5d66:	e8 8b f7 ff ff       	call   54f6 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)>
    5d6b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    5d6f:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    5d78:	74 05                	je     5d7f <stbi_load_from_callbacks+0xa5>
    5d7a:	e8 61 e7 ff ff       	call   44e0 <__stack_chk_fail@plt>
    5d7f:	c9                   	leave  
    5d80:	c3                   	ret    

0000000000005d81 <stbi_load_gif_from_memory>:
    5d81:	55                   	push   rbp
    5d82:	48 89 e5             	mov    rbp,rsp
    5d85:	48 81 ec 30 01 00 00 	sub    rsp,0x130
    5d8c:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
    5d93:	89 b5 04 ff ff ff    	mov    DWORD PTR [rbp-0xfc],esi
    5d99:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
    5da0:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
    5da7:	4c 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],r8
    5dae:	4c 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],r9
    5db5:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
    5db9:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
    5dc0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5dc9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5dcd:	31 c0                	xor    eax,eax
    5dcf:	8b 95 04 ff ff ff    	mov    edx,DWORD PTR [rbp-0xfc]
    5dd5:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
    5ddc:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5de3:	48 89 ce             	mov    rsi,rcx
    5de6:	48 89 c7             	mov    rdi,rax
    5de9:	e8 92 eb ff ff       	call   4980 <stbi__start_mem(stbi__context*, unsigned char const*, int)>
    5dee:	4c 8b 8d d8 fe ff ff 	mov    r9,QWORD PTR [rbp-0x128]
    5df5:	4c 8b 85 e0 fe ff ff 	mov    r8,QWORD PTR [rbp-0x120]
    5dfc:	48 8b 8d e8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x118]
    5e03:	48 8b 95 f0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x110]
    5e0a:	48 8b b5 f8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x108]
    5e11:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    5e18:	48 83 ec 08          	sub    rsp,0x8
    5e1c:	8b 7d 18             	mov    edi,DWORD PTR [rbp+0x18]
    5e1f:	57                   	push   rdi
    5e20:	48 89 c7             	mov    rdi,rax
    5e23:	e8 03 6e 01 00       	call   1cc2b <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)>
    5e28:	48 83 c4 10          	add    rsp,0x10
    5e2c:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
    5e33:	64 8b 04 25 fc ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffffc
    5e3b:	85 c0                	test   eax,eax
    5e3d:	74 0a                	je     5e49 <stbi_load_gif_from_memory+0xc8>
    5e3f:	64 8b 04 25 f8 ff ff ff 	mov    eax,DWORD PTR fs:0xfffffffffffffff8
    5e47:	eb 06                	jmp    5e4f <stbi_load_gif_from_memory+0xce>
    5e49:	8b 05 25 49 04 00    	mov    eax,DWORD PTR [rip+0x44925]        # 4a774 <stbi__vertically_flip_on_load_global>
    5e4f:	85 c0                	test   eax,eax
    5e51:	74 36                	je     5e89 <stbi_load_gif_from_memory+0x108>
    5e53:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    5e5a:	8b 38                	mov    edi,DWORD PTR [rax]
    5e5c:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
    5e63:	8b 08                	mov    ecx,DWORD PTR [rax]
    5e65:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
    5e6c:	8b 10                	mov    edx,DWORD PTR [rax]
    5e6e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
    5e75:	8b 30                	mov    esi,DWORD PTR [rax]
    5e77:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
    5e7e:	41 89 f8             	mov    r8d,edi
    5e81:	48 89 c7             	mov    rdi,rax
    5e84:	e8 05 f6 ff ff       	call   548e <stbi__vertical_flip_slices(void*, int, int, int, int)>
    5e89:	48 8b 85 18 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe8]
    5e90:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    5e94:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    5e9d:	74 05                	je     5ea4 <stbi_load_gif_from_memory+0x123>
    5e9f:	e8 3c e6 ff ff       	call   44e0 <__stack_chk_fail@plt>
    5ea4:	c9                   	leave  
    5ea5:	c3                   	ret    

0000000000005ea6 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)>:
    5ea6:	55                   	push   rbp
    5ea7:	48 89 e5             	mov    rbp,rsp
    5eaa:	48 83 ec 60          	sub    rsp,0x60
    5eae:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    5eb2:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
    5eb6:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    5eba:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    5ebe:	44 89 45 ac          	mov    DWORD PTR [rbp-0x54],r8d
    5ec2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5ecb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5ecf:	31 c0                	xor    eax,eax
    5ed1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    5ed5:	48 89 c7             	mov    rdi,rax
    5ed8:	e8 28 73 01 00       	call   1d205 <stbi__hdr_test(stbi__context*)>
    5edd:	85 c0                	test   eax,eax
    5edf:	0f 95 c0             	setne  al
    5ee2:	84 c0                	test   al,al
    5ee4:	74 54                	je     5f3a <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0x94>
    5ee6:	4c 8d 45 ec          	lea    r8,[rbp-0x14]
    5eea:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
    5eed:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
    5ef1:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    5ef5:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
    5ef9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    5efd:	4d 89 c1             	mov    r9,r8
    5f00:	41 89 f8             	mov    r8d,edi
    5f03:	48 89 c7             	mov    rdi,rax
    5f06:	e8 04 76 01 00       	call   1d50f <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>
    5f0b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
    5f0f:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
    5f14:	74 1e                	je     5f34 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0x8e>
    5f16:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
    5f19:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
    5f1d:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    5f21:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
    5f25:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    5f29:	41 89 f8             	mov    r8d,edi
    5f2c:	48 89 c7             	mov    rdi,rax
    5f2f:	e8 4e f8 ff ff       	call   5782 <stbi__float_postprocess(float*, int*, int*, int*, int)>
    5f34:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    5f38:	eb 67                	jmp    5fa1 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0xfb>
    5f3a:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
    5f3d:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
    5f41:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    5f45:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
    5f49:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    5f4d:	41 89 f8             	mov    r8d,edi
    5f50:	48 89 c7             	mov    rdi,rax
    5f53:	e8 9e f5 ff ff       	call   54f6 <stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)>
    5f58:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
    5f5c:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
    5f61:	74 2a                	je     5f8d <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0xe7>
    5f63:	83 7d ac 00          	cmp    DWORD PTR [rbp-0x54],0x0
    5f67:	75 08                	jne    5f71 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0xcb>
    5f69:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    5f6d:	8b 00                	mov    eax,DWORD PTR [rax]
    5f6f:	eb 03                	jmp    5f74 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0xce>
    5f71:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
    5f74:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    5f78:	8b 12                	mov    edx,DWORD PTR [rdx]
    5f7a:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
    5f7e:	8b 31                	mov    esi,DWORD PTR [rcx]
    5f80:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
    5f84:	89 c1                	mov    ecx,eax
    5f86:	e8 75 14 00 00       	call   7400 <stbi__ldr_to_hdr(unsigned char*, int, int, int)>
    5f8b:	eb 14                	jmp    5fa1 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0xfb>
    5f8d:	48 8d 05 8c 40 03 00 	lea    rax,[rip+0x3408c]        # 3a020 <_IO_stdin_used+0x20>
    5f94:	48 89 c7             	mov    rdi,rax
    5f97:	e8 d6 eb ff ff       	call   4b72 <stbi__err(char const*)>
    5f9c:	b8 00 00 00 00       	mov    eax,0x0
    5fa1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    5fa5:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    5fae:	74 05                	je     5fb5 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)+0x10f>
    5fb0:	e8 2b e5 ff ff       	call   44e0 <__stack_chk_fail@plt>
    5fb5:	c9                   	leave  
    5fb6:	c3                   	ret    

0000000000005fb7 <stbi_loadf_from_memory>:
    5fb7:	55                   	push   rbp
    5fb8:	48 89 e5             	mov    rbp,rsp
    5fbb:	48 81 ec 10 01 00 00 	sub    rsp,0x110
    5fc2:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    5fc9:	89 b5 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],esi
    5fcf:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
    5fd6:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
    5fdd:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
    5fe4:	44 89 8d 10 ff ff ff 	mov    DWORD PTR [rbp-0xf0],r9d
    5feb:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    5ff4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    5ff8:	31 c0                	xor    eax,eax
    5ffa:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
    6000:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    6007:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    600e:	48 89 ce             	mov    rsi,rcx
    6011:	48 89 c7             	mov    rdi,rax
    6014:	e8 67 e9 ff ff       	call   4980 <stbi__start_mem(stbi__context*, unsigned char const*, int)>
    6019:	8b bd 10 ff ff ff    	mov    edi,DWORD PTR [rbp-0xf0]
    601f:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
    6026:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
    602d:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
    6034:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    603b:	41 89 f8             	mov    r8d,edi
    603e:	48 89 c7             	mov    rdi,rax
    6041:	e8 60 fe ff ff       	call   5ea6 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)>
    6046:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    604a:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    6053:	74 05                	je     605a <stbi_loadf_from_memory+0xa3>
    6055:	e8 86 e4 ff ff       	call   44e0 <__stack_chk_fail@plt>
    605a:	c9                   	leave  
    605b:	c3                   	ret    

000000000000605c <stbi_loadf_from_callbacks>:
    605c:	55                   	push   rbp
    605d:	48 89 e5             	mov    rbp,rsp
    6060:	48 81 ec 10 01 00 00 	sub    rsp,0x110
    6067:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    606e:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
    6075:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
    607c:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
    6083:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
    608a:	44 89 8d f4 fe ff ff 	mov    DWORD PTR [rbp-0x10c],r9d
    6091:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    609a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    609e:	31 c0                	xor    eax,eax
    60a0:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
    60a7:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    60ae:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    60b5:	48 89 ce             	mov    rsi,rcx
    60b8:	48 89 c7             	mov    rdi,rax
    60bb:	e8 3c e9 ff ff       	call   49fc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>
    60c0:	8b bd f4 fe ff ff    	mov    edi,DWORD PTR [rbp-0x10c]
    60c6:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
    60cd:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
    60d4:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
    60db:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    60e2:	41 89 f8             	mov    r8d,edi
    60e5:	48 89 c7             	mov    rdi,rax
    60e8:	e8 b9 fd ff ff       	call   5ea6 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)>
    60ed:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    60f1:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    60fa:	74 05                	je     6101 <stbi_loadf_from_callbacks+0xa5>
    60fc:	e8 df e3 ff ff       	call   44e0 <__stack_chk_fail@plt>
    6101:	c9                   	leave  
    6102:	c3                   	ret    

0000000000006103 <stbi_loadf>:
    6103:	55                   	push   rbp
    6104:	48 89 e5             	mov    rbp,rsp
    6107:	48 83 ec 40          	sub    rsp,0x40
    610b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    610f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    6113:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    6117:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
    611b:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
    611f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6123:	48 8d 15 1d 40 03 00 	lea    rdx,[rip+0x3401d]        # 3a147 <_IO_stdin_used+0x147>
    612a:	48 89 d6             	mov    rsi,rdx
    612d:	48 89 c7             	mov    rdi,rax
    6130:	e8 c9 f6 ff ff       	call   57fe <stbi__fopen(char const*, char const*)>
    6135:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    6139:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
    613e:	75 16                	jne    6156 <stbi_loadf+0x53>
    6140:	48 8d 05 03 40 03 00 	lea    rax,[rip+0x34003]        # 3a14a <_IO_stdin_used+0x14a>
    6147:	48 89 c7             	mov    rdi,rax
    614a:	e8 23 ea ff ff       	call   4b72 <stbi__err(char const*)>
    614f:	b8 00 00 00 00       	mov    eax,0x0
    6154:	eb 32                	jmp    6188 <stbi_loadf+0x85>
    6156:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
    6159:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
    615d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    6161:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
    6165:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6169:	41 89 f8             	mov    r8d,edi
    616c:	48 89 c7             	mov    rdi,rax
    616f:	e8 16 00 00 00       	call   618a <stbi_loadf_from_file>
    6174:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    6178:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    617c:	48 89 c7             	mov    rdi,rax
    617f:	e8 9c e2 ff ff       	call   4420 <fclose@plt>
    6184:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6188:	c9                   	leave  
    6189:	c3                   	ret    

000000000000618a <stbi_loadf_from_file>:
    618a:	55                   	push   rbp
    618b:	48 89 e5             	mov    rbp,rsp
    618e:	48 81 ec 10 01 00 00 	sub    rsp,0x110
    6195:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    619c:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
    61a3:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
    61aa:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
    61b1:	44 89 85 fc fe ff ff 	mov    DWORD PTR [rbp-0x104],r8d
    61b8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    61c1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    61c5:	31 c0                	xor    eax,eax
    61c7:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
    61ce:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    61d5:	48 89 d6             	mov    rsi,rdx
    61d8:	48 89 c7             	mov    rdi,rax
    61db:	e8 1f e9 ff ff       	call   4aff <stbi__start_file(stbi__context*, _IO_FILE*)>
    61e0:	8b bd fc fe ff ff    	mov    edi,DWORD PTR [rbp-0x104]
    61e6:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
    61ed:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
    61f4:	48 8b b5 10 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf0]
    61fb:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    6202:	41 89 f8             	mov    r8d,edi
    6205:	48 89 c7             	mov    rdi,rax
    6208:	e8 99 fc ff ff       	call   5ea6 <stbi__loadf_main(stbi__context*, int*, int*, int*, int)>
    620d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    6211:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    621a:	74 05                	je     6221 <stbi_loadf_from_file+0x97>
    621c:	e8 bf e2 ff ff       	call   44e0 <__stack_chk_fail@plt>
    6221:	c9                   	leave  
    6222:	c3                   	ret    

0000000000006223 <stbi_is_hdr_from_memory>:
    6223:	55                   	push   rbp
    6224:	48 89 e5             	mov    rbp,rsp
    6227:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
    622e:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    6235:	89 b5 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],esi
    623b:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    6244:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    6248:	31 c0                	xor    eax,eax
    624a:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
    6250:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    6257:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    625e:	48 89 ce             	mov    rsi,rcx
    6261:	48 89 c7             	mov    rdi,rax
    6264:	e8 17 e7 ff ff       	call   4980 <stbi__start_mem(stbi__context*, unsigned char const*, int)>
    6269:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    6270:	48 89 c7             	mov    rdi,rax
    6273:	e8 8d 6f 01 00       	call   1d205 <stbi__hdr_test(stbi__context*)>
    6278:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    627c:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    6285:	74 05                	je     628c <stbi_is_hdr_from_memory+0x69>
    6287:	e8 54 e2 ff ff       	call   44e0 <__stack_chk_fail@plt>
    628c:	c9                   	leave  
    628d:	c3                   	ret    

000000000000628e <stbi_is_hdr>:
    628e:	55                   	push   rbp
    628f:	48 89 e5             	mov    rbp,rsp
    6292:	48 83 ec 20          	sub    rsp,0x20
    6296:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    629a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    629e:	48 8d 15 a2 3e 03 00 	lea    rdx,[rip+0x33ea2]        # 3a147 <_IO_stdin_used+0x147>
    62a5:	48 89 d6             	mov    rsi,rdx
    62a8:	48 89 c7             	mov    rdi,rax
    62ab:	e8 4e f5 ff ff       	call   57fe <stbi__fopen(char const*, char const*)>
    62b0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    62b4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
    62bb:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    62c0:	74 1b                	je     62dd <stbi_is_hdr+0x4f>
    62c2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    62c6:	48 89 c7             	mov    rdi,rax
    62c9:	e8 14 00 00 00       	call   62e2 <stbi_is_hdr_from_file>
    62ce:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    62d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    62d5:	48 89 c7             	mov    rdi,rax
    62d8:	e8 43 e1 ff ff       	call   4420 <fclose@plt>
    62dd:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    62e0:	c9                   	leave  
    62e1:	c3                   	ret    

00000000000062e2 <stbi_is_hdr_from_file>:
    62e2:	55                   	push   rbp
    62e3:	48 89 e5             	mov    rbp,rsp
    62e6:	48 81 ec 00 01 00 00 	sub    rsp,0x100
    62ed:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
    62f4:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    62fd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    6301:	31 c0                	xor    eax,eax
    6303:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
    630a:	48 89 c7             	mov    rdi,rax
    630d:	e8 1e dd ff ff       	call   4030 <ftell@plt>
    6312:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
    6319:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
    6320:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    6327:	48 89 d6             	mov    rsi,rdx
    632a:	48 89 c7             	mov    rdi,rax
    632d:	e8 cd e7 ff ff       	call   4aff <stbi__start_file(stbi__context*, _IO_FILE*)>
    6332:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    6339:	48 89 c7             	mov    rdi,rax
    633c:	e8 c4 6e 01 00       	call   1d205 <stbi__hdr_test(stbi__context*)>
    6341:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
    6347:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    634e:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
    6355:	ba 00 00 00 00       	mov    edx,0x0
    635a:	48 89 ce             	mov    rsi,rcx
    635d:	48 89 c7             	mov    rdi,rax
    6360:	e8 6b e1 ff ff       	call   44d0 <fseek@plt>
    6365:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
    636b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    636f:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    6378:	74 05                	je     637f <stbi_is_hdr_from_file+0x9d>
    637a:	e8 61 e1 ff ff       	call   44e0 <__stack_chk_fail@plt>
    637f:	c9                   	leave  
    6380:	c3                   	ret    

0000000000006381 <stbi_is_hdr_from_callbacks>:
    6381:	55                   	push   rbp
    6382:	48 89 e5             	mov    rbp,rsp
    6385:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
    638c:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
    6393:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
    639a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    63a3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    63a7:	31 c0                	xor    eax,eax
    63a9:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
    63b0:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
    63b7:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    63be:	48 89 ce             	mov    rsi,rcx
    63c1:	48 89 c7             	mov    rdi,rax
    63c4:	e8 33 e6 ff ff       	call   49fc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>
    63c9:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
    63d0:	48 89 c7             	mov    rdi,rax
    63d3:	e8 2d 6e 01 00       	call   1d205 <stbi__hdr_test(stbi__context*)>
    63d8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    63dc:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    63e5:	74 05                	je     63ec <stbi_is_hdr_from_callbacks+0x6b>
    63e7:	e8 f4 e0 ff ff       	call   44e0 <__stack_chk_fail@plt>
    63ec:	c9                   	leave  
    63ed:	c3                   	ret    

00000000000063ee <stbi_ldr_to_hdr_gamma>:
    63ee:	55                   	push   rbp
    63ef:	48 89 e5             	mov    rbp,rsp
    63f2:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
    63f7:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
    63fc:	f3 0f 11 05 3c 40 04 00 	movss  DWORD PTR [rip+0x4403c],xmm0        # 4a440 <stbi__l2h_gamma>
    6404:	90                   	nop
    6405:	5d                   	pop    rbp
    6406:	c3                   	ret    

0000000000006407 <stbi_ldr_to_hdr_scale>:
    6407:	55                   	push   rbp
    6408:	48 89 e5             	mov    rbp,rsp
    640b:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
    6410:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
    6415:	f3 0f 11 05 27 40 04 00 	movss  DWORD PTR [rip+0x44027],xmm0        # 4a444 <stbi__l2h_scale>
    641d:	90                   	nop
    641e:	5d                   	pop    rbp
    641f:	c3                   	ret    

0000000000006420 <stbi_hdr_to_ldr_gamma>:
    6420:	55                   	push   rbp
    6421:	48 89 e5             	mov    rbp,rsp
    6424:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
    6429:	f3 0f 10 05 13 66 03 00 	movss  xmm0,DWORD PTR [rip+0x36613]        # 3ca44 <NANO_SEC+0x177c>
    6431:	f3 0f 5e 45 fc       	divss  xmm0,DWORD PTR [rbp-0x4]
    6436:	f3 0f 11 05 0a 40 04 00 	movss  DWORD PTR [rip+0x4400a],xmm0        # 4a448 <stbi__h2l_gamma_i>
    643e:	90                   	nop
    643f:	5d                   	pop    rbp
    6440:	c3                   	ret    

0000000000006441 <stbi_hdr_to_ldr_scale>:
    6441:	55                   	push   rbp
    6442:	48 89 e5             	mov    rbp,rsp
    6445:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
    644a:	f3 0f 10 05 f2 65 03 00 	movss  xmm0,DWORD PTR [rip+0x365f2]        # 3ca44 <NANO_SEC+0x177c>
    6452:	f3 0f 5e 45 fc       	divss  xmm0,DWORD PTR [rbp-0x4]
    6457:	f3 0f 11 05 ed 3f 04 00 	movss  DWORD PTR [rip+0x43fed],xmm0        # 4a44c <stbi__h2l_scale_i>
    645f:	90                   	nop
    6460:	5d                   	pop    rbp
    6461:	c3                   	ret    

0000000000006462 <stbi__refill_buffer(stbi__context*)>:
    6462:	55                   	push   rbp
    6463:	48 89 e5             	mov    rbp,rsp
    6466:	48 83 ec 20          	sub    rsp,0x20
    646a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    646e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6472:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
    6476:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    647a:	8b 50 34             	mov    edx,DWORD PTR [rax+0x34]
    647d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6481:	48 8d 70 38          	lea    rsi,[rax+0x38]
    6485:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6489:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
    648d:	48 89 c7             	mov    rdi,rax
    6490:	ff d1                	call   rcx
    6492:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    6495:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
    6499:	75 45                	jne    64e0 <stbi__refill_buffer(stbi__context*)+0x7e>
    649b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    649f:	c7 40 30 00 00 00 00 	mov    DWORD PTR [rax+0x30],0x0
    64a6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    64aa:	48 8d 50 38          	lea    rdx,[rax+0x38]
    64ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    64b2:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    64b9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    64bd:	48 83 c0 38          	add    rax,0x38
    64c1:	48 8d 50 01          	lea    rdx,[rax+0x1]
    64c5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    64c9:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
    64d0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    64d4:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
    64db:	c6 00 00             	mov    BYTE PTR [rax],0x0
    64de:	eb 2e                	jmp    650e <stbi__refill_buffer(stbi__context*)+0xac>
    64e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    64e4:	48 8d 50 38          	lea    rdx,[rax+0x38]
    64e8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    64ec:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    64f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    64f7:	48 8d 50 38          	lea    rdx,[rax+0x38]
    64fb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    64fe:	48 98                	cdqe   
    6500:	48 01 c2             	add    rdx,rax
    6503:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6507:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
    650e:	90                   	nop
    650f:	c9                   	leave  
    6510:	c3                   	ret    

0000000000006511 <stbi__get8(stbi__context*)>:
    6511:	55                   	push   rbp
    6512:	48 89 e5             	mov    rbp,rsp
    6515:	48 83 ec 10          	sub    rsp,0x10
    6519:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    651d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6521:	48 8b 90 b8 00 00 00 	mov    rdx,QWORD PTR [rax+0xb8]
    6528:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    652c:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
    6533:	48 39 c2             	cmp    rdx,rax
    6536:	73 1f                	jae    6557 <stbi__get8(stbi__context*)+0x46>
    6538:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    653c:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
    6543:	48 8d 48 01          	lea    rcx,[rax+0x1]
    6547:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    654b:	48 89 8a b8 00 00 00 	mov    QWORD PTR [rdx+0xb8],rcx
    6552:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6555:	eb 3b                	jmp    6592 <stbi__get8(stbi__context*)+0x81>
    6557:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    655b:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    655e:	85 c0                	test   eax,eax
    6560:	74 2b                	je     658d <stbi__get8(stbi__context*)+0x7c>
    6562:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6566:	48 89 c7             	mov    rdi,rax
    6569:	e8 f4 fe ff ff       	call   6462 <stbi__refill_buffer(stbi__context*)>
    656e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6572:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
    6579:	48 8d 48 01          	lea    rcx,[rax+0x1]
    657d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    6581:	48 89 8a b8 00 00 00 	mov    QWORD PTR [rdx+0xb8],rcx
    6588:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    658b:	eb 05                	jmp    6592 <stbi__get8(stbi__context*)+0x81>
    658d:	b8 00 00 00 00       	mov    eax,0x0
    6592:	c9                   	leave  
    6593:	c3                   	ret    

0000000000006594 <stbi__at_eof(stbi__context*)>:
    6594:	55                   	push   rbp
    6595:	48 89 e5             	mov    rbp,rsp
    6598:	48 83 ec 10          	sub    rsp,0x10
    659c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    65a0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    65a4:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    65a8:	48 85 c0             	test   rax,rax
    65ab:	74 37                	je     65e4 <stbi__at_eof(stbi__context*)+0x50>
    65ad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    65b1:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
    65b5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    65b9:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
    65bd:	48 89 c7             	mov    rdi,rax
    65c0:	ff d2                	call   rdx
    65c2:	85 c0                	test   eax,eax
    65c4:	0f 94 c0             	sete   al
    65c7:	84 c0                	test   al,al
    65c9:	74 07                	je     65d2 <stbi__at_eof(stbi__context*)+0x3e>
    65cb:	b8 00 00 00 00       	mov    eax,0x0
    65d0:	eb 31                	jmp    6603 <stbi__at_eof(stbi__context*)+0x6f>
    65d2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    65d6:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    65d9:	85 c0                	test   eax,eax
    65db:	75 07                	jne    65e4 <stbi__at_eof(stbi__context*)+0x50>
    65dd:	b8 01 00 00 00       	mov    eax,0x1
    65e2:	eb 1f                	jmp    6603 <stbi__at_eof(stbi__context*)+0x6f>
    65e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    65e8:	48 8b 90 b8 00 00 00 	mov    rdx,QWORD PTR [rax+0xb8]
    65ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    65f3:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
    65fa:	48 39 c2             	cmp    rdx,rax
    65fd:	0f 93 c0             	setae  al
    6600:	0f b6 c0             	movzx  eax,al
    6603:	c9                   	leave  
    6604:	c3                   	ret    

0000000000006605 <stbi__skip(stbi__context*, int)>:
    6605:	55                   	push   rbp
    6606:	48 89 e5             	mov    rbp,rsp
    6609:	48 83 ec 20          	sub    rsp,0x20
    660d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    6611:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    6614:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
    6618:	79 1b                	jns    6635 <stbi__skip(stbi__context*, int)+0x30>
    661a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    661e:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
    6625:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6629:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    6630:	e9 89 00 00 00       	jmp    66be <stbi__skip(stbi__context*, int)+0xb9>
    6635:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6639:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    663d:	48 85 c0             	test   rax,rax
    6640:	74 5e                	je     66a0 <stbi__skip(stbi__context*, int)+0x9b>
    6642:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6646:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
    664d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6651:	48 8b 88 b8 00 00 00 	mov    rcx,QWORD PTR [rax+0xb8]
    6658:	48 89 d0             	mov    rax,rdx
    665b:	48 29 c8             	sub    rax,rcx
    665e:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    6661:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    6664:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
    6667:	7d 37                	jge    66a0 <stbi__skip(stbi__context*, int)+0x9b>
    6669:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    666d:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
    6674:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6678:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    667f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6683:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
    6687:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    668a:	2b 45 fc             	sub    eax,DWORD PTR [rbp-0x4]
    668d:	89 c2                	mov    edx,eax
    668f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6693:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
    6697:	89 d6                	mov    esi,edx
    6699:	48 89 c7             	mov    rdi,rax
    669c:	ff d1                	call   rcx
    669e:	eb 1e                	jmp    66be <stbi__skip(stbi__context*, int)+0xb9>
    66a0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    66a4:	48 8b 90 b8 00 00 00 	mov    rdx,QWORD PTR [rax+0xb8]
    66ab:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    66ae:	48 98                	cdqe   
    66b0:	48 01 c2             	add    rdx,rax
    66b3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    66b7:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    66be:	c9                   	leave  
    66bf:	c3                   	ret    

00000000000066c0 <stbi__getn(stbi__context*, unsigned char*, int)>:
    66c0:	55                   	push   rbp
    66c1:	48 89 e5             	mov    rbp,rsp
    66c4:	48 83 ec 30          	sub    rsp,0x30
    66c8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    66cc:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    66d0:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
    66d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    66d7:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    66db:	48 85 c0             	test   rax,rax
    66de:	0f 84 a1 00 00 00    	je     6785 <stbi__getn(stbi__context*, unsigned char*, int)+0xc5>
    66e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    66e8:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
    66ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    66f3:	48 8b 88 b8 00 00 00 	mov    rcx,QWORD PTR [rax+0xb8]
    66fa:	48 89 d0             	mov    rax,rdx
    66fd:	48 29 c8             	sub    rax,rcx
    6700:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    6703:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    6706:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
    6709:	7d 7a                	jge    6785 <stbi__getn(stbi__context*, unsigned char*, int)+0xc5>
    670b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    670e:	48 63 d0             	movsxd rdx,eax
    6711:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6715:	48 8b 88 b8 00 00 00 	mov    rcx,QWORD PTR [rax+0xb8]
    671c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    6720:	48 89 ce             	mov    rsi,rcx
    6723:	48 89 c7             	mov    rdi,rax
    6726:	e8 45 dc ff ff       	call   4370 <memcpy@plt>
    672b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    672f:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
    6733:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    6736:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
    6739:	89 c2                	mov    edx,eax
    673b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    673e:	48 63 f0             	movsxd rsi,eax
    6741:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    6745:	48 01 c6             	add    rsi,rax
    6748:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    674c:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
    6750:	48 89 c7             	mov    rdi,rax
    6753:	ff d1                	call   rcx
    6755:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    6758:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    675b:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
    675e:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
    6761:	0f 94 c0             	sete   al
    6764:	0f b6 c0             	movzx  eax,al
    6767:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    676a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    676e:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
    6775:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6779:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    6780:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    6783:	eb 6d                	jmp    67f2 <stbi__getn(stbi__context*, unsigned char*, int)+0x132>
    6785:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6789:	48 8b 90 b8 00 00 00 	mov    rdx,QWORD PTR [rax+0xb8]
    6790:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    6793:	48 98                	cdqe   
    6795:	48 01 c2             	add    rdx,rax
    6798:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    679c:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
    67a3:	48 39 c2             	cmp    rdx,rax
    67a6:	77 45                	ja     67ed <stbi__getn(stbi__context*, unsigned char*, int)+0x12d>
    67a8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    67ab:	48 63 d0             	movsxd rdx,eax
    67ae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    67b2:	48 8b 88 b8 00 00 00 	mov    rcx,QWORD PTR [rax+0xb8]
    67b9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    67bd:	48 89 ce             	mov    rsi,rcx
    67c0:	48 89 c7             	mov    rdi,rax
    67c3:	e8 a8 db ff ff       	call   4370 <memcpy@plt>
    67c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    67cc:	48 8b 90 b8 00 00 00 	mov    rdx,QWORD PTR [rax+0xb8]
    67d3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    67d6:	48 98                	cdqe   
    67d8:	48 01 c2             	add    rdx,rax
    67db:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    67df:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
    67e6:	b8 01 00 00 00       	mov    eax,0x1
    67eb:	eb 05                	jmp    67f2 <stbi__getn(stbi__context*, unsigned char*, int)+0x132>
    67ed:	b8 00 00 00 00       	mov    eax,0x0
    67f2:	c9                   	leave  
    67f3:	c3                   	ret    

00000000000067f4 <stbi__get16be(stbi__context*)>:
    67f4:	55                   	push   rbp
    67f5:	48 89 e5             	mov    rbp,rsp
    67f8:	53                   	push   rbx
    67f9:	48 83 ec 28          	sub    rsp,0x28
    67fd:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    6801:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    6805:	48 89 c7             	mov    rdi,rax
    6808:	e8 04 fd ff ff       	call   6511 <stbi__get8(stbi__context*)>
    680d:	0f b6 c0             	movzx  eax,al
    6810:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    6813:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    6816:	c1 e0 08             	shl    eax,0x8
    6819:	89 c3                	mov    ebx,eax
    681b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    681f:	48 89 c7             	mov    rdi,rax
    6822:	e8 ea fc ff ff       	call   6511 <stbi__get8(stbi__context*)>
    6827:	0f b6 c0             	movzx  eax,al
    682a:	01 d8                	add    eax,ebx
    682c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    6830:	c9                   	leave  
    6831:	c3                   	ret    

0000000000006832 <stbi__get32be(stbi__context*)>:
    6832:	55                   	push   rbp
    6833:	48 89 e5             	mov    rbp,rsp
    6836:	53                   	push   rbx
    6837:	48 83 ec 28          	sub    rsp,0x28
    683b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    683f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    6843:	48 89 c7             	mov    rdi,rax
    6846:	e8 a9 ff ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
    684b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    684e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    6851:	c1 e0 10             	shl    eax,0x10
    6854:	89 c3                	mov    ebx,eax
    6856:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    685a:	48 89 c7             	mov    rdi,rax
    685d:	e8 92 ff ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
    6862:	01 d8                	add    eax,ebx
    6864:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    6868:	c9                   	leave  
    6869:	c3                   	ret    

000000000000686a <stbi__get16le(stbi__context*)>:
    686a:	55                   	push   rbp
    686b:	48 89 e5             	mov    rbp,rsp
    686e:	48 83 ec 20          	sub    rsp,0x20
    6872:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    6876:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    687a:	48 89 c7             	mov    rdi,rax
    687d:	e8 8f fc ff ff       	call   6511 <stbi__get8(stbi__context*)>
    6882:	0f b6 c0             	movzx  eax,al
    6885:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    6888:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    688c:	48 89 c7             	mov    rdi,rax
    688f:	e8 7d fc ff ff       	call   6511 <stbi__get8(stbi__context*)>
    6894:	0f b6 c0             	movzx  eax,al
    6897:	c1 e0 08             	shl    eax,0x8
    689a:	89 c2                	mov    edx,eax
    689c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    689f:	01 d0                	add    eax,edx
    68a1:	c9                   	leave  
    68a2:	c3                   	ret    

00000000000068a3 <stbi__get32le(stbi__context*)>:
    68a3:	55                   	push   rbp
    68a4:	48 89 e5             	mov    rbp,rsp
    68a7:	48 83 ec 20          	sub    rsp,0x20
    68ab:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    68af:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    68b3:	48 89 c7             	mov    rdi,rax
    68b6:	e8 af ff ff ff       	call   686a <stbi__get16le(stbi__context*)>
    68bb:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    68be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    68c2:	48 89 c7             	mov    rdi,rax
    68c5:	e8 a0 ff ff ff       	call   686a <stbi__get16le(stbi__context*)>
    68ca:	c1 e0 10             	shl    eax,0x10
    68cd:	89 c2                	mov    edx,eax
    68cf:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    68d2:	01 d0                	add    eax,edx
    68d4:	c9                   	leave  
    68d5:	c3                   	ret    

00000000000068d6 <stbi__compute_y(int, int, int)>:
    68d6:	55                   	push   rbp
    68d7:	48 89 e5             	mov    rbp,rsp
    68da:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    68dd:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    68e0:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    68e3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    68e6:	6b d0 4d             	imul   edx,eax,0x4d
    68e9:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    68ec:	69 c0 96 00 00 00    	imul   eax,eax,0x96
    68f2:	01 c2                	add    edx,eax
    68f4:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    68f7:	6b c0 1d             	imul   eax,eax,0x1d
    68fa:	01 d0                	add    eax,edx
    68fc:	c1 f8 08             	sar    eax,0x8
    68ff:	5d                   	pop    rbp
    6900:	c3                   	ret    

0000000000006901 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>:
    6901:	55                   	push   rbp
    6902:	48 89 e5             	mov    rbp,rsp
    6905:	48 83 ec 40          	sub    rsp,0x40
    6909:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    690d:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
    6910:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
    6913:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
    6916:	44 89 45 c8          	mov    DWORD PTR [rbp-0x38],r8d
    691a:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    691d:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
    6920:	75 09                	jne    692b <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x2a>
    6922:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    6926:	e9 28 05 00 00       	jmp    6e53 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x552>
    692b:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
    692f:	7e 06                	jle    6937 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x36>
    6931:	83 7d d0 04          	cmp    DWORD PTR [rbp-0x30],0x4
    6935:	7e 28                	jle    695f <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x5e>
    6937:	48 8d 05 1a 38 03 00 	lea    rax,[rip+0x3381a]        # 3a158 <_IO_stdin_used+0x158>
    693e:	48 89 c1             	mov    rcx,rax
    6941:	ba 7c 06 00 00       	mov    edx,0x67c
    6946:	48 8d 05 4b 37 03 00 	lea    rax,[rip+0x3374b]        # 3a098 <_IO_stdin_used+0x98>
    694d:	48 89 c6             	mov    rsi,rax
    6950:	48 8d 05 61 38 03 00 	lea    rax,[rip+0x33861]        # 3a1b8 <_IO_stdin_used+0x1b8>
    6957:	48 89 c7             	mov    rdi,rax
    695a:	e8 21 d9 ff ff       	call   4280 <__assert_fail@plt>
    695f:	8b 55 c8             	mov    edx,DWORD PTR [rbp-0x38]
    6962:	8b 75 cc             	mov    esi,DWORD PTR [rbp-0x34]
    6965:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    6968:	b9 00 00 00 00       	mov    ecx,0x0
    696d:	89 c7                	mov    edi,eax
    696f:	e8 2d e4 ff ff       	call   4da1 <stbi__malloc_mad3(int, int, int, int)>
    6974:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    6978:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    697d:	75 25                	jne    69a4 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0xa3>
    697f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    6983:	48 89 c7             	mov    rdi,rax
    6986:	e8 a5 db ff ff       	call   4530 <free@plt>
    698b:	48 8d 05 a1 36 03 00 	lea    rax,[rip+0x336a1]        # 3a033 <_IO_stdin_used+0x33>
    6992:	48 89 c7             	mov    rdi,rax
    6995:	e8 d8 e1 ff ff       	call   4b72 <stbi__err(char const*)>
    699a:	b8 00 00 00 00       	mov    eax,0x0
    699f:	e9 af 04 00 00       	jmp    6e53 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x552>
    69a4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    69ab:	e9 87 04 00 00       	jmp    6e37 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x536>
    69b0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    69b3:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    69b7:	89 c2                	mov    edx,eax
    69b9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    69bc:	0f af c2             	imul   eax,edx
    69bf:	89 c2                	mov    edx,eax
    69c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    69c5:	48 01 d0             	add    rax,rdx
    69c8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    69cc:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    69cf:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    69d3:	89 c2                	mov    edx,eax
    69d5:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    69d8:	0f af c2             	imul   eax,edx
    69db:	89 c2                	mov    edx,eax
    69dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    69e1:	48 01 d0             	add    rax,rdx
    69e4:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    69e8:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    69eb:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
    69f2:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    69f5:	01 d0                	add    eax,edx
    69f7:	83 e8 0a             	sub    eax,0xa
    69fa:	83 f8 19             	cmp    eax,0x19
    69fd:	0f 87 08 04 00 00    	ja     6e0b <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x50a>
    6a03:	89 c0                	mov    eax,eax
    6a05:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    6a0d:	48 8d 05 c8 37 03 00 	lea    rax,[rip+0x337c8]        # 3a1dc <_IO_stdin_used+0x1dc>
    6a14:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    6a17:	48 98                	cdqe   
    6a19:	48 8d 15 bc 37 03 00 	lea    rdx,[rip+0x337bc]        # 3a1dc <_IO_stdin_used+0x1dc>
    6a20:	48 01 d0             	add    rax,rdx
    6a23:	ff e0                	jmp    rax
    6a25:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6a28:	83 e8 01             	sub    eax,0x1
    6a2b:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6a2e:	eb 26                	jmp    6a56 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x155>
    6a30:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6a34:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6a37:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6a3b:	88 10                	mov    BYTE PTR [rax],dl
    6a3d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6a41:	48 83 c0 01          	add    rax,0x1
    6a45:	c6 00 ff             	mov    BYTE PTR [rax],0xff
    6a48:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6a4c:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
    6a51:	48 83 45 f0 02       	add    QWORD PTR [rbp-0x10],0x2
    6a56:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6a5a:	79 d4                	jns    6a30 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x12f>
    6a5c:	e9 d2 03 00 00       	jmp    6e33 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x532>
    6a61:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6a64:	83 e8 01             	sub    eax,0x1
    6a67:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6a6a:	eb 35                	jmp    6aa1 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x1a0>
    6a6c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6a70:	48 8d 50 02          	lea    rdx,[rax+0x2]
    6a74:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6a78:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6a7b:	88 02                	mov    BYTE PTR [rdx],al
    6a7d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6a81:	48 83 c0 01          	add    rax,0x1
    6a85:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
    6a88:	88 10                	mov    BYTE PTR [rax],dl
    6a8a:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6a8d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6a91:	88 10                	mov    BYTE PTR [rax],dl
    6a93:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6a97:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
    6a9c:	48 83 45 f0 03       	add    QWORD PTR [rbp-0x10],0x3
    6aa1:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6aa5:	79 c5                	jns    6a6c <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x16b>
    6aa7:	e9 87 03 00 00       	jmp    6e33 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x532>
    6aac:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6aaf:	83 e8 01             	sub    eax,0x1
    6ab2:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6ab5:	eb 40                	jmp    6af7 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x1f6>
    6ab7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6abb:	48 8d 50 02          	lea    rdx,[rax+0x2]
    6abf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6ac3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6ac6:	88 02                	mov    BYTE PTR [rdx],al
    6ac8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6acc:	48 83 c0 01          	add    rax,0x1
    6ad0:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
    6ad3:	88 10                	mov    BYTE PTR [rax],dl
    6ad5:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6ad8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6adc:	88 10                	mov    BYTE PTR [rax],dl
    6ade:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6ae2:	48 83 c0 03          	add    rax,0x3
    6ae6:	c6 00 ff             	mov    BYTE PTR [rax],0xff
    6ae9:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6aed:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
    6af2:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
    6af7:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6afb:	79 ba                	jns    6ab7 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x1b6>
    6afd:	e9 31 03 00 00       	jmp    6e33 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x532>
    6b02:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6b05:	83 e8 01             	sub    eax,0x1
    6b08:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6b0b:	eb 1b                	jmp    6b28 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x227>
    6b0d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6b11:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6b14:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6b18:	88 10                	mov    BYTE PTR [rax],dl
    6b1a:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6b1e:	48 83 45 e8 02       	add    QWORD PTR [rbp-0x18],0x2
    6b23:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
    6b28:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6b2c:	79 df                	jns    6b0d <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x20c>
    6b2e:	e9 00 03 00 00       	jmp    6e33 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x532>
    6b33:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6b36:	83 e8 01             	sub    eax,0x1
    6b39:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6b3c:	eb 35                	jmp    6b73 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x272>
    6b3e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6b42:	48 8d 50 02          	lea    rdx,[rax+0x2]
    6b46:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6b4a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6b4d:	88 02                	mov    BYTE PTR [rdx],al
    6b4f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6b53:	48 83 c0 01          	add    rax,0x1
    6b57:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
    6b5a:	88 10                	mov    BYTE PTR [rax],dl
    6b5c:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6b5f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6b63:	88 10                	mov    BYTE PTR [rax],dl
    6b65:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6b69:	48 83 45 e8 02       	add    QWORD PTR [rbp-0x18],0x2
    6b6e:	48 83 45 f0 03       	add    QWORD PTR [rbp-0x10],0x3
    6b73:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6b77:	79 c5                	jns    6b3e <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x23d>
    6b79:	e9 b5 02 00 00       	jmp    6e33 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x532>
    6b7e:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6b81:	83 e8 01             	sub    eax,0x1
    6b84:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6b87:	eb 47                	jmp    6bd0 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x2cf>
    6b89:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6b8d:	48 8d 50 02          	lea    rdx,[rax+0x2]
    6b91:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6b95:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6b98:	88 02                	mov    BYTE PTR [rdx],al
    6b9a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6b9e:	48 83 c0 01          	add    rax,0x1
    6ba2:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
    6ba5:	88 10                	mov    BYTE PTR [rax],dl
    6ba7:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6baa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6bae:	88 10                	mov    BYTE PTR [rax],dl
    6bb0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6bb4:	48 8d 50 03          	lea    rdx,[rax+0x3]
    6bb8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6bbc:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
    6bc0:	88 02                	mov    BYTE PTR [rdx],al
    6bc2:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6bc6:	48 83 45 e8 02       	add    QWORD PTR [rbp-0x18],0x2
    6bcb:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
    6bd0:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6bd4:	79 b3                	jns    6b89 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x288>
    6bd6:	e9 58 02 00 00       	jmp    6e33 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x532>
    6bdb:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6bde:	83 e8 01             	sub    eax,0x1
    6be1:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6be4:	eb 4a                	jmp    6c30 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x32f>
    6be6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6bea:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6bed:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6bf1:	88 10                	mov    BYTE PTR [rax],dl
    6bf3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6bf7:	48 8d 50 01          	lea    rdx,[rax+0x1]
    6bfb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6bff:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
    6c03:	88 02                	mov    BYTE PTR [rdx],al
    6c05:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6c09:	48 8d 50 02          	lea    rdx,[rax+0x2]
    6c0d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6c11:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
    6c15:	88 02                	mov    BYTE PTR [rdx],al
    6c17:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6c1b:	48 83 c0 03          	add    rax,0x3
    6c1f:	c6 00 ff             	mov    BYTE PTR [rax],0xff
    6c22:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6c26:	48 83 45 e8 03       	add    QWORD PTR [rbp-0x18],0x3
    6c2b:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
    6c30:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6c34:	79 b0                	jns    6be6 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x2e5>
    6c36:	e9 f8 01 00 00       	jmp    6e33 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x532>
    6c3b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6c3e:	83 e8 01             	sub    eax,0x1
    6c41:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6c44:	eb 43                	jmp    6c89 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x388>
    6c46:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6c4a:	48 83 c0 02          	add    rax,0x2
    6c4e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6c51:	0f b6 d0             	movzx  edx,al
    6c54:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6c58:	48 83 c0 01          	add    rax,0x1
    6c5c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6c5f:	0f b6 c8             	movzx  ecx,al
    6c62:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6c66:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6c69:	0f b6 c0             	movzx  eax,al
    6c6c:	89 ce                	mov    esi,ecx
    6c6e:	89 c7                	mov    edi,eax
    6c70:	e8 61 fc ff ff       	call   68d6 <stbi__compute_y(int, int, int)>
    6c75:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    6c79:	88 02                	mov    BYTE PTR [rdx],al
    6c7b:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6c7f:	48 83 45 e8 03       	add    QWORD PTR [rbp-0x18],0x3
    6c84:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
    6c89:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6c8d:	79 b7                	jns    6c46 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x345>
    6c8f:	e9 9f 01 00 00       	jmp    6e33 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x532>
    6c94:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6c97:	83 e8 01             	sub    eax,0x1
    6c9a:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6c9d:	eb 4e                	jmp    6ced <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x3ec>
    6c9f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6ca3:	48 83 c0 02          	add    rax,0x2
    6ca7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6caa:	0f b6 d0             	movzx  edx,al
    6cad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6cb1:	48 83 c0 01          	add    rax,0x1
    6cb5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6cb8:	0f b6 c8             	movzx  ecx,al
    6cbb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6cbf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6cc2:	0f b6 c0             	movzx  eax,al
    6cc5:	89 ce                	mov    esi,ecx
    6cc7:	89 c7                	mov    edi,eax
    6cc9:	e8 08 fc ff ff       	call   68d6 <stbi__compute_y(int, int, int)>
    6cce:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    6cd2:	88 02                	mov    BYTE PTR [rdx],al
    6cd4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6cd8:	48 83 c0 01          	add    rax,0x1
    6cdc:	c6 00 ff             	mov    BYTE PTR [rax],0xff
    6cdf:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6ce3:	48 83 45 e8 03       	add    QWORD PTR [rbp-0x18],0x3
    6ce8:	48 83 45 f0 02       	add    QWORD PTR [rbp-0x10],0x2
    6ced:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6cf1:	79 ac                	jns    6c9f <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x39e>
    6cf3:	e9 3b 01 00 00       	jmp    6e33 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x532>
    6cf8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6cfb:	83 e8 01             	sub    eax,0x1
    6cfe:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6d01:	eb 43                	jmp    6d46 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x445>
    6d03:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6d07:	48 83 c0 02          	add    rax,0x2
    6d0b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6d0e:	0f b6 d0             	movzx  edx,al
    6d11:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6d15:	48 83 c0 01          	add    rax,0x1
    6d19:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6d1c:	0f b6 c8             	movzx  ecx,al
    6d1f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6d23:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6d26:	0f b6 c0             	movzx  eax,al
    6d29:	89 ce                	mov    esi,ecx
    6d2b:	89 c7                	mov    edi,eax
    6d2d:	e8 a4 fb ff ff       	call   68d6 <stbi__compute_y(int, int, int)>
    6d32:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    6d36:	88 02                	mov    BYTE PTR [rdx],al
    6d38:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6d3c:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
    6d41:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
    6d46:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6d4a:	79 b7                	jns    6d03 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x402>
    6d4c:	e9 e2 00 00 00       	jmp    6e33 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x532>
    6d51:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6d54:	83 e8 01             	sub    eax,0x1
    6d57:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6d5a:	eb 55                	jmp    6db1 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x4b0>
    6d5c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6d60:	48 83 c0 02          	add    rax,0x2
    6d64:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6d67:	0f b6 d0             	movzx  edx,al
    6d6a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6d6e:	48 83 c0 01          	add    rax,0x1
    6d72:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6d75:	0f b6 c8             	movzx  ecx,al
    6d78:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6d7c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    6d7f:	0f b6 c0             	movzx  eax,al
    6d82:	89 ce                	mov    esi,ecx
    6d84:	89 c7                	mov    edi,eax
    6d86:	e8 4b fb ff ff       	call   68d6 <stbi__compute_y(int, int, int)>
    6d8b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    6d8f:	88 02                	mov    BYTE PTR [rdx],al
    6d91:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6d95:	48 8d 50 01          	lea    rdx,[rax+0x1]
    6d99:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6d9d:	0f b6 40 03          	movzx  eax,BYTE PTR [rax+0x3]
    6da1:	88 02                	mov    BYTE PTR [rdx],al
    6da3:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6da7:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
    6dac:	48 83 45 f0 02       	add    QWORD PTR [rbp-0x10],0x2
    6db1:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6db5:	79 a5                	jns    6d5c <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x45b>
    6db7:	eb 7a                	jmp    6e33 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x532>
    6db9:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6dbc:	83 e8 01             	sub    eax,0x1
    6dbf:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6dc2:	eb 3f                	jmp    6e03 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x502>
    6dc4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6dc8:	0f b6 10             	movzx  edx,BYTE PTR [rax]
    6dcb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6dcf:	88 10                	mov    BYTE PTR [rax],dl
    6dd1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6dd5:	48 8d 50 01          	lea    rdx,[rax+0x1]
    6dd9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6ddd:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
    6de1:	88 02                	mov    BYTE PTR [rdx],al
    6de3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6de7:	48 8d 50 02          	lea    rdx,[rax+0x2]
    6deb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6def:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
    6df3:	88 02                	mov    BYTE PTR [rdx],al
    6df5:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6df9:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
    6dfe:	48 83 45 f0 03       	add    QWORD PTR [rbp-0x10],0x3
    6e03:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6e07:	79 bb                	jns    6dc4 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x4c3>
    6e09:	eb 28                	jmp    6e33 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0x532>
    6e0b:	48 8d 05 46 33 03 00 	lea    rax,[rip+0x33346]        # 3a158 <_IO_stdin_used+0x158>
    6e12:	48 89 c1             	mov    rcx,rax
    6e15:	ba 99 06 00 00       	mov    edx,0x699
    6e1a:	48 8d 05 77 32 03 00 	lea    rax,[rip+0x33277]        # 3a098 <_IO_stdin_used+0x98>
    6e21:	48 89 c6             	mov    rsi,rax
    6e24:	48 8d 05 ac 33 03 00 	lea    rax,[rip+0x333ac]        # 3a1d7 <_IO_stdin_used+0x1d7>
    6e2b:	48 89 c7             	mov    rdi,rax
    6e2e:	e8 4d d4 ff ff       	call   4280 <__assert_fail@plt>
    6e33:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    6e37:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
    6e3a:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    6e3d:	0f 8c 6d fb ff ff    	jl     69b0 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)+0xaf>
    6e43:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    6e47:	48 89 c7             	mov    rdi,rax
    6e4a:	e8 e1 d6 ff ff       	call   4530 <free@plt>
    6e4f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6e53:	c9                   	leave  
    6e54:	c3                   	ret    

0000000000006e55 <stbi__compute_y_16(int, int, int)>:
    6e55:	55                   	push   rbp
    6e56:	48 89 e5             	mov    rbp,rsp
    6e59:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    6e5c:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    6e5f:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
    6e62:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    6e65:	6b d0 4d             	imul   edx,eax,0x4d
    6e68:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    6e6b:	69 c0 96 00 00 00    	imul   eax,eax,0x96
    6e71:	01 c2                	add    edx,eax
    6e73:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    6e76:	6b c0 1d             	imul   eax,eax,0x1d
    6e79:	01 d0                	add    eax,edx
    6e7b:	c1 f8 08             	sar    eax,0x8
    6e7e:	5d                   	pop    rbp
    6e7f:	c3                   	ret    

0000000000006e80 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)>:
    6e80:	55                   	push   rbp
    6e81:	48 89 e5             	mov    rbp,rsp
    6e84:	48 83 ec 40          	sub    rsp,0x40
    6e88:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    6e8c:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
    6e8f:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
    6e92:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
    6e95:	44 89 45 c8          	mov    DWORD PTR [rbp-0x38],r8d
    6e99:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    6e9c:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
    6e9f:	75 09                	jne    6eaa <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x2a>
    6ea1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    6ea5:	e9 54 05 00 00       	jmp    73fe <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x57e>
    6eaa:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
    6eae:	7e 06                	jle    6eb6 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x36>
    6eb0:	83 7d d0 04          	cmp    DWORD PTR [rbp-0x30],0x4
    6eb4:	7e 28                	jle    6ede <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x5e>
    6eb6:	48 8d 05 8b 33 03 00 	lea    rax,[rip+0x3338b]        # 3a248 <_IO_stdin_used+0x248>
    6ebd:	48 89 c1             	mov    rcx,rax
    6ec0:	ba b5 06 00 00       	mov    edx,0x6b5
    6ec5:	48 8d 05 cc 31 03 00 	lea    rax,[rip+0x331cc]        # 3a098 <_IO_stdin_used+0x98>
    6ecc:	48 89 c6             	mov    rsi,rax
    6ecf:	48 8d 05 e2 32 03 00 	lea    rax,[rip+0x332e2]        # 3a1b8 <_IO_stdin_used+0x1b8>
    6ed6:	48 89 c7             	mov    rdi,rax
    6ed9:	e8 a2 d3 ff ff       	call   4280 <__assert_fail@plt>
    6ede:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    6ee1:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    6ee5:	0f af 45 c8          	imul   eax,DWORD PTR [rbp-0x38]
    6ee9:	01 c0                	add    eax,eax
    6eeb:	89 c0                	mov    eax,eax
    6eed:	48 89 c7             	mov    rdi,rax
    6ef0:	e8 99 dc ff ff       	call   4b8e <stbi__malloc(unsigned long)>
    6ef5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    6ef9:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    6efe:	75 25                	jne    6f25 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0xa5>
    6f00:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    6f04:	48 89 c7             	mov    rdi,rax
    6f07:	e8 24 d6 ff ff       	call   4530 <free@plt>
    6f0c:	48 8d 05 20 31 03 00 	lea    rax,[rip+0x33120]        # 3a033 <_IO_stdin_used+0x33>
    6f13:	48 89 c7             	mov    rdi,rax
    6f16:	e8 57 dc ff ff       	call   4b72 <stbi__err(char const*)>
    6f1b:	b8 00 00 00 00       	mov    eax,0x0
    6f20:	e9 d9 04 00 00       	jmp    73fe <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x57e>
    6f25:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    6f2c:	e9 b1 04 00 00       	jmp    73e2 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x562>
    6f31:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    6f34:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    6f38:	89 c2                	mov    edx,eax
    6f3a:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    6f3d:	0f af c2             	imul   eax,edx
    6f40:	89 c0                	mov    eax,eax
    6f42:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    6f46:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    6f4a:	48 01 d0             	add    rax,rdx
    6f4d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    6f51:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    6f54:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    6f58:	89 c2                	mov    edx,eax
    6f5a:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    6f5d:	0f af c2             	imul   eax,edx
    6f60:	89 c0                	mov    eax,eax
    6f62:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    6f66:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    6f6a:	48 01 d0             	add    rax,rdx
    6f6d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    6f71:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    6f74:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
    6f7b:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    6f7e:	01 d0                	add    eax,edx
    6f80:	83 e8 0a             	sub    eax,0xa
    6f83:	83 f8 19             	cmp    eax,0x19
    6f86:	0f 87 2a 04 00 00    	ja     73b6 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x536>
    6f8c:	89 c0                	mov    eax,eax
    6f8e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    6f96:	48 8d 05 07 33 03 00 	lea    rax,[rip+0x33307]        # 3a2a4 <_IO_stdin_used+0x2a4>
    6f9d:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    6fa0:	48 98                	cdqe   
    6fa2:	48 8d 15 fb 32 03 00 	lea    rdx,[rip+0x332fb]        # 3a2a4 <_IO_stdin_used+0x2a4>
    6fa9:	48 01 d0             	add    rax,rdx
    6fac:	ff e0                	jmp    rax
    6fae:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6fb1:	83 e8 01             	sub    eax,0x1
    6fb4:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6fb7:	eb 29                	jmp    6fe2 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x162>
    6fb9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    6fbd:	0f b7 10             	movzx  edx,WORD PTR [rax]
    6fc0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6fc4:	66 89 10             	mov    WORD PTR [rax],dx
    6fc7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6fcb:	48 83 c0 02          	add    rax,0x2
    6fcf:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
    6fd4:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    6fd8:	48 83 45 e8 02       	add    QWORD PTR [rbp-0x18],0x2
    6fdd:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
    6fe2:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    6fe6:	79 d1                	jns    6fb9 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x139>
    6fe8:	e9 f1 03 00 00       	jmp    73de <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55e>
    6fed:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    6ff0:	83 e8 01             	sub    eax,0x1
    6ff3:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    6ff6:	eb 38                	jmp    7030 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x1b0>
    6ff8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    6ffc:	48 8d 50 04          	lea    rdx,[rax+0x4]
    7000:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7004:	0f b7 00             	movzx  eax,WORD PTR [rax]
    7007:	66 89 02             	mov    WORD PTR [rdx],ax
    700a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    700e:	48 83 c0 02          	add    rax,0x2
    7012:	0f b7 12             	movzx  edx,WORD PTR [rdx]
    7015:	66 89 10             	mov    WORD PTR [rax],dx
    7018:	0f b7 10             	movzx  edx,WORD PTR [rax]
    701b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    701f:	66 89 10             	mov    WORD PTR [rax],dx
    7022:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    7026:	48 83 45 e8 02       	add    QWORD PTR [rbp-0x18],0x2
    702b:	48 83 45 f0 06       	add    QWORD PTR [rbp-0x10],0x6
    7030:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    7034:	79 c2                	jns    6ff8 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x178>
    7036:	e9 a3 03 00 00       	jmp    73de <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55e>
    703b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    703e:	83 e8 01             	sub    eax,0x1
    7041:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    7044:	eb 45                	jmp    708b <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x20b>
    7046:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    704a:	48 8d 50 04          	lea    rdx,[rax+0x4]
    704e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7052:	0f b7 00             	movzx  eax,WORD PTR [rax]
    7055:	66 89 02             	mov    WORD PTR [rdx],ax
    7058:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    705c:	48 83 c0 02          	add    rax,0x2
    7060:	0f b7 12             	movzx  edx,WORD PTR [rdx]
    7063:	66 89 10             	mov    WORD PTR [rax],dx
    7066:	0f b7 10             	movzx  edx,WORD PTR [rax]
    7069:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    706d:	66 89 10             	mov    WORD PTR [rax],dx
    7070:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    7074:	48 83 c0 06          	add    rax,0x6
    7078:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
    707d:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    7081:	48 83 45 e8 02       	add    QWORD PTR [rbp-0x18],0x2
    7086:	48 83 45 f0 08       	add    QWORD PTR [rbp-0x10],0x8
    708b:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    708f:	79 b5                	jns    7046 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x1c6>
    7091:	e9 48 03 00 00       	jmp    73de <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55e>
    7096:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7099:	83 e8 01             	sub    eax,0x1
    709c:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    709f:	eb 1c                	jmp    70bd <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x23d>
    70a1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    70a5:	0f b7 10             	movzx  edx,WORD PTR [rax]
    70a8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    70ac:	66 89 10             	mov    WORD PTR [rax],dx
    70af:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    70b3:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
    70b8:	48 83 45 f0 02       	add    QWORD PTR [rbp-0x10],0x2
    70bd:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    70c1:	79 de                	jns    70a1 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x221>
    70c3:	e9 16 03 00 00       	jmp    73de <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55e>
    70c8:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    70cb:	83 e8 01             	sub    eax,0x1
    70ce:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    70d1:	eb 38                	jmp    710b <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x28b>
    70d3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    70d7:	48 8d 50 04          	lea    rdx,[rax+0x4]
    70db:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    70df:	0f b7 00             	movzx  eax,WORD PTR [rax]
    70e2:	66 89 02             	mov    WORD PTR [rdx],ax
    70e5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    70e9:	48 83 c0 02          	add    rax,0x2
    70ed:	0f b7 12             	movzx  edx,WORD PTR [rdx]
    70f0:	66 89 10             	mov    WORD PTR [rax],dx
    70f3:	0f b7 10             	movzx  edx,WORD PTR [rax]
    70f6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    70fa:	66 89 10             	mov    WORD PTR [rax],dx
    70fd:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    7101:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
    7106:	48 83 45 f0 06       	add    QWORD PTR [rbp-0x10],0x6
    710b:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    710f:	79 c2                	jns    70d3 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x253>
    7111:	e9 c8 02 00 00       	jmp    73de <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55e>
    7116:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7119:	83 e8 01             	sub    eax,0x1
    711c:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    711f:	eb 4b                	jmp    716c <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x2ec>
    7121:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    7125:	48 8d 50 04          	lea    rdx,[rax+0x4]
    7129:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    712d:	0f b7 00             	movzx  eax,WORD PTR [rax]
    7130:	66 89 02             	mov    WORD PTR [rdx],ax
    7133:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    7137:	48 83 c0 02          	add    rax,0x2
    713b:	0f b7 12             	movzx  edx,WORD PTR [rdx]
    713e:	66 89 10             	mov    WORD PTR [rax],dx
    7141:	0f b7 10             	movzx  edx,WORD PTR [rax]
    7144:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    7148:	66 89 10             	mov    WORD PTR [rax],dx
    714b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    714f:	48 8d 50 06          	lea    rdx,[rax+0x6]
    7153:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7157:	0f b7 40 02          	movzx  eax,WORD PTR [rax+0x2]
    715b:	66 89 02             	mov    WORD PTR [rdx],ax
    715e:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    7162:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
    7167:	48 83 45 f0 08       	add    QWORD PTR [rbp-0x10],0x8
    716c:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    7170:	79 af                	jns    7121 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x2a1>
    7172:	e9 67 02 00 00       	jmp    73de <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55e>
    7177:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    717a:	83 e8 01             	sub    eax,0x1
    717d:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    7180:	eb 4f                	jmp    71d1 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x351>
    7182:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7186:	0f b7 10             	movzx  edx,WORD PTR [rax]
    7189:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    718d:	66 89 10             	mov    WORD PTR [rax],dx
    7190:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    7194:	48 8d 50 02          	lea    rdx,[rax+0x2]
    7198:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    719c:	0f b7 40 02          	movzx  eax,WORD PTR [rax+0x2]
    71a0:	66 89 02             	mov    WORD PTR [rdx],ax
    71a3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    71a7:	48 8d 50 04          	lea    rdx,[rax+0x4]
    71ab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    71af:	0f b7 40 04          	movzx  eax,WORD PTR [rax+0x4]
    71b3:	66 89 02             	mov    WORD PTR [rdx],ax
    71b6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    71ba:	48 83 c0 06          	add    rax,0x6
    71be:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
    71c3:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    71c7:	48 83 45 e8 06       	add    QWORD PTR [rbp-0x18],0x6
    71cc:	48 83 45 f0 08       	add    QWORD PTR [rbp-0x10],0x8
    71d1:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    71d5:	79 ab                	jns    7182 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x302>
    71d7:	e9 02 02 00 00       	jmp    73de <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55e>
    71dc:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    71df:	83 e8 01             	sub    eax,0x1
    71e2:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    71e5:	eb 44                	jmp    722b <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x3ab>
    71e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    71eb:	48 83 c0 04          	add    rax,0x4
    71ef:	0f b7 00             	movzx  eax,WORD PTR [rax]
    71f2:	0f b7 d0             	movzx  edx,ax
    71f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    71f9:	48 83 c0 02          	add    rax,0x2
    71fd:	0f b7 00             	movzx  eax,WORD PTR [rax]
    7200:	0f b7 c8             	movzx  ecx,ax
    7203:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7207:	0f b7 00             	movzx  eax,WORD PTR [rax]
    720a:	0f b7 c0             	movzx  eax,ax
    720d:	89 ce                	mov    esi,ecx
    720f:	89 c7                	mov    edi,eax
    7211:	e8 3f fc ff ff       	call   6e55 <stbi__compute_y_16(int, int, int)>
    7216:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    721a:	66 89 02             	mov    WORD PTR [rdx],ax
    721d:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    7221:	48 83 45 e8 06       	add    QWORD PTR [rbp-0x18],0x6
    7226:	48 83 45 f0 02       	add    QWORD PTR [rbp-0x10],0x2
    722b:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    722f:	79 b6                	jns    71e7 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x367>
    7231:	e9 a8 01 00 00       	jmp    73de <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55e>
    7236:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7239:	83 e8 01             	sub    eax,0x1
    723c:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    723f:	eb 51                	jmp    7292 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x412>
    7241:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7245:	48 83 c0 04          	add    rax,0x4
    7249:	0f b7 00             	movzx  eax,WORD PTR [rax]
    724c:	0f b7 d0             	movzx  edx,ax
    724f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7253:	48 83 c0 02          	add    rax,0x2
    7257:	0f b7 00             	movzx  eax,WORD PTR [rax]
    725a:	0f b7 c8             	movzx  ecx,ax
    725d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7261:	0f b7 00             	movzx  eax,WORD PTR [rax]
    7264:	0f b7 c0             	movzx  eax,ax
    7267:	89 ce                	mov    esi,ecx
    7269:	89 c7                	mov    edi,eax
    726b:	e8 e5 fb ff ff       	call   6e55 <stbi__compute_y_16(int, int, int)>
    7270:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    7274:	66 89 02             	mov    WORD PTR [rdx],ax
    7277:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    727b:	48 83 c0 02          	add    rax,0x2
    727f:	66 c7 00 ff ff       	mov    WORD PTR [rax],0xffff
    7284:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    7288:	48 83 45 e8 06       	add    QWORD PTR [rbp-0x18],0x6
    728d:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
    7292:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    7296:	79 a9                	jns    7241 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x3c1>
    7298:	e9 41 01 00 00       	jmp    73de <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55e>
    729d:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    72a0:	83 e8 01             	sub    eax,0x1
    72a3:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    72a6:	eb 44                	jmp    72ec <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x46c>
    72a8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    72ac:	48 83 c0 04          	add    rax,0x4
    72b0:	0f b7 00             	movzx  eax,WORD PTR [rax]
    72b3:	0f b7 d0             	movzx  edx,ax
    72b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    72ba:	48 83 c0 02          	add    rax,0x2
    72be:	0f b7 00             	movzx  eax,WORD PTR [rax]
    72c1:	0f b7 c8             	movzx  ecx,ax
    72c4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    72c8:	0f b7 00             	movzx  eax,WORD PTR [rax]
    72cb:	0f b7 c0             	movzx  eax,ax
    72ce:	89 ce                	mov    esi,ecx
    72d0:	89 c7                	mov    edi,eax
    72d2:	e8 7e fb ff ff       	call   6e55 <stbi__compute_y_16(int, int, int)>
    72d7:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    72db:	66 89 02             	mov    WORD PTR [rdx],ax
    72de:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    72e2:	48 83 45 e8 08       	add    QWORD PTR [rbp-0x18],0x8
    72e7:	48 83 45 f0 02       	add    QWORD PTR [rbp-0x10],0x2
    72ec:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    72f0:	79 b6                	jns    72a8 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x428>
    72f2:	e9 e7 00 00 00       	jmp    73de <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55e>
    72f7:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    72fa:	83 e8 01             	sub    eax,0x1
    72fd:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    7300:	eb 57                	jmp    7359 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x4d9>
    7302:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7306:	48 83 c0 04          	add    rax,0x4
    730a:	0f b7 00             	movzx  eax,WORD PTR [rax]
    730d:	0f b7 d0             	movzx  edx,ax
    7310:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7314:	48 83 c0 02          	add    rax,0x2
    7318:	0f b7 00             	movzx  eax,WORD PTR [rax]
    731b:	0f b7 c8             	movzx  ecx,ax
    731e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7322:	0f b7 00             	movzx  eax,WORD PTR [rax]
    7325:	0f b7 c0             	movzx  eax,ax
    7328:	89 ce                	mov    esi,ecx
    732a:	89 c7                	mov    edi,eax
    732c:	e8 24 fb ff ff       	call   6e55 <stbi__compute_y_16(int, int, int)>
    7331:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    7335:	66 89 02             	mov    WORD PTR [rdx],ax
    7338:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    733c:	48 8d 50 02          	lea    rdx,[rax+0x2]
    7340:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7344:	0f b7 40 06          	movzx  eax,WORD PTR [rax+0x6]
    7348:	66 89 02             	mov    WORD PTR [rdx],ax
    734b:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    734f:	48 83 45 e8 08       	add    QWORD PTR [rbp-0x18],0x8
    7354:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
    7359:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    735d:	79 a3                	jns    7302 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x482>
    735f:	eb 7d                	jmp    73de <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55e>
    7361:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7364:	83 e8 01             	sub    eax,0x1
    7367:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    736a:	eb 42                	jmp    73ae <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x52e>
    736c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7370:	0f b7 10             	movzx  edx,WORD PTR [rax]
    7373:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    7377:	66 89 10             	mov    WORD PTR [rax],dx
    737a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    737e:	48 8d 50 02          	lea    rdx,[rax+0x2]
    7382:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7386:	0f b7 40 02          	movzx  eax,WORD PTR [rax+0x2]
    738a:	66 89 02             	mov    WORD PTR [rdx],ax
    738d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    7391:	48 8d 50 04          	lea    rdx,[rax+0x4]
    7395:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7399:	0f b7 40 04          	movzx  eax,WORD PTR [rax+0x4]
    739d:	66 89 02             	mov    WORD PTR [rdx],ax
    73a0:	83 6d e0 01          	sub    DWORD PTR [rbp-0x20],0x1
    73a4:	48 83 45 e8 08       	add    QWORD PTR [rbp-0x18],0x8
    73a9:	48 83 45 f0 06       	add    QWORD PTR [rbp-0x10],0x6
    73ae:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    73b2:	79 b8                	jns    736c <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x4ec>
    73b4:	eb 28                	jmp    73de <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0x55e>
    73b6:	48 8d 05 8b 2e 03 00 	lea    rax,[rip+0x32e8b]        # 3a248 <_IO_stdin_used+0x248>
    73bd:	48 89 c1             	mov    rcx,rax
    73c0:	ba d2 06 00 00       	mov    edx,0x6d2
    73c5:	48 8d 05 cc 2c 03 00 	lea    rax,[rip+0x32ccc]        # 3a098 <_IO_stdin_used+0x98>
    73cc:	48 89 c6             	mov    rsi,rax
    73cf:	48 8d 05 01 2e 03 00 	lea    rax,[rip+0x32e01]        # 3a1d7 <_IO_stdin_used+0x1d7>
    73d6:	48 89 c7             	mov    rdi,rax
    73d9:	e8 a2 ce ff ff       	call   4280 <__assert_fail@plt>
    73de:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    73e2:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
    73e5:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    73e8:	0f 8c 43 fb ff ff    	jl     6f31 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)+0xb1>
    73ee:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    73f2:	48 89 c7             	mov    rdi,rax
    73f5:	e8 36 d1 ff ff       	call   4530 <free@plt>
    73fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    73fe:	c9                   	leave  
    73ff:	c3                   	ret    

0000000000007400 <stbi__ldr_to_hdr(unsigned char*, int, int, int)>:
    7400:	55                   	push   rbp
    7401:	48 89 e5             	mov    rbp,rsp
    7404:	48 83 ec 40          	sub    rsp,0x40
    7408:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    740c:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
    740f:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
    7412:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
    7415:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
    741a:	75 0a                	jne    7426 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x26>
    741c:	b8 00 00 00 00       	mov    eax,0x0
    7421:	e9 9e 01 00 00       	jmp    75c4 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x1c4>
    7426:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
    7429:	8b 75 d0             	mov    esi,DWORD PTR [rbp-0x30]
    742c:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    742f:	41 b8 00 00 00 00    	mov    r8d,0x0
    7435:	b9 04 00 00 00       	mov    ecx,0x4
    743a:	89 c7                	mov    edi,eax
    743c:	e8 b6 d9 ff ff       	call   4df7 <stbi__malloc_mad4(int, int, int, int, int)>
    7441:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    7445:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    744a:	75 25                	jne    7471 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x71>
    744c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7450:	48 89 c7             	mov    rdi,rax
    7453:	e8 d8 d0 ff ff       	call   4530 <free@plt>
    7458:	48 8d 05 d4 2b 03 00 	lea    rax,[rip+0x32bd4]        # 3a033 <_IO_stdin_used+0x33>
    745f:	48 89 c7             	mov    rdi,rax
    7462:	e8 0b d7 ff ff       	call   4b72 <stbi__err(char const*)>
    7467:	b8 00 00 00 00       	mov    eax,0x0
    746c:	e9 53 01 00 00       	jmp    75c4 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x1c4>
    7471:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7474:	83 e0 01             	and    eax,0x1
    7477:	85 c0                	test   eax,eax
    7479:	74 08                	je     7483 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x83>
    747b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    747e:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    7481:	eb 09                	jmp    748c <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x8c>
    7483:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7486:	83 e8 01             	sub    eax,0x1
    7489:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    748c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    7493:	e9 96 00 00 00       	jmp    752e <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x12e>
    7498:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
    749f:	eb 7d                	jmp    751e <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x11e>
    74a1:	f3 0f 10 15 97 2f 04 00 	movss  xmm2,DWORD PTR [rip+0x42f97]        # 4a440 <stbi__l2h_gamma>
    74a9:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    74ac:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    74b0:	89 c2                	mov    edx,eax
    74b2:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    74b5:	01 d0                	add    eax,edx
    74b7:	48 63 d0             	movsxd rdx,eax
    74ba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    74be:	48 01 d0             	add    rax,rdx
    74c1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    74c4:	0f b6 c0             	movzx  eax,al
    74c7:	66 0f ef c0          	pxor   xmm0,xmm0
    74cb:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
    74cf:	f3 0f 10 0d 71 55 03 00 	movss  xmm1,DWORD PTR [rip+0x35571]        # 3ca48 <NANO_SEC+0x1780>
    74d7:	f3 0f 5e c1          	divss  xmm0,xmm1
    74db:	66 0f 7e c0          	movd   eax,xmm0
    74df:	0f 28 ca             	movaps xmm1,xmm2
    74e2:	66 0f 6e c0          	movd   xmm0,eax
    74e6:	e8 42 de 01 00       	call   2532d <std::pow(float, float)>
    74eb:	f3 0f 10 0d 51 2f 04 00 	movss  xmm1,DWORD PTR [rip+0x42f51]        # 4a444 <stbi__l2h_scale>
    74f3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    74f6:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    74fa:	89 c2                	mov    edx,eax
    74fc:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    74ff:	01 d0                	add    eax,edx
    7501:	48 98                	cdqe   
    7503:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    750b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    750f:	48 01 d0             	add    rax,rdx
    7512:	f3 0f 59 c1          	mulss  xmm0,xmm1
    7516:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
    751a:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
    751e:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    7521:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
    7524:	0f 8c 77 ff ff ff    	jl     74a1 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0xa1>
    752a:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
    752e:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    7531:	0f af 45 d0          	imul   eax,DWORD PTR [rbp-0x30]
    7535:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    7538:	0f 8c 5a ff ff ff    	jl     7498 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x98>
    753e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7541:	3b 45 cc             	cmp    eax,DWORD PTR [rbp-0x34]
    7544:	7d 6e                	jge    75b4 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x1b4>
    7546:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    754d:	eb 59                	jmp    75a8 <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x1a8>
    754f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    7552:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    7556:	89 c2                	mov    edx,eax
    7558:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    755b:	01 d0                	add    eax,edx
    755d:	48 63 d0             	movsxd rdx,eax
    7560:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7564:	48 01 d0             	add    rax,rdx
    7567:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    756a:	0f b6 c0             	movzx  eax,al
    756d:	66 0f ef c0          	pxor   xmm0,xmm0
    7571:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
    7575:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    7578:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    757c:	89 c2                	mov    edx,eax
    757e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7581:	01 d0                	add    eax,edx
    7583:	48 98                	cdqe   
    7585:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    758d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    7591:	48 01 d0             	add    rax,rdx
    7594:	f3 0f 10 0d ac 54 03 00 	movss  xmm1,DWORD PTR [rip+0x354ac]        # 3ca48 <NANO_SEC+0x1780>
    759c:	f3 0f 5e c1          	divss  xmm0,xmm1
    75a0:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
    75a4:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
    75a8:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    75ab:	0f af 45 d0          	imul   eax,DWORD PTR [rbp-0x30]
    75af:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    75b2:	7c 9b                	jl     754f <stbi__ldr_to_hdr(unsigned char*, int, int, int)+0x14f>
    75b4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    75b8:	48 89 c7             	mov    rdi,rax
    75bb:	e8 70 cf ff ff       	call   4530 <free@plt>
    75c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    75c4:	c9                   	leave  
    75c5:	c3                   	ret    

00000000000075c6 <stbi__hdr_to_ldr(float*, int, int, int)>:
    75c6:	55                   	push   rbp
    75c7:	48 89 e5             	mov    rbp,rsp
    75ca:	48 83 ec 40          	sub    rsp,0x40
    75ce:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    75d2:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
    75d5:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
    75d8:	89 4d cc             	mov    DWORD PTR [rbp-0x34],ecx
    75db:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
    75e0:	75 0a                	jne    75ec <stbi__hdr_to_ldr(float*, int, int, int)+0x26>
    75e2:	b8 00 00 00 00       	mov    eax,0x0
    75e7:	e9 fe 01 00 00       	jmp    77ea <stbi__hdr_to_ldr(float*, int, int, int)+0x224>
    75ec:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
    75ef:	8b 75 d0             	mov    esi,DWORD PTR [rbp-0x30]
    75f2:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    75f5:	b9 00 00 00 00       	mov    ecx,0x0
    75fa:	89 c7                	mov    edi,eax
    75fc:	e8 a0 d7 ff ff       	call   4da1 <stbi__malloc_mad3(int, int, int, int)>
    7601:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    7605:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    760a:	75 25                	jne    7631 <stbi__hdr_to_ldr(float*, int, int, int)+0x6b>
    760c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7610:	48 89 c7             	mov    rdi,rax
    7613:	e8 18 cf ff ff       	call   4530 <free@plt>
    7618:	48 8d 05 14 2a 03 00 	lea    rax,[rip+0x32a14]        # 3a033 <_IO_stdin_used+0x33>
    761f:	48 89 c7             	mov    rdi,rax
    7622:	e8 4b d5 ff ff       	call   4b72 <stbi__err(char const*)>
    7627:	b8 00 00 00 00       	mov    eax,0x0
    762c:	e9 b9 01 00 00       	jmp    77ea <stbi__hdr_to_ldr(float*, int, int, int)+0x224>
    7631:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7634:	83 e0 01             	and    eax,0x1
    7637:	85 c0                	test   eax,eax
    7639:	74 08                	je     7643 <stbi__hdr_to_ldr(float*, int, int, int)+0x7d>
    763b:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    763e:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    7641:	eb 09                	jmp    764c <stbi__hdr_to_ldr(float*, int, int, int)+0x86>
    7643:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    7646:	83 e8 01             	sub    eax,0x1
    7649:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    764c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    7653:	e9 72 01 00 00       	jmp    77ca <stbi__hdr_to_ldr(float*, int, int, int)+0x204>
    7658:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
    765f:	e9 b9 00 00 00       	jmp    771d <stbi__hdr_to_ldr(float*, int, int, int)+0x157>
    7664:	f3 0f 10 15 dc 2d 04 00 	movss  xmm2,DWORD PTR [rip+0x42ddc]        # 4a448 <stbi__h2l_gamma_i>
    766c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    766f:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    7673:	89 c2                	mov    edx,eax
    7675:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    7678:	01 d0                	add    eax,edx
    767a:	48 98                	cdqe   
    767c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7684:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7688:	48 01 d0             	add    rax,rdx
    768b:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
    768f:	f3 0f 10 05 b5 2d 04 00 	movss  xmm0,DWORD PTR [rip+0x42db5]        # 4a44c <stbi__h2l_scale_i>
    7697:	f3 0f 59 c8          	mulss  xmm1,xmm0
    769b:	66 0f 7e c8          	movd   eax,xmm1
    769f:	0f 28 ca             	movaps xmm1,xmm2
    76a2:	66 0f 6e c0          	movd   xmm0,eax
    76a6:	e8 82 dc 01 00       	call   2532d <std::pow(float, float)>
    76ab:	f3 0f 10 0d 95 53 03 00 	movss  xmm1,DWORD PTR [rip+0x35395]        # 3ca48 <NANO_SEC+0x1780>
    76b3:	f3 0f 59 c8          	mulss  xmm1,xmm0
    76b7:	f3 0f 10 05 8d 53 03 00 	movss  xmm0,DWORD PTR [rip+0x3538d]        # 3ca4c <NANO_SEC+0x1784>
    76bf:	f3 0f 58 c1          	addss  xmm0,xmm1
    76c3:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
    76c8:	66 0f ef c0          	pxor   xmm0,xmm0
    76cc:	0f 2f 45 f0          	comiss xmm0,DWORD PTR [rbp-0x10]
    76d0:	76 09                	jbe    76db <stbi__hdr_to_ldr(float*, int, int, int)+0x115>
    76d2:	66 0f ef c0          	pxor   xmm0,xmm0
    76d6:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
    76db:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
    76e0:	0f 2f 05 61 53 03 00 	comiss xmm0,DWORD PTR [rip+0x35361]        # 3ca48 <NANO_SEC+0x1780>
    76e7:	76 0d                	jbe    76f6 <stbi__hdr_to_ldr(float*, int, int, int)+0x130>
    76e9:	f3 0f 10 05 57 53 03 00 	movss  xmm0,DWORD PTR [rip+0x35357]        # 3ca48 <NANO_SEC+0x1780>
    76f1:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
    76f6:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
    76fb:	f3 0f 2c d0          	cvttss2si edx,xmm0
    76ff:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7702:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    7706:	89 c1                	mov    ecx,eax
    7708:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    770b:	01 c8                	add    eax,ecx
    770d:	48 63 c8             	movsxd rcx,eax
    7710:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    7714:	48 01 c8             	add    rax,rcx
    7717:	88 10                	mov    BYTE PTR [rax],dl
    7719:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
    771d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    7720:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
    7723:	0f 8c 3b ff ff ff    	jl     7664 <stbi__hdr_to_ldr(float*, int, int, int)+0x9e>
    7729:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    772c:	3b 45 cc             	cmp    eax,DWORD PTR [rbp-0x34]
    772f:	0f 8d 91 00 00 00    	jge    77c6 <stbi__hdr_to_ldr(float*, int, int, int)+0x200>
    7735:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7738:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    773c:	89 c2                	mov    edx,eax
    773e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    7741:	01 d0                	add    eax,edx
    7743:	48 98                	cdqe   
    7745:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    774d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7751:	48 01 d0             	add    rax,rdx
    7754:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
    7758:	f3 0f 10 05 e8 52 03 00 	movss  xmm0,DWORD PTR [rip+0x352e8]        # 3ca48 <NANO_SEC+0x1780>
    7760:	f3 0f 59 c8          	mulss  xmm1,xmm0
    7764:	f3 0f 10 05 e0 52 03 00 	movss  xmm0,DWORD PTR [rip+0x352e0]        # 3ca4c <NANO_SEC+0x1784>
    776c:	f3 0f 58 c1          	addss  xmm0,xmm1
    7770:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
    7775:	66 0f ef c0          	pxor   xmm0,xmm0
    7779:	0f 2f 45 f4          	comiss xmm0,DWORD PTR [rbp-0xc]
    777d:	76 09                	jbe    7788 <stbi__hdr_to_ldr(float*, int, int, int)+0x1c2>
    777f:	66 0f ef c0          	pxor   xmm0,xmm0
    7783:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
    7788:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
    778d:	0f 2f 05 b4 52 03 00 	comiss xmm0,DWORD PTR [rip+0x352b4]        # 3ca48 <NANO_SEC+0x1780>
    7794:	76 0d                	jbe    77a3 <stbi__hdr_to_ldr(float*, int, int, int)+0x1dd>
    7796:	f3 0f 10 05 aa 52 03 00 	movss  xmm0,DWORD PTR [rip+0x352aa]        # 3ca48 <NANO_SEC+0x1780>
    779e:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
    77a3:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
    77a8:	f3 0f 2c d0          	cvttss2si edx,xmm0
    77ac:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    77af:	0f af 45 cc          	imul   eax,DWORD PTR [rbp-0x34]
    77b3:	89 c1                	mov    ecx,eax
    77b5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    77b8:	01 c8                	add    eax,ecx
    77ba:	48 63 c8             	movsxd rcx,eax
    77bd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    77c1:	48 01 c8             	add    rax,rcx
    77c4:	88 10                	mov    BYTE PTR [rax],dl
    77c6:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    77ca:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    77cd:	0f af 45 d0          	imul   eax,DWORD PTR [rbp-0x30]
    77d1:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    77d4:	0f 8c 7e fe ff ff    	jl     7658 <stbi__hdr_to_ldr(float*, int, int, int)+0x92>
    77da:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    77de:	48 89 c7             	mov    rdi,rax
    77e1:	e8 4a cd ff ff       	call   4530 <free@plt>
    77e6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    77ea:	c9                   	leave  
    77eb:	c3                   	ret    

00000000000077ec <stbi__build_huffman(stbi__huffman*, int*)>:
    77ec:	55                   	push   rbp
    77ed:	48 89 e5             	mov    rbp,rsp
    77f0:	48 83 ec 30          	sub    rsp,0x30
    77f4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    77f8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    77fc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    7803:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    780a:	eb 48                	jmp    7854 <stbi__build_huffman(stbi__huffman*, int*)+0x68>
    780c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
    7813:	eb 20                	jmp    7835 <stbi__build_huffman(stbi__huffman*, int*)+0x49>
    7815:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7818:	8d 48 01             	lea    ecx,[rax+0x1]
    781b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    781e:	8d 50 01             	lea    edx,[rax+0x1]
    7821:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
    7824:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    7828:	48 98                	cdqe   
    782a:	88 8c 02 00 05 00 00 	mov    BYTE PTR [rdx+rax*1+0x500],cl
    7831:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
    7835:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7838:	48 98                	cdqe   
    783a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7842:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    7846:	48 01 d0             	add    rax,rdx
    7849:	8b 00                	mov    eax,DWORD PTR [rax]
    784b:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
    784e:	7c c5                	jl     7815 <stbi__build_huffman(stbi__huffman*, int*)+0x29>
    7850:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    7854:	83 7d e4 0f          	cmp    DWORD PTR [rbp-0x1c],0xf
    7858:	7e b2                	jle    780c <stbi__build_huffman(stbi__huffman*, int*)+0x20>
    785a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    785e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    7861:	48 98                	cdqe   
    7863:	c6 84 02 00 05 00 00 00 	mov    BYTE PTR [rdx+rax*1+0x500],0x0
    786b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
    7872:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    7879:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [rbp-0x18],0x1
    7880:	e9 c9 00 00 00       	jmp    794e <stbi__build_huffman(stbi__huffman*, int*)+0x162>
    7885:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    7888:	2b 45 f0             	sub    eax,DWORD PTR [rbp-0x10]
    788b:	89 c1                	mov    ecx,eax
    788d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7891:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    7894:	48 63 d2             	movsxd rdx,edx
    7897:	48 81 c2 90 01 00 00 	add    rdx,0x190
    789e:	89 4c 90 0c          	mov    DWORD PTR [rax+rdx*4+0xc],ecx
    78a2:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    78a6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    78a9:	48 98                	cdqe   
    78ab:	0f b6 84 02 00 05 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x500]
    78b3:	0f b6 c0             	movzx  eax,al
    78b6:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
    78b9:	75 66                	jne    7921 <stbi__build_huffman(stbi__huffman*, int*)+0x135>
    78bb:	eb 24                	jmp    78e1 <stbi__build_huffman(stbi__huffman*, int*)+0xf5>
    78bd:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    78c0:	8d 50 01             	lea    edx,[rax+0x1]
    78c3:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
    78c6:	89 c1                	mov    ecx,eax
    78c8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    78cb:	8d 50 01             	lea    edx,[rax+0x1]
    78ce:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
    78d1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    78d5:	48 98                	cdqe   
    78d7:	48 05 00 01 00 00    	add    rax,0x100
    78dd:	66 89 0c 42          	mov    WORD PTR [rdx+rax*2],cx
    78e1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    78e5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    78e8:	48 98                	cdqe   
    78ea:	0f b6 84 02 00 05 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x500]
    78f2:	0f b6 c0             	movzx  eax,al
    78f5:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
    78f8:	74 c3                	je     78bd <stbi__build_huffman(stbi__huffman*, int*)+0xd1>
    78fa:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    78fd:	8d 50 ff             	lea    edx,[rax-0x1]
    7900:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    7903:	89 c1                	mov    ecx,eax
    7905:	d3 ea                	shr    edx,cl
    7907:	89 d0                	mov    eax,edx
    7909:	85 c0                	test   eax,eax
    790b:	74 14                	je     7921 <stbi__build_huffman(stbi__huffman*, int*)+0x135>
    790d:	48 8d 05 f8 29 03 00 	lea    rax,[rip+0x329f8]        # 3a30c <_IO_stdin_used+0x30c>
    7914:	48 89 c7             	mov    rdi,rax
    7917:	e8 56 d2 ff ff       	call   4b72 <stbi__err(char const*)>
    791c:	e9 0e 01 00 00       	jmp    7a2f <stbi__build_huffman(stbi__huffman*, int*)+0x243>
    7921:	b8 10 00 00 00       	mov    eax,0x10
    7926:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
    7929:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    792c:	89 c1                	mov    ecx,eax
    792e:	d3 e2                	shl    edx,cl
    7930:	89 d1                	mov    ecx,edx
    7932:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7936:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    7939:	48 63 d2             	movsxd rdx,edx
    793c:	48 81 c2 80 01 00 00 	add    rdx,0x180
    7943:	89 4c 90 04          	mov    DWORD PTR [rax+rdx*4+0x4],ecx
    7947:	d1 65 f0             	shl    DWORD PTR [rbp-0x10],1
    794a:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
    794e:	83 7d e8 10          	cmp    DWORD PTR [rbp-0x18],0x10
    7952:	0f 8e 2d ff ff ff    	jle    7885 <stbi__build_huffman(stbi__huffman*, int*)+0x99>
    7958:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    795c:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    795f:	48 63 d2             	movsxd rdx,edx
    7962:	48 81 c2 80 01 00 00 	add    rdx,0x180
    7969:	c7 44 90 04 ff ff ff ff 	mov    DWORD PTR [rax+rdx*4+0x4],0xffffffff
    7971:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7975:	ba 00 02 00 00       	mov    edx,0x200
    797a:	be ff 00 00 00       	mov    esi,0xff
    797f:	48 89 c7             	mov    rdi,rax
    7982:	e8 59 c8 ff ff       	call   41e0 <memset@plt>
    7987:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    798e:	e9 8b 00 00 00       	jmp    7a1e <stbi__build_huffman(stbi__huffman*, int*)+0x232>
    7993:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    7997:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    799a:	48 98                	cdqe   
    799c:	0f b6 84 02 00 05 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x500]
    79a4:	0f b6 c0             	movzx  eax,al
    79a7:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    79aa:	83 7d f4 09          	cmp    DWORD PTR [rbp-0xc],0x9
    79ae:	7f 6a                	jg     7a1a <stbi__build_huffman(stbi__huffman*, int*)+0x22e>
    79b0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    79b4:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    79b7:	48 63 d2             	movsxd rdx,edx
    79ba:	48 81 c2 00 01 00 00 	add    rdx,0x100
    79c1:	0f b7 04 50          	movzx  eax,WORD PTR [rax+rdx*2]
    79c5:	0f b7 d0             	movzx  edx,ax
    79c8:	b8 09 00 00 00       	mov    eax,0x9
    79cd:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
    79d0:	89 c1                	mov    ecx,eax
    79d2:	d3 e2                	shl    edx,cl
    79d4:	89 d0                	mov    eax,edx
    79d6:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    79d9:	b8 09 00 00 00       	mov    eax,0x9
    79de:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
    79e1:	ba 01 00 00 00       	mov    edx,0x1
    79e6:	89 c1                	mov    ecx,eax
    79e8:	d3 e2                	shl    edx,cl
    79ea:	89 d0                	mov    eax,edx
    79ec:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    79ef:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
    79f6:	eb 1a                	jmp    7a12 <stbi__build_huffman(stbi__huffman*, int*)+0x226>
    79f8:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    79fb:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    79fe:	01 d0                	add    eax,edx
    7a00:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    7a03:	89 d1                	mov    ecx,edx
    7a05:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    7a09:	48 98                	cdqe   
    7a0b:	88 0c 02             	mov    BYTE PTR [rdx+rax*1],cl
    7a0e:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
    7a12:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    7a15:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
    7a18:	7c de                	jl     79f8 <stbi__build_huffman(stbi__huffman*, int*)+0x20c>
    7a1a:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    7a1e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7a21:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
    7a24:	0f 8c 69 ff ff ff    	jl     7993 <stbi__build_huffman(stbi__huffman*, int*)+0x1a7>
    7a2a:	b8 01 00 00 00       	mov    eax,0x1
    7a2f:	c9                   	leave  
    7a30:	c3                   	ret    

0000000000007a31 <stbi__build_fast_ac(short*, stbi__huffman*)>:
    7a31:	55                   	push   rbp
    7a32:	48 89 e5             	mov    rbp,rsp
    7a35:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    7a39:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    7a3d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    7a44:	e9 27 01 00 00       	jmp    7b70 <stbi__build_fast_ac(short*, stbi__huffman*)+0x13f>
    7a49:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    7a4d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7a50:	48 98                	cdqe   
    7a52:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
    7a56:	88 45 e3             	mov    BYTE PTR [rbp-0x1d],al
    7a59:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7a5c:	48 98                	cdqe   
    7a5e:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    7a62:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7a66:	48 01 d0             	add    rax,rdx
    7a69:	66 c7 00 00 00       	mov    WORD PTR [rax],0x0
    7a6e:	80 7d e3 ff          	cmp    BYTE PTR [rbp-0x1d],0xff
    7a72:	0f 84 f4 00 00 00    	je     7b6c <stbi__build_fast_ac(short*, stbi__huffman*)+0x13b>
    7a78:	0f b6 45 e3          	movzx  eax,BYTE PTR [rbp-0x1d]
    7a7c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    7a80:	48 98                	cdqe   
    7a82:	0f b6 84 02 00 04 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x400]
    7a8a:	0f b6 c0             	movzx  eax,al
    7a8d:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    7a90:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    7a93:	c1 f8 04             	sar    eax,0x4
    7a96:	83 e0 0f             	and    eax,0xf
    7a99:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    7a9c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    7a9f:	83 e0 0f             	and    eax,0xf
    7aa2:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    7aa5:	0f b6 45 e3          	movzx  eax,BYTE PTR [rbp-0x1d]
    7aa9:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    7aad:	48 98                	cdqe   
    7aaf:	0f b6 84 02 00 05 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x500]
    7ab7:	0f b6 c0             	movzx  eax,al
    7aba:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    7abd:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
    7ac1:	0f 84 a5 00 00 00    	je     7b6c <stbi__build_fast_ac(short*, stbi__huffman*)+0x13b>
    7ac7:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    7aca:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7acd:	01 d0                	add    eax,edx
    7acf:	83 f8 09             	cmp    eax,0x9
    7ad2:	0f 8f 94 00 00 00    	jg     7b6c <stbi__build_fast_ac(short*, stbi__huffman*)+0x13b>
    7ad8:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    7adb:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    7ade:	89 c1                	mov    ecx,eax
    7ae0:	d3 e2                	shl    edx,cl
    7ae2:	89 d0                	mov    eax,edx
    7ae4:	25 ff 01 00 00       	and    eax,0x1ff
    7ae9:	89 c2                	mov    edx,eax
    7aeb:	b8 09 00 00 00       	mov    eax,0x9
    7af0:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
    7af3:	89 c1                	mov    ecx,eax
    7af5:	d3 fa                	sar    edx,cl
    7af7:	89 d0                	mov    eax,edx
    7af9:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    7afc:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7aff:	83 e8 01             	sub    eax,0x1
    7b02:	ba 01 00 00 00       	mov    edx,0x1
    7b07:	89 c1                	mov    ecx,eax
    7b09:	d3 e2                	shl    edx,cl
    7b0b:	89 d0                	mov    eax,edx
    7b0d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    7b10:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    7b13:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
    7b16:	7d 17                	jge    7b2f <stbi__build_fast_ac(short*, stbi__huffman*)+0xfe>
    7b18:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7b1b:	ba ff ff ff ff       	mov    edx,0xffffffff
    7b20:	89 c1                	mov    ecx,eax
    7b22:	d3 e2                	shl    edx,cl
    7b24:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    7b27:	01 d0                	add    eax,edx
    7b29:	83 c0 01             	add    eax,0x1
    7b2c:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    7b2f:	83 7d e8 80          	cmp    DWORD PTR [rbp-0x18],0xffffff80
    7b33:	7c 37                	jl     7b6c <stbi__build_fast_ac(short*, stbi__huffman*)+0x13b>
    7b35:	83 7d e8 7f          	cmp    DWORD PTR [rbp-0x18],0x7f
    7b39:	7f 31                	jg     7b6c <stbi__build_fast_ac(short*, stbi__huffman*)+0x13b>
    7b3b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    7b3e:	c1 e0 04             	shl    eax,0x4
    7b41:	89 c2                	mov    edx,eax
    7b43:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    7b46:	01 d0                	add    eax,edx
    7b48:	c1 e0 04             	shl    eax,0x4
    7b4b:	89 c2                	mov    edx,eax
    7b4d:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    7b50:	89 c1                	mov    ecx,eax
    7b52:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7b55:	01 c8                	add    eax,ecx
    7b57:	01 c2                	add    edx,eax
    7b59:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7b5c:	48 98                	cdqe   
    7b5e:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    7b62:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    7b66:	48 01 c8             	add    rax,rcx
    7b69:	66 89 10             	mov    WORD PTR [rax],dx
    7b6c:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    7b70:	81 7d e4 ff 01 00 00 	cmp    DWORD PTR [rbp-0x1c],0x1ff
    7b77:	0f 8e cc fe ff ff    	jle    7a49 <stbi__build_fast_ac(short*, stbi__huffman*)+0x18>
    7b7d:	90                   	nop
    7b7e:	90                   	nop
    7b7f:	5d                   	pop    rbp
    7b80:	c3                   	ret    

0000000000007b81 <stbi__grow_buffer_unsafe(stbi__jpeg*)>:
    7b81:	55                   	push   rbp
    7b82:	48 89 e5             	mov    rbp,rsp
    7b85:	48 83 ec 20          	sub    rsp,0x20
    7b89:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    7b8d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7b91:	8b 80 2c 48 00 00    	mov    eax,DWORD PTR [rax+0x482c]
    7b97:	85 c0                	test   eax,eax
    7b99:	75 14                	jne    7baf <stbi__grow_buffer_unsafe(stbi__jpeg*)+0x2e>
    7b9b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7b9f:	48 8b 00             	mov    rax,QWORD PTR [rax]
    7ba2:	48 89 c7             	mov    rdi,rax
    7ba5:	e8 67 e9 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    7baa:	0f b6 c0             	movzx  eax,al
    7bad:	eb 05                	jmp    7bb4 <stbi__grow_buffer_unsafe(stbi__jpeg*)+0x33>
    7baf:	b8 00 00 00 00       	mov    eax,0x0
    7bb4:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    7bb7:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
    7bbe:	75 5a                	jne    7c1a <stbi__grow_buffer_unsafe(stbi__jpeg*)+0x99>
    7bc0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7bc4:	48 8b 00             	mov    rax,QWORD PTR [rax]
    7bc7:	48 89 c7             	mov    rdi,rax
    7bca:	e8 42 e9 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    7bcf:	0f b6 c0             	movzx  eax,al
    7bd2:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    7bd5:	eb 15                	jmp    7bec <stbi__grow_buffer_unsafe(stbi__jpeg*)+0x6b>
    7bd7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7bdb:	48 8b 00             	mov    rax,QWORD PTR [rax]
    7bde:	48 89 c7             	mov    rdi,rax
    7be1:	e8 2b e9 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    7be6:	0f b6 c0             	movzx  eax,al
    7be9:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    7bec:	81 7d f8 ff 00 00 00 	cmp    DWORD PTR [rbp-0x8],0xff
    7bf3:	74 e2                	je     7bd7 <stbi__grow_buffer_unsafe(stbi__jpeg*)+0x56>
    7bf5:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
    7bf9:	74 1f                	je     7c1a <stbi__grow_buffer_unsafe(stbi__jpeg*)+0x99>
    7bfb:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    7bfe:	89 c2                	mov    edx,eax
    7c00:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c04:	88 90 28 48 00 00    	mov    BYTE PTR [rax+0x4828],dl
    7c0a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c0e:	c7 80 2c 48 00 00 01 00 00 00 	mov    DWORD PTR [rax+0x482c],0x1
    7c18:	eb 5c                	jmp    7c76 <stbi__grow_buffer_unsafe(stbi__jpeg*)+0xf5>
    7c1a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c1e:	8b b0 20 48 00 00    	mov    esi,DWORD PTR [rax+0x4820]
    7c24:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c28:	8b 90 24 48 00 00    	mov    edx,DWORD PTR [rax+0x4824]
    7c2e:	b8 18 00 00 00       	mov    eax,0x18
    7c33:	29 d0                	sub    eax,edx
    7c35:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
    7c38:	89 c1                	mov    ecx,eax
    7c3a:	d3 e2                	shl    edx,cl
    7c3c:	89 d0                	mov    eax,edx
    7c3e:	09 c6                	or     esi,eax
    7c40:	89 f2                	mov    edx,esi
    7c42:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c46:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    7c4c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c50:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7c56:	8d 50 08             	lea    edx,[rax+0x8]
    7c59:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c5d:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    7c63:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c67:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7c6d:	83 f8 18             	cmp    eax,0x18
    7c70:	0f 8e 17 ff ff ff    	jle    7b8d <stbi__grow_buffer_unsafe(stbi__jpeg*)+0xc>
    7c76:	c9                   	leave  
    7c77:	c3                   	ret    

0000000000007c78 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)>:
    7c78:	55                   	push   rbp
    7c79:	48 89 e5             	mov    rbp,rsp
    7c7c:	48 83 ec 20          	sub    rsp,0x20
    7c80:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    7c84:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    7c88:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c8c:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7c92:	83 f8 0f             	cmp    eax,0xf
    7c95:	7f 0c                	jg     7ca3 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x2b>
    7c97:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7c9b:	48 89 c7             	mov    rdi,rax
    7c9e:	e8 de fe ff ff       	call   7b81 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    7ca3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7ca7:	8b 80 20 48 00 00    	mov    eax,DWORD PTR [rax+0x4820]
    7cad:	c1 e8 17             	shr    eax,0x17
    7cb0:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    7cb3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    7cb7:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7cba:	48 98                	cdqe   
    7cbc:	0f b6 04 02          	movzx  eax,BYTE PTR [rdx+rax*1]
    7cc0:	0f b6 c0             	movzx  eax,al
    7cc3:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    7cc6:	81 7d f0 fe 00 00 00 	cmp    DWORD PTR [rbp-0x10],0xfe
    7ccd:	7f 7d                	jg     7d4c <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0xd4>
    7ccf:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    7cd3:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    7cd6:	48 98                	cdqe   
    7cd8:	0f b6 84 02 00 05 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x500]
    7ce0:	0f b6 c0             	movzx  eax,al
    7ce3:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    7ce6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7cea:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7cf0:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
    7cf3:	7e 0a                	jle    7cff <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x87>
    7cf5:	b8 ff ff ff ff       	mov    eax,0xffffffff
    7cfa:	e9 f1 01 00 00       	jmp    7ef0 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x278>
    7cff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7d03:	8b 90 20 48 00 00    	mov    edx,DWORD PTR [rax+0x4820]
    7d09:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    7d0c:	89 c1                	mov    ecx,eax
    7d0e:	d3 e2                	shl    edx,cl
    7d10:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7d14:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    7d1a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7d1e:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7d24:	2b 45 fc             	sub    eax,DWORD PTR [rbp-0x4]
    7d27:	89 c2                	mov    edx,eax
    7d29:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7d2d:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    7d33:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    7d37:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    7d3a:	48 98                	cdqe   
    7d3c:	0f b6 84 02 00 04 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x400]
    7d44:	0f b6 c0             	movzx  eax,al
    7d47:	e9 a4 01 00 00       	jmp    7ef0 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x278>
    7d4c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7d50:	8b 80 20 48 00 00    	mov    eax,DWORD PTR [rax+0x4820]
    7d56:	c1 e8 10             	shr    eax,0x10
    7d59:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    7d5c:	c7 45 f0 0a 00 00 00 	mov    DWORD PTR [rbp-0x10],0xa
    7d63:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    7d67:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    7d6a:	48 63 d2             	movsxd rdx,edx
    7d6d:	48 81 c2 80 01 00 00 	add    rdx,0x180
    7d74:	8b 44 90 04          	mov    eax,DWORD PTR [rax+rdx*4+0x4]
    7d78:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
    7d7b:	72 06                	jb     7d83 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x10b>
    7d7d:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
    7d81:	eb e0                	jmp    7d63 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0xeb>
    7d83:	90                   	nop
    7d84:	83 7d f0 11          	cmp    DWORD PTR [rbp-0x10],0x11
    7d88:	75 21                	jne    7dab <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x133>
    7d8a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7d8e:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7d94:	8d 50 f0             	lea    edx,[rax-0x10]
    7d97:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7d9b:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    7da1:	b8 ff ff ff ff       	mov    eax,0xffffffff
    7da6:	e9 45 01 00 00       	jmp    7ef0 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x278>
    7dab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7daf:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7db5:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
    7db8:	7e 0a                	jle    7dc4 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x14c>
    7dba:	b8 ff ff ff ff       	mov    eax,0xffffffff
    7dbf:	e9 2c 01 00 00       	jmp    7ef0 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x278>
    7dc4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7dc8:	8b 90 20 48 00 00    	mov    edx,DWORD PTR [rax+0x4820]
    7dce:	b8 20 00 00 00       	mov    eax,0x20
    7dd3:	2b 45 f0             	sub    eax,DWORD PTR [rbp-0x10]
    7dd6:	89 c1                	mov    ecx,eax
    7dd8:	d3 ea                	shr    edx,cl
    7dda:	89 d1                	mov    ecx,edx
    7ddc:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    7ddf:	48 98                	cdqe   
    7de1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7de9:	48 8d 05 30 25 03 00 	lea    rax,[rip+0x32530]        # 3a320 <stbi__bmask>
    7df0:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    7df3:	21 c1                	and    ecx,eax
    7df5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    7df9:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    7dfc:	48 63 d2             	movsxd rdx,edx
    7dff:	48 81 c2 90 01 00 00 	add    rdx,0x190
    7e06:	8b 44 90 0c          	mov    eax,DWORD PTR [rax+rdx*4+0xc]
    7e0a:	01 c8                	add    eax,ecx
    7e0c:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    7e0f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7e13:	8b b0 20 48 00 00    	mov    esi,DWORD PTR [rax+0x4820]
    7e19:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    7e1d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7e20:	48 98                	cdqe   
    7e22:	0f b6 84 02 00 05 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x500]
    7e2a:	0f b6 d0             	movzx  edx,al
    7e2d:	b8 20 00 00 00       	mov    eax,0x20
    7e32:	29 d0                	sub    eax,edx
    7e34:	89 c1                	mov    ecx,eax
    7e36:	d3 ee                	shr    esi,cl
    7e38:	89 f1                	mov    ecx,esi
    7e3a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    7e3e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7e41:	48 98                	cdqe   
    7e43:	0f b6 84 02 00 05 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x500]
    7e4b:	0f b6 c0             	movzx  eax,al
    7e4e:	48 98                	cdqe   
    7e50:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7e58:	48 8d 05 c1 24 03 00 	lea    rax,[rip+0x324c1]        # 3a320 <stbi__bmask>
    7e5f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    7e62:	21 c1                	and    ecx,eax
    7e64:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    7e68:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    7e6b:	48 63 d2             	movsxd rdx,edx
    7e6e:	48 81 c2 00 01 00 00 	add    rdx,0x100
    7e75:	0f b7 04 50          	movzx  eax,WORD PTR [rax+rdx*2]
    7e79:	0f b7 c0             	movzx  eax,ax
    7e7c:	39 c1                	cmp    ecx,eax
    7e7e:	74 28                	je     7ea8 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)+0x230>
    7e80:	48 8d 05 e1 24 03 00 	lea    rax,[rip+0x324e1]        # 3a368 <stbi__bmask+0x48>
    7e87:	48 89 c1             	mov    rcx,rax
    7e8a:	ba f2 07 00 00       	mov    edx,0x7f2
    7e8f:	48 8d 05 02 22 03 00 	lea    rax,[rip+0x32202]        # 3a098 <_IO_stdin_used+0x98>
    7e96:	48 89 c6             	mov    rsi,rax
    7e99:	48 8d 05 00 25 03 00 	lea    rax,[rip+0x32500]        # 3a3a0 <stbi__bmask+0x80>
    7ea0:	48 89 c7             	mov    rdi,rax
    7ea3:	e8 d8 c3 ff ff       	call   4280 <__assert_fail@plt>
    7ea8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7eac:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7eb2:	2b 45 f0             	sub    eax,DWORD PTR [rbp-0x10]
    7eb5:	89 c2                	mov    edx,eax
    7eb7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7ebb:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    7ec1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7ec5:	8b 90 20 48 00 00    	mov    edx,DWORD PTR [rax+0x4820]
    7ecb:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    7ece:	89 c1                	mov    ecx,eax
    7ed0:	d3 e2                	shl    edx,cl
    7ed2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7ed6:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    7edc:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    7ee0:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    7ee3:	48 98                	cdqe   
    7ee5:	0f b6 84 02 00 04 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x400]
    7eed:	0f b6 c0             	movzx  eax,al
    7ef0:	c9                   	leave  
    7ef1:	c3                   	ret    

0000000000007ef2 <stbi__extend_receive(stbi__jpeg*, int)>:
    7ef2:	55                   	push   rbp
    7ef3:	48 89 e5             	mov    rbp,rsp
    7ef6:	48 83 ec 20          	sub    rsp,0x20
    7efa:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    7efe:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    7f01:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7f05:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7f0b:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    7f0e:	7e 0c                	jle    7f1c <stbi__extend_receive(stbi__jpeg*, int)+0x2a>
    7f10:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7f14:	48 89 c7             	mov    rdi,rax
    7f17:	e8 65 fc ff ff       	call   7b81 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    7f1c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7f20:	8b 80 20 48 00 00    	mov    eax,DWORD PTR [rax+0x4820]
    7f26:	c1 f8 1f             	sar    eax,0x1f
    7f29:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    7f2c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7f30:	8b 90 20 48 00 00    	mov    edx,DWORD PTR [rax+0x4820]
    7f36:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7f39:	89 c1                	mov    ecx,eax
    7f3b:	d3 c2                	rol    edx,cl
    7f3d:	89 d0                	mov    eax,edx
    7f3f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    7f42:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
    7f46:	78 06                	js     7f4e <stbi__extend_receive(stbi__jpeg*, int)+0x5c>
    7f48:	83 7d e4 10          	cmp    DWORD PTR [rbp-0x1c],0x10
    7f4c:	7e 28                	jle    7f76 <stbi__extend_receive(stbi__jpeg*, int)+0x84>
    7f4e:	48 8d 05 eb 24 03 00 	lea    rax,[rip+0x324eb]        # 3a440 <stbi__jbias+0x40>
    7f55:	48 89 c1             	mov    rcx,rax
    7f58:	ba 07 08 00 00       	mov    edx,0x807
    7f5d:	48 8d 05 34 21 03 00 	lea    rax,[rip+0x32134]        # 3a098 <_IO_stdin_used+0x98>
    7f64:	48 89 c6             	mov    rsi,rax
    7f67:	48 8d 05 02 25 03 00 	lea    rax,[rip+0x32502]        # 3a470 <stbi__jbias+0x70>
    7f6e:	48 89 c7             	mov    rdi,rax
    7f71:	e8 0a c3 ff ff       	call   4280 <__assert_fail@plt>
    7f76:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7f79:	48 98                	cdqe   
    7f7b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7f83:	48 8d 05 96 23 03 00 	lea    rax,[rip+0x32396]        # 3a320 <stbi__bmask>
    7f8a:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    7f8d:	f7 d0                	not    eax
    7f8f:	23 45 fc             	and    eax,DWORD PTR [rbp-0x4]
    7f92:	89 c2                	mov    edx,eax
    7f94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7f98:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    7f9e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7fa1:	48 98                	cdqe   
    7fa3:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7fab:	48 8d 05 6e 23 03 00 	lea    rax,[rip+0x3236e]        # 3a320 <stbi__bmask>
    7fb2:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    7fb5:	21 45 fc             	and    DWORD PTR [rbp-0x4],eax
    7fb8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7fbc:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    7fc2:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
    7fc5:	89 c2                	mov    edx,eax
    7fc7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    7fcb:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    7fd1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    7fd4:	48 98                	cdqe   
    7fd6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    7fde:	48 8d 05 1b 24 03 00 	lea    rax,[rip+0x3241b]        # 3a400 <stbi__jbias>
    7fe5:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
    7fe8:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    7feb:	f7 d0                	not    eax
    7fed:	21 d0                	and    eax,edx
    7fef:	89 c2                	mov    edx,eax
    7ff1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    7ff4:	01 d0                	add    eax,edx
    7ff6:	c9                   	leave  
    7ff7:	c3                   	ret    

0000000000007ff8 <stbi__jpeg_get_bits(stbi__jpeg*, int)>:
    7ff8:	55                   	push   rbp
    7ff9:	48 89 e5             	mov    rbp,rsp
    7ffc:	48 83 ec 20          	sub    rsp,0x20
    8000:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    8004:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    8007:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    800b:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    8011:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    8014:	7e 0c                	jle    8022 <stbi__jpeg_get_bits(stbi__jpeg*, int)+0x2a>
    8016:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    801a:	48 89 c7             	mov    rdi,rax
    801d:	e8 5f fb ff ff       	call   7b81 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    8022:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8026:	8b 90 20 48 00 00    	mov    edx,DWORD PTR [rax+0x4820]
    802c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    802f:	89 c1                	mov    ecx,eax
    8031:	d3 c2                	rol    edx,cl
    8033:	89 d0                	mov    eax,edx
    8035:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    8038:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    803b:	48 98                	cdqe   
    803d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    8045:	48 8d 05 d4 22 03 00 	lea    rax,[rip+0x322d4]        # 3a320 <stbi__bmask>
    804c:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    804f:	f7 d0                	not    eax
    8051:	23 45 fc             	and    eax,DWORD PTR [rbp-0x4]
    8054:	89 c2                	mov    edx,eax
    8056:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    805a:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    8060:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    8063:	48 98                	cdqe   
    8065:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
    806d:	48 8d 05 ac 22 03 00 	lea    rax,[rip+0x322ac]        # 3a320 <stbi__bmask>
    8074:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
    8077:	21 45 fc             	and    DWORD PTR [rbp-0x4],eax
    807a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    807e:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    8084:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
    8087:	89 c2                	mov    edx,eax
    8089:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    808d:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    8093:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    8096:	c9                   	leave  
    8097:	c3                   	ret    

0000000000008098 <stbi__jpeg_get_bit(stbi__jpeg*)>:
    8098:	55                   	push   rbp
    8099:	48 89 e5             	mov    rbp,rsp
    809c:	48 83 ec 20          	sub    rsp,0x20
    80a0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    80a4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    80a8:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    80ae:	85 c0                	test   eax,eax
    80b0:	7f 0c                	jg     80be <stbi__jpeg_get_bit(stbi__jpeg*)+0x26>
    80b2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    80b6:	48 89 c7             	mov    rdi,rax
    80b9:	e8 c3 fa ff ff       	call   7b81 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    80be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    80c2:	8b 80 20 48 00 00    	mov    eax,DWORD PTR [rax+0x4820]
    80c8:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    80cb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    80cf:	8b 80 20 48 00 00    	mov    eax,DWORD PTR [rax+0x4820]
    80d5:	8d 14 00             	lea    edx,[rax+rax*1]
    80d8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    80dc:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    80e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    80e6:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    80ec:	8d 50 ff             	lea    edx,[rax-0x1]
    80ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    80f3:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    80f9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    80fc:	25 00 00 00 80       	and    eax,0x80000000
    8101:	c9                   	leave  
    8102:	c3                   	ret    

0000000000008103 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)>:
    8103:	55                   	push   rbp
    8104:	48 89 e5             	mov    rbp,rsp
    8107:	48 83 ec 60          	sub    rsp,0x60
    810b:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    810f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
    8113:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
    8117:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
    811b:	4c 89 45 a8          	mov    QWORD PTR [rbp-0x58],r8
    811f:	44 89 4d a4          	mov    DWORD PTR [rbp-0x5c],r9d
    8123:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8127:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    812d:	83 f8 0f             	cmp    eax,0xf
    8130:	7f 0c                	jg     813e <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x3b>
    8132:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8136:	48 89 c7             	mov    rdi,rax
    8139:	e8 43 fa ff ff       	call   7b81 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    813e:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
    8142:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8146:	48 89 d6             	mov    rsi,rdx
    8149:	48 89 c7             	mov    rdi,rax
    814c:	e8 27 fb ff ff       	call   7c78 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)>
    8151:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    8154:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    8158:	79 14                	jns    816e <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x6b>
    815a:	48 8d 05 ae 23 03 00 	lea    rax,[rip+0x323ae]        # 3a50f <stbi__jpeg_dezigzag+0x4f>
    8161:	48 89 c7             	mov    rdi,rax
    8164:	e8 09 ca ff ff       	call   4b72 <stbi__err(char const*)>
    8169:	e9 4a 02 00 00       	jmp    83b8 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x2b5>
    816e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    8172:	ba 80 00 00 00       	mov    edx,0x80
    8177:	be 00 00 00 00       	mov    esi,0x0
    817c:	48 89 c7             	mov    rdi,rax
    817f:	e8 5c c0 ff ff       	call   41e0 <memset@plt>
    8184:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    8188:	74 13                	je     819d <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x9a>
    818a:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
    818d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8191:	89 d6                	mov    esi,edx
    8193:	48 89 c7             	mov    rdi,rax
    8196:	e8 57 fd ff ff       	call   7ef2 <stbi__extend_receive(stbi__jpeg*, int)>
    819b:	eb 05                	jmp    81a2 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x9f>
    819d:	b8 00 00 00 00       	mov    eax,0x0
    81a2:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    81a5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    81a9:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
    81ac:	48 63 d0             	movsxd rdx,eax
    81af:	48 89 d0             	mov    rax,rdx
    81b2:	48 01 c0             	add    rax,rax
    81b5:	48 01 d0             	add    rax,rdx
    81b8:	48 c1 e0 05          	shl    rax,0x5
    81bc:	48 01 c8             	add    rax,rcx
    81bf:	48 05 b8 46 00 00    	add    rax,0x46b8
    81c5:	8b 10                	mov    edx,DWORD PTR [rax]
    81c7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    81ca:	01 d0                	add    eax,edx
    81cc:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    81cf:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    81d3:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
    81d6:	48 63 d0             	movsxd rdx,eax
    81d9:	48 89 d0             	mov    rax,rdx
    81dc:	48 01 c0             	add    rax,rax
    81df:	48 01 d0             	add    rax,rdx
    81e2:	48 c1 e0 05          	shl    rax,0x5
    81e6:	48 01 c8             	add    rax,rcx
    81e9:	48 8d 90 b8 46 00 00 	lea    rdx,[rax+0x46b8]
    81f0:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    81f3:	89 02                	mov    DWORD PTR [rdx],eax
    81f5:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
    81f9:	0f b7 00             	movzx  eax,WORD PTR [rax]
    81fc:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    81ff:	0f af c2             	imul   eax,edx
    8202:	89 c2                	mov    edx,eax
    8204:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    8208:	66 89 10             	mov    WORD PTR [rax],dx
    820b:	c7 45 dc 01 00 00 00 	mov    DWORD PTR [rbp-0x24],0x1
    8212:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8216:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    821c:	83 f8 0f             	cmp    eax,0xf
    821f:	7f 0c                	jg     822d <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x12a>
    8221:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8225:	48 89 c7             	mov    rdi,rax
    8228:	e8 54 f9 ff ff       	call   7b81 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    822d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8231:	8b 80 20 48 00 00    	mov    eax,DWORD PTR [rax+0x4820]
    8237:	c1 e8 17             	shr    eax,0x17
    823a:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    823d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    8240:	48 98                	cdqe   
    8242:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    8246:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    824a:	48 01 d0             	add    rax,rdx
    824d:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8250:	98                   	cwde   
    8251:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    8254:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
    8258:	0f 84 97 00 00 00    	je     82f5 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x1f2>
    825e:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    8261:	c1 f8 04             	sar    eax,0x4
    8264:	83 e0 0f             	and    eax,0xf
    8267:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
    826a:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    826d:	83 e0 0f             	and    eax,0xf
    8270:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    8273:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8277:	8b 90 20 48 00 00    	mov    edx,DWORD PTR [rax+0x4820]
    827d:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    8280:	89 c1                	mov    ecx,eax
    8282:	d3 e2                	shl    edx,cl
    8284:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8288:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    828e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8292:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    8298:	2b 45 f8             	sub    eax,DWORD PTR [rbp-0x8]
    829b:	89 c2                	mov    edx,eax
    829d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    82a1:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    82a7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    82aa:	8d 50 01             	lea    edx,[rax+0x1]
    82ad:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
    82b0:	48 98                	cdqe   
    82b2:	48 8d 15 07 22 03 00 	lea    rdx,[rip+0x32207]        # 3a4c0 <stbi__jpeg_dezigzag>
    82b9:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
    82bd:	0f b6 c0             	movzx  eax,al
    82c0:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    82c3:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    82c6:	c1 f8 08             	sar    eax,0x8
    82c9:	89 c2                	mov    edx,eax
    82cb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    82ce:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    82d2:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
    82d6:	48 01 c8             	add    rax,rcx
    82d9:	0f b7 00             	movzx  eax,WORD PTR [rax]
    82dc:	0f af d0             	imul   edx,eax
    82df:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    82e2:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    82e6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    82ea:	48 01 c8             	add    rax,rcx
    82ed:	66 89 10             	mov    WORD PTR [rax],dx
    82f0:	e9 b1 00 00 00       	jmp    83a6 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x2a3>
    82f5:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
    82f9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    82fd:	48 89 d6             	mov    rsi,rdx
    8300:	48 89 c7             	mov    rdi,rax
    8303:	e8 70 f9 ff ff       	call   7c78 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)>
    8308:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    830b:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
    830f:	79 14                	jns    8325 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x222>
    8311:	48 8d 05 f7 21 03 00 	lea    rax,[rip+0x321f7]        # 3a50f <stbi__jpeg_dezigzag+0x4f>
    8318:	48 89 c7             	mov    rdi,rax
    831b:	e8 52 c8 ff ff       	call   4b72 <stbi__err(char const*)>
    8320:	e9 93 00 00 00       	jmp    83b8 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x2b5>
    8325:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    8328:	83 e0 0f             	and    eax,0xf
    832b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    832e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    8331:	c1 f8 04             	sar    eax,0x4
    8334:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    8337:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
    833b:	75 0f                	jne    834c <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x249>
    833d:	81 7d f4 f0 00 00 00 	cmp    DWORD PTR [rbp-0xc],0xf0
    8344:	75 6c                	jne    83b2 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x2af>
    8346:	83 45 dc 10          	add    DWORD PTR [rbp-0x24],0x10
    834a:	eb 5a                	jmp    83a6 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x2a3>
    834c:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    834f:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
    8352:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    8355:	8d 50 01             	lea    edx,[rax+0x1]
    8358:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
    835b:	48 98                	cdqe   
    835d:	48 8d 15 5c 21 03 00 	lea    rdx,[rip+0x3215c]        # 3a4c0 <stbi__jpeg_dezigzag>
    8364:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
    8368:	0f b6 c0             	movzx  eax,al
    836b:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    836e:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
    8371:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    8375:	89 d6                	mov    esi,edx
    8377:	48 89 c7             	mov    rdi,rax
    837a:	e8 73 fb ff ff       	call   7ef2 <stbi__extend_receive(stbi__jpeg*, int)>
    837f:	89 c2                	mov    edx,eax
    8381:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    8384:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    8388:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
    838c:	48 01 c8             	add    rax,rcx
    838f:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8392:	0f af d0             	imul   edx,eax
    8395:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    8398:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    839c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    83a0:	48 01 c8             	add    rax,rcx
    83a3:	66 89 10             	mov    WORD PTR [rax],dx
    83a6:	83 7d dc 3f          	cmp    DWORD PTR [rbp-0x24],0x3f
    83aa:	0f 8e 62 fe ff ff    	jle    8212 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x10f>
    83b0:	eb 01                	jmp    83b3 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)+0x2b0>
    83b2:	90                   	nop
    83b3:	b8 01 00 00 00       	mov    eax,0x1
    83b8:	c9                   	leave  
    83b9:	c3                   	ret    

00000000000083ba <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)>:
    83ba:	55                   	push   rbp
    83bb:	48 89 e5             	mov    rbp,rsp
    83be:	48 83 ec 30          	sub    rsp,0x30
    83c2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    83c6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    83ca:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
    83ce:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
    83d1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    83d5:	8b 80 38 48 00 00    	mov    eax,DWORD PTR [rax+0x4838]
    83db:	85 c0                	test   eax,eax
    83dd:	74 14                	je     83f3 <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0x39>
    83df:	48 8d 05 3a 21 03 00 	lea    rax,[rip+0x3213a]        # 3a520 <stbi__jpeg_dezigzag+0x60>
    83e6:	48 89 c7             	mov    rdi,rax
    83e9:	e8 84 c7 ff ff       	call   4b72 <stbi__err(char const*)>
    83ee:	e9 2b 01 00 00       	jmp    851e <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0x164>
    83f3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    83f7:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    83fd:	83 f8 0f             	cmp    eax,0xf
    8400:	7f 0c                	jg     840e <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0x54>
    8402:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8406:	48 89 c7             	mov    rdi,rax
    8409:	e8 73 f7 ff ff       	call   7b81 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    840e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8412:	8b 80 3c 48 00 00    	mov    eax,DWORD PTR [rax+0x483c]
    8418:	85 c0                	test   eax,eax
    841a:	0f 85 bb 00 00 00    	jne    84db <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0x121>
    8420:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    8424:	ba 80 00 00 00       	mov    edx,0x80
    8429:	be 00 00 00 00       	mov    esi,0x0
    842e:	48 89 c7             	mov    rdi,rax
    8431:	e8 aa bd ff ff       	call   41e0 <memset@plt>
    8436:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    843a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    843e:	48 89 d6             	mov    rsi,rdx
    8441:	48 89 c7             	mov    rdi,rax
    8444:	e8 2f f8 ff ff       	call   7c78 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)>
    8449:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    844c:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
    8450:	74 13                	je     8465 <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0xab>
    8452:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    8455:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    8459:	89 d6                	mov    esi,edx
    845b:	48 89 c7             	mov    rdi,rax
    845e:	e8 8f fa ff ff       	call   7ef2 <stbi__extend_receive(stbi__jpeg*, int)>
    8463:	eb 05                	jmp    846a <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0xb0>
    8465:	b8 00 00 00 00       	mov    eax,0x0
    846a:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    846d:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    8471:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    8474:	48 63 d0             	movsxd rdx,eax
    8477:	48 89 d0             	mov    rax,rdx
    847a:	48 01 c0             	add    rax,rax
    847d:	48 01 d0             	add    rax,rdx
    8480:	48 c1 e0 05          	shl    rax,0x5
    8484:	48 01 c8             	add    rax,rcx
    8487:	48 05 b8 46 00 00    	add    rax,0x46b8
    848d:	8b 10                	mov    edx,DWORD PTR [rax]
    848f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    8492:	01 d0                	add    eax,edx
    8494:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    8497:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    849b:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    849e:	48 63 d0             	movsxd rdx,eax
    84a1:	48 89 d0             	mov    rax,rdx
    84a4:	48 01 c0             	add    rax,rax
    84a7:	48 01 d0             	add    rax,rdx
    84aa:	48 c1 e0 05          	shl    rax,0x5
    84ae:	48 01 c8             	add    rax,rcx
    84b1:	48 8d 90 b8 46 00 00 	lea    rdx,[rax+0x46b8]
    84b8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    84bb:	89 02                	mov    DWORD PTR [rdx],eax
    84bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    84c1:	8b 80 40 48 00 00    	mov    eax,DWORD PTR [rax+0x4840]
    84c7:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
    84ca:	89 c1                	mov    ecx,eax
    84cc:	d3 e2                	shl    edx,cl
    84ce:	89 d0                	mov    eax,edx
    84d0:	89 c2                	mov    edx,eax
    84d2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    84d6:	66 89 10             	mov    WORD PTR [rax],dx
    84d9:	eb 3e                	jmp    8519 <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0x15f>
    84db:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    84df:	48 89 c7             	mov    rdi,rax
    84e2:	e8 b1 fb ff ff       	call   8098 <stbi__jpeg_get_bit(stbi__jpeg*)>
    84e7:	85 c0                	test   eax,eax
    84e9:	0f 95 c0             	setne  al
    84ec:	84 c0                	test   al,al
    84ee:	74 29                	je     8519 <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)+0x15f>
    84f0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    84f4:	0f b7 00             	movzx  eax,WORD PTR [rax]
    84f7:	89 c6                	mov    esi,eax
    84f9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    84fd:	8b 80 40 48 00 00    	mov    eax,DWORD PTR [rax+0x4840]
    8503:	ba 01 00 00 00       	mov    edx,0x1
    8508:	89 c1                	mov    ecx,eax
    850a:	d3 e2                	shl    edx,cl
    850c:	89 d0                	mov    eax,edx
    850e:	01 f0                	add    eax,esi
    8510:	89 c2                	mov    edx,eax
    8512:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    8516:	66 89 10             	mov    WORD PTR [rax],dx
    8519:	b8 01 00 00 00       	mov    eax,0x1
    851e:	c9                   	leave  
    851f:	c3                   	ret    

0000000000008520 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)>:
    8520:	55                   	push   rbp
    8521:	48 89 e5             	mov    rbp,rsp
    8524:	48 83 ec 60          	sub    rsp,0x60
    8528:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
    852c:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
    8530:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
    8534:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
    8538:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    853c:	8b 80 34 48 00 00    	mov    eax,DWORD PTR [rax+0x4834]
    8542:	85 c0                	test   eax,eax
    8544:	75 14                	jne    855a <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x3a>
    8546:	48 8d 05 d3 1f 03 00 	lea    rax,[rip+0x31fd3]        # 3a520 <stbi__jpeg_dezigzag+0x60>
    854d:	48 89 c7             	mov    rdi,rax
    8550:	e8 1d c6 ff ff       	call   4b72 <stbi__err(char const*)>
    8555:	e9 21 05 00 00       	jmp    8a7b <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x55b>
    855a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    855e:	8b 80 3c 48 00 00    	mov    eax,DWORD PTR [rax+0x483c]
    8564:	85 c0                	test   eax,eax
    8566:	0f 85 39 02 00 00    	jne    87a5 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x285>
    856c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8570:	8b 80 40 48 00 00    	mov    eax,DWORD PTR [rax+0x4840]
    8576:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
    8579:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    857d:	8b 80 44 48 00 00    	mov    eax,DWORD PTR [rax+0x4844]
    8583:	85 c0                	test   eax,eax
    8585:	74 21                	je     85a8 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x88>
    8587:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    858b:	8b 80 44 48 00 00    	mov    eax,DWORD PTR [rax+0x4844]
    8591:	8d 50 ff             	lea    edx,[rax-0x1]
    8594:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8598:	89 90 44 48 00 00    	mov    DWORD PTR [rax+0x4844],edx
    859e:	b8 01 00 00 00       	mov    eax,0x1
    85a3:	e9 d3 04 00 00       	jmp    8a7b <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x55b>
    85a8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    85ac:	8b 80 34 48 00 00    	mov    eax,DWORD PTR [rax+0x4834]
    85b2:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
    85b5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    85b9:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    85bf:	83 f8 0f             	cmp    eax,0xf
    85c2:	7f 0c                	jg     85d0 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0xb0>
    85c4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    85c8:	48 89 c7             	mov    rdi,rax
    85cb:	e8 b1 f5 ff ff       	call   7b81 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    85d0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    85d4:	8b 80 20 48 00 00    	mov    eax,DWORD PTR [rax+0x4820]
    85da:	c1 e8 17             	shr    eax,0x17
    85dd:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
    85e0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    85e3:	48 98                	cdqe   
    85e5:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    85e9:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
    85ed:	48 01 d0             	add    rax,rdx
    85f0:	0f b7 00             	movzx  eax,WORD PTR [rax]
    85f3:	98                   	cwde   
    85f4:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    85f7:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    85fb:	0f 84 8a 00 00 00    	je     868b <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x16b>
    8601:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    8604:	c1 f8 04             	sar    eax,0x4
    8607:	83 e0 0f             	and    eax,0xf
    860a:	01 45 c8             	add    DWORD PTR [rbp-0x38],eax
    860d:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    8610:	83 e0 0f             	and    eax,0xf
    8613:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    8616:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    861a:	8b 90 20 48 00 00    	mov    edx,DWORD PTR [rax+0x4820]
    8620:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    8623:	89 c1                	mov    ecx,eax
    8625:	d3 e2                	shl    edx,cl
    8627:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    862b:	89 90 20 48 00 00    	mov    DWORD PTR [rax+0x4820],edx
    8631:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8635:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    863b:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
    863e:	89 c2                	mov    edx,eax
    8640:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8644:	89 90 24 48 00 00    	mov    DWORD PTR [rax+0x4824],edx
    864a:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
    864d:	8d 50 01             	lea    edx,[rax+0x1]
    8650:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
    8653:	48 98                	cdqe   
    8655:	48 8d 15 64 1e 03 00 	lea    rdx,[rip+0x31e64]        # 3a4c0 <stbi__jpeg_dezigzag>
    865c:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
    8660:	0f b6 c0             	movzx  eax,al
    8663:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    8666:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    8669:	c1 f8 08             	sar    eax,0x8
    866c:	89 c2                	mov    edx,eax
    866e:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    8671:	89 c1                	mov    ecx,eax
    8673:	d3 e2                	shl    edx,cl
    8675:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    8678:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    867c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    8680:	48 01 c8             	add    rax,rcx
    8683:	66 89 10             	mov    WORD PTR [rax],dx
    8686:	e9 02 01 00 00       	jmp    878d <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x26d>
    868b:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
    868f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8693:	48 89 d6             	mov    rsi,rdx
    8696:	48 89 c7             	mov    rdi,rax
    8699:	e8 da f5 ff ff       	call   7c78 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)>
    869e:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    86a1:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
    86a5:	79 14                	jns    86bb <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x19b>
    86a7:	48 8d 05 61 1e 03 00 	lea    rax,[rip+0x31e61]        # 3a50f <stbi__jpeg_dezigzag+0x4f>
    86ae:	48 89 c7             	mov    rdi,rax
    86b1:	e8 bc c4 ff ff       	call   4b72 <stbi__err(char const*)>
    86b6:	e9 c0 03 00 00       	jmp    8a7b <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x55b>
    86bb:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    86be:	83 e0 0f             	and    eax,0xf
    86c1:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    86c4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    86c7:	c1 f8 04             	sar    eax,0x4
    86ca:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    86cd:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
    86d1:	75 6d                	jne    8740 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x220>
    86d3:	83 7d e0 0e          	cmp    DWORD PTR [rbp-0x20],0xe
    86d7:	7f 61                	jg     873a <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x21a>
    86d9:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    86dc:	ba 01 00 00 00       	mov    edx,0x1
    86e1:	89 c1                	mov    ecx,eax
    86e3:	d3 e2                	shl    edx,cl
    86e5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    86e9:	89 90 44 48 00 00    	mov    DWORD PTR [rax+0x4844],edx
    86ef:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
    86f3:	74 29                	je     871e <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x1fe>
    86f5:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
    86f8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    86fc:	89 d6                	mov    esi,edx
    86fe:	48 89 c7             	mov    rdi,rax
    8701:	e8 f2 f8 ff ff       	call   7ff8 <stbi__jpeg_get_bits(stbi__jpeg*, int)>
    8706:	89 c2                	mov    edx,eax
    8708:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    870c:	8b 80 44 48 00 00    	mov    eax,DWORD PTR [rax+0x4844]
    8712:	01 c2                	add    edx,eax
    8714:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8718:	89 90 44 48 00 00    	mov    DWORD PTR [rax+0x4844],edx
    871e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8722:	8b 80 44 48 00 00    	mov    eax,DWORD PTR [rax+0x4844]
    8728:	8d 50 ff             	lea    edx,[rax-0x1]
    872b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    872f:	89 90 44 48 00 00    	mov    DWORD PTR [rax+0x4844],edx
    8735:	e9 3c 03 00 00       	jmp    8a76 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x556>
    873a:	83 45 c8 10          	add    DWORD PTR [rbp-0x38],0x10
    873e:	eb 4d                	jmp    878d <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x26d>
    8740:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    8743:	01 45 c8             	add    DWORD PTR [rbp-0x38],eax
    8746:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
    8749:	8d 50 01             	lea    edx,[rax+0x1]
    874c:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
    874f:	48 98                	cdqe   
    8751:	48 8d 15 68 1d 03 00 	lea    rdx,[rip+0x31d68]        # 3a4c0 <stbi__jpeg_dezigzag>
    8758:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
    875c:	0f b6 c0             	movzx  eax,al
    875f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    8762:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    8765:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8769:	89 d6                	mov    esi,edx
    876b:	48 89 c7             	mov    rdi,rax
    876e:	e8 7f f7 ff ff       	call   7ef2 <stbi__extend_receive(stbi__jpeg*, int)>
    8773:	89 c2                	mov    edx,eax
    8775:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
    8778:	89 c1                	mov    ecx,eax
    877a:	d3 e2                	shl    edx,cl
    877c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    877f:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    8783:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    8787:	48 01 c8             	add    rax,rcx
    878a:	66 89 10             	mov    WORD PTR [rax],dx
    878d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8791:	8b 80 38 48 00 00    	mov    eax,DWORD PTR [rax+0x4838]
    8797:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
    879a:	0f 8e 15 fe ff ff    	jle    85b5 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x95>
    87a0:	e9 d1 02 00 00       	jmp    8a76 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x556>
    87a5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    87a9:	8b 80 40 48 00 00    	mov    eax,DWORD PTR [rax+0x4840]
    87af:	ba 01 00 00 00       	mov    edx,0x1
    87b4:	89 c1                	mov    ecx,eax
    87b6:	d3 e2                	shl    edx,cl
    87b8:	89 d0                	mov    eax,edx
    87ba:	66 89 45 c6          	mov    WORD PTR [rbp-0x3a],ax
    87be:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    87c2:	8b 80 44 48 00 00    	mov    eax,DWORD PTR [rax+0x4844]
    87c8:	85 c0                	test   eax,eax
    87ca:	0f 84 d4 00 00 00    	je     88a4 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x384>
    87d0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    87d4:	8b 80 44 48 00 00    	mov    eax,DWORD PTR [rax+0x4844]
    87da:	8d 50 ff             	lea    edx,[rax-0x1]
    87dd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    87e1:	89 90 44 48 00 00    	mov    DWORD PTR [rax+0x4844],edx
    87e7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    87eb:	8b 80 34 48 00 00    	mov    eax,DWORD PTR [rax+0x4834]
    87f1:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
    87f4:	e9 93 00 00 00       	jmp    888c <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x36c>
    87f9:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
    87fc:	48 98                	cdqe   
    87fe:	48 8d 15 bb 1c 03 00 	lea    rdx,[rip+0x31cbb]        # 3a4c0 <stbi__jpeg_dezigzag>
    8805:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
    8809:	0f b6 c0             	movzx  eax,al
    880c:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    8810:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
    8814:	48 01 d0             	add    rax,rdx
    8817:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    881b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    881f:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8822:	66 85 c0             	test   ax,ax
    8825:	74 61                	je     8888 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x368>
    8827:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    882b:	48 89 c7             	mov    rdi,rax
    882e:	e8 65 f8 ff ff       	call   8098 <stbi__jpeg_get_bit(stbi__jpeg*)>
    8833:	85 c0                	test   eax,eax
    8835:	0f 95 c0             	setne  al
    8838:	84 c0                	test   al,al
    883a:	74 4c                	je     8888 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x368>
    883c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    8840:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8843:	66 23 45 c6          	and    ax,WORD PTR [rbp-0x3a]
    8847:	66 85 c0             	test   ax,ax
    884a:	75 3c                	jne    8888 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x368>
    884c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    8850:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8853:	66 85 c0             	test   ax,ax
    8856:	7e 1a                	jle    8872 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x352>
    8858:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    885c:	0f b7 00             	movzx  eax,WORD PTR [rax]
    885f:	89 c2                	mov    edx,eax
    8861:	0f b7 45 c6          	movzx  eax,WORD PTR [rbp-0x3a]
    8865:	01 d0                	add    eax,edx
    8867:	89 c2                	mov    edx,eax
    8869:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    886d:	66 89 10             	mov    WORD PTR [rax],dx
    8870:	eb 16                	jmp    8888 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x368>
    8872:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    8876:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8879:	0f b7 55 c6          	movzx  edx,WORD PTR [rbp-0x3a]
    887d:	29 d0                	sub    eax,edx
    887f:	89 c2                	mov    edx,eax
    8881:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    8885:	66 89 10             	mov    WORD PTR [rax],dx
    8888:	83 45 c8 01          	add    DWORD PTR [rbp-0x38],0x1
    888c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8890:	8b 80 38 48 00 00    	mov    eax,DWORD PTR [rax+0x4838]
    8896:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
    8899:	0f 8e 5a ff ff ff    	jle    87f9 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x2d9>
    889f:	e9 d2 01 00 00       	jmp    8a76 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x556>
    88a4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    88a8:	8b 80 34 48 00 00    	mov    eax,DWORD PTR [rax+0x4834]
    88ae:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
    88b1:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
    88b5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    88b9:	48 89 d6             	mov    rsi,rdx
    88bc:	48 89 c7             	mov    rdi,rax
    88bf:	e8 b4 f3 ff ff       	call   7c78 <stbi__jpeg_huff_decode(stbi__jpeg*, stbi__huffman*)>
    88c4:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
    88c7:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
    88cb:	79 14                	jns    88e1 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x3c1>
    88cd:	48 8d 05 3b 1c 03 00 	lea    rax,[rip+0x31c3b]        # 3a50f <stbi__jpeg_dezigzag+0x4f>
    88d4:	48 89 c7             	mov    rdi,rax
    88d7:	e8 96 c2 ff ff       	call   4b72 <stbi__err(char const*)>
    88dc:	e9 9a 01 00 00       	jmp    8a7b <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x55b>
    88e1:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    88e4:	83 e0 0f             	and    eax,0xf
    88e7:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
    88ea:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    88ed:	c1 f8 04             	sar    eax,0x4
    88f0:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
    88f3:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
    88f7:	75 60                	jne    8959 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x439>
    88f9:	83 7d cc 0e          	cmp    DWORD PTR [rbp-0x34],0xe
    88fd:	0f 8f 4d 01 00 00    	jg     8a50 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x530>
    8903:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
    8906:	ba 01 00 00 00       	mov    edx,0x1
    890b:	89 c1                	mov    ecx,eax
    890d:	d3 e2                	shl    edx,cl
    890f:	89 d0                	mov    eax,edx
    8911:	8d 50 ff             	lea    edx,[rax-0x1]
    8914:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8918:	89 90 44 48 00 00    	mov    DWORD PTR [rax+0x4844],edx
    891e:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
    8922:	74 29                	je     894d <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x42d>
    8924:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
    8927:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    892b:	89 d6                	mov    esi,edx
    892d:	48 89 c7             	mov    rdi,rax
    8930:	e8 c3 f6 ff ff       	call   7ff8 <stbi__jpeg_get_bits(stbi__jpeg*, int)>
    8935:	89 c2                	mov    edx,eax
    8937:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    893b:	8b 80 44 48 00 00    	mov    eax,DWORD PTR [rax+0x4844]
    8941:	01 c2                	add    edx,eax
    8943:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8947:	89 90 44 48 00 00    	mov    DWORD PTR [rax+0x4844],edx
    894d:	c7 45 cc 40 00 00 00 	mov    DWORD PTR [rbp-0x34],0x40
    8954:	e9 f7 00 00 00       	jmp    8a50 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x530>
    8959:	83 7d d0 01          	cmp    DWORD PTR [rbp-0x30],0x1
    895d:	74 14                	je     8973 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x453>
    895f:	48 8d 05 a9 1b 03 00 	lea    rax,[rip+0x31ba9]        # 3a50f <stbi__jpeg_dezigzag+0x4f>
    8966:	48 89 c7             	mov    rdi,rax
    8969:	e8 04 c2 ff ff       	call   4b72 <stbi__err(char const*)>
    896e:	e9 08 01 00 00       	jmp    8a7b <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x55b>
    8973:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8977:	48 89 c7             	mov    rdi,rax
    897a:	e8 19 f7 ff ff       	call   8098 <stbi__jpeg_get_bit(stbi__jpeg*)>
    897f:	85 c0                	test   eax,eax
    8981:	0f 95 c0             	setne  al
    8984:	84 c0                	test   al,al
    8986:	74 0c                	je     8994 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x474>
    8988:	0f bf 45 c6          	movsx  eax,WORD PTR [rbp-0x3a]
    898c:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
    898f:	e9 bc 00 00 00       	jmp    8a50 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x530>
    8994:	0f bf 45 c6          	movsx  eax,WORD PTR [rbp-0x3a]
    8998:	f7 d8                	neg    eax
    899a:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
    899d:	e9 ae 00 00 00       	jmp    8a50 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x530>
    89a2:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
    89a6:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
    89a9:	8d 50 01             	lea    edx,[rax+0x1]
    89ac:	89 55 c8             	mov    DWORD PTR [rbp-0x38],edx
    89af:	48 98                	cdqe   
    89b1:	48 8d 15 08 1b 03 00 	lea    rdx,[rip+0x31b08]        # 3a4c0 <stbi__jpeg_dezigzag>
    89b8:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
    89bc:	0f b6 c0             	movzx  eax,al
    89bf:	48 01 c0             	add    rax,rax
    89c2:	48 01 c8             	add    rax,rcx
    89c5:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    89c9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    89cd:	0f b7 00             	movzx  eax,WORD PTR [rax]
    89d0:	66 85 c0             	test   ax,ax
    89d3:	74 63                	je     8a38 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x518>
    89d5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    89d9:	48 89 c7             	mov    rdi,rax
    89dc:	e8 b7 f6 ff ff       	call   8098 <stbi__jpeg_get_bit(stbi__jpeg*)>
    89e1:	85 c0                	test   eax,eax
    89e3:	0f 95 c0             	setne  al
    89e6:	84 c0                	test   al,al
    89e8:	74 66                	je     8a50 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x530>
    89ea:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    89ee:	0f b7 00             	movzx  eax,WORD PTR [rax]
    89f1:	66 23 45 c6          	and    ax,WORD PTR [rbp-0x3a]
    89f5:	66 85 c0             	test   ax,ax
    89f8:	75 56                	jne    8a50 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x530>
    89fa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    89fe:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8a01:	66 85 c0             	test   ax,ax
    8a04:	7e 1a                	jle    8a20 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x500>
    8a06:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    8a0a:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8a0d:	89 c2                	mov    edx,eax
    8a0f:	0f b7 45 c6          	movzx  eax,WORD PTR [rbp-0x3a]
    8a13:	01 d0                	add    eax,edx
    8a15:	89 c2                	mov    edx,eax
    8a17:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    8a1b:	66 89 10             	mov    WORD PTR [rax],dx
    8a1e:	eb 30                	jmp    8a50 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x530>
    8a20:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    8a24:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8a27:	0f b7 55 c6          	movzx  edx,WORD PTR [rbp-0x3a]
    8a2b:	29 d0                	sub    eax,edx
    8a2d:	89 c2                	mov    edx,eax
    8a2f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    8a33:	66 89 10             	mov    WORD PTR [rax],dx
    8a36:	eb 18                	jmp    8a50 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x530>
    8a38:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
    8a3c:	75 0e                	jne    8a4c <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x52c>
    8a3e:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
    8a41:	89 c2                	mov    edx,eax
    8a43:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    8a47:	66 89 10             	mov    WORD PTR [rax],dx
    8a4a:	eb 17                	jmp    8a63 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x543>
    8a4c:	83 6d cc 01          	sub    DWORD PTR [rbp-0x34],0x1
    8a50:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8a54:	8b 80 38 48 00 00    	mov    eax,DWORD PTR [rax+0x4838]
    8a5a:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
    8a5d:	0f 8e 3f ff ff ff    	jle    89a2 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x482>
    8a63:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
    8a67:	8b 80 38 48 00 00    	mov    eax,DWORD PTR [rax+0x4838]
    8a6d:	39 45 c8             	cmp    DWORD PTR [rbp-0x38],eax
    8a70:	0f 8e 3b fe ff ff    	jle    88b1 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)+0x391>
    8a76:	b8 01 00 00 00       	mov    eax,0x1
    8a7b:	c9                   	leave  
    8a7c:	c3                   	ret    

0000000000008a7d <stbi__clamp(int)>:
    8a7d:	55                   	push   rbp
    8a7e:	48 89 e5             	mov    rbp,rsp
    8a81:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    8a84:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    8a87:	3d ff 00 00 00       	cmp    eax,0xff
    8a8c:	76 1d                	jbe    8aab <stbi__clamp(int)+0x2e>
    8a8e:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
    8a92:	79 07                	jns    8a9b <stbi__clamp(int)+0x1e>
    8a94:	b8 00 00 00 00       	mov    eax,0x0
    8a99:	eb 13                	jmp    8aae <stbi__clamp(int)+0x31>
    8a9b:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
    8aa2:	7e 07                	jle    8aab <stbi__clamp(int)+0x2e>
    8aa4:	b8 ff ff ff ff       	mov    eax,0xffffffff
    8aa9:	eb 03                	jmp    8aae <stbi__clamp(int)+0x31>
    8aab:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    8aae:	5d                   	pop    rbp
    8aaf:	c3                   	ret    

0000000000008ab0 <stbi__idct_block(unsigned char*, int, short*)>:
    8ab0:	55                   	push   rbp
    8ab1:	48 89 e5             	mov    rbp,rsp
    8ab4:	53                   	push   rbx
    8ab5:	48 81 ec c8 01 00 00 	sub    rsp,0x1c8
    8abc:	48 89 bd 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rdi
    8ac3:	89 b5 44 fe ff ff    	mov    DWORD PTR [rbp-0x1bc],esi
    8ac9:	48 89 95 38 fe ff ff 	mov    QWORD PTR [rbp-0x1c8],rdx
    8ad0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    8ad9:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    8add:	31 c0                	xor    eax,eax
    8adf:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
    8ae6:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    8aed:	48 8b 85 38 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1c8]
    8af4:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
    8afb:	c7 85 58 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x1a8],0x0
    8b05:	e9 30 05 00 00       	jmp    903a <stbi__idct_block(unsigned char*, int, short*)+0x58a>
    8b0a:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8b11:	48 83 c0 10          	add    rax,0x10
    8b15:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8b18:	66 85 c0             	test   ax,ax
    8b1b:	0f 85 22 01 00 00    	jne    8c43 <stbi__idct_block(unsigned char*, int, short*)+0x193>
    8b21:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8b28:	48 83 c0 20          	add    rax,0x20
    8b2c:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8b2f:	66 85 c0             	test   ax,ax
    8b32:	0f 85 0b 01 00 00    	jne    8c43 <stbi__idct_block(unsigned char*, int, short*)+0x193>
    8b38:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8b3f:	48 83 c0 30          	add    rax,0x30
    8b43:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8b46:	66 85 c0             	test   ax,ax
    8b49:	0f 85 f4 00 00 00    	jne    8c43 <stbi__idct_block(unsigned char*, int, short*)+0x193>
    8b4f:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8b56:	48 83 c0 40          	add    rax,0x40
    8b5a:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8b5d:	66 85 c0             	test   ax,ax
    8b60:	0f 85 dd 00 00 00    	jne    8c43 <stbi__idct_block(unsigned char*, int, short*)+0x193>
    8b66:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8b6d:	48 83 c0 50          	add    rax,0x50
    8b71:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8b74:	66 85 c0             	test   ax,ax
    8b77:	0f 85 c6 00 00 00    	jne    8c43 <stbi__idct_block(unsigned char*, int, short*)+0x193>
    8b7d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8b84:	48 83 c0 60          	add    rax,0x60
    8b88:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8b8b:	66 85 c0             	test   ax,ax
    8b8e:	0f 85 af 00 00 00    	jne    8c43 <stbi__idct_block(unsigned char*, int, short*)+0x193>
    8b94:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8b9b:	48 83 c0 70          	add    rax,0x70
    8b9f:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8ba2:	66 85 c0             	test   ax,ax
    8ba5:	0f 85 98 00 00 00    	jne    8c43 <stbi__idct_block(unsigned char*, int, short*)+0x193>
    8bab:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8bb2:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8bb5:	98                   	cwde   
    8bb6:	c1 e0 02             	shl    eax,0x2
    8bb9:	89 85 90 fe ff ff    	mov    DWORD PTR [rbp-0x170],eax
    8bbf:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8bc6:	48 05 e0 00 00 00    	add    rax,0xe0
    8bcc:	8b 95 90 fe ff ff    	mov    edx,DWORD PTR [rbp-0x170]
    8bd2:	89 10                	mov    DWORD PTR [rax],edx
    8bd4:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
    8bdb:	48 81 c2 c0 00 00 00 	add    rdx,0xc0
    8be2:	8b 00                	mov    eax,DWORD PTR [rax]
    8be4:	89 02                	mov    DWORD PTR [rdx],eax
    8be6:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8bed:	48 05 a0 00 00 00    	add    rax,0xa0
    8bf3:	8b 12                	mov    edx,DWORD PTR [rdx]
    8bf5:	89 10                	mov    DWORD PTR [rax],edx
    8bf7:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
    8bfe:	48 83 ea 80          	sub    rdx,0xffffffffffffff80
    8c02:	8b 00                	mov    eax,DWORD PTR [rax]
    8c04:	89 02                	mov    DWORD PTR [rdx],eax
    8c06:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8c0d:	48 83 c0 60          	add    rax,0x60
    8c11:	8b 12                	mov    edx,DWORD PTR [rdx]
    8c13:	89 10                	mov    DWORD PTR [rax],edx
    8c15:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
    8c1c:	48 83 c2 40          	add    rdx,0x40
    8c20:	8b 00                	mov    eax,DWORD PTR [rax]
    8c22:	89 02                	mov    DWORD PTR [rdx],eax
    8c24:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8c2b:	48 83 c0 20          	add    rax,0x20
    8c2f:	8b 12                	mov    edx,DWORD PTR [rdx]
    8c31:	89 10                	mov    DWORD PTR [rax],edx
    8c33:	8b 10                	mov    edx,DWORD PTR [rax]
    8c35:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8c3c:	89 10                	mov    DWORD PTR [rax],edx
    8c3e:	e9 e0 03 00 00       	jmp    9023 <stbi__idct_block(unsigned char*, int, short*)+0x573>
    8c43:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8c4a:	48 83 c0 20          	add    rax,0x20
    8c4e:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8c51:	98                   	cwde   
    8c52:	89 85 94 fe ff ff    	mov    DWORD PTR [rbp-0x16c],eax
    8c58:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8c5f:	48 83 c0 60          	add    rax,0x60
    8c63:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8c66:	98                   	cwde   
    8c67:	89 85 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],eax
    8c6d:	8b 95 94 fe ff ff    	mov    edx,DWORD PTR [rbp-0x16c]
    8c73:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
    8c79:	01 d0                	add    eax,edx
    8c7b:	69 c0 a9 08 00 00    	imul   eax,eax,0x8a9
    8c81:	89 85 9c fe ff ff    	mov    DWORD PTR [rbp-0x164],eax
    8c87:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
    8c8d:	69 d0 71 e2 ff ff    	imul   edx,eax,0xffffe271
    8c93:	8b 85 9c fe ff ff    	mov    eax,DWORD PTR [rbp-0x164]
    8c99:	01 d0                	add    eax,edx
    8c9b:	89 85 a0 fe ff ff    	mov    DWORD PTR [rbp-0x160],eax
    8ca1:	8b 85 94 fe ff ff    	mov    eax,DWORD PTR [rbp-0x16c]
    8ca7:	69 d0 3f 0c 00 00    	imul   edx,eax,0xc3f
    8cad:	8b 85 9c fe ff ff    	mov    eax,DWORD PTR [rbp-0x164]
    8cb3:	01 d0                	add    eax,edx
    8cb5:	89 85 a4 fe ff ff    	mov    DWORD PTR [rbp-0x15c],eax
    8cbb:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8cc2:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8cc5:	98                   	cwde   
    8cc6:	89 85 94 fe ff ff    	mov    DWORD PTR [rbp-0x16c],eax
    8ccc:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8cd3:	48 83 c0 40          	add    rax,0x40
    8cd7:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8cda:	98                   	cwde   
    8cdb:	89 85 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],eax
    8ce1:	8b 95 94 fe ff ff    	mov    edx,DWORD PTR [rbp-0x16c]
    8ce7:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
    8ced:	01 d0                	add    eax,edx
    8cef:	c1 e0 0c             	shl    eax,0xc
    8cf2:	89 85 a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],eax
    8cf8:	8b 85 94 fe ff ff    	mov    eax,DWORD PTR [rbp-0x16c]
    8cfe:	2b 85 98 fe ff ff    	sub    eax,DWORD PTR [rbp-0x168]
    8d04:	c1 e0 0c             	shl    eax,0xc
    8d07:	89 85 ac fe ff ff    	mov    DWORD PTR [rbp-0x154],eax
    8d0d:	8b 95 a8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x158]
    8d13:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
    8d19:	01 d0                	add    eax,edx
    8d1b:	89 85 b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],eax
    8d21:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
    8d27:	2b 85 a4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x15c]
    8d2d:	89 85 b4 fe ff ff    	mov    DWORD PTR [rbp-0x14c],eax
    8d33:	8b 95 ac fe ff ff    	mov    edx,DWORD PTR [rbp-0x154]
    8d39:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
    8d3f:	01 d0                	add    eax,edx
    8d41:	89 85 b8 fe ff ff    	mov    DWORD PTR [rbp-0x148],eax
    8d47:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
    8d4d:	2b 85 a0 fe ff ff    	sub    eax,DWORD PTR [rbp-0x160]
    8d53:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
    8d59:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8d60:	48 83 c0 70          	add    rax,0x70
    8d64:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8d67:	98                   	cwde   
    8d68:	89 85 a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],eax
    8d6e:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8d75:	48 83 c0 50          	add    rax,0x50
    8d79:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8d7c:	98                   	cwde   
    8d7d:	89 85 ac fe ff ff    	mov    DWORD PTR [rbp-0x154],eax
    8d83:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8d8a:	48 83 c0 30          	add    rax,0x30
    8d8e:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8d91:	98                   	cwde   
    8d92:	89 85 a0 fe ff ff    	mov    DWORD PTR [rbp-0x160],eax
    8d98:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    8d9f:	48 83 c0 10          	add    rax,0x10
    8da3:	0f b7 00             	movzx  eax,WORD PTR [rax]
    8da6:	98                   	cwde   
    8da7:	89 85 a4 fe ff ff    	mov    DWORD PTR [rbp-0x15c],eax
    8dad:	8b 95 a8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x158]
    8db3:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
    8db9:	01 d0                	add    eax,edx
    8dbb:	89 85 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],eax
    8dc1:	8b 95 ac fe ff ff    	mov    edx,DWORD PTR [rbp-0x154]
    8dc7:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
    8dcd:	01 d0                	add    eax,edx
    8dcf:	89 85 c0 fe ff ff    	mov    DWORD PTR [rbp-0x140],eax
    8dd5:	8b 95 a8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x158]
    8ddb:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
    8de1:	01 d0                	add    eax,edx
    8de3:	89 85 9c fe ff ff    	mov    DWORD PTR [rbp-0x164],eax
    8de9:	8b 95 ac fe ff ff    	mov    edx,DWORD PTR [rbp-0x154]
    8def:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
    8df5:	01 d0                	add    eax,edx
    8df7:	89 85 94 fe ff ff    	mov    DWORD PTR [rbp-0x16c],eax
    8dfd:	8b 95 98 fe ff ff    	mov    edx,DWORD PTR [rbp-0x168]
    8e03:	8b 85 c0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x140]
    8e09:	01 d0                	add    eax,edx
    8e0b:	69 c0 d0 12 00 00    	imul   eax,eax,0x12d0
    8e11:	89 85 c4 fe ff ff    	mov    DWORD PTR [rbp-0x13c],eax
    8e17:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
    8e1d:	69 c0 c7 04 00 00    	imul   eax,eax,0x4c7
    8e23:	89 85 a8 fe ff ff    	mov    DWORD PTR [rbp-0x158],eax
    8e29:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
    8e2f:	69 c0 da 20 00 00    	imul   eax,eax,0x20da
    8e35:	89 85 ac fe ff ff    	mov    DWORD PTR [rbp-0x154],eax
    8e3b:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
    8e41:	69 c0 2a 31 00 00    	imul   eax,eax,0x312a
    8e47:	89 85 a0 fe ff ff    	mov    DWORD PTR [rbp-0x160],eax
    8e4d:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
    8e53:	69 c0 05 18 00 00    	imul   eax,eax,0x1805
    8e59:	89 85 a4 fe ff ff    	mov    DWORD PTR [rbp-0x15c],eax
    8e5f:	8b 85 9c fe ff ff    	mov    eax,DWORD PTR [rbp-0x164]
    8e65:	69 d0 9b f1 ff ff    	imul   edx,eax,0xfffff19b
    8e6b:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
    8e71:	01 d0                	add    eax,edx
    8e73:	89 85 9c fe ff ff    	mov    DWORD PTR [rbp-0x164],eax
    8e79:	8b 85 94 fe ff ff    	mov    eax,DWORD PTR [rbp-0x16c]
    8e7f:	69 d0 ff d6 ff ff    	imul   edx,eax,0xffffd6ff
    8e85:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
    8e8b:	01 d0                	add    eax,edx
    8e8d:	89 85 94 fe ff ff    	mov    DWORD PTR [rbp-0x16c],eax
    8e93:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
    8e99:	69 c0 9e e0 ff ff    	imul   eax,eax,0xffffe09e
    8e9f:	89 85 98 fe ff ff    	mov    DWORD PTR [rbp-0x168],eax
    8ea5:	8b 85 c0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x140]
    8eab:	69 c0 c3 f9 ff ff    	imul   eax,eax,0xfffff9c3
    8eb1:	89 85 c0 fe ff ff    	mov    DWORD PTR [rbp-0x140],eax
    8eb7:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [rbp-0x164]
    8ebd:	8b 85 c0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x140]
    8ec3:	01 d0                	add    eax,edx
    8ec5:	01 85 a4 fe ff ff    	add    DWORD PTR [rbp-0x15c],eax
    8ecb:	8b 95 94 fe ff ff    	mov    edx,DWORD PTR [rbp-0x16c]
    8ed1:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
    8ed7:	01 d0                	add    eax,edx
    8ed9:	01 85 a0 fe ff ff    	add    DWORD PTR [rbp-0x160],eax
    8edf:	8b 95 94 fe ff ff    	mov    edx,DWORD PTR [rbp-0x16c]
    8ee5:	8b 85 c0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x140]
    8eeb:	01 d0                	add    eax,edx
    8eed:	01 85 ac fe ff ff    	add    DWORD PTR [rbp-0x154],eax
    8ef3:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [rbp-0x164]
    8ef9:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [rbp-0x168]
    8eff:	01 d0                	add    eax,edx
    8f01:	01 85 a8 fe ff ff    	add    DWORD PTR [rbp-0x158],eax
    8f07:	81 85 b0 fe ff ff 00 02 00 00 	add    DWORD PTR [rbp-0x150],0x200
    8f11:	81 85 b8 fe ff ff 00 02 00 00 	add    DWORD PTR [rbp-0x148],0x200
    8f1b:	81 85 bc fe ff ff 00 02 00 00 	add    DWORD PTR [rbp-0x144],0x200
    8f25:	81 85 b4 fe ff ff 00 02 00 00 	add    DWORD PTR [rbp-0x14c],0x200
    8f2f:	8b 95 b0 fe ff ff    	mov    edx,DWORD PTR [rbp-0x150]
    8f35:	8b 85 a4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x15c]
    8f3b:	01 d0                	add    eax,edx
    8f3d:	c1 f8 0a             	sar    eax,0xa
    8f40:	89 c2                	mov    edx,eax
    8f42:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8f49:	89 10                	mov    DWORD PTR [rax],edx
    8f4b:	8b 85 b0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x150]
    8f51:	2b 85 a4 fe ff ff    	sub    eax,DWORD PTR [rbp-0x15c]
    8f57:	89 c2                	mov    edx,eax
    8f59:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8f60:	48 05 e0 00 00 00    	add    rax,0xe0
    8f66:	c1 fa 0a             	sar    edx,0xa
    8f69:	89 10                	mov    DWORD PTR [rax],edx
    8f6b:	8b 95 b8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x148]
    8f71:	8b 85 a0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x160]
    8f77:	01 c2                	add    edx,eax
    8f79:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8f80:	48 83 c0 20          	add    rax,0x20
    8f84:	c1 fa 0a             	sar    edx,0xa
    8f87:	89 10                	mov    DWORD PTR [rax],edx
    8f89:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
    8f8f:	2b 85 a0 fe ff ff    	sub    eax,DWORD PTR [rbp-0x160]
    8f95:	89 c2                	mov    edx,eax
    8f97:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8f9e:	48 05 c0 00 00 00    	add    rax,0xc0
    8fa4:	c1 fa 0a             	sar    edx,0xa
    8fa7:	89 10                	mov    DWORD PTR [rax],edx
    8fa9:	8b 95 bc fe ff ff    	mov    edx,DWORD PTR [rbp-0x144]
    8faf:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
    8fb5:	01 c2                	add    edx,eax
    8fb7:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8fbe:	48 83 c0 40          	add    rax,0x40
    8fc2:	c1 fa 0a             	sar    edx,0xa
    8fc5:	89 10                	mov    DWORD PTR [rax],edx
    8fc7:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
    8fcd:	2b 85 ac fe ff ff    	sub    eax,DWORD PTR [rbp-0x154]
    8fd3:	89 c2                	mov    edx,eax
    8fd5:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8fdc:	48 05 a0 00 00 00    	add    rax,0xa0
    8fe2:	c1 fa 0a             	sar    edx,0xa
    8fe5:	89 10                	mov    DWORD PTR [rax],edx
    8fe7:	8b 95 b4 fe ff ff    	mov    edx,DWORD PTR [rbp-0x14c]
    8fed:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
    8ff3:	01 c2                	add    edx,eax
    8ff5:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    8ffc:	48 83 c0 60          	add    rax,0x60
    9000:	c1 fa 0a             	sar    edx,0xa
    9003:	89 10                	mov    DWORD PTR [rax],edx
    9005:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x14c]
    900b:	2b 85 a8 fe ff ff    	sub    eax,DWORD PTR [rbp-0x158]
    9011:	89 c2                	mov    edx,eax
    9013:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    901a:	48 83 e8 80          	sub    rax,0xffffffffffffff80
    901e:	c1 fa 0a             	sar    edx,0xa
    9021:	89 10                	mov    DWORD PTR [rax],edx
    9023:	83 85 58 fe ff ff 01 	add    DWORD PTR [rbp-0x1a8],0x1
    902a:	48 83 85 d8 fe ff ff 02 	add    QWORD PTR [rbp-0x128],0x2
    9032:	48 83 85 c8 fe ff ff 04 	add    QWORD PTR [rbp-0x138],0x4
    903a:	83 bd 58 fe ff ff 07 	cmp    DWORD PTR [rbp-0x1a8],0x7
    9041:	0f 8e c3 fa ff ff    	jle    8b0a <stbi__idct_block(unsigned char*, int, short*)+0x5a>
    9047:	c7 85 58 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x1a8],0x0
    9051:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
    9058:	48 89 85 c8 fe ff ff 	mov    QWORD PTR [rbp-0x138],rax
    905f:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
    9066:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
    906d:	e9 01 04 00 00       	jmp    9473 <stbi__idct_block(unsigned char*, int, short*)+0x9c3>
    9072:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    9079:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    907c:	89 85 5c fe ff ff    	mov    DWORD PTR [rbp-0x1a4],eax
    9082:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    9089:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
    908c:	89 85 60 fe ff ff    	mov    DWORD PTR [rbp-0x1a0],eax
    9092:	8b 95 5c fe ff ff    	mov    edx,DWORD PTR [rbp-0x1a4]
    9098:	8b 85 60 fe ff ff    	mov    eax,DWORD PTR [rbp-0x1a0]
    909e:	01 d0                	add    eax,edx
    90a0:	69 c0 a9 08 00 00    	imul   eax,eax,0x8a9
    90a6:	89 85 64 fe ff ff    	mov    DWORD PTR [rbp-0x19c],eax
    90ac:	8b 85 60 fe ff ff    	mov    eax,DWORD PTR [rbp-0x1a0]
    90b2:	69 d0 71 e2 ff ff    	imul   edx,eax,0xffffe271
    90b8:	8b 85 64 fe ff ff    	mov    eax,DWORD PTR [rbp-0x19c]
    90be:	01 d0                	add    eax,edx
    90c0:	89 85 68 fe ff ff    	mov    DWORD PTR [rbp-0x198],eax
    90c6:	8b 85 5c fe ff ff    	mov    eax,DWORD PTR [rbp-0x1a4]
    90cc:	69 d0 3f 0c 00 00    	imul   edx,eax,0xc3f
    90d2:	8b 85 64 fe ff ff    	mov    eax,DWORD PTR [rbp-0x19c]
    90d8:	01 d0                	add    eax,edx
    90da:	89 85 6c fe ff ff    	mov    DWORD PTR [rbp-0x194],eax
    90e0:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    90e7:	8b 00                	mov    eax,DWORD PTR [rax]
    90e9:	89 85 5c fe ff ff    	mov    DWORD PTR [rbp-0x1a4],eax
    90ef:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    90f6:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
    90f9:	89 85 60 fe ff ff    	mov    DWORD PTR [rbp-0x1a0],eax
    90ff:	8b 95 5c fe ff ff    	mov    edx,DWORD PTR [rbp-0x1a4]
    9105:	8b 85 60 fe ff ff    	mov    eax,DWORD PTR [rbp-0x1a0]
    910b:	01 d0                	add    eax,edx
    910d:	c1 e0 0c             	shl    eax,0xc
    9110:	89 85 70 fe ff ff    	mov    DWORD PTR [rbp-0x190],eax
    9116:	8b 85 5c fe ff ff    	mov    eax,DWORD PTR [rbp-0x1a4]
    911c:	2b 85 60 fe ff ff    	sub    eax,DWORD PTR [rbp-0x1a0]
    9122:	c1 e0 0c             	shl    eax,0xc
    9125:	89 85 74 fe ff ff    	mov    DWORD PTR [rbp-0x18c],eax
    912b:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
    9131:	8b 85 6c fe ff ff    	mov    eax,DWORD PTR [rbp-0x194]
    9137:	01 d0                	add    eax,edx
    9139:	89 85 78 fe ff ff    	mov    DWORD PTR [rbp-0x188],eax
    913f:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
    9145:	2b 85 6c fe ff ff    	sub    eax,DWORD PTR [rbp-0x194]
    914b:	89 85 7c fe ff ff    	mov    DWORD PTR [rbp-0x184],eax
    9151:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
    9157:	8b 85 68 fe ff ff    	mov    eax,DWORD PTR [rbp-0x198]
    915d:	01 d0                	add    eax,edx
    915f:	89 85 80 fe ff ff    	mov    DWORD PTR [rbp-0x180],eax
    9165:	8b 85 74 fe ff ff    	mov    eax,DWORD PTR [rbp-0x18c]
    916b:	2b 85 68 fe ff ff    	sub    eax,DWORD PTR [rbp-0x198]
    9171:	89 85 84 fe ff ff    	mov    DWORD PTR [rbp-0x17c],eax
    9177:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    917e:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
    9181:	89 85 70 fe ff ff    	mov    DWORD PTR [rbp-0x190],eax
    9187:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    918e:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
    9191:	89 85 74 fe ff ff    	mov    DWORD PTR [rbp-0x18c],eax
    9197:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    919e:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
    91a1:	89 85 68 fe ff ff    	mov    DWORD PTR [rbp-0x198],eax
    91a7:	48 8b 85 c8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x138]
    91ae:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
    91b1:	89 85 6c fe ff ff    	mov    DWORD PTR [rbp-0x194],eax
    91b7:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
    91bd:	8b 85 68 fe ff ff    	mov    eax,DWORD PTR [rbp-0x198]
    91c3:	01 d0                	add    eax,edx
    91c5:	89 85 60 fe ff ff    	mov    DWORD PTR [rbp-0x1a0],eax
    91cb:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
    91d1:	8b 85 6c fe ff ff    	mov    eax,DWORD PTR [rbp-0x194]
    91d7:	01 d0                	add    eax,edx
    91d9:	89 85 88 fe ff ff    	mov    DWORD PTR [rbp-0x178],eax
    91df:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
    91e5:	8b 85 6c fe ff ff    	mov    eax,DWORD PTR [rbp-0x194]
    91eb:	01 d0                	add    eax,edx
    91ed:	89 85 64 fe ff ff    	mov    DWORD PTR [rbp-0x19c],eax
    91f3:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
    91f9:	8b 85 68 fe ff ff    	mov    eax,DWORD PTR [rbp-0x198]
    91ff:	01 d0                	add    eax,edx
    9201:	89 85 5c fe ff ff    	mov    DWORD PTR [rbp-0x1a4],eax
    9207:	8b 95 60 fe ff ff    	mov    edx,DWORD PTR [rbp-0x1a0]
    920d:	8b 85 88 fe ff ff    	mov    eax,DWORD PTR [rbp-0x178]
    9213:	01 d0                	add    eax,edx
    9215:	69 c0 d0 12 00 00    	imul   eax,eax,0x12d0
    921b:	89 85 8c fe ff ff    	mov    DWORD PTR [rbp-0x174],eax
    9221:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
    9227:	69 c0 c7 04 00 00    	imul   eax,eax,0x4c7
    922d:	89 85 70 fe ff ff    	mov    DWORD PTR [rbp-0x190],eax
    9233:	8b 85 74 fe ff ff    	mov    eax,DWORD PTR [rbp-0x18c]
    9239:	69 c0 da 20 00 00    	imul   eax,eax,0x20da
    923f:	89 85 74 fe ff ff    	mov    DWORD PTR [rbp-0x18c],eax
    9245:	8b 85 68 fe ff ff    	mov    eax,DWORD PTR [rbp-0x198]
    924b:	69 c0 2a 31 00 00    	imul   eax,eax,0x312a
    9251:	89 85 68 fe ff ff    	mov    DWORD PTR [rbp-0x198],eax
    9257:	8b 85 6c fe ff ff    	mov    eax,DWORD PTR [rbp-0x194]
    925d:	69 c0 05 18 00 00    	imul   eax,eax,0x1805
    9263:	89 85 6c fe ff ff    	mov    DWORD PTR [rbp-0x194],eax
    9269:	8b 85 64 fe ff ff    	mov    eax,DWORD PTR [rbp-0x19c]
    926f:	69 d0 9b f1 ff ff    	imul   edx,eax,0xfffff19b
    9275:	8b 85 8c fe ff ff    	mov    eax,DWORD PTR [rbp-0x174]
    927b:	01 d0                	add    eax,edx
    927d:	89 85 64 fe ff ff    	mov    DWORD PTR [rbp-0x19c],eax
    9283:	8b 85 5c fe ff ff    	mov    eax,DWORD PTR [rbp-0x1a4]
    9289:	69 d0 ff d6 ff ff    	imul   edx,eax,0xffffd6ff
    928f:	8b 85 8c fe ff ff    	mov    eax,DWORD PTR [rbp-0x174]
    9295:	01 d0                	add    eax,edx
    9297:	89 85 5c fe ff ff    	mov    DWORD PTR [rbp-0x1a4],eax
    929d:	8b 85 60 fe ff ff    	mov    eax,DWORD PTR [rbp-0x1a0]
    92a3:	69 c0 9e e0 ff ff    	imul   eax,eax,0xffffe09e
    92a9:	89 85 60 fe ff ff    	mov    DWORD PTR [rbp-0x1a0],eax
    92af:	8b 85 88 fe ff ff    	mov    eax,DWORD PTR [rbp-0x178]
    92b5:	69 c0 c3 f9 ff ff    	imul   eax,eax,0xfffff9c3
    92bb:	89 85 88 fe ff ff    	mov    DWORD PTR [rbp-0x178],eax
    92c1:	8b 95 64 fe ff ff    	mov    edx,DWORD PTR [rbp-0x19c]
    92c7:	8b 85 88 fe ff ff    	mov    eax,DWORD PTR [rbp-0x178]
    92cd:	01 d0                	add    eax,edx
    92cf:	01 85 6c fe ff ff    	add    DWORD PTR [rbp-0x194],eax
    92d5:	8b 95 5c fe ff ff    	mov    edx,DWORD PTR [rbp-0x1a4]
    92db:	8b 85 60 fe ff ff    	mov    eax,DWORD PTR [rbp-0x1a0]
    92e1:	01 d0                	add    eax,edx
    92e3:	01 85 68 fe ff ff    	add    DWORD PTR [rbp-0x198],eax
    92e9:	8b 95 5c fe ff ff    	mov    edx,DWORD PTR [rbp-0x1a4]
    92ef:	8b 85 88 fe ff ff    	mov    eax,DWORD PTR [rbp-0x178]
    92f5:	01 d0                	add    eax,edx
    92f7:	01 85 74 fe ff ff    	add    DWORD PTR [rbp-0x18c],eax
    92fd:	8b 95 64 fe ff ff    	mov    edx,DWORD PTR [rbp-0x19c]
    9303:	8b 85 60 fe ff ff    	mov    eax,DWORD PTR [rbp-0x1a0]
    9309:	01 d0                	add    eax,edx
    930b:	01 85 70 fe ff ff    	add    DWORD PTR [rbp-0x190],eax
    9311:	81 85 78 fe ff ff 00 00 01 01 	add    DWORD PTR [rbp-0x188],0x1010000
    931b:	81 85 80 fe ff ff 00 00 01 01 	add    DWORD PTR [rbp-0x180],0x1010000
    9325:	81 85 84 fe ff ff 00 00 01 01 	add    DWORD PTR [rbp-0x17c],0x1010000
    932f:	81 85 7c fe ff ff 00 00 01 01 	add    DWORD PTR [rbp-0x184],0x1010000
    9339:	8b 95 78 fe ff ff    	mov    edx,DWORD PTR [rbp-0x188]
    933f:	8b 85 6c fe ff ff    	mov    eax,DWORD PTR [rbp-0x194]
    9345:	01 d0                	add    eax,edx
    9347:	c1 f8 11             	sar    eax,0x11
    934a:	89 c7                	mov    edi,eax
    934c:	e8 2c f7 ff ff       	call   8a7d <stbi__clamp(int)>
    9351:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    9358:	88 02                	mov    BYTE PTR [rdx],al
    935a:	8b 85 78 fe ff ff    	mov    eax,DWORD PTR [rbp-0x188]
    9360:	2b 85 6c fe ff ff    	sub    eax,DWORD PTR [rbp-0x194]
    9366:	c1 f8 11             	sar    eax,0x11
    9369:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    9370:	48 8d 5a 07          	lea    rbx,[rdx+0x7]
    9374:	89 c7                	mov    edi,eax
    9376:	e8 02 f7 ff ff       	call   8a7d <stbi__clamp(int)>
    937b:	88 03                	mov    BYTE PTR [rbx],al
    937d:	8b 95 80 fe ff ff    	mov    edx,DWORD PTR [rbp-0x180]
    9383:	8b 85 68 fe ff ff    	mov    eax,DWORD PTR [rbp-0x198]
    9389:	01 d0                	add    eax,edx
    938b:	c1 f8 11             	sar    eax,0x11
    938e:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    9395:	48 8d 5a 01          	lea    rbx,[rdx+0x1]
    9399:	89 c7                	mov    edi,eax
    939b:	e8 dd f6 ff ff       	call   8a7d <stbi__clamp(int)>
    93a0:	88 03                	mov    BYTE PTR [rbx],al
    93a2:	8b 85 80 fe ff ff    	mov    eax,DWORD PTR [rbp-0x180]
    93a8:	2b 85 68 fe ff ff    	sub    eax,DWORD PTR [rbp-0x198]
    93ae:	c1 f8 11             	sar    eax,0x11
    93b1:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    93b8:	48 8d 5a 06          	lea    rbx,[rdx+0x6]
    93bc:	89 c7                	mov    edi,eax
    93be:	e8 ba f6 ff ff       	call   8a7d <stbi__clamp(int)>
    93c3:	88 03                	mov    BYTE PTR [rbx],al
    93c5:	8b 95 84 fe ff ff    	mov    edx,DWORD PTR [rbp-0x17c]
    93cb:	8b 85 74 fe ff ff    	mov    eax,DWORD PTR [rbp-0x18c]
    93d1:	01 d0                	add    eax,edx
    93d3:	c1 f8 11             	sar    eax,0x11
    93d6:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    93dd:	48 8d 5a 02          	lea    rbx,[rdx+0x2]
    93e1:	89 c7                	mov    edi,eax
    93e3:	e8 95 f6 ff ff       	call   8a7d <stbi__clamp(int)>
    93e8:	88 03                	mov    BYTE PTR [rbx],al
    93ea:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [rbp-0x17c]
    93f0:	2b 85 74 fe ff ff    	sub    eax,DWORD PTR [rbp-0x18c]
    93f6:	c1 f8 11             	sar    eax,0x11
    93f9:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    9400:	48 8d 5a 05          	lea    rbx,[rdx+0x5]
    9404:	89 c7                	mov    edi,eax
    9406:	e8 72 f6 ff ff       	call   8a7d <stbi__clamp(int)>
    940b:	88 03                	mov    BYTE PTR [rbx],al
    940d:	8b 95 7c fe ff ff    	mov    edx,DWORD PTR [rbp-0x184]
    9413:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
    9419:	01 d0                	add    eax,edx
    941b:	c1 f8 11             	sar    eax,0x11
    941e:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    9425:	48 8d 5a 03          	lea    rbx,[rdx+0x3]
    9429:	89 c7                	mov    edi,eax
    942b:	e8 4d f6 ff ff       	call   8a7d <stbi__clamp(int)>
    9430:	88 03                	mov    BYTE PTR [rbx],al
    9432:	8b 85 7c fe ff ff    	mov    eax,DWORD PTR [rbp-0x184]
    9438:	2b 85 70 fe ff ff    	sub    eax,DWORD PTR [rbp-0x190]
    943e:	c1 f8 11             	sar    eax,0x11
    9441:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
    9448:	48 8d 5a 04          	lea    rbx,[rdx+0x4]
    944c:	89 c7                	mov    edi,eax
    944e:	e8 2a f6 ff ff       	call   8a7d <stbi__clamp(int)>
    9453:	88 03                	mov    BYTE PTR [rbx],al
    9455:	83 85 58 fe ff ff 01 	add    DWORD PTR [rbp-0x1a8],0x1
    945c:	48 83 85 c8 fe ff ff 20 	add    QWORD PTR [rbp-0x138],0x20
    9464:	8b 85 44 fe ff ff    	mov    eax,DWORD PTR [rbp-0x1bc]
    946a:	48 98                	cdqe   
    946c:	48 01 85 d0 fe ff ff 	add    QWORD PTR [rbp-0x130],rax
    9473:	83 bd 58 fe ff ff 07 	cmp    DWORD PTR [rbp-0x1a8],0x7
    947a:	0f 8e f2 fb ff ff    	jle    9072 <stbi__idct_block(unsigned char*, int, short*)+0x5c2>
    9480:	90                   	nop
    9481:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    9485:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
    948e:	74 05                	je     9495 <stbi__idct_block(unsigned char*, int, short*)+0x9e5>
    9490:	e8 4b b0 ff ff       	call   44e0 <__stack_chk_fail@plt>
    9495:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    9499:	c9                   	leave  
    949a:	c3                   	ret    

000000000000949b <stbi__idct_simd(unsigned char*, int, short*)>:
    949b:	55                   	push   rbp
    949c:	48 89 e5             	mov    rbp,rsp
    949f:	48 81 ec 68 28 00 00 	sub    rsp,0x2868
    94a6:	48 89 bd 38 d7 ff ff 	mov    QWORD PTR [rbp-0x28c8],rdi
    94ad:	89 b5 34 d7 ff ff    	mov    DWORD PTR [rbp-0x28cc],esi
    94b3:	48 89 95 28 d7 ff ff 	mov    QWORD PTR [rbp-0x28d8],rdx
    94ba:	66 c7 85 28 d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27d8],0x8a9
    94c3:	66 c7 85 2a d8 ff ff 1a eb 	mov    WORD PTR [rbp-0x27d6],0xeb1a
    94cc:	66 c7 85 2c d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27d4],0x8a9
    94d5:	66 c7 85 2e d8 ff ff 1a eb 	mov    WORD PTR [rbp-0x27d2],0xeb1a
    94de:	66 c7 85 30 d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27d0],0x8a9
    94e7:	66 c7 85 32 d8 ff ff 1a eb 	mov    WORD PTR [rbp-0x27ce],0xeb1a
    94f0:	66 c7 85 34 d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27cc],0x8a9
    94f9:	66 c7 85 36 d8 ff ff 1a eb 	mov    WORD PTR [rbp-0x27ca],0xeb1a
    9502:	0f bf 85 28 d8 ff ff 	movsx  eax,WORD PTR [rbp-0x27d8]
    9509:	0f bf 95 2a d8 ff ff 	movsx  edx,WORD PTR [rbp-0x27d6]
    9510:	0f bf 8d 2c d8 ff ff 	movsx  ecx,WORD PTR [rbp-0x27d4]
    9517:	0f bf b5 2e d8 ff ff 	movsx  esi,WORD PTR [rbp-0x27d2]
    951e:	0f bf bd 30 d8 ff ff 	movsx  edi,WORD PTR [rbp-0x27d0]
    9525:	44 0f bf 85 32 d8 ff ff 	movsx  r8d,WORD PTR [rbp-0x27ce]
    952d:	44 0f bf 8d 34 d8 ff ff 	movsx  r9d,WORD PTR [rbp-0x27cc]
    9535:	44 0f bf 95 36 d8 ff ff 	movsx  r10d,WORD PTR [rbp-0x27ca]
    953d:	66 44 89 95 38 d8 ff ff 	mov    WORD PTR [rbp-0x27c8],r10w
    9545:	66 44 89 8d 3a d8 ff ff 	mov    WORD PTR [rbp-0x27c6],r9w
    954d:	66 44 89 85 3c d8 ff ff 	mov    WORD PTR [rbp-0x27c4],r8w
    9555:	66 89 bd 3e d8 ff ff 	mov    WORD PTR [rbp-0x27c2],di
    955c:	66 89 b5 40 d8 ff ff 	mov    WORD PTR [rbp-0x27c0],si
    9563:	66 89 8d 42 d8 ff ff 	mov    WORD PTR [rbp-0x27be],cx
    956a:	66 89 95 44 d8 ff ff 	mov    WORD PTR [rbp-0x27bc],dx
    9571:	66 89 85 46 d8 ff ff 	mov    WORD PTR [rbp-0x27ba],ax
    9578:	0f b7 85 46 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27ba]
    957f:	66 0f 6e c0          	movd   xmm0,eax
    9583:	0f b7 85 44 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27bc]
    958a:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    958f:	66 0f 6f c8          	movdqa xmm1,xmm0
    9593:	0f b7 85 42 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27be]
    959a:	66 0f 6e c0          	movd   xmm0,eax
    959e:	0f b7 85 40 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27c0]
    95a5:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    95aa:	66 0f 6f e0          	movdqa xmm4,xmm0
    95ae:	0f b7 85 3e d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27c2]
    95b5:	66 0f 6e c0          	movd   xmm0,eax
    95b9:	0f b7 85 3c d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27c4]
    95c0:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    95c5:	66 0f 6f d0          	movdqa xmm2,xmm0
    95c9:	0f b7 85 3a d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27c6]
    95d0:	66 0f 6e c0          	movd   xmm0,eax
    95d4:	0f b7 85 38 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27c8]
    95db:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    95e0:	66 0f 6f d8          	movdqa xmm3,xmm0
    95e4:	66 0f 62 cc          	punpckldq xmm1,xmm4
    95e8:	66 0f 6f c1          	movdqa xmm0,xmm1
    95ec:	66 0f 6f c8          	movdqa xmm1,xmm0
    95f0:	66 0f 62 d3          	punpckldq xmm2,xmm3
    95f4:	66 0f 6f c2          	movdqa xmm0,xmm2
    95f8:	66 0f 6f d0          	movdqa xmm2,xmm0
    95fc:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    9600:	66 0f 6f c1          	movdqa xmm0,xmm1
    9604:	90                   	nop
    9605:	0f 29 85 90 d9 ff ff 	movaps XMMWORD PTR [rbp-0x2670],xmm0
    960c:	66 c7 85 08 d8 ff ff e8 14 	mov    WORD PTR [rbp-0x27f8],0x14e8
    9615:	66 c7 85 0a d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27f6],0x8a9
    961e:	66 c7 85 0c d8 ff ff e8 14 	mov    WORD PTR [rbp-0x27f4],0x14e8
    9627:	66 c7 85 0e d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27f2],0x8a9
    9630:	66 c7 85 10 d8 ff ff e8 14 	mov    WORD PTR [rbp-0x27f0],0x14e8
    9639:	66 c7 85 12 d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27ee],0x8a9
    9642:	66 c7 85 14 d8 ff ff e8 14 	mov    WORD PTR [rbp-0x27ec],0x14e8
    964b:	66 c7 85 16 d8 ff ff a9 08 	mov    WORD PTR [rbp-0x27ea],0x8a9
    9654:	0f bf 85 08 d8 ff ff 	movsx  eax,WORD PTR [rbp-0x27f8]
    965b:	0f bf 95 0a d8 ff ff 	movsx  edx,WORD PTR [rbp-0x27f6]
    9662:	0f bf 8d 0c d8 ff ff 	movsx  ecx,WORD PTR [rbp-0x27f4]
    9669:	0f bf b5 0e d8 ff ff 	movsx  esi,WORD PTR [rbp-0x27f2]
    9670:	0f bf bd 10 d8 ff ff 	movsx  edi,WORD PTR [rbp-0x27f0]
    9677:	44 0f bf 85 12 d8 ff ff 	movsx  r8d,WORD PTR [rbp-0x27ee]
    967f:	44 0f bf 8d 14 d8 ff ff 	movsx  r9d,WORD PTR [rbp-0x27ec]
    9687:	44 0f bf 95 16 d8 ff ff 	movsx  r10d,WORD PTR [rbp-0x27ea]
    968f:	66 44 89 95 18 d8 ff ff 	mov    WORD PTR [rbp-0x27e8],r10w
    9697:	66 44 89 8d 1a d8 ff ff 	mov    WORD PTR [rbp-0x27e6],r9w
    969f:	66 44 89 85 1c d8 ff ff 	mov    WORD PTR [rbp-0x27e4],r8w
    96a7:	66 89 bd 1e d8 ff ff 	mov    WORD PTR [rbp-0x27e2],di
    96ae:	66 89 b5 20 d8 ff ff 	mov    WORD PTR [rbp-0x27e0],si
    96b5:	66 89 8d 22 d8 ff ff 	mov    WORD PTR [rbp-0x27de],cx
    96bc:	66 89 95 24 d8 ff ff 	mov    WORD PTR [rbp-0x27dc],dx
    96c3:	66 89 85 26 d8 ff ff 	mov    WORD PTR [rbp-0x27da],ax
    96ca:	0f b7 85 26 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27da]
    96d1:	66 0f 6e c0          	movd   xmm0,eax
    96d5:	0f b7 85 24 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27dc]
    96dc:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    96e1:	66 0f 6f c8          	movdqa xmm1,xmm0
    96e5:	0f b7 85 22 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27de]
    96ec:	66 0f 6e c0          	movd   xmm0,eax
    96f0:	0f b7 85 20 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27e0]
    96f7:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    96fc:	66 0f 6f e0          	movdqa xmm4,xmm0
    9700:	0f b7 85 1e d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27e2]
    9707:	66 0f 6e c0          	movd   xmm0,eax
    970b:	0f b7 85 1c d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27e4]
    9712:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9717:	66 0f 6f d0          	movdqa xmm2,xmm0
    971b:	0f b7 85 1a d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27e6]
    9722:	66 0f 6e c0          	movd   xmm0,eax
    9726:	0f b7 85 18 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27e8]
    972d:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9732:	66 0f 6f d8          	movdqa xmm3,xmm0
    9736:	66 0f 62 cc          	punpckldq xmm1,xmm4
    973a:	66 0f 6f c1          	movdqa xmm0,xmm1
    973e:	66 0f 6f c8          	movdqa xmm1,xmm0
    9742:	66 0f 62 d3          	punpckldq xmm2,xmm3
    9746:	66 0f 6f c2          	movdqa xmm0,xmm2
    974a:	66 0f 6f d0          	movdqa xmm2,xmm0
    974e:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    9752:	66 0f 6f c1          	movdqa xmm0,xmm1
    9756:	90                   	nop
    9757:	0f 29 85 a0 d9 ff ff 	movaps XMMWORD PTR [rbp-0x2660],xmm0
    975e:	66 c7 85 e8 d7 ff ff 6b 04 	mov    WORD PTR [rbp-0x2818],0x46b
    9767:	66 c7 85 ea d7 ff ff d0 12 	mov    WORD PTR [rbp-0x2816],0x12d0
    9770:	66 c7 85 ec d7 ff ff 6b 04 	mov    WORD PTR [rbp-0x2814],0x46b
    9779:	66 c7 85 ee d7 ff ff d0 12 	mov    WORD PTR [rbp-0x2812],0x12d0
    9782:	66 c7 85 f0 d7 ff ff 6b 04 	mov    WORD PTR [rbp-0x2810],0x46b
    978b:	66 c7 85 f2 d7 ff ff d0 12 	mov    WORD PTR [rbp-0x280e],0x12d0
    9794:	66 c7 85 f4 d7 ff ff 6b 04 	mov    WORD PTR [rbp-0x280c],0x46b
    979d:	66 c7 85 f6 d7 ff ff d0 12 	mov    WORD PTR [rbp-0x280a],0x12d0
    97a6:	0f bf 85 e8 d7 ff ff 	movsx  eax,WORD PTR [rbp-0x2818]
    97ad:	0f bf 95 ea d7 ff ff 	movsx  edx,WORD PTR [rbp-0x2816]
    97b4:	0f bf 8d ec d7 ff ff 	movsx  ecx,WORD PTR [rbp-0x2814]
    97bb:	0f bf b5 ee d7 ff ff 	movsx  esi,WORD PTR [rbp-0x2812]
    97c2:	0f bf bd f0 d7 ff ff 	movsx  edi,WORD PTR [rbp-0x2810]
    97c9:	44 0f bf 85 f2 d7 ff ff 	movsx  r8d,WORD PTR [rbp-0x280e]
    97d1:	44 0f bf 8d f4 d7 ff ff 	movsx  r9d,WORD PTR [rbp-0x280c]
    97d9:	44 0f bf 95 f6 d7 ff ff 	movsx  r10d,WORD PTR [rbp-0x280a]
    97e1:	66 44 89 95 f8 d7 ff ff 	mov    WORD PTR [rbp-0x2808],r10w
    97e9:	66 44 89 8d fa d7 ff ff 	mov    WORD PTR [rbp-0x2806],r9w
    97f1:	66 44 89 85 fc d7 ff ff 	mov    WORD PTR [rbp-0x2804],r8w
    97f9:	66 89 bd fe d7 ff ff 	mov    WORD PTR [rbp-0x2802],di
    9800:	66 89 b5 00 d8 ff ff 	mov    WORD PTR [rbp-0x2800],si
    9807:	66 89 8d 02 d8 ff ff 	mov    WORD PTR [rbp-0x27fe],cx
    980e:	66 89 95 04 d8 ff ff 	mov    WORD PTR [rbp-0x27fc],dx
    9815:	66 89 85 06 d8 ff ff 	mov    WORD PTR [rbp-0x27fa],ax
    981c:	0f b7 85 06 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27fa]
    9823:	66 0f 6e c0          	movd   xmm0,eax
    9827:	0f b7 85 04 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27fc]
    982e:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9833:	66 0f 6f c8          	movdqa xmm1,xmm0
    9837:	0f b7 85 02 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x27fe]
    983e:	66 0f 6e c0          	movd   xmm0,eax
    9842:	0f b7 85 00 d8 ff ff 	movzx  eax,WORD PTR [rbp-0x2800]
    9849:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    984e:	66 0f 6f e0          	movdqa xmm4,xmm0
    9852:	0f b7 85 fe d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2802]
    9859:	66 0f 6e c0          	movd   xmm0,eax
    985d:	0f b7 85 fc d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2804]
    9864:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9869:	66 0f 6f d0          	movdqa xmm2,xmm0
    986d:	0f b7 85 fa d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2806]
    9874:	66 0f 6e c0          	movd   xmm0,eax
    9878:	0f b7 85 f8 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2808]
    987f:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9884:	66 0f 6f d8          	movdqa xmm3,xmm0
    9888:	66 0f 62 cc          	punpckldq xmm1,xmm4
    988c:	66 0f 6f c1          	movdqa xmm0,xmm1
    9890:	66 0f 6f c8          	movdqa xmm1,xmm0
    9894:	66 0f 62 d3          	punpckldq xmm2,xmm3
    9898:	66 0f 6f c2          	movdqa xmm0,xmm2
    989c:	66 0f 6f d0          	movdqa xmm2,xmm0
    98a0:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    98a4:	66 0f 6f c1          	movdqa xmm0,xmm1
    98a8:	90                   	nop
    98a9:	0f 29 85 b0 d9 ff ff 	movaps XMMWORD PTR [rbp-0x2650],xmm0
    98b0:	66 c7 85 c8 d7 ff ff d0 12 	mov    WORD PTR [rbp-0x2838],0x12d0
    98b9:	66 c7 85 ca d7 ff ff cf e9 	mov    WORD PTR [rbp-0x2836],0xe9cf
    98c2:	66 c7 85 cc d7 ff ff d0 12 	mov    WORD PTR [rbp-0x2834],0x12d0
    98cb:	66 c7 85 ce d7 ff ff cf e9 	mov    WORD PTR [rbp-0x2832],0xe9cf
    98d4:	66 c7 85 d0 d7 ff ff d0 12 	mov    WORD PTR [rbp-0x2830],0x12d0
    98dd:	66 c7 85 d2 d7 ff ff cf e9 	mov    WORD PTR [rbp-0x282e],0xe9cf
    98e6:	66 c7 85 d4 d7 ff ff d0 12 	mov    WORD PTR [rbp-0x282c],0x12d0
    98ef:	66 c7 85 d6 d7 ff ff cf e9 	mov    WORD PTR [rbp-0x282a],0xe9cf
    98f8:	0f bf 85 c8 d7 ff ff 	movsx  eax,WORD PTR [rbp-0x2838]
    98ff:	0f bf 95 ca d7 ff ff 	movsx  edx,WORD PTR [rbp-0x2836]
    9906:	0f bf 8d cc d7 ff ff 	movsx  ecx,WORD PTR [rbp-0x2834]
    990d:	0f bf b5 ce d7 ff ff 	movsx  esi,WORD PTR [rbp-0x2832]
    9914:	0f bf bd d0 d7 ff ff 	movsx  edi,WORD PTR [rbp-0x2830]
    991b:	44 0f bf 85 d2 d7 ff ff 	movsx  r8d,WORD PTR [rbp-0x282e]
    9923:	44 0f bf 8d d4 d7 ff ff 	movsx  r9d,WORD PTR [rbp-0x282c]
    992b:	44 0f bf 95 d6 d7 ff ff 	movsx  r10d,WORD PTR [rbp-0x282a]
    9933:	66 44 89 95 d8 d7 ff ff 	mov    WORD PTR [rbp-0x2828],r10w
    993b:	66 44 89 8d da d7 ff ff 	mov    WORD PTR [rbp-0x2826],r9w
    9943:	66 44 89 85 dc d7 ff ff 	mov    WORD PTR [rbp-0x2824],r8w
    994b:	66 89 bd de d7 ff ff 	mov    WORD PTR [rbp-0x2822],di
    9952:	66 89 b5 e0 d7 ff ff 	mov    WORD PTR [rbp-0x2820],si
    9959:	66 89 8d e2 d7 ff ff 	mov    WORD PTR [rbp-0x281e],cx
    9960:	66 89 95 e4 d7 ff ff 	mov    WORD PTR [rbp-0x281c],dx
    9967:	66 89 85 e6 d7 ff ff 	mov    WORD PTR [rbp-0x281a],ax
    996e:	0f b7 85 e6 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x281a]
    9975:	66 0f 6e c0          	movd   xmm0,eax
    9979:	0f b7 85 e4 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x281c]
    9980:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9985:	66 0f 6f c8          	movdqa xmm1,xmm0
    9989:	0f b7 85 e2 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x281e]
    9990:	66 0f 6e c0          	movd   xmm0,eax
    9994:	0f b7 85 e0 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2820]
    999b:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    99a0:	66 0f 6f e0          	movdqa xmm4,xmm0
    99a4:	0f b7 85 de d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2822]
    99ab:	66 0f 6e c0          	movd   xmm0,eax
    99af:	0f b7 85 dc d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2824]
    99b6:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    99bb:	66 0f 6f d0          	movdqa xmm2,xmm0
    99bf:	0f b7 85 da d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2826]
    99c6:	66 0f 6e c0          	movd   xmm0,eax
    99ca:	0f b7 85 d8 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2828]
    99d1:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    99d6:	66 0f 6f d8          	movdqa xmm3,xmm0
    99da:	66 0f 62 cc          	punpckldq xmm1,xmm4
    99de:	66 0f 6f c1          	movdqa xmm0,xmm1
    99e2:	66 0f 6f c8          	movdqa xmm1,xmm0
    99e6:	66 0f 62 d3          	punpckldq xmm2,xmm3
    99ea:	66 0f 6f c2          	movdqa xmm0,xmm2
    99ee:	66 0f 6f d0          	movdqa xmm2,xmm0
    99f2:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    99f6:	66 0f 6f c1          	movdqa xmm0,xmm1
    99fa:	90                   	nop
    99fb:	0f 29 85 c0 d9 ff ff 	movaps XMMWORD PTR [rbp-0x2640],xmm0
    9a02:	66 c7 85 a8 d7 ff ff 65 e5 	mov    WORD PTR [rbp-0x2858],0xe565
    9a0b:	66 c7 85 aa d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x2856],0xe09e
    9a14:	66 c7 85 ac d7 ff ff 65 e5 	mov    WORD PTR [rbp-0x2854],0xe565
    9a1d:	66 c7 85 ae d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x2852],0xe09e
    9a26:	66 c7 85 b0 d7 ff ff 65 e5 	mov    WORD PTR [rbp-0x2850],0xe565
    9a2f:	66 c7 85 b2 d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x284e],0xe09e
    9a38:	66 c7 85 b4 d7 ff ff 65 e5 	mov    WORD PTR [rbp-0x284c],0xe565
    9a41:	66 c7 85 b6 d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x284a],0xe09e
    9a4a:	0f bf 85 a8 d7 ff ff 	movsx  eax,WORD PTR [rbp-0x2858]
    9a51:	0f bf 95 aa d7 ff ff 	movsx  edx,WORD PTR [rbp-0x2856]
    9a58:	0f bf 8d ac d7 ff ff 	movsx  ecx,WORD PTR [rbp-0x2854]
    9a5f:	0f bf b5 ae d7 ff ff 	movsx  esi,WORD PTR [rbp-0x2852]
    9a66:	0f bf bd b0 d7 ff ff 	movsx  edi,WORD PTR [rbp-0x2850]
    9a6d:	44 0f bf 85 b2 d7 ff ff 	movsx  r8d,WORD PTR [rbp-0x284e]
    9a75:	44 0f bf 8d b4 d7 ff ff 	movsx  r9d,WORD PTR [rbp-0x284c]
    9a7d:	44 0f bf 95 b6 d7 ff ff 	movsx  r10d,WORD PTR [rbp-0x284a]
    9a85:	66 44 89 95 b8 d7 ff ff 	mov    WORD PTR [rbp-0x2848],r10w
    9a8d:	66 44 89 8d ba d7 ff ff 	mov    WORD PTR [rbp-0x2846],r9w
    9a95:	66 44 89 85 bc d7 ff ff 	mov    WORD PTR [rbp-0x2844],r8w
    9a9d:	66 89 bd be d7 ff ff 	mov    WORD PTR [rbp-0x2842],di
    9aa4:	66 89 b5 c0 d7 ff ff 	mov    WORD PTR [rbp-0x2840],si
    9aab:	66 89 8d c2 d7 ff ff 	mov    WORD PTR [rbp-0x283e],cx
    9ab2:	66 89 95 c4 d7 ff ff 	mov    WORD PTR [rbp-0x283c],dx
    9ab9:	66 89 85 c6 d7 ff ff 	mov    WORD PTR [rbp-0x283a],ax
    9ac0:	0f b7 85 c6 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x283a]
    9ac7:	66 0f 6e c0          	movd   xmm0,eax
    9acb:	0f b7 85 c4 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x283c]
    9ad2:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9ad7:	66 0f 6f c8          	movdqa xmm1,xmm0
    9adb:	0f b7 85 c2 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x283e]
    9ae2:	66 0f 6e c0          	movd   xmm0,eax
    9ae6:	0f b7 85 c0 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2840]
    9aed:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9af2:	66 0f 6f e0          	movdqa xmm4,xmm0
    9af6:	0f b7 85 be d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2842]
    9afd:	66 0f 6e c0          	movd   xmm0,eax
    9b01:	0f b7 85 bc d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2844]
    9b08:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9b0d:	66 0f 6f d0          	movdqa xmm2,xmm0
    9b11:	0f b7 85 ba d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2846]
    9b18:	66 0f 6e c0          	movd   xmm0,eax
    9b1c:	0f b7 85 b8 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2848]
    9b23:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9b28:	66 0f 6f d8          	movdqa xmm3,xmm0
    9b2c:	66 0f 62 cc          	punpckldq xmm1,xmm4
    9b30:	66 0f 6f c1          	movdqa xmm0,xmm1
    9b34:	66 0f 6f c8          	movdqa xmm1,xmm0
    9b38:	66 0f 62 d3          	punpckldq xmm2,xmm3
    9b3c:	66 0f 6f c2          	movdqa xmm0,xmm2
    9b40:	66 0f 6f d0          	movdqa xmm2,xmm0
    9b44:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    9b48:	66 0f 6f c1          	movdqa xmm0,xmm1
    9b4c:	90                   	nop
    9b4d:	0f 29 85 d0 d9 ff ff 	movaps XMMWORD PTR [rbp-0x2630],xmm0
    9b54:	66 c7 85 88 d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x2878],0xe09e
    9b5d:	66 c7 85 8a d7 ff ff c8 11 	mov    WORD PTR [rbp-0x2876],0x11c8
    9b66:	66 c7 85 8c d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x2874],0xe09e
    9b6f:	66 c7 85 8e d7 ff ff c8 11 	mov    WORD PTR [rbp-0x2872],0x11c8
    9b78:	66 c7 85 90 d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x2870],0xe09e
    9b81:	66 c7 85 92 d7 ff ff c8 11 	mov    WORD PTR [rbp-0x286e],0x11c8
    9b8a:	66 c7 85 94 d7 ff ff 9e e0 	mov    WORD PTR [rbp-0x286c],0xe09e
    9b93:	66 c7 85 96 d7 ff ff c8 11 	mov    WORD PTR [rbp-0x286a],0x11c8
    9b9c:	0f bf 85 88 d7 ff ff 	movsx  eax,WORD PTR [rbp-0x2878]
    9ba3:	0f bf 95 8a d7 ff ff 	movsx  edx,WORD PTR [rbp-0x2876]
    9baa:	0f bf 8d 8c d7 ff ff 	movsx  ecx,WORD PTR [rbp-0x2874]
    9bb1:	0f bf b5 8e d7 ff ff 	movsx  esi,WORD PTR [rbp-0x2872]
    9bb8:	0f bf bd 90 d7 ff ff 	movsx  edi,WORD PTR [rbp-0x2870]
    9bbf:	44 0f bf 85 92 d7 ff ff 	movsx  r8d,WORD PTR [rbp-0x286e]
    9bc7:	44 0f bf 8d 94 d7 ff ff 	movsx  r9d,WORD PTR [rbp-0x286c]
    9bcf:	44 0f bf 95 96 d7 ff ff 	movsx  r10d,WORD PTR [rbp-0x286a]
    9bd7:	66 44 89 95 98 d7 ff ff 	mov    WORD PTR [rbp-0x2868],r10w
    9bdf:	66 44 89 8d 9a d7 ff ff 	mov    WORD PTR [rbp-0x2866],r9w
    9be7:	66 44 89 85 9c d7 ff ff 	mov    WORD PTR [rbp-0x2864],r8w
    9bef:	66 89 bd 9e d7 ff ff 	mov    WORD PTR [rbp-0x2862],di
    9bf6:	66 89 b5 a0 d7 ff ff 	mov    WORD PTR [rbp-0x2860],si
    9bfd:	66 89 8d a2 d7 ff ff 	mov    WORD PTR [rbp-0x285e],cx
    9c04:	66 89 95 a4 d7 ff ff 	mov    WORD PTR [rbp-0x285c],dx
    9c0b:	66 89 85 a6 d7 ff ff 	mov    WORD PTR [rbp-0x285a],ax
    9c12:	0f b7 85 a6 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x285a]
    9c19:	66 0f 6e c0          	movd   xmm0,eax
    9c1d:	0f b7 85 a4 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x285c]
    9c24:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9c29:	66 0f 6f c8          	movdqa xmm1,xmm0
    9c2d:	0f b7 85 a2 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x285e]
    9c34:	66 0f 6e c0          	movd   xmm0,eax
    9c38:	0f b7 85 a0 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2860]
    9c3f:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9c44:	66 0f 6f e0          	movdqa xmm4,xmm0
    9c48:	0f b7 85 9e d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2862]
    9c4f:	66 0f 6e c0          	movd   xmm0,eax
    9c53:	0f b7 85 9c d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2864]
    9c5a:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9c5f:	66 0f 6f d0          	movdqa xmm2,xmm0
    9c63:	0f b7 85 9a d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2866]
    9c6a:	66 0f 6e c0          	movd   xmm0,eax
    9c6e:	0f b7 85 98 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2868]
    9c75:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9c7a:	66 0f 6f d8          	movdqa xmm3,xmm0
    9c7e:	66 0f 62 cc          	punpckldq xmm1,xmm4
    9c82:	66 0f 6f c1          	movdqa xmm0,xmm1
    9c86:	66 0f 6f c8          	movdqa xmm1,xmm0
    9c8a:	66 0f 62 d3          	punpckldq xmm2,xmm3
    9c8e:	66 0f 6f c2          	movdqa xmm0,xmm2
    9c92:	66 0f 6f d0          	movdqa xmm2,xmm0
    9c96:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    9c9a:	66 0f 6f c1          	movdqa xmm0,xmm1
    9c9e:	90                   	nop
    9c9f:	0f 29 85 e0 d9 ff ff 	movaps XMMWORD PTR [rbp-0x2620],xmm0
    9ca6:	66 c7 85 68 d7 ff ff 9d 1a 	mov    WORD PTR [rbp-0x2898],0x1a9d
    9caf:	66 c7 85 6a d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x2896],0xf9c3
    9cb8:	66 c7 85 6c d7 ff ff 9d 1a 	mov    WORD PTR [rbp-0x2894],0x1a9d
    9cc1:	66 c7 85 6e d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x2892],0xf9c3
    9cca:	66 c7 85 70 d7 ff ff 9d 1a 	mov    WORD PTR [rbp-0x2890],0x1a9d
    9cd3:	66 c7 85 72 d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x288e],0xf9c3
    9cdc:	66 c7 85 74 d7 ff ff 9d 1a 	mov    WORD PTR [rbp-0x288c],0x1a9d
    9ce5:	66 c7 85 76 d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x288a],0xf9c3
    9cee:	0f bf 85 68 d7 ff ff 	movsx  eax,WORD PTR [rbp-0x2898]
    9cf5:	0f bf 95 6a d7 ff ff 	movsx  edx,WORD PTR [rbp-0x2896]
    9cfc:	0f bf 8d 6c d7 ff ff 	movsx  ecx,WORD PTR [rbp-0x2894]
    9d03:	0f bf b5 6e d7 ff ff 	movsx  esi,WORD PTR [rbp-0x2892]
    9d0a:	0f bf bd 70 d7 ff ff 	movsx  edi,WORD PTR [rbp-0x2890]
    9d11:	44 0f bf 85 72 d7 ff ff 	movsx  r8d,WORD PTR [rbp-0x288e]
    9d19:	44 0f bf 8d 74 d7 ff ff 	movsx  r9d,WORD PTR [rbp-0x288c]
    9d21:	44 0f bf 95 76 d7 ff ff 	movsx  r10d,WORD PTR [rbp-0x288a]
    9d29:	66 44 89 95 78 d7 ff ff 	mov    WORD PTR [rbp-0x2888],r10w
    9d31:	66 44 89 8d 7a d7 ff ff 	mov    WORD PTR [rbp-0x2886],r9w
    9d39:	66 44 89 85 7c d7 ff ff 	mov    WORD PTR [rbp-0x2884],r8w
    9d41:	66 89 bd 7e d7 ff ff 	mov    WORD PTR [rbp-0x2882],di
    9d48:	66 89 b5 80 d7 ff ff 	mov    WORD PTR [rbp-0x2880],si
    9d4f:	66 89 8d 82 d7 ff ff 	mov    WORD PTR [rbp-0x287e],cx
    9d56:	66 89 95 84 d7 ff ff 	mov    WORD PTR [rbp-0x287c],dx
    9d5d:	66 89 85 86 d7 ff ff 	mov    WORD PTR [rbp-0x287a],ax
    9d64:	0f b7 85 86 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x287a]
    9d6b:	66 0f 6e c0          	movd   xmm0,eax
    9d6f:	0f b7 85 84 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x287c]
    9d76:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9d7b:	66 0f 6f c8          	movdqa xmm1,xmm0
    9d7f:	0f b7 85 82 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x287e]
    9d86:	66 0f 6e c0          	movd   xmm0,eax
    9d8a:	0f b7 85 80 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2880]
    9d91:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9d96:	66 0f 6f e0          	movdqa xmm4,xmm0
    9d9a:	0f b7 85 7e d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2882]
    9da1:	66 0f 6e c0          	movd   xmm0,eax
    9da5:	0f b7 85 7c d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2884]
    9dac:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9db1:	66 0f 6f d0          	movdqa xmm2,xmm0
    9db5:	0f b7 85 7a d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2886]
    9dbc:	66 0f 6e c0          	movd   xmm0,eax
    9dc0:	0f b7 85 78 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x2888]
    9dc7:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9dcc:	66 0f 6f d8          	movdqa xmm3,xmm0
    9dd0:	66 0f 62 cc          	punpckldq xmm1,xmm4
    9dd4:	66 0f 6f c1          	movdqa xmm0,xmm1
    9dd8:	66 0f 6f c8          	movdqa xmm1,xmm0
    9ddc:	66 0f 62 d3          	punpckldq xmm2,xmm3
    9de0:	66 0f 6f c2          	movdqa xmm0,xmm2
    9de4:	66 0f 6f d0          	movdqa xmm2,xmm0
    9de8:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    9dec:	66 0f 6f c1          	movdqa xmm0,xmm1
    9df0:	90                   	nop
    9df1:	0f 29 85 f0 d9 ff ff 	movaps XMMWORD PTR [rbp-0x2610],xmm0
    9df8:	66 c7 85 48 d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x28b8],0xf9c3
    9e01:	66 c7 85 4a d7 ff ff c8 11 	mov    WORD PTR [rbp-0x28b6],0x11c8
    9e0a:	66 c7 85 4c d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x28b4],0xf9c3
    9e13:	66 c7 85 4e d7 ff ff c8 11 	mov    WORD PTR [rbp-0x28b2],0x11c8
    9e1c:	66 c7 85 50 d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x28b0],0xf9c3
    9e25:	66 c7 85 52 d7 ff ff c8 11 	mov    WORD PTR [rbp-0x28ae],0x11c8
    9e2e:	66 c7 85 54 d7 ff ff c3 f9 	mov    WORD PTR [rbp-0x28ac],0xf9c3
    9e37:	66 c7 85 56 d7 ff ff c8 11 	mov    WORD PTR [rbp-0x28aa],0x11c8
    9e40:	0f bf 85 48 d7 ff ff 	movsx  eax,WORD PTR [rbp-0x28b8]
    9e47:	0f bf 95 4a d7 ff ff 	movsx  edx,WORD PTR [rbp-0x28b6]
    9e4e:	0f bf 8d 4c d7 ff ff 	movsx  ecx,WORD PTR [rbp-0x28b4]
    9e55:	0f bf b5 4e d7 ff ff 	movsx  esi,WORD PTR [rbp-0x28b2]
    9e5c:	0f bf bd 50 d7 ff ff 	movsx  edi,WORD PTR [rbp-0x28b0]
    9e63:	44 0f bf 85 52 d7 ff ff 	movsx  r8d,WORD PTR [rbp-0x28ae]
    9e6b:	44 0f bf 8d 54 d7 ff ff 	movsx  r9d,WORD PTR [rbp-0x28ac]
    9e73:	44 0f bf 95 56 d7 ff ff 	movsx  r10d,WORD PTR [rbp-0x28aa]
    9e7b:	66 44 89 95 58 d7 ff ff 	mov    WORD PTR [rbp-0x28a8],r10w
    9e83:	66 44 89 8d 5a d7 ff ff 	mov    WORD PTR [rbp-0x28a6],r9w
    9e8b:	66 44 89 85 5c d7 ff ff 	mov    WORD PTR [rbp-0x28a4],r8w
    9e93:	66 89 bd 5e d7 ff ff 	mov    WORD PTR [rbp-0x28a2],di
    9e9a:	66 89 b5 60 d7 ff ff 	mov    WORD PTR [rbp-0x28a0],si
    9ea1:	66 89 8d 62 d7 ff ff 	mov    WORD PTR [rbp-0x289e],cx
    9ea8:	66 89 95 64 d7 ff ff 	mov    WORD PTR [rbp-0x289c],dx
    9eaf:	66 89 85 66 d7 ff ff 	mov    WORD PTR [rbp-0x289a],ax
    9eb6:	0f b7 85 66 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x289a]
    9ebd:	66 0f 6e c0          	movd   xmm0,eax
    9ec1:	0f b7 85 64 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x289c]
    9ec8:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9ecd:	66 0f 6f c8          	movdqa xmm1,xmm0
    9ed1:	0f b7 85 62 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x289e]
    9ed8:	66 0f 6e c0          	movd   xmm0,eax
    9edc:	0f b7 85 60 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x28a0]
    9ee3:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9ee8:	66 0f 6f e0          	movdqa xmm4,xmm0
    9eec:	0f b7 85 5e d7 ff ff 	movzx  eax,WORD PTR [rbp-0x28a2]
    9ef3:	66 0f 6e c0          	movd   xmm0,eax
    9ef7:	0f b7 85 5c d7 ff ff 	movzx  eax,WORD PTR [rbp-0x28a4]
    9efe:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9f03:	66 0f 6f d0          	movdqa xmm2,xmm0
    9f07:	0f b7 85 5a d7 ff ff 	movzx  eax,WORD PTR [rbp-0x28a6]
    9f0e:	66 0f 6e c0          	movd   xmm0,eax
    9f12:	0f b7 85 58 d7 ff ff 	movzx  eax,WORD PTR [rbp-0x28a8]
    9f19:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
    9f1e:	66 0f 6f d8          	movdqa xmm3,xmm0
    9f22:	66 0f 62 cc          	punpckldq xmm1,xmm4
    9f26:	66 0f 6f c1          	movdqa xmm0,xmm1
    9f2a:	66 0f 6f c8          	movdqa xmm1,xmm0
    9f2e:	66 0f 62 d3          	punpckldq xmm2,xmm3
    9f32:	66 0f 6f c2          	movdqa xmm0,xmm2
    9f36:	66 0f 6f d0          	movdqa xmm2,xmm0
    9f3a:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
    9f3e:	66 0f 6f c1          	movdqa xmm0,xmm1
    9f42:	90                   	nop
    9f43:	0f 29 85 00 da ff ff 	movaps XMMWORD PTR [rbp-0x2600],xmm0
    9f4a:	c7 85 fc d8 ff ff 00 02 00 00 	mov    DWORD PTR [rbp-0x2704],0x200
    9f54:	8b 85 fc d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2704]
    9f5a:	89 85 00 d9 ff ff    	mov    DWORD PTR [rbp-0x2700],eax
    9f60:	8b 85 fc d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2704]
    9f66:	89 85 04 d9 ff ff    	mov    DWORD PTR [rbp-0x26fc],eax
    9f6c:	8b 85 fc d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2704]
    9f72:	89 85 08 d9 ff ff    	mov    DWORD PTR [rbp-0x26f8],eax
    9f78:	8b 85 fc d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2704]
    9f7e:	89 85 0c d9 ff ff    	mov    DWORD PTR [rbp-0x26f4],eax
    9f84:	8b 85 00 d9 ff ff    	mov    eax,DWORD PTR [rbp-0x2700]
    9f8a:	8b 95 04 d9 ff ff    	mov    edx,DWORD PTR [rbp-0x26fc]
    9f90:	66 0f 6e ca          	movd   xmm1,edx
    9f94:	66 0f 6e e8          	movd   xmm5,eax
    9f98:	66 0f 62 cd          	punpckldq xmm1,xmm5
    9f9c:	8b 85 08 d9 ff ff    	mov    eax,DWORD PTR [rbp-0x26f8]
    9fa2:	8b 95 0c d9 ff ff    	mov    edx,DWORD PTR [rbp-0x26f4]
    9fa8:	66 0f 6e c2          	movd   xmm0,edx
    9fac:	66 0f 6e f0          	movd   xmm6,eax
    9fb0:	66 0f 62 c6          	punpckldq xmm0,xmm6
    9fb4:	66 0f 6c c1          	punpcklqdq xmm0,xmm1
    9fb8:	90                   	nop
    9fb9:	0f 29 85 10 da ff ff 	movaps XMMWORD PTR [rbp-0x25f0],xmm0
    9fc0:	c7 85 e8 d8 ff ff 00 00 01 01 	mov    DWORD PTR [rbp-0x2718],0x1010000
    9fca:	8b 85 e8 d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2718]
    9fd0:	89 85 ec d8 ff ff    	mov    DWORD PTR [rbp-0x2714],eax
    9fd6:	8b 85 e8 d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2718]
    9fdc:	89 85 f0 d8 ff ff    	mov    DWORD PTR [rbp-0x2710],eax
    9fe2:	8b 85 e8 d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2718]
    9fe8:	89 85 f4 d8 ff ff    	mov    DWORD PTR [rbp-0x270c],eax
    9fee:	8b 85 e8 d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2718]
    9ff4:	89 85 f8 d8 ff ff    	mov    DWORD PTR [rbp-0x2708],eax
    9ffa:	8b 85 ec d8 ff ff    	mov    eax,DWORD PTR [rbp-0x2714]
    a000:	8b 95 f0 d8 ff ff    	mov    edx,DWORD PTR [rbp-0x2710]
    a006:	66 0f 6e ca          	movd   xmm1,edx
    a00a:	66 0f 6e f8          	movd   xmm7,eax
    a00e:	66 0f 62 cf          	punpckldq xmm1,xmm7
    a012:	8b 85 f4 d8 ff ff    	mov    eax,DWORD PTR [rbp-0x270c]
    a018:	8b 95 f8 d8 ff ff    	mov    edx,DWORD PTR [rbp-0x2708]
    a01e:	66 0f 6e c2          	movd   xmm0,edx
    a022:	66 0f 6e e8          	movd   xmm5,eax
    a026:	66 0f 62 c5          	punpckldq xmm0,xmm5
    a02a:	66 0f 6c c1          	punpcklqdq xmm0,xmm1
    a02e:	90                   	nop
    a02f:	0f 29 85 20 da ff ff 	movaps XMMWORD PTR [rbp-0x25e0],xmm0
    a036:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    a03d:	48 89 85 88 d9 ff ff 	mov    QWORD PTR [rbp-0x2678],rax
    a044:	48 8b 85 88 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x2678]
    a04b:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    a04f:	0f 29 85 30 da ff ff 	movaps XMMWORD PTR [rbp-0x25d0],xmm0
    a056:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    a05d:	48 83 c0 10          	add    rax,0x10
    a061:	48 89 85 80 d9 ff ff 	mov    QWORD PTR [rbp-0x2680],rax
    a068:	48 8b 85 80 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x2680]
    a06f:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    a073:	0f 29 85 40 da ff ff 	movaps XMMWORD PTR [rbp-0x25c0],xmm0
    a07a:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    a081:	48 83 c0 20          	add    rax,0x20
    a085:	48 89 85 78 d9 ff ff 	mov    QWORD PTR [rbp-0x2688],rax
    a08c:	48 8b 85 78 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x2688]
    a093:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    a097:	0f 29 85 50 da ff ff 	movaps XMMWORD PTR [rbp-0x25b0],xmm0
    a09e:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    a0a5:	48 83 c0 30          	add    rax,0x30
    a0a9:	48 89 85 70 d9 ff ff 	mov    QWORD PTR [rbp-0x2690],rax
    a0b0:	48 8b 85 70 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x2690]
    a0b7:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    a0bb:	0f 29 85 60 da ff ff 	movaps XMMWORD PTR [rbp-0x25a0],xmm0
    a0c2:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    a0c9:	48 83 c0 40          	add    rax,0x40
    a0cd:	48 89 85 68 d9 ff ff 	mov    QWORD PTR [rbp-0x2698],rax
    a0d4:	48 8b 85 68 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x2698]
    a0db:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    a0df:	0f 29 85 70 da ff ff 	movaps XMMWORD PTR [rbp-0x2590],xmm0
    a0e6:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    a0ed:	48 83 c0 50          	add    rax,0x50
    a0f1:	48 89 85 60 d9 ff ff 	mov    QWORD PTR [rbp-0x26a0],rax
    a0f8:	48 8b 85 60 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26a0]
    a0ff:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    a103:	0f 29 85 80 da ff ff 	movaps XMMWORD PTR [rbp-0x2580],xmm0
    a10a:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    a111:	48 83 c0 60          	add    rax,0x60
    a115:	48 89 85 58 d9 ff ff 	mov    QWORD PTR [rbp-0x26a8],rax
    a11c:	48 8b 85 58 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26a8]
    a123:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    a127:	0f 29 85 90 da ff ff 	movaps XMMWORD PTR [rbp-0x2570],xmm0
    a12e:	48 8b 85 28 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28d8]
    a135:	48 83 c0 70          	add    rax,0x70
    a139:	48 89 85 50 d9 ff ff 	mov    QWORD PTR [rbp-0x26b0],rax
    a140:	48 8b 85 50 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26b0]
    a147:	66 0f 6f 00          	movdqa xmm0,XMMWORD PTR [rax]
    a14b:	0f 29 85 a0 da ff ff 	movaps XMMWORD PTR [rbp-0x2560],xmm0
    a152:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    a15a:	0f 29 45 e0          	movaps XMMWORD PTR [rbp-0x20],xmm0
    a15e:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    a166:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
    a16a:	66 0f 6f 4d f0       	movdqa xmm1,XMMWORD PTR [rbp-0x10]
    a16f:	66 0f 6f 45 e0       	movdqa xmm0,XMMWORD PTR [rbp-0x20]
    a174:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    a178:	0f 29 85 b0 da ff ff 	movaps XMMWORD PTR [rbp-0x2550],xmm0
    a17f:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    a187:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0
    a18b:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    a193:	0f 29 45 d0          	movaps XMMWORD PTR [rbp-0x30],xmm0
    a197:	66 0f 6f 4d d0       	movdqa xmm1,XMMWORD PTR [rbp-0x30]
    a19c:	66 0f 6f 45 c0       	movdqa xmm0,XMMWORD PTR [rbp-0x40]
    a1a1:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    a1a5:	0f 29 85 c0 da ff ff 	movaps XMMWORD PTR [rbp-0x2540],xmm0
    a1ac:	66 0f 6f 85 b0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2550]
    a1b4:	0f 29 45 a0          	movaps XMMWORD PTR [rbp-0x60],xmm0
    a1b8:	66 0f 6f 85 90 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2670]
    a1c0:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
    a1c4:	66 0f 6f 45 b0       	movdqa xmm0,XMMWORD PTR [rbp-0x50]
    a1c9:	66 0f 6f 4d a0       	movdqa xmm1,XMMWORD PTR [rbp-0x60]
    a1ce:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a1d2:	0f 29 85 d0 da ff ff 	movaps XMMWORD PTR [rbp-0x2530],xmm0
    a1d9:	66 0f 6f 85 c0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2540]
    a1e1:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
    a1e5:	66 0f 6f 85 90 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2670]
    a1ed:	0f 29 45 90          	movaps XMMWORD PTR [rbp-0x70],xmm0
    a1f1:	66 0f 6f 45 90       	movdqa xmm0,XMMWORD PTR [rbp-0x70]
    a1f6:	66 0f 6f 4d 80       	movdqa xmm1,XMMWORD PTR [rbp-0x80]
    a1fb:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a1ff:	0f 29 85 e0 da ff ff 	movaps XMMWORD PTR [rbp-0x2520],xmm0
    a206:	66 0f 6f 85 b0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2550]
    a20e:	0f 29 85 60 ff ff ff 	movaps XMMWORD PTR [rbp-0xa0],xmm0
    a215:	66 0f 6f 85 a0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2660]
    a21d:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
    a224:	66 0f 6f 85 70 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x90]
    a22c:	66 0f 6f 8d 60 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa0]
    a234:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a238:	0f 29 85 f0 da ff ff 	movaps XMMWORD PTR [rbp-0x2510],xmm0
    a23f:	66 0f 6f 85 c0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2540]
    a247:	0f 29 85 40 ff ff ff 	movaps XMMWORD PTR [rbp-0xc0],xmm0
    a24e:	66 0f 6f 85 a0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2660]
    a256:	0f 29 85 50 ff ff ff 	movaps XMMWORD PTR [rbp-0xb0],xmm0
    a25d:	66 0f 6f 85 50 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xb0]
    a265:	66 0f 6f 8d 40 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xc0]
    a26d:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a271:	0f 29 85 00 db ff ff 	movaps XMMWORD PTR [rbp-0x2500],xmm0
    a278:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    a280:	0f 29 85 20 ff ff ff 	movaps XMMWORD PTR [rbp-0xe0],xmm0
    a287:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    a28f:	0f 29 85 30 ff ff ff 	movaps XMMWORD PTR [rbp-0xd0],xmm0
    a296:	66 0f 6f 8d 20 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xe0]
    a29e:	66 0f 6f 85 30 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xd0]
    a2a6:	66 0f fd c1          	paddw  xmm0,xmm1
    a2aa:	0f 29 85 10 db ff ff 	movaps XMMWORD PTR [rbp-0x24f0],xmm0
    a2b1:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    a2b9:	0f 29 85 00 ff ff ff 	movaps XMMWORD PTR [rbp-0x100],xmm0
    a2c0:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    a2c8:	0f 29 85 10 ff ff ff 	movaps XMMWORD PTR [rbp-0xf0],xmm0
    a2cf:	66 0f 6f 85 00 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x100]
    a2d7:	66 0f 6f 8d 10 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xf0]
    a2df:	66 0f f9 c1          	psubw  xmm0,xmm1
    a2e3:	0f 29 85 20 db ff ff 	movaps XMMWORD PTR [rbp-0x24e0],xmm0
    a2ea:	66 0f ef c0          	pxor   xmm0,xmm0
    a2ee:	0f 29 85 e0 fe ff ff 	movaps XMMWORD PTR [rbp-0x120],xmm0
    a2f5:	66 0f 6f 85 10 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24f0]
    a2fd:	0f 29 85 f0 fe ff ff 	movaps XMMWORD PTR [rbp-0x110],xmm0
    a304:	66 0f 6f 8d f0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x110]
    a30c:	66 0f 6f 85 e0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x120]
    a314:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    a318:	0f 29 85 d0 fe ff ff 	movaps XMMWORD PTR [rbp-0x130],xmm0
    a31f:	c7 85 e4 d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x271c],0x4
    a329:	66 0f 6f 8d d0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x130]
    a331:	66 0f 6e 85 e4 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x271c]
    a339:	66 0f e2 c8          	psrad  xmm1,xmm0
    a33d:	66 0f 6f c1          	movdqa xmm0,xmm1
    a341:	0f 29 85 30 db ff ff 	movaps XMMWORD PTR [rbp-0x24d0],xmm0
    a348:	66 0f ef c0          	pxor   xmm0,xmm0
    a34c:	0f 29 85 b0 fe ff ff 	movaps XMMWORD PTR [rbp-0x150],xmm0
    a353:	66 0f 6f 85 10 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24f0]
    a35b:	0f 29 85 c0 fe ff ff 	movaps XMMWORD PTR [rbp-0x140],xmm0
    a362:	66 0f 6f 8d c0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x140]
    a36a:	66 0f 6f 85 b0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x150]
    a372:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    a376:	0f 29 85 a0 fe ff ff 	movaps XMMWORD PTR [rbp-0x160],xmm0
    a37d:	c7 85 e0 d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x2720],0x4
    a387:	66 0f 6f 8d a0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x160]
    a38f:	66 0f 6e 85 e0 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2720]
    a397:	66 0f e2 c8          	psrad  xmm1,xmm0
    a39b:	66 0f 6f c1          	movdqa xmm0,xmm1
    a39f:	0f 29 85 40 db ff ff 	movaps XMMWORD PTR [rbp-0x24c0],xmm0
    a3a6:	66 0f ef c0          	pxor   xmm0,xmm0
    a3aa:	0f 29 85 80 fe ff ff 	movaps XMMWORD PTR [rbp-0x180],xmm0
    a3b1:	66 0f 6f 85 20 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24e0]
    a3b9:	0f 29 85 90 fe ff ff 	movaps XMMWORD PTR [rbp-0x170],xmm0
    a3c0:	66 0f 6f 8d 90 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x170]
    a3c8:	66 0f 6f 85 80 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x180]
    a3d0:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    a3d4:	0f 29 85 70 fe ff ff 	movaps XMMWORD PTR [rbp-0x190],xmm0
    a3db:	c7 85 dc d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x2724],0x4
    a3e5:	66 0f 6f 8d 70 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x190]
    a3ed:	66 0f 6e 85 dc d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2724]
    a3f5:	66 0f e2 c8          	psrad  xmm1,xmm0
    a3f9:	66 0f 6f c1          	movdqa xmm0,xmm1
    a3fd:	0f 29 85 50 db ff ff 	movaps XMMWORD PTR [rbp-0x24b0],xmm0
    a404:	66 0f ef c0          	pxor   xmm0,xmm0
    a408:	0f 29 85 50 fe ff ff 	movaps XMMWORD PTR [rbp-0x1b0],xmm0
    a40f:	66 0f 6f 85 20 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24e0]
    a417:	0f 29 85 60 fe ff ff 	movaps XMMWORD PTR [rbp-0x1a0],xmm0
    a41e:	66 0f 6f 8d 60 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a0]
    a426:	66 0f 6f 85 50 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1b0]
    a42e:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    a432:	0f 29 85 40 fe ff ff 	movaps XMMWORD PTR [rbp-0x1c0],xmm0
    a439:	c7 85 d8 d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x2728],0x4
    a443:	66 0f 6f 8d 40 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1c0]
    a44b:	66 0f 6e 85 d8 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2728]
    a453:	66 0f e2 c8          	psrad  xmm1,xmm0
    a457:	66 0f 6f c1          	movdqa xmm0,xmm1
    a45b:	0f 29 85 60 db ff ff 	movaps XMMWORD PTR [rbp-0x24a0],xmm0
    a462:	66 0f 6f 85 30 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24d0]
    a46a:	0f 29 85 20 fe ff ff 	movaps XMMWORD PTR [rbp-0x1e0],xmm0
    a471:	66 0f 6f 85 f0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2510]
    a479:	0f 29 85 30 fe ff ff 	movaps XMMWORD PTR [rbp-0x1d0],xmm0
    a480:	66 0f 6f 8d 20 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1e0]
    a488:	66 0f 6f 85 30 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d0]
    a490:	66 0f fe c1          	paddd  xmm0,xmm1
    a494:	0f 29 85 70 db ff ff 	movaps XMMWORD PTR [rbp-0x2490],xmm0
    a49b:	66 0f 6f 85 40 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24c0]
    a4a3:	0f 29 85 00 fe ff ff 	movaps XMMWORD PTR [rbp-0x200],xmm0
    a4aa:	66 0f 6f 85 00 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2500]
    a4b2:	0f 29 85 10 fe ff ff 	movaps XMMWORD PTR [rbp-0x1f0],xmm0
    a4b9:	66 0f 6f 8d 00 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x200]
    a4c1:	66 0f 6f 85 10 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f0]
    a4c9:	66 0f fe c1          	paddd  xmm0,xmm1
    a4cd:	0f 29 85 80 db ff ff 	movaps XMMWORD PTR [rbp-0x2480],xmm0
    a4d4:	66 0f 6f 85 30 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24d0]
    a4dc:	0f 29 85 e0 fd ff ff 	movaps XMMWORD PTR [rbp-0x220],xmm0
    a4e3:	66 0f 6f 85 f0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2510]
    a4eb:	0f 29 85 f0 fd ff ff 	movaps XMMWORD PTR [rbp-0x210],xmm0
    a4f2:	66 0f 6f 85 e0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x220]
    a4fa:	66 0f 6f 8d f0 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x210]
    a502:	66 0f fa c1          	psubd  xmm0,xmm1
    a506:	0f 29 85 90 db ff ff 	movaps XMMWORD PTR [rbp-0x2470],xmm0
    a50d:	66 0f 6f 85 40 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24c0]
    a515:	0f 29 85 c0 fd ff ff 	movaps XMMWORD PTR [rbp-0x240],xmm0
    a51c:	66 0f 6f 85 00 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2500]
    a524:	0f 29 85 d0 fd ff ff 	movaps XMMWORD PTR [rbp-0x230],xmm0
    a52b:	66 0f 6f 85 c0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x240]
    a533:	66 0f 6f 8d d0 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x230]
    a53b:	66 0f fa c1          	psubd  xmm0,xmm1
    a53f:	0f 29 85 a0 db ff ff 	movaps XMMWORD PTR [rbp-0x2460],xmm0
    a546:	66 0f 6f 85 50 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24b0]
    a54e:	0f 29 85 a0 fd ff ff 	movaps XMMWORD PTR [rbp-0x260],xmm0
    a555:	66 0f 6f 85 d0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2530]
    a55d:	0f 29 85 b0 fd ff ff 	movaps XMMWORD PTR [rbp-0x250],xmm0
    a564:	66 0f 6f 8d a0 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x260]
    a56c:	66 0f 6f 85 b0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x250]
    a574:	66 0f fe c1          	paddd  xmm0,xmm1
    a578:	0f 29 85 b0 db ff ff 	movaps XMMWORD PTR [rbp-0x2450],xmm0
    a57f:	66 0f 6f 85 60 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24a0]
    a587:	0f 29 85 80 fd ff ff 	movaps XMMWORD PTR [rbp-0x280],xmm0
    a58e:	66 0f 6f 85 e0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2520]
    a596:	0f 29 85 90 fd ff ff 	movaps XMMWORD PTR [rbp-0x270],xmm0
    a59d:	66 0f 6f 8d 80 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x280]
    a5a5:	66 0f 6f 85 90 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x270]
    a5ad:	66 0f fe c1          	paddd  xmm0,xmm1
    a5b1:	0f 29 85 c0 db ff ff 	movaps XMMWORD PTR [rbp-0x2440],xmm0
    a5b8:	66 0f 6f 85 50 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24b0]
    a5c0:	0f 29 85 60 fd ff ff 	movaps XMMWORD PTR [rbp-0x2a0],xmm0
    a5c7:	66 0f 6f 85 d0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2530]
    a5cf:	0f 29 85 70 fd ff ff 	movaps XMMWORD PTR [rbp-0x290],xmm0
    a5d6:	66 0f 6f 85 60 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2a0]
    a5de:	66 0f 6f 8d 70 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x290]
    a5e6:	66 0f fa c1          	psubd  xmm0,xmm1
    a5ea:	0f 29 85 d0 db ff ff 	movaps XMMWORD PTR [rbp-0x2430],xmm0
    a5f1:	66 0f 6f 85 60 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x24a0]
    a5f9:	0f 29 85 40 fd ff ff 	movaps XMMWORD PTR [rbp-0x2c0],xmm0
    a600:	66 0f 6f 85 e0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2520]
    a608:	0f 29 85 50 fd ff ff 	movaps XMMWORD PTR [rbp-0x2b0],xmm0
    a60f:	66 0f 6f 85 40 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2c0]
    a617:	66 0f 6f 8d 50 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x2b0]
    a61f:	66 0f fa c1          	psubd  xmm0,xmm1
    a623:	0f 29 85 e0 db ff ff 	movaps XMMWORD PTR [rbp-0x2420],xmm0
    a62a:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    a632:	0f 29 85 20 fd ff ff 	movaps XMMWORD PTR [rbp-0x2e0],xmm0
    a639:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    a641:	0f 29 85 30 fd ff ff 	movaps XMMWORD PTR [rbp-0x2d0],xmm0
    a648:	66 0f 6f 8d 30 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x2d0]
    a650:	66 0f 6f 85 20 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2e0]
    a658:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    a65c:	0f 29 85 f0 db ff ff 	movaps XMMWORD PTR [rbp-0x2410],xmm0
    a663:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    a66b:	0f 29 85 00 fd ff ff 	movaps XMMWORD PTR [rbp-0x300],xmm0
    a672:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    a67a:	0f 29 85 10 fd ff ff 	movaps XMMWORD PTR [rbp-0x2f0],xmm0
    a681:	66 0f 6f 8d 10 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x2f0]
    a689:	66 0f 6f 85 00 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x300]
    a691:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    a695:	0f 29 85 00 dc ff ff 	movaps XMMWORD PTR [rbp-0x2400],xmm0
    a69c:	66 0f 6f 85 f0 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2410]
    a6a4:	0f 29 85 e0 fc ff ff 	movaps XMMWORD PTR [rbp-0x320],xmm0
    a6ab:	66 0f 6f 85 d0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2630]
    a6b3:	0f 29 85 f0 fc ff ff 	movaps XMMWORD PTR [rbp-0x310],xmm0
    a6ba:	66 0f 6f 85 f0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x310]
    a6c2:	66 0f 6f 8d e0 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x320]
    a6ca:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a6ce:	0f 29 85 10 dc ff ff 	movaps XMMWORD PTR [rbp-0x23f0],xmm0
    a6d5:	66 0f 6f 85 00 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2400]
    a6dd:	0f 29 85 c0 fc ff ff 	movaps XMMWORD PTR [rbp-0x340],xmm0
    a6e4:	66 0f 6f 85 d0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2630]
    a6ec:	0f 29 85 d0 fc ff ff 	movaps XMMWORD PTR [rbp-0x330],xmm0
    a6f3:	66 0f 6f 85 d0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x330]
    a6fb:	66 0f 6f 8d c0 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x340]
    a703:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a707:	0f 29 85 20 dc ff ff 	movaps XMMWORD PTR [rbp-0x23e0],xmm0
    a70e:	66 0f 6f 85 f0 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2410]
    a716:	0f 29 85 a0 fc ff ff 	movaps XMMWORD PTR [rbp-0x360],xmm0
    a71d:	66 0f 6f 85 e0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2620]
    a725:	0f 29 85 b0 fc ff ff 	movaps XMMWORD PTR [rbp-0x350],xmm0
    a72c:	66 0f 6f 85 b0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x350]
    a734:	66 0f 6f 8d a0 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x360]
    a73c:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a740:	0f 29 85 30 dc ff ff 	movaps XMMWORD PTR [rbp-0x23d0],xmm0
    a747:	66 0f 6f 85 00 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2400]
    a74f:	0f 29 85 80 fc ff ff 	movaps XMMWORD PTR [rbp-0x380],xmm0
    a756:	66 0f 6f 85 e0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2620]
    a75e:	0f 29 85 90 fc ff ff 	movaps XMMWORD PTR [rbp-0x370],xmm0
    a765:	66 0f 6f 85 90 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x370]
    a76d:	66 0f 6f 8d 80 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x380]
    a775:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a779:	0f 29 85 40 dc ff ff 	movaps XMMWORD PTR [rbp-0x23c0],xmm0
    a780:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    a788:	0f 29 85 60 fc ff ff 	movaps XMMWORD PTR [rbp-0x3a0],xmm0
    a78f:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    a797:	0f 29 85 70 fc ff ff 	movaps XMMWORD PTR [rbp-0x390],xmm0
    a79e:	66 0f 6f 8d 70 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x390]
    a7a6:	66 0f 6f 85 60 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3a0]
    a7ae:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    a7b2:	0f 29 85 50 dc ff ff 	movaps XMMWORD PTR [rbp-0x23b0],xmm0
    a7b9:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    a7c1:	0f 29 85 40 fc ff ff 	movaps XMMWORD PTR [rbp-0x3c0],xmm0
    a7c8:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    a7d0:	0f 29 85 50 fc ff ff 	movaps XMMWORD PTR [rbp-0x3b0],xmm0
    a7d7:	66 0f 6f 8d 50 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x3b0]
    a7df:	66 0f 6f 85 40 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3c0]
    a7e7:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    a7eb:	0f 29 85 60 dc ff ff 	movaps XMMWORD PTR [rbp-0x23a0],xmm0
    a7f2:	66 0f 6f 85 50 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23b0]
    a7fa:	0f 29 85 20 fc ff ff 	movaps XMMWORD PTR [rbp-0x3e0],xmm0
    a801:	66 0f 6f 85 f0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2610]
    a809:	0f 29 85 30 fc ff ff 	movaps XMMWORD PTR [rbp-0x3d0],xmm0
    a810:	66 0f 6f 85 30 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3d0]
    a818:	66 0f 6f 8d 20 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x3e0]
    a820:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a824:	0f 29 85 70 dc ff ff 	movaps XMMWORD PTR [rbp-0x2390],xmm0
    a82b:	66 0f 6f 85 60 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23a0]
    a833:	0f 29 85 00 fc ff ff 	movaps XMMWORD PTR [rbp-0x400],xmm0
    a83a:	66 0f 6f 85 f0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2610]
    a842:	0f 29 85 10 fc ff ff 	movaps XMMWORD PTR [rbp-0x3f0],xmm0
    a849:	66 0f 6f 85 10 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3f0]
    a851:	66 0f 6f 8d 00 fc ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x400]
    a859:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a85d:	0f 29 85 80 dc ff ff 	movaps XMMWORD PTR [rbp-0x2380],xmm0
    a864:	66 0f 6f 85 50 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23b0]
    a86c:	0f 29 85 e0 fb ff ff 	movaps XMMWORD PTR [rbp-0x420],xmm0
    a873:	66 0f 6f 85 00 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2600]
    a87b:	0f 29 85 f0 fb ff ff 	movaps XMMWORD PTR [rbp-0x410],xmm0
    a882:	66 0f 6f 85 f0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x410]
    a88a:	66 0f 6f 8d e0 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x420]
    a892:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a896:	0f 29 85 90 dc ff ff 	movaps XMMWORD PTR [rbp-0x2370],xmm0
    a89d:	66 0f 6f 85 60 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23a0]
    a8a5:	0f 29 85 c0 fb ff ff 	movaps XMMWORD PTR [rbp-0x440],xmm0
    a8ac:	66 0f 6f 85 00 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2600]
    a8b4:	0f 29 85 d0 fb ff ff 	movaps XMMWORD PTR [rbp-0x430],xmm0
    a8bb:	66 0f 6f 85 d0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x430]
    a8c3:	66 0f 6f 8d c0 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x440]
    a8cb:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a8cf:	0f 29 85 a0 dc ff ff 	movaps XMMWORD PTR [rbp-0x2360],xmm0
    a8d6:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    a8de:	0f 29 85 a0 fb ff ff 	movaps XMMWORD PTR [rbp-0x460],xmm0
    a8e5:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    a8ed:	0f 29 85 b0 fb ff ff 	movaps XMMWORD PTR [rbp-0x450],xmm0
    a8f4:	66 0f 6f 8d a0 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x460]
    a8fc:	66 0f 6f 85 b0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x450]
    a904:	66 0f fd c1          	paddw  xmm0,xmm1
    a908:	0f 29 85 b0 dc ff ff 	movaps XMMWORD PTR [rbp-0x2350],xmm0
    a90f:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    a917:	0f 29 85 80 fb ff ff 	movaps XMMWORD PTR [rbp-0x480],xmm0
    a91e:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    a926:	0f 29 85 90 fb ff ff 	movaps XMMWORD PTR [rbp-0x470],xmm0
    a92d:	66 0f 6f 8d 80 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x480]
    a935:	66 0f 6f 85 90 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x470]
    a93d:	66 0f fd c1          	paddw  xmm0,xmm1
    a941:	0f 29 85 c0 dc ff ff 	movaps XMMWORD PTR [rbp-0x2340],xmm0
    a948:	66 0f 6f 85 b0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2350]
    a950:	0f 29 85 60 fb ff ff 	movaps XMMWORD PTR [rbp-0x4a0],xmm0
    a957:	66 0f 6f 85 c0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2340]
    a95f:	0f 29 85 70 fb ff ff 	movaps XMMWORD PTR [rbp-0x490],xmm0
    a966:	66 0f 6f 8d 70 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x490]
    a96e:	66 0f 6f 85 60 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4a0]
    a976:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    a97a:	0f 29 85 d0 dc ff ff 	movaps XMMWORD PTR [rbp-0x2330],xmm0
    a981:	66 0f 6f 85 b0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2350]
    a989:	0f 29 85 40 fb ff ff 	movaps XMMWORD PTR [rbp-0x4c0],xmm0
    a990:	66 0f 6f 85 c0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2340]
    a998:	0f 29 85 50 fb ff ff 	movaps XMMWORD PTR [rbp-0x4b0],xmm0
    a99f:	66 0f 6f 8d 50 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x4b0]
    a9a7:	66 0f 6f 85 40 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4c0]
    a9af:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    a9b3:	0f 29 85 e0 dc ff ff 	movaps XMMWORD PTR [rbp-0x2320],xmm0
    a9ba:	66 0f 6f 85 d0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2330]
    a9c2:	0f 29 85 20 fb ff ff 	movaps XMMWORD PTR [rbp-0x4e0],xmm0
    a9c9:	66 0f 6f 85 b0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2650]
    a9d1:	0f 29 85 30 fb ff ff 	movaps XMMWORD PTR [rbp-0x4d0],xmm0
    a9d8:	66 0f 6f 85 30 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4d0]
    a9e0:	66 0f 6f 8d 20 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x4e0]
    a9e8:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    a9ec:	0f 29 85 f0 dc ff ff 	movaps XMMWORD PTR [rbp-0x2310],xmm0
    a9f3:	66 0f 6f 85 e0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2320]
    a9fb:	0f 29 85 00 fb ff ff 	movaps XMMWORD PTR [rbp-0x500],xmm0
    aa02:	66 0f 6f 85 b0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2650]
    aa0a:	0f 29 85 10 fb ff ff 	movaps XMMWORD PTR [rbp-0x4f0],xmm0
    aa11:	66 0f 6f 85 10 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4f0]
    aa19:	66 0f 6f 8d 00 fb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x500]
    aa21:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    aa25:	0f 29 85 00 dd ff ff 	movaps XMMWORD PTR [rbp-0x2300],xmm0
    aa2c:	66 0f 6f 85 d0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2330]
    aa34:	0f 29 85 e0 fa ff ff 	movaps XMMWORD PTR [rbp-0x520],xmm0
    aa3b:	66 0f 6f 85 c0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2640]
    aa43:	0f 29 85 f0 fa ff ff 	movaps XMMWORD PTR [rbp-0x510],xmm0
    aa4a:	66 0f 6f 85 f0 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x510]
    aa52:	66 0f 6f 8d e0 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x520]
    aa5a:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    aa5e:	0f 29 85 10 dd ff ff 	movaps XMMWORD PTR [rbp-0x22f0],xmm0
    aa65:	66 0f 6f 85 e0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2320]
    aa6d:	0f 29 85 c0 fa ff ff 	movaps XMMWORD PTR [rbp-0x540],xmm0
    aa74:	66 0f 6f 85 c0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2640]
    aa7c:	0f 29 85 d0 fa ff ff 	movaps XMMWORD PTR [rbp-0x530],xmm0
    aa83:	66 0f 6f 85 d0 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x530]
    aa8b:	66 0f 6f 8d c0 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x540]
    aa93:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    aa97:	0f 29 85 20 dd ff ff 	movaps XMMWORD PTR [rbp-0x22e0],xmm0
    aa9e:	66 0f 6f 85 10 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23f0]
    aaa6:	0f 29 85 a0 fa ff ff 	movaps XMMWORD PTR [rbp-0x560],xmm0
    aaad:	66 0f 6f 85 f0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2310]
    aab5:	0f 29 85 b0 fa ff ff 	movaps XMMWORD PTR [rbp-0x550],xmm0
    aabc:	66 0f 6f 8d a0 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x560]
    aac4:	66 0f 6f 85 b0 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x550]
    aacc:	66 0f fe c1          	paddd  xmm0,xmm1
    aad0:	0f 29 85 30 dd ff ff 	movaps XMMWORD PTR [rbp-0x22d0],xmm0
    aad7:	66 0f 6f 85 20 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23e0]
    aadf:	0f 29 85 80 fa ff ff 	movaps XMMWORD PTR [rbp-0x580],xmm0
    aae6:	66 0f 6f 85 00 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2300]
    aaee:	0f 29 85 90 fa ff ff 	movaps XMMWORD PTR [rbp-0x570],xmm0
    aaf5:	66 0f 6f 8d 80 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x580]
    aafd:	66 0f 6f 85 90 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x570]
    ab05:	66 0f fe c1          	paddd  xmm0,xmm1
    ab09:	0f 29 85 40 dd ff ff 	movaps XMMWORD PTR [rbp-0x22c0],xmm0
    ab10:	66 0f 6f 85 70 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2390]
    ab18:	0f 29 85 60 fa ff ff 	movaps XMMWORD PTR [rbp-0x5a0],xmm0
    ab1f:	66 0f 6f 85 10 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22f0]
    ab27:	0f 29 85 70 fa ff ff 	movaps XMMWORD PTR [rbp-0x590],xmm0
    ab2e:	66 0f 6f 8d 60 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x5a0]
    ab36:	66 0f 6f 85 70 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x590]
    ab3e:	66 0f fe c1          	paddd  xmm0,xmm1
    ab42:	0f 29 85 50 dd ff ff 	movaps XMMWORD PTR [rbp-0x22b0],xmm0
    ab49:	66 0f 6f 85 80 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2380]
    ab51:	0f 29 85 40 fa ff ff 	movaps XMMWORD PTR [rbp-0x5c0],xmm0
    ab58:	66 0f 6f 85 20 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22e0]
    ab60:	0f 29 85 50 fa ff ff 	movaps XMMWORD PTR [rbp-0x5b0],xmm0
    ab67:	66 0f 6f 8d 40 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x5c0]
    ab6f:	66 0f 6f 85 50 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x5b0]
    ab77:	66 0f fe c1          	paddd  xmm0,xmm1
    ab7b:	0f 29 85 60 dd ff ff 	movaps XMMWORD PTR [rbp-0x22a0],xmm0
    ab82:	66 0f 6f 85 30 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23d0]
    ab8a:	0f 29 85 20 fa ff ff 	movaps XMMWORD PTR [rbp-0x5e0],xmm0
    ab91:	66 0f 6f 85 10 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22f0]
    ab99:	0f 29 85 30 fa ff ff 	movaps XMMWORD PTR [rbp-0x5d0],xmm0
    aba0:	66 0f 6f 8d 20 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x5e0]
    aba8:	66 0f 6f 85 30 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x5d0]
    abb0:	66 0f fe c1          	paddd  xmm0,xmm1
    abb4:	0f 29 85 70 dd ff ff 	movaps XMMWORD PTR [rbp-0x2290],xmm0
    abbb:	66 0f 6f 85 40 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x23c0]
    abc3:	0f 29 85 00 fa ff ff 	movaps XMMWORD PTR [rbp-0x600],xmm0
    abca:	66 0f 6f 85 20 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22e0]
    abd2:	0f 29 85 10 fa ff ff 	movaps XMMWORD PTR [rbp-0x5f0],xmm0
    abd9:	66 0f 6f 8d 00 fa ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x600]
    abe1:	66 0f 6f 85 10 fa ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x5f0]
    abe9:	66 0f fe c1          	paddd  xmm0,xmm1
    abed:	0f 29 85 80 dd ff ff 	movaps XMMWORD PTR [rbp-0x2280],xmm0
    abf4:	66 0f 6f 85 90 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2370]
    abfc:	0f 29 85 e0 f9 ff ff 	movaps XMMWORD PTR [rbp-0x620],xmm0
    ac03:	66 0f 6f 85 f0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2310]
    ac0b:	0f 29 85 f0 f9 ff ff 	movaps XMMWORD PTR [rbp-0x610],xmm0
    ac12:	66 0f 6f 8d e0 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x620]
    ac1a:	66 0f 6f 85 f0 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x610]
    ac22:	66 0f fe c1          	paddd  xmm0,xmm1
    ac26:	0f 29 85 90 dd ff ff 	movaps XMMWORD PTR [rbp-0x2270],xmm0
    ac2d:	66 0f 6f 85 a0 dc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2360]
    ac35:	0f 29 85 c0 f9 ff ff 	movaps XMMWORD PTR [rbp-0x640],xmm0
    ac3c:	66 0f 6f 85 00 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2300]
    ac44:	0f 29 85 d0 f9 ff ff 	movaps XMMWORD PTR [rbp-0x630],xmm0
    ac4b:	66 0f 6f 8d c0 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x640]
    ac53:	66 0f 6f 85 d0 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x630]
    ac5b:	66 0f fe c1          	paddd  xmm0,xmm1
    ac5f:	0f 29 85 a0 dd ff ff 	movaps XMMWORD PTR [rbp-0x2260],xmm0
    ac66:	66 0f 6f 85 70 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2490]
    ac6e:	0f 29 85 a0 f9 ff ff 	movaps XMMWORD PTR [rbp-0x660],xmm0
    ac75:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    ac7d:	0f 29 85 b0 f9 ff ff 	movaps XMMWORD PTR [rbp-0x650],xmm0
    ac84:	66 0f 6f 8d a0 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x660]
    ac8c:	66 0f 6f 85 b0 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x650]
    ac94:	66 0f fe c1          	paddd  xmm0,xmm1
    ac98:	0f 29 85 b0 dd ff ff 	movaps XMMWORD PTR [rbp-0x2250],xmm0
    ac9f:	66 0f 6f 85 80 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2480]
    aca7:	0f 29 85 80 f9 ff ff 	movaps XMMWORD PTR [rbp-0x680],xmm0
    acae:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    acb6:	0f 29 85 90 f9 ff ff 	movaps XMMWORD PTR [rbp-0x670],xmm0
    acbd:	66 0f 6f 8d 80 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x680]
    acc5:	66 0f 6f 85 90 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x670]
    accd:	66 0f fe c1          	paddd  xmm0,xmm1
    acd1:	0f 29 85 c0 dd ff ff 	movaps XMMWORD PTR [rbp-0x2240],xmm0
    acd8:	66 0f 6f 85 b0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2250]
    ace0:	0f 29 85 60 f9 ff ff 	movaps XMMWORD PTR [rbp-0x6a0],xmm0
    ace7:	66 0f 6f 85 90 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2270]
    acef:	0f 29 85 70 f9 ff ff 	movaps XMMWORD PTR [rbp-0x690],xmm0
    acf6:	66 0f 6f 8d 60 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x6a0]
    acfe:	66 0f 6f 85 70 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x690]
    ad06:	66 0f fe c1          	paddd  xmm0,xmm1
    ad0a:	0f 29 85 d0 dd ff ff 	movaps XMMWORD PTR [rbp-0x2230],xmm0
    ad11:	66 0f 6f 85 c0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2240]
    ad19:	0f 29 85 40 f9 ff ff 	movaps XMMWORD PTR [rbp-0x6c0],xmm0
    ad20:	66 0f 6f 85 a0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2260]
    ad28:	0f 29 85 50 f9 ff ff 	movaps XMMWORD PTR [rbp-0x6b0],xmm0
    ad2f:	66 0f 6f 8d 40 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x6c0]
    ad37:	66 0f 6f 85 50 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x6b0]
    ad3f:	66 0f fe c1          	paddd  xmm0,xmm1
    ad43:	0f 29 85 e0 dd ff ff 	movaps XMMWORD PTR [rbp-0x2220],xmm0
    ad4a:	66 0f 6f 85 b0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2250]
    ad52:	0f 29 85 20 f9 ff ff 	movaps XMMWORD PTR [rbp-0x6e0],xmm0
    ad59:	66 0f 6f 85 90 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2270]
    ad61:	0f 29 85 30 f9 ff ff 	movaps XMMWORD PTR [rbp-0x6d0],xmm0
    ad68:	66 0f 6f 85 20 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x6e0]
    ad70:	66 0f 6f 8d 30 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x6d0]
    ad78:	66 0f fa c1          	psubd  xmm0,xmm1
    ad7c:	0f 29 85 f0 dd ff ff 	movaps XMMWORD PTR [rbp-0x2210],xmm0
    ad83:	66 0f 6f 85 c0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2240]
    ad8b:	0f 29 85 00 f9 ff ff 	movaps XMMWORD PTR [rbp-0x700],xmm0
    ad92:	66 0f 6f 85 a0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2260]
    ad9a:	0f 29 85 10 f9 ff ff 	movaps XMMWORD PTR [rbp-0x6f0],xmm0
    ada1:	66 0f 6f 85 00 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x700]
    ada9:	66 0f 6f 8d 10 f9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x6f0]
    adb1:	66 0f fa c1          	psubd  xmm0,xmm1
    adb5:	0f 29 85 00 de ff ff 	movaps XMMWORD PTR [rbp-0x2200],xmm0
    adbc:	66 0f 6f 85 e0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2220]
    adc4:	0f 29 85 f0 f8 ff ff 	movaps XMMWORD PTR [rbp-0x710],xmm0
    adcb:	c7 85 d4 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x272c],0xa
    add5:	66 0f 6f 8d f0 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x710]
    addd:	66 0f 6e 85 d4 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x272c]
    ade5:	66 0f e2 c8          	psrad  xmm1,xmm0
    ade9:	66 0f 6f d1          	movdqa xmm2,xmm1
    aded:	66 0f 6f 85 d0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2230]
    adf5:	0f 29 85 e0 f8 ff ff 	movaps XMMWORD PTR [rbp-0x720],xmm0
    adfc:	c7 85 d0 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2730],0xa
    ae06:	66 0f 6f 8d e0 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x720]
    ae0e:	66 0f 6e 85 d0 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2730]
    ae16:	66 0f e2 c8          	psrad  xmm1,xmm0
    ae1a:	66 0f 6f c1          	movdqa xmm0,xmm1
    ae1e:	0f 29 85 c0 f8 ff ff 	movaps XMMWORD PTR [rbp-0x740],xmm0
    ae25:	0f 29 95 d0 f8 ff ff 	movaps XMMWORD PTR [rbp-0x730],xmm2
    ae2c:	66 0f 6f 8d d0 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x730]
    ae34:	66 0f 6f 85 c0 f8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x740]
    ae3c:	66 0f 6b c1          	packssdw xmm0,xmm1
    ae40:	0f 29 85 30 da ff ff 	movaps XMMWORD PTR [rbp-0x25d0],xmm0
    ae47:	66 0f 6f 85 00 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2200]
    ae4f:	0f 29 85 b0 f8 ff ff 	movaps XMMWORD PTR [rbp-0x750],xmm0
    ae56:	c7 85 cc d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2734],0xa
    ae60:	66 0f 6f 8d b0 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x750]
    ae68:	66 0f 6e 85 cc d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2734]
    ae70:	66 0f e2 c8          	psrad  xmm1,xmm0
    ae74:	66 0f 6f d1          	movdqa xmm2,xmm1
    ae78:	66 0f 6f 85 f0 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2210]
    ae80:	0f 29 85 a0 f8 ff ff 	movaps XMMWORD PTR [rbp-0x760],xmm0
    ae87:	c7 85 c8 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2738],0xa
    ae91:	66 0f 6f 8d a0 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x760]
    ae99:	66 0f 6e 85 c8 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2738]
    aea1:	66 0f e2 c8          	psrad  xmm1,xmm0
    aea5:	66 0f 6f c1          	movdqa xmm0,xmm1
    aea9:	0f 29 85 80 f8 ff ff 	movaps XMMWORD PTR [rbp-0x780],xmm0
    aeb0:	0f 29 95 90 f8 ff ff 	movaps XMMWORD PTR [rbp-0x770],xmm2
    aeb7:	66 0f 6f 8d 90 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x770]
    aebf:	66 0f 6f 85 80 f8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x780]
    aec7:	66 0f 6b c1          	packssdw xmm0,xmm1
    aecb:	0f 29 85 a0 da ff ff 	movaps XMMWORD PTR [rbp-0x2560],xmm0
    aed2:	66 0f 6f 85 b0 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2450]
    aeda:	0f 29 85 60 f8 ff ff 	movaps XMMWORD PTR [rbp-0x7a0],xmm0
    aee1:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    aee9:	0f 29 85 70 f8 ff ff 	movaps XMMWORD PTR [rbp-0x790],xmm0
    aef0:	66 0f 6f 8d 60 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x7a0]
    aef8:	66 0f 6f 85 70 f8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x790]
    af00:	66 0f fe c1          	paddd  xmm0,xmm1
    af04:	0f 29 85 10 de ff ff 	movaps XMMWORD PTR [rbp-0x21f0],xmm0
    af0b:	66 0f 6f 85 c0 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2440]
    af13:	0f 29 85 40 f8 ff ff 	movaps XMMWORD PTR [rbp-0x7c0],xmm0
    af1a:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    af22:	0f 29 85 50 f8 ff ff 	movaps XMMWORD PTR [rbp-0x7b0],xmm0
    af29:	66 0f 6f 8d 40 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x7c0]
    af31:	66 0f 6f 85 50 f8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x7b0]
    af39:	66 0f fe c1          	paddd  xmm0,xmm1
    af3d:	0f 29 85 20 de ff ff 	movaps XMMWORD PTR [rbp-0x21e0],xmm0
    af44:	66 0f 6f 85 10 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21f0]
    af4c:	0f 29 85 20 f8 ff ff 	movaps XMMWORD PTR [rbp-0x7e0],xmm0
    af53:	66 0f 6f 85 70 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2290]
    af5b:	0f 29 85 30 f8 ff ff 	movaps XMMWORD PTR [rbp-0x7d0],xmm0
    af62:	66 0f 6f 8d 20 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x7e0]
    af6a:	66 0f 6f 85 30 f8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x7d0]
    af72:	66 0f fe c1          	paddd  xmm0,xmm1
    af76:	0f 29 85 30 de ff ff 	movaps XMMWORD PTR [rbp-0x21d0],xmm0
    af7d:	66 0f 6f 85 20 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21e0]
    af85:	0f 29 85 00 f8 ff ff 	movaps XMMWORD PTR [rbp-0x800],xmm0
    af8c:	66 0f 6f 85 80 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2280]
    af94:	0f 29 85 10 f8 ff ff 	movaps XMMWORD PTR [rbp-0x7f0],xmm0
    af9b:	66 0f 6f 8d 00 f8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x800]
    afa3:	66 0f 6f 85 10 f8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x7f0]
    afab:	66 0f fe c1          	paddd  xmm0,xmm1
    afaf:	0f 29 85 40 de ff ff 	movaps XMMWORD PTR [rbp-0x21c0],xmm0
    afb6:	66 0f 6f 85 10 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21f0]
    afbe:	0f 29 85 e0 f7 ff ff 	movaps XMMWORD PTR [rbp-0x820],xmm0
    afc5:	66 0f 6f 85 70 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2290]
    afcd:	0f 29 85 f0 f7 ff ff 	movaps XMMWORD PTR [rbp-0x810],xmm0
    afd4:	66 0f 6f 85 e0 f7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x820]
    afdc:	66 0f 6f 8d f0 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x810]
    afe4:	66 0f fa c1          	psubd  xmm0,xmm1
    afe8:	0f 29 85 50 de ff ff 	movaps XMMWORD PTR [rbp-0x21b0],xmm0
    afef:	66 0f 6f 85 20 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21e0]
    aff7:	0f 29 85 c0 f7 ff ff 	movaps XMMWORD PTR [rbp-0x840],xmm0
    affe:	66 0f 6f 85 80 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2280]
    b006:	0f 29 85 d0 f7 ff ff 	movaps XMMWORD PTR [rbp-0x830],xmm0
    b00d:	66 0f 6f 85 c0 f7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x840]
    b015:	66 0f 6f 8d d0 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x830]
    b01d:	66 0f fa c1          	psubd  xmm0,xmm1
    b021:	0f 29 85 60 de ff ff 	movaps XMMWORD PTR [rbp-0x21a0],xmm0
    b028:	66 0f 6f 85 40 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21c0]
    b030:	0f 29 85 b0 f7 ff ff 	movaps XMMWORD PTR [rbp-0x850],xmm0
    b037:	c7 85 c4 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x273c],0xa
    b041:	66 0f 6f 8d b0 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x850]
    b049:	66 0f 6e 85 c4 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x273c]
    b051:	66 0f e2 c8          	psrad  xmm1,xmm0
    b055:	66 0f 6f d1          	movdqa xmm2,xmm1
    b059:	66 0f 6f 85 30 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21d0]
    b061:	0f 29 85 a0 f7 ff ff 	movaps XMMWORD PTR [rbp-0x860],xmm0
    b068:	c7 85 c0 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2740],0xa
    b072:	66 0f 6f 8d a0 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x860]
    b07a:	66 0f 6e 85 c0 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2740]
    b082:	66 0f e2 c8          	psrad  xmm1,xmm0
    b086:	66 0f 6f c1          	movdqa xmm0,xmm1
    b08a:	0f 29 85 80 f7 ff ff 	movaps XMMWORD PTR [rbp-0x880],xmm0
    b091:	0f 29 95 90 f7 ff ff 	movaps XMMWORD PTR [rbp-0x870],xmm2
    b098:	66 0f 6f 8d 90 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x870]
    b0a0:	66 0f 6f 85 80 f7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x880]
    b0a8:	66 0f 6b c1          	packssdw xmm0,xmm1
    b0ac:	0f 29 85 40 da ff ff 	movaps XMMWORD PTR [rbp-0x25c0],xmm0
    b0b3:	66 0f 6f 85 60 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21a0]
    b0bb:	0f 29 85 70 f7 ff ff 	movaps XMMWORD PTR [rbp-0x890],xmm0
    b0c2:	c7 85 bc d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2744],0xa
    b0cc:	66 0f 6f 8d 70 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x890]
    b0d4:	66 0f 6e 85 bc d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2744]
    b0dc:	66 0f e2 c8          	psrad  xmm1,xmm0
    b0e0:	66 0f 6f d1          	movdqa xmm2,xmm1
    b0e4:	66 0f 6f 85 50 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x21b0]
    b0ec:	0f 29 85 60 f7 ff ff 	movaps XMMWORD PTR [rbp-0x8a0],xmm0
    b0f3:	c7 85 b8 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2748],0xa
    b0fd:	66 0f 6f 8d 60 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x8a0]
    b105:	66 0f 6e 85 b8 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2748]
    b10d:	66 0f e2 c8          	psrad  xmm1,xmm0
    b111:	66 0f 6f c1          	movdqa xmm0,xmm1
    b115:	0f 29 85 40 f7 ff ff 	movaps XMMWORD PTR [rbp-0x8c0],xmm0
    b11c:	0f 29 95 50 f7 ff ff 	movaps XMMWORD PTR [rbp-0x8b0],xmm2
    b123:	66 0f 6f 8d 50 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x8b0]
    b12b:	66 0f 6f 85 40 f7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x8c0]
    b133:	66 0f 6b c1          	packssdw xmm0,xmm1
    b137:	0f 29 85 90 da ff ff 	movaps XMMWORD PTR [rbp-0x2570],xmm0
    b13e:	66 0f 6f 85 d0 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2430]
    b146:	0f 29 85 20 f7 ff ff 	movaps XMMWORD PTR [rbp-0x8e0],xmm0
    b14d:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    b155:	0f 29 85 30 f7 ff ff 	movaps XMMWORD PTR [rbp-0x8d0],xmm0
    b15c:	66 0f 6f 8d 20 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x8e0]
    b164:	66 0f 6f 85 30 f7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x8d0]
    b16c:	66 0f fe c1          	paddd  xmm0,xmm1
    b170:	0f 29 85 70 de ff ff 	movaps XMMWORD PTR [rbp-0x2190],xmm0
    b177:	66 0f 6f 85 e0 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2420]
    b17f:	0f 29 85 00 f7 ff ff 	movaps XMMWORD PTR [rbp-0x900],xmm0
    b186:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    b18e:	0f 29 85 10 f7 ff ff 	movaps XMMWORD PTR [rbp-0x8f0],xmm0
    b195:	66 0f 6f 8d 00 f7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x900]
    b19d:	66 0f 6f 85 10 f7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x8f0]
    b1a5:	66 0f fe c1          	paddd  xmm0,xmm1
    b1a9:	0f 29 85 80 de ff ff 	movaps XMMWORD PTR [rbp-0x2180],xmm0
    b1b0:	66 0f 6f 85 70 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2190]
    b1b8:	0f 29 85 e0 f6 ff ff 	movaps XMMWORD PTR [rbp-0x920],xmm0
    b1bf:	66 0f 6f 85 50 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22b0]
    b1c7:	0f 29 85 f0 f6 ff ff 	movaps XMMWORD PTR [rbp-0x910],xmm0
    b1ce:	66 0f 6f 8d e0 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x920]
    b1d6:	66 0f 6f 85 f0 f6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x910]
    b1de:	66 0f fe c1          	paddd  xmm0,xmm1
    b1e2:	0f 29 85 90 de ff ff 	movaps XMMWORD PTR [rbp-0x2170],xmm0
    b1e9:	66 0f 6f 85 80 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2180]
    b1f1:	0f 29 85 c0 f6 ff ff 	movaps XMMWORD PTR [rbp-0x940],xmm0
    b1f8:	66 0f 6f 85 60 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22a0]
    b200:	0f 29 85 d0 f6 ff ff 	movaps XMMWORD PTR [rbp-0x930],xmm0
    b207:	66 0f 6f 8d c0 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x940]
    b20f:	66 0f 6f 85 d0 f6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x930]
    b217:	66 0f fe c1          	paddd  xmm0,xmm1
    b21b:	0f 29 85 a0 de ff ff 	movaps XMMWORD PTR [rbp-0x2160],xmm0
    b222:	66 0f 6f 85 70 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2190]
    b22a:	0f 29 85 a0 f6 ff ff 	movaps XMMWORD PTR [rbp-0x960],xmm0
    b231:	66 0f 6f 85 50 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22b0]
    b239:	0f 29 85 b0 f6 ff ff 	movaps XMMWORD PTR [rbp-0x950],xmm0
    b240:	66 0f 6f 85 a0 f6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x960]
    b248:	66 0f 6f 8d b0 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x950]
    b250:	66 0f fa c1          	psubd  xmm0,xmm1
    b254:	0f 29 85 b0 de ff ff 	movaps XMMWORD PTR [rbp-0x2150],xmm0
    b25b:	66 0f 6f 85 80 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2180]
    b263:	0f 29 85 80 f6 ff ff 	movaps XMMWORD PTR [rbp-0x980],xmm0
    b26a:	66 0f 6f 85 60 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22a0]
    b272:	0f 29 85 90 f6 ff ff 	movaps XMMWORD PTR [rbp-0x970],xmm0
    b279:	66 0f 6f 85 80 f6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x980]
    b281:	66 0f 6f 8d 90 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x970]
    b289:	66 0f fa c1          	psubd  xmm0,xmm1
    b28d:	0f 29 85 c0 de ff ff 	movaps XMMWORD PTR [rbp-0x2140],xmm0
    b294:	66 0f 6f 85 a0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2160]
    b29c:	0f 29 85 70 f6 ff ff 	movaps XMMWORD PTR [rbp-0x990],xmm0
    b2a3:	c7 85 b4 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x274c],0xa
    b2ad:	66 0f 6f 8d 70 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x990]
    b2b5:	66 0f 6e 85 b4 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x274c]
    b2bd:	66 0f e2 c8          	psrad  xmm1,xmm0
    b2c1:	66 0f 6f d1          	movdqa xmm2,xmm1
    b2c5:	66 0f 6f 85 90 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2170]
    b2cd:	0f 29 85 60 f6 ff ff 	movaps XMMWORD PTR [rbp-0x9a0],xmm0
    b2d4:	c7 85 b0 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2750],0xa
    b2de:	66 0f 6f 8d 60 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x9a0]
    b2e6:	66 0f 6e 85 b0 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2750]
    b2ee:	66 0f e2 c8          	psrad  xmm1,xmm0
    b2f2:	66 0f 6f c1          	movdqa xmm0,xmm1
    b2f6:	0f 29 85 40 f6 ff ff 	movaps XMMWORD PTR [rbp-0x9c0],xmm0
    b2fd:	0f 29 95 50 f6 ff ff 	movaps XMMWORD PTR [rbp-0x9b0],xmm2
    b304:	66 0f 6f 8d 50 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x9b0]
    b30c:	66 0f 6f 85 40 f6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x9c0]
    b314:	66 0f 6b c1          	packssdw xmm0,xmm1
    b318:	0f 29 85 50 da ff ff 	movaps XMMWORD PTR [rbp-0x25b0],xmm0
    b31f:	66 0f 6f 85 c0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2140]
    b327:	0f 29 85 30 f6 ff ff 	movaps XMMWORD PTR [rbp-0x9d0],xmm0
    b32e:	c7 85 ac d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2754],0xa
    b338:	66 0f 6f 8d 30 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x9d0]
    b340:	66 0f 6e 85 ac d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2754]
    b348:	66 0f e2 c8          	psrad  xmm1,xmm0
    b34c:	66 0f 6f d1          	movdqa xmm2,xmm1
    b350:	66 0f 6f 85 b0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2150]
    b358:	0f 29 85 20 f6 ff ff 	movaps XMMWORD PTR [rbp-0x9e0],xmm0
    b35f:	c7 85 a8 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2758],0xa
    b369:	66 0f 6f 8d 20 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x9e0]
    b371:	66 0f 6e 85 a8 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2758]
    b379:	66 0f e2 c8          	psrad  xmm1,xmm0
    b37d:	66 0f 6f c1          	movdqa xmm0,xmm1
    b381:	0f 29 85 00 f6 ff ff 	movaps XMMWORD PTR [rbp-0xa00],xmm0
    b388:	0f 29 95 10 f6 ff ff 	movaps XMMWORD PTR [rbp-0x9f0],xmm2
    b38f:	66 0f 6f 8d 10 f6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x9f0]
    b397:	66 0f 6f 85 00 f6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xa00]
    b39f:	66 0f 6b c1          	packssdw xmm0,xmm1
    b3a3:	0f 29 85 80 da ff ff 	movaps XMMWORD PTR [rbp-0x2580],xmm0
    b3aa:	66 0f 6f 85 90 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2470]
    b3b2:	0f 29 85 e0 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa20],xmm0
    b3b9:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    b3c1:	0f 29 85 f0 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa10],xmm0
    b3c8:	66 0f 6f 8d e0 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa20]
    b3d0:	66 0f 6f 85 f0 f5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xa10]
    b3d8:	66 0f fe c1          	paddd  xmm0,xmm1
    b3dc:	0f 29 85 d0 de ff ff 	movaps XMMWORD PTR [rbp-0x2130],xmm0
    b3e3:	66 0f 6f 85 a0 db ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2460]
    b3eb:	0f 29 85 c0 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa40],xmm0
    b3f2:	66 0f 6f 85 10 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25f0]
    b3fa:	0f 29 85 d0 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa30],xmm0
    b401:	66 0f 6f 8d c0 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa40]
    b409:	66 0f 6f 85 d0 f5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xa30]
    b411:	66 0f fe c1          	paddd  xmm0,xmm1
    b415:	0f 29 85 e0 de ff ff 	movaps XMMWORD PTR [rbp-0x2120],xmm0
    b41c:	66 0f 6f 85 d0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2130]
    b424:	0f 29 85 a0 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa60],xmm0
    b42b:	66 0f 6f 85 30 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22d0]
    b433:	0f 29 85 b0 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa50],xmm0
    b43a:	66 0f 6f 8d a0 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa60]
    b442:	66 0f 6f 85 b0 f5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xa50]
    b44a:	66 0f fe c1          	paddd  xmm0,xmm1
    b44e:	0f 29 85 f0 de ff ff 	movaps XMMWORD PTR [rbp-0x2110],xmm0
    b455:	66 0f 6f 85 e0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2120]
    b45d:	0f 29 85 80 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa80],xmm0
    b464:	66 0f 6f 85 40 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22c0]
    b46c:	0f 29 85 90 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa70],xmm0
    b473:	66 0f 6f 8d 80 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa80]
    b47b:	66 0f 6f 85 90 f5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xa70]
    b483:	66 0f fe c1          	paddd  xmm0,xmm1
    b487:	0f 29 85 00 df ff ff 	movaps XMMWORD PTR [rbp-0x2100],xmm0
    b48e:	66 0f 6f 85 d0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2130]
    b496:	0f 29 85 60 f5 ff ff 	movaps XMMWORD PTR [rbp-0xaa0],xmm0
    b49d:	66 0f 6f 85 30 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22d0]
    b4a5:	0f 29 85 70 f5 ff ff 	movaps XMMWORD PTR [rbp-0xa90],xmm0
    b4ac:	66 0f 6f 85 60 f5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xaa0]
    b4b4:	66 0f 6f 8d 70 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa90]
    b4bc:	66 0f fa c1          	psubd  xmm0,xmm1
    b4c0:	0f 29 85 10 df ff ff 	movaps XMMWORD PTR [rbp-0x20f0],xmm0
    b4c7:	66 0f 6f 85 e0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2120]
    b4cf:	0f 29 85 40 f5 ff ff 	movaps XMMWORD PTR [rbp-0xac0],xmm0
    b4d6:	66 0f 6f 85 40 dd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x22c0]
    b4de:	0f 29 85 50 f5 ff ff 	movaps XMMWORD PTR [rbp-0xab0],xmm0
    b4e5:	66 0f 6f 85 40 f5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xac0]
    b4ed:	66 0f 6f 8d 50 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xab0]
    b4f5:	66 0f fa c1          	psubd  xmm0,xmm1
    b4f9:	0f 29 85 20 df ff ff 	movaps XMMWORD PTR [rbp-0x20e0],xmm0
    b500:	66 0f 6f 85 00 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2100]
    b508:	0f 29 85 30 f5 ff ff 	movaps XMMWORD PTR [rbp-0xad0],xmm0
    b50f:	c7 85 a4 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x275c],0xa
    b519:	66 0f 6f 8d 30 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xad0]
    b521:	66 0f 6e 85 a4 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x275c]
    b529:	66 0f e2 c8          	psrad  xmm1,xmm0
    b52d:	66 0f 6f d1          	movdqa xmm2,xmm1
    b531:	66 0f 6f 85 f0 de ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2110]
    b539:	0f 29 85 20 f5 ff ff 	movaps XMMWORD PTR [rbp-0xae0],xmm0
    b540:	c7 85 a0 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2760],0xa
    b54a:	66 0f 6f 8d 20 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xae0]
    b552:	66 0f 6e 85 a0 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2760]
    b55a:	66 0f e2 c8          	psrad  xmm1,xmm0
    b55e:	66 0f 6f c1          	movdqa xmm0,xmm1
    b562:	0f 29 85 00 f5 ff ff 	movaps XMMWORD PTR [rbp-0xb00],xmm0
    b569:	0f 29 95 10 f5 ff ff 	movaps XMMWORD PTR [rbp-0xaf0],xmm2
    b570:	66 0f 6f 8d 10 f5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xaf0]
    b578:	66 0f 6f 85 00 f5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xb00]
    b580:	66 0f 6b c1          	packssdw xmm0,xmm1
    b584:	0f 29 85 60 da ff ff 	movaps XMMWORD PTR [rbp-0x25a0],xmm0
    b58b:	66 0f 6f 85 20 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20e0]
    b593:	0f 29 85 f0 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb10],xmm0
    b59a:	c7 85 9c d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2764],0xa
    b5a4:	66 0f 6f 8d f0 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xb10]
    b5ac:	66 0f 6e 85 9c d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2764]
    b5b4:	66 0f e2 c8          	psrad  xmm1,xmm0
    b5b8:	66 0f 6f d1          	movdqa xmm2,xmm1
    b5bc:	66 0f 6f 85 10 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20f0]
    b5c4:	0f 29 85 e0 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb20],xmm0
    b5cb:	c7 85 98 d8 ff ff 0a 00 00 00 	mov    DWORD PTR [rbp-0x2768],0xa
    b5d5:	66 0f 6f 8d e0 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xb20]
    b5dd:	66 0f 6e 85 98 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2768]
    b5e5:	66 0f e2 c8          	psrad  xmm1,xmm0
    b5e9:	66 0f 6f c1          	movdqa xmm0,xmm1
    b5ed:	0f 29 85 c0 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb40],xmm0
    b5f4:	0f 29 95 d0 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb30],xmm2
    b5fb:	66 0f 6f 8d d0 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xb30]
    b603:	66 0f 6f 85 c0 f4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xb40]
    b60b:	66 0f 6b c1          	packssdw xmm0,xmm1
    b60f:	0f 29 85 70 da ff ff 	movaps XMMWORD PTR [rbp-0x2590],xmm0
    b616:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    b61e:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b625:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    b62d:	0f 29 85 a0 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb60],xmm0
    b634:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    b63c:	0f 29 85 b0 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb50],xmm0
    b643:	66 0f 6f 8d b0 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xb50]
    b64b:	66 0f 6f 85 a0 f4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xb60]
    b653:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b657:	0f 29 85 30 da ff ff 	movaps XMMWORD PTR [rbp-0x25d0],xmm0
    b65e:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b666:	0f 29 85 80 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb80],xmm0
    b66d:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    b675:	0f 29 85 90 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb70],xmm0
    b67c:	66 0f 6f 8d 90 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xb70]
    b684:	66 0f 6f 85 80 f4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xb80]
    b68c:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b690:	0f 29 85 70 da ff ff 	movaps XMMWORD PTR [rbp-0x2590],xmm0
    b697:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    b69f:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b6a6:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    b6ae:	0f 29 85 60 f4 ff ff 	movaps XMMWORD PTR [rbp-0xba0],xmm0
    b6b5:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    b6bd:	0f 29 85 70 f4 ff ff 	movaps XMMWORD PTR [rbp-0xb90],xmm0
    b6c4:	66 0f 6f 8d 70 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xb90]
    b6cc:	66 0f 6f 85 60 f4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xba0]
    b6d4:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b6d8:	0f 29 85 40 da ff ff 	movaps XMMWORD PTR [rbp-0x25c0],xmm0
    b6df:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b6e7:	0f 29 85 40 f4 ff ff 	movaps XMMWORD PTR [rbp-0xbc0],xmm0
    b6ee:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    b6f6:	0f 29 85 50 f4 ff ff 	movaps XMMWORD PTR [rbp-0xbb0],xmm0
    b6fd:	66 0f 6f 8d 50 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xbb0]
    b705:	66 0f 6f 85 40 f4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xbc0]
    b70d:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b711:	0f 29 85 80 da ff ff 	movaps XMMWORD PTR [rbp-0x2580],xmm0
    b718:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    b720:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b727:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    b72f:	0f 29 85 20 f4 ff ff 	movaps XMMWORD PTR [rbp-0xbe0],xmm0
    b736:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    b73e:	0f 29 85 30 f4 ff ff 	movaps XMMWORD PTR [rbp-0xbd0],xmm0
    b745:	66 0f 6f 8d 30 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xbd0]
    b74d:	66 0f 6f 85 20 f4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xbe0]
    b755:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b759:	0f 29 85 50 da ff ff 	movaps XMMWORD PTR [rbp-0x25b0],xmm0
    b760:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b768:	0f 29 85 00 f4 ff ff 	movaps XMMWORD PTR [rbp-0xc00],xmm0
    b76f:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    b777:	0f 29 85 10 f4 ff ff 	movaps XMMWORD PTR [rbp-0xbf0],xmm0
    b77e:	66 0f 6f 8d 10 f4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xbf0]
    b786:	66 0f 6f 85 00 f4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xc00]
    b78e:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b792:	0f 29 85 90 da ff ff 	movaps XMMWORD PTR [rbp-0x2570],xmm0
    b799:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    b7a1:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b7a8:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    b7b0:	0f 29 85 e0 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc20],xmm0
    b7b7:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    b7bf:	0f 29 85 f0 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc10],xmm0
    b7c6:	66 0f 6f 8d f0 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xc10]
    b7ce:	66 0f 6f 85 e0 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xc20]
    b7d6:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b7da:	0f 29 85 60 da ff ff 	movaps XMMWORD PTR [rbp-0x25a0],xmm0
    b7e1:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b7e9:	0f 29 85 c0 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc40],xmm0
    b7f0:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    b7f8:	0f 29 85 d0 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc30],xmm0
    b7ff:	66 0f 6f 8d d0 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xc30]
    b807:	66 0f 6f 85 c0 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xc40]
    b80f:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b813:	0f 29 85 a0 da ff ff 	movaps XMMWORD PTR [rbp-0x2560],xmm0
    b81a:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    b822:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b829:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    b831:	0f 29 85 a0 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc60],xmm0
    b838:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    b840:	0f 29 85 b0 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc50],xmm0
    b847:	66 0f 6f 8d b0 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xc50]
    b84f:	66 0f 6f 85 a0 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xc60]
    b857:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b85b:	0f 29 85 30 da ff ff 	movaps XMMWORD PTR [rbp-0x25d0],xmm0
    b862:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b86a:	0f 29 85 80 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc80],xmm0
    b871:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    b879:	0f 29 85 90 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc70],xmm0
    b880:	66 0f 6f 8d 90 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xc70]
    b888:	66 0f 6f 85 80 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xc80]
    b890:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b894:	0f 29 85 50 da ff ff 	movaps XMMWORD PTR [rbp-0x25b0],xmm0
    b89b:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    b8a3:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b8aa:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    b8b2:	0f 29 85 60 f3 ff ff 	movaps XMMWORD PTR [rbp-0xca0],xmm0
    b8b9:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    b8c1:	0f 29 85 70 f3 ff ff 	movaps XMMWORD PTR [rbp-0xc90],xmm0
    b8c8:	66 0f 6f 8d 70 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xc90]
    b8d0:	66 0f 6f 85 60 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xca0]
    b8d8:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b8dc:	0f 29 85 40 da ff ff 	movaps XMMWORD PTR [rbp-0x25c0],xmm0
    b8e3:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b8eb:	0f 29 85 40 f3 ff ff 	movaps XMMWORD PTR [rbp-0xcc0],xmm0
    b8f2:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    b8fa:	0f 29 85 50 f3 ff ff 	movaps XMMWORD PTR [rbp-0xcb0],xmm0
    b901:	66 0f 6f 8d 50 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xcb0]
    b909:	66 0f 6f 85 40 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xcc0]
    b911:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b915:	0f 29 85 60 da ff ff 	movaps XMMWORD PTR [rbp-0x25a0],xmm0
    b91c:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    b924:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b92b:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    b933:	0f 29 85 20 f3 ff ff 	movaps XMMWORD PTR [rbp-0xce0],xmm0
    b93a:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    b942:	0f 29 85 30 f3 ff ff 	movaps XMMWORD PTR [rbp-0xcd0],xmm0
    b949:	66 0f 6f 8d 30 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xcd0]
    b951:	66 0f 6f 85 20 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xce0]
    b959:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b95d:	0f 29 85 70 da ff ff 	movaps XMMWORD PTR [rbp-0x2590],xmm0
    b964:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b96c:	0f 29 85 00 f3 ff ff 	movaps XMMWORD PTR [rbp-0xd00],xmm0
    b973:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    b97b:	0f 29 85 10 f3 ff ff 	movaps XMMWORD PTR [rbp-0xcf0],xmm0
    b982:	66 0f 6f 8d 10 f3 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xcf0]
    b98a:	66 0f 6f 85 00 f3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xd00]
    b992:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    b996:	0f 29 85 90 da ff ff 	movaps XMMWORD PTR [rbp-0x2570],xmm0
    b99d:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    b9a5:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    b9ac:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    b9b4:	0f 29 85 e0 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd20],xmm0
    b9bb:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    b9c3:	0f 29 85 f0 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd10],xmm0
    b9ca:	66 0f 6f 8d f0 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xd10]
    b9d2:	66 0f 6f 85 e0 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xd20]
    b9da:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    b9de:	0f 29 85 80 da ff ff 	movaps XMMWORD PTR [rbp-0x2580],xmm0
    b9e5:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    b9ed:	0f 29 85 c0 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd40],xmm0
    b9f4:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    b9fc:	0f 29 85 d0 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd30],xmm0
    ba03:	66 0f 6f 8d d0 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xd30]
    ba0b:	66 0f 6f 85 c0 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xd40]
    ba13:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    ba17:	0f 29 85 a0 da ff ff 	movaps XMMWORD PTR [rbp-0x2560],xmm0
    ba1e:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    ba26:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    ba2d:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    ba35:	0f 29 85 a0 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd60],xmm0
    ba3c:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    ba44:	0f 29 85 b0 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd50],xmm0
    ba4b:	66 0f 6f 8d b0 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xd50]
    ba53:	66 0f 6f 85 a0 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xd60]
    ba5b:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    ba5f:	0f 29 85 30 da ff ff 	movaps XMMWORD PTR [rbp-0x25d0],xmm0
    ba66:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    ba6e:	0f 29 85 80 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd80],xmm0
    ba75:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    ba7d:	0f 29 85 90 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd70],xmm0
    ba84:	66 0f 6f 8d 90 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xd70]
    ba8c:	66 0f 6f 85 80 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xd80]
    ba94:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    ba98:	0f 29 85 40 da ff ff 	movaps XMMWORD PTR [rbp-0x25c0],xmm0
    ba9f:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    baa7:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    baae:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    bab6:	0f 29 85 60 f2 ff ff 	movaps XMMWORD PTR [rbp-0xda0],xmm0
    babd:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    bac5:	0f 29 85 70 f2 ff ff 	movaps XMMWORD PTR [rbp-0xd90],xmm0
    bacc:	66 0f 6f 8d 70 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xd90]
    bad4:	66 0f 6f 85 60 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xda0]
    badc:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    bae0:	0f 29 85 50 da ff ff 	movaps XMMWORD PTR [rbp-0x25b0],xmm0
    bae7:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    baef:	0f 29 85 40 f2 ff ff 	movaps XMMWORD PTR [rbp-0xdc0],xmm0
    baf6:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    bafe:	0f 29 85 50 f2 ff ff 	movaps XMMWORD PTR [rbp-0xdb0],xmm0
    bb05:	66 0f 6f 8d 50 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xdb0]
    bb0d:	66 0f 6f 85 40 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xdc0]
    bb15:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    bb19:	0f 29 85 60 da ff ff 	movaps XMMWORD PTR [rbp-0x25a0],xmm0
    bb20:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    bb28:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    bb2f:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    bb37:	0f 29 85 20 f2 ff ff 	movaps XMMWORD PTR [rbp-0xde0],xmm0
    bb3e:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    bb46:	0f 29 85 30 f2 ff ff 	movaps XMMWORD PTR [rbp-0xdd0],xmm0
    bb4d:	66 0f 6f 8d 30 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xdd0]
    bb55:	66 0f 6f 85 20 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xde0]
    bb5d:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    bb61:	0f 29 85 70 da ff ff 	movaps XMMWORD PTR [rbp-0x2590],xmm0
    bb68:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    bb70:	0f 29 85 00 f2 ff ff 	movaps XMMWORD PTR [rbp-0xe00],xmm0
    bb77:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    bb7f:	0f 29 85 10 f2 ff ff 	movaps XMMWORD PTR [rbp-0xdf0],xmm0
    bb86:	66 0f 6f 8d 10 f2 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xdf0]
    bb8e:	66 0f 6f 85 00 f2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xe00]
    bb96:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    bb9a:	0f 29 85 80 da ff ff 	movaps XMMWORD PTR [rbp-0x2580],xmm0
    bba1:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    bba9:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    bbb0:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    bbb8:	0f 29 85 e0 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe20],xmm0
    bbbf:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    bbc7:	0f 29 85 f0 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe10],xmm0
    bbce:	66 0f 6f 8d f0 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xe10]
    bbd6:	66 0f 6f 85 e0 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xe20]
    bbde:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    bbe2:	0f 29 85 90 da ff ff 	movaps XMMWORD PTR [rbp-0x2570],xmm0
    bbe9:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    bbf1:	0f 29 85 c0 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe40],xmm0
    bbf8:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    bc00:	0f 29 85 d0 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe30],xmm0
    bc07:	66 0f 6f 8d d0 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xe30]
    bc0f:	66 0f 6f 85 c0 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xe40]
    bc17:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    bc1b:	0f 29 85 a0 da ff ff 	movaps XMMWORD PTR [rbp-0x2560],xmm0
    bc22:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    bc2a:	0f 29 85 a0 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe60],xmm0
    bc31:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    bc39:	0f 29 85 b0 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe50],xmm0
    bc40:	66 0f 6f 8d b0 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xe50]
    bc48:	66 0f 6f 85 a0 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xe60]
    bc50:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    bc54:	0f 29 85 40 df ff ff 	movaps XMMWORD PTR [rbp-0x20c0],xmm0
    bc5b:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    bc63:	0f 29 85 80 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe80],xmm0
    bc6a:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    bc72:	0f 29 85 90 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe70],xmm0
    bc79:	66 0f 6f 8d 90 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xe70]
    bc81:	66 0f 6f 85 80 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xe80]
    bc89:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    bc8d:	0f 29 85 50 df ff ff 	movaps XMMWORD PTR [rbp-0x20b0],xmm0
    bc94:	66 0f 6f 85 40 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20c0]
    bc9c:	0f 29 85 60 f1 ff ff 	movaps XMMWORD PTR [rbp-0xea0],xmm0
    bca3:	66 0f 6f 85 90 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2670]
    bcab:	0f 29 85 70 f1 ff ff 	movaps XMMWORD PTR [rbp-0xe90],xmm0
    bcb2:	66 0f 6f 85 70 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xe90]
    bcba:	66 0f 6f 8d 60 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xea0]
    bcc2:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    bcc6:	0f 29 85 60 df ff ff 	movaps XMMWORD PTR [rbp-0x20a0],xmm0
    bccd:	66 0f 6f 85 50 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20b0]
    bcd5:	0f 29 85 40 f1 ff ff 	movaps XMMWORD PTR [rbp-0xec0],xmm0
    bcdc:	66 0f 6f 85 90 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2670]
    bce4:	0f 29 85 50 f1 ff ff 	movaps XMMWORD PTR [rbp-0xeb0],xmm0
    bceb:	66 0f 6f 85 50 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xeb0]
    bcf3:	66 0f 6f 8d 40 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xec0]
    bcfb:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    bcff:	0f 29 85 70 df ff ff 	movaps XMMWORD PTR [rbp-0x2090],xmm0
    bd06:	66 0f 6f 85 40 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20c0]
    bd0e:	0f 29 85 20 f1 ff ff 	movaps XMMWORD PTR [rbp-0xee0],xmm0
    bd15:	66 0f 6f 85 a0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2660]
    bd1d:	0f 29 85 30 f1 ff ff 	movaps XMMWORD PTR [rbp-0xed0],xmm0
    bd24:	66 0f 6f 85 30 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xed0]
    bd2c:	66 0f 6f 8d 20 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xee0]
    bd34:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    bd38:	0f 29 85 80 df ff ff 	movaps XMMWORD PTR [rbp-0x2080],xmm0
    bd3f:	66 0f 6f 85 50 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20b0]
    bd47:	0f 29 85 00 f1 ff ff 	movaps XMMWORD PTR [rbp-0xf00],xmm0
    bd4e:	66 0f 6f 85 a0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2660]
    bd56:	0f 29 85 10 f1 ff ff 	movaps XMMWORD PTR [rbp-0xef0],xmm0
    bd5d:	66 0f 6f 85 10 f1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xef0]
    bd65:	66 0f 6f 8d 00 f1 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xf00]
    bd6d:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    bd71:	0f 29 85 90 df ff ff 	movaps XMMWORD PTR [rbp-0x2070],xmm0
    bd78:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    bd80:	0f 29 85 e0 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf20],xmm0
    bd87:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    bd8f:	0f 29 85 f0 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf10],xmm0
    bd96:	66 0f 6f 8d e0 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xf20]
    bd9e:	66 0f 6f 85 f0 f0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xf10]
    bda6:	66 0f fd c1          	paddw  xmm0,xmm1
    bdaa:	0f 29 85 a0 df ff ff 	movaps XMMWORD PTR [rbp-0x2060],xmm0
    bdb1:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    bdb9:	0f 29 85 c0 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf40],xmm0
    bdc0:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    bdc8:	0f 29 85 d0 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf30],xmm0
    bdcf:	66 0f 6f 85 c0 f0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xf40]
    bdd7:	66 0f 6f 8d d0 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xf30]
    bddf:	66 0f f9 c1          	psubw  xmm0,xmm1
    bde3:	0f 29 85 b0 df ff ff 	movaps XMMWORD PTR [rbp-0x2050],xmm0
    bdea:	66 0f ef c0          	pxor   xmm0,xmm0
    bdee:	0f 29 85 a0 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf60],xmm0
    bdf5:	66 0f 6f 85 a0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2060]
    bdfd:	0f 29 85 b0 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf50],xmm0
    be04:	66 0f 6f 8d b0 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xf50]
    be0c:	66 0f 6f 85 a0 f0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xf60]
    be14:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    be18:	0f 29 85 90 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf70],xmm0
    be1f:	c7 85 94 d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x276c],0x4
    be29:	66 0f 6f 8d 90 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xf70]
    be31:	66 0f 6e 85 94 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x276c]
    be39:	66 0f e2 c8          	psrad  xmm1,xmm0
    be3d:	66 0f 6f c1          	movdqa xmm0,xmm1
    be41:	0f 29 85 c0 df ff ff 	movaps XMMWORD PTR [rbp-0x2040],xmm0
    be48:	66 0f ef c0          	pxor   xmm0,xmm0
    be4c:	0f 29 85 70 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf90],xmm0
    be53:	66 0f 6f 85 a0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2060]
    be5b:	0f 29 85 80 f0 ff ff 	movaps XMMWORD PTR [rbp-0xf80],xmm0
    be62:	66 0f 6f 8d 80 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xf80]
    be6a:	66 0f 6f 85 70 f0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xf90]
    be72:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    be76:	0f 29 85 60 f0 ff ff 	movaps XMMWORD PTR [rbp-0xfa0],xmm0
    be7d:	c7 85 90 d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x2770],0x4
    be87:	66 0f 6f 8d 60 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xfa0]
    be8f:	66 0f 6e 85 90 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2770]
    be97:	66 0f e2 c8          	psrad  xmm1,xmm0
    be9b:	66 0f 6f c1          	movdqa xmm0,xmm1
    be9f:	0f 29 85 d0 df ff ff 	movaps XMMWORD PTR [rbp-0x2030],xmm0
    bea6:	66 0f ef c0          	pxor   xmm0,xmm0
    beaa:	0f 29 85 40 f0 ff ff 	movaps XMMWORD PTR [rbp-0xfc0],xmm0
    beb1:	66 0f 6f 85 b0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2050]
    beb9:	0f 29 85 50 f0 ff ff 	movaps XMMWORD PTR [rbp-0xfb0],xmm0
    bec0:	66 0f 6f 8d 50 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xfb0]
    bec8:	66 0f 6f 85 40 f0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xfc0]
    bed0:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    bed4:	0f 29 85 30 f0 ff ff 	movaps XMMWORD PTR [rbp-0xfd0],xmm0
    bedb:	c7 85 8c d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x2774],0x4
    bee5:	66 0f 6f 8d 30 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xfd0]
    beed:	66 0f 6e 85 8c d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2774]
    bef5:	66 0f e2 c8          	psrad  xmm1,xmm0
    bef9:	66 0f 6f c1          	movdqa xmm0,xmm1
    befd:	0f 29 85 e0 df ff ff 	movaps XMMWORD PTR [rbp-0x2020],xmm0
    bf04:	66 0f ef c0          	pxor   xmm0,xmm0
    bf08:	0f 29 85 10 f0 ff ff 	movaps XMMWORD PTR [rbp-0xff0],xmm0
    bf0f:	66 0f 6f 85 b0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2050]
    bf17:	0f 29 85 20 f0 ff ff 	movaps XMMWORD PTR [rbp-0xfe0],xmm0
    bf1e:	66 0f 6f 8d 20 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xfe0]
    bf26:	66 0f 6f 85 10 f0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xff0]
    bf2e:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    bf32:	0f 29 85 00 f0 ff ff 	movaps XMMWORD PTR [rbp-0x1000],xmm0
    bf39:	c7 85 88 d8 ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x2778],0x4
    bf43:	66 0f 6f 8d 00 f0 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1000]
    bf4b:	66 0f 6e 85 88 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2778]
    bf53:	66 0f e2 c8          	psrad  xmm1,xmm0
    bf57:	66 0f 6f c1          	movdqa xmm0,xmm1
    bf5b:	0f 29 85 f0 df ff ff 	movaps XMMWORD PTR [rbp-0x2010],xmm0
    bf62:	66 0f 6f 85 c0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2040]
    bf6a:	0f 29 85 e0 ef ff ff 	movaps XMMWORD PTR [rbp-0x1020],xmm0
    bf71:	66 0f 6f 85 80 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2080]
    bf79:	0f 29 85 f0 ef ff ff 	movaps XMMWORD PTR [rbp-0x1010],xmm0
    bf80:	66 0f 6f 8d e0 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1020]
    bf88:	66 0f 6f 85 f0 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1010]
    bf90:	66 0f fe c1          	paddd  xmm0,xmm1
    bf94:	0f 29 85 00 e0 ff ff 	movaps XMMWORD PTR [rbp-0x2000],xmm0
    bf9b:	66 0f 6f 85 d0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2030]
    bfa3:	0f 29 85 c0 ef ff ff 	movaps XMMWORD PTR [rbp-0x1040],xmm0
    bfaa:	66 0f 6f 85 90 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2070]
    bfb2:	0f 29 85 d0 ef ff ff 	movaps XMMWORD PTR [rbp-0x1030],xmm0
    bfb9:	66 0f 6f 8d c0 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1040]
    bfc1:	66 0f 6f 85 d0 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1030]
    bfc9:	66 0f fe c1          	paddd  xmm0,xmm1
    bfcd:	0f 29 85 10 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1ff0],xmm0
    bfd4:	66 0f 6f 85 c0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2040]
    bfdc:	0f 29 85 a0 ef ff ff 	movaps XMMWORD PTR [rbp-0x1060],xmm0
    bfe3:	66 0f 6f 85 80 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2080]
    bfeb:	0f 29 85 b0 ef ff ff 	movaps XMMWORD PTR [rbp-0x1050],xmm0
    bff2:	66 0f 6f 85 a0 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1060]
    bffa:	66 0f 6f 8d b0 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1050]
    c002:	66 0f fa c1          	psubd  xmm0,xmm1
    c006:	0f 29 85 20 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1fe0],xmm0
    c00d:	66 0f 6f 85 d0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2030]
    c015:	0f 29 85 80 ef ff ff 	movaps XMMWORD PTR [rbp-0x1080],xmm0
    c01c:	66 0f 6f 85 90 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2070]
    c024:	0f 29 85 90 ef ff ff 	movaps XMMWORD PTR [rbp-0x1070],xmm0
    c02b:	66 0f 6f 85 80 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1080]
    c033:	66 0f 6f 8d 90 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1070]
    c03b:	66 0f fa c1          	psubd  xmm0,xmm1
    c03f:	0f 29 85 30 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1fd0],xmm0
    c046:	66 0f 6f 85 e0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2020]
    c04e:	0f 29 85 60 ef ff ff 	movaps XMMWORD PTR [rbp-0x10a0],xmm0
    c055:	66 0f 6f 85 60 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20a0]
    c05d:	0f 29 85 70 ef ff ff 	movaps XMMWORD PTR [rbp-0x1090],xmm0
    c064:	66 0f 6f 8d 60 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x10a0]
    c06c:	66 0f 6f 85 70 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1090]
    c074:	66 0f fe c1          	paddd  xmm0,xmm1
    c078:	0f 29 85 40 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1fc0],xmm0
    c07f:	66 0f 6f 85 f0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2010]
    c087:	0f 29 85 40 ef ff ff 	movaps XMMWORD PTR [rbp-0x10c0],xmm0
    c08e:	66 0f 6f 85 70 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2090]
    c096:	0f 29 85 50 ef ff ff 	movaps XMMWORD PTR [rbp-0x10b0],xmm0
    c09d:	66 0f 6f 8d 40 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x10c0]
    c0a5:	66 0f 6f 85 50 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x10b0]
    c0ad:	66 0f fe c1          	paddd  xmm0,xmm1
    c0b1:	0f 29 85 50 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1fb0],xmm0
    c0b8:	66 0f 6f 85 e0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2020]
    c0c0:	0f 29 85 20 ef ff ff 	movaps XMMWORD PTR [rbp-0x10e0],xmm0
    c0c7:	66 0f 6f 85 60 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20a0]
    c0cf:	0f 29 85 30 ef ff ff 	movaps XMMWORD PTR [rbp-0x10d0],xmm0
    c0d6:	66 0f 6f 85 20 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x10e0]
    c0de:	66 0f 6f 8d 30 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x10d0]
    c0e6:	66 0f fa c1          	psubd  xmm0,xmm1
    c0ea:	0f 29 85 60 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1fa0],xmm0
    c0f1:	66 0f 6f 85 f0 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2010]
    c0f9:	0f 29 85 00 ef ff ff 	movaps XMMWORD PTR [rbp-0x1100],xmm0
    c100:	66 0f 6f 85 70 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2090]
    c108:	0f 29 85 10 ef ff ff 	movaps XMMWORD PTR [rbp-0x10f0],xmm0
    c10f:	66 0f 6f 85 00 ef ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1100]
    c117:	66 0f 6f 8d 10 ef ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x10f0]
    c11f:	66 0f fa c1          	psubd  xmm0,xmm1
    c123:	0f 29 85 70 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f90],xmm0
    c12a:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    c132:	0f 29 85 e0 ee ff ff 	movaps XMMWORD PTR [rbp-0x1120],xmm0
    c139:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    c141:	0f 29 85 f0 ee ff ff 	movaps XMMWORD PTR [rbp-0x1110],xmm0
    c148:	66 0f 6f 8d f0 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1110]
    c150:	66 0f 6f 85 e0 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1120]
    c158:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    c15c:	0f 29 85 80 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f80],xmm0
    c163:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    c16b:	0f 29 85 c0 ee ff ff 	movaps XMMWORD PTR [rbp-0x1140],xmm0
    c172:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    c17a:	0f 29 85 d0 ee ff ff 	movaps XMMWORD PTR [rbp-0x1130],xmm0
    c181:	66 0f 6f 8d d0 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1130]
    c189:	66 0f 6f 85 c0 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1140]
    c191:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    c195:	0f 29 85 90 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f70],xmm0
    c19c:	66 0f 6f 85 80 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f80]
    c1a4:	0f 29 85 a0 ee ff ff 	movaps XMMWORD PTR [rbp-0x1160],xmm0
    c1ab:	66 0f 6f 85 d0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2630]
    c1b3:	0f 29 85 b0 ee ff ff 	movaps XMMWORD PTR [rbp-0x1150],xmm0
    c1ba:	66 0f 6f 85 b0 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1150]
    c1c2:	66 0f 6f 8d a0 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1160]
    c1ca:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c1ce:	0f 29 85 a0 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f60],xmm0
    c1d5:	66 0f 6f 85 90 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f70]
    c1dd:	0f 29 85 80 ee ff ff 	movaps XMMWORD PTR [rbp-0x1180],xmm0
    c1e4:	66 0f 6f 85 d0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2630]
    c1ec:	0f 29 85 90 ee ff ff 	movaps XMMWORD PTR [rbp-0x1170],xmm0
    c1f3:	66 0f 6f 85 90 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1170]
    c1fb:	66 0f 6f 8d 80 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1180]
    c203:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c207:	0f 29 85 b0 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f50],xmm0
    c20e:	66 0f 6f 85 80 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f80]
    c216:	0f 29 85 60 ee ff ff 	movaps XMMWORD PTR [rbp-0x11a0],xmm0
    c21d:	66 0f 6f 85 e0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2620]
    c225:	0f 29 85 70 ee ff ff 	movaps XMMWORD PTR [rbp-0x1190],xmm0
    c22c:	66 0f 6f 85 70 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1190]
    c234:	66 0f 6f 8d 60 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x11a0]
    c23c:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c240:	0f 29 85 c0 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f40],xmm0
    c247:	66 0f 6f 85 90 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f70]
    c24f:	0f 29 85 40 ee ff ff 	movaps XMMWORD PTR [rbp-0x11c0],xmm0
    c256:	66 0f 6f 85 e0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2620]
    c25e:	0f 29 85 50 ee ff ff 	movaps XMMWORD PTR [rbp-0x11b0],xmm0
    c265:	66 0f 6f 85 50 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x11b0]
    c26d:	66 0f 6f 8d 40 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x11c0]
    c275:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c279:	0f 29 85 d0 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f30],xmm0
    c280:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    c288:	0f 29 85 20 ee ff ff 	movaps XMMWORD PTR [rbp-0x11e0],xmm0
    c28f:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    c297:	0f 29 85 30 ee ff ff 	movaps XMMWORD PTR [rbp-0x11d0],xmm0
    c29e:	66 0f 6f 8d 30 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x11d0]
    c2a6:	66 0f 6f 85 20 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x11e0]
    c2ae:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    c2b2:	0f 29 85 e0 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f20],xmm0
    c2b9:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    c2c1:	0f 29 85 00 ee ff ff 	movaps XMMWORD PTR [rbp-0x1200],xmm0
    c2c8:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    c2d0:	0f 29 85 10 ee ff ff 	movaps XMMWORD PTR [rbp-0x11f0],xmm0
    c2d7:	66 0f 6f 8d 10 ee ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x11f0]
    c2df:	66 0f 6f 85 00 ee ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1200]
    c2e7:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    c2eb:	0f 29 85 f0 e0 ff ff 	movaps XMMWORD PTR [rbp-0x1f10],xmm0
    c2f2:	66 0f 6f 85 e0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f20]
    c2fa:	0f 29 85 e0 ed ff ff 	movaps XMMWORD PTR [rbp-0x1220],xmm0
    c301:	66 0f 6f 85 f0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2610]
    c309:	0f 29 85 f0 ed ff ff 	movaps XMMWORD PTR [rbp-0x1210],xmm0
    c310:	66 0f 6f 85 f0 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1210]
    c318:	66 0f 6f 8d e0 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1220]
    c320:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c324:	0f 29 85 00 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1f00],xmm0
    c32b:	66 0f 6f 85 f0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f10]
    c333:	0f 29 85 c0 ed ff ff 	movaps XMMWORD PTR [rbp-0x1240],xmm0
    c33a:	66 0f 6f 85 f0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2610]
    c342:	0f 29 85 d0 ed ff ff 	movaps XMMWORD PTR [rbp-0x1230],xmm0
    c349:	66 0f 6f 85 d0 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1230]
    c351:	66 0f 6f 8d c0 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1240]
    c359:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c35d:	0f 29 85 10 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1ef0],xmm0
    c364:	66 0f 6f 85 e0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f20]
    c36c:	0f 29 85 a0 ed ff ff 	movaps XMMWORD PTR [rbp-0x1260],xmm0
    c373:	66 0f 6f 85 00 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2600]
    c37b:	0f 29 85 b0 ed ff ff 	movaps XMMWORD PTR [rbp-0x1250],xmm0
    c382:	66 0f 6f 85 b0 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1250]
    c38a:	66 0f 6f 8d a0 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1260]
    c392:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c396:	0f 29 85 20 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1ee0],xmm0
    c39d:	66 0f 6f 85 f0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f10]
    c3a5:	0f 29 85 80 ed ff ff 	movaps XMMWORD PTR [rbp-0x1280],xmm0
    c3ac:	66 0f 6f 85 00 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2600]
    c3b4:	0f 29 85 90 ed ff ff 	movaps XMMWORD PTR [rbp-0x1270],xmm0
    c3bb:	66 0f 6f 85 90 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1270]
    c3c3:	66 0f 6f 8d 80 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1280]
    c3cb:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c3cf:	0f 29 85 30 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1ed0],xmm0
    c3d6:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    c3de:	0f 29 85 60 ed ff ff 	movaps XMMWORD PTR [rbp-0x12a0],xmm0
    c3e5:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    c3ed:	0f 29 85 70 ed ff ff 	movaps XMMWORD PTR [rbp-0x1290],xmm0
    c3f4:	66 0f 6f 8d 60 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x12a0]
    c3fc:	66 0f 6f 85 70 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1290]
    c404:	66 0f fd c1          	paddw  xmm0,xmm1
    c408:	0f 29 85 40 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1ec0],xmm0
    c40f:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    c417:	0f 29 85 40 ed ff ff 	movaps XMMWORD PTR [rbp-0x12c0],xmm0
    c41e:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    c426:	0f 29 85 50 ed ff ff 	movaps XMMWORD PTR [rbp-0x12b0],xmm0
    c42d:	66 0f 6f 8d 40 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x12c0]
    c435:	66 0f 6f 85 50 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x12b0]
    c43d:	66 0f fd c1          	paddw  xmm0,xmm1
    c441:	0f 29 85 50 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1eb0],xmm0
    c448:	66 0f 6f 85 40 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ec0]
    c450:	0f 29 85 20 ed ff ff 	movaps XMMWORD PTR [rbp-0x12e0],xmm0
    c457:	66 0f 6f 85 50 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1eb0]
    c45f:	0f 29 85 30 ed ff ff 	movaps XMMWORD PTR [rbp-0x12d0],xmm0
    c466:	66 0f 6f 8d 30 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x12d0]
    c46e:	66 0f 6f 85 20 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x12e0]
    c476:	66 0f 61 c1          	punpcklwd xmm0,xmm1
    c47a:	0f 29 85 60 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1ea0],xmm0
    c481:	66 0f 6f 85 40 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ec0]
    c489:	0f 29 85 00 ed ff ff 	movaps XMMWORD PTR [rbp-0x1300],xmm0
    c490:	66 0f 6f 85 50 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1eb0]
    c498:	0f 29 85 10 ed ff ff 	movaps XMMWORD PTR [rbp-0x12f0],xmm0
    c49f:	66 0f 6f 8d 10 ed ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x12f0]
    c4a7:	66 0f 6f 85 00 ed ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1300]
    c4af:	66 0f 69 c1          	punpckhwd xmm0,xmm1
    c4b3:	0f 29 85 70 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e90],xmm0
    c4ba:	66 0f 6f 85 60 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ea0]
    c4c2:	0f 29 85 e0 ec ff ff 	movaps XMMWORD PTR [rbp-0x1320],xmm0
    c4c9:	66 0f 6f 85 b0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2650]
    c4d1:	0f 29 85 f0 ec ff ff 	movaps XMMWORD PTR [rbp-0x1310],xmm0
    c4d8:	66 0f 6f 85 f0 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1310]
    c4e0:	66 0f 6f 8d e0 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1320]
    c4e8:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c4ec:	0f 29 85 80 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e80],xmm0
    c4f3:	66 0f 6f 85 70 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e90]
    c4fb:	0f 29 85 c0 ec ff ff 	movaps XMMWORD PTR [rbp-0x1340],xmm0
    c502:	66 0f 6f 85 b0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2650]
    c50a:	0f 29 85 d0 ec ff ff 	movaps XMMWORD PTR [rbp-0x1330],xmm0
    c511:	66 0f 6f 85 d0 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1330]
    c519:	66 0f 6f 8d c0 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1340]
    c521:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c525:	0f 29 85 90 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e70],xmm0
    c52c:	66 0f 6f 85 60 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ea0]
    c534:	0f 29 85 a0 ec ff ff 	movaps XMMWORD PTR [rbp-0x1360],xmm0
    c53b:	66 0f 6f 85 c0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2640]
    c543:	0f 29 85 b0 ec ff ff 	movaps XMMWORD PTR [rbp-0x1350],xmm0
    c54a:	66 0f 6f 85 b0 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1350]
    c552:	66 0f 6f 8d a0 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1360]
    c55a:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c55e:	0f 29 85 a0 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e60],xmm0
    c565:	66 0f 6f 85 70 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e90]
    c56d:	0f 29 85 80 ec ff ff 	movaps XMMWORD PTR [rbp-0x1380],xmm0
    c574:	66 0f 6f 85 c0 d9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2640]
    c57c:	0f 29 85 90 ec ff ff 	movaps XMMWORD PTR [rbp-0x1370],xmm0
    c583:	66 0f 6f 85 90 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1370]
    c58b:	66 0f 6f 8d 80 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1380]
    c593:	66 0f f5 c1          	pmaddwd xmm0,xmm1
    c597:	0f 29 85 b0 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e50],xmm0
    c59e:	66 0f 6f 85 a0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f60]
    c5a6:	0f 29 85 60 ec ff ff 	movaps XMMWORD PTR [rbp-0x13a0],xmm0
    c5ad:	66 0f 6f 85 80 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e80]
    c5b5:	0f 29 85 70 ec ff ff 	movaps XMMWORD PTR [rbp-0x1390],xmm0
    c5bc:	66 0f 6f 8d 60 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x13a0]
    c5c4:	66 0f 6f 85 70 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1390]
    c5cc:	66 0f fe c1          	paddd  xmm0,xmm1
    c5d0:	0f 29 85 c0 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e40],xmm0
    c5d7:	66 0f 6f 85 b0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f50]
    c5df:	0f 29 85 40 ec ff ff 	movaps XMMWORD PTR [rbp-0x13c0],xmm0
    c5e6:	66 0f 6f 85 90 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e70]
    c5ee:	0f 29 85 50 ec ff ff 	movaps XMMWORD PTR [rbp-0x13b0],xmm0
    c5f5:	66 0f 6f 8d 40 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x13c0]
    c5fd:	66 0f 6f 85 50 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x13b0]
    c605:	66 0f fe c1          	paddd  xmm0,xmm1
    c609:	0f 29 85 d0 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e30],xmm0
    c610:	66 0f 6f 85 00 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f00]
    c618:	0f 29 85 20 ec ff ff 	movaps XMMWORD PTR [rbp-0x13e0],xmm0
    c61f:	66 0f 6f 85 a0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e60]
    c627:	0f 29 85 30 ec ff ff 	movaps XMMWORD PTR [rbp-0x13d0],xmm0
    c62e:	66 0f 6f 8d 20 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x13e0]
    c636:	66 0f 6f 85 30 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x13d0]
    c63e:	66 0f fe c1          	paddd  xmm0,xmm1
    c642:	0f 29 85 e0 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e20],xmm0
    c649:	66 0f 6f 85 10 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ef0]
    c651:	0f 29 85 00 ec ff ff 	movaps XMMWORD PTR [rbp-0x1400],xmm0
    c658:	66 0f 6f 85 b0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e50]
    c660:	0f 29 85 10 ec ff ff 	movaps XMMWORD PTR [rbp-0x13f0],xmm0
    c667:	66 0f 6f 8d 00 ec ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1400]
    c66f:	66 0f 6f 85 10 ec ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x13f0]
    c677:	66 0f fe c1          	paddd  xmm0,xmm1
    c67b:	0f 29 85 f0 e1 ff ff 	movaps XMMWORD PTR [rbp-0x1e10],xmm0
    c682:	66 0f 6f 85 c0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f40]
    c68a:	0f 29 85 e0 eb ff ff 	movaps XMMWORD PTR [rbp-0x1420],xmm0
    c691:	66 0f 6f 85 a0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e60]
    c699:	0f 29 85 f0 eb ff ff 	movaps XMMWORD PTR [rbp-0x1410],xmm0
    c6a0:	66 0f 6f 8d e0 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1420]
    c6a8:	66 0f 6f 85 f0 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1410]
    c6b0:	66 0f fe c1          	paddd  xmm0,xmm1
    c6b4:	0f 29 85 00 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1e00],xmm0
    c6bb:	66 0f 6f 85 d0 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f30]
    c6c3:	0f 29 85 c0 eb ff ff 	movaps XMMWORD PTR [rbp-0x1440],xmm0
    c6ca:	66 0f 6f 85 b0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e50]
    c6d2:	0f 29 85 d0 eb ff ff 	movaps XMMWORD PTR [rbp-0x1430],xmm0
    c6d9:	66 0f 6f 8d c0 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1440]
    c6e1:	66 0f 6f 85 d0 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1430]
    c6e9:	66 0f fe c1          	paddd  xmm0,xmm1
    c6ed:	0f 29 85 10 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1df0],xmm0
    c6f4:	66 0f 6f 85 20 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ee0]
    c6fc:	0f 29 85 a0 eb ff ff 	movaps XMMWORD PTR [rbp-0x1460],xmm0
    c703:	66 0f 6f 85 80 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e80]
    c70b:	0f 29 85 b0 eb ff ff 	movaps XMMWORD PTR [rbp-0x1450],xmm0
    c712:	66 0f 6f 8d a0 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1460]
    c71a:	66 0f 6f 85 b0 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1450]
    c722:	66 0f fe c1          	paddd  xmm0,xmm1
    c726:	0f 29 85 20 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1de0],xmm0
    c72d:	66 0f 6f 85 30 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ed0]
    c735:	0f 29 85 80 eb ff ff 	movaps XMMWORD PTR [rbp-0x1480],xmm0
    c73c:	66 0f 6f 85 90 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e70]
    c744:	0f 29 85 90 eb ff ff 	movaps XMMWORD PTR [rbp-0x1470],xmm0
    c74b:	66 0f 6f 8d 80 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1480]
    c753:	66 0f 6f 85 90 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1470]
    c75b:	66 0f fe c1          	paddd  xmm0,xmm1
    c75f:	0f 29 85 30 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1dd0],xmm0
    c766:	66 0f 6f 85 00 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2000]
    c76e:	0f 29 85 60 eb ff ff 	movaps XMMWORD PTR [rbp-0x14a0],xmm0
    c775:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    c77d:	0f 29 85 70 eb ff ff 	movaps XMMWORD PTR [rbp-0x1490],xmm0
    c784:	66 0f 6f 8d 60 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x14a0]
    c78c:	66 0f 6f 85 70 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1490]
    c794:	66 0f fe c1          	paddd  xmm0,xmm1
    c798:	0f 29 85 40 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1dc0],xmm0
    c79f:	66 0f 6f 85 10 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ff0]
    c7a7:	0f 29 85 40 eb ff ff 	movaps XMMWORD PTR [rbp-0x14c0],xmm0
    c7ae:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    c7b6:	0f 29 85 50 eb ff ff 	movaps XMMWORD PTR [rbp-0x14b0],xmm0
    c7bd:	66 0f 6f 8d 40 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x14c0]
    c7c5:	66 0f 6f 85 50 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x14b0]
    c7cd:	66 0f fe c1          	paddd  xmm0,xmm1
    c7d1:	0f 29 85 50 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1db0],xmm0
    c7d8:	66 0f 6f 85 40 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1dc0]
    c7e0:	0f 29 85 20 eb ff ff 	movaps XMMWORD PTR [rbp-0x14e0],xmm0
    c7e7:	66 0f 6f 85 20 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1de0]
    c7ef:	0f 29 85 30 eb ff ff 	movaps XMMWORD PTR [rbp-0x14d0],xmm0
    c7f6:	66 0f 6f 8d 20 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x14e0]
    c7fe:	66 0f 6f 85 30 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x14d0]
    c806:	66 0f fe c1          	paddd  xmm0,xmm1
    c80a:	0f 29 85 60 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1da0],xmm0
    c811:	66 0f 6f 85 50 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1db0]
    c819:	0f 29 85 00 eb ff ff 	movaps XMMWORD PTR [rbp-0x1500],xmm0
    c820:	66 0f 6f 85 30 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1dd0]
    c828:	0f 29 85 10 eb ff ff 	movaps XMMWORD PTR [rbp-0x14f0],xmm0
    c82f:	66 0f 6f 8d 00 eb ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1500]
    c837:	66 0f 6f 85 10 eb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x14f0]
    c83f:	66 0f fe c1          	paddd  xmm0,xmm1
    c843:	0f 29 85 70 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d90],xmm0
    c84a:	66 0f 6f 85 40 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1dc0]
    c852:	0f 29 85 e0 ea ff ff 	movaps XMMWORD PTR [rbp-0x1520],xmm0
    c859:	66 0f 6f 85 20 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1de0]
    c861:	0f 29 85 f0 ea ff ff 	movaps XMMWORD PTR [rbp-0x1510],xmm0
    c868:	66 0f 6f 85 e0 ea ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1520]
    c870:	66 0f 6f 8d f0 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1510]
    c878:	66 0f fa c1          	psubd  xmm0,xmm1
    c87c:	0f 29 85 80 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d80],xmm0
    c883:	66 0f 6f 85 50 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1db0]
    c88b:	0f 29 85 c0 ea ff ff 	movaps XMMWORD PTR [rbp-0x1540],xmm0
    c892:	66 0f 6f 85 30 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1dd0]
    c89a:	0f 29 85 d0 ea ff ff 	movaps XMMWORD PTR [rbp-0x1530],xmm0
    c8a1:	66 0f 6f 85 c0 ea ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1540]
    c8a9:	66 0f 6f 8d d0 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1530]
    c8b1:	66 0f fa c1          	psubd  xmm0,xmm1
    c8b5:	0f 29 85 90 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d70],xmm0
    c8bc:	66 0f 6f 85 70 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d90]
    c8c4:	0f 29 85 b0 ea ff ff 	movaps XMMWORD PTR [rbp-0x1550],xmm0
    c8cb:	c7 85 84 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x277c],0x11
    c8d5:	66 0f 6f 8d b0 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1550]
    c8dd:	66 0f 6e 85 84 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x277c]
    c8e5:	66 0f e2 c8          	psrad  xmm1,xmm0
    c8e9:	66 0f 6f d1          	movdqa xmm2,xmm1
    c8ed:	66 0f 6f 85 60 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1da0]
    c8f5:	0f 29 85 a0 ea ff ff 	movaps XMMWORD PTR [rbp-0x1560],xmm0
    c8fc:	c7 85 80 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x2780],0x11
    c906:	66 0f 6f 8d a0 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1560]
    c90e:	66 0f 6e 85 80 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2780]
    c916:	66 0f e2 c8          	psrad  xmm1,xmm0
    c91a:	66 0f 6f c1          	movdqa xmm0,xmm1
    c91e:	0f 29 85 80 ea ff ff 	movaps XMMWORD PTR [rbp-0x1580],xmm0
    c925:	0f 29 95 90 ea ff ff 	movaps XMMWORD PTR [rbp-0x1570],xmm2
    c92c:	66 0f 6f 8d 90 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1570]
    c934:	66 0f 6f 85 80 ea ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1580]
    c93c:	66 0f 6b c1          	packssdw xmm0,xmm1
    c940:	0f 29 85 30 da ff ff 	movaps XMMWORD PTR [rbp-0x25d0],xmm0
    c947:	66 0f 6f 85 90 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d70]
    c94f:	0f 29 85 70 ea ff ff 	movaps XMMWORD PTR [rbp-0x1590],xmm0
    c956:	c7 85 7c d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x2784],0x11
    c960:	66 0f 6f 8d 70 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1590]
    c968:	66 0f 6e 85 7c d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2784]
    c970:	66 0f e2 c8          	psrad  xmm1,xmm0
    c974:	66 0f 6f d1          	movdqa xmm2,xmm1
    c978:	66 0f 6f 85 80 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d80]
    c980:	0f 29 85 60 ea ff ff 	movaps XMMWORD PTR [rbp-0x15a0],xmm0
    c987:	c7 85 78 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x2788],0x11
    c991:	66 0f 6f 8d 60 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x15a0]
    c999:	66 0f 6e 85 78 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2788]
    c9a1:	66 0f e2 c8          	psrad  xmm1,xmm0
    c9a5:	66 0f 6f c1          	movdqa xmm0,xmm1
    c9a9:	0f 29 85 40 ea ff ff 	movaps XMMWORD PTR [rbp-0x15c0],xmm0
    c9b0:	0f 29 95 50 ea ff ff 	movaps XMMWORD PTR [rbp-0x15b0],xmm2
    c9b7:	66 0f 6f 8d 50 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x15b0]
    c9bf:	66 0f 6f 85 40 ea ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x15c0]
    c9c7:	66 0f 6b c1          	packssdw xmm0,xmm1
    c9cb:	0f 29 85 a0 da ff ff 	movaps XMMWORD PTR [rbp-0x2560],xmm0
    c9d2:	66 0f 6f 85 40 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1fc0]
    c9da:	0f 29 85 20 ea ff ff 	movaps XMMWORD PTR [rbp-0x15e0],xmm0
    c9e1:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    c9e9:	0f 29 85 30 ea ff ff 	movaps XMMWORD PTR [rbp-0x15d0],xmm0
    c9f0:	66 0f 6f 8d 20 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x15e0]
    c9f8:	66 0f 6f 85 30 ea ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x15d0]
    ca00:	66 0f fe c1          	paddd  xmm0,xmm1
    ca04:	0f 29 85 a0 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d60],xmm0
    ca0b:	66 0f 6f 85 50 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1fb0]
    ca13:	0f 29 85 00 ea ff ff 	movaps XMMWORD PTR [rbp-0x1600],xmm0
    ca1a:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    ca22:	0f 29 85 10 ea ff ff 	movaps XMMWORD PTR [rbp-0x15f0],xmm0
    ca29:	66 0f 6f 8d 00 ea ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1600]
    ca31:	66 0f 6f 85 10 ea ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x15f0]
    ca39:	66 0f fe c1          	paddd  xmm0,xmm1
    ca3d:	0f 29 85 b0 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d50],xmm0
    ca44:	66 0f 6f 85 a0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d60]
    ca4c:	0f 29 85 e0 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1620],xmm0
    ca53:	66 0f 6f 85 00 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e00]
    ca5b:	0f 29 85 f0 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1610],xmm0
    ca62:	66 0f 6f 8d e0 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1620]
    ca6a:	66 0f 6f 85 f0 e9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1610]
    ca72:	66 0f fe c1          	paddd  xmm0,xmm1
    ca76:	0f 29 85 c0 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d40],xmm0
    ca7d:	66 0f 6f 85 b0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d50]
    ca85:	0f 29 85 c0 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1640],xmm0
    ca8c:	66 0f 6f 85 10 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1df0]
    ca94:	0f 29 85 d0 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1630],xmm0
    ca9b:	66 0f 6f 8d c0 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1640]
    caa3:	66 0f 6f 85 d0 e9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1630]
    caab:	66 0f fe c1          	paddd  xmm0,xmm1
    caaf:	0f 29 85 d0 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d30],xmm0
    cab6:	66 0f 6f 85 a0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d60]
    cabe:	0f 29 85 a0 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1660],xmm0
    cac5:	66 0f 6f 85 00 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e00]
    cacd:	0f 29 85 b0 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1650],xmm0
    cad4:	66 0f 6f 85 a0 e9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1660]
    cadc:	66 0f 6f 8d b0 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1650]
    cae4:	66 0f fa c1          	psubd  xmm0,xmm1
    cae8:	0f 29 85 e0 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d20],xmm0
    caef:	66 0f 6f 85 b0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d50]
    caf7:	0f 29 85 80 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1680],xmm0
    cafe:	66 0f 6f 85 10 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1df0]
    cb06:	0f 29 85 90 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1670],xmm0
    cb0d:	66 0f 6f 85 80 e9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1680]
    cb15:	66 0f 6f 8d 90 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1670]
    cb1d:	66 0f fa c1          	psubd  xmm0,xmm1
    cb21:	0f 29 85 f0 e2 ff ff 	movaps XMMWORD PTR [rbp-0x1d10],xmm0
    cb28:	66 0f 6f 85 d0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d30]
    cb30:	0f 29 85 70 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1690],xmm0
    cb37:	c7 85 74 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x278c],0x11
    cb41:	66 0f 6f 8d 70 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1690]
    cb49:	66 0f 6e 85 74 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x278c]
    cb51:	66 0f e2 c8          	psrad  xmm1,xmm0
    cb55:	66 0f 6f d1          	movdqa xmm2,xmm1
    cb59:	66 0f 6f 85 c0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d40]
    cb61:	0f 29 85 60 e9 ff ff 	movaps XMMWORD PTR [rbp-0x16a0],xmm0
    cb68:	c7 85 70 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x2790],0x11
    cb72:	66 0f 6f 8d 60 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x16a0]
    cb7a:	66 0f 6e 85 70 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2790]
    cb82:	66 0f e2 c8          	psrad  xmm1,xmm0
    cb86:	66 0f 6f c1          	movdqa xmm0,xmm1
    cb8a:	0f 29 85 40 e9 ff ff 	movaps XMMWORD PTR [rbp-0x16c0],xmm0
    cb91:	0f 29 95 50 e9 ff ff 	movaps XMMWORD PTR [rbp-0x16b0],xmm2
    cb98:	66 0f 6f 8d 50 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x16b0]
    cba0:	66 0f 6f 85 40 e9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x16c0]
    cba8:	66 0f 6b c1          	packssdw xmm0,xmm1
    cbac:	0f 29 85 40 da ff ff 	movaps XMMWORD PTR [rbp-0x25c0],xmm0
    cbb3:	66 0f 6f 85 f0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d10]
    cbbb:	0f 29 85 30 e9 ff ff 	movaps XMMWORD PTR [rbp-0x16d0],xmm0
    cbc2:	c7 85 6c d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x2794],0x11
    cbcc:	66 0f 6f 8d 30 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x16d0]
    cbd4:	66 0f 6e 85 6c d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2794]
    cbdc:	66 0f e2 c8          	psrad  xmm1,xmm0
    cbe0:	66 0f 6f d1          	movdqa xmm2,xmm1
    cbe4:	66 0f 6f 85 e0 e2 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d20]
    cbec:	0f 29 85 20 e9 ff ff 	movaps XMMWORD PTR [rbp-0x16e0],xmm0
    cbf3:	c7 85 68 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x2798],0x11
    cbfd:	66 0f 6f 8d 20 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x16e0]
    cc05:	66 0f 6e 85 68 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x2798]
    cc0d:	66 0f e2 c8          	psrad  xmm1,xmm0
    cc11:	66 0f 6f c1          	movdqa xmm0,xmm1
    cc15:	0f 29 85 00 e9 ff ff 	movaps XMMWORD PTR [rbp-0x1700],xmm0
    cc1c:	0f 29 95 10 e9 ff ff 	movaps XMMWORD PTR [rbp-0x16f0],xmm2
    cc23:	66 0f 6f 8d 10 e9 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x16f0]
    cc2b:	66 0f 6f 85 00 e9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1700]
    cc33:	66 0f 6b c1          	packssdw xmm0,xmm1
    cc37:	0f 29 85 90 da ff ff 	movaps XMMWORD PTR [rbp-0x2570],xmm0
    cc3e:	66 0f 6f 85 60 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1fa0]
    cc46:	0f 29 85 e0 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1720],xmm0
    cc4d:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    cc55:	0f 29 85 f0 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1710],xmm0
    cc5c:	66 0f 6f 8d e0 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1720]
    cc64:	66 0f 6f 85 f0 e8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1710]
    cc6c:	66 0f fe c1          	paddd  xmm0,xmm1
    cc70:	0f 29 85 00 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1d00],xmm0
    cc77:	66 0f 6f 85 70 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f90]
    cc7f:	0f 29 85 c0 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1740],xmm0
    cc86:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    cc8e:	0f 29 85 d0 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1730],xmm0
    cc95:	66 0f 6f 8d c0 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1740]
    cc9d:	66 0f 6f 85 d0 e8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1730]
    cca5:	66 0f fe c1          	paddd  xmm0,xmm1
    cca9:	0f 29 85 10 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1cf0],xmm0
    ccb0:	66 0f 6f 85 00 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d00]
    ccb8:	0f 29 85 a0 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1760],xmm0
    ccbf:	66 0f 6f 85 e0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e20]
    ccc7:	0f 29 85 b0 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1750],xmm0
    ccce:	66 0f 6f 8d a0 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1760]
    ccd6:	66 0f 6f 85 b0 e8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1750]
    ccde:	66 0f fe c1          	paddd  xmm0,xmm1
    cce2:	0f 29 85 20 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1ce0],xmm0
    cce9:	66 0f 6f 85 10 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1cf0]
    ccf1:	0f 29 85 80 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1780],xmm0
    ccf8:	66 0f 6f 85 f0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e10]
    cd00:	0f 29 85 90 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1770],xmm0
    cd07:	66 0f 6f 8d 80 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1780]
    cd0f:	66 0f 6f 85 90 e8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1770]
    cd17:	66 0f fe c1          	paddd  xmm0,xmm1
    cd1b:	0f 29 85 30 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1cd0],xmm0
    cd22:	66 0f 6f 85 00 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d00]
    cd2a:	0f 29 85 60 e8 ff ff 	movaps XMMWORD PTR [rbp-0x17a0],xmm0
    cd31:	66 0f 6f 85 e0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e20]
    cd39:	0f 29 85 70 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1790],xmm0
    cd40:	66 0f 6f 85 60 e8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x17a0]
    cd48:	66 0f 6f 8d 70 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1790]
    cd50:	66 0f fa c1          	psubd  xmm0,xmm1
    cd54:	0f 29 85 40 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1cc0],xmm0
    cd5b:	66 0f 6f 85 10 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1cf0]
    cd63:	0f 29 85 40 e8 ff ff 	movaps XMMWORD PTR [rbp-0x17c0],xmm0
    cd6a:	66 0f 6f 85 f0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e10]
    cd72:	0f 29 85 50 e8 ff ff 	movaps XMMWORD PTR [rbp-0x17b0],xmm0
    cd79:	66 0f 6f 85 40 e8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x17c0]
    cd81:	66 0f 6f 8d 50 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x17b0]
    cd89:	66 0f fa c1          	psubd  xmm0,xmm1
    cd8d:	0f 29 85 50 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1cb0],xmm0
    cd94:	66 0f 6f 85 30 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1cd0]
    cd9c:	0f 29 85 30 e8 ff ff 	movaps XMMWORD PTR [rbp-0x17d0],xmm0
    cda3:	c7 85 64 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x279c],0x11
    cdad:	66 0f 6f 8d 30 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x17d0]
    cdb5:	66 0f 6e 85 64 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x279c]
    cdbd:	66 0f e2 c8          	psrad  xmm1,xmm0
    cdc1:	66 0f 6f d1          	movdqa xmm2,xmm1
    cdc5:	66 0f 6f 85 20 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ce0]
    cdcd:	0f 29 85 20 e8 ff ff 	movaps XMMWORD PTR [rbp-0x17e0],xmm0
    cdd4:	c7 85 60 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x27a0],0x11
    cdde:	66 0f 6f 8d 20 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x17e0]
    cde6:	66 0f 6e 85 60 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x27a0]
    cdee:	66 0f e2 c8          	psrad  xmm1,xmm0
    cdf2:	66 0f 6f c1          	movdqa xmm0,xmm1
    cdf6:	0f 29 85 00 e8 ff ff 	movaps XMMWORD PTR [rbp-0x1800],xmm0
    cdfd:	0f 29 95 10 e8 ff ff 	movaps XMMWORD PTR [rbp-0x17f0],xmm2
    ce04:	66 0f 6f 8d 10 e8 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x17f0]
    ce0c:	66 0f 6f 85 00 e8 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1800]
    ce14:	66 0f 6b c1          	packssdw xmm0,xmm1
    ce18:	0f 29 85 50 da ff ff 	movaps XMMWORD PTR [rbp-0x25b0],xmm0
    ce1f:	66 0f 6f 85 50 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1cb0]
    ce27:	0f 29 85 f0 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1810],xmm0
    ce2e:	c7 85 5c d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x27a4],0x11
    ce38:	66 0f 6f 8d f0 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1810]
    ce40:	66 0f 6e 85 5c d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x27a4]
    ce48:	66 0f e2 c8          	psrad  xmm1,xmm0
    ce4c:	66 0f 6f d1          	movdqa xmm2,xmm1
    ce50:	66 0f 6f 85 40 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1cc0]
    ce58:	0f 29 85 e0 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1820],xmm0
    ce5f:	c7 85 58 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x27a8],0x11
    ce69:	66 0f 6f 8d e0 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1820]
    ce71:	66 0f 6e 85 58 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x27a8]
    ce79:	66 0f e2 c8          	psrad  xmm1,xmm0
    ce7d:	66 0f 6f c1          	movdqa xmm0,xmm1
    ce81:	0f 29 85 c0 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1840],xmm0
    ce88:	0f 29 95 d0 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1830],xmm2
    ce8f:	66 0f 6f 8d d0 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1830]
    ce97:	66 0f 6f 85 c0 e7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1840]
    ce9f:	66 0f 6b c1          	packssdw xmm0,xmm1
    cea3:	0f 29 85 80 da ff ff 	movaps XMMWORD PTR [rbp-0x2580],xmm0
    ceaa:	66 0f 6f 85 20 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1fe0]
    ceb2:	0f 29 85 a0 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1860],xmm0
    ceb9:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    cec1:	0f 29 85 b0 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1850],xmm0
    cec8:	66 0f 6f 8d a0 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1860]
    ced0:	66 0f 6f 85 b0 e7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1850]
    ced8:	66 0f fe c1          	paddd  xmm0,xmm1
    cedc:	0f 29 85 60 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1ca0],xmm0
    cee3:	66 0f 6f 85 30 e0 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1fd0]
    ceeb:	0f 29 85 80 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1880],xmm0
    cef2:	66 0f 6f 85 20 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25e0]
    cefa:	0f 29 85 90 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1870],xmm0
    cf01:	66 0f 6f 8d 80 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1880]
    cf09:	66 0f 6f 85 90 e7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1870]
    cf11:	66 0f fe c1          	paddd  xmm0,xmm1
    cf15:	0f 29 85 70 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c90],xmm0
    cf1c:	66 0f 6f 85 60 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ca0]
    cf24:	0f 29 85 60 e7 ff ff 	movaps XMMWORD PTR [rbp-0x18a0],xmm0
    cf2b:	66 0f 6f 85 c0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e40]
    cf33:	0f 29 85 70 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1890],xmm0
    cf3a:	66 0f 6f 8d 60 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x18a0]
    cf42:	66 0f 6f 85 70 e7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1890]
    cf4a:	66 0f fe c1          	paddd  xmm0,xmm1
    cf4e:	0f 29 85 80 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c80],xmm0
    cf55:	66 0f 6f 85 70 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c90]
    cf5d:	0f 29 85 40 e7 ff ff 	movaps XMMWORD PTR [rbp-0x18c0],xmm0
    cf64:	66 0f 6f 85 d0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e30]
    cf6c:	0f 29 85 50 e7 ff ff 	movaps XMMWORD PTR [rbp-0x18b0],xmm0
    cf73:	66 0f 6f 8d 40 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x18c0]
    cf7b:	66 0f 6f 85 50 e7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x18b0]
    cf83:	66 0f fe c1          	paddd  xmm0,xmm1
    cf87:	0f 29 85 90 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c70],xmm0
    cf8e:	66 0f 6f 85 60 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ca0]
    cf96:	0f 29 85 20 e7 ff ff 	movaps XMMWORD PTR [rbp-0x18e0],xmm0
    cf9d:	66 0f 6f 85 c0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e40]
    cfa5:	0f 29 85 30 e7 ff ff 	movaps XMMWORD PTR [rbp-0x18d0],xmm0
    cfac:	66 0f 6f 85 20 e7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x18e0]
    cfb4:	66 0f 6f 8d 30 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x18d0]
    cfbc:	66 0f fa c1          	psubd  xmm0,xmm1
    cfc0:	0f 29 85 a0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c60],xmm0
    cfc7:	66 0f 6f 85 70 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c90]
    cfcf:	0f 29 85 00 e7 ff ff 	movaps XMMWORD PTR [rbp-0x1900],xmm0
    cfd6:	66 0f 6f 85 d0 e1 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e30]
    cfde:	0f 29 85 10 e7 ff ff 	movaps XMMWORD PTR [rbp-0x18f0],xmm0
    cfe5:	66 0f 6f 85 00 e7 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1900]
    cfed:	66 0f 6f 8d 10 e7 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x18f0]
    cff5:	66 0f fa c1          	psubd  xmm0,xmm1
    cff9:	0f 29 85 b0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c50],xmm0
    d000:	66 0f 6f 85 90 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c70]
    d008:	0f 29 85 f0 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1910],xmm0
    d00f:	c7 85 54 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x27ac],0x11
    d019:	66 0f 6f 8d f0 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1910]
    d021:	66 0f 6e 85 54 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x27ac]
    d029:	66 0f e2 c8          	psrad  xmm1,xmm0
    d02d:	66 0f 6f d1          	movdqa xmm2,xmm1
    d031:	66 0f 6f 85 80 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c80]
    d039:	0f 29 85 e0 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1920],xmm0
    d040:	c7 85 50 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x27b0],0x11
    d04a:	66 0f 6f 8d e0 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1920]
    d052:	66 0f 6e 85 50 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x27b0]
    d05a:	66 0f e2 c8          	psrad  xmm1,xmm0
    d05e:	66 0f 6f c1          	movdqa xmm0,xmm1
    d062:	0f 29 85 c0 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1940],xmm0
    d069:	0f 29 95 d0 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1930],xmm2
    d070:	66 0f 6f 8d d0 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1930]
    d078:	66 0f 6f 85 c0 e6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1940]
    d080:	66 0f 6b c1          	packssdw xmm0,xmm1
    d084:	0f 29 85 60 da ff ff 	movaps XMMWORD PTR [rbp-0x25a0],xmm0
    d08b:	66 0f 6f 85 b0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c50]
    d093:	0f 29 85 b0 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1950],xmm0
    d09a:	c7 85 4c d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x27b4],0x11
    d0a4:	66 0f 6f 8d b0 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1950]
    d0ac:	66 0f 6e 85 4c d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x27b4]
    d0b4:	66 0f e2 c8          	psrad  xmm1,xmm0
    d0b8:	66 0f 6f d1          	movdqa xmm2,xmm1
    d0bc:	66 0f 6f 85 a0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c60]
    d0c4:	0f 29 85 a0 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1960],xmm0
    d0cb:	c7 85 48 d8 ff ff 11 00 00 00 	mov    DWORD PTR [rbp-0x27b8],0x11
    d0d5:	66 0f 6f 8d a0 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1960]
    d0dd:	66 0f 6e 85 48 d8 ff ff 	movd   xmm0,DWORD PTR [rbp-0x27b8]
    d0e5:	66 0f e2 c8          	psrad  xmm1,xmm0
    d0e9:	66 0f 6f c1          	movdqa xmm0,xmm1
    d0ed:	0f 29 85 80 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1980],xmm0
    d0f4:	0f 29 95 90 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1970],xmm2
    d0fb:	66 0f 6f 8d 90 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1970]
    d103:	66 0f 6f 85 80 e6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1980]
    d10b:	66 0f 6b c1          	packssdw xmm0,xmm1
    d10f:	0f 29 85 70 da ff ff 	movaps XMMWORD PTR [rbp-0x2590],xmm0
    d116:	66 0f 6f 85 30 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25d0]
    d11e:	0f 29 85 60 e6 ff ff 	movaps XMMWORD PTR [rbp-0x19a0],xmm0
    d125:	66 0f 6f 85 40 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25c0]
    d12d:	0f 29 85 70 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1990],xmm0
    d134:	66 0f 6f 8d 70 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1990]
    d13c:	66 0f 6f 85 60 e6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x19a0]
    d144:	66 0f 67 c1          	packuswb xmm0,xmm1
    d148:	0f 29 85 c0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c40],xmm0
    d14f:	66 0f 6f 85 50 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25b0]
    d157:	0f 29 85 40 e6 ff ff 	movaps XMMWORD PTR [rbp-0x19c0],xmm0
    d15e:	66 0f 6f 85 60 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x25a0]
    d166:	0f 29 85 50 e6 ff ff 	movaps XMMWORD PTR [rbp-0x19b0],xmm0
    d16d:	66 0f 6f 8d 50 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x19b0]
    d175:	66 0f 6f 85 40 e6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x19c0]
    d17d:	66 0f 67 c1          	packuswb xmm0,xmm1
    d181:	0f 29 85 d0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c30],xmm0
    d188:	66 0f 6f 85 70 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2590]
    d190:	0f 29 85 20 e6 ff ff 	movaps XMMWORD PTR [rbp-0x19e0],xmm0
    d197:	66 0f 6f 85 80 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2580]
    d19f:	0f 29 85 30 e6 ff ff 	movaps XMMWORD PTR [rbp-0x19d0],xmm0
    d1a6:	66 0f 6f 8d 30 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x19d0]
    d1ae:	66 0f 6f 85 20 e6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x19e0]
    d1b6:	66 0f 67 c1          	packuswb xmm0,xmm1
    d1ba:	0f 29 85 e0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c20],xmm0
    d1c1:	66 0f 6f 85 90 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2570]
    d1c9:	0f 29 85 00 e6 ff ff 	movaps XMMWORD PTR [rbp-0x1a00],xmm0
    d1d0:	66 0f 6f 85 a0 da ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2560]
    d1d8:	0f 29 85 10 e6 ff ff 	movaps XMMWORD PTR [rbp-0x19f0],xmm0
    d1df:	66 0f 6f 8d 10 e6 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x19f0]
    d1e7:	66 0f 6f 85 00 e6 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1a00]
    d1ef:	66 0f 67 c1          	packuswb xmm0,xmm1
    d1f3:	0f 29 85 f0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c10],xmm0
    d1fa:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d202:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    d209:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d211:	0f 29 85 e0 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a20],xmm0
    d218:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d220:	0f 29 85 f0 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a10],xmm0
    d227:	66 0f 6f 8d f0 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a10]
    d22f:	66 0f 6f 85 e0 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1a20]
    d237:	66 0f 60 c1          	punpcklbw xmm0,xmm1
    d23b:	0f 29 85 c0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c40],xmm0
    d242:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    d24a:	0f 29 85 c0 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a40],xmm0
    d251:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d259:	0f 29 85 d0 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a30],xmm0
    d260:	66 0f 6f 8d d0 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a30]
    d268:	66 0f 6f 85 c0 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1a40]
    d270:	66 0f 68 c1          	punpckhbw xmm0,xmm1
    d274:	0f 29 85 e0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c20],xmm0
    d27b:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d283:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    d28a:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d292:	0f 29 85 a0 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a60],xmm0
    d299:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d2a1:	0f 29 85 b0 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a50],xmm0
    d2a8:	66 0f 6f 8d b0 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a50]
    d2b0:	66 0f 6f 85 a0 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1a60]
    d2b8:	66 0f 60 c1          	punpcklbw xmm0,xmm1
    d2bc:	0f 29 85 d0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c30],xmm0
    d2c3:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    d2cb:	0f 29 85 80 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a80],xmm0
    d2d2:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d2da:	0f 29 85 90 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a70],xmm0
    d2e1:	66 0f 6f 8d 90 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a70]
    d2e9:	66 0f 6f 85 80 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1a80]
    d2f1:	66 0f 68 c1          	punpckhbw xmm0,xmm1
    d2f5:	0f 29 85 f0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c10],xmm0
    d2fc:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d304:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    d30b:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d313:	0f 29 85 60 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1aa0],xmm0
    d31a:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d322:	0f 29 85 70 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1a90],xmm0
    d329:	66 0f 6f 8d 70 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a90]
    d331:	66 0f 6f 85 60 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1aa0]
    d339:	66 0f 60 c1          	punpcklbw xmm0,xmm1
    d33d:	0f 29 85 c0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c40],xmm0
    d344:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    d34c:	0f 29 85 40 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1ac0],xmm0
    d353:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d35b:	0f 29 85 50 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1ab0],xmm0
    d362:	66 0f 6f 8d 50 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1ab0]
    d36a:	66 0f 6f 85 40 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ac0]
    d372:	66 0f 68 c1          	punpckhbw xmm0,xmm1
    d376:	0f 29 85 d0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c30],xmm0
    d37d:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d385:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    d38c:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d394:	0f 29 85 20 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1ae0],xmm0
    d39b:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d3a3:	0f 29 85 30 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1ad0],xmm0
    d3aa:	66 0f 6f 8d 30 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1ad0]
    d3b2:	66 0f 6f 85 20 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1ae0]
    d3ba:	66 0f 60 c1          	punpcklbw xmm0,xmm1
    d3be:	0f 29 85 e0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c20],xmm0
    d3c5:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    d3cd:	0f 29 85 00 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1b00],xmm0
    d3d4:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d3dc:	0f 29 85 10 e5 ff ff 	movaps XMMWORD PTR [rbp-0x1af0],xmm0
    d3e3:	66 0f 6f 8d 10 e5 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1af0]
    d3eb:	66 0f 6f 85 00 e5 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1b00]
    d3f3:	66 0f 68 c1          	punpckhbw xmm0,xmm1
    d3f7:	0f 29 85 f0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c10],xmm0
    d3fe:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d406:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    d40d:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d415:	0f 29 85 e0 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b20],xmm0
    d41c:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d424:	0f 29 85 f0 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b10],xmm0
    d42b:	66 0f 6f 8d f0 e4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1b10]
    d433:	66 0f 6f 85 e0 e4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1b20]
    d43b:	66 0f 60 c1          	punpcklbw xmm0,xmm1
    d43f:	0f 29 85 c0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c40],xmm0
    d446:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    d44e:	0f 29 85 c0 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b40],xmm0
    d455:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d45d:	0f 29 85 d0 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b30],xmm0
    d464:	66 0f 6f 8d d0 e4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1b30]
    d46c:	66 0f 6f 85 c0 e4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1b40]
    d474:	66 0f 68 c1          	punpckhbw xmm0,xmm1
    d478:	0f 29 85 e0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c20],xmm0
    d47f:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d487:	0f 29 85 30 df ff ff 	movaps XMMWORD PTR [rbp-0x20d0],xmm0
    d48e:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d496:	0f 29 85 a0 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b60],xmm0
    d49d:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d4a5:	0f 29 85 b0 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b50],xmm0
    d4ac:	66 0f 6f 8d b0 e4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1b50]
    d4b4:	66 0f 6f 85 a0 e4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1b60]
    d4bc:	66 0f 60 c1          	punpcklbw xmm0,xmm1
    d4c0:	0f 29 85 d0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c30],xmm0
    d4c7:	66 0f 6f 85 30 df ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x20d0]
    d4cf:	0f 29 85 80 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b80],xmm0
    d4d6:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d4de:	0f 29 85 90 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b70],xmm0
    d4e5:	66 0f 6f 8d 90 e4 ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1b70]
    d4ed:	66 0f 6f 85 80 e4 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1b80]
    d4f5:	66 0f 68 c1          	punpckhbw xmm0,xmm1
    d4f9:	0f 29 85 f0 e3 ff ff 	movaps XMMWORD PTR [rbp-0x1c10],xmm0
    d500:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d507:	48 89 85 48 d9 ff ff 	mov    QWORD PTR [rbp-0x26b8],rax
    d50e:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d516:	0f 29 85 70 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1b90],xmm0
    d51d:	48 8b 85 70 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1b90]
    d524:	48 89 c2             	mov    rdx,rax
    d527:	48 8b 85 48 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26b8]
    d52e:	48 89 10             	mov    QWORD PTR [rax],rdx
    d531:	90                   	nop
    d532:	8b 85 34 d7 ff ff    	mov    eax,DWORD PTR [rbp-0x28cc]
    d538:	48 98                	cdqe   
    d53a:	48 01 85 38 d7 ff ff 	add    QWORD PTR [rbp-0x28c8],rax
    d541:	66 0f 6f 85 c0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c40]
    d549:	66 0f 70 c0 4e       	pshufd xmm0,xmm0,0x4e
    d54e:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d555:	48 89 85 40 d9 ff ff 	mov    QWORD PTR [rbp-0x26c0],rax
    d55c:	0f 29 85 60 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1ba0],xmm0
    d563:	48 8b 85 60 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1ba0]
    d56a:	48 89 c2             	mov    rdx,rax
    d56d:	48 8b 85 40 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26c0]
    d574:	48 89 10             	mov    QWORD PTR [rax],rdx
    d577:	90                   	nop
    d578:	8b 85 34 d7 ff ff    	mov    eax,DWORD PTR [rbp-0x28cc]
    d57e:	48 98                	cdqe   
    d580:	48 01 85 38 d7 ff ff 	add    QWORD PTR [rbp-0x28c8],rax
    d587:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d58e:	48 89 85 38 d9 ff ff 	mov    QWORD PTR [rbp-0x26c8],rax
    d595:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d59d:	0f 29 85 50 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1bb0],xmm0
    d5a4:	48 8b 85 50 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1bb0]
    d5ab:	48 89 c2             	mov    rdx,rax
    d5ae:	48 8b 85 38 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26c8]
    d5b5:	48 89 10             	mov    QWORD PTR [rax],rdx
    d5b8:	90                   	nop
    d5b9:	8b 85 34 d7 ff ff    	mov    eax,DWORD PTR [rbp-0x28cc]
    d5bf:	48 98                	cdqe   
    d5c1:	48 01 85 38 d7 ff ff 	add    QWORD PTR [rbp-0x28c8],rax
    d5c8:	66 0f 6f 85 e0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c20]
    d5d0:	66 0f 70 c0 4e       	pshufd xmm0,xmm0,0x4e
    d5d5:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d5dc:	48 89 85 30 d9 ff ff 	mov    QWORD PTR [rbp-0x26d0],rax
    d5e3:	0f 29 85 40 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1bc0],xmm0
    d5ea:	48 8b 85 40 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1bc0]
    d5f1:	48 89 c2             	mov    rdx,rax
    d5f4:	48 8b 85 30 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26d0]
    d5fb:	48 89 10             	mov    QWORD PTR [rax],rdx
    d5fe:	90                   	nop
    d5ff:	8b 85 34 d7 ff ff    	mov    eax,DWORD PTR [rbp-0x28cc]
    d605:	48 98                	cdqe   
    d607:	48 01 85 38 d7 ff ff 	add    QWORD PTR [rbp-0x28c8],rax
    d60e:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d615:	48 89 85 28 d9 ff ff 	mov    QWORD PTR [rbp-0x26d8],rax
    d61c:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d624:	0f 29 85 30 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1bd0],xmm0
    d62b:	48 8b 85 30 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1bd0]
    d632:	48 89 c2             	mov    rdx,rax
    d635:	48 8b 85 28 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26d8]
    d63c:	48 89 10             	mov    QWORD PTR [rax],rdx
    d63f:	90                   	nop
    d640:	8b 85 34 d7 ff ff    	mov    eax,DWORD PTR [rbp-0x28cc]
    d646:	48 98                	cdqe   
    d648:	48 01 85 38 d7 ff ff 	add    QWORD PTR [rbp-0x28c8],rax
    d64f:	66 0f 6f 85 d0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c30]
    d657:	66 0f 70 c0 4e       	pshufd xmm0,xmm0,0x4e
    d65c:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d663:	48 89 85 20 d9 ff ff 	mov    QWORD PTR [rbp-0x26e0],rax
    d66a:	0f 29 85 20 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1be0],xmm0
    d671:	48 8b 85 20 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1be0]
    d678:	48 89 c2             	mov    rdx,rax
    d67b:	48 8b 85 20 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26e0]
    d682:	48 89 10             	mov    QWORD PTR [rax],rdx
    d685:	90                   	nop
    d686:	8b 85 34 d7 ff ff    	mov    eax,DWORD PTR [rbp-0x28cc]
    d68c:	48 98                	cdqe   
    d68e:	48 01 85 38 d7 ff ff 	add    QWORD PTR [rbp-0x28c8],rax
    d695:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d69c:	48 89 85 18 d9 ff ff 	mov    QWORD PTR [rbp-0x26e8],rax
    d6a3:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d6ab:	0f 29 85 10 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1bf0],xmm0
    d6b2:	48 8b 85 10 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1bf0]
    d6b9:	48 89 c2             	mov    rdx,rax
    d6bc:	48 8b 85 18 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26e8]
    d6c3:	48 89 10             	mov    QWORD PTR [rax],rdx
    d6c6:	90                   	nop
    d6c7:	8b 85 34 d7 ff ff    	mov    eax,DWORD PTR [rbp-0x28cc]
    d6cd:	48 98                	cdqe   
    d6cf:	48 01 85 38 d7 ff ff 	add    QWORD PTR [rbp-0x28c8],rax
    d6d6:	66 0f 6f 85 f0 e3 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c10]
    d6de:	66 0f 70 c0 4e       	pshufd xmm0,xmm0,0x4e
    d6e3:	48 8b 85 38 d7 ff ff 	mov    rax,QWORD PTR [rbp-0x28c8]
    d6ea:	48 89 85 10 d9 ff ff 	mov    QWORD PTR [rbp-0x26f0],rax
    d6f1:	0f 29 85 00 e4 ff ff 	movaps XMMWORD PTR [rbp-0x1c00],xmm0
    d6f8:	48 8b 85 00 e4 ff ff 	mov    rax,QWORD PTR [rbp-0x1c00]
    d6ff:	48 89 c2             	mov    rdx,rax
    d702:	48 8b 85 10 d9 ff ff 	mov    rax,QWORD PTR [rbp-0x26f0]
    d709:	48 89 10             	mov    QWORD PTR [rax],rdx
    d70c:	90                   	nop
    d70d:	90                   	nop
    d70e:	c9                   	leave  
    d70f:	c3                   	ret    

000000000000d710 <stbi__get_marker(stbi__jpeg*)>:
    d710:	55                   	push   rbp
    d711:	48 89 e5             	mov    rbp,rsp
    d714:	48 83 ec 20          	sub    rsp,0x20
    d718:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    d71c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    d720:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    d727:	3c ff                	cmp    al,0xff
    d729:	74 1f                	je     d74a <stbi__get_marker(stbi__jpeg*)+0x3a>
    d72b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    d72f:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    d736:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    d739:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    d73d:	c6 80 28 48 00 00 ff 	mov    BYTE PTR [rax+0x4828],0xff
    d744:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
    d748:	eb 3b                	jmp    d785 <stbi__get_marker(stbi__jpeg*)+0x75>
    d74a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    d74e:	48 8b 00             	mov    rax,QWORD PTR [rax]
    d751:	48 89 c7             	mov    rdi,rax
    d754:	e8 b8 8d ff ff       	call   6511 <stbi__get8(stbi__context*)>
    d759:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    d75c:	80 7d ff ff          	cmp    BYTE PTR [rbp-0x1],0xff
    d760:	74 19                	je     d77b <stbi__get_marker(stbi__jpeg*)+0x6b>
    d762:	b8 ff ff ff ff       	mov    eax,0xffffffff
    d767:	eb 1c                	jmp    d785 <stbi__get_marker(stbi__jpeg*)+0x75>
    d769:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    d76d:	48 8b 00             	mov    rax,QWORD PTR [rax]
    d770:	48 89 c7             	mov    rdi,rax
    d773:	e8 99 8d ff ff       	call   6511 <stbi__get8(stbi__context*)>
    d778:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
    d77b:	80 7d ff ff          	cmp    BYTE PTR [rbp-0x1],0xff
    d77f:	74 e8                	je     d769 <stbi__get_marker(stbi__jpeg*)+0x59>
    d781:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
    d785:	c9                   	leave  
    d786:	c3                   	ret    

000000000000d787 <stbi__jpeg_reset(stbi__jpeg*)>:
    d787:	55                   	push   rbp
    d788:	48 89 e5             	mov    rbp,rsp
    d78b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    d78f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d793:	c7 80 24 48 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x4824],0x0
    d79d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d7a1:	c7 80 20 48 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x4820],0x0
    d7ab:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d7af:	c7 80 2c 48 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x482c],0x0
    d7b9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d7bd:	c7 80 d8 47 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x47d8],0x0
    d7c7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d7cb:	8b 90 d8 47 00 00    	mov    edx,DWORD PTR [rax+0x47d8]
    d7d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d7d5:	89 90 78 47 00 00    	mov    DWORD PTR [rax+0x4778],edx
    d7db:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d7df:	8b 90 78 47 00 00    	mov    edx,DWORD PTR [rax+0x4778]
    d7e5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d7e9:	89 90 18 47 00 00    	mov    DWORD PTR [rax+0x4718],edx
    d7ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d7f3:	8b 90 18 47 00 00    	mov    edx,DWORD PTR [rax+0x4718]
    d7f9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d7fd:	89 90 b8 46 00 00    	mov    DWORD PTR [rax+0x46b8],edx
    d803:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d807:	c6 80 28 48 00 00 ff 	mov    BYTE PTR [rax+0x4828],0xff
    d80e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d812:	8b 80 68 48 00 00    	mov    eax,DWORD PTR [rax+0x4868]
    d818:	85 c0                	test   eax,eax
    d81a:	74 0c                	je     d828 <stbi__jpeg_reset(stbi__jpeg*)+0xa1>
    d81c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d820:	8b 80 68 48 00 00    	mov    eax,DWORD PTR [rax+0x4868]
    d826:	eb 05                	jmp    d82d <stbi__jpeg_reset(stbi__jpeg*)+0xa6>
    d828:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
    d82d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    d831:	89 82 6c 48 00 00    	mov    DWORD PTR [rdx+0x486c],eax
    d837:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    d83b:	c7 80 44 48 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x4844],0x0
    d845:	90                   	nop
    d846:	5d                   	pop    rbp
    d847:	c3                   	ret    

000000000000d848 <stbi__parse_entropy_coded_data(stbi__jpeg*)>:
    d848:	55                   	push   rbp
    d849:	48 89 e5             	mov    rbp,rsp
    d84c:	48 81 ec 30 01 00 00 	sub    rsp,0x130
    d853:	48 89 bd d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rdi
    d85a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    d863:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    d867:	31 c0                	xor    eax,eax
    d869:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d870:	48 89 c7             	mov    rdi,rax
    d873:	e8 0f ff ff ff       	call   d787 <stbi__jpeg_reset(stbi__jpeg*)>
    d878:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d87f:	8b 80 30 48 00 00    	mov    eax,DWORD PTR [rax+0x4830]
    d885:	85 c0                	test   eax,eax
    d887:	0f 85 a5 07 00 00    	jne    e032 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x7ea>
    d88d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d894:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    d89a:	83 f8 01             	cmp    eax,0x1
    d89d:	0f 85 4d 03 00 00    	jne    dbf0 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x3a8>
    d8a3:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d8aa:	8b 80 58 48 00 00    	mov    eax,DWORD PTR [rax+0x4858]
    d8b0:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
    d8b6:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    d8bd:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    d8c3:	48 63 d0             	movsxd rdx,eax
    d8c6:	48 89 d0             	mov    rax,rdx
    d8c9:	48 01 c0             	add    rax,rax
    d8cc:	48 01 d0             	add    rax,rdx
    d8cf:	48 c1 e0 05          	shl    rax,0x5
    d8d3:	48 01 c8             	add    rax,rcx
    d8d6:	48 05 bc 46 00 00    	add    rax,0x46bc
    d8dc:	8b 00                	mov    eax,DWORD PTR [rax]
    d8de:	83 c0 07             	add    eax,0x7
    d8e1:	c1 f8 03             	sar    eax,0x3
    d8e4:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
    d8ea:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    d8f1:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    d8f7:	48 63 d0             	movsxd rdx,eax
    d8fa:	48 89 d0             	mov    rax,rdx
    d8fd:	48 01 c0             	add    rax,rax
    d900:	48 01 d0             	add    rax,rdx
    d903:	48 c1 e0 05          	shl    rax,0x5
    d907:	48 01 c8             	add    rax,rcx
    d90a:	48 05 c0 46 00 00    	add    rax,0x46c0
    d910:	8b 00                	mov    eax,DWORD PTR [rax]
    d912:	83 c0 07             	add    eax,0x7
    d915:	c1 f8 03             	sar    eax,0x3
    d918:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
    d91e:	c7 85 f0 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x110],0x0
    d928:	e9 a7 02 00 00       	jmp    dbd4 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x38c>
    d92d:	c7 85 ec fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x114],0x0
    d937:	e9 7f 02 00 00       	jmp    dbbb <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x373>
    d93c:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    d943:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    d949:	48 63 d0             	movsxd rdx,eax
    d94c:	48 89 d0             	mov    rax,rdx
    d94f:	48 01 c0             	add    rax,rax
    d952:	48 01 d0             	add    rax,rdx
    d955:	48 c1 e0 05          	shl    rax,0x5
    d959:	48 01 c8             	add    rax,rcx
    d95c:	48 05 b4 46 00 00    	add    rax,0x46b4
    d962:	8b 00                	mov    eax,DWORD PTR [rax]
    d964:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
    d96a:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    d971:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    d977:	48 63 d0             	movsxd rdx,eax
    d97a:	48 89 d0             	mov    rax,rdx
    d97d:	48 01 c0             	add    rax,rax
    d980:	48 01 d0             	add    rax,rdx
    d983:	48 c1 e0 05          	shl    rax,0x5
    d987:	48 01 c8             	add    rax,rcx
    d98a:	48 05 ac 46 00 00    	add    rax,0x46ac
    d990:	8b 00                	mov    eax,DWORD PTR [rax]
    d992:	48 98                	cdqe   
    d994:	48 83 c0 69          	add    rax,0x69
    d998:	48 c1 e0 07          	shl    rax,0x7
    d99c:	48 89 c2             	mov    rdx,rax
    d99f:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d9a6:	48 01 d0             	add    rax,rdx
    d9a9:	48 8d 78 08          	lea    rdi,[rax+0x8]
    d9ad:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
    d9b3:	48 98                	cdqe   
    d9b5:	48 c1 e0 0a          	shl    rax,0xa
    d9b9:	48 8d 90 80 36 00 00 	lea    rdx,[rax+0x3680]
    d9c0:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d9c7:	48 01 d0             	add    rax,rdx
    d9ca:	4c 8d 50 08          	lea    r10,[rax+0x8]
    d9ce:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d9d5:	48 8d 90 48 1a 00 00 	lea    rdx,[rax+0x1a48]
    d9dc:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
    d9e2:	48 98                	cdqe   
    d9e4:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    d9eb:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
    d9ef:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    d9f6:	4c 8d 40 08          	lea    r8,[rax+0x8]
    d9fa:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
    da01:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    da07:	48 63 d0             	movsxd rdx,eax
    da0a:	48 89 d0             	mov    rax,rdx
    da0d:	48 01 c0             	add    rax,rax
    da10:	48 01 d0             	add    rax,rdx
    da13:	48 c1 e0 05          	shl    rax,0x5
    da17:	48 01 f0             	add    rax,rsi
    da1a:	48 05 b0 46 00 00    	add    rax,0x46b0
    da20:	8b 00                	mov    eax,DWORD PTR [rax]
    da22:	48 98                	cdqe   
    da24:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    da2b:	49 8d 14 00          	lea    rdx,[r8+rax*1]
    da2f:	44 8b 85 50 ff ff ff 	mov    r8d,DWORD PTR [rbp-0xb0]
    da36:	48 8d b5 70 ff ff ff 	lea    rsi,[rbp-0x90]
    da3d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    da44:	48 83 ec 08          	sub    rsp,0x8
    da48:	57                   	push   rdi
    da49:	45 89 c1             	mov    r9d,r8d
    da4c:	4d 89 d0             	mov    r8,r10
    da4f:	48 89 c7             	mov    rdi,rax
    da52:	e8 ac a6 ff ff       	call   8103 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)>
    da57:	48 83 c4 10          	add    rsp,0x10
    da5b:	85 c0                	test   eax,eax
    da5d:	0f 94 c0             	sete   al
    da60:	84 c0                	test   al,al
    da62:	74 0a                	je     da6e <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x226>
    da64:	b8 00 00 00 00       	mov    eax,0x0
    da69:	e9 12 0c 00 00       	jmp    e680 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    da6e:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    da75:	4c 8b 80 70 48 00 00 	mov    r8,QWORD PTR [rax+0x4870]
    da7c:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    da83:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    da89:	48 63 d0             	movsxd rdx,eax
    da8c:	48 89 d0             	mov    rax,rdx
    da8f:	48 01 c0             	add    rax,rax
    da92:	48 01 d0             	add    rax,rdx
    da95:	48 c1 e0 05          	shl    rax,0x5
    da99:	48 01 c8             	add    rax,rcx
    da9c:	48 05 c4 46 00 00    	add    rax,0x46c4
    daa2:	8b 08                	mov    ecx,DWORD PTR [rax]
    daa4:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
    daab:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    dab1:	48 63 d0             	movsxd rdx,eax
    dab4:	48 89 d0             	mov    rax,rdx
    dab7:	48 01 c0             	add    rax,rax
    daba:	48 01 d0             	add    rax,rdx
    dabd:	48 c1 e0 05          	shl    rax,0x5
    dac1:	48 01 f0             	add    rax,rsi
    dac4:	48 05 d0 46 00 00    	add    rax,0x46d0
    daca:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    dacd:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
    dad4:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
    dada:	48 63 d0             	movsxd rdx,eax
    dadd:	48 89 d0             	mov    rax,rdx
    dae0:	48 01 c0             	add    rax,rax
    dae3:	48 01 d0             	add    rax,rdx
    dae6:	48 c1 e0 05          	shl    rax,0x5
    daea:	48 01 f8             	add    rax,rdi
    daed:	48 05 c4 46 00 00    	add    rax,0x46c4
    daf3:	8b 00                	mov    eax,DWORD PTR [rax]
    daf5:	0f af 85 f0 fe ff ff 	imul   eax,DWORD PTR [rbp-0x110]
    dafc:	c1 e0 03             	shl    eax,0x3
    daff:	48 63 d0             	movsxd rdx,eax
    db02:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
    db08:	c1 e0 03             	shl    eax,0x3
    db0b:	48 98                	cdqe   
    db0d:	48 01 d0             	add    rax,rdx
    db10:	48 8d 3c 06          	lea    rdi,[rsi+rax*1]
    db14:	48 8d 85 70 ff ff ff 	lea    rax,[rbp-0x90]
    db1b:	48 89 c2             	mov    rdx,rax
    db1e:	89 ce                	mov    esi,ecx
    db20:	41 ff d0             	call   r8
    db23:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    db2a:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    db30:	8d 50 ff             	lea    edx,[rax-0x1]
    db33:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    db3a:	89 90 6c 48 00 00    	mov    DWORD PTR [rax+0x486c],edx
    db40:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    db47:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    db4d:	85 c0                	test   eax,eax
    db4f:	0f 9e c0             	setle  al
    db52:	84 c0                	test   al,al
    db54:	74 5e                	je     dbb4 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x36c>
    db56:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    db5d:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    db63:	83 f8 17             	cmp    eax,0x17
    db66:	7f 0f                	jg     db77 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x32f>
    db68:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    db6f:	48 89 c7             	mov    rdi,rax
    db72:	e8 0a a0 ff ff       	call   7b81 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    db77:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    db7e:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    db85:	3c cf                	cmp    al,0xcf
    db87:	76 12                	jbe    db9b <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x353>
    db89:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    db90:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    db97:	3c d7                	cmp    al,0xd7
    db99:	76 0a                	jbe    dba5 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x35d>
    db9b:	b8 01 00 00 00       	mov    eax,0x1
    dba0:	e9 db 0a 00 00       	jmp    e680 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    dba5:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dbac:	48 89 c7             	mov    rdi,rax
    dbaf:	e8 d3 fb ff ff       	call   d787 <stbi__jpeg_reset(stbi__jpeg*)>
    dbb4:	83 85 ec fe ff ff 01 	add    DWORD PTR [rbp-0x114],0x1
    dbbb:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [rbp-0x114]
    dbc1:	3b 85 54 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xac]
    dbc7:	0f 8c 6f fd ff ff    	jl     d93c <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xf4>
    dbcd:	83 85 f0 fe ff ff 01 	add    DWORD PTR [rbp-0x110],0x1
    dbd4:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x110]
    dbda:	3b 85 58 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xa8]
    dbe0:	0f 8c 47 fd ff ff    	jl     d92d <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe5>
    dbe6:	b8 01 00 00 00       	mov    eax,0x1
    dbeb:	e9 90 0a 00 00       	jmp    e680 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    dbf0:	c7 85 f8 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x108],0x0
    dbfa:	e9 10 04 00 00       	jmp    e00f <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x7c7>
    dbff:	c7 85 f4 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x10c],0x0
    dc09:	e9 e1 03 00 00       	jmp    dfef <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x7a7>
    dc0e:	c7 85 fc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x104],0x0
    dc18:	e9 21 03 00 00       	jmp    df3e <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x6f6>
    dc1d:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dc24:	8b 95 fc fe ff ff    	mov    edx,DWORD PTR [rbp-0x104]
    dc2a:	48 63 d2             	movsxd rdx,edx
    dc2d:	48 81 c2 14 12 00 00 	add    rdx,0x1214
    dc34:	8b 44 90 08          	mov    eax,DWORD PTR [rax+rdx*4+0x8]
    dc38:	89 85 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],eax
    dc3e:	c7 85 04 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xfc],0x0
    dc48:	e9 b6 02 00 00       	jmp    df03 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x6bb>
    dc4d:	c7 85 00 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x100],0x0
    dc57:	e9 6c 02 00 00       	jmp    dec8 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x680>
    dc5c:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    dc63:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    dc69:	48 63 d0             	movsxd rdx,eax
    dc6c:	48 89 d0             	mov    rax,rdx
    dc6f:	48 01 c0             	add    rax,rax
    dc72:	48 01 d0             	add    rax,rdx
    dc75:	48 c1 e0 05          	shl    rax,0x5
    dc79:	48 01 c8             	add    rax,rcx
    dc7c:	48 05 a4 46 00 00    	add    rax,0x46a4
    dc82:	8b 00                	mov    eax,DWORD PTR [rax]
    dc84:	0f af 85 f4 fe ff ff 	imul   eax,DWORD PTR [rbp-0x10c]
    dc8b:	89 c2                	mov    edx,eax
    dc8d:	8b 85 00 ff ff ff    	mov    eax,DWORD PTR [rbp-0x100]
    dc93:	01 d0                	add    eax,edx
    dc95:	c1 e0 03             	shl    eax,0x3
    dc98:	89 85 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],eax
    dc9e:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    dca5:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    dcab:	48 63 d0             	movsxd rdx,eax
    dcae:	48 89 d0             	mov    rax,rdx
    dcb1:	48 01 c0             	add    rax,rax
    dcb4:	48 01 d0             	add    rax,rdx
    dcb7:	48 c1 e0 05          	shl    rax,0x5
    dcbb:	48 01 c8             	add    rax,rcx
    dcbe:	48 05 a8 46 00 00    	add    rax,0x46a8
    dcc4:	8b 00                	mov    eax,DWORD PTR [rax]
    dcc6:	0f af 85 f8 fe ff ff 	imul   eax,DWORD PTR [rbp-0x108]
    dccd:	89 c2                	mov    edx,eax
    dccf:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
    dcd5:	01 d0                	add    eax,edx
    dcd7:	c1 e0 03             	shl    eax,0x3
    dcda:	89 85 48 ff ff ff    	mov    DWORD PTR [rbp-0xb8],eax
    dce0:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    dce7:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    dced:	48 63 d0             	movsxd rdx,eax
    dcf0:	48 89 d0             	mov    rax,rdx
    dcf3:	48 01 c0             	add    rax,rax
    dcf6:	48 01 d0             	add    rax,rdx
    dcf9:	48 c1 e0 05          	shl    rax,0x5
    dcfd:	48 01 c8             	add    rax,rcx
    dd00:	48 05 b4 46 00 00    	add    rax,0x46b4
    dd06:	8b 00                	mov    eax,DWORD PTR [rax]
    dd08:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
    dd0e:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    dd15:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    dd1b:	48 63 d0             	movsxd rdx,eax
    dd1e:	48 89 d0             	mov    rax,rdx
    dd21:	48 01 c0             	add    rax,rax
    dd24:	48 01 d0             	add    rax,rdx
    dd27:	48 c1 e0 05          	shl    rax,0x5
    dd2b:	48 01 c8             	add    rax,rcx
    dd2e:	48 05 ac 46 00 00    	add    rax,0x46ac
    dd34:	8b 00                	mov    eax,DWORD PTR [rax]
    dd36:	48 98                	cdqe   
    dd38:	48 83 c0 69          	add    rax,0x69
    dd3c:	48 c1 e0 07          	shl    rax,0x7
    dd40:	48 89 c2             	mov    rdx,rax
    dd43:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dd4a:	48 01 d0             	add    rax,rdx
    dd4d:	48 8d 78 08          	lea    rdi,[rax+0x8]
    dd51:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
    dd57:	48 98                	cdqe   
    dd59:	48 c1 e0 0a          	shl    rax,0xa
    dd5d:	48 8d 90 80 36 00 00 	lea    rdx,[rax+0x3680]
    dd64:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dd6b:	48 01 d0             	add    rax,rdx
    dd6e:	4c 8d 50 08          	lea    r10,[rax+0x8]
    dd72:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dd79:	48 8d 90 48 1a 00 00 	lea    rdx,[rax+0x1a48]
    dd80:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [rbp-0xb4]
    dd86:	48 98                	cdqe   
    dd88:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    dd8f:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
    dd93:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dd9a:	4c 8d 40 08          	lea    r8,[rax+0x8]
    dd9e:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
    dda5:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    ddab:	48 63 d0             	movsxd rdx,eax
    ddae:	48 89 d0             	mov    rax,rdx
    ddb1:	48 01 c0             	add    rax,rax
    ddb4:	48 01 d0             	add    rax,rdx
    ddb7:	48 c1 e0 05          	shl    rax,0x5
    ddbb:	48 01 f0             	add    rax,rsi
    ddbe:	48 05 b0 46 00 00    	add    rax,0x46b0
    ddc4:	8b 00                	mov    eax,DWORD PTR [rax]
    ddc6:	48 98                	cdqe   
    ddc8:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    ddcf:	49 8d 14 00          	lea    rdx,[r8+rax*1]
    ddd3:	44 8b 85 40 ff ff ff 	mov    r8d,DWORD PTR [rbp-0xc0]
    ddda:	48 8d b5 70 ff ff ff 	lea    rsi,[rbp-0x90]
    dde1:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dde8:	48 83 ec 08          	sub    rsp,0x8
    ddec:	57                   	push   rdi
    dded:	45 89 c1             	mov    r9d,r8d
    ddf0:	4d 89 d0             	mov    r8,r10
    ddf3:	48 89 c7             	mov    rdi,rax
    ddf6:	e8 08 a3 ff ff       	call   8103 <stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)>
    ddfb:	48 83 c4 10          	add    rsp,0x10
    ddff:	85 c0                	test   eax,eax
    de01:	0f 94 c0             	sete   al
    de04:	84 c0                	test   al,al
    de06:	74 0a                	je     de12 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x5ca>
    de08:	b8 00 00 00 00       	mov    eax,0x0
    de0d:	e9 6e 08 00 00       	jmp    e680 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    de12:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    de19:	4c 8b 80 70 48 00 00 	mov    r8,QWORD PTR [rax+0x4870]
    de20:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    de27:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    de2d:	48 63 d0             	movsxd rdx,eax
    de30:	48 89 d0             	mov    rax,rdx
    de33:	48 01 c0             	add    rax,rax
    de36:	48 01 d0             	add    rax,rdx
    de39:	48 c1 e0 05          	shl    rax,0x5
    de3d:	48 01 c8             	add    rax,rcx
    de40:	48 05 c4 46 00 00    	add    rax,0x46c4
    de46:	8b 08                	mov    ecx,DWORD PTR [rax]
    de48:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
    de4f:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    de55:	48 63 d0             	movsxd rdx,eax
    de58:	48 89 d0             	mov    rax,rdx
    de5b:	48 01 c0             	add    rax,rax
    de5e:	48 01 d0             	add    rax,rdx
    de61:	48 c1 e0 05          	shl    rax,0x5
    de65:	48 01 f0             	add    rax,rsi
    de68:	48 05 d0 46 00 00    	add    rax,0x46d0
    de6e:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    de71:	48 8b bd d8 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x128]
    de78:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    de7e:	48 63 d0             	movsxd rdx,eax
    de81:	48 89 d0             	mov    rax,rdx
    de84:	48 01 c0             	add    rax,rax
    de87:	48 01 d0             	add    rax,rdx
    de8a:	48 c1 e0 05          	shl    rax,0x5
    de8e:	48 01 f8             	add    rax,rdi
    de91:	48 05 c4 46 00 00    	add    rax,0x46c4
    de97:	8b 00                	mov    eax,DWORD PTR [rax]
    de99:	0f af 85 48 ff ff ff 	imul   eax,DWORD PTR [rbp-0xb8]
    dea0:	48 63 d0             	movsxd rdx,eax
    dea3:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
    dea9:	48 98                	cdqe   
    deab:	48 01 d0             	add    rax,rdx
    deae:	48 8d 3c 06          	lea    rdi,[rsi+rax*1]
    deb2:	48 8d 85 70 ff ff ff 	lea    rax,[rbp-0x90]
    deb9:	48 89 c2             	mov    rdx,rax
    debc:	89 ce                	mov    esi,ecx
    debe:	41 ff d0             	call   r8
    dec1:	83 85 00 ff ff ff 01 	add    DWORD PTR [rbp-0x100],0x1
    dec8:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    decf:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    ded5:	48 63 d0             	movsxd rdx,eax
    ded8:	48 89 d0             	mov    rax,rdx
    dedb:	48 01 c0             	add    rax,rax
    dede:	48 01 d0             	add    rax,rdx
    dee1:	48 c1 e0 05          	shl    rax,0x5
    dee5:	48 01 c8             	add    rax,rcx
    dee8:	48 05 a4 46 00 00    	add    rax,0x46a4
    deee:	8b 00                	mov    eax,DWORD PTR [rax]
    def0:	39 85 00 ff ff ff    	cmp    DWORD PTR [rbp-0x100],eax
    def6:	0f 8c 60 fd ff ff    	jl     dc5c <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x414>
    defc:	83 85 04 ff ff ff 01 	add    DWORD PTR [rbp-0xfc],0x1
    df03:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    df0a:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
    df10:	48 63 d0             	movsxd rdx,eax
    df13:	48 89 d0             	mov    rax,rdx
    df16:	48 01 c0             	add    rax,rax
    df19:	48 01 d0             	add    rax,rdx
    df1c:	48 c1 e0 05          	shl    rax,0x5
    df20:	48 01 c8             	add    rax,rcx
    df23:	48 05 a8 46 00 00    	add    rax,0x46a8
    df29:	8b 00                	mov    eax,DWORD PTR [rax]
    df2b:	39 85 04 ff ff ff    	cmp    DWORD PTR [rbp-0xfc],eax
    df31:	0f 8c 16 fd ff ff    	jl     dc4d <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x405>
    df37:	83 85 fc fe ff ff 01 	add    DWORD PTR [rbp-0x104],0x1
    df3e:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    df45:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    df4b:	39 85 fc fe ff ff    	cmp    DWORD PTR [rbp-0x104],eax
    df51:	0f 8c c6 fc ff ff    	jl     dc1d <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x3d5>
    df57:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    df5e:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    df64:	8d 50 ff             	lea    edx,[rax-0x1]
    df67:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    df6e:	89 90 6c 48 00 00    	mov    DWORD PTR [rax+0x486c],edx
    df74:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    df7b:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    df81:	85 c0                	test   eax,eax
    df83:	0f 9e c0             	setle  al
    df86:	84 c0                	test   al,al
    df88:	74 5e                	je     dfe8 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x7a0>
    df8a:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    df91:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    df97:	83 f8 17             	cmp    eax,0x17
    df9a:	7f 0f                	jg     dfab <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x763>
    df9c:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dfa3:	48 89 c7             	mov    rdi,rax
    dfa6:	e8 d6 9b ff ff       	call   7b81 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    dfab:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dfb2:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    dfb9:	3c cf                	cmp    al,0xcf
    dfbb:	76 12                	jbe    dfcf <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x787>
    dfbd:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dfc4:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    dfcb:	3c d7                	cmp    al,0xd7
    dfcd:	76 0a                	jbe    dfd9 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x791>
    dfcf:	b8 01 00 00 00       	mov    eax,0x1
    dfd4:	e9 a7 06 00 00       	jmp    e680 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    dfd9:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dfe0:	48 89 c7             	mov    rdi,rax
    dfe3:	e8 9f f7 ff ff       	call   d787 <stbi__jpeg_reset(stbi__jpeg*)>
    dfe8:	83 85 f4 fe ff ff 01 	add    DWORD PTR [rbp-0x10c],0x1
    dfef:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    dff6:	8b 80 90 46 00 00    	mov    eax,DWORD PTR [rax+0x4690]
    dffc:	39 85 f4 fe ff ff    	cmp    DWORD PTR [rbp-0x10c],eax
    e002:	0f 8c 06 fc ff ff    	jl     dc0e <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x3c6>
    e008:	83 85 f8 fe ff ff 01 	add    DWORD PTR [rbp-0x108],0x1
    e00f:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e016:	8b 80 94 46 00 00    	mov    eax,DWORD PTR [rax+0x4694]
    e01c:	39 85 f8 fe ff ff    	cmp    DWORD PTR [rbp-0x108],eax
    e022:	0f 8c d7 fb ff ff    	jl     dbff <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x3b7>
    e028:	b8 01 00 00 00       	mov    eax,0x1
    e02d:	e9 4e 06 00 00       	jmp    e680 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    e032:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e039:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    e03f:	83 f8 01             	cmp    eax,0x1
    e042:	0f 85 fe 02 00 00    	jne    e346 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xafe>
    e048:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e04f:	8b 80 58 48 00 00    	mov    eax,DWORD PTR [rax+0x4858]
    e055:	89 85 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],eax
    e05b:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e062:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd0]
    e068:	48 63 d0             	movsxd rdx,eax
    e06b:	48 89 d0             	mov    rax,rdx
    e06e:	48 01 c0             	add    rax,rax
    e071:	48 01 d0             	add    rax,rdx
    e074:	48 c1 e0 05          	shl    rax,0x5
    e078:	48 01 c8             	add    rax,rcx
    e07b:	48 05 bc 46 00 00    	add    rax,0x46bc
    e081:	8b 00                	mov    eax,DWORD PTR [rax]
    e083:	83 c0 07             	add    eax,0x7
    e086:	c1 f8 03             	sar    eax,0x3
    e089:	89 85 34 ff ff ff    	mov    DWORD PTR [rbp-0xcc],eax
    e08f:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e096:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd0]
    e09c:	48 63 d0             	movsxd rdx,eax
    e09f:	48 89 d0             	mov    rax,rdx
    e0a2:	48 01 c0             	add    rax,rax
    e0a5:	48 01 d0             	add    rax,rdx
    e0a8:	48 c1 e0 05          	shl    rax,0x5
    e0ac:	48 01 c8             	add    rax,rcx
    e0af:	48 05 c0 46 00 00    	add    rax,0x46c0
    e0b5:	8b 00                	mov    eax,DWORD PTR [rax]
    e0b7:	83 c0 07             	add    eax,0x7
    e0ba:	c1 f8 03             	sar    eax,0x3
    e0bd:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
    e0c3:	c7 85 0c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf4],0x0
    e0cd:	e9 58 02 00 00       	jmp    e32a <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xae2>
    e0d2:	c7 85 08 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf8],0x0
    e0dc:	e9 30 02 00 00       	jmp    e311 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xac9>
    e0e1:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e0e8:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd0]
    e0ee:	48 63 d0             	movsxd rdx,eax
    e0f1:	48 89 d0             	mov    rax,rdx
    e0f4:	48 01 c0             	add    rax,rax
    e0f7:	48 01 d0             	add    rax,rdx
    e0fa:	48 c1 e0 05          	shl    rax,0x5
    e0fe:	48 01 c8             	add    rax,rcx
    e101:	48 05 f0 46 00 00    	add    rax,0x46f0
    e107:	48 8b 08             	mov    rcx,QWORD PTR [rax]
    e10a:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
    e111:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd0]
    e117:	48 63 d0             	movsxd rdx,eax
    e11a:	48 89 d0             	mov    rax,rdx
    e11d:	48 01 c0             	add    rax,rax
    e120:	48 01 d0             	add    rax,rdx
    e123:	48 c1 e0 05          	shl    rax,0x5
    e127:	48 01 f0             	add    rax,rsi
    e12a:	48 05 f8 46 00 00    	add    rax,0x46f8
    e130:	8b 00                	mov    eax,DWORD PTR [rax]
    e132:	0f af 85 0c ff ff ff 	imul   eax,DWORD PTR [rbp-0xf4]
    e139:	89 c2                	mov    edx,eax
    e13b:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
    e141:	01 d0                	add    eax,edx
    e143:	c1 e0 06             	shl    eax,0x6
    e146:	48 98                	cdqe   
    e148:	48 01 c0             	add    rax,rax
    e14b:	48 01 c8             	add    rax,rcx
    e14e:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
    e155:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e15c:	8b 80 34 48 00 00    	mov    eax,DWORD PTR [rax+0x4834]
    e162:	85 c0                	test   eax,eax
    e164:	75 77                	jne    e1dd <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x995>
    e166:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e16d:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd0]
    e173:	48 63 d0             	movsxd rdx,eax
    e176:	48 89 d0             	mov    rax,rdx
    e179:	48 01 c0             	add    rax,rax
    e17c:	48 01 d0             	add    rax,rdx
    e17f:	48 c1 e0 05          	shl    rax,0x5
    e183:	48 01 c8             	add    rax,rcx
    e186:	48 05 b0 46 00 00    	add    rax,0x46b0
    e18c:	8b 00                	mov    eax,DWORD PTR [rax]
    e18e:	48 98                	cdqe   
    e190:	48 69 d0 90 06 00 00 	imul   rdx,rax,0x690
    e197:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e19e:	48 01 d0             	add    rax,rdx
    e1a1:	48 8d 78 08          	lea    rdi,[rax+0x8]
    e1a5:	8b 95 30 ff ff ff    	mov    edx,DWORD PTR [rbp-0xd0]
    e1ab:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
    e1b2:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e1b9:	89 d1                	mov    ecx,edx
    e1bb:	48 89 fa             	mov    rdx,rdi
    e1be:	48 89 c7             	mov    rdi,rax
    e1c1:	e8 f4 a1 ff ff       	call   83ba <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)>
    e1c6:	85 c0                	test   eax,eax
    e1c8:	0f 94 c0             	sete   al
    e1cb:	84 c0                	test   al,al
    e1cd:	0f 84 a6 00 00 00    	je     e279 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xa31>
    e1d3:	b8 00 00 00 00       	mov    eax,0x0
    e1d8:	e9 a3 04 00 00       	jmp    e680 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    e1dd:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e1e4:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd0]
    e1ea:	48 63 d0             	movsxd rdx,eax
    e1ed:	48 89 d0             	mov    rax,rdx
    e1f0:	48 01 c0             	add    rax,rax
    e1f3:	48 01 d0             	add    rax,rdx
    e1f6:	48 c1 e0 05          	shl    rax,0x5
    e1fa:	48 01 c8             	add    rax,rcx
    e1fd:	48 05 b4 46 00 00    	add    rax,0x46b4
    e203:	8b 00                	mov    eax,DWORD PTR [rax]
    e205:	89 85 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],eax
    e20b:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
    e211:	48 98                	cdqe   
    e213:	48 c1 e0 0a          	shl    rax,0xa
    e217:	48 8d 90 80 36 00 00 	lea    rdx,[rax+0x3680]
    e21e:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e225:	48 01 d0             	add    rax,rdx
    e228:	48 8d 48 08          	lea    rcx,[rax+0x8]
    e22c:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
    e232:	48 98                	cdqe   
    e234:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    e23b:	48 8d 90 40 1a 00 00 	lea    rdx,[rax+0x1a40]
    e242:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e249:	48 01 d0             	add    rax,rdx
    e24c:	48 8d 50 08          	lea    rdx,[rax+0x8]
    e250:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
    e257:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e25e:	48 89 c7             	mov    rdi,rax
    e261:	e8 ba a2 ff ff       	call   8520 <stbi__jpeg_decode_block_prog_ac(stbi__jpeg*, short*, stbi__huffman*, short*)>
    e266:	85 c0                	test   eax,eax
    e268:	0f 94 c0             	sete   al
    e26b:	84 c0                	test   al,al
    e26d:	74 0a                	je     e279 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xa31>
    e26f:	b8 00 00 00 00       	mov    eax,0x0
    e274:	e9 07 04 00 00       	jmp    e680 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    e279:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e280:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    e286:	8d 50 ff             	lea    edx,[rax-0x1]
    e289:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e290:	89 90 6c 48 00 00    	mov    DWORD PTR [rax+0x486c],edx
    e296:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e29d:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    e2a3:	85 c0                	test   eax,eax
    e2a5:	0f 9e c0             	setle  al
    e2a8:	84 c0                	test   al,al
    e2aa:	74 5e                	je     e30a <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xac2>
    e2ac:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e2b3:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    e2b9:	83 f8 17             	cmp    eax,0x17
    e2bc:	7f 0f                	jg     e2cd <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xa85>
    e2be:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e2c5:	48 89 c7             	mov    rdi,rax
    e2c8:	e8 b4 98 ff ff       	call   7b81 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    e2cd:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e2d4:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    e2db:	3c cf                	cmp    al,0xcf
    e2dd:	76 12                	jbe    e2f1 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xaa9>
    e2df:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e2e6:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    e2ed:	3c d7                	cmp    al,0xd7
    e2ef:	76 0a                	jbe    e2fb <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xab3>
    e2f1:	b8 01 00 00 00       	mov    eax,0x1
    e2f6:	e9 85 03 00 00       	jmp    e680 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    e2fb:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e302:	48 89 c7             	mov    rdi,rax
    e305:	e8 7d f4 ff ff       	call   d787 <stbi__jpeg_reset(stbi__jpeg*)>
    e30a:	83 85 08 ff ff ff 01 	add    DWORD PTR [rbp-0xf8],0x1
    e311:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
    e317:	3b 85 34 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xcc]
    e31d:	0f 8c be fd ff ff    	jl     e0e1 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x899>
    e323:	83 85 0c ff ff ff 01 	add    DWORD PTR [rbp-0xf4],0x1
    e32a:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
    e330:	3b 85 38 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xc8]
    e336:	0f 8c 96 fd ff ff    	jl     e0d2 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0x88a>
    e33c:	b8 01 00 00 00       	mov    eax,0x1
    e341:	e9 3a 03 00 00       	jmp    e680 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    e346:	c7 85 14 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xec],0x0
    e350:	e9 0d 03 00 00       	jmp    e662 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe1a>
    e355:	c7 85 10 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf0],0x0
    e35f:	e9 de 02 00 00       	jmp    e642 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xdfa>
    e364:	c7 85 18 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe8],0x0
    e36e:	e9 21 02 00 00       	jmp    e594 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xd4c>
    e373:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e37a:	8b 95 18 ff ff ff    	mov    edx,DWORD PTR [rbp-0xe8]
    e380:	48 63 d2             	movsxd rdx,edx
    e383:	48 81 c2 14 12 00 00 	add    rdx,0x1214
    e38a:	8b 44 90 08          	mov    eax,DWORD PTR [rax+rdx*4+0x8]
    e38e:	89 85 24 ff ff ff    	mov    DWORD PTR [rbp-0xdc],eax
    e394:	c7 85 20 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe0],0x0
    e39e:	e9 b6 01 00 00       	jmp    e559 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xd11>
    e3a3:	c7 85 1c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe4],0x0
    e3ad:	e9 6c 01 00 00       	jmp    e51e <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xcd6>
    e3b2:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e3b9:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
    e3bf:	48 63 d0             	movsxd rdx,eax
    e3c2:	48 89 d0             	mov    rax,rdx
    e3c5:	48 01 c0             	add    rax,rax
    e3c8:	48 01 d0             	add    rax,rdx
    e3cb:	48 c1 e0 05          	shl    rax,0x5
    e3cf:	48 01 c8             	add    rax,rcx
    e3d2:	48 05 a4 46 00 00    	add    rax,0x46a4
    e3d8:	8b 00                	mov    eax,DWORD PTR [rax]
    e3da:	0f af 85 10 ff ff ff 	imul   eax,DWORD PTR [rbp-0xf0]
    e3e1:	89 c2                	mov    edx,eax
    e3e3:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
    e3e9:	01 d0                	add    eax,edx
    e3eb:	89 85 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],eax
    e3f1:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e3f8:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
    e3fe:	48 63 d0             	movsxd rdx,eax
    e401:	48 89 d0             	mov    rax,rdx
    e404:	48 01 c0             	add    rax,rax
    e407:	48 01 d0             	add    rax,rdx
    e40a:	48 c1 e0 05          	shl    rax,0x5
    e40e:	48 01 c8             	add    rax,rcx
    e411:	48 05 a8 46 00 00    	add    rax,0x46a8
    e417:	8b 00                	mov    eax,DWORD PTR [rax]
    e419:	0f af 85 14 ff ff ff 	imul   eax,DWORD PTR [rbp-0xec]
    e420:	89 c2                	mov    edx,eax
    e422:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
    e428:	01 d0                	add    eax,edx
    e42a:	89 85 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],eax
    e430:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e437:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
    e43d:	48 63 d0             	movsxd rdx,eax
    e440:	48 89 d0             	mov    rax,rdx
    e443:	48 01 c0             	add    rax,rax
    e446:	48 01 d0             	add    rax,rdx
    e449:	48 c1 e0 05          	shl    rax,0x5
    e44d:	48 01 c8             	add    rax,rcx
    e450:	48 05 f0 46 00 00    	add    rax,0x46f0
    e456:	48 8b 08             	mov    rcx,QWORD PTR [rax]
    e459:	48 8b b5 d8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x128]
    e460:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
    e466:	48 63 d0             	movsxd rdx,eax
    e469:	48 89 d0             	mov    rax,rdx
    e46c:	48 01 c0             	add    rax,rax
    e46f:	48 01 d0             	add    rax,rdx
    e472:	48 c1 e0 05          	shl    rax,0x5
    e476:	48 01 f0             	add    rax,rsi
    e479:	48 05 f8 46 00 00    	add    rax,0x46f8
    e47f:	8b 00                	mov    eax,DWORD PTR [rax]
    e481:	0f af 85 2c ff ff ff 	imul   eax,DWORD PTR [rbp-0xd4]
    e488:	89 c2                	mov    edx,eax
    e48a:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
    e490:	01 d0                	add    eax,edx
    e492:	c1 e0 06             	shl    eax,0x6
    e495:	48 98                	cdqe   
    e497:	48 01 c0             	add    rax,rax
    e49a:	48 01 c8             	add    rax,rcx
    e49d:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
    e4a4:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e4ab:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
    e4b1:	48 63 d0             	movsxd rdx,eax
    e4b4:	48 89 d0             	mov    rax,rdx
    e4b7:	48 01 c0             	add    rax,rax
    e4ba:	48 01 d0             	add    rax,rdx
    e4bd:	48 c1 e0 05          	shl    rax,0x5
    e4c1:	48 01 c8             	add    rax,rcx
    e4c4:	48 05 b0 46 00 00    	add    rax,0x46b0
    e4ca:	8b 00                	mov    eax,DWORD PTR [rax]
    e4cc:	48 98                	cdqe   
    e4ce:	48 69 d0 90 06 00 00 	imul   rdx,rax,0x690
    e4d5:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e4dc:	48 01 d0             	add    rax,rdx
    e4df:	48 8d 78 08          	lea    rdi,[rax+0x8]
    e4e3:	8b 95 24 ff ff ff    	mov    edx,DWORD PTR [rbp-0xdc]
    e4e9:	48 8b b5 60 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xa0]
    e4f0:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e4f7:	89 d1                	mov    ecx,edx
    e4f9:	48 89 fa             	mov    rdx,rdi
    e4fc:	48 89 c7             	mov    rdi,rax
    e4ff:	e8 b6 9e ff ff       	call   83ba <stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int)>
    e504:	85 c0                	test   eax,eax
    e506:	0f 94 c0             	sete   al
    e509:	84 c0                	test   al,al
    e50b:	74 0a                	je     e517 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xccf>
    e50d:	b8 00 00 00 00       	mov    eax,0x0
    e512:	e9 69 01 00 00       	jmp    e680 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    e517:	83 85 1c ff ff ff 01 	add    DWORD PTR [rbp-0xe4],0x1
    e51e:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e525:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
    e52b:	48 63 d0             	movsxd rdx,eax
    e52e:	48 89 d0             	mov    rax,rdx
    e531:	48 01 c0             	add    rax,rax
    e534:	48 01 d0             	add    rax,rdx
    e537:	48 c1 e0 05          	shl    rax,0x5
    e53b:	48 01 c8             	add    rax,rcx
    e53e:	48 05 a4 46 00 00    	add    rax,0x46a4
    e544:	8b 00                	mov    eax,DWORD PTR [rax]
    e546:	39 85 1c ff ff ff    	cmp    DWORD PTR [rbp-0xe4],eax
    e54c:	0f 8c 60 fe ff ff    	jl     e3b2 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xb6a>
    e552:	83 85 20 ff ff ff 01 	add    DWORD PTR [rbp-0xe0],0x1
    e559:	48 8b 8d d8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x128]
    e560:	8b 85 24 ff ff ff    	mov    eax,DWORD PTR [rbp-0xdc]
    e566:	48 63 d0             	movsxd rdx,eax
    e569:	48 89 d0             	mov    rax,rdx
    e56c:	48 01 c0             	add    rax,rax
    e56f:	48 01 d0             	add    rax,rdx
    e572:	48 c1 e0 05          	shl    rax,0x5
    e576:	48 01 c8             	add    rax,rcx
    e579:	48 05 a8 46 00 00    	add    rax,0x46a8
    e57f:	8b 00                	mov    eax,DWORD PTR [rax]
    e581:	39 85 20 ff ff ff    	cmp    DWORD PTR [rbp-0xe0],eax
    e587:	0f 8c 16 fe ff ff    	jl     e3a3 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xb5b>
    e58d:	83 85 18 ff ff ff 01 	add    DWORD PTR [rbp-0xe8],0x1
    e594:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e59b:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    e5a1:	39 85 18 ff ff ff    	cmp    DWORD PTR [rbp-0xe8],eax
    e5a7:	0f 8c c6 fd ff ff    	jl     e373 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xb2b>
    e5ad:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e5b4:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    e5ba:	8d 50 ff             	lea    edx,[rax-0x1]
    e5bd:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e5c4:	89 90 6c 48 00 00    	mov    DWORD PTR [rax+0x486c],edx
    e5ca:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e5d1:	8b 80 6c 48 00 00    	mov    eax,DWORD PTR [rax+0x486c]
    e5d7:	85 c0                	test   eax,eax
    e5d9:	0f 9e c0             	setle  al
    e5dc:	84 c0                	test   al,al
    e5de:	74 5b                	je     e63b <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xdf3>
    e5e0:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e5e7:	8b 80 24 48 00 00    	mov    eax,DWORD PTR [rax+0x4824]
    e5ed:	83 f8 17             	cmp    eax,0x17
    e5f0:	7f 0f                	jg     e601 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xdb9>
    e5f2:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e5f9:	48 89 c7             	mov    rdi,rax
    e5fc:	e8 80 95 ff ff       	call   7b81 <stbi__grow_buffer_unsafe(stbi__jpeg*)>
    e601:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e608:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    e60f:	3c cf                	cmp    al,0xcf
    e611:	76 12                	jbe    e625 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xddd>
    e613:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e61a:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
    e621:	3c d7                	cmp    al,0xd7
    e623:	76 07                	jbe    e62c <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xde4>
    e625:	b8 01 00 00 00       	mov    eax,0x1
    e62a:	eb 54                	jmp    e680 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe38>
    e62c:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e633:	48 89 c7             	mov    rdi,rax
    e636:	e8 4c f1 ff ff       	call   d787 <stbi__jpeg_reset(stbi__jpeg*)>
    e63b:	83 85 10 ff ff ff 01 	add    DWORD PTR [rbp-0xf0],0x1
    e642:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e649:	8b 80 90 46 00 00    	mov    eax,DWORD PTR [rax+0x4690]
    e64f:	39 85 10 ff ff ff    	cmp    DWORD PTR [rbp-0xf0],eax
    e655:	0f 8c 09 fd ff ff    	jl     e364 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xb1c>
    e65b:	83 85 14 ff ff ff 01 	add    DWORD PTR [rbp-0xec],0x1
    e662:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
    e669:	8b 80 94 46 00 00    	mov    eax,DWORD PTR [rax+0x4694]
    e66f:	39 85 14 ff ff ff    	cmp    DWORD PTR [rbp-0xec],eax
    e675:	0f 8c da fc ff ff    	jl     e355 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xb0d>
    e67b:	b8 01 00 00 00       	mov    eax,0x1
    e680:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    e684:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    e68d:	74 05                	je     e694 <stbi__parse_entropy_coded_data(stbi__jpeg*)+0xe4c>
    e68f:	e8 4c 5e ff ff       	call   44e0 <__stack_chk_fail@plt>
    e694:	c9                   	leave  
    e695:	c3                   	ret    

000000000000e696 <stbi__jpeg_dequantize(short*, unsigned short*)>:
    e696:	55                   	push   rbp
    e697:	48 89 e5             	mov    rbp,rsp
    e69a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    e69e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    e6a2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    e6a9:	eb 42                	jmp    e6ed <stbi__jpeg_dequantize(short*, unsigned short*)+0x57>
    e6ab:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    e6ae:	48 98                	cdqe   
    e6b0:	48 8d 14 00          	lea    rdx,[rax+rax*1]
    e6b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    e6b8:	48 01 d0             	add    rax,rdx
    e6bb:	0f b7 00             	movzx  eax,WORD PTR [rax]
    e6be:	89 c2                	mov    edx,eax
    e6c0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    e6c3:	48 98                	cdqe   
    e6c5:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    e6c9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    e6cd:	48 01 c8             	add    rax,rcx
    e6d0:	0f b7 00             	movzx  eax,WORD PTR [rax]
    e6d3:	0f af d0             	imul   edx,eax
    e6d6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    e6d9:	48 98                	cdqe   
    e6db:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
    e6df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    e6e3:	48 01 c8             	add    rax,rcx
    e6e6:	66 89 10             	mov    WORD PTR [rax],dx
    e6e9:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
    e6ed:	83 7d fc 3f          	cmp    DWORD PTR [rbp-0x4],0x3f
    e6f1:	7e b8                	jle    e6ab <stbi__jpeg_dequantize(short*, unsigned short*)+0x15>
    e6f3:	90                   	nop
    e6f4:	90                   	nop
    e6f5:	5d                   	pop    rbp
    e6f6:	c3                   	ret    

000000000000e6f7 <stbi__jpeg_finish(stbi__jpeg*)>:
    e6f7:	55                   	push   rbp
    e6f8:	48 89 e5             	mov    rbp,rsp
    e6fb:	48 83 ec 30          	sub    rsp,0x30
    e6ff:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    e703:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e707:	8b 80 30 48 00 00    	mov    eax,DWORD PTR [rax+0x4830]
    e70d:	85 c0                	test   eax,eax
    e70f:	0f 84 f0 01 00 00    	je     e905 <stbi__jpeg_finish(stbi__jpeg*)+0x20e>
    e715:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    e71c:	e9 d1 01 00 00       	jmp    e8f2 <stbi__jpeg_finish(stbi__jpeg*)+0x1fb>
    e721:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    e725:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e728:	48 63 d0             	movsxd rdx,eax
    e72b:	48 89 d0             	mov    rax,rdx
    e72e:	48 01 c0             	add    rax,rax
    e731:	48 01 d0             	add    rax,rdx
    e734:	48 c1 e0 05          	shl    rax,0x5
    e738:	48 01 c8             	add    rax,rcx
    e73b:	48 05 bc 46 00 00    	add    rax,0x46bc
    e741:	8b 00                	mov    eax,DWORD PTR [rax]
    e743:	83 c0 07             	add    eax,0x7
    e746:	c1 f8 03             	sar    eax,0x3
    e749:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    e74c:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    e750:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e753:	48 63 d0             	movsxd rdx,eax
    e756:	48 89 d0             	mov    rax,rdx
    e759:	48 01 c0             	add    rax,rax
    e75c:	48 01 d0             	add    rax,rdx
    e75f:	48 c1 e0 05          	shl    rax,0x5
    e763:	48 01 c8             	add    rax,rcx
    e766:	48 05 c0 46 00 00    	add    rax,0x46c0
    e76c:	8b 00                	mov    eax,DWORD PTR [rax]
    e76e:	83 c0 07             	add    eax,0x7
    e771:	c1 f8 03             	sar    eax,0x3
    e774:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    e777:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
    e77e:	e9 5f 01 00 00       	jmp    e8e2 <stbi__jpeg_finish(stbi__jpeg*)+0x1eb>
    e783:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    e78a:	e9 43 01 00 00       	jmp    e8d2 <stbi__jpeg_finish(stbi__jpeg*)+0x1db>
    e78f:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    e793:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e796:	48 63 d0             	movsxd rdx,eax
    e799:	48 89 d0             	mov    rax,rdx
    e79c:	48 01 c0             	add    rax,rax
    e79f:	48 01 d0             	add    rax,rdx
    e7a2:	48 c1 e0 05          	shl    rax,0x5
    e7a6:	48 01 c8             	add    rax,rcx
    e7a9:	48 05 f0 46 00 00    	add    rax,0x46f0
    e7af:	48 8b 08             	mov    rcx,QWORD PTR [rax]
    e7b2:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
    e7b6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e7b9:	48 63 d0             	movsxd rdx,eax
    e7bc:	48 89 d0             	mov    rax,rdx
    e7bf:	48 01 c0             	add    rax,rax
    e7c2:	48 01 d0             	add    rax,rdx
    e7c5:	48 c1 e0 05          	shl    rax,0x5
    e7c9:	48 01 f0             	add    rax,rsi
    e7cc:	48 05 f8 46 00 00    	add    rax,0x46f8
    e7d2:	8b 00                	mov    eax,DWORD PTR [rax]
    e7d4:	0f af 45 e8          	imul   eax,DWORD PTR [rbp-0x18]
    e7d8:	89 c2                	mov    edx,eax
    e7da:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    e7dd:	01 d0                	add    eax,edx
    e7df:	c1 e0 06             	shl    eax,0x6
    e7e2:	48 98                	cdqe   
    e7e4:	48 01 c0             	add    rax,rax
    e7e7:	48 01 c8             	add    rax,rcx
    e7ea:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    e7ee:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    e7f2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e7f5:	48 63 d0             	movsxd rdx,eax
    e7f8:	48 89 d0             	mov    rax,rdx
    e7fb:	48 01 c0             	add    rax,rax
    e7fe:	48 01 d0             	add    rax,rdx
    e801:	48 c1 e0 05          	shl    rax,0x5
    e805:	48 01 c8             	add    rax,rcx
    e808:	48 05 ac 46 00 00    	add    rax,0x46ac
    e80e:	8b 00                	mov    eax,DWORD PTR [rax]
    e810:	48 98                	cdqe   
    e812:	48 83 c0 69          	add    rax,0x69
    e816:	48 c1 e0 07          	shl    rax,0x7
    e81a:	48 89 c2             	mov    rdx,rax
    e81d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e821:	48 01 d0             	add    rax,rdx
    e824:	48 8d 50 08          	lea    rdx,[rax+0x8]
    e828:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e82c:	48 89 d6             	mov    rsi,rdx
    e82f:	48 89 c7             	mov    rdi,rax
    e832:	e8 5f fe ff ff       	call   e696 <stbi__jpeg_dequantize(short*, unsigned short*)>
    e837:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e83b:	4c 8b 80 70 48 00 00 	mov    r8,QWORD PTR [rax+0x4870]
    e842:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    e846:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e849:	48 63 d0             	movsxd rdx,eax
    e84c:	48 89 d0             	mov    rax,rdx
    e84f:	48 01 c0             	add    rax,rax
    e852:	48 01 d0             	add    rax,rdx
    e855:	48 c1 e0 05          	shl    rax,0x5
    e859:	48 01 c8             	add    rax,rcx
    e85c:	48 05 c4 46 00 00    	add    rax,0x46c4
    e862:	8b 08                	mov    ecx,DWORD PTR [rax]
    e864:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
    e868:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e86b:	48 63 d0             	movsxd rdx,eax
    e86e:	48 89 d0             	mov    rax,rdx
    e871:	48 01 c0             	add    rax,rax
    e874:	48 01 d0             	add    rax,rdx
    e877:	48 c1 e0 05          	shl    rax,0x5
    e87b:	48 01 f0             	add    rax,rsi
    e87e:	48 05 d0 46 00 00    	add    rax,0x46d0
    e884:	48 8b 30             	mov    rsi,QWORD PTR [rax]
    e887:	48 8b 7d d8          	mov    rdi,QWORD PTR [rbp-0x28]
    e88b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    e88e:	48 63 d0             	movsxd rdx,eax
    e891:	48 89 d0             	mov    rax,rdx
    e894:	48 01 c0             	add    rax,rax
    e897:	48 01 d0             	add    rax,rdx
    e89a:	48 c1 e0 05          	shl    rax,0x5
    e89e:	48 01 f8             	add    rax,rdi
    e8a1:	48 05 c4 46 00 00    	add    rax,0x46c4
    e8a7:	8b 00                	mov    eax,DWORD PTR [rax]
    e8a9:	0f af 45 e8          	imul   eax,DWORD PTR [rbp-0x18]
    e8ad:	c1 e0 03             	shl    eax,0x3
    e8b0:	48 63 d0             	movsxd rdx,eax
    e8b3:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    e8b6:	c1 e0 03             	shl    eax,0x3
    e8b9:	48 98                	cdqe   
    e8bb:	48 01 d0             	add    rax,rdx
    e8be:	48 8d 3c 06          	lea    rdi,[rsi+rax*1]
    e8c2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    e8c6:	48 89 c2             	mov    rdx,rax
    e8c9:	89 ce                	mov    esi,ecx
    e8cb:	41 ff d0             	call   r8
    e8ce:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    e8d2:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    e8d5:	3b 45 f0             	cmp    eax,DWORD PTR [rbp-0x10]
    e8d8:	0f 8c b1 fe ff ff    	jl     e78f <stbi__jpeg_finish(stbi__jpeg*)+0x98>
    e8de:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
    e8e2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
    e8e5:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
    e8e8:	0f 8c 95 fe ff ff    	jl     e783 <stbi__jpeg_finish(stbi__jpeg*)+0x8c>
    e8ee:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
    e8f2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    e8f6:	48 8b 00             	mov    rax,QWORD PTR [rax]
    e8f9:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    e8fc:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    e8ff:	0f 8c 1c fe ff ff    	jl     e721 <stbi__jpeg_finish(stbi__jpeg*)+0x2a>
    e905:	90                   	nop
    e906:	c9                   	leave  
    e907:	c3                   	ret    

000000000000e908 <stbi__process_marker(stbi__jpeg*, int)>:
    e908:	55                   	push   rbp
    e909:	48 89 e5             	mov    rbp,rsp
    e90c:	53                   	push   rbx
    e90d:	48 81 ec b8 00 00 00 	sub    rsp,0xb8
    e914:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
    e91b:	89 b5 44 ff ff ff    	mov    DWORD PTR [rbp-0xbc],esi
    e921:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
    e92a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    e92e:	31 c0                	xor    eax,eax
    e930:	81 bd 44 ff ff ff ff 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xff
    e93a:	74 4d                	je     e989 <stbi__process_marker(stbi__jpeg*, int)+0x81>
    e93c:	81 bd 44 ff ff ff ff 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xff
    e946:	0f 8f 54 04 00 00    	jg     eda0 <stbi__process_marker(stbi__jpeg*, int)+0x498>
    e94c:	81 bd 44 ff ff ff dd 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xdd
    e956:	74 45                	je     e99d <stbi__process_marker(stbi__jpeg*, int)+0x95>
    e958:	81 bd 44 ff ff ff dd 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xdd
    e962:	0f 8f 38 04 00 00    	jg     eda0 <stbi__process_marker(stbi__jpeg*, int)+0x498>
    e968:	81 bd 44 ff ff ff c4 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xc4
    e972:	0f 84 d4 01 00 00    	je     eb4c <stbi__process_marker(stbi__jpeg*, int)+0x244>
    e978:	81 bd 44 ff ff ff db 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xdb
    e982:	74 72                	je     e9f6 <stbi__process_marker(stbi__jpeg*, int)+0xee>
    e984:	e9 17 04 00 00       	jmp    eda0 <stbi__process_marker(stbi__jpeg*, int)+0x498>
    e989:	48 8d 05 b1 bb 02 00 	lea    rax,[rip+0x2bbb1]        # 3a541 <stbi__process_marker(stbi__jpeg*, int)::tag+0x6>
    e990:	48 89 c7             	mov    rdi,rax
    e993:	e8 da 61 ff ff       	call   4b72 <stbi__err(char const*)>
    e998:	e9 4c 06 00 00       	jmp    efe9 <stbi__process_marker(stbi__jpeg*, int)+0x6e1>
    e99d:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    e9a4:	48 8b 00             	mov    rax,QWORD PTR [rax]
    e9a7:	48 89 c7             	mov    rdi,rax
    e9aa:	e8 45 7e ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
    e9af:	83 f8 04             	cmp    eax,0x4
    e9b2:	0f 95 c0             	setne  al
    e9b5:	84 c0                	test   al,al
    e9b7:	74 14                	je     e9cd <stbi__process_marker(stbi__jpeg*, int)+0xc5>
    e9b9:	48 8d 05 91 bb 02 00 	lea    rax,[rip+0x2bb91]        # 3a551 <stbi__process_marker(stbi__jpeg*, int)::tag+0x16>
    e9c0:	48 89 c7             	mov    rdi,rax
    e9c3:	e8 aa 61 ff ff       	call   4b72 <stbi__err(char const*)>
    e9c8:	e9 1c 06 00 00       	jmp    efe9 <stbi__process_marker(stbi__jpeg*, int)+0x6e1>
    e9cd:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    e9d4:	48 8b 00             	mov    rax,QWORD PTR [rax]
    e9d7:	48 89 c7             	mov    rdi,rax
    e9da:	e8 15 7e ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
    e9df:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
    e9e6:	89 82 68 48 00 00    	mov    DWORD PTR [rdx+0x4868],eax
    e9ec:	b8 01 00 00 00       	mov    eax,0x1
    e9f1:	e9 f3 05 00 00       	jmp    efe9 <stbi__process_marker(stbi__jpeg*, int)+0x6e1>
    e9f6:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    e9fd:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ea00:	48 89 c7             	mov    rdi,rax
    ea03:	e8 ec 7d ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
    ea08:	83 e8 02             	sub    eax,0x2
    ea0b:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
    ea11:	e9 17 01 00 00       	jmp    eb2d <stbi__process_marker(stbi__jpeg*, int)+0x225>
    ea16:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ea1d:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ea20:	48 89 c7             	mov    rdi,rax
    ea23:	e8 e9 7a ff ff       	call   6511 <stbi__get8(stbi__context*)>
    ea28:	0f b6 c0             	movzx  eax,al
    ea2b:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
    ea31:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
    ea37:	c1 f8 04             	sar    eax,0x4
    ea3a:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
    ea3d:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
    ea41:	0f 95 c0             	setne  al
    ea44:	0f b6 c0             	movzx  eax,al
    ea47:	89 45 84             	mov    DWORD PTR [rbp-0x7c],eax
    ea4a:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
    ea50:	83 e0 0f             	and    eax,0xf
    ea53:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
    ea56:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
    ea5a:	74 1a                	je     ea76 <stbi__process_marker(stbi__jpeg*, int)+0x16e>
    ea5c:	83 7d 80 01          	cmp    DWORD PTR [rbp-0x80],0x1
    ea60:	74 14                	je     ea76 <stbi__process_marker(stbi__jpeg*, int)+0x16e>
    ea62:	48 8d 05 f4 ba 02 00 	lea    rax,[rip+0x2baf4]        # 3a55d <stbi__process_marker(stbi__jpeg*, int)::tag+0x22>
    ea69:	48 89 c7             	mov    rdi,rax
    ea6c:	e8 01 61 ff ff       	call   4b72 <stbi__err(char const*)>
    ea71:	e9 73 05 00 00       	jmp    efe9 <stbi__process_marker(stbi__jpeg*, int)+0x6e1>
    ea76:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
    ea7a:	7e 14                	jle    ea90 <stbi__process_marker(stbi__jpeg*, int)+0x188>
    ea7c:	48 8d 05 e7 ba 02 00 	lea    rax,[rip+0x2bae7]        # 3a56a <stbi__process_marker(stbi__jpeg*, int)::tag+0x2f>
    ea83:	48 89 c7             	mov    rdi,rax
    ea86:	e8 e7 60 ff ff       	call   4b72 <stbi__err(char const*)>
    ea8b:	e9 59 05 00 00       	jmp    efe9 <stbi__process_marker(stbi__jpeg*, int)+0x6e1>
    ea90:	c7 85 60 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa0],0x0
    ea9a:	eb 70                	jmp    eb0c <stbi__process_marker(stbi__jpeg*, int)+0x204>
    ea9c:	83 7d 84 00          	cmp    DWORD PTR [rbp-0x7c],0x0
    eaa0:	74 14                	je     eab6 <stbi__process_marker(stbi__jpeg*, int)+0x1ae>
    eaa2:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    eaa9:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eaac:	48 89 c7             	mov    rdi,rax
    eaaf:	e8 40 7d ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
    eab4:	eb 15                	jmp    eacb <stbi__process_marker(stbi__jpeg*, int)+0x1c3>
    eab6:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    eabd:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eac0:	48 89 c7             	mov    rdi,rax
    eac3:	e8 49 7a ff ff       	call   6511 <stbi__get8(stbi__context*)>
    eac8:	0f b6 c0             	movzx  eax,al
    eacb:	8b 95 60 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa0]
    ead1:	48 63 d2             	movsxd rdx,edx
    ead4:	48 8d 0d e5 b9 02 00 	lea    rcx,[rip+0x2b9e5]        # 3a4c0 <stbi__jpeg_dezigzag>
    eadb:	0f b6 14 0a          	movzx  edx,BYTE PTR [rdx+rcx*1]
    eadf:	0f b6 ca             	movzx  ecx,dl
    eae2:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
    eae9:	48 63 f1             	movsxd rsi,ecx
    eaec:	8b 4d 88             	mov    ecx,DWORD PTR [rbp-0x78]
    eaef:	48 63 c9             	movsxd rcx,ecx
    eaf2:	48 c1 e1 06          	shl    rcx,0x6
    eaf6:	48 01 f1             	add    rcx,rsi
    eaf9:	48 81 c1 40 1a 00 00 	add    rcx,0x1a40
    eb00:	66 89 44 4a 08       	mov    WORD PTR [rdx+rcx*2+0x8],ax
    eb05:	83 85 60 ff ff ff 01 	add    DWORD PTR [rbp-0xa0],0x1
    eb0c:	83 bd 60 ff ff ff 3f 	cmp    DWORD PTR [rbp-0xa0],0x3f
    eb13:	7e 87                	jle    ea9c <stbi__process_marker(stbi__jpeg*, int)+0x194>
    eb15:	83 7d 84 00          	cmp    DWORD PTR [rbp-0x7c],0x0
    eb19:	74 07                	je     eb22 <stbi__process_marker(stbi__jpeg*, int)+0x21a>
    eb1b:	b8 81 00 00 00       	mov    eax,0x81
    eb20:	eb 05                	jmp    eb27 <stbi__process_marker(stbi__jpeg*, int)+0x21f>
    eb22:	b8 41 00 00 00       	mov    eax,0x41
    eb27:	29 85 5c ff ff ff    	sub    DWORD PTR [rbp-0xa4],eax
    eb2d:	83 bd 5c ff ff ff 00 	cmp    DWORD PTR [rbp-0xa4],0x0
    eb34:	0f 8f dc fe ff ff    	jg     ea16 <stbi__process_marker(stbi__jpeg*, int)+0x10e>
    eb3a:	83 bd 5c ff ff ff 00 	cmp    DWORD PTR [rbp-0xa4],0x0
    eb41:	0f 94 c0             	sete   al
    eb44:	0f b6 c0             	movzx  eax,al
    eb47:	e9 9d 04 00 00       	jmp    efe9 <stbi__process_marker(stbi__jpeg*, int)+0x6e1>
    eb4c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    eb53:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eb56:	48 89 c7             	mov    rdi,rax
    eb59:	e8 96 7c ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
    eb5e:	83 e8 02             	sub    eax,0x2
    eb61:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
    eb67:	e9 15 02 00 00       	jmp    ed81 <stbi__process_marker(stbi__jpeg*, int)+0x479>
    eb6c:	c7 85 68 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x98],0x0
    eb76:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    eb7d:	48 8b 00             	mov    rax,QWORD PTR [rax]
    eb80:	48 89 c7             	mov    rdi,rax
    eb83:	e8 89 79 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    eb88:	0f b6 c0             	movzx  eax,al
    eb8b:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
    eb8e:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
    eb91:	c1 f8 04             	sar    eax,0x4
    eb94:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
    eb97:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
    eb9a:	83 e0 0f             	and    eax,0xf
    eb9d:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
    eba0:	83 7d 90 01          	cmp    DWORD PTR [rbp-0x70],0x1
    eba4:	7f 06                	jg     ebac <stbi__process_marker(stbi__jpeg*, int)+0x2a4>
    eba6:	83 7d 94 03          	cmp    DWORD PTR [rbp-0x6c],0x3
    ebaa:	7e 14                	jle    ebc0 <stbi__process_marker(stbi__jpeg*, int)+0x2b8>
    ebac:	48 8d 05 c5 b9 02 00 	lea    rax,[rip+0x2b9c5]        # 3a578 <stbi__process_marker(stbi__jpeg*, int)::tag+0x3d>
    ebb3:	48 89 c7             	mov    rdi,rax
    ebb6:	e8 b7 5f ff ff       	call   4b72 <stbi__err(char const*)>
    ebbb:	e9 29 04 00 00       	jmp    efe9 <stbi__process_marker(stbi__jpeg*, int)+0x6e1>
    ebc0:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
    ebca:	eb 3a                	jmp    ec06 <stbi__process_marker(stbi__jpeg*, int)+0x2fe>
    ebcc:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ebd3:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ebd6:	48 89 c7             	mov    rdi,rax
    ebd9:	e8 33 79 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    ebde:	0f b6 d0             	movzx  edx,al
    ebe1:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
    ebe7:	48 98                	cdqe   
    ebe9:	89 54 85 a0          	mov    DWORD PTR [rbp+rax*4-0x60],edx
    ebed:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
    ebf3:	48 98                	cdqe   
    ebf5:	8b 44 85 a0          	mov    eax,DWORD PTR [rbp+rax*4-0x60]
    ebf9:	01 85 68 ff ff ff    	add    DWORD PTR [rbp-0x98],eax
    ebff:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
    ec06:	83 bd 64 ff ff ff 0f 	cmp    DWORD PTR [rbp-0x9c],0xf
    ec0d:	7e bd                	jle    ebcc <stbi__process_marker(stbi__jpeg*, int)+0x2c4>
    ec0f:	83 ad 5c ff ff ff 11 	sub    DWORD PTR [rbp-0xa4],0x11
    ec16:	83 7d 90 00          	cmp    DWORD PTR [rbp-0x70],0x0
    ec1a:	75 63                	jne    ec7f <stbi__process_marker(stbi__jpeg*, int)+0x377>
    ec1c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ec23:	48 8d 50 08          	lea    rdx,[rax+0x8]
    ec27:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
    ec2a:	48 98                	cdqe   
    ec2c:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    ec33:	48 01 c2             	add    rdx,rax
    ec36:	48 8d 45 a0          	lea    rax,[rbp-0x60]
    ec3a:	48 89 c6             	mov    rsi,rax
    ec3d:	48 89 d7             	mov    rdi,rdx
    ec40:	e8 a7 8b ff ff       	call   77ec <stbi__build_huffman(stbi__huffman*, int*)>
    ec45:	85 c0                	test   eax,eax
    ec47:	0f 94 c0             	sete   al
    ec4a:	84 c0                	test   al,al
    ec4c:	74 0a                	je     ec58 <stbi__process_marker(stbi__jpeg*, int)+0x350>
    ec4e:	b8 00 00 00 00       	mov    eax,0x0
    ec53:	e9 91 03 00 00       	jmp    efe9 <stbi__process_marker(stbi__jpeg*, int)+0x6e1>
    ec58:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
    ec5b:	48 98                	cdqe   
    ec5d:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    ec64:	48 8d 90 00 04 00 00 	lea    rdx,[rax+0x400]
    ec6b:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ec72:	48 01 d0             	add    rax,rdx
    ec75:	48 83 c0 08          	add    rax,0x8
    ec79:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
    ec7d:	eb 64                	jmp    ece3 <stbi__process_marker(stbi__jpeg*, int)+0x3db>
    ec7f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ec86:	48 8d 90 48 1a 00 00 	lea    rdx,[rax+0x1a48]
    ec8d:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
    ec90:	48 98                	cdqe   
    ec92:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    ec99:	48 01 c2             	add    rdx,rax
    ec9c:	48 8d 45 a0          	lea    rax,[rbp-0x60]
    eca0:	48 89 c6             	mov    rsi,rax
    eca3:	48 89 d7             	mov    rdi,rdx
    eca6:	e8 41 8b ff ff       	call   77ec <stbi__build_huffman(stbi__huffman*, int*)>
    ecab:	85 c0                	test   eax,eax
    ecad:	0f 94 c0             	sete   al
    ecb0:	84 c0                	test   al,al
    ecb2:	74 0a                	je     ecbe <stbi__process_marker(stbi__jpeg*, int)+0x3b6>
    ecb4:	b8 00 00 00 00       	mov    eax,0x0
    ecb9:	e9 2b 03 00 00       	jmp    efe9 <stbi__process_marker(stbi__jpeg*, int)+0x6e1>
    ecbe:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
    ecc1:	48 98                	cdqe   
    ecc3:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    ecca:	48 8d 90 40 1e 00 00 	lea    rdx,[rax+0x1e40]
    ecd1:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ecd8:	48 01 d0             	add    rax,rdx
    ecdb:	48 83 c0 08          	add    rax,0x8
    ecdf:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
    ece3:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
    eced:	eb 2c                	jmp    ed1b <stbi__process_marker(stbi__jpeg*, int)+0x413>
    ecef:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ecf6:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ecf9:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
    ecff:	48 63 ca             	movsxd rcx,edx
    ed02:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
    ed06:	48 8d 1c 11          	lea    rbx,[rcx+rdx*1]
    ed0a:	48 89 c7             	mov    rdi,rax
    ed0d:	e8 ff 77 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    ed12:	88 03                	mov    BYTE PTR [rbx],al
    ed14:	83 85 64 ff ff ff 01 	add    DWORD PTR [rbp-0x9c],0x1
    ed1b:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
    ed21:	3b 85 68 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x98]
    ed27:	7c c6                	jl     ecef <stbi__process_marker(stbi__jpeg*, int)+0x3e7>
    ed29:	83 7d 90 00          	cmp    DWORD PTR [rbp-0x70],0x0
    ed2d:	74 46                	je     ed75 <stbi__process_marker(stbi__jpeg*, int)+0x46d>
    ed2f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ed36:	48 8d 90 48 1a 00 00 	lea    rdx,[rax+0x1a48]
    ed3d:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
    ed40:	48 98                	cdqe   
    ed42:	48 69 c0 90 06 00 00 	imul   rax,rax,0x690
    ed49:	48 01 c2             	add    rdx,rax
    ed4c:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
    ed4f:	48 98                	cdqe   
    ed51:	48 c1 e0 0a          	shl    rax,0xa
    ed55:	48 8d 88 80 36 00 00 	lea    rcx,[rax+0x3680]
    ed5c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ed63:	48 01 c8             	add    rax,rcx
    ed66:	48 83 c0 08          	add    rax,0x8
    ed6a:	48 89 d6             	mov    rsi,rdx
    ed6d:	48 89 c7             	mov    rdi,rax
    ed70:	e8 bc 8c ff ff       	call   7a31 <stbi__build_fast_ac(short*, stbi__huffman*)>
    ed75:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
    ed7b:	29 85 5c ff ff ff    	sub    DWORD PTR [rbp-0xa4],eax
    ed81:	83 bd 5c ff ff ff 00 	cmp    DWORD PTR [rbp-0xa4],0x0
    ed88:	0f 8f de fd ff ff    	jg     eb6c <stbi__process_marker(stbi__jpeg*, int)+0x264>
    ed8e:	83 bd 5c ff ff ff 00 	cmp    DWORD PTR [rbp-0xa4],0x0
    ed95:	0f 94 c0             	sete   al
    ed98:	0f b6 c0             	movzx  eax,al
    ed9b:	e9 49 02 00 00       	jmp    efe9 <stbi__process_marker(stbi__jpeg*, int)+0x6e1>
    eda0:	81 bd 44 ff ff ff df 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xdf
    edaa:	7e 0c                	jle    edb8 <stbi__process_marker(stbi__jpeg*, int)+0x4b0>
    edac:	81 bd 44 ff ff ff ef 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xef
    edb6:	7e 10                	jle    edc8 <stbi__process_marker(stbi__jpeg*, int)+0x4c0>
    edb8:	81 bd 44 ff ff ff fe 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xfe
    edc2:	0f 85 11 02 00 00    	jne    efd9 <stbi__process_marker(stbi__jpeg*, int)+0x6d1>
    edc8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    edcf:	48 8b 00             	mov    rax,QWORD PTR [rax]
    edd2:	48 89 c7             	mov    rdi,rax
    edd5:	e8 1a 7a ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
    edda:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
    ede0:	83 bd 5c ff ff ff 01 	cmp    DWORD PTR [rbp-0xa4],0x1
    ede7:	7f 34                	jg     ee1d <stbi__process_marker(stbi__jpeg*, int)+0x515>
    ede9:	81 bd 44 ff ff ff fe 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xfe
    edf3:	75 14                	jne    ee09 <stbi__process_marker(stbi__jpeg*, int)+0x501>
    edf5:	48 8d 05 8b b7 02 00 	lea    rax,[rip+0x2b78b]        # 3a587 <stbi__process_marker(stbi__jpeg*, int)::tag+0x4c>
    edfc:	48 89 c7             	mov    rdi,rax
    edff:	e8 6e 5d ff ff       	call   4b72 <stbi__err(char const*)>
    ee04:	e9 e0 01 00 00       	jmp    efe9 <stbi__process_marker(stbi__jpeg*, int)+0x6e1>
    ee09:	48 8d 05 83 b7 02 00 	lea    rax,[rip+0x2b783]        # 3a593 <stbi__process_marker(stbi__jpeg*, int)::tag+0x58>
    ee10:	48 89 c7             	mov    rdi,rax
    ee13:	e8 5a 5d ff ff       	call   4b72 <stbi__err(char const*)>
    ee18:	e9 cc 01 00 00       	jmp    efe9 <stbi__process_marker(stbi__jpeg*, int)+0x6e1>
    ee1d:	83 ad 5c ff ff ff 02 	sub    DWORD PTR [rbp-0xa4],0x2
    ee24:	81 bd 44 ff ff ff e0 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xe0
    ee2e:	0f 85 96 00 00 00    	jne    eeca <stbi__process_marker(stbi__jpeg*, int)+0x5c2>
    ee34:	83 bd 5c ff ff ff 04 	cmp    DWORD PTR [rbp-0xa4],0x4
    ee3b:	0f 8e 89 00 00 00    	jle    eeca <stbi__process_marker(stbi__jpeg*, int)+0x5c2>
    ee41:	c7 85 6c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x94],0x1
    ee4b:	c7 85 70 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x90],0x0
    ee55:	eb 40                	jmp    ee97 <stbi__process_marker(stbi__jpeg*, int)+0x58f>
    ee57:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ee5e:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ee61:	48 89 c7             	mov    rdi,rax
    ee64:	e8 a8 76 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    ee69:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [rbp-0x90]
    ee6f:	48 63 d2             	movsxd rdx,edx
    ee72:	48 8d 0d bd b6 02 00 	lea    rcx,[rip+0x2b6bd]        # 3a536 <stbi__process_marker(stbi__jpeg*, int)::tag>
    ee79:	0f b6 14 0a          	movzx  edx,BYTE PTR [rdx+rcx*1]
    ee7d:	38 d0                	cmp    al,dl
    ee7f:	0f 95 c0             	setne  al
    ee82:	84 c0                	test   al,al
    ee84:	74 0a                	je     ee90 <stbi__process_marker(stbi__jpeg*, int)+0x588>
    ee86:	c7 85 6c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x94],0x0
    ee90:	83 85 70 ff ff ff 01 	add    DWORD PTR [rbp-0x90],0x1
    ee97:	83 bd 70 ff ff ff 04 	cmp    DWORD PTR [rbp-0x90],0x4
    ee9e:	7e b7                	jle    ee57 <stbi__process_marker(stbi__jpeg*, int)+0x54f>
    eea0:	83 ad 5c ff ff ff 05 	sub    DWORD PTR [rbp-0xa4],0x5
    eea7:	83 bd 6c ff ff ff 00 	cmp    DWORD PTR [rbp-0x94],0x0
    eeae:	0f 84 03 01 00 00    	je     efb7 <stbi__process_marker(stbi__jpeg*, int)+0x6af>
    eeb4:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    eebb:	c7 80 48 48 00 00 01 00 00 00 	mov    DWORD PTR [rax+0x4848],0x1
    eec5:	e9 ed 00 00 00       	jmp    efb7 <stbi__process_marker(stbi__jpeg*, int)+0x6af>
    eeca:	81 bd 44 ff ff ff ee 00 00 00 	cmp    DWORD PTR [rbp-0xbc],0xee
    eed4:	0f 85 de 00 00 00    	jne    efb8 <stbi__process_marker(stbi__jpeg*, int)+0x6b0>
    eeda:	83 bd 5c ff ff ff 0b 	cmp    DWORD PTR [rbp-0xa4],0xb
    eee1:	0f 8e d1 00 00 00    	jle    efb8 <stbi__process_marker(stbi__jpeg*, int)+0x6b0>
    eee7:	c7 85 74 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x1
    eef1:	c7 85 78 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x88],0x0
    eefb:	eb 40                	jmp    ef3d <stbi__process_marker(stbi__jpeg*, int)+0x635>
    eefd:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ef04:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ef07:	48 89 c7             	mov    rdi,rax
    ef0a:	e8 02 76 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    ef0f:	8b 95 78 ff ff ff    	mov    edx,DWORD PTR [rbp-0x88]
    ef15:	48 63 d2             	movsxd rdx,edx
    ef18:	48 8d 0d 1c b6 02 00 	lea    rcx,[rip+0x2b61c]        # 3a53b <stbi__process_marker(stbi__jpeg*, int)::tag>
    ef1f:	0f b6 14 0a          	movzx  edx,BYTE PTR [rdx+rcx*1]
    ef23:	38 d0                	cmp    al,dl
    ef25:	0f 95 c0             	setne  al
    ef28:	84 c0                	test   al,al
    ef2a:	74 0a                	je     ef36 <stbi__process_marker(stbi__jpeg*, int)+0x62e>
    ef2c:	c7 85 74 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x0
    ef36:	83 85 78 ff ff ff 01 	add    DWORD PTR [rbp-0x88],0x1
    ef3d:	83 bd 78 ff ff ff 05 	cmp    DWORD PTR [rbp-0x88],0x5
    ef44:	7e b7                	jle    eefd <stbi__process_marker(stbi__jpeg*, int)+0x5f5>
    ef46:	83 ad 5c ff ff ff 06 	sub    DWORD PTR [rbp-0xa4],0x6
    ef4d:	83 bd 74 ff ff ff 00 	cmp    DWORD PTR [rbp-0x8c],0x0
    ef54:	74 62                	je     efb8 <stbi__process_marker(stbi__jpeg*, int)+0x6b0>
    ef56:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ef5d:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ef60:	48 89 c7             	mov    rdi,rax
    ef63:	e8 a9 75 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    ef68:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ef6f:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ef72:	48 89 c7             	mov    rdi,rax
    ef75:	e8 7a 78 ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
    ef7a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ef81:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ef84:	48 89 c7             	mov    rdi,rax
    ef87:	e8 68 78 ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
    ef8c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    ef93:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ef96:	48 89 c7             	mov    rdi,rax
    ef99:	e8 73 75 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    ef9e:	0f b6 d0             	movzx  edx,al
    efa1:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    efa8:	89 90 4c 48 00 00    	mov    DWORD PTR [rax+0x484c],edx
    efae:	83 ad 5c ff ff ff 06 	sub    DWORD PTR [rbp-0xa4],0x6
    efb5:	eb 01                	jmp    efb8 <stbi__process_marker(stbi__jpeg*, int)+0x6b0>
    efb7:	90                   	nop
    efb8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
    efbf:	48 8b 00             	mov    rax,QWORD PTR [rax]
    efc2:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
    efc8:	89 d6                	mov    esi,edx
    efca:	48 89 c7             	mov    rdi,rax
    efcd:	e8 33 76 ff ff       	call   6605 <stbi__skip(stbi__context*, int)>
    efd2:	b8 01 00 00 00       	mov    eax,0x1
    efd7:	eb 10                	jmp    efe9 <stbi__process_marker(stbi__jpeg*, int)+0x6e1>
    efd9:	48 8d 05 bf b5 02 00 	lea    rax,[rip+0x2b5bf]        # 3a59f <stbi__process_marker(stbi__jpeg*, int)::tag+0x64>
    efe0:	48 89 c7             	mov    rdi,rax
    efe3:	e8 8a 5b ff ff       	call   4b72 <stbi__err(char const*)>
    efe8:	90                   	nop
    efe9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    efed:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
    eff6:	74 05                	je     effd <stbi__process_marker(stbi__jpeg*, int)+0x6f5>
    eff8:	e8 e3 54 ff ff       	call   44e0 <__stack_chk_fail@plt>
    effd:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    f001:	c9                   	leave  
    f002:	c3                   	ret    

000000000000f003 <stbi__process_scan_header(stbi__jpeg*)>:
    f003:	55                   	push   rbp
    f004:	48 89 e5             	mov    rbp,rsp
    f007:	48 83 ec 30          	sub    rsp,0x30
    f00b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    f00f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f013:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f016:	48 89 c7             	mov    rdi,rax
    f019:	e8 d6 77 ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
    f01e:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    f021:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f025:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f028:	48 89 c7             	mov    rdi,rax
    f02b:	e8 e1 74 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    f030:	0f b6 d0             	movzx  edx,al
    f033:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f037:	89 90 54 48 00 00    	mov    DWORD PTR [rax+0x4854],edx
    f03d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f041:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    f047:	85 c0                	test   eax,eax
    f049:	7e 27                	jle    f072 <stbi__process_scan_header(stbi__jpeg*)+0x6f>
    f04b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f04f:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    f055:	83 f8 04             	cmp    eax,0x4
    f058:	7f 18                	jg     f072 <stbi__process_scan_header(stbi__jpeg*)+0x6f>
    f05a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f05e:	8b 90 54 48 00 00    	mov    edx,DWORD PTR [rax+0x4854]
    f064:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f068:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f06b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    f06e:	39 c2                	cmp    edx,eax
    f070:	7e 14                	jle    f086 <stbi__process_scan_header(stbi__jpeg*)+0x83>
    f072:	48 8d 05 35 b5 02 00 	lea    rax,[rip+0x2b535]        # 3a5ae <stbi__process_marker(stbi__jpeg*, int)::tag+0x73>
    f079:	48 89 c7             	mov    rdi,rax
    f07c:	e8 f1 5a ff ff       	call   4b72 <stbi__err(char const*)>
    f081:	e9 f9 02 00 00       	jmp    f37f <stbi__process_scan_header(stbi__jpeg*)+0x37c>
    f086:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f08a:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    f090:	83 c0 03             	add    eax,0x3
    f093:	01 c0                	add    eax,eax
    f095:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
    f098:	74 14                	je     f0ae <stbi__process_scan_header(stbi__jpeg*)+0xab>
    f09a:	48 8d 05 25 b5 02 00 	lea    rax,[rip+0x2b525]        # 3a5c6 <stbi__process_marker(stbi__jpeg*, int)::tag+0x8b>
    f0a1:	48 89 c7             	mov    rdi,rax
    f0a4:	e8 c9 5a ff ff       	call   4b72 <stbi__err(char const*)>
    f0a9:	e9 d1 02 00 00       	jmp    f37f <stbi__process_scan_header(stbi__jpeg*)+0x37c>
    f0ae:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
    f0b5:	e9 6f 01 00 00       	jmp    f229 <stbi__process_scan_header(stbi__jpeg*)+0x226>
    f0ba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f0be:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f0c1:	48 89 c7             	mov    rdi,rax
    f0c4:	e8 48 74 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    f0c9:	0f b6 c0             	movzx  eax,al
    f0cc:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    f0cf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f0d3:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f0d6:	48 89 c7             	mov    rdi,rax
    f0d9:	e8 33 74 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    f0de:	0f b6 c0             	movzx  eax,al
    f0e1:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    f0e4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
    f0eb:	eb 2b                	jmp    f118 <stbi__process_scan_header(stbi__jpeg*)+0x115>
    f0ed:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f0f1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f0f4:	48 63 d0             	movsxd rdx,eax
    f0f7:	48 89 d0             	mov    rax,rdx
    f0fa:	48 01 c0             	add    rax,rax
    f0fd:	48 01 d0             	add    rax,rdx
    f100:	48 c1 e0 05          	shl    rax,0x5
    f104:	48 01 c8             	add    rax,rcx
    f107:	48 05 a0 46 00 00    	add    rax,0x46a0
    f10d:	8b 00                	mov    eax,DWORD PTR [rax]
    f10f:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
    f112:	74 15                	je     f129 <stbi__process_scan_header(stbi__jpeg*)+0x126>
    f114:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
    f118:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f11c:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f11f:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    f122:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    f125:	7c c6                	jl     f0ed <stbi__process_scan_header(stbi__jpeg*)+0xea>
    f127:	eb 01                	jmp    f12a <stbi__process_scan_header(stbi__jpeg*)+0x127>
    f129:	90                   	nop
    f12a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f12e:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f131:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    f134:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    f137:	75 0a                	jne    f143 <stbi__process_scan_header(stbi__jpeg*)+0x140>
    f139:	b8 00 00 00 00       	mov    eax,0x0
    f13e:	e9 3c 02 00 00       	jmp    f37f <stbi__process_scan_header(stbi__jpeg*)+0x37c>
    f143:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f146:	c1 f8 04             	sar    eax,0x4
    f149:	89 c1                	mov    ecx,eax
    f14b:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
    f14f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f152:	48 63 d0             	movsxd rdx,eax
    f155:	48 89 d0             	mov    rax,rdx
    f158:	48 01 c0             	add    rax,rax
    f15b:	48 01 d0             	add    rax,rdx
    f15e:	48 c1 e0 05          	shl    rax,0x5
    f162:	48 01 f0             	add    rax,rsi
    f165:	48 05 b0 46 00 00    	add    rax,0x46b0
    f16b:	89 08                	mov    DWORD PTR [rax],ecx
    f16d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f171:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f174:	48 63 d0             	movsxd rdx,eax
    f177:	48 89 d0             	mov    rax,rdx
    f17a:	48 01 c0             	add    rax,rax
    f17d:	48 01 d0             	add    rax,rdx
    f180:	48 c1 e0 05          	shl    rax,0x5
    f184:	48 01 c8             	add    rax,rcx
    f187:	48 05 b0 46 00 00    	add    rax,0x46b0
    f18d:	8b 00                	mov    eax,DWORD PTR [rax]
    f18f:	83 f8 03             	cmp    eax,0x3
    f192:	7e 14                	jle    f1a8 <stbi__process_scan_header(stbi__jpeg*)+0x1a5>
    f194:	48 8d 05 37 b4 02 00 	lea    rax,[rip+0x2b437]        # 3a5d2 <stbi__process_marker(stbi__jpeg*, int)::tag+0x97>
    f19b:	48 89 c7             	mov    rdi,rax
    f19e:	e8 cf 59 ff ff       	call   4b72 <stbi__err(char const*)>
    f1a3:	e9 d7 01 00 00       	jmp    f37f <stbi__process_scan_header(stbi__jpeg*)+0x37c>
    f1a8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f1ab:	83 e0 0f             	and    eax,0xf
    f1ae:	89 c1                	mov    ecx,eax
    f1b0:	48 8b 75 d8          	mov    rsi,QWORD PTR [rbp-0x28]
    f1b4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f1b7:	48 63 d0             	movsxd rdx,eax
    f1ba:	48 89 d0             	mov    rax,rdx
    f1bd:	48 01 c0             	add    rax,rax
    f1c0:	48 01 d0             	add    rax,rdx
    f1c3:	48 c1 e0 05          	shl    rax,0x5
    f1c7:	48 01 f0             	add    rax,rsi
    f1ca:	48 05 b4 46 00 00    	add    rax,0x46b4
    f1d0:	89 08                	mov    DWORD PTR [rax],ecx
    f1d2:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
    f1d6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    f1d9:	48 63 d0             	movsxd rdx,eax
    f1dc:	48 89 d0             	mov    rax,rdx
    f1df:	48 01 c0             	add    rax,rax
    f1e2:	48 01 d0             	add    rax,rdx
    f1e5:	48 c1 e0 05          	shl    rax,0x5
    f1e9:	48 01 c8             	add    rax,rcx
    f1ec:	48 05 b4 46 00 00    	add    rax,0x46b4
    f1f2:	8b 00                	mov    eax,DWORD PTR [rax]
    f1f4:	83 f8 03             	cmp    eax,0x3
    f1f7:	7e 14                	jle    f20d <stbi__process_scan_header(stbi__jpeg*)+0x20a>
    f1f9:	48 8d 05 de b3 02 00 	lea    rax,[rip+0x2b3de]        # 3a5de <stbi__process_marker(stbi__jpeg*, int)::tag+0xa3>
    f200:	48 89 c7             	mov    rdi,rax
    f203:	e8 6a 59 ff ff       	call   4b72 <stbi__err(char const*)>
    f208:	e9 72 01 00 00       	jmp    f37f <stbi__process_scan_header(stbi__jpeg*)+0x37c>
    f20d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f211:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
    f214:	48 63 d2             	movsxd rdx,edx
    f217:	48 8d 8a 14 12 00 00 	lea    rcx,[rdx+0x1214]
    f21e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
    f221:	89 54 88 08          	mov    DWORD PTR [rax+rcx*4+0x8],edx
    f225:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
    f229:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f22d:	8b 80 54 48 00 00    	mov    eax,DWORD PTR [rax+0x4854]
    f233:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
    f236:	0f 8c 7e fe ff ff    	jl     f0ba <stbi__process_scan_header(stbi__jpeg*)+0xb7>
    f23c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f240:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f243:	48 89 c7             	mov    rdi,rax
    f246:	e8 c6 72 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    f24b:	0f b6 d0             	movzx  edx,al
    f24e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f252:	89 90 34 48 00 00    	mov    DWORD PTR [rax+0x4834],edx
    f258:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f25c:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f25f:	48 89 c7             	mov    rdi,rax
    f262:	e8 aa 72 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    f267:	0f b6 d0             	movzx  edx,al
    f26a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f26e:	89 90 38 48 00 00    	mov    DWORD PTR [rax+0x4838],edx
    f274:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f278:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f27b:	48 89 c7             	mov    rdi,rax
    f27e:	e8 8e 72 ff ff       	call   6511 <stbi__get8(stbi__context*)>
    f283:	0f b6 c0             	movzx  eax,al
    f286:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    f289:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    f28c:	c1 f8 04             	sar    eax,0x4
    f28f:	89 c2                	mov    edx,eax
    f291:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f295:	89 90 3c 48 00 00    	mov    DWORD PTR [rax+0x483c],edx
    f29b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    f29e:	83 e0 0f             	and    eax,0xf
    f2a1:	89 c2                	mov    edx,eax
    f2a3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f2a7:	89 90 40 48 00 00    	mov    DWORD PTR [rax+0x4840],edx
    f2ad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f2b1:	8b 80 30 48 00 00    	mov    eax,DWORD PTR [rax+0x4830]
    f2b7:	85 c0                	test   eax,eax
    f2b9:	74 65                	je     f320 <stbi__process_scan_header(stbi__jpeg*)+0x31d>
    f2bb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f2bf:	8b 80 34 48 00 00    	mov    eax,DWORD PTR [rax+0x4834]
    f2c5:	83 f8 3f             	cmp    eax,0x3f
    f2c8:	7f 45                	jg     f30f <stbi__process_scan_header(stbi__jpeg*)+0x30c>
    f2ca:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f2ce:	8b 80 38 48 00 00    	mov    eax,DWORD PTR [rax+0x4838]
    f2d4:	83 f8 3f             	cmp    eax,0x3f
    f2d7:	7f 36                	jg     f30f <stbi__process_scan_header(stbi__jpeg*)+0x30c>
    f2d9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f2dd:	8b 90 34 48 00 00    	mov    edx,DWORD PTR [rax+0x4834]
    f2e3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f2e7:	8b 80 38 48 00 00    	mov    eax,DWORD PTR [rax+0x4838]
    f2ed:	39 c2                	cmp    edx,eax
    f2ef:	7f 1e                	jg     f30f <stbi__process_scan_header(stbi__jpeg*)+0x30c>
    f2f1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f2f5:	8b 80 3c 48 00 00    	mov    eax,DWORD PTR [rax+0x483c]
    f2fb:	83 f8 0d             	cmp    eax,0xd
    f2fe:	7f 0f                	jg     f30f <stbi__process_scan_header(stbi__jpeg*)+0x30c>
    f300:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f304:	8b 80 40 48 00 00    	mov    eax,DWORD PTR [rax+0x4840]
    f30a:	83 f8 0d             	cmp    eax,0xd
    f30d:	7e 6b                	jle    f37a <stbi__process_scan_header(stbi__jpeg*)+0x377>
    f30f:	48 8d 05 d4 b2 02 00 	lea    rax,[rip+0x2b2d4]        # 3a5ea <stbi__process_marker(stbi__jpeg*, int)::tag+0xaf>
    f316:	48 89 c7             	mov    rdi,rax
    f319:	e8 54 58 ff ff       	call   4b72 <stbi__err(char const*)>
    f31e:	eb 5f                	jmp    f37f <stbi__process_scan_header(stbi__jpeg*)+0x37c>
    f320:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f324:	8b 80 34 48 00 00    	mov    eax,DWORD PTR [rax+0x4834]
    f32a:	85 c0                	test   eax,eax
    f32c:	74 11                	je     f33f <stbi__process_scan_header(stbi__jpeg*)+0x33c>
    f32e:	48 8d 05 b5 b2 02 00 	lea    rax,[rip+0x2b2b5]        # 3a5ea <stbi__process_marker(stbi__jpeg*, int)::tag+0xaf>
    f335:	48 89 c7             	mov    rdi,rax
    f338:	e8 35 58 ff ff       	call   4b72 <stbi__err(char const*)>
    f33d:	eb 40                	jmp    f37f <stbi__process_scan_header(stbi__jpeg*)+0x37c>
    f33f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f343:	8b 80 3c 48 00 00    	mov    eax,DWORD PTR [rax+0x483c]
    f349:	85 c0                	test   eax,eax
    f34b:	75 0e                	jne    f35b <stbi__process_scan_header(stbi__jpeg*)+0x358>
    f34d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f351:	8b 80 40 48 00 00    	mov    eax,DWORD PTR [rax+0x4840]
    f357:	85 c0                	test   eax,eax
    f359:	74 11                	je     f36c <stbi__process_scan_header(stbi__jpeg*)+0x369>
    f35b:	48 8d 05 88 b2 02 00 	lea    rax,[rip+0x2b288]        # 3a5ea <stbi__process_marker(stbi__jpeg*, int)::tag+0xaf>
    f362:	48 89 c7             	mov    rdi,rax
    f365:	e8 08 58 ff ff       	call   4b72 <stbi__err(char const*)>
    f36a:	eb 13                	jmp    f37f <stbi__process_scan_header(stbi__jpeg*)+0x37c>
    f36c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    f370:	c7 80 38 48 00 00 3f 00 00 00 	mov    DWORD PTR [rax+0x4838],0x3f
    f37a:	b8 01 00 00 00       	mov    eax,0x1
    f37f:	c9                   	leave  
    f380:	c3                   	ret    

000000000000f381 <stbi__free_jpeg_components(stbi__jpeg*, int, int)>:
    f381:	55                   	push   rbp
    f382:	48 89 e5             	mov    rbp,rsp
    f385:	48 83 ec 20          	sub    rsp,0x20
    f389:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    f38d:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
    f390:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
    f393:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    f39a:	e9 c0 01 00 00       	jmp    f55f <stbi__free_jpeg_components(stbi__jpeg*, int, int)+0x1de>
    f39f:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f3a3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f3a6:	48 63 d0             	movsxd rdx,eax
    f3a9:	48 89 d0             	mov    rax,rdx
    f3ac:	48 01 c0             	add    rax,rax
    f3af:	48 01 d0             	add    rax,rdx
    f3b2:	48 c1 e0 05          	shl    rax,0x5
    f3b6:	48 01 c8             	add    rax,rcx
    f3b9:	48 05 d8 46 00 00    	add    rax,0x46d8
    f3bf:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f3c2:	48 85 c0             	test   rax,rax
    f3c5:	74 79                	je     f440 <stbi__free_jpeg_components(stbi__jpeg*, int, int)+0xbf>
    f3c7:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f3cb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f3ce:	48 63 d0             	movsxd rdx,eax
    f3d1:	48 89 d0             	mov    rax,rdx
    f3d4:	48 01 c0             	add    rax,rax
    f3d7:	48 01 d0             	add    rax,rdx
    f3da:	48 c1 e0 05          	shl    rax,0x5
    f3de:	48 01 c8             	add    rax,rcx
    f3e1:	48 05 d8 46 00 00    	add    rax,0x46d8
    f3e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f3ea:	48 89 c7             	mov    rdi,rax
    f3ed:	e8 3e 51 ff ff       	call   4530 <free@plt>
    f3f2:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f3f6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f3f9:	48 63 d0             	movsxd rdx,eax
    f3fc:	48 89 d0             	mov    rax,rdx
    f3ff:	48 01 c0             	add    rax,rax
    f402:	48 01 d0             	add    rax,rdx
    f405:	48 c1 e0 05          	shl    rax,0x5
    f409:	48 01 c8             	add    rax,rcx
    f40c:	48 05 d8 46 00 00    	add    rax,0x46d8
    f412:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    f419:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f41d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f420:	48 63 d0             	movsxd rdx,eax
    f423:	48 89 d0             	mov    rax,rdx
    f426:	48 01 c0             	add    rax,rax
    f429:	48 01 d0             	add    rax,rdx
    f42c:	48 c1 e0 05          	shl    rax,0x5
    f430:	48 01 c8             	add    rax,rcx
    f433:	48 05 d0 46 00 00    	add    rax,0x46d0
    f439:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    f440:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f444:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f447:	48 63 d0             	movsxd rdx,eax
    f44a:	48 89 d0             	mov    rax,rdx
    f44d:	48 01 c0             	add    rax,rax
    f450:	48 01 d0             	add    rax,rdx
    f453:	48 c1 e0 05          	shl    rax,0x5
    f457:	48 01 c8             	add    rax,rcx
    f45a:	48 05 e0 46 00 00    	add    rax,0x46e0
    f460:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f463:	48 85 c0             	test   rax,rax
    f466:	74 79                	je     f4e1 <stbi__free_jpeg_components(stbi__jpeg*, int, int)+0x160>
    f468:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f46c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f46f:	48 63 d0             	movsxd rdx,eax
    f472:	48 89 d0             	mov    rax,rdx
    f475:	48 01 c0             	add    rax,rax
    f478:	48 01 d0             	add    rax,rdx
    f47b:	48 c1 e0 05          	shl    rax,0x5
    f47f:	48 01 c8             	add    rax,rcx
    f482:	48 05 e0 46 00 00    	add    rax,0x46e0
    f488:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f48b:	48 89 c7             	mov    rdi,rax
    f48e:	e8 9d 50 ff ff       	call   4530 <free@plt>
    f493:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f497:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f49a:	48 63 d0             	movsxd rdx,eax
    f49d:	48 89 d0             	mov    rax,rdx
    f4a0:	48 01 c0             	add    rax,rax
    f4a3:	48 01 d0             	add    rax,rdx
    f4a6:	48 c1 e0 05          	shl    rax,0x5
    f4aa:	48 01 c8             	add    rax,rcx
    f4ad:	48 05 e0 46 00 00    	add    rax,0x46e0
    f4b3:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    f4ba:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f4be:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f4c1:	48 63 d0             	movsxd rdx,eax
    f4c4:	48 89 d0             	mov    rax,rdx
    f4c7:	48 01 c0             	add    rax,rax
    f4ca:	48 01 d0             	add    rax,rdx
    f4cd:	48 c1 e0 05          	shl    rax,0x5
    f4d1:	48 01 c8             	add    rax,rcx
    f4d4:	48 05 f0 46 00 00    	add    rax,0x46f0
    f4da:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    f4e1:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f4e5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f4e8:	48 63 d0             	movsxd rdx,eax
    f4eb:	48 89 d0             	mov    rax,rdx
    f4ee:	48 01 c0             	add    rax,rax
    f4f1:	48 01 d0             	add    rax,rdx
    f4f4:	48 c1 e0 05          	shl    rax,0x5
    f4f8:	48 01 c8             	add    rax,rcx
    f4fb:	48 05 e8 46 00 00    	add    rax,0x46e8
    f501:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f504:	48 85 c0             	test   rax,rax
    f507:	74 52                	je     f55b <stbi__free_jpeg_components(stbi__jpeg*, int, int)+0x1da>
    f509:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f50d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f510:	48 63 d0             	movsxd rdx,eax
    f513:	48 89 d0             	mov    rax,rdx
    f516:	48 01 c0             	add    rax,rax
    f519:	48 01 d0             	add    rax,rdx
    f51c:	48 c1 e0 05          	shl    rax,0x5
    f520:	48 01 c8             	add    rax,rcx
    f523:	48 05 e8 46 00 00    	add    rax,0x46e8
    f529:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f52c:	48 89 c7             	mov    rdi,rax
    f52f:	e8 fc 4f ff ff       	call   4530 <free@plt>
    f534:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    f538:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f53b:	48 63 d0             	movsxd rdx,eax
    f53e:	48 89 d0             	mov    rax,rdx
    f541:	48 01 c0             	add    rax,rax
    f544:	48 01 d0             	add    rax,rdx
    f547:	48 c1 e0 05          	shl    rax,0x5
    f54b:	48 01 c8             	add    rax,rcx
    f54e:	48 05 e8 46 00 00    	add    rax,0x46e8
    f554:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    f55b:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
    f55f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    f562:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c]
    f565:	0f 8c 34 fe ff ff    	jl     f39f <stbi__free_jpeg_components(stbi__jpeg*, int, int)+0x1e>
    f56b:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    f56e:	c9                   	leave  
    f56f:	c3                   	ret    

000000000000f570 <stbi__process_frame_header(stbi__jpeg*, int)>:
    f570:	55                   	push   rbp
    f571:	48 89 e5             	mov    rbp,rsp
    f574:	48 83 ec 40          	sub    rsp,0x40
    f578:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
    f57c:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
    f57f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f583:	48 8b 00             	mov    rax,QWORD PTR [rax]
    f586:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    f58a:	c7 45 e0 01 00 00 00 	mov    DWORD PTR [rbp-0x20],0x1
    f591:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x1
    f598:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f59c:	48 89 c7             	mov    rdi,rax
    f59f:	e8 50 72 ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
    f5a4:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
    f5a7:	83 7d e8 0a          	cmp    DWORD PTR [rbp-0x18],0xa
    f5ab:	7f 14                	jg     f5c1 <stbi__process_frame_header(stbi__jpeg*, int)+0x51>
    f5ad:	48 8d 05 41 b0 02 00 	lea    rax,[rip+0x2b041]        # 3a5f5 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x3>
    f5b4:	48 89 c7             	mov    rdi,rax
    f5b7:	e8 b6 55 ff ff       	call   4b72 <stbi__err(char const*)>
    f5bc:	e9 62 0a 00 00       	jmp    10023 <stbi__process_frame_header(stbi__jpeg*, int)+0xab3>
    f5c1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f5c5:	48 89 c7             	mov    rdi,rax
    f5c8:	e8 44 6f ff ff       	call   6511 <stbi__get8(stbi__context*)>
    f5cd:	0f b6 c0             	movzx  eax,al
    f5d0:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
    f5d3:	83 7d ec 08          	cmp    DWORD PTR [rbp-0x14],0x8
    f5d7:	74 14                	je     f5ed <stbi__process_frame_header(stbi__jpeg*, int)+0x7d>
    f5d9:	48 8d 05 21 b0 02 00 	lea    rax,[rip+0x2b021]        # 3a601 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xf>
    f5e0:	48 89 c7             	mov    rdi,rax
    f5e3:	e8 8a 55 ff ff       	call   4b72 <stbi__err(char const*)>
    f5e8:	e9 36 0a 00 00       	jmp    10023 <stbi__process_frame_header(stbi__jpeg*, int)+0xab3>
    f5ed:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f5f1:	48 89 c7             	mov    rdi,rax
    f5f4:	e8 fb 71 ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
    f5f9:	89 c2                	mov    edx,eax
    f5fb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f5ff:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
    f602:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f606:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
    f609:	85 c0                	test   eax,eax
    f60b:	75 14                	jne    f621 <stbi__process_frame_header(stbi__jpeg*, int)+0xb1>
    f60d:	48 8d 05 f8 af 02 00 	lea    rax,[rip+0x2aff8]        # 3a60c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x1a>
    f614:	48 89 c7             	mov    rdi,rax
    f617:	e8 56 55 ff ff       	call   4b72 <stbi__err(char const*)>
    f61c:	e9 02 0a 00 00       	jmp    10023 <stbi__process_frame_header(stbi__jpeg*, int)+0xab3>
    f621:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f625:	48 89 c7             	mov    rdi,rax
    f628:	e8 c7 71 ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
    f62d:	89 c2                	mov    edx,eax
    f62f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f633:	89 10                	mov    DWORD PTR [rax],edx
    f635:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f639:	8b 00                	mov    eax,DWORD PTR [rax]
    f63b:	85 c0                	test   eax,eax
    f63d:	75 14                	jne    f653 <stbi__process_frame_header(stbi__jpeg*, int)+0xe3>
    f63f:	48 8d 05 d7 af 02 00 	lea    rax,[rip+0x2afd7]        # 3a61d <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x2b>
    f646:	48 89 c7             	mov    rdi,rax
    f649:	e8 24 55 ff ff       	call   4b72 <stbi__err(char const*)>
    f64e:	e9 d0 09 00 00       	jmp    10023 <stbi__process_frame_header(stbi__jpeg*, int)+0xab3>
    f653:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f657:	48 89 c7             	mov    rdi,rax
    f65a:	e8 b2 6e ff ff       	call   6511 <stbi__get8(stbi__context*)>
    f65f:	0f b6 c0             	movzx  eax,al
    f662:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
    f665:	83 7d f0 03          	cmp    DWORD PTR [rbp-0x10],0x3
    f669:	74 20                	je     f68b <stbi__process_frame_header(stbi__jpeg*, int)+0x11b>
    f66b:	83 7d f0 01          	cmp    DWORD PTR [rbp-0x10],0x1
    f66f:	74 1a                	je     f68b <stbi__process_frame_header(stbi__jpeg*, int)+0x11b>
    f671:	83 7d f0 04          	cmp    DWORD PTR [rbp-0x10],0x4
    f675:	74 14                	je     f68b <stbi__process_frame_header(stbi__jpeg*, int)+0x11b>
    f677:	48 8d 05 a7 af 02 00 	lea    rax,[rip+0x2afa7]        # 3a625 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x33>
    f67e:	48 89 c7             	mov    rdi,rax
    f681:	e8 ec 54 ff ff       	call   4b72 <stbi__err(char const*)>
    f686:	e9 98 09 00 00       	jmp    10023 <stbi__process_frame_header(stbi__jpeg*, int)+0xab3>
    f68b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f68f:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    f692:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
    f695:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
    f69c:	eb 52                	jmp    f6f0 <stbi__process_frame_header(stbi__jpeg*, int)+0x180>
    f69e:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f6a2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f6a5:	48 63 d0             	movsxd rdx,eax
    f6a8:	48 89 d0             	mov    rax,rdx
    f6ab:	48 01 c0             	add    rax,rax
    f6ae:	48 01 d0             	add    rax,rdx
    f6b1:	48 c1 e0 05          	shl    rax,0x5
    f6b5:	48 01 c8             	add    rax,rcx
    f6b8:	48 05 d0 46 00 00    	add    rax,0x46d0
    f6be:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    f6c5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f6c9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f6cc:	48 63 d0             	movsxd rdx,eax
    f6cf:	48 89 d0             	mov    rax,rdx
    f6d2:	48 01 c0             	add    rax,rax
    f6d5:	48 01 d0             	add    rax,rdx
    f6d8:	48 c1 e0 05          	shl    rax,0x5
    f6dc:	48 01 c8             	add    rax,rcx
    f6df:	48 05 e8 46 00 00    	add    rax,0x46e8
    f6e5:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    f6ec:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
    f6f0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f6f3:	3b 45 f0             	cmp    eax,DWORD PTR [rbp-0x10]
    f6f6:	7c a6                	jl     f69e <stbi__process_frame_header(stbi__jpeg*, int)+0x12e>
    f6f8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f6fc:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
    f6ff:	89 d0                	mov    eax,edx
    f701:	01 c0                	add    eax,eax
    f703:	01 d0                	add    eax,edx
    f705:	83 c0 08             	add    eax,0x8
    f708:	39 45 e8             	cmp    DWORD PTR [rbp-0x18],eax
    f70b:	74 14                	je     f721 <stbi__process_frame_header(stbi__jpeg*, int)+0x1b1>
    f70d:	48 8d 05 e1 ae 02 00 	lea    rax,[rip+0x2aee1]        # 3a5f5 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x3>
    f714:	48 89 c7             	mov    rdi,rax
    f717:	e8 56 54 ff ff       	call   4b72 <stbi__err(char const*)>
    f71c:	e9 02 09 00 00       	jmp    10023 <stbi__process_frame_header(stbi__jpeg*, int)+0xab3>
    f721:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f725:	c7 80 50 48 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x4850],0x0
    f72f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
    f736:	e9 25 02 00 00       	jmp    f960 <stbi__process_frame_header(stbi__jpeg*, int)+0x3f0>
    f73b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f73f:	48 89 c7             	mov    rdi,rax
    f742:	e8 ca 6d ff ff       	call   6511 <stbi__get8(stbi__context*)>
    f747:	0f b6 d0             	movzx  edx,al
    f74a:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    f74e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f751:	48 63 c8             	movsxd rcx,eax
    f754:	48 89 c8             	mov    rax,rcx
    f757:	48 01 c0             	add    rax,rax
    f75a:	48 01 c8             	add    rax,rcx
    f75d:	48 c1 e0 05          	shl    rax,0x5
    f761:	48 01 f0             	add    rax,rsi
    f764:	48 05 a0 46 00 00    	add    rax,0x46a0
    f76a:	89 10                	mov    DWORD PTR [rax],edx
    f76c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f770:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    f773:	83 f8 03             	cmp    eax,0x3
    f776:	75 50                	jne    f7c8 <stbi__process_frame_header(stbi__jpeg*, int)+0x258>
    f778:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f77c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f77f:	48 63 d0             	movsxd rdx,eax
    f782:	48 89 d0             	mov    rax,rdx
    f785:	48 01 c0             	add    rax,rax
    f788:	48 01 d0             	add    rax,rdx
    f78b:	48 c1 e0 05          	shl    rax,0x5
    f78f:	48 01 c8             	add    rax,rcx
    f792:	48 05 a0 46 00 00    	add    rax,0x46a0
    f798:	8b 10                	mov    edx,DWORD PTR [rax]
    f79a:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f79d:	48 98                	cdqe   
    f79f:	48 8d 0d 4c ae 02 00 	lea    rcx,[rip+0x2ae4c]        # 3a5f2 <stbi__process_frame_header(stbi__jpeg*, int)::rgb>
    f7a6:	0f b6 04 08          	movzx  eax,BYTE PTR [rax+rcx*1]
    f7aa:	0f b6 c0             	movzx  eax,al
    f7ad:	39 c2                	cmp    edx,eax
    f7af:	75 17                	jne    f7c8 <stbi__process_frame_header(stbi__jpeg*, int)+0x258>
    f7b1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f7b5:	8b 80 50 48 00 00    	mov    eax,DWORD PTR [rax+0x4850]
    f7bb:	8d 50 01             	lea    edx,[rax+0x1]
    f7be:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    f7c2:	89 90 50 48 00 00    	mov    DWORD PTR [rax+0x4850],edx
    f7c8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f7cc:	48 89 c7             	mov    rdi,rax
    f7cf:	e8 3d 6d ff ff       	call   6511 <stbi__get8(stbi__context*)>
    f7d4:	0f b6 c0             	movzx  eax,al
    f7d7:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
    f7da:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    f7dd:	c1 f8 04             	sar    eax,0x4
    f7e0:	89 c1                	mov    ecx,eax
    f7e2:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    f7e6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f7e9:	48 63 d0             	movsxd rdx,eax
    f7ec:	48 89 d0             	mov    rax,rdx
    f7ef:	48 01 c0             	add    rax,rax
    f7f2:	48 01 d0             	add    rax,rdx
    f7f5:	48 c1 e0 05          	shl    rax,0x5
    f7f9:	48 01 f0             	add    rax,rsi
    f7fc:	48 05 a4 46 00 00    	add    rax,0x46a4
    f802:	89 08                	mov    DWORD PTR [rax],ecx
    f804:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f808:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f80b:	48 63 d0             	movsxd rdx,eax
    f80e:	48 89 d0             	mov    rax,rdx
    f811:	48 01 c0             	add    rax,rax
    f814:	48 01 d0             	add    rax,rdx
    f817:	48 c1 e0 05          	shl    rax,0x5
    f81b:	48 01 c8             	add    rax,rcx
    f81e:	48 05 a4 46 00 00    	add    rax,0x46a4
    f824:	8b 00                	mov    eax,DWORD PTR [rax]
    f826:	85 c0                	test   eax,eax
    f828:	74 27                	je     f851 <stbi__process_frame_header(stbi__jpeg*, int)+0x2e1>
    f82a:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f82e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f831:	48 63 d0             	movsxd rdx,eax
    f834:	48 89 d0             	mov    rax,rdx
    f837:	48 01 c0             	add    rax,rax
    f83a:	48 01 d0             	add    rax,rdx
    f83d:	48 c1 e0 05          	shl    rax,0x5
    f841:	48 01 c8             	add    rax,rcx
    f844:	48 05 a4 46 00 00    	add    rax,0x46a4
    f84a:	8b 00                	mov    eax,DWORD PTR [rax]
    f84c:	83 f8 04             	cmp    eax,0x4
    f84f:	7e 14                	jle    f865 <stbi__process_frame_header(stbi__jpeg*, int)+0x2f5>
    f851:	48 8d 05 e1 ad 02 00 	lea    rax,[rip+0x2ade1]        # 3a639 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x47>
    f858:	48 89 c7             	mov    rdi,rax
    f85b:	e8 12 53 ff ff       	call   4b72 <stbi__err(char const*)>
    f860:	e9 be 07 00 00       	jmp    10023 <stbi__process_frame_header(stbi__jpeg*, int)+0xab3>
    f865:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    f868:	83 e0 0f             	and    eax,0xf
    f86b:	89 c1                	mov    ecx,eax
    f86d:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    f871:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f874:	48 63 d0             	movsxd rdx,eax
    f877:	48 89 d0             	mov    rax,rdx
    f87a:	48 01 c0             	add    rax,rax
    f87d:	48 01 d0             	add    rax,rdx
    f880:	48 c1 e0 05          	shl    rax,0x5
    f884:	48 01 f0             	add    rax,rsi
    f887:	48 05 a8 46 00 00    	add    rax,0x46a8
    f88d:	89 08                	mov    DWORD PTR [rax],ecx
    f88f:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f893:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f896:	48 63 d0             	movsxd rdx,eax
    f899:	48 89 d0             	mov    rax,rdx
    f89c:	48 01 c0             	add    rax,rax
    f89f:	48 01 d0             	add    rax,rdx
    f8a2:	48 c1 e0 05          	shl    rax,0x5
    f8a6:	48 01 c8             	add    rax,rcx
    f8a9:	48 05 a8 46 00 00    	add    rax,0x46a8
    f8af:	8b 00                	mov    eax,DWORD PTR [rax]
    f8b1:	85 c0                	test   eax,eax
    f8b3:	74 27                	je     f8dc <stbi__process_frame_header(stbi__jpeg*, int)+0x36c>
    f8b5:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f8b9:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f8bc:	48 63 d0             	movsxd rdx,eax
    f8bf:	48 89 d0             	mov    rax,rdx
    f8c2:	48 01 c0             	add    rax,rax
    f8c5:	48 01 d0             	add    rax,rdx
    f8c8:	48 c1 e0 05          	shl    rax,0x5
    f8cc:	48 01 c8             	add    rax,rcx
    f8cf:	48 05 a8 46 00 00    	add    rax,0x46a8
    f8d5:	8b 00                	mov    eax,DWORD PTR [rax]
    f8d7:	83 f8 04             	cmp    eax,0x4
    f8da:	7e 14                	jle    f8f0 <stbi__process_frame_header(stbi__jpeg*, int)+0x380>
    f8dc:	48 8d 05 5c ad 02 00 	lea    rax,[rip+0x2ad5c]        # 3a63f <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x4d>
    f8e3:	48 89 c7             	mov    rdi,rax
    f8e6:	e8 87 52 ff ff       	call   4b72 <stbi__err(char const*)>
    f8eb:	e9 33 07 00 00       	jmp    10023 <stbi__process_frame_header(stbi__jpeg*, int)+0xab3>
    f8f0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f8f4:	48 89 c7             	mov    rdi,rax
    f8f7:	e8 15 6c ff ff       	call   6511 <stbi__get8(stbi__context*)>
    f8fc:	0f b6 d0             	movzx  edx,al
    f8ff:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    f903:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f906:	48 63 c8             	movsxd rcx,eax
    f909:	48 89 c8             	mov    rax,rcx
    f90c:	48 01 c0             	add    rax,rax
    f90f:	48 01 c8             	add    rax,rcx
    f912:	48 c1 e0 05          	shl    rax,0x5
    f916:	48 01 f0             	add    rax,rsi
    f919:	48 05 ac 46 00 00    	add    rax,0x46ac
    f91f:	89 10                	mov    DWORD PTR [rax],edx
    f921:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f925:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f928:	48 63 d0             	movsxd rdx,eax
    f92b:	48 89 d0             	mov    rax,rdx
    f92e:	48 01 c0             	add    rax,rax
    f931:	48 01 d0             	add    rax,rdx
    f934:	48 c1 e0 05          	shl    rax,0x5
    f938:	48 01 c8             	add    rax,rcx
    f93b:	48 05 ac 46 00 00    	add    rax,0x46ac
    f941:	8b 00                	mov    eax,DWORD PTR [rax]
    f943:	83 f8 03             	cmp    eax,0x3
    f946:	7e 14                	jle    f95c <stbi__process_frame_header(stbi__jpeg*, int)+0x3ec>
    f948:	48 8d 05 f6 ac 02 00 	lea    rax,[rip+0x2acf6]        # 3a645 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x53>
    f94f:	48 89 c7             	mov    rdi,rax
    f952:	e8 1b 52 ff ff       	call   4b72 <stbi__err(char const*)>
    f957:	e9 c7 06 00 00       	jmp    10023 <stbi__process_frame_header(stbi__jpeg*, int)+0xab3>
    f95c:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
    f960:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f964:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    f967:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
    f96a:	0f 8c cb fd ff ff    	jl     f73b <stbi__process_frame_header(stbi__jpeg*, int)+0x1cb>
    f970:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
    f974:	74 0a                	je     f980 <stbi__process_frame_header(stbi__jpeg*, int)+0x410>
    f976:	b8 01 00 00 00       	mov    eax,0x1
    f97b:	e9 a3 06 00 00       	jmp    10023 <stbi__process_frame_header(stbi__jpeg*, int)+0xab3>
    f980:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    f984:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    f987:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    f98b:	8b 52 04             	mov    edx,DWORD PTR [rdx+0x4]
    f98e:	89 d6                	mov    esi,edx
    f990:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
    f994:	8b 12                	mov    edx,DWORD PTR [rdx]
    f996:	89 d7                	mov    edi,edx
    f998:	b9 00 00 00 00       	mov    ecx,0x0
    f99d:	89 c2                	mov    edx,eax
    f99f:	e8 b8 52 ff ff       	call   4c5c <stbi__mad3sizes_valid(int, int, int, int)>
    f9a4:	85 c0                	test   eax,eax
    f9a6:	0f 94 c0             	sete   al
    f9a9:	84 c0                	test   al,al
    f9ab:	74 14                	je     f9c1 <stbi__process_frame_header(stbi__jpeg*, int)+0x451>
    f9ad:	48 8d 05 98 ac 02 00 	lea    rax,[rip+0x2ac98]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
    f9b4:	48 89 c7             	mov    rdi,rax
    f9b7:	e8 b6 51 ff ff       	call   4b72 <stbi__err(char const*)>
    f9bc:	e9 62 06 00 00       	jmp    10023 <stbi__process_frame_header(stbi__jpeg*, int)+0xab3>
    f9c1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
    f9c8:	e9 9c 00 00 00       	jmp    fa69 <stbi__process_frame_header(stbi__jpeg*, int)+0x4f9>
    f9cd:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f9d1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f9d4:	48 63 d0             	movsxd rdx,eax
    f9d7:	48 89 d0             	mov    rax,rdx
    f9da:	48 01 c0             	add    rax,rax
    f9dd:	48 01 d0             	add    rax,rdx
    f9e0:	48 c1 e0 05          	shl    rax,0x5
    f9e4:	48 01 c8             	add    rax,rcx
    f9e7:	48 05 a4 46 00 00    	add    rax,0x46a4
    f9ed:	8b 00                	mov    eax,DWORD PTR [rax]
    f9ef:	39 45 e0             	cmp    DWORD PTR [rbp-0x20],eax
    f9f2:	7d 25                	jge    fa19 <stbi__process_frame_header(stbi__jpeg*, int)+0x4a9>
    f9f4:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    f9f8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    f9fb:	48 63 d0             	movsxd rdx,eax
    f9fe:	48 89 d0             	mov    rax,rdx
    fa01:	48 01 c0             	add    rax,rax
    fa04:	48 01 d0             	add    rax,rdx
    fa07:	48 c1 e0 05          	shl    rax,0x5
    fa0b:	48 01 c8             	add    rax,rcx
    fa0e:	48 05 a4 46 00 00    	add    rax,0x46a4
    fa14:	8b 00                	mov    eax,DWORD PTR [rax]
    fa16:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
    fa19:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fa1d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fa20:	48 63 d0             	movsxd rdx,eax
    fa23:	48 89 d0             	mov    rax,rdx
    fa26:	48 01 c0             	add    rax,rax
    fa29:	48 01 d0             	add    rax,rdx
    fa2c:	48 c1 e0 05          	shl    rax,0x5
    fa30:	48 01 c8             	add    rax,rcx
    fa33:	48 05 a8 46 00 00    	add    rax,0x46a8
    fa39:	8b 00                	mov    eax,DWORD PTR [rax]
    fa3b:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    fa3e:	7d 25                	jge    fa65 <stbi__process_frame_header(stbi__jpeg*, int)+0x4f5>
    fa40:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fa44:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fa47:	48 63 d0             	movsxd rdx,eax
    fa4a:	48 89 d0             	mov    rax,rdx
    fa4d:	48 01 c0             	add    rax,rax
    fa50:	48 01 d0             	add    rax,rdx
    fa53:	48 c1 e0 05          	shl    rax,0x5
    fa57:	48 01 c8             	add    rax,rcx
    fa5a:	48 05 a8 46 00 00    	add    rax,0x46a8
    fa60:	8b 00                	mov    eax,DWORD PTR [rax]
    fa62:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
    fa65:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
    fa69:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fa6d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
    fa70:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
    fa73:	0f 8c 54 ff ff ff    	jl     f9cd <stbi__process_frame_header(stbi__jpeg*, int)+0x45d>
    fa79:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fa7d:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
    fa80:	89 90 88 46 00 00    	mov    DWORD PTR [rax+0x4688],edx
    fa86:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fa8a:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    fa8d:	89 90 8c 46 00 00    	mov    DWORD PTR [rax+0x468c],edx
    fa93:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    fa96:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
    fa9d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    faa1:	89 90 98 46 00 00    	mov    DWORD PTR [rax+0x4698],edx
    faa7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    faaa:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
    fab1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fab5:	89 90 9c 46 00 00    	mov    DWORD PTR [rax+0x469c],edx
    fabb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fabf:	8b 10                	mov    edx,DWORD PTR [rax]
    fac1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fac5:	8b 80 98 46 00 00    	mov    eax,DWORD PTR [rax+0x4698]
    facb:	01 d0                	add    eax,edx
    facd:	8d 50 ff             	lea    edx,[rax-0x1]
    fad0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fad4:	8b 80 98 46 00 00    	mov    eax,DWORD PTR [rax+0x4698]
    fada:	89 c1                	mov    ecx,eax
    fadc:	89 d0                	mov    eax,edx
    fade:	ba 00 00 00 00       	mov    edx,0x0
    fae3:	f7 f1                	div    ecx
    fae5:	89 c2                	mov    edx,eax
    fae7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    faeb:	89 90 90 46 00 00    	mov    DWORD PTR [rax+0x4690],edx
    faf1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    faf5:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
    faf8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fafc:	8b 80 9c 46 00 00    	mov    eax,DWORD PTR [rax+0x469c]
    fb02:	01 d0                	add    eax,edx
    fb04:	8d 50 ff             	lea    edx,[rax-0x1]
    fb07:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fb0b:	8b 80 9c 46 00 00    	mov    eax,DWORD PTR [rax+0x469c]
    fb11:	89 c1                	mov    ecx,eax
    fb13:	89 d0                	mov    eax,edx
    fb15:	ba 00 00 00 00       	mov    edx,0x0
    fb1a:	f7 f1                	div    ecx
    fb1c:	89 c2                	mov    edx,eax
    fb1e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fb22:	89 90 94 46 00 00    	mov    DWORD PTR [rax+0x4694],edx
    fb28:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
    fb2f:	e9 da 04 00 00       	jmp    1000e <stbi__process_frame_header(stbi__jpeg*, int)+0xa9e>
    fb34:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fb38:	8b 08                	mov    ecx,DWORD PTR [rax]
    fb3a:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fb3e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fb41:	48 63 d0             	movsxd rdx,eax
    fb44:	48 89 d0             	mov    rax,rdx
    fb47:	48 01 c0             	add    rax,rax
    fb4a:	48 01 d0             	add    rax,rdx
    fb4d:	48 c1 e0 05          	shl    rax,0x5
    fb51:	48 01 f0             	add    rax,rsi
    fb54:	48 05 a4 46 00 00    	add    rax,0x46a4
    fb5a:	8b 00                	mov    eax,DWORD PTR [rax]
    fb5c:	0f af c8             	imul   ecx,eax
    fb5f:	89 ca                	mov    edx,ecx
    fb61:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
    fb64:	01 d0                	add    eax,edx
    fb66:	83 e8 01             	sub    eax,0x1
    fb69:	8b 7d e0             	mov    edi,DWORD PTR [rbp-0x20]
    fb6c:	ba 00 00 00 00       	mov    edx,0x0
    fb71:	f7 f7                	div    edi
    fb73:	89 c1                	mov    ecx,eax
    fb75:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fb79:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fb7c:	48 63 d0             	movsxd rdx,eax
    fb7f:	48 89 d0             	mov    rax,rdx
    fb82:	48 01 c0             	add    rax,rax
    fb85:	48 01 d0             	add    rax,rdx
    fb88:	48 c1 e0 05          	shl    rax,0x5
    fb8c:	48 01 f0             	add    rax,rsi
    fb8f:	48 05 bc 46 00 00    	add    rax,0x46bc
    fb95:	89 08                	mov    DWORD PTR [rax],ecx
    fb97:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    fb9b:	8b 48 04             	mov    ecx,DWORD PTR [rax+0x4]
    fb9e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fba2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fba5:	48 63 d0             	movsxd rdx,eax
    fba8:	48 89 d0             	mov    rax,rdx
    fbab:	48 01 c0             	add    rax,rax
    fbae:	48 01 d0             	add    rax,rdx
    fbb1:	48 c1 e0 05          	shl    rax,0x5
    fbb5:	48 01 f0             	add    rax,rsi
    fbb8:	48 05 a8 46 00 00    	add    rax,0x46a8
    fbbe:	8b 00                	mov    eax,DWORD PTR [rax]
    fbc0:	0f af c8             	imul   ecx,eax
    fbc3:	89 ca                	mov    edx,ecx
    fbc5:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    fbc8:	01 d0                	add    eax,edx
    fbca:	83 e8 01             	sub    eax,0x1
    fbcd:	8b 7d e4             	mov    edi,DWORD PTR [rbp-0x1c]
    fbd0:	ba 00 00 00 00       	mov    edx,0x0
    fbd5:	f7 f7                	div    edi
    fbd7:	89 c1                	mov    ecx,eax
    fbd9:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fbdd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fbe0:	48 63 d0             	movsxd rdx,eax
    fbe3:	48 89 d0             	mov    rax,rdx
    fbe6:	48 01 c0             	add    rax,rax
    fbe9:	48 01 d0             	add    rax,rdx
    fbec:	48 c1 e0 05          	shl    rax,0x5
    fbf0:	48 01 f0             	add    rax,rsi
    fbf3:	48 05 c0 46 00 00    	add    rax,0x46c0
    fbf9:	89 08                	mov    DWORD PTR [rax],ecx
    fbfb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fbff:	8b 88 90 46 00 00    	mov    ecx,DWORD PTR [rax+0x4690]
    fc05:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fc09:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fc0c:	48 63 d0             	movsxd rdx,eax
    fc0f:	48 89 d0             	mov    rax,rdx
    fc12:	48 01 c0             	add    rax,rax
    fc15:	48 01 d0             	add    rax,rdx
    fc18:	48 c1 e0 05          	shl    rax,0x5
    fc1c:	48 01 f0             	add    rax,rsi
    fc1f:	48 05 a4 46 00 00    	add    rax,0x46a4
    fc25:	8b 00                	mov    eax,DWORD PTR [rax]
    fc27:	0f af c1             	imul   eax,ecx
    fc2a:	8d 0c c5 00 00 00 00 	lea    ecx,[rax*8+0x0]
    fc31:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fc35:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fc38:	48 63 d0             	movsxd rdx,eax
    fc3b:	48 89 d0             	mov    rax,rdx
    fc3e:	48 01 c0             	add    rax,rax
    fc41:	48 01 d0             	add    rax,rdx
    fc44:	48 c1 e0 05          	shl    rax,0x5
    fc48:	48 01 f0             	add    rax,rsi
    fc4b:	48 05 c4 46 00 00    	add    rax,0x46c4
    fc51:	89 08                	mov    DWORD PTR [rax],ecx
    fc53:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fc57:	8b 88 94 46 00 00    	mov    ecx,DWORD PTR [rax+0x4694]
    fc5d:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fc61:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fc64:	48 63 d0             	movsxd rdx,eax
    fc67:	48 89 d0             	mov    rax,rdx
    fc6a:	48 01 c0             	add    rax,rax
    fc6d:	48 01 d0             	add    rax,rdx
    fc70:	48 c1 e0 05          	shl    rax,0x5
    fc74:	48 01 f0             	add    rax,rsi
    fc77:	48 05 a8 46 00 00    	add    rax,0x46a8
    fc7d:	8b 00                	mov    eax,DWORD PTR [rax]
    fc7f:	0f af c1             	imul   eax,ecx
    fc82:	8d 0c c5 00 00 00 00 	lea    ecx,[rax*8+0x0]
    fc89:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fc8d:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fc90:	48 63 d0             	movsxd rdx,eax
    fc93:	48 89 d0             	mov    rax,rdx
    fc96:	48 01 c0             	add    rax,rax
    fc99:	48 01 d0             	add    rax,rdx
    fc9c:	48 c1 e0 05          	shl    rax,0x5
    fca0:	48 01 f0             	add    rax,rsi
    fca3:	48 05 c8 46 00 00    	add    rax,0x46c8
    fca9:	89 08                	mov    DWORD PTR [rax],ecx
    fcab:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fcaf:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fcb2:	48 63 d0             	movsxd rdx,eax
    fcb5:	48 89 d0             	mov    rax,rdx
    fcb8:	48 01 c0             	add    rax,rax
    fcbb:	48 01 d0             	add    rax,rdx
    fcbe:	48 c1 e0 05          	shl    rax,0x5
    fcc2:	48 01 c8             	add    rax,rcx
    fcc5:	48 05 f0 46 00 00    	add    rax,0x46f0
    fccb:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    fcd2:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fcd6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fcd9:	48 63 d0             	movsxd rdx,eax
    fcdc:	48 89 d0             	mov    rax,rdx
    fcdf:	48 01 c0             	add    rax,rax
    fce2:	48 01 d0             	add    rax,rdx
    fce5:	48 c1 e0 05          	shl    rax,0x5
    fce9:	48 01 c8             	add    rax,rcx
    fcec:	48 05 e0 46 00 00    	add    rax,0x46e0
    fcf2:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    fcf9:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fcfd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fd00:	48 63 d0             	movsxd rdx,eax
    fd03:	48 89 d0             	mov    rax,rdx
    fd06:	48 01 c0             	add    rax,rax
    fd09:	48 01 d0             	add    rax,rdx
    fd0c:	48 c1 e0 05          	shl    rax,0x5
    fd10:	48 01 c8             	add    rax,rcx
    fd13:	48 05 e8 46 00 00    	add    rax,0x46e8
    fd19:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    fd20:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fd24:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fd27:	48 63 d0             	movsxd rdx,eax
    fd2a:	48 89 d0             	mov    rax,rdx
    fd2d:	48 01 c0             	add    rax,rax
    fd30:	48 01 d0             	add    rax,rdx
    fd33:	48 c1 e0 05          	shl    rax,0x5
    fd37:	48 01 c8             	add    rax,rcx
    fd3a:	48 05 c8 46 00 00    	add    rax,0x46c8
    fd40:	8b 08                	mov    ecx,DWORD PTR [rax]
    fd42:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fd46:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fd49:	48 63 d0             	movsxd rdx,eax
    fd4c:	48 89 d0             	mov    rax,rdx
    fd4f:	48 01 c0             	add    rax,rax
    fd52:	48 01 d0             	add    rax,rdx
    fd55:	48 c1 e0 05          	shl    rax,0x5
    fd59:	48 01 f0             	add    rax,rsi
    fd5c:	48 05 c4 46 00 00    	add    rax,0x46c4
    fd62:	8b 00                	mov    eax,DWORD PTR [rax]
    fd64:	ba 0f 00 00 00       	mov    edx,0xf
    fd69:	89 ce                	mov    esi,ecx
    fd6b:	89 c7                	mov    edi,eax
    fd6d:	e8 e1 4f ff ff       	call   4d53 <stbi__malloc_mad2(int, int, int)>
    fd72:	48 89 c2             	mov    rdx,rax
    fd75:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fd79:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fd7c:	48 63 c8             	movsxd rcx,eax
    fd7f:	48 89 c8             	mov    rax,rcx
    fd82:	48 01 c0             	add    rax,rax
    fd85:	48 01 c8             	add    rax,rcx
    fd88:	48 c1 e0 05          	shl    rax,0x5
    fd8c:	48 01 f0             	add    rax,rsi
    fd8f:	48 05 d8 46 00 00    	add    rax,0x46d8
    fd95:	48 89 10             	mov    QWORD PTR [rax],rdx
    fd98:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fd9c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fd9f:	48 63 d0             	movsxd rdx,eax
    fda2:	48 89 d0             	mov    rax,rdx
    fda5:	48 01 c0             	add    rax,rax
    fda8:	48 01 d0             	add    rax,rdx
    fdab:	48 c1 e0 05          	shl    rax,0x5
    fdaf:	48 01 c8             	add    rax,rcx
    fdb2:	48 05 d8 46 00 00    	add    rax,0x46d8
    fdb8:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fdbb:	48 85 c0             	test   rax,rax
    fdbe:	75 2a                	jne    fdea <stbi__process_frame_header(stbi__jpeg*, int)+0x87a>
    fdc0:	48 8d 05 6c a2 02 00 	lea    rax,[rip+0x2a26c]        # 3a033 <_IO_stdin_used+0x33>
    fdc7:	48 89 c7             	mov    rdi,rax
    fdca:	e8 a3 4d ff ff       	call   4b72 <stbi__err(char const*)>
    fdcf:	89 c2                	mov    edx,eax
    fdd1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fdd4:	8d 48 01             	lea    ecx,[rax+0x1]
    fdd7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fddb:	89 ce                	mov    esi,ecx
    fddd:	48 89 c7             	mov    rdi,rax
    fde0:	e8 9c f5 ff ff       	call   f381 <stbi__free_jpeg_components(stbi__jpeg*, int, int)>
    fde5:	e9 39 02 00 00       	jmp    10023 <stbi__process_frame_header(stbi__jpeg*, int)+0xab3>
    fdea:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fdee:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fdf1:	48 63 d0             	movsxd rdx,eax
    fdf4:	48 89 d0             	mov    rax,rdx
    fdf7:	48 01 c0             	add    rax,rax
    fdfa:	48 01 d0             	add    rax,rdx
    fdfd:	48 c1 e0 05          	shl    rax,0x5
    fe01:	48 01 c8             	add    rax,rcx
    fe04:	48 05 d8 46 00 00    	add    rax,0x46d8
    fe0a:	48 8b 00             	mov    rax,QWORD PTR [rax]
    fe0d:	48 83 c0 0f          	add    rax,0xf
    fe11:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
    fe15:	48 89 c1             	mov    rcx,rax
    fe18:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fe1c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fe1f:	48 63 d0             	movsxd rdx,eax
    fe22:	48 89 d0             	mov    rax,rdx
    fe25:	48 01 c0             	add    rax,rax
    fe28:	48 01 d0             	add    rax,rdx
    fe2b:	48 c1 e0 05          	shl    rax,0x5
    fe2f:	48 01 f0             	add    rax,rsi
    fe32:	48 05 d0 46 00 00    	add    rax,0x46d0
    fe38:	48 89 08             	mov    QWORD PTR [rax],rcx
    fe3b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    fe3f:	8b 80 30 48 00 00    	mov    eax,DWORD PTR [rax+0x4830]
    fe45:	85 c0                	test   eax,eax
    fe47:	0f 84 bd 01 00 00    	je     1000a <stbi__process_frame_header(stbi__jpeg*, int)+0xa9a>
    fe4d:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fe51:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fe54:	48 63 d0             	movsxd rdx,eax
    fe57:	48 89 d0             	mov    rax,rdx
    fe5a:	48 01 c0             	add    rax,rax
    fe5d:	48 01 d0             	add    rax,rdx
    fe60:	48 c1 e0 05          	shl    rax,0x5
    fe64:	48 01 c8             	add    rax,rcx
    fe67:	48 05 c4 46 00 00    	add    rax,0x46c4
    fe6d:	8b 00                	mov    eax,DWORD PTR [rax]
    fe6f:	8d 50 07             	lea    edx,[rax+0x7]
    fe72:	85 c0                	test   eax,eax
    fe74:	0f 48 c2             	cmovs  eax,edx
    fe77:	c1 f8 03             	sar    eax,0x3
    fe7a:	89 c1                	mov    ecx,eax
    fe7c:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fe80:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fe83:	48 63 d0             	movsxd rdx,eax
    fe86:	48 89 d0             	mov    rax,rdx
    fe89:	48 01 c0             	add    rax,rax
    fe8c:	48 01 d0             	add    rax,rdx
    fe8f:	48 c1 e0 05          	shl    rax,0x5
    fe93:	48 01 f0             	add    rax,rsi
    fe96:	48 05 f8 46 00 00    	add    rax,0x46f8
    fe9c:	89 08                	mov    DWORD PTR [rax],ecx
    fe9e:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fea2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fea5:	48 63 d0             	movsxd rdx,eax
    fea8:	48 89 d0             	mov    rax,rdx
    feab:	48 01 c0             	add    rax,rax
    feae:	48 01 d0             	add    rax,rdx
    feb1:	48 c1 e0 05          	shl    rax,0x5
    feb5:	48 01 c8             	add    rax,rcx
    feb8:	48 05 c8 46 00 00    	add    rax,0x46c8
    febe:	8b 00                	mov    eax,DWORD PTR [rax]
    fec0:	8d 50 07             	lea    edx,[rax+0x7]
    fec3:	85 c0                	test   eax,eax
    fec5:	0f 48 c2             	cmovs  eax,edx
    fec8:	c1 f8 03             	sar    eax,0x3
    fecb:	89 c1                	mov    ecx,eax
    fecd:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    fed1:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fed4:	48 63 d0             	movsxd rdx,eax
    fed7:	48 89 d0             	mov    rax,rdx
    feda:	48 01 c0             	add    rax,rax
    fedd:	48 01 d0             	add    rax,rdx
    fee0:	48 c1 e0 05          	shl    rax,0x5
    fee4:	48 01 f0             	add    rax,rsi
    fee7:	48 05 fc 46 00 00    	add    rax,0x46fc
    feed:	89 08                	mov    DWORD PTR [rax],ecx
    feef:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    fef3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    fef6:	48 63 d0             	movsxd rdx,eax
    fef9:	48 89 d0             	mov    rax,rdx
    fefc:	48 01 c0             	add    rax,rax
    feff:	48 01 d0             	add    rax,rdx
    ff02:	48 c1 e0 05          	shl    rax,0x5
    ff06:	48 01 c8             	add    rax,rcx
    ff09:	48 05 c8 46 00 00    	add    rax,0x46c8
    ff0f:	8b 30                	mov    esi,DWORD PTR [rax]
    ff11:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    ff15:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    ff18:	48 63 d0             	movsxd rdx,eax
    ff1b:	48 89 d0             	mov    rax,rdx
    ff1e:	48 01 c0             	add    rax,rax
    ff21:	48 01 d0             	add    rax,rdx
    ff24:	48 c1 e0 05          	shl    rax,0x5
    ff28:	48 01 c8             	add    rax,rcx
    ff2b:	48 05 c4 46 00 00    	add    rax,0x46c4
    ff31:	8b 00                	mov    eax,DWORD PTR [rax]
    ff33:	b9 0f 00 00 00       	mov    ecx,0xf
    ff38:	ba 02 00 00 00       	mov    edx,0x2
    ff3d:	89 c7                	mov    edi,eax
    ff3f:	e8 5d 4e ff ff       	call   4da1 <stbi__malloc_mad3(int, int, int, int)>
    ff44:	48 89 c2             	mov    rdx,rax
    ff47:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    ff4b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    ff4e:	48 63 c8             	movsxd rcx,eax
    ff51:	48 89 c8             	mov    rax,rcx
    ff54:	48 01 c0             	add    rax,rax
    ff57:	48 01 c8             	add    rax,rcx
    ff5a:	48 c1 e0 05          	shl    rax,0x5
    ff5e:	48 01 f0             	add    rax,rsi
    ff61:	48 05 e0 46 00 00    	add    rax,0x46e0
    ff67:	48 89 10             	mov    QWORD PTR [rax],rdx
    ff6a:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    ff6e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    ff71:	48 63 d0             	movsxd rdx,eax
    ff74:	48 89 d0             	mov    rax,rdx
    ff77:	48 01 c0             	add    rax,rax
    ff7a:	48 01 d0             	add    rax,rdx
    ff7d:	48 c1 e0 05          	shl    rax,0x5
    ff81:	48 01 c8             	add    rax,rcx
    ff84:	48 05 e0 46 00 00    	add    rax,0x46e0
    ff8a:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ff8d:	48 85 c0             	test   rax,rax
    ff90:	75 27                	jne    ffb9 <stbi__process_frame_header(stbi__jpeg*, int)+0xa49>
    ff92:	48 8d 05 9a a0 02 00 	lea    rax,[rip+0x2a09a]        # 3a033 <_IO_stdin_used+0x33>
    ff99:	48 89 c7             	mov    rdi,rax
    ff9c:	e8 d1 4b ff ff       	call   4b72 <stbi__err(char const*)>
    ffa1:	89 c2                	mov    edx,eax
    ffa3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    ffa6:	8d 48 01             	lea    ecx,[rax+0x1]
    ffa9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    ffad:	89 ce                	mov    esi,ecx
    ffaf:	48 89 c7             	mov    rdi,rax
    ffb2:	e8 ca f3 ff ff       	call   f381 <stbi__free_jpeg_components(stbi__jpeg*, int, int)>
    ffb7:	eb 6a                	jmp    10023 <stbi__process_frame_header(stbi__jpeg*, int)+0xab3>
    ffb9:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
    ffbd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    ffc0:	48 63 d0             	movsxd rdx,eax
    ffc3:	48 89 d0             	mov    rax,rdx
    ffc6:	48 01 c0             	add    rax,rax
    ffc9:	48 01 d0             	add    rax,rdx
    ffcc:	48 c1 e0 05          	shl    rax,0x5
    ffd0:	48 01 c8             	add    rax,rcx
    ffd3:	48 05 e0 46 00 00    	add    rax,0x46e0
    ffd9:	48 8b 00             	mov    rax,QWORD PTR [rax]
    ffdc:	48 83 c0 0f          	add    rax,0xf
    ffe0:	48 83 e0 f0          	and    rax,0xfffffffffffffff0
    ffe4:	48 89 c1             	mov    rcx,rax
    ffe7:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
    ffeb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    ffee:	48 63 d0             	movsxd rdx,eax
    fff1:	48 89 d0             	mov    rax,rdx
    fff4:	48 01 c0             	add    rax,rax
    fff7:	48 01 d0             	add    rax,rdx
    fffa:	48 c1 e0 05          	shl    rax,0x5
    fffe:	48 01 f0             	add    rax,rsi
   10001:	48 05 f0 46 00 00    	add    rax,0x46f0
   10007:	48 89 08             	mov    QWORD PTR [rax],rcx
   1000a:	83 45 dc 01          	add    DWORD PTR [rbp-0x24],0x1
   1000e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   10012:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   10015:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
   10018:	0f 8c 16 fb ff ff    	jl     fb34 <stbi__process_frame_header(stbi__jpeg*, int)+0x5c4>
   1001e:	b8 01 00 00 00       	mov    eax,0x1
   10023:	c9                   	leave  
   10024:	c3                   	ret    

0000000000010025 <stbi__decode_jpeg_header(stbi__jpeg*, int)>:
   10025:	55                   	push   rbp
   10026:	48 89 e5             	mov    rbp,rsp
   10029:	48 83 ec 20          	sub    rsp,0x20
   1002d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   10031:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   10034:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10038:	c7 80 48 48 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x4848],0x0
   10042:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10046:	c7 80 4c 48 00 00 ff ff ff ff 	mov    DWORD PTR [rax+0x484c],0xffffffff
   10050:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10054:	c6 80 28 48 00 00 ff 	mov    BYTE PTR [rax+0x4828],0xff
   1005b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1005f:	48 89 c7             	mov    rdi,rax
   10062:	e8 a9 d6 ff ff       	call   d710 <stbi__get_marker(stbi__jpeg*)>
   10067:	0f b6 c0             	movzx  eax,al
   1006a:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1006d:	81 7d fc d8 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xd8
   10074:	74 14                	je     1008a <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x65>
   10076:	48 8d 05 d9 a5 02 00 	lea    rax,[rip+0x2a5d9]        # 3a656 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x64>
   1007d:	48 89 c7             	mov    rdi,rax
   10080:	e8 ed 4a ff ff       	call   4b72 <stbi__err(char const*)>
   10085:	e9 fc 00 00 00       	jmp    10186 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x161>
   1008a:	83 7d e4 01          	cmp    DWORD PTR [rbp-0x1c],0x1
   1008e:	75 0a                	jne    1009a <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x75>
   10090:	b8 01 00 00 00       	mov    eax,0x1
   10095:	e9 ec 00 00 00       	jmp    10186 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x161>
   1009a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1009e:	48 89 c7             	mov    rdi,rax
   100a1:	e8 6a d6 ff ff       	call   d710 <stbi__get_marker(stbi__jpeg*)>
   100a6:	0f b6 c0             	movzx  eax,al
   100a9:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   100ac:	eb 7c                	jmp    1012a <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x105>
   100ae:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   100b1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   100b5:	89 d6                	mov    esi,edx
   100b7:	48 89 c7             	mov    rdi,rax
   100ba:	e8 49 e8 ff ff       	call   e908 <stbi__process_marker(stbi__jpeg*, int)>
   100bf:	85 c0                	test   eax,eax
   100c1:	0f 94 c0             	sete   al
   100c4:	84 c0                	test   al,al
   100c6:	74 0a                	je     100d2 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0xad>
   100c8:	b8 00 00 00 00       	mov    eax,0x0
   100cd:	e9 b4 00 00 00       	jmp    10186 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x161>
   100d2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   100d6:	48 89 c7             	mov    rdi,rax
   100d9:	e8 32 d6 ff ff       	call   d710 <stbi__get_marker(stbi__jpeg*)>
   100de:	0f b6 c0             	movzx  eax,al
   100e1:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   100e4:	eb 3b                	jmp    10121 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0xfc>
   100e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   100ea:	48 8b 00             	mov    rax,QWORD PTR [rax]
   100ed:	48 89 c7             	mov    rdi,rax
   100f0:	e8 9f 64 ff ff       	call   6594 <stbi__at_eof(stbi__context*)>
   100f5:	85 c0                	test   eax,eax
   100f7:	0f 95 c0             	setne  al
   100fa:	84 c0                	test   al,al
   100fc:	74 11                	je     1010f <stbi__decode_jpeg_header(stbi__jpeg*, int)+0xea>
   100fe:	48 8d 05 58 a5 02 00 	lea    rax,[rip+0x2a558]        # 3a65d <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x6b>
   10105:	48 89 c7             	mov    rdi,rax
   10108:	e8 65 4a ff ff       	call   4b72 <stbi__err(char const*)>
   1010d:	eb 77                	jmp    10186 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x161>
   1010f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10113:	48 89 c7             	mov    rdi,rax
   10116:	e8 f5 d5 ff ff       	call   d710 <stbi__get_marker(stbi__jpeg*)>
   1011b:	0f b6 c0             	movzx  eax,al
   1011e:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   10121:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
   10128:	74 bc                	je     100e6 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0xc1>
   1012a:	81 7d fc c0 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xc0
   10131:	74 16                	je     10149 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x124>
   10133:	81 7d fc c1 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xc1
   1013a:	74 0d                	je     10149 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x124>
   1013c:	81 7d fc c2 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xc2
   10143:	0f 85 65 ff ff ff    	jne    100ae <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x89>
   10149:	81 7d fc c2 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xc2
   10150:	0f 94 c0             	sete   al
   10153:	0f b6 d0             	movzx  edx,al
   10156:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1015a:	89 90 30 48 00 00    	mov    DWORD PTR [rax+0x4830],edx
   10160:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   10163:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10167:	89 d6                	mov    esi,edx
   10169:	48 89 c7             	mov    rdi,rax
   1016c:	e8 ff f3 ff ff       	call   f570 <stbi__process_frame_header(stbi__jpeg*, int)>
   10171:	85 c0                	test   eax,eax
   10173:	0f 94 c0             	sete   al
   10176:	84 c0                	test   al,al
   10178:	74 07                	je     10181 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x15c>
   1017a:	b8 00 00 00 00       	mov    eax,0x0
   1017f:	eb 05                	jmp    10186 <stbi__decode_jpeg_header(stbi__jpeg*, int)+0x161>
   10181:	b8 01 00 00 00       	mov    eax,0x1
   10186:	c9                   	leave  
   10187:	c3                   	ret    

0000000000010188 <stbi__decode_jpeg_image(stbi__jpeg*)>:
   10188:	55                   	push   rbp
   10189:	48 89 e5             	mov    rbp,rsp
   1018c:	48 83 ec 20          	sub    rsp,0x20
   10190:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   10194:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
   1019b:	eb 52                	jmp    101ef <stbi__decode_jpeg_image(stbi__jpeg*)+0x67>
   1019d:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   101a1:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   101a4:	48 63 d0             	movsxd rdx,eax
   101a7:	48 89 d0             	mov    rax,rdx
   101aa:	48 01 c0             	add    rax,rax
   101ad:	48 01 d0             	add    rax,rdx
   101b0:	48 c1 e0 05          	shl    rax,0x5
   101b4:	48 01 c8             	add    rax,rcx
   101b7:	48 05 d8 46 00 00    	add    rax,0x46d8
   101bd:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   101c4:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   101c8:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   101cb:	48 63 d0             	movsxd rdx,eax
   101ce:	48 89 d0             	mov    rax,rdx
   101d1:	48 01 c0             	add    rax,rax
   101d4:	48 01 d0             	add    rax,rdx
   101d7:	48 c1 e0 05          	shl    rax,0x5
   101db:	48 01 c8             	add    rax,rcx
   101de:	48 05 e0 46 00 00    	add    rax,0x46e0
   101e4:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   101eb:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
   101ef:	83 7d f0 03          	cmp    DWORD PTR [rbp-0x10],0x3
   101f3:	7e a8                	jle    1019d <stbi__decode_jpeg_image(stbi__jpeg*)+0x15>
   101f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   101f9:	c7 80 68 48 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x4868],0x0
   10203:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10207:	be 00 00 00 00       	mov    esi,0x0
   1020c:	48 89 c7             	mov    rdi,rax
   1020f:	e8 11 fe ff ff       	call   10025 <stbi__decode_jpeg_header(stbi__jpeg*, int)>
   10214:	85 c0                	test   eax,eax
   10216:	0f 94 c0             	sete   al
   10219:	84 c0                	test   al,al
   1021b:	74 0a                	je     10227 <stbi__decode_jpeg_image(stbi__jpeg*)+0x9f>
   1021d:	b8 00 00 00 00       	mov    eax,0x0
   10222:	e9 93 01 00 00       	jmp    103ba <stbi__decode_jpeg_image(stbi__jpeg*)+0x232>
   10227:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1022b:	48 89 c7             	mov    rdi,rax
   1022e:	e8 dd d4 ff ff       	call   d710 <stbi__get_marker(stbi__jpeg*)>
   10233:	0f b6 c0             	movzx  eax,al
   10236:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   10239:	e9 50 01 00 00       	jmp    1038e <stbi__decode_jpeg_image(stbi__jpeg*)+0x206>
   1023e:	81 7d f0 da 00 00 00 	cmp    DWORD PTR [rbp-0x10],0xda
   10245:	0f 85 ac 00 00 00    	jne    102f7 <stbi__decode_jpeg_image(stbi__jpeg*)+0x16f>
   1024b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1024f:	48 89 c7             	mov    rdi,rax
   10252:	e8 ac ed ff ff       	call   f003 <stbi__process_scan_header(stbi__jpeg*)>
   10257:	85 c0                	test   eax,eax
   10259:	0f 94 c0             	sete   al
   1025c:	84 c0                	test   al,al
   1025e:	74 0a                	je     1026a <stbi__decode_jpeg_image(stbi__jpeg*)+0xe2>
   10260:	b8 00 00 00 00       	mov    eax,0x0
   10265:	e9 50 01 00 00       	jmp    103ba <stbi__decode_jpeg_image(stbi__jpeg*)+0x232>
   1026a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1026e:	48 89 c7             	mov    rdi,rax
   10271:	e8 d2 d5 ff ff       	call   d848 <stbi__parse_entropy_coded_data(stbi__jpeg*)>
   10276:	85 c0                	test   eax,eax
   10278:	0f 94 c0             	sete   al
   1027b:	84 c0                	test   al,al
   1027d:	74 0a                	je     10289 <stbi__decode_jpeg_image(stbi__jpeg*)+0x101>
   1027f:	b8 00 00 00 00       	mov    eax,0x0
   10284:	e9 31 01 00 00       	jmp    103ba <stbi__decode_jpeg_image(stbi__jpeg*)+0x232>
   10289:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1028d:	0f b6 80 28 48 00 00 	movzx  eax,BYTE PTR [rax+0x4828]
   10294:	3c ff                	cmp    al,0xff
   10296:	0f 85 e0 00 00 00    	jne    1037c <stbi__decode_jpeg_image(stbi__jpeg*)+0x1f4>
   1029c:	eb 3c                	jmp    102da <stbi__decode_jpeg_image(stbi__jpeg*)+0x152>
   1029e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   102a2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   102a5:	48 89 c7             	mov    rdi,rax
   102a8:	e8 64 62 ff ff       	call   6511 <stbi__get8(stbi__context*)>
   102ad:	0f b6 c0             	movzx  eax,al
   102b0:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   102b3:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
   102ba:	75 1e                	jne    102da <stbi__decode_jpeg_image(stbi__jpeg*)+0x152>
   102bc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   102c0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   102c3:	48 89 c7             	mov    rdi,rax
   102c6:	e8 46 62 ff ff       	call   6511 <stbi__get8(stbi__context*)>
   102cb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   102cf:	88 82 28 48 00 00    	mov    BYTE PTR [rdx+0x4828],al
   102d5:	e9 a2 00 00 00       	jmp    1037c <stbi__decode_jpeg_image(stbi__jpeg*)+0x1f4>
   102da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   102de:	48 8b 00             	mov    rax,QWORD PTR [rax]
   102e1:	48 89 c7             	mov    rdi,rax
   102e4:	e8 ab 62 ff ff       	call   6594 <stbi__at_eof(stbi__context*)>
   102e9:	85 c0                	test   eax,eax
   102eb:	0f 94 c0             	sete   al
   102ee:	84 c0                	test   al,al
   102f0:	75 ac                	jne    1029e <stbi__decode_jpeg_image(stbi__jpeg*)+0x116>
   102f2:	e9 85 00 00 00       	jmp    1037c <stbi__decode_jpeg_image(stbi__jpeg*)+0x1f4>
   102f7:	81 7d f0 dc 00 00 00 	cmp    DWORD PTR [rbp-0x10],0xdc
   102fe:	75 5b                	jne    1035b <stbi__decode_jpeg_image(stbi__jpeg*)+0x1d3>
   10300:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10304:	48 8b 00             	mov    rax,QWORD PTR [rax]
   10307:	48 89 c7             	mov    rdi,rax
   1030a:	e8 e5 64 ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1030f:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   10312:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10316:	48 8b 00             	mov    rax,QWORD PTR [rax]
   10319:	48 89 c7             	mov    rdi,rax
   1031c:	e8 d3 64 ff ff       	call   67f4 <stbi__get16be(stbi__context*)>
   10321:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   10324:	83 7d f4 04          	cmp    DWORD PTR [rbp-0xc],0x4
   10328:	74 11                	je     1033b <stbi__decode_jpeg_image(stbi__jpeg*)+0x1b3>
   1032a:	48 8d 05 33 a3 02 00 	lea    rax,[rip+0x2a333]        # 3a664 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x72>
   10331:	48 89 c7             	mov    rdi,rax
   10334:	e8 39 48 ff ff       	call   4b72 <stbi__err(char const*)>
   10339:	eb 7f                	jmp    103ba <stbi__decode_jpeg_image(stbi__jpeg*)+0x232>
   1033b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1033f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   10342:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   10345:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
   10348:	74 32                	je     1037c <stbi__decode_jpeg_image(stbi__jpeg*)+0x1f4>
   1034a:	48 8d 05 1f a3 02 00 	lea    rax,[rip+0x2a31f]        # 3a670 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x7e>
   10351:	48 89 c7             	mov    rdi,rax
   10354:	e8 19 48 ff ff       	call   4b72 <stbi__err(char const*)>
   10359:	eb 5f                	jmp    103ba <stbi__decode_jpeg_image(stbi__jpeg*)+0x232>
   1035b:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   1035e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10362:	89 d6                	mov    esi,edx
   10364:	48 89 c7             	mov    rdi,rax
   10367:	e8 9c e5 ff ff       	call   e908 <stbi__process_marker(stbi__jpeg*, int)>
   1036c:	85 c0                	test   eax,eax
   1036e:	0f 94 c0             	sete   al
   10371:	84 c0                	test   al,al
   10373:	74 07                	je     1037c <stbi__decode_jpeg_image(stbi__jpeg*)+0x1f4>
   10375:	b8 00 00 00 00       	mov    eax,0x0
   1037a:	eb 3e                	jmp    103ba <stbi__decode_jpeg_image(stbi__jpeg*)+0x232>
   1037c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10380:	48 89 c7             	mov    rdi,rax
   10383:	e8 88 d3 ff ff       	call   d710 <stbi__get_marker(stbi__jpeg*)>
   10388:	0f b6 c0             	movzx  eax,al
   1038b:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   1038e:	81 7d f0 d9 00 00 00 	cmp    DWORD PTR [rbp-0x10],0xd9
   10395:	0f 85 a3 fe ff ff    	jne    1023e <stbi__decode_jpeg_image(stbi__jpeg*)+0xb6>
   1039b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1039f:	8b 80 30 48 00 00    	mov    eax,DWORD PTR [rax+0x4830]
   103a5:	85 c0                	test   eax,eax
   103a7:	74 0c                	je     103b5 <stbi__decode_jpeg_image(stbi__jpeg*)+0x22d>
   103a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   103ad:	48 89 c7             	mov    rdi,rax
   103b0:	e8 42 e3 ff ff       	call   e6f7 <stbi__jpeg_finish(stbi__jpeg*)>
   103b5:	b8 01 00 00 00       	mov    eax,0x1
   103ba:	c9                   	leave  
   103bb:	c3                   	ret    

00000000000103bc <resample_row_1(unsigned char*, unsigned char*, unsigned char*, int, int)>:
   103bc:	55                   	push   rbp
   103bd:	48 89 e5             	mov    rbp,rsp
   103c0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   103c4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   103c8:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   103cc:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
   103cf:	44 89 45 e0          	mov    DWORD PTR [rbp-0x20],r8d
   103d3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   103d7:	5d                   	pop    rbp
   103d8:	c3                   	ret    

00000000000103d9 <stbi__resample_row_v_2(unsigned char*, unsigned char*, unsigned char*, int, int)>:
   103d9:	55                   	push   rbp
   103da:	48 89 e5             	mov    rbp,rsp
   103dd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   103e1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   103e5:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   103e9:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
   103ec:	44 89 45 d0          	mov    DWORD PTR [rbp-0x30],r8d
   103f0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   103f7:	eb 4c                	jmp    10445 <stbi__resample_row_v_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x6c>
   103f9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   103fc:	48 63 d0             	movsxd rdx,eax
   103ff:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   10403:	48 01 d0             	add    rax,rdx
   10406:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10409:	0f b6 d0             	movzx  edx,al
   1040c:	89 d0                	mov    eax,edx
   1040e:	01 c0                	add    eax,eax
   10410:	8d 0c 10             	lea    ecx,[rax+rdx*1]
   10413:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   10416:	48 63 d0             	movsxd rdx,eax
   10419:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1041d:	48 01 d0             	add    rax,rdx
   10420:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10423:	0f b6 c0             	movzx  eax,al
   10426:	01 c8                	add    eax,ecx
   10428:	83 c0 02             	add    eax,0x2
   1042b:	c1 f8 02             	sar    eax,0x2
   1042e:	89 c1                	mov    ecx,eax
   10430:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   10433:	48 63 d0             	movsxd rdx,eax
   10436:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1043a:	48 01 d0             	add    rax,rdx
   1043d:	89 ca                	mov    edx,ecx
   1043f:	88 10                	mov    BYTE PTR [rax],dl
   10441:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   10445:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   10448:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
   1044b:	7c ac                	jl     103f9 <stbi__resample_row_v_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x20>
   1044d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10451:	5d                   	pop    rbp
   10452:	c3                   	ret    

0000000000010453 <stbi__resample_row_h_2(unsigned char*, unsigned char*, unsigned char*, int, int)>:
   10453:	55                   	push   rbp
   10454:	48 89 e5             	mov    rbp,rsp
   10457:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1045b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1045f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   10463:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
   10466:	44 89 45 d0          	mov    DWORD PTR [rbp-0x30],r8d
   1046a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1046e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   10472:	83 7d d4 01          	cmp    DWORD PTR [rbp-0x2c],0x1
   10476:	75 23                	jne    1049b <stbi__resample_row_h_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x48>
   10478:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1047c:	48 83 c0 01          	add    rax,0x1
   10480:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   10484:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
   10487:	88 10                	mov    BYTE PTR [rax],dl
   10489:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   1048c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10490:	88 10                	mov    BYTE PTR [rax],dl
   10492:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10496:	e9 5f 01 00 00       	jmp    105fa <stbi__resample_row_h_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x1a7>
   1049b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1049f:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   104a2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   104a6:	88 10                	mov    BYTE PTR [rax],dl
   104a8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   104ac:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   104af:	0f b6 d0             	movzx  edx,al
   104b2:	89 d0                	mov    eax,edx
   104b4:	01 c0                	add    eax,eax
   104b6:	01 c2                	add    edx,eax
   104b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   104bc:	48 83 c0 01          	add    rax,0x1
   104c0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   104c3:	0f b6 c0             	movzx  eax,al
   104c6:	01 d0                	add    eax,edx
   104c8:	83 c0 02             	add    eax,0x2
   104cb:	c1 f8 02             	sar    eax,0x2
   104ce:	89 c2                	mov    edx,eax
   104d0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   104d4:	48 83 c0 01          	add    rax,0x1
   104d8:	88 10                	mov    BYTE PTR [rax],dl
   104da:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [rbp-0x10],0x1
   104e1:	e9 8a 00 00 00       	jmp    10570 <stbi__resample_row_h_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x11d>
   104e6:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   104e9:	48 63 d0             	movsxd rdx,eax
   104ec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   104f0:	48 01 d0             	add    rax,rdx
   104f3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   104f6:	0f b6 d0             	movzx  edx,al
   104f9:	89 d0                	mov    eax,edx
   104fb:	01 c0                	add    eax,eax
   104fd:	01 d0                	add    eax,edx
   104ff:	83 c0 02             	add    eax,0x2
   10502:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   10505:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   10508:	48 98                	cdqe   
   1050a:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   1050e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   10512:	48 01 d0             	add    rax,rdx
   10515:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10518:	0f b6 d0             	movzx  edx,al
   1051b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1051e:	01 d0                	add    eax,edx
   10520:	c1 f8 02             	sar    eax,0x2
   10523:	89 c1                	mov    ecx,eax
   10525:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   10528:	01 c0                	add    eax,eax
   1052a:	48 63 d0             	movsxd rdx,eax
   1052d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10531:	48 01 d0             	add    rax,rdx
   10534:	89 ca                	mov    edx,ecx
   10536:	88 10                	mov    BYTE PTR [rax],dl
   10538:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1053b:	48 98                	cdqe   
   1053d:	48 8d 50 01          	lea    rdx,[rax+0x1]
   10541:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   10545:	48 01 d0             	add    rax,rdx
   10548:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1054b:	0f b6 d0             	movzx  edx,al
   1054e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   10551:	01 d0                	add    eax,edx
   10553:	c1 f8 02             	sar    eax,0x2
   10556:	89 c2                	mov    edx,eax
   10558:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1055b:	01 c0                	add    eax,eax
   1055d:	48 98                	cdqe   
   1055f:	48 8d 48 01          	lea    rcx,[rax+0x1]
   10563:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10567:	48 01 c8             	add    rax,rcx
   1056a:	88 10                	mov    BYTE PTR [rax],dl
   1056c:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
   10570:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   10573:	83 e8 01             	sub    eax,0x1
   10576:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
   10579:	0f 8c 67 ff ff ff    	jl     104e6 <stbi__resample_row_h_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x93>
   1057f:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   10582:	48 98                	cdqe   
   10584:	48 8d 50 fe          	lea    rdx,[rax-0x2]
   10588:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1058c:	48 01 d0             	add    rax,rdx
   1058f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10592:	0f b6 d0             	movzx  edx,al
   10595:	89 d0                	mov    eax,edx
   10597:	01 c0                	add    eax,eax
   10599:	01 c2                	add    edx,eax
   1059b:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1059e:	48 98                	cdqe   
   105a0:	48 8d 48 ff          	lea    rcx,[rax-0x1]
   105a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   105a8:	48 01 c8             	add    rax,rcx
   105ab:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   105ae:	0f b6 c0             	movzx  eax,al
   105b1:	01 d0                	add    eax,edx
   105b3:	83 c0 02             	add    eax,0x2
   105b6:	c1 f8 02             	sar    eax,0x2
   105b9:	89 c1                	mov    ecx,eax
   105bb:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   105be:	01 c0                	add    eax,eax
   105c0:	48 63 d0             	movsxd rdx,eax
   105c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   105c7:	48 01 d0             	add    rax,rdx
   105ca:	89 ca                	mov    edx,ecx
   105cc:	88 10                	mov    BYTE PTR [rax],dl
   105ce:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   105d1:	48 98                	cdqe   
   105d3:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   105d7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   105db:	48 01 d0             	add    rax,rdx
   105de:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   105e1:	01 d2                	add    edx,edx
   105e3:	48 63 d2             	movsxd rdx,edx
   105e6:	48 8d 4a 01          	lea    rcx,[rdx+0x1]
   105ea:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   105ee:	48 01 ca             	add    rdx,rcx
   105f1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   105f4:	88 02                	mov    BYTE PTR [rdx],al
   105f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   105fa:	5d                   	pop    rbp
   105fb:	c3                   	ret    

00000000000105fc <stbi__resample_row_hv_2(unsigned char*, unsigned char*, unsigned char*, int, int)>:
   105fc:	55                   	push   rbp
   105fd:	48 89 e5             	mov    rbp,rsp
   10600:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   10604:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   10608:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1060c:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
   1060f:	44 89 45 d0          	mov    DWORD PTR [rbp-0x30],r8d
   10613:	83 7d d4 01          	cmp    DWORD PTR [rbp-0x2c],0x1
   10617:	75 40                	jne    10659 <stbi__resample_row_hv_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x5d>
   10619:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1061d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10620:	0f b6 d0             	movzx  edx,al
   10623:	89 d0                	mov    eax,edx
   10625:	01 c0                	add    eax,eax
   10627:	01 c2                	add    edx,eax
   10629:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1062d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10630:	0f b6 c0             	movzx  eax,al
   10633:	01 d0                	add    eax,edx
   10635:	83 c0 02             	add    eax,0x2
   10638:	c1 f8 02             	sar    eax,0x2
   1063b:	89 c2                	mov    edx,eax
   1063d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10641:	48 83 c0 01          	add    rax,0x1
   10645:	88 10                	mov    BYTE PTR [rax],dl
   10647:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   1064a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1064e:	88 10                	mov    BYTE PTR [rax],dl
   10650:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10654:	e9 fa 00 00 00       	jmp    10753 <stbi__resample_row_hv_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x157>
   10659:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1065d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10660:	0f b6 d0             	movzx  edx,al
   10663:	89 d0                	mov    eax,edx
   10665:	01 c0                	add    eax,eax
   10667:	01 c2                	add    edx,eax
   10669:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1066d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10670:	0f b6 c0             	movzx  eax,al
   10673:	01 d0                	add    eax,edx
   10675:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   10678:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   1067b:	83 c0 02             	add    eax,0x2
   1067e:	c1 f8 02             	sar    eax,0x2
   10681:	89 c2                	mov    edx,eax
   10683:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10687:	88 10                	mov    BYTE PTR [rax],dl
   10689:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [rbp-0xc],0x1
   10690:	e9 8f 00 00 00       	jmp    10724 <stbi__resample_row_hv_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x128>
   10695:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   10698:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1069b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1069e:	48 63 d0             	movsxd rdx,eax
   106a1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   106a5:	48 01 d0             	add    rax,rdx
   106a8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   106ab:	0f b6 d0             	movzx  edx,al
   106ae:	89 d0                	mov    eax,edx
   106b0:	01 c0                	add    eax,eax
   106b2:	8d 0c 10             	lea    ecx,[rax+rdx*1]
   106b5:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   106b8:	48 63 d0             	movsxd rdx,eax
   106bb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   106bf:	48 01 d0             	add    rax,rdx
   106c2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   106c5:	0f b6 c0             	movzx  eax,al
   106c8:	01 c8                	add    eax,ecx
   106ca:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   106cd:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   106d0:	89 d0                	mov    eax,edx
   106d2:	01 c0                	add    eax,eax
   106d4:	01 c2                	add    edx,eax
   106d6:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   106d9:	01 d0                	add    eax,edx
   106db:	83 c0 08             	add    eax,0x8
   106de:	c1 f8 04             	sar    eax,0x4
   106e1:	89 c2                	mov    edx,eax
   106e3:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   106e6:	01 c0                	add    eax,eax
   106e8:	48 98                	cdqe   
   106ea:	48 8d 48 ff          	lea    rcx,[rax-0x1]
   106ee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   106f2:	48 01 c8             	add    rax,rcx
   106f5:	88 10                	mov    BYTE PTR [rax],dl
   106f7:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   106fa:	89 d0                	mov    eax,edx
   106fc:	01 c0                	add    eax,eax
   106fe:	01 c2                	add    edx,eax
   10700:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   10703:	01 d0                	add    eax,edx
   10705:	83 c0 08             	add    eax,0x8
   10708:	c1 f8 04             	sar    eax,0x4
   1070b:	89 c1                	mov    ecx,eax
   1070d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   10710:	01 c0                	add    eax,eax
   10712:	48 63 d0             	movsxd rdx,eax
   10715:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10719:	48 01 d0             	add    rax,rdx
   1071c:	89 ca                	mov    edx,ecx
   1071e:	88 10                	mov    BYTE PTR [rax],dl
   10720:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   10724:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   10727:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
   1072a:	0f 8c 65 ff ff ff    	jl     10695 <stbi__resample_row_hv_2(unsigned char*, unsigned char*, unsigned char*, int, int)+0x99>
   10730:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   10733:	83 c0 02             	add    eax,0x2
   10736:	c1 f8 02             	sar    eax,0x2
   10739:	89 c2                	mov    edx,eax
   1073b:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1073e:	01 c0                	add    eax,eax
   10740:	48 98                	cdqe   
   10742:	48 8d 48 ff          	lea    rcx,[rax-0x1]
   10746:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1074a:	48 01 c8             	add    rax,rcx
   1074d:	88 10                	mov    BYTE PTR [rax],dl
   1074f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   10753:	5d                   	pop    rbp
   10754:	c3                   	ret    

0000000000010755 <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)>:
   10755:	55                   	push   rbp
   10756:	48 89 e5             	mov    rbp,rsp
   10759:	48 81 ec 88 03 00 00 	sub    rsp,0x388
   10760:	48 89 bd 18 fc ff ff 	mov    QWORD PTR [rbp-0x3e8],rdi
   10767:	48 89 b5 10 fc ff ff 	mov    QWORD PTR [rbp-0x3f0],rsi
   1076e:	48 89 95 08 fc ff ff 	mov    QWORD PTR [rbp-0x3f8],rdx
   10775:	89 8d 04 fc ff ff    	mov    DWORD PTR [rbp-0x3fc],ecx
   1077b:	44 89 85 00 fc ff ff 	mov    DWORD PTR [rbp-0x400],r8d
   10782:	c7 85 3c fc ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x3c4],0x0
   1078c:	83 bd 04 fc ff ff 01 	cmp    DWORD PTR [rbp-0x3fc],0x1
   10793:	75 4f                	jne    107e4 <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)+0x8f>
   10795:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
   1079c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1079f:	0f b6 d0             	movzx  edx,al
   107a2:	89 d0                	mov    eax,edx
   107a4:	01 c0                	add    eax,eax
   107a6:	01 c2                	add    edx,eax
   107a8:	48 8b 85 08 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f8]
   107af:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   107b2:	0f b6 c0             	movzx  eax,al
   107b5:	01 d0                	add    eax,edx
   107b7:	83 c0 02             	add    eax,0x2
   107ba:	c1 f8 02             	sar    eax,0x2
   107bd:	89 c2                	mov    edx,eax
   107bf:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   107c6:	48 83 c0 01          	add    rax,0x1
   107ca:	88 10                	mov    BYTE PTR [rax],dl
   107cc:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   107cf:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   107d6:	88 10                	mov    BYTE PTR [rax],dl
   107d8:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   107df:	e9 60 08 00 00       	jmp    11044 <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)+0x8ef>
   107e4:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
   107eb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   107ee:	0f b6 d0             	movzx  edx,al
   107f1:	89 d0                	mov    eax,edx
   107f3:	01 c0                	add    eax,eax
   107f5:	01 c2                	add    edx,eax
   107f7:	48 8b 85 08 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f8]
   107fe:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10801:	0f b6 c0             	movzx  eax,al
   10804:	01 d0                	add    eax,edx
   10806:	89 85 40 fc ff ff    	mov    DWORD PTR [rbp-0x3c0],eax
   1080c:	e9 8d 06 00 00       	jmp    10e9e <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)+0x749>
   10811:	66 0f ef c0          	pxor   xmm0,xmm0
   10815:	0f 29 85 b0 fc ff ff 	movaps XMMWORD PTR [rbp-0x350],xmm0
   1081c:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10822:	48 63 d0             	movsxd rdx,eax
   10825:	48 8b 85 08 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f8]
   1082c:	48 01 d0             	add    rax,rdx
   1082f:	48 89 85 88 fc ff ff 	mov    QWORD PTR [rbp-0x378],rax
   10836:	48 8b 85 88 fc ff ff 	mov    rax,QWORD PTR [rbp-0x378]
   1083d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   10840:	ba 00 00 00 00       	mov    edx,0x0
   10845:	48 89 95 90 fc ff ff 	mov    QWORD PTR [rbp-0x370],rdx
   1084c:	48 89 85 98 fc ff ff 	mov    QWORD PTR [rbp-0x368],rax
   10853:	48 8b 85 98 fc ff ff 	mov    rax,QWORD PTR [rbp-0x368]
   1085a:	48 8b 95 90 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x370]
   10861:	48 89 95 a0 fc ff ff 	mov    QWORD PTR [rbp-0x360],rdx
   10868:	48 89 85 a8 fc ff ff 	mov    QWORD PTR [rbp-0x358],rax
   1086f:	48 8b 95 a0 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x360]
   10876:	48 8b 85 a8 fc ff ff 	mov    rax,QWORD PTR [rbp-0x358]
   1087d:	66 48 0f 6e c0       	movq   xmm0,rax
   10882:	66 48 0f 6e ea       	movq   xmm5,rdx
   10887:	66 0f 6c c5          	punpcklqdq xmm0,xmm5
   1088b:	90                   	nop
   1088c:	90                   	nop
   1088d:	0f 29 85 c0 fc ff ff 	movaps XMMWORD PTR [rbp-0x340],xmm0
   10894:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   1089a:	48 63 d0             	movsxd rdx,eax
   1089d:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
   108a4:	48 01 d0             	add    rax,rdx
   108a7:	48 89 85 60 fc ff ff 	mov    QWORD PTR [rbp-0x3a0],rax
   108ae:	48 8b 85 60 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a0]
   108b5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   108b8:	ba 00 00 00 00       	mov    edx,0x0
   108bd:	48 89 95 68 fc ff ff 	mov    QWORD PTR [rbp-0x398],rdx
   108c4:	48 89 85 70 fc ff ff 	mov    QWORD PTR [rbp-0x390],rax
   108cb:	48 8b 85 70 fc ff ff 	mov    rax,QWORD PTR [rbp-0x390]
   108d2:	48 8b 95 68 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x398]
   108d9:	48 89 95 78 fc ff ff 	mov    QWORD PTR [rbp-0x388],rdx
   108e0:	48 89 85 80 fc ff ff 	mov    QWORD PTR [rbp-0x380],rax
   108e7:	48 8b 95 78 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x388]
   108ee:	48 8b 85 80 fc ff ff 	mov    rax,QWORD PTR [rbp-0x380]
   108f5:	66 48 0f 6e c0       	movq   xmm0,rax
   108fa:	66 48 0f 6e f2       	movq   xmm6,rdx
   108ff:	66 0f 6c c6          	punpcklqdq xmm0,xmm6
   10903:	90                   	nop
   10904:	90                   	nop
   10905:	0f 29 85 d0 fc ff ff 	movaps XMMWORD PTR [rbp-0x330],xmm0
   1090c:	66 0f 6f 85 c0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x340]
   10914:	0f 29 45 e0          	movaps XMMWORD PTR [rbp-0x20],xmm0
   10918:	66 0f 6f 85 b0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x350]
   10920:	0f 29 45 f0          	movaps XMMWORD PTR [rbp-0x10],xmm0
   10924:	66 0f 6f 4d f0       	movdqa xmm1,XMMWORD PTR [rbp-0x10]
   10929:	66 0f 6f 45 e0       	movdqa xmm0,XMMWORD PTR [rbp-0x20]
   1092e:	66 0f 60 c1          	punpcklbw xmm0,xmm1
   10932:	0f 29 85 e0 fc ff ff 	movaps XMMWORD PTR [rbp-0x320],xmm0
   10939:	66 0f 6f 85 d0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x330]
   10941:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0
   10945:	66 0f 6f 85 b0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x350]
   1094d:	0f 29 45 d0          	movaps XMMWORD PTR [rbp-0x30],xmm0
   10951:	66 0f 6f 4d d0       	movdqa xmm1,XMMWORD PTR [rbp-0x30]
   10956:	66 0f 6f 45 c0       	movdqa xmm0,XMMWORD PTR [rbp-0x40]
   1095b:	66 0f 60 c1          	punpcklbw xmm0,xmm1
   1095f:	0f 29 85 f0 fc ff ff 	movaps XMMWORD PTR [rbp-0x310],xmm0
   10966:	66 0f 6f 85 e0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x320]
   1096e:	0f 29 45 a0          	movaps XMMWORD PTR [rbp-0x60],xmm0
   10972:	66 0f 6f 85 f0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x310]
   1097a:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
   1097e:	66 0f 6f 45 a0       	movdqa xmm0,XMMWORD PTR [rbp-0x60]
   10983:	66 0f 6f 4d b0       	movdqa xmm1,XMMWORD PTR [rbp-0x50]
   10988:	66 0f f9 c1          	psubw  xmm0,xmm1
   1098c:	0f 29 85 00 fd ff ff 	movaps XMMWORD PTR [rbp-0x300],xmm0
   10993:	66 0f 6f 85 f0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x310]
   1099b:	0f 29 45 90          	movaps XMMWORD PTR [rbp-0x70],xmm0
   1099f:	c7 85 54 fc ff ff 02 00 00 00 	mov    DWORD PTR [rbp-0x3ac],0x2
   109a9:	66 0f 6f 4d 90       	movdqa xmm1,XMMWORD PTR [rbp-0x70]
   109ae:	66 0f 6e 85 54 fc ff ff 	movd   xmm0,DWORD PTR [rbp-0x3ac]
   109b6:	66 0f f1 c8          	psllw  xmm1,xmm0
   109ba:	66 0f 6f c1          	movdqa xmm0,xmm1
   109be:	0f 29 85 10 fd ff ff 	movaps XMMWORD PTR [rbp-0x2f0],xmm0
   109c5:	66 0f 6f 85 10 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2f0]
   109cd:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
   109d4:	66 0f 6f 85 00 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x300]
   109dc:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
   109e0:	66 0f 6f 8d 70 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x90]
   109e8:	66 0f 6f 45 80       	movdqa xmm0,XMMWORD PTR [rbp-0x80]
   109ed:	66 0f fd c1          	paddw  xmm0,xmm1
   109f1:	0f 29 85 20 fd ff ff 	movaps XMMWORD PTR [rbp-0x2e0],xmm0
   109f8:	66 0f 6f 85 20 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2e0]
   10a00:	66 0f 73 f8 02       	pslldq xmm0,0x2
   10a05:	0f 29 85 30 fd ff ff 	movaps XMMWORD PTR [rbp-0x2d0],xmm0
   10a0c:	66 0f 6f 85 20 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2e0]
   10a14:	66 0f 73 d8 02       	psrldq xmm0,0x2
   10a19:	0f 29 85 40 fd ff ff 	movaps XMMWORD PTR [rbp-0x2c0],xmm0
   10a20:	8b 85 40 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c0]
   10a26:	98                   	cwde   
   10a27:	66 0f 6f 85 30 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2d0]
   10a2f:	66 0f c4 c0 00       	pinsrw xmm0,eax,0x0
   10a34:	0f 29 85 50 fd ff ff 	movaps XMMWORD PTR [rbp-0x2b0],xmm0
   10a3b:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10a41:	48 98                	cdqe   
   10a43:	48 8d 50 08          	lea    rdx,[rax+0x8]
   10a47:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
   10a4e:	48 01 d0             	add    rax,rdx
   10a51:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10a54:	0f b6 d0             	movzx  edx,al
   10a57:	89 d0                	mov    eax,edx
   10a59:	01 c0                	add    eax,eax
   10a5b:	01 c2                	add    edx,eax
   10a5d:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10a63:	48 98                	cdqe   
   10a65:	48 8d 48 08          	lea    rcx,[rax+0x8]
   10a69:	48 8b 85 08 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f8]
   10a70:	48 01 c8             	add    rax,rcx
   10a73:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10a76:	0f b6 c0             	movzx  eax,al
   10a79:	01 d0                	add    eax,edx
   10a7b:	98                   	cwde   
   10a7c:	66 0f 6f 85 40 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2c0]
   10a84:	66 0f c4 c0 07       	pinsrw xmm0,eax,0x7
   10a89:	0f 29 85 60 fd ff ff 	movaps XMMWORD PTR [rbp-0x2a0],xmm0
   10a90:	66 c7 85 2a fc ff ff 08 00 	mov    WORD PTR [rbp-0x3d6],0x8
   10a99:	0f bf 85 2a fc ff ff 	movsx  eax,WORD PTR [rbp-0x3d6]
   10aa0:	0f bf 95 2a fc ff ff 	movsx  edx,WORD PTR [rbp-0x3d6]
   10aa7:	0f bf 8d 2a fc ff ff 	movsx  ecx,WORD PTR [rbp-0x3d6]
   10aae:	0f bf b5 2a fc ff ff 	movsx  esi,WORD PTR [rbp-0x3d6]
   10ab5:	0f bf bd 2a fc ff ff 	movsx  edi,WORD PTR [rbp-0x3d6]
   10abc:	44 0f bf 85 2a fc ff ff 	movsx  r8d,WORD PTR [rbp-0x3d6]
   10ac4:	44 0f bf 8d 2a fc ff ff 	movsx  r9d,WORD PTR [rbp-0x3d6]
   10acc:	44 0f bf 95 2a fc ff ff 	movsx  r10d,WORD PTR [rbp-0x3d6]
   10ad4:	66 44 89 95 2c fc ff ff 	mov    WORD PTR [rbp-0x3d4],r10w
   10adc:	66 44 89 8d 2e fc ff ff 	mov    WORD PTR [rbp-0x3d2],r9w
   10ae4:	66 44 89 85 30 fc ff ff 	mov    WORD PTR [rbp-0x3d0],r8w
   10aec:	66 89 bd 32 fc ff ff 	mov    WORD PTR [rbp-0x3ce],di
   10af3:	66 89 b5 34 fc ff ff 	mov    WORD PTR [rbp-0x3cc],si
   10afa:	66 89 8d 36 fc ff ff 	mov    WORD PTR [rbp-0x3ca],cx
   10b01:	66 89 95 38 fc ff ff 	mov    WORD PTR [rbp-0x3c8],dx
   10b08:	66 89 85 3a fc ff ff 	mov    WORD PTR [rbp-0x3c6],ax
   10b0f:	0f b7 85 3a fc ff ff 	movzx  eax,WORD PTR [rbp-0x3c6]
   10b16:	66 0f 6e c0          	movd   xmm0,eax
   10b1a:	0f b7 85 38 fc ff ff 	movzx  eax,WORD PTR [rbp-0x3c8]
   10b21:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   10b26:	66 0f 6f c8          	movdqa xmm1,xmm0
   10b2a:	0f b7 85 36 fc ff ff 	movzx  eax,WORD PTR [rbp-0x3ca]
   10b31:	66 0f 6e c0          	movd   xmm0,eax
   10b35:	0f b7 85 34 fc ff ff 	movzx  eax,WORD PTR [rbp-0x3cc]
   10b3c:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   10b41:	66 0f 6f e0          	movdqa xmm4,xmm0
   10b45:	0f b7 85 32 fc ff ff 	movzx  eax,WORD PTR [rbp-0x3ce]
   10b4c:	66 0f 6e c0          	movd   xmm0,eax
   10b50:	0f b7 85 30 fc ff ff 	movzx  eax,WORD PTR [rbp-0x3d0]
   10b57:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   10b5c:	66 0f 6f d0          	movdqa xmm2,xmm0
   10b60:	0f b7 85 2e fc ff ff 	movzx  eax,WORD PTR [rbp-0x3d2]
   10b67:	66 0f 6e c0          	movd   xmm0,eax
   10b6b:	0f b7 85 2c fc ff ff 	movzx  eax,WORD PTR [rbp-0x3d4]
   10b72:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   10b77:	66 0f 6f d8          	movdqa xmm3,xmm0
   10b7b:	66 0f 62 cc          	punpckldq xmm1,xmm4
   10b7f:	66 0f 6f c1          	movdqa xmm0,xmm1
   10b83:	66 0f 6f c8          	movdqa xmm1,xmm0
   10b87:	66 0f 62 d3          	punpckldq xmm2,xmm3
   10b8b:	66 0f 6f c2          	movdqa xmm0,xmm2
   10b8f:	66 0f 6f d0          	movdqa xmm2,xmm0
   10b93:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
   10b97:	66 0f 6f c1          	movdqa xmm0,xmm1
   10b9b:	90                   	nop
   10b9c:	0f 29 85 70 fd ff ff 	movaps XMMWORD PTR [rbp-0x290],xmm0
   10ba3:	66 0f 6f 85 20 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2e0]
   10bab:	0f 29 85 60 ff ff ff 	movaps XMMWORD PTR [rbp-0xa0],xmm0
   10bb2:	c7 85 50 fc ff ff 02 00 00 00 	mov    DWORD PTR [rbp-0x3b0],0x2
   10bbc:	66 0f 6f 8d 60 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa0]
   10bc4:	66 0f 6e 85 50 fc ff ff 	movd   xmm0,DWORD PTR [rbp-0x3b0]
   10bcc:	66 0f f1 c8          	psllw  xmm1,xmm0
   10bd0:	66 0f 6f c1          	movdqa xmm0,xmm1
   10bd4:	0f 29 85 80 fd ff ff 	movaps XMMWORD PTR [rbp-0x280],xmm0
   10bdb:	66 0f 6f 85 50 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2b0]
   10be3:	0f 29 85 40 ff ff ff 	movaps XMMWORD PTR [rbp-0xc0],xmm0
   10bea:	66 0f 6f 85 20 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2e0]
   10bf2:	0f 29 85 50 ff ff ff 	movaps XMMWORD PTR [rbp-0xb0],xmm0
   10bf9:	66 0f 6f 85 40 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xc0]
   10c01:	66 0f 6f 8d 50 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xb0]
   10c09:	66 0f f9 c1          	psubw  xmm0,xmm1
   10c0d:	0f 29 85 90 fd ff ff 	movaps XMMWORD PTR [rbp-0x270],xmm0
   10c14:	66 0f 6f 85 60 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2a0]
   10c1c:	0f 29 85 20 ff ff ff 	movaps XMMWORD PTR [rbp-0xe0],xmm0
   10c23:	66 0f 6f 85 20 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2e0]
   10c2b:	0f 29 85 30 ff ff ff 	movaps XMMWORD PTR [rbp-0xd0],xmm0
   10c32:	66 0f 6f 85 20 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xe0]
   10c3a:	66 0f 6f 8d 30 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xd0]
   10c42:	66 0f f9 c1          	psubw  xmm0,xmm1
   10c46:	0f 29 85 a0 fd ff ff 	movaps XMMWORD PTR [rbp-0x260],xmm0
   10c4d:	66 0f 6f 85 80 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x280]
   10c55:	0f 29 85 00 ff ff ff 	movaps XMMWORD PTR [rbp-0x100],xmm0
   10c5c:	66 0f 6f 85 70 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x290]
   10c64:	0f 29 85 10 ff ff ff 	movaps XMMWORD PTR [rbp-0xf0],xmm0
   10c6b:	66 0f 6f 8d 00 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x100]
   10c73:	66 0f 6f 85 10 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xf0]
   10c7b:	66 0f fd c1          	paddw  xmm0,xmm1
   10c7f:	0f 29 85 b0 fd ff ff 	movaps XMMWORD PTR [rbp-0x250],xmm0
   10c86:	66 0f 6f 85 90 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x270]
   10c8e:	0f 29 85 e0 fe ff ff 	movaps XMMWORD PTR [rbp-0x120],xmm0
   10c95:	66 0f 6f 85 b0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x250]
   10c9d:	0f 29 85 f0 fe ff ff 	movaps XMMWORD PTR [rbp-0x110],xmm0
   10ca4:	66 0f 6f 8d e0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x120]
   10cac:	66 0f 6f 85 f0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x110]
   10cb4:	66 0f fd c1          	paddw  xmm0,xmm1
   10cb8:	0f 29 85 c0 fd ff ff 	movaps XMMWORD PTR [rbp-0x240],xmm0
   10cbf:	66 0f 6f 85 a0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x260]
   10cc7:	0f 29 85 c0 fe ff ff 	movaps XMMWORD PTR [rbp-0x140],xmm0
   10cce:	66 0f 6f 85 b0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x250]
   10cd6:	0f 29 85 d0 fe ff ff 	movaps XMMWORD PTR [rbp-0x130],xmm0
   10cdd:	66 0f 6f 8d c0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x140]
   10ce5:	66 0f 6f 85 d0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x130]
   10ced:	66 0f fd c1          	paddw  xmm0,xmm1
   10cf1:	0f 29 85 d0 fd ff ff 	movaps XMMWORD PTR [rbp-0x230],xmm0
   10cf8:	66 0f 6f 85 c0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x240]
   10d00:	0f 29 85 a0 fe ff ff 	movaps XMMWORD PTR [rbp-0x160],xmm0
   10d07:	66 0f 6f 85 d0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x230]
   10d0f:	0f 29 85 b0 fe ff ff 	movaps XMMWORD PTR [rbp-0x150],xmm0
   10d16:	66 0f 6f 8d b0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x150]
   10d1e:	66 0f 6f 85 a0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x160]
   10d26:	66 0f 61 c1          	punpcklwd xmm0,xmm1
   10d2a:	0f 29 85 e0 fd ff ff 	movaps XMMWORD PTR [rbp-0x220],xmm0
   10d31:	66 0f 6f 85 c0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x240]
   10d39:	0f 29 85 80 fe ff ff 	movaps XMMWORD PTR [rbp-0x180],xmm0
   10d40:	66 0f 6f 85 d0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x230]
   10d48:	0f 29 85 90 fe ff ff 	movaps XMMWORD PTR [rbp-0x170],xmm0
   10d4f:	66 0f 6f 8d 90 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x170]
   10d57:	66 0f 6f 85 80 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x180]
   10d5f:	66 0f 69 c1          	punpckhwd xmm0,xmm1
   10d63:	0f 29 85 f0 fd ff ff 	movaps XMMWORD PTR [rbp-0x210],xmm0
   10d6a:	66 0f 6f 85 e0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x220]
   10d72:	0f 29 85 70 fe ff ff 	movaps XMMWORD PTR [rbp-0x190],xmm0
   10d79:	c7 85 4c fc ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x3b4],0x4
   10d83:	66 0f 6f 8d 70 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x190]
   10d8b:	66 0f 6e 85 4c fc ff ff 	movd   xmm0,DWORD PTR [rbp-0x3b4]
   10d93:	66 0f d1 c8          	psrlw  xmm1,xmm0
   10d97:	66 0f 6f c1          	movdqa xmm0,xmm1
   10d9b:	0f 29 85 00 fe ff ff 	movaps XMMWORD PTR [rbp-0x200],xmm0
   10da2:	66 0f 6f 85 f0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x210]
   10daa:	0f 29 85 60 fe ff ff 	movaps XMMWORD PTR [rbp-0x1a0],xmm0
   10db1:	c7 85 48 fc ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x3b8],0x4
   10dbb:	66 0f 6f 8d 60 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a0]
   10dc3:	66 0f 6e 85 48 fc ff ff 	movd   xmm0,DWORD PTR [rbp-0x3b8]
   10dcb:	66 0f d1 c8          	psrlw  xmm1,xmm0
   10dcf:	66 0f 6f c1          	movdqa xmm0,xmm1
   10dd3:	0f 29 85 10 fe ff ff 	movaps XMMWORD PTR [rbp-0x1f0],xmm0
   10dda:	66 0f 6f 85 00 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x200]
   10de2:	0f 29 85 40 fe ff ff 	movaps XMMWORD PTR [rbp-0x1c0],xmm0
   10de9:	66 0f 6f 85 10 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1f0]
   10df1:	0f 29 85 50 fe ff ff 	movaps XMMWORD PTR [rbp-0x1b0],xmm0
   10df8:	66 0f 6f 8d 50 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1b0]
   10e00:	66 0f 6f 85 40 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1c0]
   10e08:	66 0f 67 c1          	packuswb xmm0,xmm1
   10e0c:	0f 29 85 20 fe ff ff 	movaps XMMWORD PTR [rbp-0x1e0],xmm0
   10e13:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10e19:	01 c0                	add    eax,eax
   10e1b:	48 63 d0             	movsxd rdx,eax
   10e1e:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   10e25:	48 01 d0             	add    rax,rdx
   10e28:	48 89 85 58 fc ff ff 	mov    QWORD PTR [rbp-0x3a8],rax
   10e2f:	66 0f 6f 85 20 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1e0]
   10e37:	0f 29 85 30 fe ff ff 	movaps XMMWORD PTR [rbp-0x1d0],xmm0
   10e3e:	66 0f 6f 85 30 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d0]
   10e46:	48 8b 85 58 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3a8]
   10e4d:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
   10e50:	90                   	nop
   10e51:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10e57:	48 98                	cdqe   
   10e59:	48 8d 50 07          	lea    rdx,[rax+0x7]
   10e5d:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
   10e64:	48 01 d0             	add    rax,rdx
   10e67:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10e6a:	0f b6 d0             	movzx  edx,al
   10e6d:	89 d0                	mov    eax,edx
   10e6f:	01 c0                	add    eax,eax
   10e71:	01 c2                	add    edx,eax
   10e73:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10e79:	48 98                	cdqe   
   10e7b:	48 8d 48 07          	lea    rcx,[rax+0x7]
   10e7f:	48 8b 85 08 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f8]
   10e86:	48 01 c8             	add    rax,rcx
   10e89:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10e8c:	0f b6 c0             	movzx  eax,al
   10e8f:	01 d0                	add    eax,edx
   10e91:	89 85 40 fc ff ff    	mov    DWORD PTR [rbp-0x3c0],eax
   10e97:	83 85 3c fc ff ff 08 	add    DWORD PTR [rbp-0x3c4],0x8
   10e9e:	8b 85 04 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3fc]
   10ea4:	83 e8 01             	sub    eax,0x1
   10ea7:	83 e0 f8             	and    eax,0xfffffff8
   10eaa:	39 85 3c fc ff ff    	cmp    DWORD PTR [rbp-0x3c4],eax
   10eb0:	0f 8c 5b f9 ff ff    	jl     10811 <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)+0xbc>
   10eb6:	8b 85 40 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c0]
   10ebc:	89 85 44 fc ff ff    	mov    DWORD PTR [rbp-0x3bc],eax
   10ec2:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10ec8:	48 63 d0             	movsxd rdx,eax
   10ecb:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
   10ed2:	48 01 d0             	add    rax,rdx
   10ed5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10ed8:	0f b6 d0             	movzx  edx,al
   10edb:	89 d0                	mov    eax,edx
   10edd:	01 c0                	add    eax,eax
   10edf:	8d 0c 10             	lea    ecx,[rax+rdx*1]
   10ee2:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10ee8:	48 63 d0             	movsxd rdx,eax
   10eeb:	48 8b 85 08 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f8]
   10ef2:	48 01 d0             	add    rax,rdx
   10ef5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10ef8:	0f b6 c0             	movzx  eax,al
   10efb:	01 c8                	add    eax,ecx
   10efd:	89 85 40 fc ff ff    	mov    DWORD PTR [rbp-0x3c0],eax
   10f03:	8b 95 40 fc ff ff    	mov    edx,DWORD PTR [rbp-0x3c0]
   10f09:	89 d0                	mov    eax,edx
   10f0b:	01 c0                	add    eax,eax
   10f0d:	01 c2                	add    edx,eax
   10f0f:	8b 85 44 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3bc]
   10f15:	01 d0                	add    eax,edx
   10f17:	83 c0 08             	add    eax,0x8
   10f1a:	c1 f8 04             	sar    eax,0x4
   10f1d:	89 c1                	mov    ecx,eax
   10f1f:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10f25:	01 c0                	add    eax,eax
   10f27:	48 63 d0             	movsxd rdx,eax
   10f2a:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   10f31:	48 01 d0             	add    rax,rdx
   10f34:	89 ca                	mov    edx,ecx
   10f36:	88 10                	mov    BYTE PTR [rax],dl
   10f38:	83 85 3c fc ff ff 01 	add    DWORD PTR [rbp-0x3c4],0x1
   10f3f:	e9 bf 00 00 00       	jmp    11003 <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)+0x8ae>
   10f44:	8b 85 40 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c0]
   10f4a:	89 85 44 fc ff ff    	mov    DWORD PTR [rbp-0x3bc],eax
   10f50:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10f56:	48 63 d0             	movsxd rdx,eax
   10f59:	48 8b 85 10 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f0]
   10f60:	48 01 d0             	add    rax,rdx
   10f63:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10f66:	0f b6 d0             	movzx  edx,al
   10f69:	89 d0                	mov    eax,edx
   10f6b:	01 c0                	add    eax,eax
   10f6d:	8d 0c 10             	lea    ecx,[rax+rdx*1]
   10f70:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10f76:	48 63 d0             	movsxd rdx,eax
   10f79:	48 8b 85 08 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3f8]
   10f80:	48 01 d0             	add    rax,rdx
   10f83:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   10f86:	0f b6 c0             	movzx  eax,al
   10f89:	01 c8                	add    eax,ecx
   10f8b:	89 85 40 fc ff ff    	mov    DWORD PTR [rbp-0x3c0],eax
   10f91:	8b 95 44 fc ff ff    	mov    edx,DWORD PTR [rbp-0x3bc]
   10f97:	89 d0                	mov    eax,edx
   10f99:	01 c0                	add    eax,eax
   10f9b:	01 c2                	add    edx,eax
   10f9d:	8b 85 40 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c0]
   10fa3:	01 d0                	add    eax,edx
   10fa5:	83 c0 08             	add    eax,0x8
   10fa8:	c1 f8 04             	sar    eax,0x4
   10fab:	89 c2                	mov    edx,eax
   10fad:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10fb3:	01 c0                	add    eax,eax
   10fb5:	48 98                	cdqe   
   10fb7:	48 8d 48 ff          	lea    rcx,[rax-0x1]
   10fbb:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   10fc2:	48 01 c8             	add    rax,rcx
   10fc5:	88 10                	mov    BYTE PTR [rax],dl
   10fc7:	8b 95 40 fc ff ff    	mov    edx,DWORD PTR [rbp-0x3c0]
   10fcd:	89 d0                	mov    eax,edx
   10fcf:	01 c0                	add    eax,eax
   10fd1:	01 c2                	add    edx,eax
   10fd3:	8b 85 44 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3bc]
   10fd9:	01 d0                	add    eax,edx
   10fdb:	83 c0 08             	add    eax,0x8
   10fde:	c1 f8 04             	sar    eax,0x4
   10fe1:	89 c1                	mov    ecx,eax
   10fe3:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   10fe9:	01 c0                	add    eax,eax
   10feb:	48 63 d0             	movsxd rdx,eax
   10fee:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   10ff5:	48 01 d0             	add    rax,rdx
   10ff8:	89 ca                	mov    edx,ecx
   10ffa:	88 10                	mov    BYTE PTR [rax],dl
   10ffc:	83 85 3c fc ff ff 01 	add    DWORD PTR [rbp-0x3c4],0x1
   11003:	8b 85 3c fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c4]
   11009:	3b 85 04 fc ff ff    	cmp    eax,DWORD PTR [rbp-0x3fc]
   1100f:	0f 8c 2f ff ff ff    	jl     10f44 <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)+0x7ef>
   11015:	8b 85 40 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c0]
   1101b:	83 c0 02             	add    eax,0x2
   1101e:	c1 f8 02             	sar    eax,0x2
   11021:	89 c2                	mov    edx,eax
   11023:	8b 85 04 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3fc]
   11029:	01 c0                	add    eax,eax
   1102b:	48 98                	cdqe   
   1102d:	48 8d 48 ff          	lea    rcx,[rax-0x1]
   11031:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   11038:	48 01 c8             	add    rax,rcx
   1103b:	88 10                	mov    BYTE PTR [rax],dl
   1103d:	48 8b 85 18 fc ff ff 	mov    rax,QWORD PTR [rbp-0x3e8]
   11044:	c9                   	leave  
   11045:	c3                   	ret    

0000000000011046 <stbi__resample_row_generic(unsigned char*, unsigned char*, unsigned char*, int, int)>:
   11046:	55                   	push   rbp
   11047:	48 89 e5             	mov    rbp,rsp
   1104a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1104e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   11052:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   11056:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
   11059:	44 89 45 d0          	mov    DWORD PTR [rbp-0x30],r8d
   1105d:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
   11064:	eb 44                	jmp    110aa <stbi__resample_row_generic(unsigned char*, unsigned char*, unsigned char*, int, int)+0x64>
   11066:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1106d:	eb 2f                	jmp    1109e <stbi__resample_row_generic(unsigned char*, unsigned char*, unsigned char*, int, int)+0x58>
   1106f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   11072:	48 63 d0             	movsxd rdx,eax
   11075:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   11079:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   1107d:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   11080:	0f af 45 d0          	imul   eax,DWORD PTR [rbp-0x30]
   11084:	89 c2                	mov    edx,eax
   11086:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   11089:	01 d0                	add    eax,edx
   1108b:	48 63 d0             	movsxd rdx,eax
   1108e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   11092:	48 01 c2             	add    rdx,rax
   11095:	0f b6 01             	movzx  eax,BYTE PTR [rcx]
   11098:	88 02                	mov    BYTE PTR [rdx],al
   1109a:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1109e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   110a1:	3b 45 d0             	cmp    eax,DWORD PTR [rbp-0x30]
   110a4:	7c c9                	jl     1106f <stbi__resample_row_generic(unsigned char*, unsigned char*, unsigned char*, int, int)+0x29>
   110a6:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   110aa:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   110ad:	3b 45 d4             	cmp    eax,DWORD PTR [rbp-0x2c]
   110b0:	7c b4                	jl     11066 <stbi__resample_row_generic(unsigned char*, unsigned char*, unsigned char*, int, int)+0x20>
   110b2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   110b6:	5d                   	pop    rbp
   110b7:	c3                   	ret    

00000000000110b8 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)>:
   110b8:	55                   	push   rbp
   110b9:	48 89 e5             	mov    rbp,rsp
   110bc:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   110c0:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   110c4:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   110c8:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   110cc:	44 89 45 bc          	mov    DWORD PTR [rbp-0x44],r8d
   110d0:	44 89 4d b8          	mov    DWORD PTR [rbp-0x48],r9d
   110d4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   110db:	e9 3d 01 00 00       	jmp    1121d <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x165>
   110e0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   110e3:	48 63 d0             	movsxd rdx,eax
   110e6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   110ea:	48 01 d0             	add    rax,rdx
   110ed:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   110f0:	0f b6 c0             	movzx  eax,al
   110f3:	c1 e0 14             	shl    eax,0x14
   110f6:	05 00 00 08 00       	add    eax,0x80000
   110fb:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   110fe:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   11101:	48 63 d0             	movsxd rdx,eax
   11104:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   11108:	48 01 d0             	add    rax,rdx
   1110b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1110e:	0f b6 c0             	movzx  eax,al
   11111:	83 c0 80             	add    eax,0xffffff80
   11114:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   11117:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   1111a:	48 63 d0             	movsxd rdx,eax
   1111d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   11121:	48 01 d0             	add    rax,rdx
   11124:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   11127:	0f b6 c0             	movzx  eax,al
   1112a:	83 c0 80             	add    eax,0xffffff80
   1112d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   11130:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   11133:	69 d0 00 6f 16 00    	imul   edx,eax,0x166f00
   11139:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1113c:	01 d0                	add    eax,edx
   1113e:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   11141:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   11144:	69 d0 00 93 f4 ff    	imul   edx,eax,0xfff49300
   1114a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1114d:	01 d0                	add    eax,edx
   1114f:	89 c2                	mov    edx,eax
   11151:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   11154:	69 c0 00 7e fa ff    	imul   eax,eax,0xfffa7e00
   1115a:	66 b8 00 00          	mov    ax,0x0
   1115e:	01 d0                	add    eax,edx
   11160:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   11163:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   11166:	69 d0 00 5a 1c 00    	imul   edx,eax,0x1c5a00
   1116c:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1116f:	01 d0                	add    eax,edx
   11171:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   11174:	c1 7d e8 14          	sar    DWORD PTR [rbp-0x18],0x14
   11178:	c1 7d ec 14          	sar    DWORD PTR [rbp-0x14],0x14
   1117c:	c1 7d f0 14          	sar    DWORD PTR [rbp-0x10],0x14
   11180:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   11183:	3d ff 00 00 00       	cmp    eax,0xff
   11188:	76 16                	jbe    111a0 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0xe8>
   1118a:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
   1118e:	79 09                	jns    11199 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0xe1>
   11190:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   11197:	eb 07                	jmp    111a0 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0xe8>
   11199:	c7 45 e8 ff 00 00 00 	mov    DWORD PTR [rbp-0x18],0xff
   111a0:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   111a3:	3d ff 00 00 00       	cmp    eax,0xff
   111a8:	76 16                	jbe    111c0 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x108>
   111aa:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
   111ae:	79 09                	jns    111b9 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x101>
   111b0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   111b7:	eb 07                	jmp    111c0 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x108>
   111b9:	c7 45 ec ff 00 00 00 	mov    DWORD PTR [rbp-0x14],0xff
   111c0:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   111c3:	3d ff 00 00 00       	cmp    eax,0xff
   111c8:	76 16                	jbe    111e0 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x128>
   111ca:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
   111ce:	79 09                	jns    111d9 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x121>
   111d0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
   111d7:	eb 07                	jmp    111e0 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x128>
   111d9:	c7 45 f0 ff 00 00 00 	mov    DWORD PTR [rbp-0x10],0xff
   111e0:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   111e3:	89 c2                	mov    edx,eax
   111e5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   111e9:	88 10                	mov    BYTE PTR [rax],dl
   111eb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   111ef:	48 83 c0 01          	add    rax,0x1
   111f3:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   111f6:	88 10                	mov    BYTE PTR [rax],dl
   111f8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   111fc:	48 83 c0 02          	add    rax,0x2
   11200:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   11203:	88 10                	mov    BYTE PTR [rax],dl
   11205:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   11209:	48 83 c0 03          	add    rax,0x3
   1120d:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   11210:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   11213:	48 98                	cdqe   
   11215:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
   11219:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
   1121d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   11220:	3b 45 bc             	cmp    eax,DWORD PTR [rbp-0x44]
   11223:	0f 8c b7 fe ff ff    	jl     110e0 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x28>
   11229:	90                   	nop
   1122a:	90                   	nop
   1122b:	5d                   	pop    rbp
   1122c:	c3                   	ret    

000000000001122d <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)>:
   1122d:	55                   	push   rbp
   1122e:	48 89 e5             	mov    rbp,rsp
   11231:	41 57                	push   r15
   11233:	41 56                	push   r14
   11235:	41 55                	push   r13
   11237:	41 54                	push   r12
   11239:	53                   	push   rbx
   1123a:	48 81 ec d0 05 00 00 	sub    rsp,0x5d0
   11241:	48 89 bd c8 f9 ff ff 	mov    QWORD PTR [rbp-0x638],rdi
   11248:	48 89 b5 c0 f9 ff ff 	mov    QWORD PTR [rbp-0x640],rsi
   1124f:	48 89 95 b8 f9 ff ff 	mov    QWORD PTR [rbp-0x648],rdx
   11256:	48 89 8d b0 f9 ff ff 	mov    QWORD PTR [rbp-0x650],rcx
   1125d:	44 89 85 ac f9 ff ff 	mov    DWORD PTR [rbp-0x654],r8d
   11264:	44 89 8d a8 f9 ff ff 	mov    DWORD PTR [rbp-0x658],r9d
   1126b:	c7 85 4c fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x5b4],0x0
   11275:	83 bd a8 f9 ff ff 04 	cmp    DWORD PTR [rbp-0x658],0x4
   1127c:	0f 85 f5 11 00 00    	jne    12477 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x124a>
   11282:	c6 85 e1 f9 ff ff 80 	mov    BYTE PTR [rbp-0x61f],0x80
   11289:	0f be 95 e1 f9 ff ff 	movsx  edx,BYTE PTR [rbp-0x61f]
   11290:	0f be 8d e1 f9 ff ff 	movsx  ecx,BYTE PTR [rbp-0x61f]
   11297:	0f be b5 e1 f9 ff ff 	movsx  esi,BYTE PTR [rbp-0x61f]
   1129e:	0f be bd e1 f9 ff ff 	movsx  edi,BYTE PTR [rbp-0x61f]
   112a5:	44 0f be 85 e1 f9 ff ff 	movsx  r8d,BYTE PTR [rbp-0x61f]
   112ad:	44 0f be 8d e1 f9 ff ff 	movsx  r9d,BYTE PTR [rbp-0x61f]
   112b5:	44 0f be 95 e1 f9 ff ff 	movsx  r10d,BYTE PTR [rbp-0x61f]
   112bd:	44 0f be 9d e1 f9 ff ff 	movsx  r11d,BYTE PTR [rbp-0x61f]
   112c5:	0f be 9d e1 f9 ff ff 	movsx  ebx,BYTE PTR [rbp-0x61f]
   112cc:	44 0f be a5 e1 f9 ff ff 	movsx  r12d,BYTE PTR [rbp-0x61f]
   112d4:	44 0f be ad e1 f9 ff ff 	movsx  r13d,BYTE PTR [rbp-0x61f]
   112dc:	44 0f be b5 e1 f9 ff ff 	movsx  r14d,BYTE PTR [rbp-0x61f]
   112e4:	44 0f be bd e1 f9 ff ff 	movsx  r15d,BYTE PTR [rbp-0x61f]
   112ec:	0f be 85 e1 f9 ff ff 	movsx  eax,BYTE PTR [rbp-0x61f]
   112f3:	89 85 90 f9 ff ff    	mov    DWORD PTR [rbp-0x670],eax
   112f9:	0f be 85 e1 f9 ff ff 	movsx  eax,BYTE PTR [rbp-0x61f]
   11300:	89 85 a4 f9 ff ff    	mov    DWORD PTR [rbp-0x65c],eax
   11306:	0f be 85 e1 f9 ff ff 	movsx  eax,BYTE PTR [rbp-0x61f]
   1130d:	88 85 e2 f9 ff ff    	mov    BYTE PTR [rbp-0x61e],al
   11313:	0f b6 85 a4 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x65c]
   1131a:	88 85 e3 f9 ff ff    	mov    BYTE PTR [rbp-0x61d],al
   11320:	0f b6 85 90 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x670]
   11327:	88 85 e4 f9 ff ff    	mov    BYTE PTR [rbp-0x61c],al
   1132d:	44 88 bd e5 f9 ff ff 	mov    BYTE PTR [rbp-0x61b],r15b
   11334:	44 88 b5 e6 f9 ff ff 	mov    BYTE PTR [rbp-0x61a],r14b
   1133b:	44 88 ad e7 f9 ff ff 	mov    BYTE PTR [rbp-0x619],r13b
   11342:	44 88 a5 e8 f9 ff ff 	mov    BYTE PTR [rbp-0x618],r12b
   11349:	88 9d e9 f9 ff ff    	mov    BYTE PTR [rbp-0x617],bl
   1134f:	44 88 9d ea f9 ff ff 	mov    BYTE PTR [rbp-0x616],r11b
   11356:	44 88 95 eb f9 ff ff 	mov    BYTE PTR [rbp-0x615],r10b
   1135d:	44 88 8d ec f9 ff ff 	mov    BYTE PTR [rbp-0x614],r9b
   11364:	44 88 85 ed f9 ff ff 	mov    BYTE PTR [rbp-0x613],r8b
   1136b:	40 88 bd ee f9 ff ff 	mov    BYTE PTR [rbp-0x612],dil
   11372:	40 88 b5 ef f9 ff ff 	mov    BYTE PTR [rbp-0x611],sil
   11379:	88 8d f0 f9 ff ff    	mov    BYTE PTR [rbp-0x610],cl
   1137f:	88 95 f1 f9 ff ff    	mov    BYTE PTR [rbp-0x60f],dl
   11385:	0f b6 95 ea f9 ff ff 	movzx  edx,BYTE PTR [rbp-0x616]
   1138c:	0f b6 85 eb f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x615]
   11393:	48 c1 e2 08          	shl    rdx,0x8
   11397:	48 09 c2             	or     rdx,rax
   1139a:	0f b6 85 ec f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x614]
   113a1:	48 c1 e2 08          	shl    rdx,0x8
   113a5:	48 09 c2             	or     rdx,rax
   113a8:	0f b6 85 ed f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x613]
   113af:	48 c1 e2 08          	shl    rdx,0x8
   113b3:	48 09 c2             	or     rdx,rax
   113b6:	0f b6 85 ee f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x612]
   113bd:	48 c1 e2 08          	shl    rdx,0x8
   113c1:	48 09 c2             	or     rdx,rax
   113c4:	0f b6 85 ef f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x611]
   113cb:	48 c1 e2 08          	shl    rdx,0x8
   113cf:	48 09 c2             	or     rdx,rax
   113d2:	0f b6 85 f0 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x610]
   113d9:	48 c1 e2 08          	shl    rdx,0x8
   113dd:	48 09 c2             	or     rdx,rax
   113e0:	0f b6 85 f1 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x60f]
   113e7:	48 c1 e2 08          	shl    rdx,0x8
   113eb:	48 09 c2             	or     rdx,rax
   113ee:	0f b6 85 e2 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x61e]
   113f5:	0f b6 8d e3 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x61d]
   113fc:	48 c1 e0 08          	shl    rax,0x8
   11400:	48 09 c8             	or     rax,rcx
   11403:	0f b6 8d e4 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x61c]
   1140a:	48 c1 e0 08          	shl    rax,0x8
   1140e:	48 09 c8             	or     rax,rcx
   11411:	0f b6 8d e5 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x61b]
   11418:	48 c1 e0 08          	shl    rax,0x8
   1141c:	48 09 c8             	or     rax,rcx
   1141f:	0f b6 8d e6 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x61a]
   11426:	48 c1 e0 08          	shl    rax,0x8
   1142a:	48 09 c8             	or     rax,rcx
   1142d:	0f b6 8d e7 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x619]
   11434:	48 c1 e0 08          	shl    rax,0x8
   11438:	48 09 c8             	or     rax,rcx
   1143b:	0f b6 8d e8 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x618]
   11442:	48 c1 e0 08          	shl    rax,0x8
   11446:	48 09 c8             	or     rax,rcx
   11449:	0f b6 8d e9 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x617]
   11450:	48 c1 e0 08          	shl    rax,0x8
   11454:	48 09 c8             	or     rax,rcx
   11457:	48 89 95 90 f9 ff ff 	mov    QWORD PTR [rbp-0x670],rdx
   1145e:	48 89 85 98 f9 ff ff 	mov    QWORD PTR [rbp-0x668],rax
   11465:	66 0f 6f 85 90 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x670]
   1146d:	90                   	nop
   1146e:	0f 29 85 00 fb ff ff 	movaps XMMWORD PTR [rbp-0x500],xmm0
   11475:	66 c7 85 3a fa ff ff 6f 16 	mov    WORD PTR [rbp-0x5c6],0x166f
   1147e:	0f bf 85 3a fa ff ff 	movsx  eax,WORD PTR [rbp-0x5c6]
   11485:	0f bf 95 3a fa ff ff 	movsx  edx,WORD PTR [rbp-0x5c6]
   1148c:	0f bf 8d 3a fa ff ff 	movsx  ecx,WORD PTR [rbp-0x5c6]
   11493:	0f bf b5 3a fa ff ff 	movsx  esi,WORD PTR [rbp-0x5c6]
   1149a:	0f bf bd 3a fa ff ff 	movsx  edi,WORD PTR [rbp-0x5c6]
   114a1:	44 0f bf 85 3a fa ff ff 	movsx  r8d,WORD PTR [rbp-0x5c6]
   114a9:	44 0f bf 8d 3a fa ff ff 	movsx  r9d,WORD PTR [rbp-0x5c6]
   114b1:	44 0f bf 95 3a fa ff ff 	movsx  r10d,WORD PTR [rbp-0x5c6]
   114b9:	66 44 89 95 3c fa ff ff 	mov    WORD PTR [rbp-0x5c4],r10w
   114c1:	66 44 89 8d 3e fa ff ff 	mov    WORD PTR [rbp-0x5c2],r9w
   114c9:	66 44 89 85 40 fa ff ff 	mov    WORD PTR [rbp-0x5c0],r8w
   114d1:	66 89 bd 42 fa ff ff 	mov    WORD PTR [rbp-0x5be],di
   114d8:	66 89 b5 44 fa ff ff 	mov    WORD PTR [rbp-0x5bc],si
   114df:	66 89 8d 46 fa ff ff 	mov    WORD PTR [rbp-0x5ba],cx
   114e6:	66 89 95 48 fa ff ff 	mov    WORD PTR [rbp-0x5b8],dx
   114ed:	66 89 85 4a fa ff ff 	mov    WORD PTR [rbp-0x5b6],ax
   114f4:	0f b7 85 4a fa ff ff 	movzx  eax,WORD PTR [rbp-0x5b6]
   114fb:	66 0f 6e c0          	movd   xmm0,eax
   114ff:	0f b7 85 48 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5b8]
   11506:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   1150b:	66 0f 6f c8          	movdqa xmm1,xmm0
   1150f:	0f b7 85 46 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5ba]
   11516:	66 0f 6e c0          	movd   xmm0,eax
   1151a:	0f b7 85 44 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5bc]
   11521:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11526:	66 0f 6f e0          	movdqa xmm4,xmm0
   1152a:	0f b7 85 42 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5be]
   11531:	66 0f 6e c0          	movd   xmm0,eax
   11535:	0f b7 85 40 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5c0]
   1153c:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11541:	66 0f 6f d0          	movdqa xmm2,xmm0
   11545:	0f b7 85 3e fa ff ff 	movzx  eax,WORD PTR [rbp-0x5c2]
   1154c:	66 0f 6e c0          	movd   xmm0,eax
   11550:	0f b7 85 3c fa ff ff 	movzx  eax,WORD PTR [rbp-0x5c4]
   11557:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   1155c:	66 0f 6f d8          	movdqa xmm3,xmm0
   11560:	66 0f 62 cc          	punpckldq xmm1,xmm4
   11564:	66 0f 6f c1          	movdqa xmm0,xmm1
   11568:	66 0f 6f c8          	movdqa xmm1,xmm0
   1156c:	66 0f 62 d3          	punpckldq xmm2,xmm3
   11570:	66 0f 6f c2          	movdqa xmm0,xmm2
   11574:	66 0f 6f d0          	movdqa xmm2,xmm0
   11578:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
   1157c:	66 0f 6f c1          	movdqa xmm0,xmm1
   11580:	90                   	nop
   11581:	0f 29 85 10 fb ff ff 	movaps XMMWORD PTR [rbp-0x4f0],xmm0
   11588:	66 c7 85 28 fa ff ff 93 f4 	mov    WORD PTR [rbp-0x5d8],0xf493
   11591:	0f bf 85 28 fa ff ff 	movsx  eax,WORD PTR [rbp-0x5d8]
   11598:	0f bf 95 28 fa ff ff 	movsx  edx,WORD PTR [rbp-0x5d8]
   1159f:	0f bf 8d 28 fa ff ff 	movsx  ecx,WORD PTR [rbp-0x5d8]
   115a6:	0f bf b5 28 fa ff ff 	movsx  esi,WORD PTR [rbp-0x5d8]
   115ad:	0f bf bd 28 fa ff ff 	movsx  edi,WORD PTR [rbp-0x5d8]
   115b4:	44 0f bf 85 28 fa ff ff 	movsx  r8d,WORD PTR [rbp-0x5d8]
   115bc:	44 0f bf 8d 28 fa ff ff 	movsx  r9d,WORD PTR [rbp-0x5d8]
   115c4:	44 0f bf 95 28 fa ff ff 	movsx  r10d,WORD PTR [rbp-0x5d8]
   115cc:	66 44 89 95 2a fa ff ff 	mov    WORD PTR [rbp-0x5d6],r10w
   115d4:	66 44 89 8d 2c fa ff ff 	mov    WORD PTR [rbp-0x5d4],r9w
   115dc:	66 44 89 85 2e fa ff ff 	mov    WORD PTR [rbp-0x5d2],r8w
   115e4:	66 89 bd 30 fa ff ff 	mov    WORD PTR [rbp-0x5d0],di
   115eb:	66 89 b5 32 fa ff ff 	mov    WORD PTR [rbp-0x5ce],si
   115f2:	66 89 8d 34 fa ff ff 	mov    WORD PTR [rbp-0x5cc],cx
   115f9:	66 89 95 36 fa ff ff 	mov    WORD PTR [rbp-0x5ca],dx
   11600:	66 89 85 38 fa ff ff 	mov    WORD PTR [rbp-0x5c8],ax
   11607:	0f b7 85 38 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5c8]
   1160e:	66 0f 6e c0          	movd   xmm0,eax
   11612:	0f b7 85 36 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5ca]
   11619:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   1161e:	66 0f 6f c8          	movdqa xmm1,xmm0
   11622:	0f b7 85 34 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5cc]
   11629:	66 0f 6e c0          	movd   xmm0,eax
   1162d:	0f b7 85 32 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5ce]
   11634:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11639:	66 0f 6f e0          	movdqa xmm4,xmm0
   1163d:	0f b7 85 30 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5d0]
   11644:	66 0f 6e c0          	movd   xmm0,eax
   11648:	0f b7 85 2e fa ff ff 	movzx  eax,WORD PTR [rbp-0x5d2]
   1164f:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11654:	66 0f 6f d0          	movdqa xmm2,xmm0
   11658:	0f b7 85 2c fa ff ff 	movzx  eax,WORD PTR [rbp-0x5d4]
   1165f:	66 0f 6e c0          	movd   xmm0,eax
   11663:	0f b7 85 2a fa ff ff 	movzx  eax,WORD PTR [rbp-0x5d6]
   1166a:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   1166f:	66 0f 6f d8          	movdqa xmm3,xmm0
   11673:	66 0f 62 cc          	punpckldq xmm1,xmm4
   11677:	66 0f 6f c1          	movdqa xmm0,xmm1
   1167b:	66 0f 6f c8          	movdqa xmm1,xmm0
   1167f:	66 0f 62 d3          	punpckldq xmm2,xmm3
   11683:	66 0f 6f c2          	movdqa xmm0,xmm2
   11687:	66 0f 6f d0          	movdqa xmm2,xmm0
   1168b:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
   1168f:	66 0f 6f c1          	movdqa xmm0,xmm1
   11693:	90                   	nop
   11694:	0f 29 85 20 fb ff ff 	movaps XMMWORD PTR [rbp-0x4e0],xmm0
   1169b:	66 c7 85 16 fa ff ff 7e fa 	mov    WORD PTR [rbp-0x5ea],0xfa7e
   116a4:	0f bf 85 16 fa ff ff 	movsx  eax,WORD PTR [rbp-0x5ea]
   116ab:	0f bf 95 16 fa ff ff 	movsx  edx,WORD PTR [rbp-0x5ea]
   116b2:	0f bf 8d 16 fa ff ff 	movsx  ecx,WORD PTR [rbp-0x5ea]
   116b9:	0f bf b5 16 fa ff ff 	movsx  esi,WORD PTR [rbp-0x5ea]
   116c0:	0f bf bd 16 fa ff ff 	movsx  edi,WORD PTR [rbp-0x5ea]
   116c7:	44 0f bf 85 16 fa ff ff 	movsx  r8d,WORD PTR [rbp-0x5ea]
   116cf:	44 0f bf 8d 16 fa ff ff 	movsx  r9d,WORD PTR [rbp-0x5ea]
   116d7:	44 0f bf 95 16 fa ff ff 	movsx  r10d,WORD PTR [rbp-0x5ea]
   116df:	66 44 89 95 18 fa ff ff 	mov    WORD PTR [rbp-0x5e8],r10w
   116e7:	66 44 89 8d 1a fa ff ff 	mov    WORD PTR [rbp-0x5e6],r9w
   116ef:	66 44 89 85 1c fa ff ff 	mov    WORD PTR [rbp-0x5e4],r8w
   116f7:	66 89 bd 1e fa ff ff 	mov    WORD PTR [rbp-0x5e2],di
   116fe:	66 89 b5 20 fa ff ff 	mov    WORD PTR [rbp-0x5e0],si
   11705:	66 89 8d 22 fa ff ff 	mov    WORD PTR [rbp-0x5de],cx
   1170c:	66 89 95 24 fa ff ff 	mov    WORD PTR [rbp-0x5dc],dx
   11713:	66 89 85 26 fa ff ff 	mov    WORD PTR [rbp-0x5da],ax
   1171a:	0f b7 85 26 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5da]
   11721:	66 0f 6e c0          	movd   xmm0,eax
   11725:	0f b7 85 24 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5dc]
   1172c:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11731:	66 0f 6f c8          	movdqa xmm1,xmm0
   11735:	0f b7 85 22 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5de]
   1173c:	66 0f 6e c0          	movd   xmm0,eax
   11740:	0f b7 85 20 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5e0]
   11747:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   1174c:	66 0f 6f e0          	movdqa xmm4,xmm0
   11750:	0f b7 85 1e fa ff ff 	movzx  eax,WORD PTR [rbp-0x5e2]
   11757:	66 0f 6e c0          	movd   xmm0,eax
   1175b:	0f b7 85 1c fa ff ff 	movzx  eax,WORD PTR [rbp-0x5e4]
   11762:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11767:	66 0f 6f d0          	movdqa xmm2,xmm0
   1176b:	0f b7 85 1a fa ff ff 	movzx  eax,WORD PTR [rbp-0x5e6]
   11772:	66 0f 6e c0          	movd   xmm0,eax
   11776:	0f b7 85 18 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5e8]
   1177d:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11782:	66 0f 6f d8          	movdqa xmm3,xmm0
   11786:	66 0f 62 cc          	punpckldq xmm1,xmm4
   1178a:	66 0f 6f c1          	movdqa xmm0,xmm1
   1178e:	66 0f 6f c8          	movdqa xmm1,xmm0
   11792:	66 0f 62 d3          	punpckldq xmm2,xmm3
   11796:	66 0f 6f c2          	movdqa xmm0,xmm2
   1179a:	66 0f 6f d0          	movdqa xmm2,xmm0
   1179e:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
   117a2:	66 0f 6f c1          	movdqa xmm0,xmm1
   117a6:	90                   	nop
   117a7:	0f 29 85 30 fb ff ff 	movaps XMMWORD PTR [rbp-0x4d0],xmm0
   117ae:	66 c7 85 04 fa ff ff 5a 1c 	mov    WORD PTR [rbp-0x5fc],0x1c5a
   117b7:	0f bf 85 04 fa ff ff 	movsx  eax,WORD PTR [rbp-0x5fc]
   117be:	0f bf 95 04 fa ff ff 	movsx  edx,WORD PTR [rbp-0x5fc]
   117c5:	0f bf 8d 04 fa ff ff 	movsx  ecx,WORD PTR [rbp-0x5fc]
   117cc:	0f bf b5 04 fa ff ff 	movsx  esi,WORD PTR [rbp-0x5fc]
   117d3:	0f bf bd 04 fa ff ff 	movsx  edi,WORD PTR [rbp-0x5fc]
   117da:	44 0f bf 85 04 fa ff ff 	movsx  r8d,WORD PTR [rbp-0x5fc]
   117e2:	44 0f bf 8d 04 fa ff ff 	movsx  r9d,WORD PTR [rbp-0x5fc]
   117ea:	44 0f bf 95 04 fa ff ff 	movsx  r10d,WORD PTR [rbp-0x5fc]
   117f2:	66 44 89 95 06 fa ff ff 	mov    WORD PTR [rbp-0x5fa],r10w
   117fa:	66 44 89 8d 08 fa ff ff 	mov    WORD PTR [rbp-0x5f8],r9w
   11802:	66 44 89 85 0a fa ff ff 	mov    WORD PTR [rbp-0x5f6],r8w
   1180a:	66 89 bd 0c fa ff ff 	mov    WORD PTR [rbp-0x5f4],di
   11811:	66 89 b5 0e fa ff ff 	mov    WORD PTR [rbp-0x5f2],si
   11818:	66 89 8d 10 fa ff ff 	mov    WORD PTR [rbp-0x5f0],cx
   1181f:	66 89 95 12 fa ff ff 	mov    WORD PTR [rbp-0x5ee],dx
   11826:	66 89 85 14 fa ff ff 	mov    WORD PTR [rbp-0x5ec],ax
   1182d:	0f b7 85 14 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5ec]
   11834:	66 0f 6e c0          	movd   xmm0,eax
   11838:	0f b7 85 12 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5ee]
   1183f:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11844:	66 0f 6f c8          	movdqa xmm1,xmm0
   11848:	0f b7 85 10 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5f0]
   1184f:	66 0f 6e c0          	movd   xmm0,eax
   11853:	0f b7 85 0e fa ff ff 	movzx  eax,WORD PTR [rbp-0x5f2]
   1185a:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   1185f:	66 0f 6f e0          	movdqa xmm4,xmm0
   11863:	0f b7 85 0c fa ff ff 	movzx  eax,WORD PTR [rbp-0x5f4]
   1186a:	66 0f 6e c0          	movd   xmm0,eax
   1186e:	0f b7 85 0a fa ff ff 	movzx  eax,WORD PTR [rbp-0x5f6]
   11875:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   1187a:	66 0f 6f d0          	movdqa xmm2,xmm0
   1187e:	0f b7 85 08 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5f8]
   11885:	66 0f 6e c0          	movd   xmm0,eax
   11889:	0f b7 85 06 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5fa]
   11890:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11895:	66 0f 6f d8          	movdqa xmm3,xmm0
   11899:	66 0f 62 cc          	punpckldq xmm1,xmm4
   1189d:	66 0f 6f c1          	movdqa xmm0,xmm1
   118a1:	66 0f 6f c8          	movdqa xmm1,xmm0
   118a5:	66 0f 62 d3          	punpckldq xmm2,xmm3
   118a9:	66 0f 6f c2          	movdqa xmm0,xmm2
   118ad:	66 0f 6f d0          	movdqa xmm2,xmm0
   118b1:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
   118b5:	66 0f 6f c1          	movdqa xmm0,xmm1
   118b9:	90                   	nop
   118ba:	0f 29 85 40 fb ff ff 	movaps XMMWORD PTR [rbp-0x4c0],xmm0
   118c1:	c6 85 d0 f9 ff ff 80 	mov    BYTE PTR [rbp-0x630],0x80
   118c8:	0f be 95 d0 f9 ff ff 	movsx  edx,BYTE PTR [rbp-0x630]
   118cf:	0f be 8d d0 f9 ff ff 	movsx  ecx,BYTE PTR [rbp-0x630]
   118d6:	0f be b5 d0 f9 ff ff 	movsx  esi,BYTE PTR [rbp-0x630]
   118dd:	0f be bd d0 f9 ff ff 	movsx  edi,BYTE PTR [rbp-0x630]
   118e4:	44 0f be 85 d0 f9 ff ff 	movsx  r8d,BYTE PTR [rbp-0x630]
   118ec:	44 0f be 8d d0 f9 ff ff 	movsx  r9d,BYTE PTR [rbp-0x630]
   118f4:	44 0f be 95 d0 f9 ff ff 	movsx  r10d,BYTE PTR [rbp-0x630]
   118fc:	44 0f be 9d d0 f9 ff ff 	movsx  r11d,BYTE PTR [rbp-0x630]
   11904:	0f be 9d d0 f9 ff ff 	movsx  ebx,BYTE PTR [rbp-0x630]
   1190b:	44 0f be a5 d0 f9 ff ff 	movsx  r12d,BYTE PTR [rbp-0x630]
   11913:	44 0f be ad d0 f9 ff ff 	movsx  r13d,BYTE PTR [rbp-0x630]
   1191b:	44 0f be b5 d0 f9 ff ff 	movsx  r14d,BYTE PTR [rbp-0x630]
   11923:	44 0f be bd d0 f9 ff ff 	movsx  r15d,BYTE PTR [rbp-0x630]
   1192b:	0f be 85 d0 f9 ff ff 	movsx  eax,BYTE PTR [rbp-0x630]
   11932:	89 85 90 f9 ff ff    	mov    DWORD PTR [rbp-0x670],eax
   11938:	0f be 85 d0 f9 ff ff 	movsx  eax,BYTE PTR [rbp-0x630]
   1193f:	89 85 a4 f9 ff ff    	mov    DWORD PTR [rbp-0x65c],eax
   11945:	0f be 85 d0 f9 ff ff 	movsx  eax,BYTE PTR [rbp-0x630]
   1194c:	88 85 d1 f9 ff ff    	mov    BYTE PTR [rbp-0x62f],al
   11952:	0f b6 85 a4 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x65c]
   11959:	88 85 d2 f9 ff ff    	mov    BYTE PTR [rbp-0x62e],al
   1195f:	0f b6 85 90 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x670]
   11966:	88 85 d3 f9 ff ff    	mov    BYTE PTR [rbp-0x62d],al
   1196c:	44 88 bd d4 f9 ff ff 	mov    BYTE PTR [rbp-0x62c],r15b
   11973:	44 88 b5 d5 f9 ff ff 	mov    BYTE PTR [rbp-0x62b],r14b
   1197a:	44 88 ad d6 f9 ff ff 	mov    BYTE PTR [rbp-0x62a],r13b
   11981:	44 88 a5 d7 f9 ff ff 	mov    BYTE PTR [rbp-0x629],r12b
   11988:	88 9d d8 f9 ff ff    	mov    BYTE PTR [rbp-0x628],bl
   1198e:	44 88 9d d9 f9 ff ff 	mov    BYTE PTR [rbp-0x627],r11b
   11995:	44 88 95 da f9 ff ff 	mov    BYTE PTR [rbp-0x626],r10b
   1199c:	44 88 8d db f9 ff ff 	mov    BYTE PTR [rbp-0x625],r9b
   119a3:	44 88 85 dc f9 ff ff 	mov    BYTE PTR [rbp-0x624],r8b
   119aa:	40 88 bd dd f9 ff ff 	mov    BYTE PTR [rbp-0x623],dil
   119b1:	40 88 b5 de f9 ff ff 	mov    BYTE PTR [rbp-0x622],sil
   119b8:	88 8d df f9 ff ff    	mov    BYTE PTR [rbp-0x621],cl
   119be:	88 95 e0 f9 ff ff    	mov    BYTE PTR [rbp-0x620],dl
   119c4:	0f b6 95 d9 f9 ff ff 	movzx  edx,BYTE PTR [rbp-0x627]
   119cb:	0f b6 85 da f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x626]
   119d2:	48 c1 e2 08          	shl    rdx,0x8
   119d6:	48 09 c2             	or     rdx,rax
   119d9:	0f b6 85 db f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x625]
   119e0:	48 c1 e2 08          	shl    rdx,0x8
   119e4:	48 09 c2             	or     rdx,rax
   119e7:	0f b6 85 dc f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x624]
   119ee:	48 c1 e2 08          	shl    rdx,0x8
   119f2:	48 09 c2             	or     rdx,rax
   119f5:	0f b6 85 dd f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x623]
   119fc:	48 c1 e2 08          	shl    rdx,0x8
   11a00:	48 09 c2             	or     rdx,rax
   11a03:	0f b6 85 de f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x622]
   11a0a:	48 c1 e2 08          	shl    rdx,0x8
   11a0e:	48 09 c2             	or     rdx,rax
   11a11:	0f b6 85 df f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x621]
   11a18:	48 c1 e2 08          	shl    rdx,0x8
   11a1c:	48 09 c2             	or     rdx,rax
   11a1f:	0f b6 85 e0 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x620]
   11a26:	48 c1 e2 08          	shl    rdx,0x8
   11a2a:	48 09 c2             	or     rdx,rax
   11a2d:	0f b6 85 d1 f9 ff ff 	movzx  eax,BYTE PTR [rbp-0x62f]
   11a34:	0f b6 8d d2 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x62e]
   11a3b:	48 c1 e0 08          	shl    rax,0x8
   11a3f:	48 09 c8             	or     rax,rcx
   11a42:	0f b6 8d d3 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x62d]
   11a49:	48 c1 e0 08          	shl    rax,0x8
   11a4d:	48 09 c8             	or     rax,rcx
   11a50:	0f b6 8d d4 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x62c]
   11a57:	48 c1 e0 08          	shl    rax,0x8
   11a5b:	48 09 c8             	or     rax,rcx
   11a5e:	0f b6 8d d5 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x62b]
   11a65:	48 c1 e0 08          	shl    rax,0x8
   11a69:	48 09 c8             	or     rax,rcx
   11a6c:	0f b6 8d d6 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x62a]
   11a73:	48 c1 e0 08          	shl    rax,0x8
   11a77:	48 09 c8             	or     rax,rcx
   11a7a:	0f b6 8d d7 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x629]
   11a81:	48 c1 e0 08          	shl    rax,0x8
   11a85:	48 09 c8             	or     rax,rcx
   11a88:	0f b6 8d d8 f9 ff ff 	movzx  ecx,BYTE PTR [rbp-0x628]
   11a8f:	48 c1 e0 08          	shl    rax,0x8
   11a93:	48 09 c8             	or     rax,rcx
   11a96:	48 89 95 90 f9 ff ff 	mov    QWORD PTR [rbp-0x670],rdx
   11a9d:	48 89 85 98 f9 ff ff 	mov    QWORD PTR [rbp-0x668],rax
   11aa4:	66 0f 6f 85 90 f9 ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x670]
   11aac:	90                   	nop
   11aad:	0f 29 85 50 fb ff ff 	movaps XMMWORD PTR [rbp-0x4b0],xmm0
   11ab4:	66 c7 85 f2 f9 ff ff ff 00 	mov    WORD PTR [rbp-0x60e],0xff
   11abd:	0f bf 85 f2 f9 ff ff 	movsx  eax,WORD PTR [rbp-0x60e]
   11ac4:	0f bf 95 f2 f9 ff ff 	movsx  edx,WORD PTR [rbp-0x60e]
   11acb:	0f bf 8d f2 f9 ff ff 	movsx  ecx,WORD PTR [rbp-0x60e]
   11ad2:	0f bf b5 f2 f9 ff ff 	movsx  esi,WORD PTR [rbp-0x60e]
   11ad9:	0f bf bd f2 f9 ff ff 	movsx  edi,WORD PTR [rbp-0x60e]
   11ae0:	44 0f bf 85 f2 f9 ff ff 	movsx  r8d,WORD PTR [rbp-0x60e]
   11ae8:	44 0f bf 8d f2 f9 ff ff 	movsx  r9d,WORD PTR [rbp-0x60e]
   11af0:	44 0f bf 95 f2 f9 ff ff 	movsx  r10d,WORD PTR [rbp-0x60e]
   11af8:	66 44 89 95 f4 f9 ff ff 	mov    WORD PTR [rbp-0x60c],r10w
   11b00:	66 44 89 8d f6 f9 ff ff 	mov    WORD PTR [rbp-0x60a],r9w
   11b08:	66 44 89 85 f8 f9 ff ff 	mov    WORD PTR [rbp-0x608],r8w
   11b10:	66 89 bd fa f9 ff ff 	mov    WORD PTR [rbp-0x606],di
   11b17:	66 89 b5 fc f9 ff ff 	mov    WORD PTR [rbp-0x604],si
   11b1e:	66 89 8d fe f9 ff ff 	mov    WORD PTR [rbp-0x602],cx
   11b25:	66 89 95 00 fa ff ff 	mov    WORD PTR [rbp-0x600],dx
   11b2c:	66 89 85 02 fa ff ff 	mov    WORD PTR [rbp-0x5fe],ax
   11b33:	0f b7 85 02 fa ff ff 	movzx  eax,WORD PTR [rbp-0x5fe]
   11b3a:	66 0f 6e c0          	movd   xmm0,eax
   11b3e:	0f b7 85 00 fa ff ff 	movzx  eax,WORD PTR [rbp-0x600]
   11b45:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11b4a:	66 0f 6f c8          	movdqa xmm1,xmm0
   11b4e:	0f b7 85 fe f9 ff ff 	movzx  eax,WORD PTR [rbp-0x602]
   11b55:	66 0f 6e c0          	movd   xmm0,eax
   11b59:	0f b7 85 fc f9 ff ff 	movzx  eax,WORD PTR [rbp-0x604]
   11b60:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11b65:	66 0f 6f e0          	movdqa xmm4,xmm0
   11b69:	0f b7 85 fa f9 ff ff 	movzx  eax,WORD PTR [rbp-0x606]
   11b70:	66 0f 6e c0          	movd   xmm0,eax
   11b74:	0f b7 85 f8 f9 ff ff 	movzx  eax,WORD PTR [rbp-0x608]
   11b7b:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11b80:	66 0f 6f d0          	movdqa xmm2,xmm0
   11b84:	0f b7 85 f6 f9 ff ff 	movzx  eax,WORD PTR [rbp-0x60a]
   11b8b:	66 0f 6e c0          	movd   xmm0,eax
   11b8f:	0f b7 85 f4 f9 ff ff 	movzx  eax,WORD PTR [rbp-0x60c]
   11b96:	66 0f c4 c0 01       	pinsrw xmm0,eax,0x1
   11b9b:	66 0f 6f d8          	movdqa xmm3,xmm0
   11b9f:	66 0f 62 cc          	punpckldq xmm1,xmm4
   11ba3:	66 0f 6f c1          	movdqa xmm0,xmm1
   11ba7:	66 0f 6f c8          	movdqa xmm1,xmm0
   11bab:	66 0f 62 d3          	punpckldq xmm2,xmm3
   11baf:	66 0f 6f c2          	movdqa xmm0,xmm2
   11bb3:	66 0f 6f d0          	movdqa xmm2,xmm0
   11bb7:	66 0f 6c ca          	punpcklqdq xmm1,xmm2
   11bbb:	66 0f 6f c1          	movdqa xmm0,xmm1
   11bbf:	90                   	nop
   11bc0:	0f 29 85 60 fb ff ff 	movaps XMMWORD PTR [rbp-0x4a0],xmm0
   11bc7:	e9 d0 06 00 00       	jmp    1229c <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x106f>
   11bcc:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   11bd2:	48 63 d0             	movsxd rdx,eax
   11bd5:	48 8b 85 c0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x640]
   11bdc:	48 01 d0             	add    rax,rdx
   11bdf:	48 89 85 d8 fa ff ff 	mov    QWORD PTR [rbp-0x528],rax
   11be6:	48 8b 85 d8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x528]
   11bed:	48 8b 00             	mov    rax,QWORD PTR [rax]
   11bf0:	ba 00 00 00 00       	mov    edx,0x0
   11bf5:	48 89 95 e0 fa ff ff 	mov    QWORD PTR [rbp-0x520],rdx
   11bfc:	48 89 85 e8 fa ff ff 	mov    QWORD PTR [rbp-0x518],rax
   11c03:	48 8b 85 e8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x518]
   11c0a:	48 8b 95 e0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x520]
   11c11:	48 89 95 f0 fa ff ff 	mov    QWORD PTR [rbp-0x510],rdx
   11c18:	48 89 85 f8 fa ff ff 	mov    QWORD PTR [rbp-0x508],rax
   11c1f:	48 8b 95 f0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x510]
   11c26:	48 8b 85 f8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x508]
   11c2d:	66 48 0f 6e c0       	movq   xmm0,rax
   11c32:	66 48 0f 6e ea       	movq   xmm5,rdx
   11c37:	66 0f 6c c5          	punpcklqdq xmm0,xmm5
   11c3b:	90                   	nop
   11c3c:	90                   	nop
   11c3d:	0f 29 85 70 fb ff ff 	movaps XMMWORD PTR [rbp-0x490],xmm0
   11c44:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   11c4a:	48 63 d0             	movsxd rdx,eax
   11c4d:	48 8b 85 b0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x650]
   11c54:	48 01 d0             	add    rax,rdx
   11c57:	48 89 85 b0 fa ff ff 	mov    QWORD PTR [rbp-0x550],rax
   11c5e:	48 8b 85 b0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x550]
   11c65:	48 8b 00             	mov    rax,QWORD PTR [rax]
   11c68:	ba 00 00 00 00       	mov    edx,0x0
   11c6d:	48 89 95 b8 fa ff ff 	mov    QWORD PTR [rbp-0x548],rdx
   11c74:	48 89 85 c0 fa ff ff 	mov    QWORD PTR [rbp-0x540],rax
   11c7b:	48 8b 85 c0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x540]
   11c82:	48 8b 95 b8 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x548]
   11c89:	48 89 95 c8 fa ff ff 	mov    QWORD PTR [rbp-0x538],rdx
   11c90:	48 89 85 d0 fa ff ff 	mov    QWORD PTR [rbp-0x530],rax
   11c97:	48 8b 95 c8 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x538]
   11c9e:	48 8b 85 d0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x530]
   11ca5:	66 48 0f 6e c0       	movq   xmm0,rax
   11caa:	66 48 0f 6e f2       	movq   xmm6,rdx
   11caf:	66 0f 6c c6          	punpcklqdq xmm0,xmm6
   11cb3:	90                   	nop
   11cb4:	90                   	nop
   11cb5:	0f 29 85 80 fb ff ff 	movaps XMMWORD PTR [rbp-0x480],xmm0
   11cbc:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   11cc2:	48 63 d0             	movsxd rdx,eax
   11cc5:	48 8b 85 b8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x648]
   11ccc:	48 01 d0             	add    rax,rdx
   11ccf:	48 89 85 88 fa ff ff 	mov    QWORD PTR [rbp-0x578],rax
   11cd6:	48 8b 85 88 fa ff ff 	mov    rax,QWORD PTR [rbp-0x578]
   11cdd:	48 8b 00             	mov    rax,QWORD PTR [rax]
   11ce0:	ba 00 00 00 00       	mov    edx,0x0
   11ce5:	48 89 95 90 fa ff ff 	mov    QWORD PTR [rbp-0x570],rdx
   11cec:	48 89 85 98 fa ff ff 	mov    QWORD PTR [rbp-0x568],rax
   11cf3:	48 8b 85 98 fa ff ff 	mov    rax,QWORD PTR [rbp-0x568]
   11cfa:	48 8b 95 90 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x570]
   11d01:	48 89 95 a0 fa ff ff 	mov    QWORD PTR [rbp-0x560],rdx
   11d08:	48 89 85 a8 fa ff ff 	mov    QWORD PTR [rbp-0x558],rax
   11d0f:	48 8b 95 a0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x560]
   11d16:	48 8b 85 a8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x558]
   11d1d:	66 48 0f 6e c0       	movq   xmm0,rax
   11d22:	66 48 0f 6e fa       	movq   xmm7,rdx
   11d27:	66 0f 6c c7          	punpcklqdq xmm0,xmm7
   11d2b:	90                   	nop
   11d2c:	90                   	nop
   11d2d:	0f 29 85 90 fb ff ff 	movaps XMMWORD PTR [rbp-0x470],xmm0
   11d34:	66 0f 6f 85 80 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x480]
   11d3c:	0f 29 45 b0          	movaps XMMWORD PTR [rbp-0x50],xmm0
   11d40:	66 0f 6f 85 00 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x500]
   11d48:	0f 29 45 c0          	movaps XMMWORD PTR [rbp-0x40],xmm0
   11d4c:	66 0f 6f 4d b0       	movdqa xmm1,XMMWORD PTR [rbp-0x50]
   11d51:	66 0f 6f 45 c0       	movdqa xmm0,XMMWORD PTR [rbp-0x40]
   11d56:	66 0f ef c1          	pxor   xmm0,xmm1
   11d5a:	0f 29 85 a0 fb ff ff 	movaps XMMWORD PTR [rbp-0x460],xmm0
   11d61:	66 0f 6f 85 90 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x470]
   11d69:	0f 29 45 90          	movaps XMMWORD PTR [rbp-0x70],xmm0
   11d6d:	66 0f 6f 85 00 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x500]
   11d75:	0f 29 45 a0          	movaps XMMWORD PTR [rbp-0x60],xmm0
   11d79:	66 0f 6f 4d 90       	movdqa xmm1,XMMWORD PTR [rbp-0x70]
   11d7e:	66 0f 6f 45 a0       	movdqa xmm0,XMMWORD PTR [rbp-0x60]
   11d83:	66 0f ef c1          	pxor   xmm0,xmm1
   11d87:	0f 29 85 b0 fb ff ff 	movaps XMMWORD PTR [rbp-0x450],xmm0
   11d8e:	66 0f 6f 85 50 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4b0]
   11d96:	0f 29 85 70 ff ff ff 	movaps XMMWORD PTR [rbp-0x90],xmm0
   11d9d:	66 0f 6f 85 70 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x490]
   11da5:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
   11da9:	66 0f 6f 4d 80       	movdqa xmm1,XMMWORD PTR [rbp-0x80]
   11dae:	66 0f 6f 85 70 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x90]
   11db6:	66 0f 60 c1          	punpcklbw xmm0,xmm1
   11dba:	0f 29 85 c0 fb ff ff 	movaps XMMWORD PTR [rbp-0x440],xmm0
   11dc1:	66 0f ef c0          	pxor   xmm0,xmm0
   11dc5:	0f 29 85 50 ff ff ff 	movaps XMMWORD PTR [rbp-0xb0],xmm0
   11dcc:	66 0f 6f 85 a0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x460]
   11dd4:	0f 29 85 60 ff ff ff 	movaps XMMWORD PTR [rbp-0xa0],xmm0
   11ddb:	66 0f 6f 8d 60 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xa0]
   11de3:	66 0f 6f 85 50 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xb0]
   11deb:	66 0f 60 c1          	punpcklbw xmm0,xmm1
   11def:	0f 29 85 d0 fb ff ff 	movaps XMMWORD PTR [rbp-0x430],xmm0
   11df6:	66 0f ef c0          	pxor   xmm0,xmm0
   11dfa:	0f 29 85 30 ff ff ff 	movaps XMMWORD PTR [rbp-0xd0],xmm0
   11e01:	66 0f 6f 85 b0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x450]
   11e09:	0f 29 85 40 ff ff ff 	movaps XMMWORD PTR [rbp-0xc0],xmm0
   11e10:	66 0f 6f 8d 40 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xc0]
   11e18:	66 0f 6f 85 30 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xd0]
   11e20:	66 0f 60 c1          	punpcklbw xmm0,xmm1
   11e24:	0f 29 85 e0 fb ff ff 	movaps XMMWORD PTR [rbp-0x420],xmm0
   11e2b:	66 0f 6f 85 c0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x440]
   11e33:	0f 29 85 20 ff ff ff 	movaps XMMWORD PTR [rbp-0xe0],xmm0
   11e3a:	c7 85 74 fa ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x58c],0x4
   11e44:	66 0f 6f 8d 20 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0xe0]
   11e4c:	66 0f 6e 85 74 fa ff ff 	movd   xmm0,DWORD PTR [rbp-0x58c]
   11e54:	66 0f d1 c8          	psrlw  xmm1,xmm0
   11e58:	66 0f 6f c1          	movdqa xmm0,xmm1
   11e5c:	0f 29 85 f0 fb ff ff 	movaps XMMWORD PTR [rbp-0x410],xmm0
   11e63:	66 0f 6f 85 10 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4f0]
   11e6b:	0f 29 85 00 ff ff ff 	movaps XMMWORD PTR [rbp-0x100],xmm0
   11e72:	66 0f 6f 85 d0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x430]
   11e7a:	0f 29 85 10 ff ff ff 	movaps XMMWORD PTR [rbp-0xf0],xmm0
   11e81:	66 0f 6f 85 10 ff ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0xf0]
   11e89:	66 0f 6f 8d 00 ff ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x100]
   11e91:	66 0f e5 c1          	pmulhw xmm0,xmm1
   11e95:	0f 29 85 00 fc ff ff 	movaps XMMWORD PTR [rbp-0x400],xmm0
   11e9c:	66 0f 6f 85 30 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4d0]
   11ea4:	0f 29 85 e0 fe ff ff 	movaps XMMWORD PTR [rbp-0x120],xmm0
   11eab:	66 0f 6f 85 e0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x420]
   11eb3:	0f 29 85 f0 fe ff ff 	movaps XMMWORD PTR [rbp-0x110],xmm0
   11eba:	66 0f 6f 85 f0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x110]
   11ec2:	66 0f 6f 8d e0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x120]
   11eca:	66 0f e5 c1          	pmulhw xmm0,xmm1
   11ece:	0f 29 85 10 fc ff ff 	movaps XMMWORD PTR [rbp-0x3f0],xmm0
   11ed5:	66 0f 6f 85 e0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x420]
   11edd:	0f 29 85 c0 fe ff ff 	movaps XMMWORD PTR [rbp-0x140],xmm0
   11ee4:	66 0f 6f 85 40 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4c0]
   11eec:	0f 29 85 d0 fe ff ff 	movaps XMMWORD PTR [rbp-0x130],xmm0
   11ef3:	66 0f 6f 85 d0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x130]
   11efb:	66 0f 6f 8d c0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x140]
   11f03:	66 0f e5 c1          	pmulhw xmm0,xmm1
   11f07:	0f 29 85 20 fc ff ff 	movaps XMMWORD PTR [rbp-0x3e0],xmm0
   11f0e:	66 0f 6f 85 d0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x430]
   11f16:	0f 29 85 a0 fe ff ff 	movaps XMMWORD PTR [rbp-0x160],xmm0
   11f1d:	66 0f 6f 85 20 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4e0]
   11f25:	0f 29 85 b0 fe ff ff 	movaps XMMWORD PTR [rbp-0x150],xmm0
   11f2c:	66 0f 6f 85 b0 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x150]
   11f34:	66 0f 6f 8d a0 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x160]
   11f3c:	66 0f e5 c1          	pmulhw xmm0,xmm1
   11f40:	0f 29 85 30 fc ff ff 	movaps XMMWORD PTR [rbp-0x3d0],xmm0
   11f47:	66 0f 6f 85 00 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x400]
   11f4f:	0f 29 85 80 fe ff ff 	movaps XMMWORD PTR [rbp-0x180],xmm0
   11f56:	66 0f 6f 85 f0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x410]
   11f5e:	0f 29 85 90 fe ff ff 	movaps XMMWORD PTR [rbp-0x170],xmm0
   11f65:	66 0f 6f 8d 80 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x180]
   11f6d:	66 0f 6f 85 90 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x170]
   11f75:	66 0f fd c1          	paddw  xmm0,xmm1
   11f79:	0f 29 85 40 fc ff ff 	movaps XMMWORD PTR [rbp-0x3c0],xmm0
   11f80:	66 0f 6f 85 10 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3f0]
   11f88:	0f 29 85 60 fe ff ff 	movaps XMMWORD PTR [rbp-0x1a0],xmm0
   11f8f:	66 0f 6f 85 f0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x410]
   11f97:	0f 29 85 70 fe ff ff 	movaps XMMWORD PTR [rbp-0x190],xmm0
   11f9e:	66 0f 6f 8d 60 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1a0]
   11fa6:	66 0f 6f 85 70 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x190]
   11fae:	66 0f fd c1          	paddw  xmm0,xmm1
   11fb2:	0f 29 85 50 fc ff ff 	movaps XMMWORD PTR [rbp-0x3b0],xmm0
   11fb9:	66 0f 6f 85 f0 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x410]
   11fc1:	0f 29 85 40 fe ff ff 	movaps XMMWORD PTR [rbp-0x1c0],xmm0
   11fc8:	66 0f 6f 85 20 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3e0]
   11fd0:	0f 29 85 50 fe ff ff 	movaps XMMWORD PTR [rbp-0x1b0],xmm0
   11fd7:	66 0f 6f 8d 40 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1c0]
   11fdf:	66 0f 6f 85 50 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1b0]
   11fe7:	66 0f fd c1          	paddw  xmm0,xmm1
   11feb:	0f 29 85 60 fc ff ff 	movaps XMMWORD PTR [rbp-0x3a0],xmm0
   11ff2:	66 0f 6f 85 50 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3b0]
   11ffa:	0f 29 85 20 fe ff ff 	movaps XMMWORD PTR [rbp-0x1e0],xmm0
   12001:	66 0f 6f 85 30 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3d0]
   12009:	0f 29 85 30 fe ff ff 	movaps XMMWORD PTR [rbp-0x1d0],xmm0
   12010:	66 0f 6f 8d 20 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1e0]
   12018:	66 0f 6f 85 30 fe ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x1d0]
   12020:	66 0f fd c1          	paddw  xmm0,xmm1
   12024:	0f 29 85 70 fc ff ff 	movaps XMMWORD PTR [rbp-0x390],xmm0
   1202b:	66 0f 6f 85 40 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3c0]
   12033:	0f 29 85 10 fe ff ff 	movaps XMMWORD PTR [rbp-0x1f0],xmm0
   1203a:	c7 85 70 fa ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x590],0x4
   12044:	66 0f 6f 8d 10 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x1f0]
   1204c:	66 0f 6e 85 70 fa ff ff 	movd   xmm0,DWORD PTR [rbp-0x590]
   12054:	66 0f e1 c8          	psraw  xmm1,xmm0
   12058:	66 0f 6f c1          	movdqa xmm0,xmm1
   1205c:	0f 29 85 80 fc ff ff 	movaps XMMWORD PTR [rbp-0x380],xmm0
   12063:	66 0f 6f 85 60 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x3a0]
   1206b:	0f 29 85 00 fe ff ff 	movaps XMMWORD PTR [rbp-0x200],xmm0
   12072:	c7 85 6c fa ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x594],0x4
   1207c:	66 0f 6f 8d 00 fe ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x200]
   12084:	66 0f 6e 85 6c fa ff ff 	movd   xmm0,DWORD PTR [rbp-0x594]
   1208c:	66 0f e1 c8          	psraw  xmm1,xmm0
   12090:	66 0f 6f c1          	movdqa xmm0,xmm1
   12094:	0f 29 85 90 fc ff ff 	movaps XMMWORD PTR [rbp-0x370],xmm0
   1209b:	66 0f 6f 85 70 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x390]
   120a3:	0f 29 85 f0 fd ff ff 	movaps XMMWORD PTR [rbp-0x210],xmm0
   120aa:	c7 85 68 fa ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x598],0x4
   120b4:	66 0f 6f 8d f0 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x210]
   120bc:	66 0f 6e 85 68 fa ff ff 	movd   xmm0,DWORD PTR [rbp-0x598]
   120c4:	66 0f e1 c8          	psraw  xmm1,xmm0
   120c8:	66 0f 6f c1          	movdqa xmm0,xmm1
   120cc:	0f 29 85 a0 fc ff ff 	movaps XMMWORD PTR [rbp-0x360],xmm0
   120d3:	66 0f 6f 85 80 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x380]
   120db:	0f 29 85 d0 fd ff ff 	movaps XMMWORD PTR [rbp-0x230],xmm0
   120e2:	66 0f 6f 85 90 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x370]
   120ea:	0f 29 85 e0 fd ff ff 	movaps XMMWORD PTR [rbp-0x220],xmm0
   120f1:	66 0f 6f 8d e0 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x220]
   120f9:	66 0f 6f 85 d0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x230]
   12101:	66 0f 67 c1          	packuswb xmm0,xmm1
   12105:	0f 29 85 b0 fc ff ff 	movaps XMMWORD PTR [rbp-0x350],xmm0
   1210c:	66 0f 6f 85 a0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x360]
   12114:	0f 29 85 b0 fd ff ff 	movaps XMMWORD PTR [rbp-0x250],xmm0
   1211b:	66 0f 6f 85 60 fb ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x4a0]
   12123:	0f 29 85 c0 fd ff ff 	movaps XMMWORD PTR [rbp-0x240],xmm0
   1212a:	66 0f 6f 8d c0 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x240]
   12132:	66 0f 6f 85 b0 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x250]
   1213a:	66 0f 67 c1          	packuswb xmm0,xmm1
   1213e:	0f 29 85 c0 fc ff ff 	movaps XMMWORD PTR [rbp-0x340],xmm0
   12145:	66 0f 6f 85 b0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x350]
   1214d:	0f 29 85 90 fd ff ff 	movaps XMMWORD PTR [rbp-0x270],xmm0
   12154:	66 0f 6f 85 c0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x340]
   1215c:	0f 29 85 a0 fd ff ff 	movaps XMMWORD PTR [rbp-0x260],xmm0
   12163:	66 0f 6f 8d a0 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x260]
   1216b:	66 0f 6f 85 90 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x270]
   12173:	66 0f 60 c1          	punpcklbw xmm0,xmm1
   12177:	0f 29 85 d0 fc ff ff 	movaps XMMWORD PTR [rbp-0x330],xmm0
   1217e:	66 0f 6f 85 b0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x350]
   12186:	0f 29 85 70 fd ff ff 	movaps XMMWORD PTR [rbp-0x290],xmm0
   1218d:	66 0f 6f 85 c0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x340]
   12195:	0f 29 85 80 fd ff ff 	movaps XMMWORD PTR [rbp-0x280],xmm0
   1219c:	66 0f 6f 8d 80 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x280]
   121a4:	66 0f 6f 85 70 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x290]
   121ac:	66 0f 68 c1          	punpckhbw xmm0,xmm1
   121b0:	0f 29 85 e0 fc ff ff 	movaps XMMWORD PTR [rbp-0x320],xmm0
   121b7:	66 0f 6f 85 d0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x330]
   121bf:	0f 29 85 50 fd ff ff 	movaps XMMWORD PTR [rbp-0x2b0],xmm0
   121c6:	66 0f 6f 85 e0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x320]
   121ce:	0f 29 85 60 fd ff ff 	movaps XMMWORD PTR [rbp-0x2a0],xmm0
   121d5:	66 0f 6f 8d 60 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x2a0]
   121dd:	66 0f 6f 85 50 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2b0]
   121e5:	66 0f 61 c1          	punpcklwd xmm0,xmm1
   121e9:	0f 29 85 f0 fc ff ff 	movaps XMMWORD PTR [rbp-0x310],xmm0
   121f0:	66 0f 6f 85 d0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x330]
   121f8:	0f 29 85 30 fd ff ff 	movaps XMMWORD PTR [rbp-0x2d0],xmm0
   121ff:	66 0f 6f 85 e0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x320]
   12207:	0f 29 85 40 fd ff ff 	movaps XMMWORD PTR [rbp-0x2c0],xmm0
   1220e:	66 0f 6f 8d 40 fd ff ff 	movdqa xmm1,XMMWORD PTR [rbp-0x2c0]
   12216:	66 0f 6f 85 30 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2d0]
   1221e:	66 0f 69 c1          	punpckhwd xmm0,xmm1
   12222:	0f 29 85 00 fd ff ff 	movaps XMMWORD PTR [rbp-0x300],xmm0
   12229:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
   12230:	48 89 85 80 fa ff ff 	mov    QWORD PTR [rbp-0x580],rax
   12237:	66 0f 6f 85 f0 fc ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x310]
   1223f:	0f 29 85 20 fd ff ff 	movaps XMMWORD PTR [rbp-0x2e0],xmm0
   12246:	66 0f 6f 85 20 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2e0]
   1224e:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   12255:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
   12258:	90                   	nop
   12259:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
   12260:	48 83 c0 10          	add    rax,0x10
   12264:	48 89 85 78 fa ff ff 	mov    QWORD PTR [rbp-0x588],rax
   1226b:	66 0f 6f 85 00 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x300]
   12273:	0f 29 85 10 fd ff ff 	movaps XMMWORD PTR [rbp-0x2f0],xmm0
   1227a:	66 0f 6f 85 10 fd ff ff 	movdqa xmm0,XMMWORD PTR [rbp-0x2f0]
   12282:	48 8b 85 78 fa ff ff 	mov    rax,QWORD PTR [rbp-0x588]
   12289:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
   1228c:	90                   	nop
   1228d:	48 83 85 c8 f9 ff ff 20 	add    QWORD PTR [rbp-0x638],0x20
   12295:	83 85 4c fa ff ff 08 	add    DWORD PTR [rbp-0x5b4],0x8
   1229c:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   122a2:	83 c0 07             	add    eax,0x7
   122a5:	39 85 ac f9 ff ff    	cmp    DWORD PTR [rbp-0x654],eax
   122ab:	0f 8f 1b f9 ff ff    	jg     11bcc <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x99f>
   122b1:	e9 c1 01 00 00       	jmp    12477 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x124a>
   122b6:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   122bc:	48 63 d0             	movsxd rdx,eax
   122bf:	48 8b 85 c0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x640]
   122c6:	48 01 d0             	add    rax,rdx
   122c9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   122cc:	0f b6 c0             	movzx  eax,al
   122cf:	c1 e0 14             	shl    eax,0x14
   122d2:	05 00 00 08 00       	add    eax,0x80000
   122d7:	89 85 5c fa ff ff    	mov    DWORD PTR [rbp-0x5a4],eax
   122dd:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   122e3:	48 63 d0             	movsxd rdx,eax
   122e6:	48 8b 85 b0 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x650]
   122ed:	48 01 d0             	add    rax,rdx
   122f0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   122f3:	0f b6 c0             	movzx  eax,al
   122f6:	83 c0 80             	add    eax,0xffffff80
   122f9:	89 85 60 fa ff ff    	mov    DWORD PTR [rbp-0x5a0],eax
   122ff:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   12305:	48 63 d0             	movsxd rdx,eax
   12308:	48 8b 85 b8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x648]
   1230f:	48 01 d0             	add    rax,rdx
   12312:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12315:	0f b6 c0             	movzx  eax,al
   12318:	83 c0 80             	add    eax,0xffffff80
   1231b:	89 85 64 fa ff ff    	mov    DWORD PTR [rbp-0x59c],eax
   12321:	8b 85 60 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a0]
   12327:	69 d0 00 6f 16 00    	imul   edx,eax,0x166f00
   1232d:	8b 85 5c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a4]
   12333:	01 d0                	add    eax,edx
   12335:	89 85 50 fa ff ff    	mov    DWORD PTR [rbp-0x5b0],eax
   1233b:	8b 85 60 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a0]
   12341:	69 d0 00 93 f4 ff    	imul   edx,eax,0xfff49300
   12347:	8b 85 5c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a4]
   1234d:	01 d0                	add    eax,edx
   1234f:	89 c2                	mov    edx,eax
   12351:	8b 85 64 fa ff ff    	mov    eax,DWORD PTR [rbp-0x59c]
   12357:	69 c0 00 7e fa ff    	imul   eax,eax,0xfffa7e00
   1235d:	66 b8 00 00          	mov    ax,0x0
   12361:	01 d0                	add    eax,edx
   12363:	89 85 54 fa ff ff    	mov    DWORD PTR [rbp-0x5ac],eax
   12369:	8b 85 64 fa ff ff    	mov    eax,DWORD PTR [rbp-0x59c]
   1236f:	69 d0 00 5a 1c 00    	imul   edx,eax,0x1c5a00
   12375:	8b 85 5c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a4]
   1237b:	01 d0                	add    eax,edx
   1237d:	89 85 58 fa ff ff    	mov    DWORD PTR [rbp-0x5a8],eax
   12383:	c1 bd 50 fa ff ff 14 	sar    DWORD PTR [rbp-0x5b0],0x14
   1238a:	c1 bd 54 fa ff ff 14 	sar    DWORD PTR [rbp-0x5ac],0x14
   12391:	c1 bd 58 fa ff ff 14 	sar    DWORD PTR [rbp-0x5a8],0x14
   12398:	8b 85 50 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b0]
   1239e:	3d ff 00 00 00       	cmp    eax,0xff
   123a3:	76 1f                	jbe    123c4 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x1197>
   123a5:	83 bd 50 fa ff ff 00 	cmp    DWORD PTR [rbp-0x5b0],0x0
   123ac:	79 0c                	jns    123ba <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x118d>
   123ae:	c7 85 50 fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x5b0],0x0
   123b8:	eb 0a                	jmp    123c4 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x1197>
   123ba:	c7 85 50 fa ff ff ff 00 00 00 	mov    DWORD PTR [rbp-0x5b0],0xff
   123c4:	8b 85 54 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5ac]
   123ca:	3d ff 00 00 00       	cmp    eax,0xff
   123cf:	76 1f                	jbe    123f0 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x11c3>
   123d1:	83 bd 54 fa ff ff 00 	cmp    DWORD PTR [rbp-0x5ac],0x0
   123d8:	79 0c                	jns    123e6 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x11b9>
   123da:	c7 85 54 fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x5ac],0x0
   123e4:	eb 0a                	jmp    123f0 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x11c3>
   123e6:	c7 85 54 fa ff ff ff 00 00 00 	mov    DWORD PTR [rbp-0x5ac],0xff
   123f0:	8b 85 58 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a8]
   123f6:	3d ff 00 00 00       	cmp    eax,0xff
   123fb:	76 1f                	jbe    1241c <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x11ef>
   123fd:	83 bd 58 fa ff ff 00 	cmp    DWORD PTR [rbp-0x5a8],0x0
   12404:	79 0c                	jns    12412 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x11e5>
   12406:	c7 85 58 fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x5a8],0x0
   12410:	eb 0a                	jmp    1241c <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x11ef>
   12412:	c7 85 58 fa ff ff ff 00 00 00 	mov    DWORD PTR [rbp-0x5a8],0xff
   1241c:	8b 85 50 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b0]
   12422:	89 c2                	mov    edx,eax
   12424:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
   1242b:	88 10                	mov    BYTE PTR [rax],dl
   1242d:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
   12434:	48 83 c0 01          	add    rax,0x1
   12438:	8b 95 54 fa ff ff    	mov    edx,DWORD PTR [rbp-0x5ac]
   1243e:	88 10                	mov    BYTE PTR [rax],dl
   12440:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
   12447:	48 83 c0 02          	add    rax,0x2
   1244b:	8b 95 58 fa ff ff    	mov    edx,DWORD PTR [rbp-0x5a8]
   12451:	88 10                	mov    BYTE PTR [rax],dl
   12453:	48 8b 85 c8 f9 ff ff 	mov    rax,QWORD PTR [rbp-0x638]
   1245a:	48 83 c0 03          	add    rax,0x3
   1245e:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   12461:	8b 85 a8 f9 ff ff    	mov    eax,DWORD PTR [rbp-0x658]
   12467:	48 98                	cdqe   
   12469:	48 01 85 c8 f9 ff ff 	add    QWORD PTR [rbp-0x638],rax
   12470:	83 85 4c fa ff ff 01 	add    DWORD PTR [rbp-0x5b4],0x1
   12477:	8b 85 4c fa ff ff    	mov    eax,DWORD PTR [rbp-0x5b4]
   1247d:	3b 85 ac f9 ff ff    	cmp    eax,DWORD PTR [rbp-0x654]
   12483:	0f 8c 2d fe ff ff    	jl     122b6 <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)+0x1089>
   12489:	90                   	nop
   1248a:	90                   	nop
   1248b:	48 81 c4 d0 05 00 00 	add    rsp,0x5d0
   12492:	5b                   	pop    rbx
   12493:	41 5c                	pop    r12
   12495:	41 5d                	pop    r13
   12497:	41 5e                	pop    r14
   12499:	41 5f                	pop    r15
   1249b:	5d                   	pop    rbp
   1249c:	c3                   	ret    

000000000001249d <stbi__setup_jpeg(stbi__jpeg*)>:
   1249d:	55                   	push   rbp
   1249e:	48 89 e5             	mov    rbp,rsp
   124a1:	48 83 ec 08          	sub    rsp,0x8
   124a5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   124a9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   124ad:	48 8d 15 fc 65 ff ff 	lea    rdx,[rip+0xffffffffffff65fc]        # 8ab0 <stbi__idct_block(unsigned char*, int, short*)>
   124b4:	48 89 90 70 48 00 00 	mov    QWORD PTR [rax+0x4870],rdx
   124bb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   124bf:	48 8d 15 f2 eb ff ff 	lea    rdx,[rip+0xffffffffffffebf2]        # 110b8 <stbi__YCbCr_to_RGB_row(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)>
   124c6:	48 89 90 78 48 00 00 	mov    QWORD PTR [rax+0x4878],rdx
   124cd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   124d1:	48 8d 15 24 e1 ff ff 	lea    rdx,[rip+0xffffffffffffe124]        # 105fc <stbi__resample_row_hv_2(unsigned char*, unsigned char*, unsigned char*, int, int)>
   124d8:	48 89 90 80 48 00 00 	mov    QWORD PTR [rax+0x4880],rdx
   124df:	e8 91 24 ff ff       	call   4975 <stbi__sse2_available()>
   124e4:	85 c0                	test   eax,eax
   124e6:	0f 95 c0             	setne  al
   124e9:	84 c0                	test   al,al
   124eb:	74 36                	je     12523 <stbi__setup_jpeg(stbi__jpeg*)+0x86>
   124ed:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   124f1:	48 8d 15 a3 6f ff ff 	lea    rdx,[rip+0xffffffffffff6fa3]        # 949b <stbi__idct_simd(unsigned char*, int, short*)>
   124f8:	48 89 90 70 48 00 00 	mov    QWORD PTR [rax+0x4870],rdx
   124ff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   12503:	48 8d 15 23 ed ff ff 	lea    rdx,[rip+0xffffffffffffed23]        # 1122d <stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)>
   1250a:	48 89 90 78 48 00 00 	mov    QWORD PTR [rax+0x4878],rdx
   12511:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   12515:	48 8d 15 39 e2 ff ff 	lea    rdx,[rip+0xffffffffffffe239]        # 10755 <stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)>
   1251c:	48 89 90 80 48 00 00 	mov    QWORD PTR [rax+0x4880],rdx
   12523:	90                   	nop
   12524:	c9                   	leave  
   12525:	c3                   	ret    

0000000000012526 <stbi__cleanup_jpeg(stbi__jpeg*)>:
   12526:	55                   	push   rbp
   12527:	48 89 e5             	mov    rbp,rsp
   1252a:	48 83 ec 10          	sub    rsp,0x10
   1252e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   12532:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   12536:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12539:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
   1253c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   12540:	ba 00 00 00 00       	mov    edx,0x0
   12545:	89 ce                	mov    esi,ecx
   12547:	48 89 c7             	mov    rdi,rax
   1254a:	e8 32 ce ff ff       	call   f381 <stbi__free_jpeg_components(stbi__jpeg*, int, int)>
   1254f:	90                   	nop
   12550:	c9                   	leave  
   12551:	c3                   	ret    

0000000000012552 <stbi__blinn_8x8(unsigned char, unsigned char)>:
   12552:	55                   	push   rbp
   12553:	48 89 e5             	mov    rbp,rsp
   12556:	89 fa                	mov    edx,edi
   12558:	89 f0                	mov    eax,esi
   1255a:	88 55 ec             	mov    BYTE PTR [rbp-0x14],dl
   1255d:	88 45 e8             	mov    BYTE PTR [rbp-0x18],al
   12560:	0f b6 55 ec          	movzx  edx,BYTE PTR [rbp-0x14]
   12564:	0f b6 45 e8          	movzx  eax,BYTE PTR [rbp-0x18]
   12568:	0f af c2             	imul   eax,edx
   1256b:	83 e8 80             	sub    eax,0xffffff80
   1256e:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   12571:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   12574:	c1 e8 08             	shr    eax,0x8
   12577:	89 c2                	mov    edx,eax
   12579:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1257c:	01 d0                	add    eax,edx
   1257e:	c1 e8 08             	shr    eax,0x8
   12581:	5d                   	pop    rbp
   12582:	c3                   	ret    

0000000000012583 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)>:
   12583:	55                   	push   rbp
   12584:	48 89 e5             	mov    rbp,rsp
   12587:	53                   	push   rbx
   12588:	48 81 ec 88 01 00 00 	sub    rsp,0x188
   1258f:	48 89 bd 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rdi
   12596:	48 89 b5 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rsi
   1259d:	48 89 95 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rdx
   125a4:	48 89 8d 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rcx
   125ab:	44 89 85 7c fe ff ff 	mov    DWORD PTR [rbp-0x184],r8d
   125b2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   125bb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   125bf:	31 c0                	xor    eax,eax
   125c1:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   125c8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   125cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
   125d2:	83 bd 7c fe ff ff 00 	cmp    DWORD PTR [rbp-0x184],0x0
   125d9:	78 09                	js     125e4 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x61>
   125db:	83 bd 7c fe ff ff 04 	cmp    DWORD PTR [rbp-0x184],0x4
   125e2:	7e 19                	jle    125fd <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x7a>
   125e4:	48 8d 05 94 80 02 00 	lea    rax,[rip+0x28094]        # 3a67f <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x8d>
   125eb:	48 89 c7             	mov    rdi,rax
   125ee:	e8 7f 25 ff ff       	call   4b72 <stbi__err(char const*)>
   125f3:	b8 00 00 00 00       	mov    eax,0x0
   125f8:	e9 e3 0f 00 00       	jmp    135e0 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x105d>
   125fd:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12604:	48 89 c7             	mov    rdi,rax
   12607:	e8 7c db ff ff       	call   10188 <stbi__decode_jpeg_image(stbi__jpeg*)>
   1260c:	85 c0                	test   eax,eax
   1260e:	0f 94 c0             	sete   al
   12611:	84 c0                	test   al,al
   12613:	74 19                	je     1262e <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xab>
   12615:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1261c:	48 89 c7             	mov    rdi,rax
   1261f:	e8 02 ff ff ff       	call   12526 <stbi__cleanup_jpeg(stbi__jpeg*)>
   12624:	b8 00 00 00 00       	mov    eax,0x0
   12629:	e9 b2 0f 00 00       	jmp    135e0 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x105d>
   1262e:	83 bd 7c fe ff ff 00 	cmp    DWORD PTR [rbp-0x184],0x0
   12635:	75 20                	jne    12657 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xd4>
   12637:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1263e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12641:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   12644:	83 f8 02             	cmp    eax,0x2
   12647:	7e 07                	jle    12650 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xcd>
   12649:	b8 03 00 00 00       	mov    eax,0x3
   1264e:	eb 0d                	jmp    1265d <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xda>
   12650:	b8 01 00 00 00       	mov    eax,0x1
   12655:	eb 06                	jmp    1265d <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xda>
   12657:	8b 85 7c fe ff ff    	mov    eax,DWORD PTR [rbp-0x184]
   1265d:	89 85 c4 fe ff ff    	mov    DWORD PTR [rbp-0x13c],eax
   12663:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1266a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1266d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   12670:	83 f8 03             	cmp    eax,0x3
   12673:	75 3b                	jne    126b0 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x12d>
   12675:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1267c:	8b 80 50 48 00 00    	mov    eax,DWORD PTR [rax+0x4850]
   12682:	83 f8 03             	cmp    eax,0x3
   12685:	74 22                	je     126a9 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x126>
   12687:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1268e:	8b 80 4c 48 00 00    	mov    eax,DWORD PTR [rax+0x484c]
   12694:	85 c0                	test   eax,eax
   12696:	75 18                	jne    126b0 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x12d>
   12698:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1269f:	8b 80 48 48 00 00    	mov    eax,DWORD PTR [rax+0x4848]
   126a5:	85 c0                	test   eax,eax
   126a7:	75 07                	jne    126b0 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x12d>
   126a9:	b8 01 00 00 00       	mov    eax,0x1
   126ae:	eb 05                	jmp    126b5 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x132>
   126b0:	b8 00 00 00 00       	mov    eax,0x0
   126b5:	0f b6 c0             	movzx  eax,al
   126b8:	89 85 c8 fe ff ff    	mov    DWORD PTR [rbp-0x138],eax
   126be:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   126c5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   126c8:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   126cb:	83 f8 03             	cmp    eax,0x3
   126ce:	75 1e                	jne    126ee <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x16b>
   126d0:	83 bd c4 fe ff ff 02 	cmp    DWORD PTR [rbp-0x13c],0x2
   126d7:	7f 15                	jg     126ee <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x16b>
   126d9:	83 bd c8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x138],0x0
   126e0:	75 0c                	jne    126ee <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x16b>
   126e2:	c7 85 b4 fe ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x14c],0x1
   126ec:	eb 13                	jmp    12701 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x17e>
   126ee:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   126f5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   126f8:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   126fb:	89 85 b4 fe ff ff    	mov    DWORD PTR [rbp-0x14c],eax
   12701:	48 c7 85 00 ff ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x100],0x0
   1270c:	48 c7 85 08 ff ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0xf8],0x0
   12717:	48 c7 85 10 ff ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0xf0],0x0
   12722:	48 c7 85 18 ff ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0xe8],0x0
   1272d:	c7 85 b8 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x148],0x0
   12737:	e9 e0 02 00 00       	jmp    12a1c <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x499>
   1273c:	48 8d 8d 20 ff ff ff 	lea    rcx,[rbp-0xe0]
   12743:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12749:	48 63 d0             	movsxd rdx,eax
   1274c:	48 89 d0             	mov    rax,rdx
   1274f:	48 01 c0             	add    rax,rax
   12752:	48 01 d0             	add    rax,rdx
   12755:	48 c1 e0 04          	shl    rax,0x4
   12759:	48 01 c8             	add    rax,rcx
   1275c:	48 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rax
   12763:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1276a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1276d:	8b 00                	mov    eax,DWORD PTR [rax]
   1276f:	83 c0 03             	add    eax,0x3
   12772:	89 c0                	mov    eax,eax
   12774:	48 89 c7             	mov    rdi,rax
   12777:	e8 12 24 ff ff       	call   4b8e <stbi__malloc(unsigned long)>
   1277c:	48 89 c2             	mov    rdx,rax
   1277f:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
   12786:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   1278c:	48 63 c8             	movsxd rcx,eax
   1278f:	48 89 c8             	mov    rax,rcx
   12792:	48 01 c0             	add    rax,rax
   12795:	48 01 c8             	add    rax,rcx
   12798:	48 c1 e0 05          	shl    rax,0x5
   1279c:	48 01 f0             	add    rax,rsi
   1279f:	48 05 e8 46 00 00    	add    rax,0x46e8
   127a5:	48 89 10             	mov    QWORD PTR [rax],rdx
   127a8:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
   127af:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   127b5:	48 63 d0             	movsxd rdx,eax
   127b8:	48 89 d0             	mov    rax,rdx
   127bb:	48 01 c0             	add    rax,rax
   127be:	48 01 d0             	add    rax,rdx
   127c1:	48 c1 e0 05          	shl    rax,0x5
   127c5:	48 01 c8             	add    rax,rcx
   127c8:	48 05 e8 46 00 00    	add    rax,0x46e8
   127ce:	48 8b 00             	mov    rax,QWORD PTR [rax]
   127d1:	48 85 c0             	test   rax,rax
   127d4:	75 28                	jne    127fe <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x27b>
   127d6:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   127dd:	48 89 c7             	mov    rdi,rax
   127e0:	e8 41 fd ff ff       	call   12526 <stbi__cleanup_jpeg(stbi__jpeg*)>
   127e5:	48 8d 05 47 78 02 00 	lea    rax,[rip+0x27847]        # 3a033 <_IO_stdin_used+0x33>
   127ec:	48 89 c7             	mov    rdi,rax
   127ef:	e8 7e 23 ff ff       	call   4b72 <stbi__err(char const*)>
   127f4:	b8 00 00 00 00       	mov    eax,0x0
   127f9:	e9 e2 0d 00 00       	jmp    135e0 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x105d>
   127fe:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12805:	8b 90 88 46 00 00    	mov    edx,DWORD PTR [rax+0x4688]
   1280b:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
   12812:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12818:	48 63 c8             	movsxd rcx,eax
   1281b:	48 89 c8             	mov    rax,rcx
   1281e:	48 01 c0             	add    rax,rax
   12821:	48 01 c8             	add    rax,rcx
   12824:	48 c1 e0 05          	shl    rax,0x5
   12828:	48 01 f0             	add    rax,rsi
   1282b:	48 05 a4 46 00 00    	add    rax,0x46a4
   12831:	8b 08                	mov    ecx,DWORD PTR [rax]
   12833:	89 d0                	mov    eax,edx
   12835:	99                   	cdq    
   12836:	f7 f9                	idiv   ecx
   12838:	89 c2                	mov    edx,eax
   1283a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   12841:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
   12844:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1284b:	8b 90 8c 46 00 00    	mov    edx,DWORD PTR [rax+0x468c]
   12851:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
   12858:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   1285e:	48 63 c8             	movsxd rcx,eax
   12861:	48 89 c8             	mov    rax,rcx
   12864:	48 01 c0             	add    rax,rax
   12867:	48 01 c8             	add    rax,rcx
   1286a:	48 c1 e0 05          	shl    rax,0x5
   1286e:	48 01 f0             	add    rax,rsi
   12871:	48 05 a8 46 00 00    	add    rax,0x46a8
   12877:	8b 08                	mov    ecx,DWORD PTR [rax]
   12879:	89 d0                	mov    eax,edx
   1287b:	99                   	cdq    
   1287c:	f7 f9                	idiv   ecx
   1287e:	89 c2                	mov    edx,eax
   12880:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   12887:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
   1288a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   12891:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   12894:	d1 f8                	sar    eax,1
   12896:	89 c2                	mov    edx,eax
   12898:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   1289f:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
   128a2:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   128a9:	48 8b 00             	mov    rax,QWORD PTR [rax]
   128ac:	8b 10                	mov    edx,DWORD PTR [rax]
   128ae:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   128b5:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
   128b8:	01 d0                	add    eax,edx
   128ba:	8d 50 ff             	lea    edx,[rax-0x1]
   128bd:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   128c4:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
   128c7:	89 c1                	mov    ecx,eax
   128c9:	89 d0                	mov    eax,edx
   128cb:	ba 00 00 00 00       	mov    edx,0x0
   128d0:	f7 f1                	div    ecx
   128d2:	89 c2                	mov    edx,eax
   128d4:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   128db:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   128de:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   128e5:	c7 40 28 00 00 00 00 	mov    DWORD PTR [rax+0x28],0x0
   128ec:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
   128f3:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   128f9:	48 63 d0             	movsxd rdx,eax
   128fc:	48 89 d0             	mov    rax,rdx
   128ff:	48 01 c0             	add    rax,rax
   12902:	48 01 d0             	add    rax,rdx
   12905:	48 c1 e0 05          	shl    rax,0x5
   12909:	48 01 c8             	add    rax,rcx
   1290c:	48 05 d0 46 00 00    	add    rax,0x46d0
   12912:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   12915:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   1291c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   12920:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   12927:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   1292b:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   12932:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   12936:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   1293d:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
   12940:	83 f8 01             	cmp    eax,0x1
   12943:	75 25                	jne    1296a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x3e7>
   12945:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   1294c:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   1294f:	83 f8 01             	cmp    eax,0x1
   12952:	75 16                	jne    1296a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x3e7>
   12954:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   1295b:	48 8d 15 5a da ff ff 	lea    rdx,[rip+0xffffffffffffda5a]        # 103bc <resample_row_1(unsigned char*, unsigned char*, unsigned char*, int, int)>
   12962:	48 89 10             	mov    QWORD PTR [rax],rdx
   12965:	e9 ab 00 00 00       	jmp    12a15 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x492>
   1296a:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   12971:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
   12974:	83 f8 01             	cmp    eax,0x1
   12977:	75 22                	jne    1299b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x418>
   12979:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   12980:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   12983:	83 f8 02             	cmp    eax,0x2
   12986:	75 13                	jne    1299b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x418>
   12988:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   1298f:	48 8d 15 43 da ff ff 	lea    rdx,[rip+0xffffffffffffda43]        # 103d9 <stbi__resample_row_v_2(unsigned char*, unsigned char*, unsigned char*, int, int)>
   12996:	48 89 10             	mov    QWORD PTR [rax],rdx
   12999:	eb 7a                	jmp    12a15 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x492>
   1299b:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   129a2:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
   129a5:	83 f8 02             	cmp    eax,0x2
   129a8:	75 22                	jne    129cc <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x449>
   129aa:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   129b1:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   129b4:	83 f8 01             	cmp    eax,0x1
   129b7:	75 13                	jne    129cc <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x449>
   129b9:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   129c0:	48 8d 15 8c da ff ff 	lea    rdx,[rip+0xffffffffffffda8c]        # 10453 <stbi__resample_row_h_2(unsigned char*, unsigned char*, unsigned char*, int, int)>
   129c7:	48 89 10             	mov    QWORD PTR [rax],rdx
   129ca:	eb 49                	jmp    12a15 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x492>
   129cc:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   129d3:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
   129d6:	83 f8 02             	cmp    eax,0x2
   129d9:	75 29                	jne    12a04 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x481>
   129db:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   129e2:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   129e5:	83 f8 02             	cmp    eax,0x2
   129e8:	75 1a                	jne    12a04 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x481>
   129ea:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   129f1:	48 8b 90 80 48 00 00 	mov    rdx,QWORD PTR [rax+0x4880]
   129f8:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   129ff:	48 89 10             	mov    QWORD PTR [rax],rdx
   12a02:	eb 11                	jmp    12a15 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x492>
   12a04:	48 8b 85 f8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x108]
   12a0b:	48 8d 15 34 e6 ff ff 	lea    rdx,[rip+0xffffffffffffe634]        # 11046 <stbi__resample_row_generic(unsigned char*, unsigned char*, unsigned char*, int, int)>
   12a12:	48 89 10             	mov    QWORD PTR [rax],rdx
   12a15:	83 85 b8 fe ff ff 01 	add    DWORD PTR [rbp-0x148],0x1
   12a1c:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12a22:	3b 85 b4 fe ff ff    	cmp    eax,DWORD PTR [rbp-0x14c]
   12a28:	0f 8c 0e fd ff ff    	jl     1273c <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x1b9>
   12a2e:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12a35:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12a38:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   12a3b:	89 c2                	mov    edx,eax
   12a3d:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12a44:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12a47:	8b 00                	mov    eax,DWORD PTR [rax]
   12a49:	89 c6                	mov    esi,eax
   12a4b:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   12a51:	b9 01 00 00 00       	mov    ecx,0x1
   12a56:	89 c7                	mov    edi,eax
   12a58:	e8 44 23 ff ff       	call   4da1 <stbi__malloc_mad3(int, int, int, int)>
   12a5d:	48 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],rax
   12a64:	48 83 bd d8 fe ff ff 00 	cmp    QWORD PTR [rbp-0x128],0x0
   12a6c:	75 28                	jne    12a96 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x513>
   12a6e:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12a75:	48 89 c7             	mov    rdi,rax
   12a78:	e8 a9 fa ff ff       	call   12526 <stbi__cleanup_jpeg(stbi__jpeg*)>
   12a7d:	48 8d 05 af 75 02 00 	lea    rax,[rip+0x275af]        # 3a033 <_IO_stdin_used+0x33>
   12a84:	48 89 c7             	mov    rdi,rax
   12a87:	e8 e6 20 ff ff       	call   4b72 <stbi__err(char const*)>
   12a8c:	b8 00 00 00 00       	mov    eax,0x0
   12a91:	e9 4a 0b 00 00       	jmp    135e0 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x105d>
   12a96:	c7 85 c0 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x140],0x0
   12aa0:	e9 ac 0a 00 00       	jmp    13551 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfce>
   12aa5:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12aac:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12aaf:	8b 10                	mov    edx,DWORD PTR [rax]
   12ab1:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   12ab7:	0f af c2             	imul   eax,edx
   12aba:	0f af 85 c0 fe ff ff 	imul   eax,DWORD PTR [rbp-0x140]
   12ac1:	89 c2                	mov    edx,eax
   12ac3:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   12aca:	48 01 d0             	add    rax,rdx
   12acd:	48 89 85 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rax
   12ad4:	c7 85 b8 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x148],0x0
   12ade:	e9 e5 01 00 00       	jmp    12cc8 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x745>
   12ae3:	48 8d 8d 20 ff ff ff 	lea    rcx,[rbp-0xe0]
   12aea:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12af0:	48 63 d0             	movsxd rdx,eax
   12af3:	48 89 d0             	mov    rax,rdx
   12af6:	48 01 c0             	add    rax,rax
   12af9:	48 01 d0             	add    rax,rdx
   12afc:	48 c1 e0 04          	shl    rax,0x4
   12b00:	48 01 c8             	add    rax,rcx
   12b03:	48 89 85 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rax
   12b0a:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12b11:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
   12b14:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12b1b:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   12b1e:	d1 f8                	sar    eax,1
   12b20:	39 c2                	cmp    edx,eax
   12b22:	0f 9d c0             	setge  al
   12b25:	0f b6 c0             	movzx  eax,al
   12b28:	89 85 cc fe ff ff    	mov    DWORD PTR [rbp-0x134],eax
   12b2e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12b35:	4c 8b 08             	mov    r9,QWORD PTR [rax]
   12b38:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12b3f:	44 8b 40 18          	mov    r8d,DWORD PTR [rax+0x18]
   12b43:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12b4a:	8b 48 20             	mov    ecx,DWORD PTR [rax+0x20]
   12b4d:	83 bd cc fe ff ff 00 	cmp    DWORD PTR [rbp-0x134],0x0
   12b54:	74 0d                	je     12b63 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x5e0>
   12b56:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12b5d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   12b61:	eb 0b                	jmp    12b6e <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x5eb>
   12b63:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12b6a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   12b6e:	83 bd cc fe ff ff 00 	cmp    DWORD PTR [rbp-0x134],0x0
   12b75:	74 0d                	je     12b84 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x601>
   12b77:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12b7e:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
   12b82:	eb 0b                	jmp    12b8f <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x60c>
   12b84:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12b8b:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
   12b8f:	4c 8b 95 98 fe ff ff 	mov    r10,QWORD PTR [rbp-0x168]
   12b96:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12b9c:	48 63 f8             	movsxd rdi,eax
   12b9f:	48 89 f8             	mov    rax,rdi
   12ba2:	48 01 c0             	add    rax,rax
   12ba5:	48 01 f8             	add    rax,rdi
   12ba8:	48 c1 e0 05          	shl    rax,0x5
   12bac:	4c 01 d0             	add    rax,r10
   12baf:	48 05 e8 46 00 00    	add    rax,0x46e8
   12bb5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12bb8:	48 89 c7             	mov    rdi,rax
   12bbb:	41 ff d1             	call   r9
   12bbe:	8b 95 b8 fe ff ff    	mov    edx,DWORD PTR [rbp-0x148]
   12bc4:	48 63 d2             	movsxd rdx,edx
   12bc7:	48 89 84 d5 00 ff ff ff 	mov    QWORD PTR [rbp+rdx*8-0x100],rax
   12bcf:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12bd6:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   12bd9:	8d 50 01             	lea    edx,[rax+0x1]
   12bdc:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12be3:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
   12be6:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12bed:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
   12bf0:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12bf7:	8b 40 1c             	mov    eax,DWORD PTR [rax+0x1c]
   12bfa:	39 c2                	cmp    edx,eax
   12bfc:	0f 9d c0             	setge  al
   12bff:	84 c0                	test   al,al
   12c01:	0f 84 ba 00 00 00    	je     12cc1 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x73e>
   12c07:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12c0e:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
   12c15:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12c1c:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   12c20:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12c27:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   12c2b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12c32:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
   12c35:	8d 50 01             	lea    edx,[rax+0x1]
   12c38:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12c3f:	89 50 28             	mov    DWORD PTR [rax+0x28],edx
   12c42:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12c49:	8b 48 28             	mov    ecx,DWORD PTR [rax+0x28]
   12c4c:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
   12c53:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12c59:	48 63 d0             	movsxd rdx,eax
   12c5c:	48 89 d0             	mov    rax,rdx
   12c5f:	48 01 c0             	add    rax,rax
   12c62:	48 01 d0             	add    rax,rdx
   12c65:	48 c1 e0 05          	shl    rax,0x5
   12c69:	48 01 f0             	add    rax,rsi
   12c6c:	48 05 c0 46 00 00    	add    rax,0x46c0
   12c72:	8b 00                	mov    eax,DWORD PTR [rax]
   12c74:	39 c1                	cmp    ecx,eax
   12c76:	0f 9c c0             	setl   al
   12c79:	84 c0                	test   al,al
   12c7b:	74 44                	je     12cc1 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x73e>
   12c7d:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12c84:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
   12c88:	48 8b b5 98 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x168]
   12c8f:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12c95:	48 63 d0             	movsxd rdx,eax
   12c98:	48 89 d0             	mov    rax,rdx
   12c9b:	48 01 c0             	add    rax,rax
   12c9e:	48 01 d0             	add    rax,rdx
   12ca1:	48 c1 e0 05          	shl    rax,0x5
   12ca5:	48 01 f0             	add    rax,rsi
   12ca8:	48 05 c4 46 00 00    	add    rax,0x46c4
   12cae:	8b 00                	mov    eax,DWORD PTR [rax]
   12cb0:	48 98                	cdqe   
   12cb2:	48 8d 14 01          	lea    rdx,[rcx+rax*1]
   12cb6:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   12cbd:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   12cc1:	83 85 b8 fe ff ff 01 	add    DWORD PTR [rbp-0x148],0x1
   12cc8:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   12cce:	3b 85 b4 fe ff ff    	cmp    eax,DWORD PTR [rbp-0x14c]
   12cd4:	0f 8c 09 fe ff ff    	jl     12ae3 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x560>
   12cda:	83 bd c4 fe ff ff 02 	cmp    DWORD PTR [rbp-0x13c],0x2
   12ce1:	0f 8e 66 04 00 00    	jle    1314d <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xbca>
   12ce7:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
   12cee:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
   12cf5:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12cfc:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12cff:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   12d02:	83 f8 03             	cmp    eax,0x3
   12d05:	0f 85 06 01 00 00    	jne    12e11 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x88e>
   12d0b:	83 bd c8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x138],0x0
   12d12:	0f 84 ac 00 00 00    	je     12dc4 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x841>
   12d18:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   12d22:	e9 80 00 00 00       	jmp    12da7 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x824>
   12d27:	8b 95 bc fe ff ff    	mov    edx,DWORD PTR [rbp-0x144]
   12d2d:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   12d34:	48 01 d0             	add    rax,rdx
   12d37:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   12d3a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12d41:	88 10                	mov    BYTE PTR [rax],dl
   12d43:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
   12d4a:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   12d50:	48 01 d0             	add    rax,rdx
   12d53:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   12d5a:	48 83 c2 01          	add    rdx,0x1
   12d5e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12d61:	88 02                	mov    BYTE PTR [rdx],al
   12d63:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
   12d6a:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   12d70:	48 01 d0             	add    rax,rdx
   12d73:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   12d7a:	48 83 c2 02          	add    rdx,0x2
   12d7e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12d81:	88 02                	mov    BYTE PTR [rdx],al
   12d83:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12d8a:	48 83 c0 03          	add    rax,0x3
   12d8e:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   12d91:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   12d97:	48 98                	cdqe   
   12d99:	48 01 85 d0 fe ff ff 	add    QWORD PTR [rbp-0x130],rax
   12da0:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   12da7:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12dae:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12db1:	8b 00                	mov    eax,DWORD PTR [rax]
   12db3:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   12db9:	0f 82 68 ff ff ff    	jb     12d27 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x7a4>
   12dbf:	e9 86 07 00 00       	jmp    1354a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc7>
   12dc4:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12dcb:	4c 8b 90 78 48 00 00 	mov    r10,QWORD PTR [rax+0x4878]
   12dd2:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12dd9:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12ddc:	8b 00                	mov    eax,DWORD PTR [rax]
   12dde:	41 89 c0             	mov    r8d,eax
   12de1:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
   12de8:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
   12def:	8b bd c4 fe ff ff    	mov    edi,DWORD PTR [rbp-0x13c]
   12df5:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
   12dfc:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12e03:	41 89 f9             	mov    r9d,edi
   12e06:	48 89 c7             	mov    rdi,rax
   12e09:	41 ff d2             	call   r10
   12e0c:	e9 39 07 00 00       	jmp    1354a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc7>
   12e11:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12e18:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12e1b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   12e1e:	83 f8 04             	cmp    eax,0x4
   12e21:	0f 85 a1 02 00 00    	jne    130c8 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xb45>
   12e27:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12e2e:	8b 80 4c 48 00 00    	mov    eax,DWORD PTR [rax+0x484c]
   12e34:	85 c0                	test   eax,eax
   12e36:	0f 85 fe 00 00 00    	jne    12f3a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x9b7>
   12e3c:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   12e46:	e9 d2 00 00 00       	jmp    12f1d <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x99a>
   12e4b:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
   12e52:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   12e58:	48 01 d0             	add    rax,rdx
   12e5b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12e5e:	88 85 b3 fe ff ff    	mov    BYTE PTR [rbp-0x14d],al
   12e64:	0f b6 95 b3 fe ff ff 	movzx  edx,BYTE PTR [rbp-0x14d]
   12e6b:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
   12e72:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   12e78:	48 01 c8             	add    rax,rcx
   12e7b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12e7e:	0f b6 c0             	movzx  eax,al
   12e81:	89 d6                	mov    esi,edx
   12e83:	89 c7                	mov    edi,eax
   12e85:	e8 c8 f6 ff ff       	call   12552 <stbi__blinn_8x8(unsigned char, unsigned char)>
   12e8a:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   12e91:	88 02                	mov    BYTE PTR [rdx],al
   12e93:	0f b6 95 b3 fe ff ff 	movzx  edx,BYTE PTR [rbp-0x14d]
   12e9a:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
   12ea1:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   12ea7:	48 01 c8             	add    rax,rcx
   12eaa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12ead:	0f b6 c0             	movzx  eax,al
   12eb0:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
   12eb7:	48 8d 59 01          	lea    rbx,[rcx+0x1]
   12ebb:	89 d6                	mov    esi,edx
   12ebd:	89 c7                	mov    edi,eax
   12ebf:	e8 8e f6 ff ff       	call   12552 <stbi__blinn_8x8(unsigned char, unsigned char)>
   12ec4:	88 03                	mov    BYTE PTR [rbx],al
   12ec6:	0f b6 95 b3 fe ff ff 	movzx  edx,BYTE PTR [rbp-0x14d]
   12ecd:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
   12ed4:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   12eda:	48 01 c8             	add    rax,rcx
   12edd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12ee0:	0f b6 c0             	movzx  eax,al
   12ee3:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
   12eea:	48 8d 59 02          	lea    rbx,[rcx+0x2]
   12eee:	89 d6                	mov    esi,edx
   12ef0:	89 c7                	mov    edi,eax
   12ef2:	e8 5b f6 ff ff       	call   12552 <stbi__blinn_8x8(unsigned char, unsigned char)>
   12ef7:	88 03                	mov    BYTE PTR [rbx],al
   12ef9:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12f00:	48 83 c0 03          	add    rax,0x3
   12f04:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   12f07:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   12f0d:	48 98                	cdqe   
   12f0f:	48 01 85 d0 fe ff ff 	add    QWORD PTR [rbp-0x130],rax
   12f16:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   12f1d:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12f24:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12f27:	8b 00                	mov    eax,DWORD PTR [rax]
   12f29:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   12f2f:	0f 82 16 ff ff ff    	jb     12e4b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x8c8>
   12f35:	e9 10 06 00 00       	jmp    1354a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc7>
   12f3a:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12f41:	8b 80 4c 48 00 00    	mov    eax,DWORD PTR [rax+0x484c]
   12f47:	83 f8 02             	cmp    eax,0x2
   12f4a:	0f 85 2b 01 00 00    	jne    1307b <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xaf8>
   12f50:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12f57:	4c 8b 90 78 48 00 00 	mov    r10,QWORD PTR [rax+0x4878]
   12f5e:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   12f65:	48 8b 00             	mov    rax,QWORD PTR [rax]
   12f68:	8b 00                	mov    eax,DWORD PTR [rax]
   12f6a:	41 89 c0             	mov    r8d,eax
   12f6d:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
   12f74:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
   12f7b:	8b bd c4 fe ff ff    	mov    edi,DWORD PTR [rbp-0x13c]
   12f81:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
   12f88:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12f8f:	41 89 f9             	mov    r9d,edi
   12f92:	48 89 c7             	mov    rdi,rax
   12f95:	41 ff d2             	call   r10
   12f98:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   12fa2:	e9 b7 00 00 00       	jmp    1305e <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xadb>
   12fa7:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
   12fae:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   12fb4:	48 01 d0             	add    rax,rdx
   12fb7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12fba:	88 85 b2 fe ff ff    	mov    BYTE PTR [rbp-0x14e],al
   12fc0:	0f b6 95 b2 fe ff ff 	movzx  edx,BYTE PTR [rbp-0x14e]
   12fc7:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12fce:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12fd1:	f7 d0                	not    eax
   12fd3:	0f b6 c0             	movzx  eax,al
   12fd6:	89 d6                	mov    esi,edx
   12fd8:	89 c7                	mov    edi,eax
   12fda:	e8 73 f5 ff ff       	call   12552 <stbi__blinn_8x8(unsigned char, unsigned char)>
   12fdf:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   12fe6:	88 02                	mov    BYTE PTR [rdx],al
   12fe8:	0f b6 95 b2 fe ff ff 	movzx  edx,BYTE PTR [rbp-0x14e]
   12fef:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   12ff6:	48 83 c0 01          	add    rax,0x1
   12ffa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   12ffd:	f7 d0                	not    eax
   12fff:	0f b6 c0             	movzx  eax,al
   13002:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
   13009:	48 8d 59 01          	lea    rbx,[rcx+0x1]
   1300d:	89 d6                	mov    esi,edx
   1300f:	89 c7                	mov    edi,eax
   13011:	e8 3c f5 ff ff       	call   12552 <stbi__blinn_8x8(unsigned char, unsigned char)>
   13016:	88 03                	mov    BYTE PTR [rbx],al
   13018:	0f b6 95 b2 fe ff ff 	movzx  edx,BYTE PTR [rbp-0x14e]
   1301f:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   13026:	48 83 c0 02          	add    rax,0x2
   1302a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1302d:	f7 d0                	not    eax
   1302f:	0f b6 c0             	movzx  eax,al
   13032:	48 8b 8d d0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x130]
   13039:	48 8d 59 02          	lea    rbx,[rcx+0x2]
   1303d:	89 d6                	mov    esi,edx
   1303f:	89 c7                	mov    edi,eax
   13041:	e8 0c f5 ff ff       	call   12552 <stbi__blinn_8x8(unsigned char, unsigned char)>
   13046:	88 03                	mov    BYTE PTR [rbx],al
   13048:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   1304e:	48 98                	cdqe   
   13050:	48 01 85 d0 fe ff ff 	add    QWORD PTR [rbp-0x130],rax
   13057:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   1305e:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13065:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13068:	8b 00                	mov    eax,DWORD PTR [rax]
   1306a:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   13070:	0f 82 31 ff ff ff    	jb     12fa7 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xa24>
   13076:	e9 cf 04 00 00       	jmp    1354a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc7>
   1307b:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13082:	4c 8b 90 78 48 00 00 	mov    r10,QWORD PTR [rax+0x4878]
   13089:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13090:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13093:	8b 00                	mov    eax,DWORD PTR [rax]
   13095:	41 89 c0             	mov    r8d,eax
   13098:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
   1309f:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
   130a6:	8b bd c4 fe ff ff    	mov    edi,DWORD PTR [rbp-0x13c]
   130ac:	48 8b b5 e8 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x118]
   130b3:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   130ba:	41 89 f9             	mov    r9d,edi
   130bd:	48 89 c7             	mov    rdi,rax
   130c0:	41 ff d2             	call   r10
   130c3:	e9 82 04 00 00       	jmp    1354a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc7>
   130c8:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   130d2:	eb 60                	jmp    13134 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xbb1>
   130d4:	8b 95 bc fe ff ff    	mov    edx,DWORD PTR [rbp-0x144]
   130da:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   130e1:	48 01 d0             	add    rax,rdx
   130e4:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   130eb:	48 83 c2 02          	add    rdx,0x2
   130ef:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   130f2:	88 02                	mov    BYTE PTR [rdx],al
   130f4:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   130fb:	48 83 c0 01          	add    rax,0x1
   130ff:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
   13102:	88 10                	mov    BYTE PTR [rax],dl
   13104:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   13107:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   1310e:	88 10                	mov    BYTE PTR [rax],dl
   13110:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   13117:	48 83 c0 03          	add    rax,0x3
   1311b:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   1311e:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   13124:	48 98                	cdqe   
   13126:	48 01 85 d0 fe ff ff 	add    QWORD PTR [rbp-0x130],rax
   1312d:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   13134:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1313b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1313e:	8b 00                	mov    eax,DWORD PTR [rax]
   13140:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   13146:	72 8c                	jb     130d4 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xb51>
   13148:	e9 fd 03 00 00       	jmp    1354a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc7>
   1314d:	83 bd c8 fe ff ff 00 	cmp    DWORD PTR [rbp-0x138],0x0
   13154:	0f 84 34 01 00 00    	je     1328e <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xd0b>
   1315a:	83 bd c4 fe ff ff 01 	cmp    DWORD PTR [rbp-0x13c],0x1
   13161:	0f 85 8d 00 00 00    	jne    131f4 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xc71>
   13167:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   13171:	eb 68                	jmp    131db <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xc58>
   13173:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
   1317a:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   13180:	48 01 d0             	add    rax,rdx
   13183:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13186:	0f b6 d0             	movzx  edx,al
   13189:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
   13190:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   13196:	48 01 c8             	add    rax,rcx
   13199:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1319c:	0f b6 c8             	movzx  ecx,al
   1319f:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
   131a6:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   131ac:	48 01 f0             	add    rax,rsi
   131af:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   131b2:	0f b6 c0             	movzx  eax,al
   131b5:	89 ce                	mov    esi,ecx
   131b7:	89 c7                	mov    edi,eax
   131b9:	e8 18 37 ff ff       	call   68d6 <stbi__compute_y(int, int, int)>
   131be:	89 c2                	mov    edx,eax
   131c0:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   131c7:	48 8d 48 01          	lea    rcx,[rax+0x1]
   131cb:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
   131d2:	88 10                	mov    BYTE PTR [rax],dl
   131d4:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   131db:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   131e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   131e5:	8b 00                	mov    eax,DWORD PTR [rax]
   131e7:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   131ed:	72 84                	jb     13173 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xbf0>
   131ef:	e9 56 03 00 00       	jmp    1354a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc7>
   131f4:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   131fe:	eb 71                	jmp    13271 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xcee>
   13200:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
   13207:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   1320d:	48 01 d0             	add    rax,rdx
   13210:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13213:	0f b6 d0             	movzx  edx,al
   13216:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
   1321d:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   13223:	48 01 c8             	add    rax,rcx
   13226:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13229:	0f b6 c8             	movzx  ecx,al
   1322c:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
   13233:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   13239:	48 01 f0             	add    rax,rsi
   1323c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1323f:	0f b6 c0             	movzx  eax,al
   13242:	89 ce                	mov    esi,ecx
   13244:	89 c7                	mov    edi,eax
   13246:	e8 8b 36 ff ff       	call   68d6 <stbi__compute_y(int, int, int)>
   1324b:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   13252:	88 02                	mov    BYTE PTR [rdx],al
   13254:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   1325b:	48 83 c0 01          	add    rax,0x1
   1325f:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   13262:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   13269:	48 83 85 d0 fe ff ff 02 	add    QWORD PTR [rbp-0x130],0x2
   13271:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13278:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1327b:	8b 00                	mov    eax,DWORD PTR [rax]
   1327d:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   13283:	0f 82 77 ff ff ff    	jb     13200 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xc7d>
   13289:	e9 bc 02 00 00       	jmp    1354a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc7>
   1328e:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13295:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13298:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1329b:	83 f8 04             	cmp    eax,0x4
   1329e:	0f 85 29 01 00 00    	jne    133cd <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xe4a>
   132a4:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   132ab:	8b 80 4c 48 00 00    	mov    eax,DWORD PTR [rax+0x484c]
   132b1:	85 c0                	test   eax,eax
   132b3:	0f 85 14 01 00 00    	jne    133cd <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xe4a>
   132b9:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   132c3:	e9 e8 00 00 00       	jmp    133b0 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xe2d>
   132c8:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
   132cf:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   132d5:	48 01 d0             	add    rax,rdx
   132d8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   132db:	88 85 ae fe ff ff    	mov    BYTE PTR [rbp-0x152],al
   132e1:	0f b6 95 ae fe ff ff 	movzx  edx,BYTE PTR [rbp-0x152]
   132e8:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
   132ef:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   132f5:	48 01 c8             	add    rax,rcx
   132f8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   132fb:	0f b6 c0             	movzx  eax,al
   132fe:	89 d6                	mov    esi,edx
   13300:	89 c7                	mov    edi,eax
   13302:	e8 4b f2 ff ff       	call   12552 <stbi__blinn_8x8(unsigned char, unsigned char)>
   13307:	88 85 af fe ff ff    	mov    BYTE PTR [rbp-0x151],al
   1330d:	0f b6 95 ae fe ff ff 	movzx  edx,BYTE PTR [rbp-0x152]
   13314:	48 8b 8d 08 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf8]
   1331b:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   13321:	48 01 c8             	add    rax,rcx
   13324:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13327:	0f b6 c0             	movzx  eax,al
   1332a:	89 d6                	mov    esi,edx
   1332c:	89 c7                	mov    edi,eax
   1332e:	e8 1f f2 ff ff       	call   12552 <stbi__blinn_8x8(unsigned char, unsigned char)>
   13333:	88 85 b0 fe ff ff    	mov    BYTE PTR [rbp-0x150],al
   13339:	0f b6 95 ae fe ff ff 	movzx  edx,BYTE PTR [rbp-0x152]
   13340:	48 8b 8d 10 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xf0]
   13347:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   1334d:	48 01 c8             	add    rax,rcx
   13350:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13353:	0f b6 c0             	movzx  eax,al
   13356:	89 d6                	mov    esi,edx
   13358:	89 c7                	mov    edi,eax
   1335a:	e8 f3 f1 ff ff       	call   12552 <stbi__blinn_8x8(unsigned char, unsigned char)>
   1335f:	88 85 b1 fe ff ff    	mov    BYTE PTR [rbp-0x14f],al
   13365:	0f b6 95 b1 fe ff ff 	movzx  edx,BYTE PTR [rbp-0x14f]
   1336c:	0f b6 8d b0 fe ff ff 	movzx  ecx,BYTE PTR [rbp-0x150]
   13373:	0f b6 85 af fe ff ff 	movzx  eax,BYTE PTR [rbp-0x151]
   1337a:	89 ce                	mov    esi,ecx
   1337c:	89 c7                	mov    edi,eax
   1337e:	e8 53 35 ff ff       	call   68d6 <stbi__compute_y(int, int, int)>
   13383:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   1338a:	88 02                	mov    BYTE PTR [rdx],al
   1338c:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   13393:	48 83 c0 01          	add    rax,0x1
   13397:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   1339a:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   133a0:	48 98                	cdqe   
   133a2:	48 01 85 d0 fe ff ff 	add    QWORD PTR [rbp-0x130],rax
   133a9:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   133b0:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   133b7:	48 8b 00             	mov    rax,QWORD PTR [rax]
   133ba:	8b 00                	mov    eax,DWORD PTR [rax]
   133bc:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   133c2:	0f 82 00 ff ff ff    	jb     132c8 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xd45>
   133c8:	e9 7d 01 00 00       	jmp    1354a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc7>
   133cd:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   133d4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   133d7:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   133da:	83 f8 04             	cmp    eax,0x4
   133dd:	0f 85 9f 00 00 00    	jne    13482 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xeff>
   133e3:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   133ea:	8b 80 4c 48 00 00    	mov    eax,DWORD PTR [rax+0x484c]
   133f0:	83 f8 02             	cmp    eax,0x2
   133f3:	0f 85 89 00 00 00    	jne    13482 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xeff>
   133f9:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   13403:	eb 64                	jmp    13469 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xee6>
   13405:	48 8b 95 18 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xe8]
   1340c:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   13412:	48 01 d0             	add    rax,rdx
   13415:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13418:	0f b6 d0             	movzx  edx,al
   1341b:	48 8b 8d 00 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x100]
   13422:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   13428:	48 01 c8             	add    rax,rcx
   1342b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1342e:	f7 d0                	not    eax
   13430:	0f b6 c0             	movzx  eax,al
   13433:	89 d6                	mov    esi,edx
   13435:	89 c7                	mov    edi,eax
   13437:	e8 16 f1 ff ff       	call   12552 <stbi__blinn_8x8(unsigned char, unsigned char)>
   1343c:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   13443:	88 02                	mov    BYTE PTR [rdx],al
   13445:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   1344c:	48 83 c0 01          	add    rax,0x1
   13450:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   13453:	8b 85 c4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x13c]
   13459:	48 98                	cdqe   
   1345b:	48 01 85 d0 fe ff ff 	add    QWORD PTR [rbp-0x130],rax
   13462:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   13469:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13470:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13473:	8b 00                	mov    eax,DWORD PTR [rax]
   13475:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   1347b:	72 88                	jb     13405 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xe82>
   1347d:	e9 c8 00 00 00       	jmp    1354a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc7>
   13482:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
   13489:	48 89 85 e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rax
   13490:	83 bd c4 fe ff ff 01 	cmp    DWORD PTR [rbp-0x13c],0x1
   13497:	75 4e                	jne    134e7 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xf64>
   13499:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   134a3:	eb 2c                	jmp    134d1 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xf4e>
   134a5:	8b 95 bc fe ff ff    	mov    edx,DWORD PTR [rbp-0x144]
   134ab:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
   134b2:	48 01 d0             	add    rax,rdx
   134b5:	8b 8d bc fe ff ff    	mov    ecx,DWORD PTR [rbp-0x144]
   134bb:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   134c2:	48 01 ca             	add    rdx,rcx
   134c5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   134c8:	88 02                	mov    BYTE PTR [rdx],al
   134ca:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   134d1:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   134d8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   134db:	8b 00                	mov    eax,DWORD PTR [rax]
   134dd:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   134e3:	72 c0                	jb     134a5 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xf22>
   134e5:	eb 63                	jmp    1354a <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfc7>
   134e7:	c7 85 bc fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x144],0x0
   134f1:	eb 43                	jmp    13536 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xfb3>
   134f3:	8b 95 bc fe ff ff    	mov    edx,DWORD PTR [rbp-0x144]
   134f9:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
   13500:	48 01 d0             	add    rax,rdx
   13503:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   13506:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   1350d:	48 8d 48 01          	lea    rcx,[rax+0x1]
   13511:	48 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rcx
   13518:	88 10                	mov    BYTE PTR [rax],dl
   1351a:	48 8b 85 d0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x130]
   13521:	48 8d 50 01          	lea    rdx,[rax+0x1]
   13525:	48 89 95 d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],rdx
   1352c:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   1352f:	83 85 bc fe ff ff 01 	add    DWORD PTR [rbp-0x144],0x1
   13536:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   1353d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13540:	8b 00                	mov    eax,DWORD PTR [rax]
   13542:	39 85 bc fe ff ff    	cmp    DWORD PTR [rbp-0x144],eax
   13548:	72 a9                	jb     134f3 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0xf70>
   1354a:	83 85 c0 fe ff ff 01 	add    DWORD PTR [rbp-0x140],0x1
   13551:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13558:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1355b:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1355e:	39 85 c0 fe ff ff    	cmp    DWORD PTR [rbp-0x140],eax
   13564:	0f 82 3b f5 ff ff    	jb     12aa5 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x522>
   1356a:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13571:	48 89 c7             	mov    rdi,rax
   13574:	e8 ad ef ff ff       	call   12526 <stbi__cleanup_jpeg(stbi__jpeg*)>
   13579:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13580:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13583:	8b 00                	mov    eax,DWORD PTR [rax]
   13585:	89 c2                	mov    edx,eax
   13587:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
   1358e:	89 10                	mov    DWORD PTR [rax],edx
   13590:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   13597:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1359a:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1359d:	89 c2                	mov    edx,eax
   1359f:	48 8b 85 88 fe ff ff 	mov    rax,QWORD PTR [rbp-0x178]
   135a6:	89 10                	mov    DWORD PTR [rax],edx
   135a8:	48 83 bd 80 fe ff ff 00 	cmp    QWORD PTR [rbp-0x180],0x0
   135b0:	74 27                	je     135d9 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x1056>
   135b2:	48 8b 85 98 fe ff ff 	mov    rax,QWORD PTR [rbp-0x168]
   135b9:	48 8b 00             	mov    rax,QWORD PTR [rax]
   135bc:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   135bf:	83 f8 02             	cmp    eax,0x2
   135c2:	7e 07                	jle    135cb <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x1048>
   135c4:	ba 03 00 00 00       	mov    edx,0x3
   135c9:	eb 05                	jmp    135d0 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x104d>
   135cb:	ba 01 00 00 00       	mov    edx,0x1
   135d0:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
   135d7:	89 10                	mov    DWORD PTR [rax],edx
   135d9:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   135e0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   135e4:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   135ed:	74 05                	je     135f4 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)+0x1071>
   135ef:	e8 ec 0e ff ff       	call   44e0 <__stack_chk_fail@plt>
   135f4:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   135f8:	c9                   	leave  
   135f9:	c3                   	ret    

00000000000135fa <stbi__jpeg_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   135fa:	55                   	push   rbp
   135fb:	48 89 e5             	mov    rbp,rsp
   135fe:	48 83 ec 40          	sub    rsp,0x40
   13602:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   13606:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1360a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1360e:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   13612:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
   13616:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
   1361a:	bf 88 48 00 00       	mov    edi,0x4888
   1361f:	e8 6a 15 ff ff       	call   4b8e <stbi__malloc(unsigned long)>
   13624:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   13628:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1362c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   13630:	48 89 10             	mov    QWORD PTR [rax],rdx
   13633:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   13637:	48 89 c7             	mov    rdi,rax
   1363a:	e8 5e ee ff ff       	call   1249d <stbi__setup_jpeg(stbi__jpeg*)>
   1363f:	8b 7d cc             	mov    edi,DWORD PTR [rbp-0x34]
   13642:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   13646:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   1364a:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   1364e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   13652:	41 89 f8             	mov    r8d,edi
   13655:	48 89 c7             	mov    rdi,rax
   13658:	e8 26 ef ff ff       	call   12583 <load_jpeg_image(stbi__jpeg*, int*, int*, int*, int)>
   1365d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   13661:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   13665:	48 89 c7             	mov    rdi,rax
   13668:	e8 c3 0e ff ff       	call   4530 <free@plt>
   1366d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13671:	c9                   	leave  
   13672:	c3                   	ret    

0000000000013673 <stbi__jpeg_test(stbi__context*)>:
   13673:	55                   	push   rbp
   13674:	48 89 e5             	mov    rbp,rsp
   13677:	48 83 ec 20          	sub    rsp,0x20
   1367b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1367f:	bf 88 48 00 00       	mov    edi,0x4888
   13684:	e8 05 15 ff ff       	call   4b8e <stbi__malloc(unsigned long)>
   13689:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1368d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13691:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   13695:	48 89 10             	mov    QWORD PTR [rax],rdx
   13698:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1369c:	48 89 c7             	mov    rdi,rax
   1369f:	e8 f9 ed ff ff       	call   1249d <stbi__setup_jpeg(stbi__jpeg*)>
   136a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   136a8:	be 01 00 00 00       	mov    esi,0x1
   136ad:	48 89 c7             	mov    rdi,rax
   136b0:	e8 70 c9 ff ff       	call   10025 <stbi__decode_jpeg_header(stbi__jpeg*, int)>
   136b5:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   136b8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   136bc:	48 89 c7             	mov    rdi,rax
   136bf:	e8 68 14 ff ff       	call   4b2c <stbi__rewind(stbi__context*)>
   136c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   136c8:	48 89 c7             	mov    rdi,rax
   136cb:	e8 60 0e ff ff       	call   4530 <free@plt>
   136d0:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   136d3:	c9                   	leave  
   136d4:	c3                   	ret    

00000000000136d5 <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)>:
   136d5:	55                   	push   rbp
   136d6:	48 89 e5             	mov    rbp,rsp
   136d9:	48 83 ec 20          	sub    rsp,0x20
   136dd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   136e1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   136e5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   136e9:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   136ed:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   136f1:	be 02 00 00 00       	mov    esi,0x2
   136f6:	48 89 c7             	mov    rdi,rax
   136f9:	e8 27 c9 ff ff       	call   10025 <stbi__decode_jpeg_header(stbi__jpeg*, int)>
   136fe:	85 c0                	test   eax,eax
   13700:	0f 94 c0             	sete   al
   13703:	84 c0                	test   al,al
   13705:	74 16                	je     1371d <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)+0x48>
   13707:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1370b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1370e:	48 89 c7             	mov    rdi,rax
   13711:	e8 16 14 ff ff       	call   4b2c <stbi__rewind(stbi__context*)>
   13716:	b8 00 00 00 00       	mov    eax,0x0
   1371b:	eb 5e                	jmp    1377b <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)+0xa6>
   1371d:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   13722:	74 11                	je     13735 <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)+0x60>
   13724:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13728:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1372b:	8b 00                	mov    eax,DWORD PTR [rax]
   1372d:	89 c2                	mov    edx,eax
   1372f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   13733:	89 10                	mov    DWORD PTR [rax],edx
   13735:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   1373a:	74 12                	je     1374e <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)+0x79>
   1373c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13740:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13743:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   13746:	89 c2                	mov    edx,eax
   13748:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1374c:	89 10                	mov    DWORD PTR [rax],edx
   1374e:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   13753:	74 21                	je     13776 <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)+0xa1>
   13755:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13759:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1375c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1375f:	83 f8 02             	cmp    eax,0x2
   13762:	7e 07                	jle    1376b <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)+0x96>
   13764:	ba 03 00 00 00       	mov    edx,0x3
   13769:	eb 05                	jmp    13770 <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)+0x9b>
   1376b:	ba 01 00 00 00       	mov    edx,0x1
   13770:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   13774:	89 10                	mov    DWORD PTR [rax],edx
   13776:	b8 01 00 00 00       	mov    eax,0x1
   1377b:	c9                   	leave  
   1377c:	c3                   	ret    

000000000001377d <stbi__jpeg_info(stbi__context*, int*, int*, int*)>:
   1377d:	55                   	push   rbp
   1377e:	48 89 e5             	mov    rbp,rsp
   13781:	48 83 ec 30          	sub    rsp,0x30
   13785:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   13789:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1378d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   13791:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   13795:	bf 88 48 00 00       	mov    edi,0x4888
   1379a:	e8 ef 13 ff ff       	call   4b8e <stbi__malloc(unsigned long)>
   1379f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   137a3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   137a7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   137ab:	48 89 10             	mov    QWORD PTR [rax],rdx
   137ae:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   137b2:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   137b6:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   137ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   137be:	48 89 c7             	mov    rdi,rax
   137c1:	e8 0f ff ff ff       	call   136d5 <stbi__jpeg_info_raw(stbi__jpeg*, int*, int*, int*)>
   137c6:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   137c9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   137cd:	48 89 c7             	mov    rdi,rax
   137d0:	e8 5b 0d ff ff       	call   4530 <free@plt>
   137d5:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   137d8:	c9                   	leave  
   137d9:	c3                   	ret    

00000000000137da <stbi__bitreverse16(int)>:
   137da:	55                   	push   rbp
   137db:	48 89 e5             	mov    rbp,rsp
   137de:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   137e1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   137e4:	d1 f8                	sar    eax,1
   137e6:	25 55 55 00 00       	and    eax,0x5555
   137eb:	89 c2                	mov    edx,eax
   137ed:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   137f0:	01 c0                	add    eax,eax
   137f2:	25 aa aa 00 00       	and    eax,0xaaaa
   137f7:	09 d0                	or     eax,edx
   137f9:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   137fc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   137ff:	c1 f8 02             	sar    eax,0x2
   13802:	25 33 33 00 00       	and    eax,0x3333
   13807:	89 c2                	mov    edx,eax
   13809:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1380c:	c1 e0 02             	shl    eax,0x2
   1380f:	25 cc cc 00 00       	and    eax,0xcccc
   13814:	09 d0                	or     eax,edx
   13816:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   13819:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1381c:	c1 f8 04             	sar    eax,0x4
   1381f:	25 0f 0f 00 00       	and    eax,0xf0f
   13824:	89 c2                	mov    edx,eax
   13826:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13829:	c1 e0 04             	shl    eax,0x4
   1382c:	25 f0 f0 00 00       	and    eax,0xf0f0
   13831:	09 d0                	or     eax,edx
   13833:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   13836:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13839:	c1 f8 08             	sar    eax,0x8
   1383c:	0f b6 d0             	movzx  edx,al
   1383f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13842:	c1 e0 08             	shl    eax,0x8
   13845:	0f b7 c0             	movzx  eax,ax
   13848:	09 d0                	or     eax,edx
   1384a:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1384d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13850:	5d                   	pop    rbp
   13851:	c3                   	ret    

0000000000013852 <stbi__bit_reverse(int, int)>:
   13852:	55                   	push   rbp
   13853:	48 89 e5             	mov    rbp,rsp
   13856:	48 83 ec 10          	sub    rsp,0x10
   1385a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   1385d:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   13860:	83 7d f8 10          	cmp    DWORD PTR [rbp-0x8],0x10
   13864:	7e 28                	jle    1388e <stbi__bit_reverse(int, int)+0x3c>
   13866:	48 8d 05 23 6e 02 00 	lea    rax,[rip+0x26e23]        # 3a690 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x9e>
   1386d:	48 89 c1             	mov    rcx,rax
   13870:	ba 7b 0f 00 00       	mov    edx,0xf7b
   13875:	48 8d 05 1c 68 02 00 	lea    rax,[rip+0x2681c]        # 3a098 <_IO_stdin_used+0x98>
   1387c:	48 89 c6             	mov    rsi,rax
   1387f:	48 8d 05 2a 6e 02 00 	lea    rax,[rip+0x26e2a]        # 3a6b0 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xbe>
   13886:	48 89 c7             	mov    rdi,rax
   13889:	e8 f2 09 ff ff       	call   4280 <__assert_fail@plt>
   1388e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13891:	89 c7                	mov    edi,eax
   13893:	e8 42 ff ff ff       	call   137da <stbi__bitreverse16(int)>
   13898:	89 c2                	mov    edx,eax
   1389a:	b8 10 00 00 00       	mov    eax,0x10
   1389f:	2b 45 f8             	sub    eax,DWORD PTR [rbp-0x8]
   138a2:	89 c1                	mov    ecx,eax
   138a4:	d3 fa                	sar    edx,cl
   138a6:	89 d0                	mov    eax,edx
   138a8:	c9                   	leave  
   138a9:	c3                   	ret    

00000000000138aa <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)>:
   138aa:	55                   	push   rbp
   138ab:	48 89 e5             	mov    rbp,rsp
   138ae:	48 81 ec d0 00 00 00 	sub    rsp,0xd0
   138b5:	48 89 bd 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdi
   138bc:	48 89 b5 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rsi
   138c3:	89 95 3c ff ff ff    	mov    DWORD PTR [rbp-0xc4],edx
   138c9:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   138d2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   138d6:	31 c0                	xor    eax,eax
   138d8:	c7 85 5c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa4],0x0
   138e2:	48 8d 45 b0          	lea    rax,[rbp-0x50]
   138e6:	ba 44 00 00 00       	mov    edx,0x44
   138eb:	be 00 00 00 00       	mov    esi,0x0
   138f0:	48 89 c7             	mov    rdi,rax
   138f3:	e8 e8 08 ff ff       	call   41e0 <memset@plt>
   138f8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   138ff:	ba 00 04 00 00       	mov    edx,0x400
   13904:	be 00 00 00 00       	mov    esi,0x0
   13909:	48 89 c7             	mov    rdi,rax
   1390c:	e8 cf 08 ff ff       	call   41e0 <memset@plt>
   13911:	c7 85 58 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa8],0x0
   1391b:	eb 30                	jmp    1394d <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0xa3>
   1391d:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13923:	48 63 d0             	movsxd rdx,eax
   13926:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
   1392d:	48 01 d0             	add    rax,rdx
   13930:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13933:	0f b6 c0             	movzx  eax,al
   13936:	48 63 d0             	movsxd rdx,eax
   13939:	8b 54 95 b0          	mov    edx,DWORD PTR [rbp+rdx*4-0x50]
   1393d:	83 c2 01             	add    edx,0x1
   13940:	48 98                	cdqe   
   13942:	89 54 85 b0          	mov    DWORD PTR [rbp+rax*4-0x50],edx
   13946:	83 85 58 ff ff ff 01 	add    DWORD PTR [rbp-0xa8],0x1
   1394d:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13953:	3b 85 3c ff ff ff    	cmp    eax,DWORD PTR [rbp-0xc4]
   13959:	7c c2                	jl     1391d <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x73>
   1395b:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   13962:	c7 85 58 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xa8],0x1
   1396c:	eb 3c                	jmp    139aa <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x100>
   1396e:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13974:	48 98                	cdqe   
   13976:	8b 54 85 b0          	mov    edx,DWORD PTR [rbp+rax*4-0x50]
   1397a:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13980:	be 01 00 00 00       	mov    esi,0x1
   13985:	89 c1                	mov    ecx,eax
   13987:	d3 e6                	shl    esi,cl
   13989:	89 f0                	mov    eax,esi
   1398b:	39 c2                	cmp    edx,eax
   1398d:	7e 14                	jle    139a3 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0xf9>
   1398f:	48 8d 05 25 6d 02 00 	lea    rax,[rip+0x26d25]        # 3a6bb <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xc9>
   13996:	48 89 c7             	mov    rdi,rax
   13999:	e8 d4 11 ff ff       	call   4b72 <stbi__err(char const*)>
   1399e:	e9 dd 02 00 00       	jmp    13c80 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x3d6>
   139a3:	83 85 58 ff ff ff 01 	add    DWORD PTR [rbp-0xa8],0x1
   139aa:	83 bd 58 ff ff ff 0f 	cmp    DWORD PTR [rbp-0xa8],0xf
   139b1:	7e bb                	jle    1396e <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0xc4>
   139b3:	c7 85 60 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa0],0x0
   139bd:	c7 85 58 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xa8],0x1
   139c7:	e9 fb 00 00 00       	jmp    13ac7 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x21d>
   139cc:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   139d2:	48 98                	cdqe   
   139d4:	8b 95 60 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa0]
   139da:	89 94 85 70 ff ff ff 	mov    DWORD PTR [rbp+rax*4-0x90],edx
   139e1:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa0]
   139e7:	89 c1                	mov    ecx,eax
   139e9:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   139f0:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   139f6:	48 63 d2             	movsxd rdx,edx
   139f9:	48 81 c2 00 02 00 00 	add    rdx,0x200
   13a00:	66 89 0c 50          	mov    WORD PTR [rax+rdx*2],cx
   13a04:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   13a0a:	89 c1                	mov    ecx,eax
   13a0c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13a13:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   13a19:	48 63 d2             	movsxd rdx,edx
   13a1c:	48 81 c2 30 02 00 00 	add    rdx,0x230
   13a23:	66 89 4c 50 04       	mov    WORD PTR [rax+rdx*2+0x4],cx
   13a28:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13a2e:	48 98                	cdqe   
   13a30:	8b 44 85 b0          	mov    eax,DWORD PTR [rbp+rax*4-0x50]
   13a34:	01 85 60 ff ff ff    	add    DWORD PTR [rbp-0xa0],eax
   13a3a:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13a40:	48 98                	cdqe   
   13a42:	8b 44 85 b0          	mov    eax,DWORD PTR [rbp+rax*4-0x50]
   13a46:	85 c0                	test   eax,eax
   13a48:	74 2d                	je     13a77 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x1cd>
   13a4a:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13a50:	ba 01 00 00 00       	mov    edx,0x1
   13a55:	89 c1                	mov    ecx,eax
   13a57:	d3 e2                	shl    edx,cl
   13a59:	89 d0                	mov    eax,edx
   13a5b:	39 85 60 ff ff ff    	cmp    DWORD PTR [rbp-0xa0],eax
   13a61:	7e 14                	jle    13a77 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x1cd>
   13a63:	48 8d 05 5b 6c 02 00 	lea    rax,[rip+0x26c5b]        # 3a6c5 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xd3>
   13a6a:	48 89 c7             	mov    rdi,rax
   13a6d:	e8 00 11 ff ff       	call   4b72 <stbi__err(char const*)>
   13a72:	e9 09 02 00 00       	jmp    13c80 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x3d6>
   13a77:	b8 10 00 00 00       	mov    eax,0x10
   13a7c:	2b 85 58 ff ff ff    	sub    eax,DWORD PTR [rbp-0xa8]
   13a82:	8b 95 60 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa0]
   13a88:	89 c1                	mov    ecx,eax
   13a8a:	d3 e2                	shl    edx,cl
   13a8c:	89 d1                	mov    ecx,edx
   13a8e:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13a95:	8b 95 58 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa8]
   13a9b:	48 63 d2             	movsxd rdx,edx
   13a9e:	48 81 c2 08 01 00 00 	add    rdx,0x108
   13aa5:	89 0c 90             	mov    DWORD PTR [rax+rdx*4],ecx
   13aa8:	d1 a5 60 ff ff ff    	shl    DWORD PTR [rbp-0xa0],1
   13aae:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13ab4:	48 98                	cdqe   
   13ab6:	8b 44 85 b0          	mov    eax,DWORD PTR [rbp+rax*4-0x50]
   13aba:	01 85 5c ff ff ff    	add    DWORD PTR [rbp-0xa4],eax
   13ac0:	83 85 58 ff ff ff 01 	add    DWORD PTR [rbp-0xa8],0x1
   13ac7:	83 bd 58 ff ff ff 0f 	cmp    DWORD PTR [rbp-0xa8],0xf
   13ace:	0f 8e f8 fe ff ff    	jle    139cc <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x122>
   13ad4:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13adb:	c7 80 60 04 00 00 00 00 01 00 	mov    DWORD PTR [rax+0x460],0x10000
   13ae5:	c7 85 58 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa8],0x0
   13aef:	e9 75 01 00 00       	jmp    13c69 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x3bf>
   13af4:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13afa:	48 63 d0             	movsxd rdx,eax
   13afd:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
   13b04:	48 01 d0             	add    rax,rdx
   13b07:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13b0a:	0f b6 c0             	movzx  eax,al
   13b0d:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   13b13:	83 bd 68 ff ff ff 00 	cmp    DWORD PTR [rbp-0x98],0x0
   13b1a:	0f 84 42 01 00 00    	je     13c62 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x3b8>
   13b20:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13b26:	48 98                	cdqe   
   13b28:	8b 94 85 70 ff ff ff 	mov    edx,DWORD PTR [rbp+rax*4-0x90]
   13b2f:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13b36:	8b 8d 68 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x98]
   13b3c:	48 63 c9             	movsxd rcx,ecx
   13b3f:	48 81 c1 00 02 00 00 	add    rcx,0x200
   13b46:	0f b7 04 48          	movzx  eax,WORD PTR [rax+rcx*2]
   13b4a:	0f b7 c0             	movzx  eax,ax
   13b4d:	89 d1                	mov    ecx,edx
   13b4f:	29 c1                	sub    ecx,eax
   13b51:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13b58:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   13b5e:	48 63 d2             	movsxd rdx,edx
   13b61:	48 81 c2 30 02 00 00 	add    rdx,0x230
   13b68:	0f b7 44 50 04       	movzx  eax,WORD PTR [rax+rdx*2+0x4]
   13b6d:	0f b7 c0             	movzx  eax,ax
   13b70:	01 c8                	add    eax,ecx
   13b72:	89 85 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],eax
   13b78:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13b7e:	c1 e0 09             	shl    eax,0x9
   13b81:	89 c2                	mov    edx,eax
   13b83:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13b89:	09 d0                	or     eax,edx
   13b8b:	66 89 85 56 ff ff ff 	mov    WORD PTR [rbp-0xaa],ax
   13b92:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13b98:	89 c1                	mov    ecx,eax
   13b9a:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
   13ba1:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
   13ba7:	48 98                	cdqe   
   13ba9:	88 8c 02 84 04 00 00 	mov    BYTE PTR [rdx+rax*1+0x484],cl
   13bb0:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13bb6:	89 c1                	mov    ecx,eax
   13bb8:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13bbf:	8b 95 6c ff ff ff    	mov    edx,DWORD PTR [rbp-0x94]
   13bc5:	48 63 d2             	movsxd rdx,edx
   13bc8:	48 81 c2 d0 02 00 00 	add    rdx,0x2d0
   13bcf:	66 89 4c 50 04       	mov    WORD PTR [rax+rdx*2+0x4],cx
   13bd4:	83 bd 68 ff ff ff 09 	cmp    DWORD PTR [rbp-0x98],0x9
   13bdb:	7f 64                	jg     13c41 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x397>
   13bdd:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13be3:	48 98                	cdqe   
   13be5:	8b 84 85 70 ff ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x90]
   13bec:	8b 95 68 ff ff ff    	mov    edx,DWORD PTR [rbp-0x98]
   13bf2:	89 d6                	mov    esi,edx
   13bf4:	89 c7                	mov    edi,eax
   13bf6:	e8 57 fc ff ff       	call   13852 <stbi__bit_reverse(int, int)>
   13bfb:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   13c01:	eb 32                	jmp    13c35 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x38b>
   13c03:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   13c0a:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   13c10:	48 63 d2             	movsxd rdx,edx
   13c13:	0f b7 8d 56 ff ff ff 	movzx  ecx,WORD PTR [rbp-0xaa]
   13c1a:	66 89 0c 50          	mov    WORD PTR [rax+rdx*2],cx
   13c1e:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13c24:	ba 01 00 00 00       	mov    edx,0x1
   13c29:	89 c1                	mov    ecx,eax
   13c2b:	d3 e2                	shl    edx,cl
   13c2d:	89 d0                	mov    eax,edx
   13c2f:	01 85 64 ff ff ff    	add    DWORD PTR [rbp-0x9c],eax
   13c35:	81 bd 64 ff ff ff ff 01 00 00 	cmp    DWORD PTR [rbp-0x9c],0x1ff
   13c3f:	7e c2                	jle    13c03 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x359>
   13c41:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13c47:	48 98                	cdqe   
   13c49:	8b 84 85 70 ff ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x90]
   13c50:	8d 50 01             	lea    edx,[rax+0x1]
   13c53:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [rbp-0x98]
   13c59:	48 98                	cdqe   
   13c5b:	89 94 85 70 ff ff ff 	mov    DWORD PTR [rbp+rax*4-0x90],edx
   13c62:	83 85 58 ff ff ff 01 	add    DWORD PTR [rbp-0xa8],0x1
   13c69:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   13c6f:	3b 85 3c ff ff ff    	cmp    eax,DWORD PTR [rbp-0xc4]
   13c75:	0f 8c 79 fe ff ff    	jl     13af4 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x24a>
   13c7b:	b8 01 00 00 00       	mov    eax,0x1
   13c80:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   13c84:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   13c8d:	74 05                	je     13c94 <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)+0x3ea>
   13c8f:	e8 4c 08 ff ff       	call   44e0 <__stack_chk_fail@plt>
   13c94:	c9                   	leave  
   13c95:	c3                   	ret    

0000000000013c96 <stbi__zget8(stbi__zbuf*)>:
   13c96:	55                   	push   rbp
   13c97:	48 89 e5             	mov    rbp,rsp
   13c9a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   13c9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13ca2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   13ca5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13ca9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   13cad:	48 39 c2             	cmp    rdx,rax
   13cb0:	72 07                	jb     13cb9 <stbi__zget8(stbi__zbuf*)+0x23>
   13cb2:	b8 00 00 00 00       	mov    eax,0x0
   13cb7:	eb 15                	jmp    13cce <stbi__zget8(stbi__zbuf*)+0x38>
   13cb9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13cbd:	48 8b 00             	mov    rax,QWORD PTR [rax]
   13cc0:	48 8d 48 01          	lea    rcx,[rax+0x1]
   13cc4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   13cc8:	48 89 0a             	mov    QWORD PTR [rdx],rcx
   13ccb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   13cce:	5d                   	pop    rbp
   13ccf:	c3                   	ret    

0000000000013cd0 <stbi__fill_bits(stbi__zbuf*)>:
   13cd0:	55                   	push   rbp
   13cd1:	48 89 e5             	mov    rbp,rsp
   13cd4:	48 83 ec 10          	sub    rsp,0x10
   13cd8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   13cdc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13ce0:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
   13ce3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13ce7:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13cea:	89 c1                	mov    ecx,eax
   13cec:	d3 ea                	shr    edx,cl
   13cee:	89 d0                	mov    eax,edx
   13cf0:	85 c0                	test   eax,eax
   13cf2:	74 28                	je     13d1c <stbi__fill_bits(stbi__zbuf*)+0x4c>
   13cf4:	48 8d 05 dd 69 02 00 	lea    rax,[rip+0x269dd]        # 3a6d8 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xe6>
   13cfb:	48 89 c1             	mov    rcx,rax
   13cfe:	ba cd 0f 00 00       	mov    edx,0xfcd
   13d03:	48 8d 05 8e 63 02 00 	lea    rax,[rip+0x2638e]        # 3a098 <_IO_stdin_used+0x98>
   13d0a:	48 89 c6             	mov    rsi,rax
   13d0d:	48 8d 05 ec 69 02 00 	lea    rax,[rip+0x269ec]        # 3a700 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x10e>
   13d14:	48 89 c7             	mov    rdi,rax
   13d17:	e8 64 05 ff ff       	call   4280 <__assert_fail@plt>
   13d1c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13d20:	48 89 c7             	mov    rdi,rax
   13d23:	e8 6e ff ff ff       	call   13c96 <stbi__zget8(stbi__zbuf*)>
   13d28:	0f b6 d0             	movzx  edx,al
   13d2b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13d2f:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13d32:	89 c1                	mov    ecx,eax
   13d34:	d3 e2                	shl    edx,cl
   13d36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13d3a:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   13d3d:	09 c2                	or     edx,eax
   13d3f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13d43:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   13d46:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13d4a:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13d4d:	8d 50 08             	lea    edx,[rax+0x8]
   13d50:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13d54:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   13d57:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   13d5b:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13d5e:	83 f8 18             	cmp    eax,0x18
   13d61:	0f 8e 75 ff ff ff    	jle    13cdc <stbi__fill_bits(stbi__zbuf*)+0xc>
   13d67:	90                   	nop
   13d68:	90                   	nop
   13d69:	c9                   	leave  
   13d6a:	c3                   	ret    

0000000000013d6b <stbi__zreceive(stbi__zbuf*, int)>:
   13d6b:	55                   	push   rbp
   13d6c:	48 89 e5             	mov    rbp,rsp
   13d6f:	48 83 ec 20          	sub    rsp,0x20
   13d73:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   13d77:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   13d7a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13d7e:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13d81:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
   13d84:	7e 0c                	jle    13d92 <stbi__zreceive(stbi__zbuf*, int)+0x27>
   13d86:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13d8a:	48 89 c7             	mov    rdi,rax
   13d8d:	e8 3e ff ff ff       	call   13cd0 <stbi__fill_bits(stbi__zbuf*)>
   13d92:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13d96:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
   13d99:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   13d9c:	be 01 00 00 00       	mov    esi,0x1
   13da1:	89 c1                	mov    ecx,eax
   13da3:	d3 e6                	shl    esi,cl
   13da5:	89 f0                	mov    eax,esi
   13da7:	83 e8 01             	sub    eax,0x1
   13daa:	21 d0                	and    eax,edx
   13dac:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   13daf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13db3:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
   13db6:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   13db9:	89 c1                	mov    ecx,eax
   13dbb:	d3 ea                	shr    edx,cl
   13dbd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13dc1:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   13dc4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13dc8:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13dcb:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
   13dce:	89 c2                	mov    edx,eax
   13dd0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13dd4:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   13dd7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13dda:	c9                   	leave  
   13ddb:	c3                   	ret    

0000000000013ddc <stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)>:
   13ddc:	55                   	push   rbp
   13ddd:	48 89 e5             	mov    rbp,rsp
   13de0:	48 83 ec 20          	sub    rsp,0x20
   13de4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   13de8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   13dec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13df0:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   13df3:	be 10 00 00 00       	mov    esi,0x10
   13df8:	89 c7                	mov    edi,eax
   13dfa:	e8 53 fa ff ff       	call   13852 <stbi__bit_reverse(int, int)>
   13dff:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   13e02:	c7 45 f4 0a 00 00 00 	mov    DWORD PTR [rbp-0xc],0xa
   13e09:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   13e0d:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   13e10:	48 63 d2             	movsxd rdx,edx
   13e13:	48 81 c2 08 01 00 00 	add    rdx,0x108
   13e1a:	8b 04 90             	mov    eax,DWORD PTR [rax+rdx*4]
   13e1d:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
   13e20:	7c 06                	jl     13e28 <stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)+0x4c>
   13e22:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   13e26:	eb e1                	jmp    13e09 <stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)+0x2d>
   13e28:	90                   	nop
   13e29:	83 7d f4 10          	cmp    DWORD PTR [rbp-0xc],0x10
   13e2d:	75 0a                	jne    13e39 <stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)+0x5d>
   13e2f:	b8 ff ff ff ff       	mov    eax,0xffffffff
   13e34:	e9 cb 00 00 00       	jmp    13f04 <stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)+0x128>
   13e39:	b8 10 00 00 00       	mov    eax,0x10
   13e3e:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
   13e41:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   13e44:	89 c1                	mov    ecx,eax
   13e46:	d3 fa                	sar    edx,cl
   13e48:	89 d1                	mov    ecx,edx
   13e4a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   13e4e:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   13e51:	48 63 d2             	movsxd rdx,edx
   13e54:	48 81 c2 00 02 00 00 	add    rdx,0x200
   13e5b:	0f b7 04 50          	movzx  eax,WORD PTR [rax+rdx*2]
   13e5f:	0f b7 c0             	movzx  eax,ax
   13e62:	29 c1                	sub    ecx,eax
   13e64:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   13e68:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   13e6b:	48 63 d2             	movsxd rdx,edx
   13e6e:	48 81 c2 30 02 00 00 	add    rdx,0x230
   13e75:	0f b7 44 50 04       	movzx  eax,WORD PTR [rax+rdx*2+0x4]
   13e7a:	0f b7 c0             	movzx  eax,ax
   13e7d:	01 c8                	add    eax,ecx
   13e7f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   13e82:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   13e86:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13e89:	48 98                	cdqe   
   13e8b:	0f b6 84 02 84 04 00 00 	movzx  eax,BYTE PTR [rdx+rax*1+0x484]
   13e93:	0f b6 c0             	movzx  eax,al
   13e96:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   13e99:	74 28                	je     13ec3 <stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)+0xe7>
   13e9b:	48 8d 05 86 68 02 00 	lea    rax,[rip+0x26886]        # 3a728 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x136>
   13ea2:	48 89 c1             	mov    rcx,rax
   13ea5:	ba e9 0f 00 00       	mov    edx,0xfe9
   13eaa:	48 8d 05 e7 61 02 00 	lea    rax,[rip+0x261e7]        # 3a098 <_IO_stdin_used+0x98>
   13eb1:	48 89 c6             	mov    rsi,rax
   13eb4:	48 8d 05 ae 68 02 00 	lea    rax,[rip+0x268ae]        # 3a769 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x177>
   13ebb:	48 89 c7             	mov    rdi,rax
   13ebe:	e8 bd 03 ff ff       	call   4280 <__assert_fail@plt>
   13ec3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13ec7:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
   13eca:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   13ecd:	89 c1                	mov    ecx,eax
   13ecf:	d3 ea                	shr    edx,cl
   13ed1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13ed5:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   13ed8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13edc:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13edf:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
   13ee2:	89 c2                	mov    edx,eax
   13ee4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13ee8:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   13eeb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   13eef:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   13ef2:	48 63 d2             	movsxd rdx,edx
   13ef5:	48 81 c2 d0 02 00 00 	add    rdx,0x2d0
   13efc:	0f b7 44 50 04       	movzx  eax,WORD PTR [rax+rdx*2+0x4]
   13f01:	0f b7 c0             	movzx  eax,ax
   13f04:	c9                   	leave  
   13f05:	c3                   	ret    

0000000000013f06 <stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*)>:
   13f06:	55                   	push   rbp
   13f07:	48 89 e5             	mov    rbp,rsp
   13f0a:	48 83 ec 20          	sub    rsp,0x20
   13f0e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   13f12:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   13f16:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13f1a:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13f1d:	83 f8 0f             	cmp    eax,0xf
   13f20:	7f 0c                	jg     13f2e <stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*)+0x28>
   13f22:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13f26:	48 89 c7             	mov    rdi,rax
   13f29:	e8 a2 fd ff ff       	call   13cd0 <stbi__fill_bits(stbi__zbuf*)>
   13f2e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13f32:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   13f35:	25 ff 01 00 00       	and    eax,0x1ff
   13f3a:	89 c2                	mov    edx,eax
   13f3c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   13f40:	89 d2                	mov    edx,edx
   13f42:	0f b7 04 50          	movzx  eax,WORD PTR [rax+rdx*2]
   13f46:	0f b7 c0             	movzx  eax,ax
   13f49:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   13f4c:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   13f50:	74 3b                	je     13f8d <stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*)+0x87>
   13f52:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   13f55:	c1 f8 09             	sar    eax,0x9
   13f58:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   13f5b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13f5f:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
   13f62:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   13f65:	89 c1                	mov    ecx,eax
   13f67:	d3 ea                	shr    edx,cl
   13f69:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13f6d:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   13f70:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13f74:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   13f77:	2b 45 fc             	sub    eax,DWORD PTR [rbp-0x4]
   13f7a:	89 c2                	mov    edx,eax
   13f7c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13f80:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   13f83:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   13f86:	25 ff 01 00 00       	and    eax,0x1ff
   13f8b:	eb 14                	jmp    13fa1 <stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*)+0x9b>
   13f8d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   13f91:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   13f95:	48 89 d6             	mov    rsi,rdx
   13f98:	48 89 c7             	mov    rdi,rax
   13f9b:	e8 3c fe ff ff       	call   13ddc <stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)>
   13fa0:	90                   	nop
   13fa1:	c9                   	leave  
   13fa2:	c3                   	ret    

0000000000013fa3 <stbi__zexpand(stbi__zbuf*, char*, int)>:
   13fa3:	55                   	push   rbp
   13fa4:	48 89 e5             	mov    rbp,rsp
   13fa7:	48 83 ec 40          	sub    rsp,0x40
   13fab:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   13faf:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   13fb3:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
   13fb6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13fba:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   13fbe:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   13fc2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13fc6:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
   13fc9:	85 c0                	test   eax,eax
   13fcb:	75 14                	jne    13fe1 <stbi__zexpand(stbi__zbuf*, char*, int)+0x3e>
   13fcd:	48 8d 05 a5 67 02 00 	lea    rax,[rip+0x267a5]        # 3a779 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x187>
   13fd4:	48 89 c7             	mov    rdi,rax
   13fd7:	e8 96 0b ff ff       	call   4b72 <stbi__err(char const*)>
   13fdc:	e9 ba 00 00 00       	jmp    1409b <stbi__zexpand(stbi__zbuf*, char*, int)+0xf8>
   13fe1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13fe5:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   13fe9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13fed:	48 8b 48 20          	mov    rcx,QWORD PTR [rax+0x20]
   13ff1:	48 89 d0             	mov    rax,rdx
   13ff4:	48 29 c8             	sub    rax,rcx
   13ff7:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   13ffa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   13ffe:	48 8b 50 28          	mov    rdx,QWORD PTR [rax+0x28]
   14002:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14006:	48 8b 48 20          	mov    rcx,QWORD PTR [rax+0x20]
   1400a:	48 89 d0             	mov    rax,rdx
   1400d:	48 29 c8             	sub    rax,rcx
   14010:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   14013:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   14016:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   14019:	eb 03                	jmp    1401e <stbi__zexpand(stbi__zbuf*, char*, int)+0x7b>
   1401b:	d1 65 ec             	shl    DWORD PTR [rbp-0x14],1
   1401e:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   14021:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   14024:	01 d0                	add    eax,edx
   14026:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
   14029:	7c f0                	jl     1401b <stbi__zexpand(stbi__zbuf*, char*, int)+0x78>
   1402b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1402e:	48 63 d0             	movsxd rdx,eax
   14031:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14035:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
   14039:	48 89 d6             	mov    rsi,rdx
   1403c:	48 89 c7             	mov    rdi,rax
   1403f:	e8 dc 06 ff ff       	call   4720 <realloc@plt>
   14044:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   14048:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1404d:	75 11                	jne    14060 <stbi__zexpand(stbi__zbuf*, char*, int)+0xbd>
   1404f:	48 8d 05 dd 5f 02 00 	lea    rax,[rip+0x25fdd]        # 3a033 <_IO_stdin_used+0x33>
   14056:	48 89 c7             	mov    rdi,rax
   14059:	e8 14 0b ff ff       	call   4b72 <stbi__err(char const*)>
   1405e:	eb 3b                	jmp    1409b <stbi__zexpand(stbi__zbuf*, char*, int)+0xf8>
   14060:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14064:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   14068:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
   1406c:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1406f:	48 63 d0             	movsxd rdx,eax
   14072:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   14076:	48 01 c2             	add    rdx,rax
   14079:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1407d:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   14081:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14084:	48 63 d0             	movsxd rdx,eax
   14087:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1408b:	48 01 c2             	add    rdx,rax
   1408e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14092:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
   14096:	b8 01 00 00 00       	mov    eax,0x1
   1409b:	c9                   	leave  
   1409c:	c3                   	ret    

000000000001409d <stbi__parse_huffman_block(stbi__zbuf*)>:
   1409d:	55                   	push   rbp
   1409e:	48 89 e5             	mov    rbp,rsp
   140a1:	48 83 ec 30          	sub    rsp,0x30
   140a5:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   140a9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   140ad:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   140b1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   140b5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   140b9:	48 8d 50 34          	lea    rdx,[rax+0x34]
   140bd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   140c1:	48 89 d6             	mov    rsi,rdx
   140c4:	48 89 c7             	mov    rdi,rax
   140c7:	e8 3a fe ff ff       	call   13f06 <stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*)>
   140cc:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   140cf:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
   140d6:	7f 77                	jg     1414f <stbi__parse_huffman_block(stbi__zbuf*)+0xb2>
   140d8:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
   140dc:	79 14                	jns    140f2 <stbi__parse_huffman_block(stbi__zbuf*)+0x55>
   140de:	48 8d 05 2a 64 02 00 	lea    rax,[rip+0x2642a]        # 3a50f <stbi__jpeg_dezigzag+0x4f>
   140e5:	48 89 c7             	mov    rdi,rax
   140e8:	e8 85 0a ff ff       	call   4b72 <stbi__err(char const*)>
   140ed:	e9 90 02 00 00       	jmp    14382 <stbi__parse_huffman_block(stbi__zbuf*)+0x2e5>
   140f2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   140f6:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
   140fa:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   140fe:	72 37                	jb     14137 <stbi__parse_huffman_block(stbi__zbuf*)+0x9a>
   14100:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   14104:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14108:	ba 01 00 00 00       	mov    edx,0x1
   1410d:	48 89 ce             	mov    rsi,rcx
   14110:	48 89 c7             	mov    rdi,rax
   14113:	e8 8b fe ff ff       	call   13fa3 <stbi__zexpand(stbi__zbuf*, char*, int)>
   14118:	85 c0                	test   eax,eax
   1411a:	0f 94 c0             	sete   al
   1411d:	84 c0                	test   al,al
   1411f:	74 0a                	je     1412b <stbi__parse_huffman_block(stbi__zbuf*)+0x8e>
   14121:	b8 00 00 00 00       	mov    eax,0x0
   14126:	e9 57 02 00 00       	jmp    14382 <stbi__parse_huffman_block(stbi__zbuf*)+0x2e5>
   1412b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1412f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   14133:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   14137:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1413a:	89 c1                	mov    ecx,eax
   1413c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   14140:	48 8d 50 01          	lea    rdx,[rax+0x1]
   14144:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
   14148:	88 08                	mov    BYTE PTR [rax],cl
   1414a:	e9 66 ff ff ff       	jmp    140b5 <stbi__parse_huffman_block(stbi__zbuf*)+0x18>
   1414f:	81 7d ec 00 01 00 00 	cmp    DWORD PTR [rbp-0x14],0x100
   14156:	75 16                	jne    1416e <stbi__parse_huffman_block(stbi__zbuf*)+0xd1>
   14158:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1415c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   14160:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   14164:	b8 01 00 00 00       	mov    eax,0x1
   14169:	e9 14 02 00 00       	jmp    14382 <stbi__parse_huffman_block(stbi__zbuf*)+0x2e5>
   1416e:	81 6d ec 01 01 00 00 	sub    DWORD PTR [rbp-0x14],0x101
   14175:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14178:	48 98                	cdqe   
   1417a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14182:	48 8d 05 17 66 02 00 	lea    rax,[rip+0x26617]        # 3a7a0 <stbi__zlength_base>
   14189:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1418c:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   1418f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14192:	48 98                	cdqe   
   14194:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1419c:	48 8d 05 7d 66 02 00 	lea    rax,[rip+0x2667d]        # 3a820 <stbi__zlength_extra>
   141a3:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   141a6:	85 c0                	test   eax,eax
   141a8:	74 2d                	je     141d7 <stbi__parse_huffman_block(stbi__zbuf*)+0x13a>
   141aa:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   141ad:	48 98                	cdqe   
   141af:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   141b7:	48 8d 05 62 66 02 00 	lea    rax,[rip+0x26662]        # 3a820 <stbi__zlength_extra>
   141be:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   141c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   141c5:	89 d6                	mov    esi,edx
   141c7:	48 89 c7             	mov    rdi,rax
   141ca:	e8 9c fb ff ff       	call   13d6b <stbi__zreceive(stbi__zbuf*, int)>
   141cf:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   141d2:	01 d0                	add    eax,edx
   141d4:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   141d7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   141db:	48 8d 90 18 08 00 00 	lea    rdx,[rax+0x818]
   141e2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   141e6:	48 89 d6             	mov    rsi,rdx
   141e9:	48 89 c7             	mov    rdi,rax
   141ec:	e8 15 fd ff ff       	call   13f06 <stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*)>
   141f1:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   141f4:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
   141f8:	79 14                	jns    1420e <stbi__parse_huffman_block(stbi__zbuf*)+0x171>
   141fa:	48 8d 05 0e 63 02 00 	lea    rax,[rip+0x2630e]        # 3a50f <stbi__jpeg_dezigzag+0x4f>
   14201:	48 89 c7             	mov    rdi,rax
   14204:	e8 69 09 ff ff       	call   4b72 <stbi__err(char const*)>
   14209:	e9 74 01 00 00       	jmp    14382 <stbi__parse_huffman_block(stbi__zbuf*)+0x2e5>
   1420e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14211:	48 98                	cdqe   
   14213:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1421b:	48 8d 05 7e 66 02 00 	lea    rax,[rip+0x2667e]        # 3a8a0 <stbi__zdist_base>
   14222:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   14225:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   14228:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1422b:	48 98                	cdqe   
   1422d:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14235:	48 8d 05 e4 66 02 00 	lea    rax,[rip+0x266e4]        # 3a920 <stbi__zdist_extra>
   1423c:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1423f:	85 c0                	test   eax,eax
   14241:	74 2d                	je     14270 <stbi__parse_huffman_block(stbi__zbuf*)+0x1d3>
   14243:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14246:	48 98                	cdqe   
   14248:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   14250:	48 8d 05 c9 66 02 00 	lea    rax,[rip+0x266c9]        # 3a920 <stbi__zdist_extra>
   14257:	8b 14 02             	mov    edx,DWORD PTR [rdx+rax*1]
   1425a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1425e:	89 d6                	mov    esi,edx
   14260:	48 89 c7             	mov    rdi,rax
   14263:	e8 03 fb ff ff       	call   13d6b <stbi__zreceive(stbi__zbuf*, int)>
   14268:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   1426b:	01 d0                	add    eax,edx
   1426d:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   14270:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14274:	48 8b 48 20          	mov    rcx,QWORD PTR [rax+0x20]
   14278:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1427c:	48 29 c8             	sub    rax,rcx
   1427f:	48 89 c2             	mov    rdx,rax
   14282:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   14285:	48 98                	cdqe   
   14287:	48 39 c2             	cmp    rdx,rax
   1428a:	7d 14                	jge    142a0 <stbi__parse_huffman_block(stbi__zbuf*)+0x203>
   1428c:	48 8d 05 0d 67 02 00 	lea    rax,[rip+0x2670d]        # 3a9a0 <stbi__zdist_extra+0x80>
   14293:	48 89 c7             	mov    rdi,rax
   14296:	e8 d7 08 ff ff       	call   4b72 <stbi__err(char const*)>
   1429b:	e9 e2 00 00 00       	jmp    14382 <stbi__parse_huffman_block(stbi__zbuf*)+0x2e5>
   142a0:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   142a3:	48 63 d0             	movsxd rdx,eax
   142a6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   142aa:	48 01 c2             	add    rdx,rax
   142ad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   142b1:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
   142b5:	48 39 c2             	cmp    rdx,rax
   142b8:	76 35                	jbe    142ef <stbi__parse_huffman_block(stbi__zbuf*)+0x252>
   142ba:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   142bd:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   142c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   142c5:	48 89 ce             	mov    rsi,rcx
   142c8:	48 89 c7             	mov    rdi,rax
   142cb:	e8 d3 fc ff ff       	call   13fa3 <stbi__zexpand(stbi__zbuf*, char*, int)>
   142d0:	85 c0                	test   eax,eax
   142d2:	0f 94 c0             	sete   al
   142d5:	84 c0                	test   al,al
   142d7:	74 0a                	je     142e3 <stbi__parse_huffman_block(stbi__zbuf*)+0x246>
   142d9:	b8 00 00 00 00       	mov    eax,0x0
   142de:	e9 9f 00 00 00       	jmp    14382 <stbi__parse_huffman_block(stbi__zbuf*)+0x2e5>
   142e3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   142e7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   142eb:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   142ef:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   142f2:	48 98                	cdqe   
   142f4:	48 f7 d8             	neg    rax
   142f7:	48 89 c2             	mov    rdx,rax
   142fa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   142fe:	48 01 d0             	add    rax,rdx
   14301:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   14305:	83 7d e8 01          	cmp    DWORD PTR [rbp-0x18],0x1
   14309:	75 3a                	jne    14345 <stbi__parse_huffman_block(stbi__zbuf*)+0x2a8>
   1430b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1430f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   14312:	88 45 e3             	mov    BYTE PTR [rbp-0x1d],al
   14315:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   14319:	0f 84 96 fd ff ff    	je     140b5 <stbi__parse_huffman_block(stbi__zbuf*)+0x18>
   1431f:	0f b6 55 e3          	movzx  edx,BYTE PTR [rbp-0x1d]
   14323:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   14327:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1432b:	48 89 4d f0          	mov    QWORD PTR [rbp-0x10],rcx
   1432f:	88 10                	mov    BYTE PTR [rax],dl
   14331:	83 6d e4 01          	sub    DWORD PTR [rbp-0x1c],0x1
   14335:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   14339:	0f 95 c0             	setne  al
   1433c:	84 c0                	test   al,al
   1433e:	75 df                	jne    1431f <stbi__parse_huffman_block(stbi__zbuf*)+0x282>
   14340:	e9 70 fd ff ff       	jmp    140b5 <stbi__parse_huffman_block(stbi__zbuf*)+0x18>
   14345:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   14349:	0f 84 66 fd ff ff    	je     140b5 <stbi__parse_huffman_block(stbi__zbuf*)+0x18>
   1434f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   14353:	48 8d 50 01          	lea    rdx,[rax+0x1]
   14357:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
   1435b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1435e:	89 c1                	mov    ecx,eax
   14360:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   14364:	48 8d 50 01          	lea    rdx,[rax+0x1]
   14368:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
   1436c:	88 08                	mov    BYTE PTR [rax],cl
   1436e:	83 6d e4 01          	sub    DWORD PTR [rbp-0x1c],0x1
   14372:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   14376:	0f 95 c0             	setne  al
   14379:	84 c0                	test   al,al
   1437b:	75 d2                	jne    1434f <stbi__parse_huffman_block(stbi__zbuf*)+0x2b2>
   1437d:	e9 33 fd ff ff       	jmp    140b5 <stbi__parse_huffman_block(stbi__zbuf*)+0x18>
   14382:	c9                   	leave  
   14383:	c3                   	ret    

0000000000014384 <stbi__compute_huffman_codes(stbi__zbuf*)>:
   14384:	55                   	push   rbp
   14385:	48 89 e5             	mov    rbp,rsp
   14388:	48 81 ec 20 0a 00 00 	sub    rsp,0xa20
   1438f:	48 89 bd e8 f5 ff ff 	mov    QWORD PTR [rbp-0xa18],rdi
   14396:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1439f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   143a3:	31 c0                	xor    eax,eax
   143a5:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   143ac:	be 05 00 00 00       	mov    esi,0x5
   143b1:	48 89 c7             	mov    rdi,rax
   143b4:	e8 b2 f9 ff ff       	call   13d6b <stbi__zreceive(stbi__zbuf*, int)>
   143b9:	05 01 01 00 00       	add    eax,0x101
   143be:	89 85 0c f6 ff ff    	mov    DWORD PTR [rbp-0x9f4],eax
   143c4:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   143cb:	be 05 00 00 00       	mov    esi,0x5
   143d0:	48 89 c7             	mov    rdi,rax
   143d3:	e8 93 f9 ff ff       	call   13d6b <stbi__zreceive(stbi__zbuf*, int)>
   143d8:	83 c0 01             	add    eax,0x1
   143db:	89 85 10 f6 ff ff    	mov    DWORD PTR [rbp-0x9f0],eax
   143e1:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   143e8:	be 04 00 00 00       	mov    esi,0x4
   143ed:	48 89 c7             	mov    rdi,rax
   143f0:	e8 76 f9 ff ff       	call   13d6b <stbi__zreceive(stbi__zbuf*, int)>
   143f5:	83 c0 04             	add    eax,0x4
   143f8:	89 85 14 f6 ff ff    	mov    DWORD PTR [rbp-0x9ec],eax
   143fe:	8b 95 0c f6 ff ff    	mov    edx,DWORD PTR [rbp-0x9f4]
   14404:	8b 85 10 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9f0]
   1440a:	01 d0                	add    eax,edx
   1440c:	89 85 18 f6 ff ff    	mov    DWORD PTR [rbp-0x9e8],eax
   14412:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   14419:	ba 13 00 00 00       	mov    edx,0x13
   1441e:	be 00 00 00 00       	mov    esi,0x0
   14423:	48 89 c7             	mov    rdi,rax
   14426:	e8 b5 fd fe ff       	call   41e0 <memset@plt>
   1442b:	c7 85 00 f6 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa00],0x0
   14435:	eb 46                	jmp    1447d <stbi__compute_huffman_codes(stbi__zbuf*)+0xf9>
   14437:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   1443e:	be 03 00 00 00       	mov    esi,0x3
   14443:	48 89 c7             	mov    rdi,rax
   14446:	e8 20 f9 ff ff       	call   13d6b <stbi__zreceive(stbi__zbuf*, int)>
   1444b:	89 85 1c f6 ff ff    	mov    DWORD PTR [rbp-0x9e4],eax
   14451:	8b 85 00 f6 ff ff    	mov    eax,DWORD PTR [rbp-0xa00]
   14457:	48 98                	cdqe   
   14459:	48 8d 15 50 65 02 00 	lea    rdx,[rip+0x26550]        # 3a9b0 <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag>
   14460:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
   14464:	0f b6 c0             	movzx  eax,al
   14467:	8b 95 1c f6 ff ff    	mov    edx,DWORD PTR [rbp-0x9e4]
   1446d:	48 98                	cdqe   
   1446f:	88 94 05 10 fe ff ff 	mov    BYTE PTR [rbp+rax*1-0x1f0],dl
   14476:	83 85 00 f6 ff ff 01 	add    DWORD PTR [rbp-0xa00],0x1
   1447d:	8b 85 00 f6 ff ff    	mov    eax,DWORD PTR [rbp-0xa00]
   14483:	3b 85 14 f6 ff ff    	cmp    eax,DWORD PTR [rbp-0x9ec]
   14489:	7c ac                	jl     14437 <stbi__compute_huffman_codes(stbi__zbuf*)+0xb3>
   1448b:	48 8d 8d 10 fe ff ff 	lea    rcx,[rbp-0x1f0]
   14492:	48 8d 85 20 f6 ff ff 	lea    rax,[rbp-0x9e0]
   14499:	ba 13 00 00 00       	mov    edx,0x13
   1449e:	48 89 ce             	mov    rsi,rcx
   144a1:	48 89 c7             	mov    rdi,rax
   144a4:	e8 01 f4 ff ff       	call   138aa <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)>
   144a9:	85 c0                	test   eax,eax
   144ab:	0f 94 c0             	sete   al
   144ae:	84 c0                	test   al,al
   144b0:	74 0a                	je     144bc <stbi__compute_huffman_codes(stbi__zbuf*)+0x138>
   144b2:	b8 00 00 00 00       	mov    eax,0x0
   144b7:	e9 68 02 00 00       	jmp    14724 <stbi__compute_huffman_codes(stbi__zbuf*)+0x3a0>
   144bc:	c7 85 04 f6 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9fc],0x0
   144c6:	e9 af 01 00 00       	jmp    1467a <stbi__compute_huffman_codes(stbi__zbuf*)+0x2f6>
   144cb:	48 8d 95 20 f6 ff ff 	lea    rdx,[rbp-0x9e0]
   144d2:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   144d9:	48 89 d6             	mov    rsi,rdx
   144dc:	48 89 c7             	mov    rdi,rax
   144df:	e8 22 fa ff ff       	call   13f06 <stbi__zhuffman_decode(stbi__zbuf*, stbi__zhuffman*)>
   144e4:	89 85 08 f6 ff ff    	mov    DWORD PTR [rbp-0x9f8],eax
   144ea:	83 bd 08 f6 ff ff 00 	cmp    DWORD PTR [rbp-0x9f8],0x0
   144f1:	78 09                	js     144fc <stbi__compute_huffman_codes(stbi__zbuf*)+0x178>
   144f3:	83 bd 08 f6 ff ff 12 	cmp    DWORD PTR [rbp-0x9f8],0x12
   144fa:	7e 14                	jle    14510 <stbi__compute_huffman_codes(stbi__zbuf*)+0x18c>
   144fc:	48 8d 05 c2 61 02 00 	lea    rax,[rip+0x261c2]        # 3a6c5 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xd3>
   14503:	48 89 c7             	mov    rdi,rax
   14506:	e8 67 06 ff ff       	call   4b72 <stbi__err(char const*)>
   1450b:	e9 14 02 00 00       	jmp    14724 <stbi__compute_huffman_codes(stbi__zbuf*)+0x3a0>
   14510:	83 bd 08 f6 ff ff 0f 	cmp    DWORD PTR [rbp-0x9f8],0xf
   14517:	7f 25                	jg     1453e <stbi__compute_huffman_codes(stbi__zbuf*)+0x1ba>
   14519:	8b 85 08 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9f8]
   1451f:	89 c1                	mov    ecx,eax
   14521:	8b 85 04 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9fc]
   14527:	8d 50 01             	lea    edx,[rax+0x1]
   1452a:	89 95 04 f6 ff ff    	mov    DWORD PTR [rbp-0x9fc],edx
   14530:	48 98                	cdqe   
   14532:	88 8c 05 30 fe ff ff 	mov    BYTE PTR [rbp+rax*1-0x1d0],cl
   14539:	e9 3c 01 00 00       	jmp    1467a <stbi__compute_huffman_codes(stbi__zbuf*)+0x2f6>
   1453e:	c6 85 ff f5 ff ff 00 	mov    BYTE PTR [rbp-0xa01],0x0
   14545:	83 bd 08 f6 ff ff 10 	cmp    DWORD PTR [rbp-0x9f8],0x10
   1454c:	75 55                	jne    145a3 <stbi__compute_huffman_codes(stbi__zbuf*)+0x21f>
   1454e:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   14555:	be 02 00 00 00       	mov    esi,0x2
   1455a:	48 89 c7             	mov    rdi,rax
   1455d:	e8 09 f8 ff ff       	call   13d6b <stbi__zreceive(stbi__zbuf*, int)>
   14562:	83 c0 03             	add    eax,0x3
   14565:	89 85 08 f6 ff ff    	mov    DWORD PTR [rbp-0x9f8],eax
   1456b:	83 bd 04 f6 ff ff 00 	cmp    DWORD PTR [rbp-0x9fc],0x0
   14572:	75 14                	jne    14588 <stbi__compute_huffman_codes(stbi__zbuf*)+0x204>
   14574:	48 8d 05 4a 61 02 00 	lea    rax,[rip+0x2614a]        # 3a6c5 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xd3>
   1457b:	48 89 c7             	mov    rdi,rax
   1457e:	e8 ef 05 ff ff       	call   4b72 <stbi__err(char const*)>
   14583:	e9 9c 01 00 00       	jmp    14724 <stbi__compute_huffman_codes(stbi__zbuf*)+0x3a0>
   14588:	8b 85 04 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9fc]
   1458e:	83 e8 01             	sub    eax,0x1
   14591:	48 98                	cdqe   
   14593:	0f b6 84 05 30 fe ff ff 	movzx  eax,BYTE PTR [rbp+rax*1-0x1d0]
   1459b:	88 85 ff f5 ff ff    	mov    BYTE PTR [rbp-0xa01],al
   145a1:	eb 76                	jmp    14619 <stbi__compute_huffman_codes(stbi__zbuf*)+0x295>
   145a3:	83 bd 08 f6 ff ff 11 	cmp    DWORD PTR [rbp-0x9f8],0x11
   145aa:	75 1f                	jne    145cb <stbi__compute_huffman_codes(stbi__zbuf*)+0x247>
   145ac:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   145b3:	be 03 00 00 00       	mov    esi,0x3
   145b8:	48 89 c7             	mov    rdi,rax
   145bb:	e8 ab f7 ff ff       	call   13d6b <stbi__zreceive(stbi__zbuf*, int)>
   145c0:	83 c0 03             	add    eax,0x3
   145c3:	89 85 08 f6 ff ff    	mov    DWORD PTR [rbp-0x9f8],eax
   145c9:	eb 4e                	jmp    14619 <stbi__compute_huffman_codes(stbi__zbuf*)+0x295>
   145cb:	83 bd 08 f6 ff ff 12 	cmp    DWORD PTR [rbp-0x9f8],0x12
   145d2:	74 28                	je     145fc <stbi__compute_huffman_codes(stbi__zbuf*)+0x278>
   145d4:	48 8d 05 ed 63 02 00 	lea    rax,[rip+0x263ed]        # 3a9c8 <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0x18>
   145db:	48 89 c1             	mov    rcx,rax
   145de:	ba 6b 10 00 00       	mov    edx,0x106b
   145e3:	48 8d 05 ae 5a 02 00 	lea    rax,[rip+0x25aae]        # 3a098 <_IO_stdin_used+0x98>
   145ea:	48 89 c6             	mov    rsi,rax
   145ed:	48 8d 05 01 64 02 00 	lea    rax,[rip+0x26401]        # 3a9f5 <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0x45>
   145f4:	48 89 c7             	mov    rdi,rax
   145f7:	e8 84 fc fe ff       	call   4280 <__assert_fail@plt>
   145fc:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   14603:	be 07 00 00 00       	mov    esi,0x7
   14608:	48 89 c7             	mov    rdi,rax
   1460b:	e8 5b f7 ff ff       	call   13d6b <stbi__zreceive(stbi__zbuf*, int)>
   14610:	83 c0 0b             	add    eax,0xb
   14613:	89 85 08 f6 ff ff    	mov    DWORD PTR [rbp-0x9f8],eax
   14619:	8b 85 18 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9e8]
   1461f:	2b 85 04 f6 ff ff    	sub    eax,DWORD PTR [rbp-0x9fc]
   14625:	39 85 08 f6 ff ff    	cmp    DWORD PTR [rbp-0x9f8],eax
   1462b:	7e 14                	jle    14641 <stbi__compute_huffman_codes(stbi__zbuf*)+0x2bd>
   1462d:	48 8d 05 91 60 02 00 	lea    rax,[rip+0x26091]        # 3a6c5 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xd3>
   14634:	48 89 c7             	mov    rdi,rax
   14637:	e8 36 05 ff ff       	call   4b72 <stbi__err(char const*)>
   1463c:	e9 e3 00 00 00       	jmp    14724 <stbi__compute_huffman_codes(stbi__zbuf*)+0x3a0>
   14641:	8b 85 08 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9f8]
   14647:	48 63 d0             	movsxd rdx,eax
   1464a:	0f b6 85 ff f5 ff ff 	movzx  eax,BYTE PTR [rbp-0xa01]
   14651:	8b 8d 04 f6 ff ff    	mov    ecx,DWORD PTR [rbp-0x9fc]
   14657:	48 63 c9             	movsxd rcx,ecx
   1465a:	48 8d b5 30 fe ff ff 	lea    rsi,[rbp-0x1d0]
   14661:	48 01 f1             	add    rcx,rsi
   14664:	89 c6                	mov    esi,eax
   14666:	48 89 cf             	mov    rdi,rcx
   14669:	e8 72 fb fe ff       	call   41e0 <memset@plt>
   1466e:	8b 85 08 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9f8]
   14674:	01 85 04 f6 ff ff    	add    DWORD PTR [rbp-0x9fc],eax
   1467a:	8b 85 04 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9fc]
   14680:	3b 85 18 f6 ff ff    	cmp    eax,DWORD PTR [rbp-0x9e8]
   14686:	0f 8c 3f fe ff ff    	jl     144cb <stbi__compute_huffman_codes(stbi__zbuf*)+0x147>
   1468c:	8b 85 04 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9fc]
   14692:	3b 85 18 f6 ff ff    	cmp    eax,DWORD PTR [rbp-0x9e8]
   14698:	74 11                	je     146ab <stbi__compute_huffman_codes(stbi__zbuf*)+0x327>
   1469a:	48 8d 05 24 60 02 00 	lea    rax,[rip+0x26024]        # 3a6c5 <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0xd3>
   146a1:	48 89 c7             	mov    rdi,rax
   146a4:	e8 c9 04 ff ff       	call   4b72 <stbi__err(char const*)>
   146a9:	eb 79                	jmp    14724 <stbi__compute_huffman_codes(stbi__zbuf*)+0x3a0>
   146ab:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   146b2:	48 8d 48 34          	lea    rcx,[rax+0x34]
   146b6:	8b 95 0c f6 ff ff    	mov    edx,DWORD PTR [rbp-0x9f4]
   146bc:	48 8d 85 30 fe ff ff 	lea    rax,[rbp-0x1d0]
   146c3:	48 89 c6             	mov    rsi,rax
   146c6:	48 89 cf             	mov    rdi,rcx
   146c9:	e8 dc f1 ff ff       	call   138aa <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)>
   146ce:	85 c0                	test   eax,eax
   146d0:	0f 94 c0             	sete   al
   146d3:	84 c0                	test   al,al
   146d5:	74 07                	je     146de <stbi__compute_huffman_codes(stbi__zbuf*)+0x35a>
   146d7:	b8 00 00 00 00       	mov    eax,0x0
   146dc:	eb 46                	jmp    14724 <stbi__compute_huffman_codes(stbi__zbuf*)+0x3a0>
   146de:	8b 85 0c f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9f4]
   146e4:	48 98                	cdqe   
   146e6:	48 8d 95 30 fe ff ff 	lea    rdx,[rbp-0x1d0]
   146ed:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   146f1:	48 8b 85 e8 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa18]
   146f8:	48 8d 88 18 08 00 00 	lea    rcx,[rax+0x818]
   146ff:	8b 85 10 f6 ff ff    	mov    eax,DWORD PTR [rbp-0x9f0]
   14705:	89 c2                	mov    edx,eax
   14707:	48 89 cf             	mov    rdi,rcx
   1470a:	e8 9b f1 ff ff       	call   138aa <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)>
   1470f:	85 c0                	test   eax,eax
   14711:	0f 94 c0             	sete   al
   14714:	84 c0                	test   al,al
   14716:	74 07                	je     1471f <stbi__compute_huffman_codes(stbi__zbuf*)+0x39b>
   14718:	b8 00 00 00 00       	mov    eax,0x0
   1471d:	eb 05                	jmp    14724 <stbi__compute_huffman_codes(stbi__zbuf*)+0x3a0>
   1471f:	b8 01 00 00 00       	mov    eax,0x1
   14724:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   14728:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   14731:	74 05                	je     14738 <stbi__compute_huffman_codes(stbi__zbuf*)+0x3b4>
   14733:	e8 a8 fd fe ff       	call   44e0 <__stack_chk_fail@plt>
   14738:	c9                   	leave  
   14739:	c3                   	ret    

000000000001473a <stbi__parse_uncompressed_block(stbi__zbuf*)>:
   1473a:	55                   	push   rbp
   1473b:	48 89 e5             	mov    rbp,rsp
   1473e:	48 83 ec 30          	sub    rsp,0x30
   14742:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   14746:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1474f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   14753:	31 c0                	xor    eax,eax
   14755:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14759:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   1475c:	83 e0 07             	and    eax,0x7
   1475f:	85 c0                	test   eax,eax
   14761:	74 1a                	je     1477d <stbi__parse_uncompressed_block(stbi__zbuf*)+0x43>
   14763:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14767:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   1476a:	83 e0 07             	and    eax,0x7
   1476d:	89 c2                	mov    edx,eax
   1476f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14773:	89 d6                	mov    esi,edx
   14775:	48 89 c7             	mov    rdi,rax
   14778:	e8 ee f5 ff ff       	call   13d6b <stbi__zreceive(stbi__zbuf*, int)>
   1477d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   14784:	eb 3c                	jmp    147c2 <stbi__parse_uncompressed_block(stbi__zbuf*)+0x88>
   14786:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1478a:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   1478d:	89 c1                	mov    ecx,eax
   1478f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   14792:	8d 50 01             	lea    edx,[rax+0x1]
   14795:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
   14798:	48 98                	cdqe   
   1479a:	88 4c 05 f4          	mov    BYTE PTR [rbp+rax*1-0xc],cl
   1479e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   147a2:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   147a5:	c1 e8 08             	shr    eax,0x8
   147a8:	89 c2                	mov    edx,eax
   147aa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   147ae:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   147b1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   147b5:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   147b8:	8d 50 f8             	lea    edx,[rax-0x8]
   147bb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   147bf:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   147c2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   147c6:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   147c9:	85 c0                	test   eax,eax
   147cb:	7f b9                	jg     14786 <stbi__parse_uncompressed_block(stbi__zbuf*)+0x4c>
   147cd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   147d1:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   147d4:	85 c0                	test   eax,eax
   147d6:	74 45                	je     1481d <stbi__parse_uncompressed_block(stbi__zbuf*)+0xe3>
   147d8:	48 8d 05 21 62 02 00 	lea    rax,[rip+0x26221]        # 3aa00 <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0x50>
   147df:	48 89 c1             	mov    rcx,rax
   147e2:	ba 86 10 00 00       	mov    edx,0x1086
   147e7:	48 8d 05 aa 58 02 00 	lea    rax,[rip+0x258aa]        # 3a098 <_IO_stdin_used+0x98>
   147ee:	48 89 c6             	mov    rsi,rax
   147f1:	48 8d 05 38 62 02 00 	lea    rax,[rip+0x26238]        # 3aa30 <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0x80>
   147f8:	48 89 c7             	mov    rdi,rax
   147fb:	e8 80 fa fe ff       	call   4280 <__assert_fail@plt>
   14800:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14804:	48 89 c7             	mov    rdi,rax
   14807:	e8 8a f4 ff ff       	call   13c96 <stbi__zget8(stbi__zbuf*)>
   1480c:	89 c2                	mov    edx,eax
   1480e:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   14811:	8d 48 01             	lea    ecx,[rax+0x1]
   14814:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
   14817:	48 98                	cdqe   
   14819:	88 54 05 f4          	mov    BYTE PTR [rbp+rax*1-0xc],dl
   1481d:	83 7d e8 03          	cmp    DWORD PTR [rbp-0x18],0x3
   14821:	7e dd                	jle    14800 <stbi__parse_uncompressed_block(stbi__zbuf*)+0xc6>
   14823:	0f b6 45 f5          	movzx  eax,BYTE PTR [rbp-0xb]
   14827:	0f b6 c0             	movzx  eax,al
   1482a:	c1 e0 08             	shl    eax,0x8
   1482d:	89 c2                	mov    edx,eax
   1482f:	0f b6 45 f4          	movzx  eax,BYTE PTR [rbp-0xc]
   14833:	0f b6 c0             	movzx  eax,al
   14836:	01 d0                	add    eax,edx
   14838:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   1483b:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
   1483f:	0f b6 c0             	movzx  eax,al
   14842:	c1 e0 08             	shl    eax,0x8
   14845:	89 c2                	mov    edx,eax
   14847:	0f b6 45 f6          	movzx  eax,BYTE PTR [rbp-0xa]
   1484b:	0f b6 c0             	movzx  eax,al
   1484e:	01 d0                	add    eax,edx
   14850:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   14853:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14856:	35 ff ff 00 00       	xor    eax,0xffff
   1485b:	39 45 f0             	cmp    DWORD PTR [rbp-0x10],eax
   1485e:	74 14                	je     14874 <stbi__parse_uncompressed_block(stbi__zbuf*)+0x13a>
   14860:	48 8d 05 da 61 02 00 	lea    rax,[rip+0x261da]        # 3aa41 <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0x91>
   14867:	48 89 c7             	mov    rdi,rax
   1486a:	e8 03 03 ff ff       	call   4b72 <stbi__err(char const*)>
   1486f:	e9 ca 00 00 00       	jmp    1493e <stbi__parse_uncompressed_block(stbi__zbuf*)+0x204>
   14874:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14878:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   1487b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1487e:	48 98                	cdqe   
   14880:	48 01 c2             	add    rdx,rax
   14883:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14887:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1488b:	48 39 c2             	cmp    rdx,rax
   1488e:	76 14                	jbe    148a4 <stbi__parse_uncompressed_block(stbi__zbuf*)+0x16a>
   14890:	48 8d 05 b7 61 02 00 	lea    rax,[rip+0x261b7]        # 3aa4e <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0x9e>
   14897:	48 89 c7             	mov    rdi,rax
   1489a:	e8 d3 02 ff ff       	call   4b72 <stbi__err(char const*)>
   1489f:	e9 9a 00 00 00       	jmp    1493e <stbi__parse_uncompressed_block(stbi__zbuf*)+0x204>
   148a4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   148a8:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   148ac:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   148af:	48 98                	cdqe   
   148b1:	48 01 c2             	add    rdx,rax
   148b4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   148b8:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
   148bc:	48 39 c2             	cmp    rdx,rax
   148bf:	76 2a                	jbe    148eb <stbi__parse_uncompressed_block(stbi__zbuf*)+0x1b1>
   148c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   148c5:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   148c9:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   148cc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   148d0:	48 89 ce             	mov    rsi,rcx
   148d3:	48 89 c7             	mov    rdi,rax
   148d6:	e8 c8 f6 ff ff       	call   13fa3 <stbi__zexpand(stbi__zbuf*, char*, int)>
   148db:	85 c0                	test   eax,eax
   148dd:	0f 94 c0             	sete   al
   148e0:	84 c0                	test   al,al
   148e2:	74 07                	je     148eb <stbi__parse_uncompressed_block(stbi__zbuf*)+0x1b1>
   148e4:	b8 00 00 00 00       	mov    eax,0x0
   148e9:	eb 53                	jmp    1493e <stbi__parse_uncompressed_block(stbi__zbuf*)+0x204>
   148eb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   148ee:	48 63 d0             	movsxd rdx,eax
   148f1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   148f5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   148f8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   148fc:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   14900:	48 89 ce             	mov    rsi,rcx
   14903:	48 89 c7             	mov    rdi,rax
   14906:	e8 65 fa fe ff       	call   4370 <memcpy@plt>
   1490b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1490f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   14912:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14915:	48 98                	cdqe   
   14917:	48 01 c2             	add    rdx,rax
   1491a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1491e:	48 89 10             	mov    QWORD PTR [rax],rdx
   14921:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14925:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   14929:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1492c:	48 98                	cdqe   
   1492e:	48 01 c2             	add    rdx,rax
   14931:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   14935:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   14939:	b8 01 00 00 00       	mov    eax,0x1
   1493e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   14942:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1494b:	74 05                	je     14952 <stbi__parse_uncompressed_block(stbi__zbuf*)+0x218>
   1494d:	e8 8e fb fe ff       	call   44e0 <__stack_chk_fail@plt>
   14952:	c9                   	leave  
   14953:	c3                   	ret    

0000000000014954 <stbi__parse_zlib_header(stbi__zbuf*)>:
   14954:	55                   	push   rbp
   14955:	48 89 e5             	mov    rbp,rsp
   14958:	48 83 ec 18          	sub    rsp,0x18
   1495c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   14960:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14964:	48 89 c7             	mov    rdi,rax
   14967:	e8 2a f3 ff ff       	call   13c96 <stbi__zget8(stbi__zbuf*)>
   1496c:	0f b6 c0             	movzx  eax,al
   1496f:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   14972:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   14975:	83 e0 0f             	and    eax,0xf
   14978:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   1497b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1497f:	48 89 c7             	mov    rdi,rax
   14982:	e8 0f f3 ff ff       	call   13c96 <stbi__zget8(stbi__zbuf*)>
   14987:	0f b6 c0             	movzx  eax,al
   1498a:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1498d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   14990:	c1 e0 08             	shl    eax,0x8
   14993:	89 c2                	mov    edx,eax
   14995:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   14998:	01 c2                	add    edx,eax
   1499a:	48 63 c2             	movsxd rax,edx
   1499d:	48 69 c0 43 08 21 84 	imul   rax,rax,0xffffffff84210843
   149a4:	48 c1 e8 20          	shr    rax,0x20
   149a8:	01 d0                	add    eax,edx
   149aa:	c1 f8 04             	sar    eax,0x4
   149ad:	89 d1                	mov    ecx,edx
   149af:	c1 f9 1f             	sar    ecx,0x1f
   149b2:	29 c8                	sub    eax,ecx
   149b4:	89 c1                	mov    ecx,eax
   149b6:	c1 e1 05             	shl    ecx,0x5
   149b9:	29 c1                	sub    ecx,eax
   149bb:	89 d0                	mov    eax,edx
   149bd:	29 c8                	sub    eax,ecx
   149bf:	85 c0                	test   eax,eax
   149c1:	74 11                	je     149d4 <stbi__parse_zlib_header(stbi__zbuf*)+0x80>
   149c3:	48 8d 05 95 60 02 00 	lea    rax,[rip+0x26095]        # 3aa5f <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0xaf>
   149ca:	48 89 c7             	mov    rdi,rax
   149cd:	e8 a0 01 ff ff       	call   4b72 <stbi__err(char const*)>
   149d2:	eb 37                	jmp    14a0b <stbi__parse_zlib_header(stbi__zbuf*)+0xb7>
   149d4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   149d7:	83 e0 20             	and    eax,0x20
   149da:	85 c0                	test   eax,eax
   149dc:	74 11                	je     149ef <stbi__parse_zlib_header(stbi__zbuf*)+0x9b>
   149de:	48 8d 05 8a 60 02 00 	lea    rax,[rip+0x2608a]        # 3aa6f <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0xbf>
   149e5:	48 89 c7             	mov    rdi,rax
   149e8:	e8 85 01 ff ff       	call   4b72 <stbi__err(char const*)>
   149ed:	eb 1c                	jmp    14a0b <stbi__parse_zlib_header(stbi__zbuf*)+0xb7>
   149ef:	83 7d f8 08          	cmp    DWORD PTR [rbp-0x8],0x8
   149f3:	74 11                	je     14a06 <stbi__parse_zlib_header(stbi__zbuf*)+0xb2>
   149f5:	48 8d 05 82 60 02 00 	lea    rax,[rip+0x26082]        # 3aa7e <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0xce>
   149fc:	48 89 c7             	mov    rdi,rax
   149ff:	e8 6e 01 ff ff       	call   4b72 <stbi__err(char const*)>
   14a04:	eb 05                	jmp    14a0b <stbi__parse_zlib_header(stbi__zbuf*)+0xb7>
   14a06:	b8 01 00 00 00       	mov    eax,0x1
   14a0b:	c9                   	leave  
   14a0c:	c3                   	ret    

0000000000014a0d <stbi__parse_zlib(stbi__zbuf*, int)>:
   14a0d:	55                   	push   rbp
   14a0e:	48 89 e5             	mov    rbp,rsp
   14a11:	48 83 ec 20          	sub    rsp,0x20
   14a15:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   14a19:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   14a1c:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   14a20:	74 1f                	je     14a41 <stbi__parse_zlib(stbi__zbuf*, int)+0x34>
   14a22:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14a26:	48 89 c7             	mov    rdi,rax
   14a29:	e8 26 ff ff ff       	call   14954 <stbi__parse_zlib_header(stbi__zbuf*)>
   14a2e:	85 c0                	test   eax,eax
   14a30:	0f 94 c0             	sete   al
   14a33:	84 c0                	test   al,al
   14a35:	74 0a                	je     14a41 <stbi__parse_zlib(stbi__zbuf*, int)+0x34>
   14a37:	b8 00 00 00 00       	mov    eax,0x0
   14a3c:	e9 24 01 00 00       	jmp    14b65 <stbi__parse_zlib(stbi__zbuf*, int)+0x158>
   14a41:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14a45:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
   14a4c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14a50:	c7 40 14 00 00 00 00 	mov    DWORD PTR [rax+0x14],0x0
   14a57:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14a5b:	be 01 00 00 00       	mov    esi,0x1
   14a60:	48 89 c7             	mov    rdi,rax
   14a63:	e8 03 f3 ff ff       	call   13d6b <stbi__zreceive(stbi__zbuf*, int)>
   14a68:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   14a6b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14a6f:	be 02 00 00 00       	mov    esi,0x2
   14a74:	48 89 c7             	mov    rdi,rax
   14a77:	e8 ef f2 ff ff       	call   13d6b <stbi__zreceive(stbi__zbuf*, int)>
   14a7c:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   14a7f:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   14a83:	75 23                	jne    14aa8 <stbi__parse_zlib(stbi__zbuf*, int)+0x9b>
   14a85:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14a89:	48 89 c7             	mov    rdi,rax
   14a8c:	e8 a9 fc ff ff       	call   1473a <stbi__parse_uncompressed_block(stbi__zbuf*)>
   14a91:	85 c0                	test   eax,eax
   14a93:	0f 94 c0             	sete   al
   14a96:	84 c0                	test   al,al
   14a98:	0f 84 b8 00 00 00    	je     14b56 <stbi__parse_zlib(stbi__zbuf*, int)+0x149>
   14a9e:	b8 00 00 00 00       	mov    eax,0x0
   14aa3:	e9 bd 00 00 00       	jmp    14b65 <stbi__parse_zlib(stbi__zbuf*, int)+0x158>
   14aa8:	83 7d fc 03          	cmp    DWORD PTR [rbp-0x4],0x3
   14aac:	75 0a                	jne    14ab8 <stbi__parse_zlib(stbi__zbuf*, int)+0xab>
   14aae:	b8 00 00 00 00       	mov    eax,0x0
   14ab3:	e9 ad 00 00 00       	jmp    14b65 <stbi__parse_zlib(stbi__zbuf*, int)+0x158>
   14ab8:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
   14abc:	75 60                	jne    14b1e <stbi__parse_zlib(stbi__zbuf*, int)+0x111>
   14abe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14ac2:	48 83 c0 34          	add    rax,0x34
   14ac6:	ba 20 01 00 00       	mov    edx,0x120
   14acb:	48 8d 0d ce 5f 02 00 	lea    rcx,[rip+0x25fce]        # 3aaa0 <stbi__zdefault_length>
   14ad2:	48 89 ce             	mov    rsi,rcx
   14ad5:	48 89 c7             	mov    rdi,rax
   14ad8:	e8 cd ed ff ff       	call   138aa <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)>
   14add:	85 c0                	test   eax,eax
   14adf:	0f 94 c0             	sete   al
   14ae2:	84 c0                	test   al,al
   14ae4:	74 07                	je     14aed <stbi__parse_zlib(stbi__zbuf*, int)+0xe0>
   14ae6:	b8 00 00 00 00       	mov    eax,0x0
   14aeb:	eb 78                	jmp    14b65 <stbi__parse_zlib(stbi__zbuf*, int)+0x158>
   14aed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14af1:	48 05 18 08 00 00    	add    rax,0x818
   14af7:	ba 20 00 00 00       	mov    edx,0x20
   14afc:	48 8d 0d bd 60 02 00 	lea    rcx,[rip+0x260bd]        # 3abc0 <stbi__zdefault_distance>
   14b03:	48 89 ce             	mov    rsi,rcx
   14b06:	48 89 c7             	mov    rdi,rax
   14b09:	e8 9c ed ff ff       	call   138aa <stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)>
   14b0e:	85 c0                	test   eax,eax
   14b10:	0f 94 c0             	sete   al
   14b13:	84 c0                	test   al,al
   14b15:	74 23                	je     14b3a <stbi__parse_zlib(stbi__zbuf*, int)+0x12d>
   14b17:	b8 00 00 00 00       	mov    eax,0x0
   14b1c:	eb 47                	jmp    14b65 <stbi__parse_zlib(stbi__zbuf*, int)+0x158>
   14b1e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14b22:	48 89 c7             	mov    rdi,rax
   14b25:	e8 5a f8 ff ff       	call   14384 <stbi__compute_huffman_codes(stbi__zbuf*)>
   14b2a:	85 c0                	test   eax,eax
   14b2c:	0f 94 c0             	sete   al
   14b2f:	84 c0                	test   al,al
   14b31:	74 07                	je     14b3a <stbi__parse_zlib(stbi__zbuf*, int)+0x12d>
   14b33:	b8 00 00 00 00       	mov    eax,0x0
   14b38:	eb 2b                	jmp    14b65 <stbi__parse_zlib(stbi__zbuf*, int)+0x158>
   14b3a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   14b3e:	48 89 c7             	mov    rdi,rax
   14b41:	e8 57 f5 ff ff       	call   1409d <stbi__parse_huffman_block(stbi__zbuf*)>
   14b46:	85 c0                	test   eax,eax
   14b48:	0f 94 c0             	sete   al
   14b4b:	84 c0                	test   al,al
   14b4d:	74 07                	je     14b56 <stbi__parse_zlib(stbi__zbuf*, int)+0x149>
   14b4f:	b8 00 00 00 00       	mov    eax,0x0
   14b54:	eb 0f                	jmp    14b65 <stbi__parse_zlib(stbi__zbuf*, int)+0x158>
   14b56:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   14b5a:	0f 84 f7 fe ff ff    	je     14a57 <stbi__parse_zlib(stbi__zbuf*, int)+0x4a>
   14b60:	b8 01 00 00 00       	mov    eax,0x1
   14b65:	c9                   	leave  
   14b66:	c3                   	ret    

0000000000014b67 <stbi__do_zlib(stbi__zbuf*, char*, int, int, int)>:
   14b67:	55                   	push   rbp
   14b68:	48 89 e5             	mov    rbp,rsp
   14b6b:	48 83 ec 20          	sub    rsp,0x20
   14b6f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   14b73:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   14b77:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   14b7a:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
   14b7d:	44 89 45 e4          	mov    DWORD PTR [rbp-0x1c],r8d
   14b81:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   14b85:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   14b89:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
   14b8d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   14b91:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   14b95:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   14b99:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   14b9c:	48 63 d0             	movsxd rdx,eax
   14b9f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   14ba3:	48 01 c2             	add    rdx,rax
   14ba6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   14baa:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
   14bae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   14bb2:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   14bb5:	89 50 30             	mov    DWORD PTR [rax+0x30],edx
   14bb8:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   14bbb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   14bbf:	89 d6                	mov    esi,edx
   14bc1:	48 89 c7             	mov    rdi,rax
   14bc4:	e8 44 fe ff ff       	call   14a0d <stbi__parse_zlib(stbi__zbuf*, int)>
   14bc9:	c9                   	leave  
   14bca:	c3                   	ret    

0000000000014bcb <stbi_zlib_decode_malloc_guesssize>:
   14bcb:	55                   	push   rbp
   14bcc:	48 89 e5             	mov    rbp,rsp
   14bcf:	48 81 ec 40 10 00 00 	sub    rsp,0x1040
   14bd6:	48 89 bd d8 ef ff ff 	mov    QWORD PTR [rbp-0x1028],rdi
   14bdd:	89 b5 d4 ef ff ff    	mov    DWORD PTR [rbp-0x102c],esi
   14be3:	89 95 d0 ef ff ff    	mov    DWORD PTR [rbp-0x1030],edx
   14be9:	48 89 8d c8 ef ff ff 	mov    QWORD PTR [rbp-0x1038],rcx
   14bf0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   14bf9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   14bfd:	31 c0                	xor    eax,eax
   14bff:	8b 85 d0 ef ff ff    	mov    eax,DWORD PTR [rbp-0x1030]
   14c05:	48 98                	cdqe   
   14c07:	48 89 c7             	mov    rdi,rax
   14c0a:	e8 7f ff fe ff       	call   4b8e <stbi__malloc(unsigned long)>
   14c0f:	48 89 85 e8 ef ff ff 	mov    QWORD PTR [rbp-0x1018],rax
   14c16:	48 83 bd e8 ef ff ff 00 	cmp    QWORD PTR [rbp-0x1018],0x0
   14c1e:	75 0a                	jne    14c2a <stbi_zlib_decode_malloc_guesssize+0x5f>
   14c20:	b8 00 00 00 00       	mov    eax,0x0
   14c25:	e9 9b 00 00 00       	jmp    14cc5 <stbi_zlib_decode_malloc_guesssize+0xfa>
   14c2a:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14c31:	48 89 85 f0 ef ff ff 	mov    QWORD PTR [rbp-0x1010],rax
   14c38:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [rbp-0x102c]
   14c3e:	48 63 d0             	movsxd rdx,eax
   14c41:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14c48:	48 01 d0             	add    rax,rdx
   14c4b:	48 89 85 f8 ef ff ff 	mov    QWORD PTR [rbp-0x1008],rax
   14c52:	8b 95 d0 ef ff ff    	mov    edx,DWORD PTR [rbp-0x1030]
   14c58:	48 8b b5 e8 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x1018]
   14c5f:	48 8d 85 f0 ef ff ff 	lea    rax,[rbp-0x1010]
   14c66:	41 b8 01 00 00 00    	mov    r8d,0x1
   14c6c:	b9 01 00 00 00       	mov    ecx,0x1
   14c71:	48 89 c7             	mov    rdi,rax
   14c74:	e8 ee fe ff ff       	call   14b67 <stbi__do_zlib(stbi__zbuf*, char*, int, int, int)>
   14c79:	85 c0                	test   eax,eax
   14c7b:	0f 95 c0             	setne  al
   14c7e:	84 c0                	test   al,al
   14c80:	74 2f                	je     14cb1 <stbi_zlib_decode_malloc_guesssize+0xe6>
   14c82:	48 83 bd c8 ef ff ff 00 	cmp    QWORD PTR [rbp-0x1038],0x0
   14c8a:	74 1c                	je     14ca8 <stbi_zlib_decode_malloc_guesssize+0xdd>
   14c8c:	48 8b 85 08 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff8]
   14c93:	48 8b 95 10 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xff0]
   14c9a:	48 29 d0             	sub    rax,rdx
   14c9d:	89 c2                	mov    edx,eax
   14c9f:	48 8b 85 c8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1038]
   14ca6:	89 10                	mov    DWORD PTR [rax],edx
   14ca8:	48 8b 85 10 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff0]
   14caf:	eb 14                	jmp    14cc5 <stbi_zlib_decode_malloc_guesssize+0xfa>
   14cb1:	48 8b 85 10 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff0]
   14cb8:	48 89 c7             	mov    rdi,rax
   14cbb:	e8 70 f8 fe ff       	call   4530 <free@plt>
   14cc0:	b8 00 00 00 00       	mov    eax,0x0
   14cc5:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   14cc9:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   14cd2:	74 05                	je     14cd9 <stbi_zlib_decode_malloc_guesssize+0x10e>
   14cd4:	e8 07 f8 fe ff       	call   44e0 <__stack_chk_fail@plt>
   14cd9:	c9                   	leave  
   14cda:	c3                   	ret    

0000000000014cdb <stbi_zlib_decode_malloc>:
   14cdb:	55                   	push   rbp
   14cdc:	48 89 e5             	mov    rbp,rsp
   14cdf:	48 83 ec 20          	sub    rsp,0x20
   14ce3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   14ce7:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   14cea:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   14cee:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   14cf2:	8b 75 f4             	mov    esi,DWORD PTR [rbp-0xc]
   14cf5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   14cf9:	48 89 d1             	mov    rcx,rdx
   14cfc:	ba 00 40 00 00       	mov    edx,0x4000
   14d01:	48 89 c7             	mov    rdi,rax
   14d04:	e8 c2 fe ff ff       	call   14bcb <stbi_zlib_decode_malloc_guesssize>
   14d09:	c9                   	leave  
   14d0a:	c3                   	ret    

0000000000014d0b <stbi_zlib_decode_malloc_guesssize_headerflag>:
   14d0b:	55                   	push   rbp
   14d0c:	48 89 e5             	mov    rbp,rsp
   14d0f:	48 81 ec 40 10 00 00 	sub    rsp,0x1040
   14d16:	48 89 bd d8 ef ff ff 	mov    QWORD PTR [rbp-0x1028],rdi
   14d1d:	89 b5 d4 ef ff ff    	mov    DWORD PTR [rbp-0x102c],esi
   14d23:	89 95 d0 ef ff ff    	mov    DWORD PTR [rbp-0x1030],edx
   14d29:	48 89 8d c8 ef ff ff 	mov    QWORD PTR [rbp-0x1038],rcx
   14d30:	44 89 85 c4 ef ff ff 	mov    DWORD PTR [rbp-0x103c],r8d
   14d37:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   14d40:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   14d44:	31 c0                	xor    eax,eax
   14d46:	8b 85 d0 ef ff ff    	mov    eax,DWORD PTR [rbp-0x1030]
   14d4c:	48 98                	cdqe   
   14d4e:	48 89 c7             	mov    rdi,rax
   14d51:	e8 38 fe fe ff       	call   4b8e <stbi__malloc(unsigned long)>
   14d56:	48 89 85 e8 ef ff ff 	mov    QWORD PTR [rbp-0x1018],rax
   14d5d:	48 83 bd e8 ef ff ff 00 	cmp    QWORD PTR [rbp-0x1018],0x0
   14d65:	75 0a                	jne    14d71 <stbi_zlib_decode_malloc_guesssize_headerflag+0x66>
   14d67:	b8 00 00 00 00       	mov    eax,0x0
   14d6c:	e9 9e 00 00 00       	jmp    14e0f <stbi_zlib_decode_malloc_guesssize_headerflag+0x104>
   14d71:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14d78:	48 89 85 f0 ef ff ff 	mov    QWORD PTR [rbp-0x1010],rax
   14d7f:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [rbp-0x102c]
   14d85:	48 63 d0             	movsxd rdx,eax
   14d88:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14d8f:	48 01 d0             	add    rax,rdx
   14d92:	48 89 85 f8 ef ff ff 	mov    QWORD PTR [rbp-0x1008],rax
   14d99:	8b 8d c4 ef ff ff    	mov    ecx,DWORD PTR [rbp-0x103c]
   14d9f:	8b 95 d0 ef ff ff    	mov    edx,DWORD PTR [rbp-0x1030]
   14da5:	48 8b b5 e8 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x1018]
   14dac:	48 8d 85 f0 ef ff ff 	lea    rax,[rbp-0x1010]
   14db3:	41 89 c8             	mov    r8d,ecx
   14db6:	b9 01 00 00 00       	mov    ecx,0x1
   14dbb:	48 89 c7             	mov    rdi,rax
   14dbe:	e8 a4 fd ff ff       	call   14b67 <stbi__do_zlib(stbi__zbuf*, char*, int, int, int)>
   14dc3:	85 c0                	test   eax,eax
   14dc5:	0f 95 c0             	setne  al
   14dc8:	84 c0                	test   al,al
   14dca:	74 2f                	je     14dfb <stbi_zlib_decode_malloc_guesssize_headerflag+0xf0>
   14dcc:	48 83 bd c8 ef ff ff 00 	cmp    QWORD PTR [rbp-0x1038],0x0
   14dd4:	74 1c                	je     14df2 <stbi_zlib_decode_malloc_guesssize_headerflag+0xe7>
   14dd6:	48 8b 85 08 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff8]
   14ddd:	48 8b 95 10 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xff0]
   14de4:	48 29 d0             	sub    rax,rdx
   14de7:	89 c2                	mov    edx,eax
   14de9:	48 8b 85 c8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1038]
   14df0:	89 10                	mov    DWORD PTR [rax],edx
   14df2:	48 8b 85 10 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff0]
   14df9:	eb 14                	jmp    14e0f <stbi_zlib_decode_malloc_guesssize_headerflag+0x104>
   14dfb:	48 8b 85 10 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff0]
   14e02:	48 89 c7             	mov    rdi,rax
   14e05:	e8 26 f7 fe ff       	call   4530 <free@plt>
   14e0a:	b8 00 00 00 00       	mov    eax,0x0
   14e0f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   14e13:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   14e1c:	74 05                	je     14e23 <stbi_zlib_decode_malloc_guesssize_headerflag+0x118>
   14e1e:	e8 bd f6 fe ff       	call   44e0 <__stack_chk_fail@plt>
   14e23:	c9                   	leave  
   14e24:	c3                   	ret    

0000000000014e25 <stbi_zlib_decode_buffer>:
   14e25:	55                   	push   rbp
   14e26:	48 89 e5             	mov    rbp,rsp
   14e29:	48 81 ec 30 10 00 00 	sub    rsp,0x1030
   14e30:	48 89 bd e8 ef ff ff 	mov    QWORD PTR [rbp-0x1018],rdi
   14e37:	89 b5 e4 ef ff ff    	mov    DWORD PTR [rbp-0x101c],esi
   14e3d:	48 89 95 d8 ef ff ff 	mov    QWORD PTR [rbp-0x1028],rdx
   14e44:	89 8d e0 ef ff ff    	mov    DWORD PTR [rbp-0x1020],ecx
   14e4a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   14e53:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   14e57:	31 c0                	xor    eax,eax
   14e59:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14e60:	48 89 85 f0 ef ff ff 	mov    QWORD PTR [rbp-0x1010],rax
   14e67:	8b 85 e0 ef ff ff    	mov    eax,DWORD PTR [rbp-0x1020]
   14e6d:	48 63 d0             	movsxd rdx,eax
   14e70:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14e77:	48 01 d0             	add    rax,rdx
   14e7a:	48 89 85 f8 ef ff ff 	mov    QWORD PTR [rbp-0x1008],rax
   14e81:	8b 95 e4 ef ff ff    	mov    edx,DWORD PTR [rbp-0x101c]
   14e87:	48 8b b5 e8 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x1018]
   14e8e:	48 8d 85 f0 ef ff ff 	lea    rax,[rbp-0x1010]
   14e95:	41 b8 01 00 00 00    	mov    r8d,0x1
   14e9b:	b9 00 00 00 00       	mov    ecx,0x0
   14ea0:	48 89 c7             	mov    rdi,rax
   14ea3:	e8 bf fc ff ff       	call   14b67 <stbi__do_zlib(stbi__zbuf*, char*, int, int, int)>
   14ea8:	85 c0                	test   eax,eax
   14eaa:	0f 95 c0             	setne  al
   14ead:	84 c0                	test   al,al
   14eaf:	74 13                	je     14ec4 <stbi_zlib_decode_buffer+0x9f>
   14eb1:	48 8b 85 08 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff8]
   14eb8:	48 8b 95 10 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xff0]
   14ebf:	48 29 d0             	sub    rax,rdx
   14ec2:	eb 05                	jmp    14ec9 <stbi_zlib_decode_buffer+0xa4>
   14ec4:	b8 ff ff ff ff       	mov    eax,0xffffffff
   14ec9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   14ecd:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   14ed6:	74 05                	je     14edd <stbi_zlib_decode_buffer+0xb8>
   14ed8:	e8 03 f6 fe ff       	call   44e0 <__stack_chk_fail@plt>
   14edd:	c9                   	leave  
   14ede:	c3                   	ret    

0000000000014edf <stbi_zlib_decode_noheader_malloc>:
   14edf:	55                   	push   rbp
   14ee0:	48 89 e5             	mov    rbp,rsp
   14ee3:	48 81 ec 40 10 00 00 	sub    rsp,0x1040
   14eea:	48 89 bd d8 ef ff ff 	mov    QWORD PTR [rbp-0x1028],rdi
   14ef1:	89 b5 d4 ef ff ff    	mov    DWORD PTR [rbp-0x102c],esi
   14ef7:	48 89 95 c8 ef ff ff 	mov    QWORD PTR [rbp-0x1038],rdx
   14efe:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   14f07:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   14f0b:	31 c0                	xor    eax,eax
   14f0d:	bf 00 40 00 00       	mov    edi,0x4000
   14f12:	e8 77 fc fe ff       	call   4b8e <stbi__malloc(unsigned long)>
   14f17:	48 89 85 e8 ef ff ff 	mov    QWORD PTR [rbp-0x1018],rax
   14f1e:	48 83 bd e8 ef ff ff 00 	cmp    QWORD PTR [rbp-0x1018],0x0
   14f26:	75 0a                	jne    14f32 <stbi_zlib_decode_noheader_malloc+0x53>
   14f28:	b8 00 00 00 00       	mov    eax,0x0
   14f2d:	e9 9a 00 00 00       	jmp    14fcc <stbi_zlib_decode_noheader_malloc+0xed>
   14f32:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14f39:	48 89 85 f0 ef ff ff 	mov    QWORD PTR [rbp-0x1010],rax
   14f40:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [rbp-0x102c]
   14f46:	48 63 d0             	movsxd rdx,eax
   14f49:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   14f50:	48 01 d0             	add    rax,rdx
   14f53:	48 89 85 f8 ef ff ff 	mov    QWORD PTR [rbp-0x1008],rax
   14f5a:	48 8b b5 e8 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x1018]
   14f61:	48 8d 85 f0 ef ff ff 	lea    rax,[rbp-0x1010]
   14f68:	41 b8 00 00 00 00    	mov    r8d,0x0
   14f6e:	b9 01 00 00 00       	mov    ecx,0x1
   14f73:	ba 00 40 00 00       	mov    edx,0x4000
   14f78:	48 89 c7             	mov    rdi,rax
   14f7b:	e8 e7 fb ff ff       	call   14b67 <stbi__do_zlib(stbi__zbuf*, char*, int, int, int)>
   14f80:	85 c0                	test   eax,eax
   14f82:	0f 95 c0             	setne  al
   14f85:	84 c0                	test   al,al
   14f87:	74 2f                	je     14fb8 <stbi_zlib_decode_noheader_malloc+0xd9>
   14f89:	48 83 bd c8 ef ff ff 00 	cmp    QWORD PTR [rbp-0x1038],0x0
   14f91:	74 1c                	je     14faf <stbi_zlib_decode_noheader_malloc+0xd0>
   14f93:	48 8b 85 08 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff8]
   14f9a:	48 8b 95 10 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xff0]
   14fa1:	48 29 d0             	sub    rax,rdx
   14fa4:	89 c2                	mov    edx,eax
   14fa6:	48 8b 85 c8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1038]
   14fad:	89 10                	mov    DWORD PTR [rax],edx
   14faf:	48 8b 85 10 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff0]
   14fb6:	eb 14                	jmp    14fcc <stbi_zlib_decode_noheader_malloc+0xed>
   14fb8:	48 8b 85 10 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff0]
   14fbf:	48 89 c7             	mov    rdi,rax
   14fc2:	e8 69 f5 fe ff       	call   4530 <free@plt>
   14fc7:	b8 00 00 00 00       	mov    eax,0x0
   14fcc:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   14fd0:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   14fd9:	74 05                	je     14fe0 <stbi_zlib_decode_noheader_malloc+0x101>
   14fdb:	e8 00 f5 fe ff       	call   44e0 <__stack_chk_fail@plt>
   14fe0:	c9                   	leave  
   14fe1:	c3                   	ret    

0000000000014fe2 <stbi_zlib_decode_noheader_buffer>:
   14fe2:	55                   	push   rbp
   14fe3:	48 89 e5             	mov    rbp,rsp
   14fe6:	48 81 ec 30 10 00 00 	sub    rsp,0x1030
   14fed:	48 89 bd e8 ef ff ff 	mov    QWORD PTR [rbp-0x1018],rdi
   14ff4:	89 b5 e4 ef ff ff    	mov    DWORD PTR [rbp-0x101c],esi
   14ffa:	48 89 95 d8 ef ff ff 	mov    QWORD PTR [rbp-0x1028],rdx
   15001:	89 8d e0 ef ff ff    	mov    DWORD PTR [rbp-0x1020],ecx
   15007:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   15010:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   15014:	31 c0                	xor    eax,eax
   15016:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   1501d:	48 89 85 f0 ef ff ff 	mov    QWORD PTR [rbp-0x1010],rax
   15024:	8b 85 e0 ef ff ff    	mov    eax,DWORD PTR [rbp-0x1020]
   1502a:	48 63 d0             	movsxd rdx,eax
   1502d:	48 8b 85 d8 ef ff ff 	mov    rax,QWORD PTR [rbp-0x1028]
   15034:	48 01 d0             	add    rax,rdx
   15037:	48 89 85 f8 ef ff ff 	mov    QWORD PTR [rbp-0x1008],rax
   1503e:	8b 95 e4 ef ff ff    	mov    edx,DWORD PTR [rbp-0x101c]
   15044:	48 8b b5 e8 ef ff ff 	mov    rsi,QWORD PTR [rbp-0x1018]
   1504b:	48 8d 85 f0 ef ff ff 	lea    rax,[rbp-0x1010]
   15052:	41 b8 00 00 00 00    	mov    r8d,0x0
   15058:	b9 00 00 00 00       	mov    ecx,0x0
   1505d:	48 89 c7             	mov    rdi,rax
   15060:	e8 02 fb ff ff       	call   14b67 <stbi__do_zlib(stbi__zbuf*, char*, int, int, int)>
   15065:	85 c0                	test   eax,eax
   15067:	0f 95 c0             	setne  al
   1506a:	84 c0                	test   al,al
   1506c:	74 13                	je     15081 <stbi_zlib_decode_noheader_buffer+0x9f>
   1506e:	48 8b 85 08 f0 ff ff 	mov    rax,QWORD PTR [rbp-0xff8]
   15075:	48 8b 95 10 f0 ff ff 	mov    rdx,QWORD PTR [rbp-0xff0]
   1507c:	48 29 d0             	sub    rax,rdx
   1507f:	eb 05                	jmp    15086 <stbi_zlib_decode_noheader_buffer+0xa4>
   15081:	b8 ff ff ff ff       	mov    eax,0xffffffff
   15086:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1508a:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   15093:	74 05                	je     1509a <stbi_zlib_decode_noheader_buffer+0xb8>
   15095:	e8 46 f4 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1509a:	c9                   	leave  
   1509b:	c3                   	ret    

000000000001509c <stbi__get_chunk_header(stbi__context*)>:
   1509c:	55                   	push   rbp
   1509d:	48 89 e5             	mov    rbp,rsp
   150a0:	48 83 ec 20          	sub    rsp,0x20
   150a4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   150a8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   150b1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   150b5:	31 c0                	xor    eax,eax
   150b7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   150bb:	48 89 c7             	mov    rdi,rax
   150be:	e8 6f 17 ff ff       	call   6832 <stbi__get32be(stbi__context*)>
   150c3:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   150c6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   150ca:	48 89 c7             	mov    rdi,rax
   150cd:	e8 60 17 ff ff       	call   6832 <stbi__get32be(stbi__context*)>
   150d2:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   150d5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   150d9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   150dd:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   150e6:	74 05                	je     150ed <stbi__get_chunk_header(stbi__context*)+0x51>
   150e8:	e8 f3 f3 fe ff       	call   44e0 <__stack_chk_fail@plt>
   150ed:	c9                   	leave  
   150ee:	c3                   	ret    

00000000000150ef <stbi__check_png_header(stbi__context*)>:
   150ef:	55                   	push   rbp
   150f0:	48 89 e5             	mov    rbp,rsp
   150f3:	48 83 ec 20          	sub    rsp,0x20
   150f7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   150fb:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   15102:	eb 3b                	jmp    1513f <stbi__check_png_header(stbi__context*)+0x50>
   15104:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   15108:	48 89 c7             	mov    rdi,rax
   1510b:	e8 01 14 ff ff       	call   6511 <stbi__get8(stbi__context*)>
   15110:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   15113:	48 63 d2             	movsxd rdx,edx
   15116:	48 8d 0d c3 5a 02 00 	lea    rcx,[rip+0x25ac3]        # 3abe0 <stbi__check_png_header(stbi__context*)::png_sig>
   1511d:	0f b6 14 0a          	movzx  edx,BYTE PTR [rdx+rcx*1]
   15121:	38 d0                	cmp    al,dl
   15123:	0f 95 c0             	setne  al
   15126:	84 c0                	test   al,al
   15128:	74 11                	je     1513b <stbi__check_png_header(stbi__context*)+0x4c>
   1512a:	48 8d 05 b7 5a 02 00 	lea    rax,[rip+0x25ab7]        # 3abe8 <stbi__check_png_header(stbi__context*)::png_sig+0x8>
   15131:	48 89 c7             	mov    rdi,rax
   15134:	e8 39 fa fe ff       	call   4b72 <stbi__err(char const*)>
   15139:	eb 0f                	jmp    1514a <stbi__check_png_header(stbi__context*)+0x5b>
   1513b:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1513f:	83 7d fc 07          	cmp    DWORD PTR [rbp-0x4],0x7
   15143:	7e bf                	jle    15104 <stbi__check_png_header(stbi__context*)+0x15>
   15145:	b8 01 00 00 00       	mov    eax,0x1
   1514a:	c9                   	leave  
   1514b:	c3                   	ret    

000000000001514c <stbi__paeth(int, int, int)>:
   1514c:	55                   	push   rbp
   1514d:	48 89 e5             	mov    rbp,rsp
   15150:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   15153:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   15156:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
   15159:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   1515c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1515f:	01 d0                	add    eax,edx
   15161:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
   15164:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   15167:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1516a:	2b 45 ec             	sub    eax,DWORD PTR [rbp-0x14]
   1516d:	89 c2                	mov    edx,eax
   1516f:	f7 da                	neg    edx
   15171:	0f 49 c2             	cmovns eax,edx
   15174:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   15177:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1517a:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
   1517d:	89 c2                	mov    edx,eax
   1517f:	f7 da                	neg    edx
   15181:	0f 49 c2             	cmovns eax,edx
   15184:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   15187:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1518a:	2b 45 e4             	sub    eax,DWORD PTR [rbp-0x1c]
   1518d:	89 c2                	mov    edx,eax
   1518f:	f7 da                	neg    edx
   15191:	0f 49 c2             	cmovns eax,edx
   15194:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   15197:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1519a:	3b 45 f8             	cmp    eax,DWORD PTR [rbp-0x8]
   1519d:	7f 0d                	jg     151ac <stbi__paeth(int, int, int)+0x60>
   1519f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   151a2:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
   151a5:	7f 05                	jg     151ac <stbi__paeth(int, int, int)+0x60>
   151a7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   151aa:	eb 10                	jmp    151bc <stbi__paeth(int, int, int)+0x70>
   151ac:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   151af:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
   151b2:	7f 05                	jg     151b9 <stbi__paeth(int, int, int)+0x6d>
   151b4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   151b7:	eb 03                	jmp    151bc <stbi__paeth(int, int, int)+0x70>
   151b9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   151bc:	5d                   	pop    rbp
   151bd:	c3                   	ret    

00000000000151be <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)>:
   151be:	55                   	push   rbp
   151bf:	48 89 e5             	mov    rbp,rsp
   151c2:	53                   	push   rbx
   151c3:	48 81 ec a8 00 00 00 	sub    rsp,0xa8
   151ca:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
   151d1:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
   151d8:	89 95 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],edx
   151de:	89 8d 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],ecx
   151e4:	44 89 85 54 ff ff ff 	mov    DWORD PTR [rbp-0xac],r8d
   151eb:	44 89 8d 50 ff ff ff 	mov    DWORD PTR [rbp-0xb0],r9d
   151f2:	83 7d 10 10          	cmp    DWORD PTR [rbp+0x10],0x10
   151f6:	75 07                	jne    151ff <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x41>
   151f8:	b8 02 00 00 00       	mov    eax,0x2
   151fd:	eb 05                	jmp    15204 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x46>
   151ff:	b8 01 00 00 00       	mov    eax,0x1
   15204:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
   15207:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   1520e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   15211:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   15215:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   1521b:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   15222:	89 c2                	mov    edx,eax
   15224:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
   15227:	0f af c2             	imul   eax,edx
   1522a:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
   1522d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   15231:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   15234:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   15237:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   1523d:	0f af 45 9c          	imul   eax,DWORD PTR [rbp-0x64]
   15241:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
   15244:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15247:	0f af 45 9c          	imul   eax,DWORD PTR [rbp-0x64]
   1524b:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
   1524e:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15254:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
   15257:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1525b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1525e:	39 85 58 ff ff ff    	cmp    DWORD PTR [rbp-0xa8],eax
   15264:	74 3a                	je     152a0 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xe2>
   15266:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1526a:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1526d:	83 c0 01             	add    eax,0x1
   15270:	39 85 58 ff ff ff    	cmp    DWORD PTR [rbp-0xa8],eax
   15276:	74 28                	je     152a0 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xe2>
   15278:	48 8d 05 89 59 02 00 	lea    rax,[rip+0x25989]        # 3ac08 <stbi__depth_scale_table+0x10>
   1527f:	48 89 c1             	mov    rcx,rax
   15282:	ba 8b 11 00 00       	mov    edx,0x118b
   15287:	48 8d 05 0a 4e 02 00 	lea    rax,[rip+0x24e0a]        # 3a098 <_IO_stdin_used+0x98>
   1528e:	48 89 c6             	mov    rsi,rax
   15291:	48 8d 05 e0 59 02 00 	lea    rax,[rip+0x259e0]        # 3ac78 <stbi__depth_scale_table+0x80>
   15298:	48 89 c7             	mov    rdi,rax
   1529b:	e8 e0 ef fe ff       	call   4280 <__assert_fail@plt>
   152a0:	8b b5 50 ff ff ff    	mov    esi,DWORD PTR [rbp-0xb0]
   152a6:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   152ac:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   152af:	b9 00 00 00 00       	mov    ecx,0x0
   152b4:	89 c7                	mov    edi,eax
   152b6:	e8 e6 fa fe ff       	call   4da1 <stbi__malloc_mad3(int, int, int, int)>
   152bb:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
   152c2:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
   152c6:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   152cd:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   152d1:	48 85 c0             	test   rax,rax
   152d4:	75 14                	jne    152ea <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x12c>
   152d6:	48 8d 05 56 4d 02 00 	lea    rax,[rip+0x24d56]        # 3a033 <_IO_stdin_used+0x33>
   152dd:	48 89 c7             	mov    rdi,rax
   152e0:	e8 8d f8 fe ff       	call   4b72 <stbi__err(char const*)>
   152e5:	e9 96 12 00 00       	jmp    16580 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x13c2>
   152ea:	8b b5 54 ff ff ff    	mov    esi,DWORD PTR [rbp-0xac]
   152f0:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   152f3:	b9 07 00 00 00       	mov    ecx,0x7
   152f8:	8b 55 10             	mov    edx,DWORD PTR [rbp+0x10]
   152fb:	89 c7                	mov    edi,eax
   152fd:	e8 5a f9 fe ff       	call   4c5c <stbi__mad3sizes_valid(int, int, int, int)>
   15302:	85 c0                	test   eax,eax
   15304:	0f 94 c0             	sete   al
   15307:	84 c0                	test   al,al
   15309:	74 14                	je     1531f <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x161>
   1530b:	48 8d 05 3a 53 02 00 	lea    rax,[rip+0x2533a]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   15312:	48 89 c7             	mov    rdi,rax
   15315:	e8 58 f8 fe ff       	call   4b72 <stbi__err(char const*)>
   1531a:	e9 61 12 00 00       	jmp    16580 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x13c2>
   1531f:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15322:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   15329:	89 c2                	mov    edx,eax
   1532b:	8b 45 10             	mov    eax,DWORD PTR [rbp+0x10]
   1532e:	0f af c2             	imul   eax,edx
   15331:	83 c0 07             	add    eax,0x7
   15334:	c1 e8 03             	shr    eax,0x3
   15337:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
   1533a:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   1533d:	8d 50 01             	lea    edx,[rax+0x1]
   15340:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   15346:	0f af c2             	imul   eax,edx
   15349:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
   1534c:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   15352:	3b 45 b0             	cmp    eax,DWORD PTR [rbp-0x50]
   15355:	73 14                	jae    1536b <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1ad>
   15357:	48 8d 05 43 59 02 00 	lea    rax,[rip+0x25943]        # 3aca1 <stbi__depth_scale_table+0xa9>
   1535e:	48 89 c7             	mov    rdi,rax
   15361:	e8 0c f8 fe ff       	call   4b72 <stbi__err(char const*)>
   15366:	e9 15 12 00 00       	jmp    16580 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x13c2>
   1536b:	c7 45 84 00 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x0
   15372:	e9 4c 0b 00 00       	jmp    15ec3 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xd05>
   15377:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   1537e:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   15382:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   15385:	0f af 45 84          	imul   eax,DWORD PTR [rbp-0x7c]
   15389:	89 c0                	mov    eax,eax
   1538b:	48 01 d0             	add    rax,rdx
   1538e:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   15392:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15399:	48 8d 50 01          	lea    rdx,[rax+0x1]
   1539d:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
   153a4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   153a7:	0f b6 c0             	movzx  eax,al
   153aa:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
   153ad:	83 7d 94 04          	cmp    DWORD PTR [rbp-0x6c],0x4
   153b1:	7e 14                	jle    153c7 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x209>
   153b3:	48 8d 05 f9 58 02 00 	lea    rax,[rip+0x258f9]        # 3acb3 <stbi__depth_scale_table+0xbb>
   153ba:	48 89 c7             	mov    rdi,rax
   153bd:	e8 b0 f7 fe ff       	call   4b72 <stbi__err(char const*)>
   153c2:	e9 b9 11 00 00       	jmp    16580 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x13c2>
   153c7:	83 7d 10 07          	cmp    DWORD PTR [rbp+0x10],0x7
   153cb:	7f 56                	jg     15423 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x265>
   153cd:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   153d0:	3b 85 54 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xac]
   153d6:	76 28                	jbe    15400 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x242>
   153d8:	48 8d 05 29 58 02 00 	lea    rax,[rip+0x25829]        # 3ac08 <stbi__depth_scale_table+0x10>
   153df:	48 89 c1             	mov    rcx,rax
   153e2:	ba a1 11 00 00       	mov    edx,0x11a1
   153e7:	48 8d 05 aa 4c 02 00 	lea    rax,[rip+0x24caa]        # 3a098 <_IO_stdin_used+0x98>
   153ee:	48 89 c6             	mov    rsi,rax
   153f1:	48 8d 05 ca 58 02 00 	lea    rax,[rip+0x258ca]        # 3acc2 <stbi__depth_scale_table+0xca>
   153f8:	48 89 c7             	mov    rdi,rax
   153fb:	e8 80 ee fe ff       	call   4280 <__assert_fail@plt>
   15400:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   15406:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   1540d:	2b 45 ac             	sub    eax,DWORD PTR [rbp-0x54]
   15410:	89 c0                	mov    eax,eax
   15412:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15416:	c7 45 8c 01 00 00 00 	mov    DWORD PTR [rbp-0x74],0x1
   1541d:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   15420:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
   15423:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   15426:	48 f7 d8             	neg    rax
   15429:	48 89 c2             	mov    rdx,rax
   1542c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15430:	48 01 d0             	add    rax,rdx
   15433:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   15437:	83 7d 84 00          	cmp    DWORD PTR [rbp-0x7c],0x0
   1543b:	75 16                	jne    15453 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x295>
   1543d:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   15440:	48 98                	cdqe   
   15442:	48 8d 15 07 50 03 00 	lea    rdx,[rip+0x35007]        # 4a450 <first_row_filter>
   15449:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
   1544d:	0f b6 c0             	movzx  eax,al
   15450:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
   15453:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   1545a:	e9 89 01 00 00       	jmp    155e8 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x42a>
   1545f:	83 7d 94 06          	cmp    DWORD PTR [rbp-0x6c],0x6
   15463:	0f 87 7b 01 00 00    	ja     155e4 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x426>
   15469:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   1546c:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   15474:	48 8d 05 79 58 02 00 	lea    rax,[rip+0x25879]        # 3acf4 <stbi__depth_scale_table+0xfc>
   1547b:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   1547e:	48 98                	cdqe   
   15480:	48 8d 15 6d 58 02 00 	lea    rdx,[rip+0x2586d]        # 3acf4 <stbi__depth_scale_table+0xfc>
   15487:	48 01 d0             	add    rax,rdx
   1548a:	ff e0                	jmp    rax
   1548c:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1548f:	48 63 d0             	movsxd rdx,eax
   15492:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15499:	48 01 d0             	add    rax,rdx
   1549c:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
   1549f:	48 63 ca             	movsxd rcx,edx
   154a2:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   154a6:	48 01 ca             	add    rdx,rcx
   154a9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   154ac:	88 02                	mov    BYTE PTR [rdx],al
   154ae:	e9 31 01 00 00       	jmp    155e4 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x426>
   154b3:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   154b6:	48 63 d0             	movsxd rdx,eax
   154b9:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   154c0:	48 01 d0             	add    rax,rdx
   154c3:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
   154c6:	48 63 ca             	movsxd rcx,edx
   154c9:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   154cd:	48 01 ca             	add    rdx,rcx
   154d0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   154d3:	88 02                	mov    BYTE PTR [rdx],al
   154d5:	e9 0a 01 00 00       	jmp    155e4 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x426>
   154da:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   154dd:	48 63 d0             	movsxd rdx,eax
   154e0:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   154e7:	48 01 d0             	add    rax,rdx
   154ea:	0f b6 08             	movzx  ecx,BYTE PTR [rax]
   154ed:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   154f0:	48 63 d0             	movsxd rdx,eax
   154f3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   154f7:	48 01 d0             	add    rax,rdx
   154fa:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   154fd:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15500:	48 63 f0             	movsxd rsi,eax
   15503:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15507:	48 01 f0             	add    rax,rsi
   1550a:	01 ca                	add    edx,ecx
   1550c:	88 10                	mov    BYTE PTR [rax],dl
   1550e:	e9 d1 00 00 00       	jmp    155e4 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x426>
   15513:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15516:	48 63 d0             	movsxd rdx,eax
   15519:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15520:	48 01 d0             	add    rax,rdx
   15523:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   15526:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15529:	48 63 c8             	movsxd rcx,eax
   1552c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   15530:	48 01 c8             	add    rax,rcx
   15533:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15536:	d0 e8                	shr    al,1
   15538:	89 c6                	mov    esi,eax
   1553a:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1553d:	48 63 c8             	movsxd rcx,eax
   15540:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15544:	48 01 c8             	add    rax,rcx
   15547:	01 f2                	add    edx,esi
   15549:	88 10                	mov    BYTE PTR [rax],dl
   1554b:	e9 94 00 00 00       	jmp    155e4 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x426>
   15550:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15553:	48 63 d0             	movsxd rdx,eax
   15556:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   1555d:	48 01 d0             	add    rax,rdx
   15560:	0f b6 18             	movzx  ebx,BYTE PTR [rax]
   15563:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15566:	48 63 d0             	movsxd rdx,eax
   15569:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1556d:	48 01 d0             	add    rax,rdx
   15570:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15573:	0f b6 c0             	movzx  eax,al
   15576:	ba 00 00 00 00       	mov    edx,0x0
   1557b:	89 c6                	mov    esi,eax
   1557d:	bf 00 00 00 00       	mov    edi,0x0
   15582:	e8 c5 fb ff ff       	call   1514c <stbi__paeth(int, int, int)>
   15587:	89 c1                	mov    ecx,eax
   15589:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1558c:	48 63 d0             	movsxd rdx,eax
   1558f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15593:	48 01 d0             	add    rax,rdx
   15596:	8d 14 0b             	lea    edx,[rbx+rcx*1]
   15599:	88 10                	mov    BYTE PTR [rax],dl
   1559b:	eb 47                	jmp    155e4 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x426>
   1559d:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   155a0:	48 63 d0             	movsxd rdx,eax
   155a3:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   155aa:	48 01 d0             	add    rax,rdx
   155ad:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
   155b0:	48 63 ca             	movsxd rcx,edx
   155b3:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   155b7:	48 01 ca             	add    rdx,rcx
   155ba:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   155bd:	88 02                	mov    BYTE PTR [rdx],al
   155bf:	eb 23                	jmp    155e4 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x426>
   155c1:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   155c4:	48 63 d0             	movsxd rdx,eax
   155c7:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   155ce:	48 01 d0             	add    rax,rdx
   155d1:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
   155d4:	48 63 ca             	movsxd rcx,edx
   155d7:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   155db:	48 01 ca             	add    rdx,rcx
   155de:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   155e1:	88 02                	mov    BYTE PTR [rdx],al
   155e3:	90                   	nop
   155e4:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   155e8:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   155eb:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   155ee:	0f 8c 6b fe ff ff    	jl     1545f <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x2a1>
   155f4:	83 7d 10 08          	cmp    DWORD PTR [rbp+0x10],0x8
   155f8:	75 41                	jne    1563b <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x47d>
   155fa:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   155fd:	3b 85 58 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xa8]
   15603:	74 10                	je     15615 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x457>
   15605:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15608:	48 63 d0             	movsxd rdx,eax
   1560b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1560f:	48 01 d0             	add    rax,rdx
   15612:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15615:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15618:	48 98                	cdqe   
   1561a:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   15621:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   15627:	48 98                	cdqe   
   15629:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   1562d:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   15633:	48 98                	cdqe   
   15635:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   15639:	eb 66                	jmp    156a1 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x4e3>
   1563b:	83 7d 10 10          	cmp    DWORD PTR [rbp+0x10],0x10
   1563f:	75 4e                	jne    1568f <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x4d1>
   15641:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15644:	3b 85 58 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xa8]
   1564a:	74 23                	je     1566f <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x4b1>
   1564c:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1564f:	48 63 d0             	movsxd rdx,eax
   15652:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15656:	48 01 d0             	add    rax,rdx
   15659:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   1565c:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1565f:	48 98                	cdqe   
   15661:	48 8d 50 01          	lea    rdx,[rax+0x1]
   15665:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15669:	48 01 d0             	add    rax,rdx
   1566c:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   1566f:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15672:	48 98                	cdqe   
   15674:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   1567b:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   1567e:	48 98                	cdqe   
   15680:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15684:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15687:	48 98                	cdqe   
   15689:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   1568d:	eb 12                	jmp    156a1 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x4e3>
   1568f:	48 83 85 60 ff ff ff 01 	add    QWORD PTR [rbp-0xa0],0x1
   15697:	48 83 45 b8 01       	add    QWORD PTR [rbp-0x48],0x1
   1569c:	48 83 45 c0 01       	add    QWORD PTR [rbp-0x40],0x1
   156a1:	83 7d 10 07          	cmp    DWORD PTR [rbp+0x10],0x7
   156a5:	7e 0f                	jle    156b6 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x4f8>
   156a7:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   156aa:	3b 85 58 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xa8]
   156b0:	0f 85 b9 02 00 00    	jne    1596f <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x7b1>
   156b6:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   156b9:	8d 50 ff             	lea    edx,[rax-0x1]
   156bc:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   156bf:	0f af c2             	imul   eax,edx
   156c2:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
   156c5:	83 7d 94 06          	cmp    DWORD PTR [rbp-0x6c],0x6
   156c9:	0f 87 8f 02 00 00    	ja     1595e <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x7a0>
   156cf:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   156d2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   156da:	48 8d 05 2f 56 02 00 	lea    rax,[rip+0x2562f]        # 3ad10 <stbi__depth_scale_table+0x118>
   156e1:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   156e4:	48 98                	cdqe   
   156e6:	48 8d 15 23 56 02 00 	lea    rdx,[rip+0x25623]        # 3ad10 <stbi__depth_scale_table+0x118>
   156ed:	48 01 d0             	add    rax,rdx
   156f0:	ff e0                	jmp    rax
   156f2:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   156f5:	48 63 d0             	movsxd rdx,eax
   156f8:	48 8b 8d 60 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xa0]
   156ff:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15703:	48 89 ce             	mov    rsi,rcx
   15706:	48 89 c7             	mov    rdi,rax
   15709:	e8 62 ec fe ff       	call   4370 <memcpy@plt>
   1570e:	e9 4b 02 00 00       	jmp    1595e <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x7a0>
   15713:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   1571a:	eb 3b                	jmp    15757 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x599>
   1571c:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1571f:	48 63 d0             	movsxd rdx,eax
   15722:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15729:	48 01 d0             	add    rax,rdx
   1572c:	0f b6 08             	movzx  ecx,BYTE PTR [rax]
   1572f:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15732:	2b 45 8c             	sub    eax,DWORD PTR [rbp-0x74]
   15735:	48 63 d0             	movsxd rdx,eax
   15738:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1573c:	48 01 d0             	add    rax,rdx
   1573f:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   15742:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15745:	48 63 f0             	movsxd rsi,eax
   15748:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1574c:	48 01 f0             	add    rax,rsi
   1574f:	01 ca                	add    edx,ecx
   15751:	88 10                	mov    BYTE PTR [rax],dl
   15753:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15757:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1575a:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
   1575d:	7c bd                	jl     1571c <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x55e>
   1575f:	e9 fa 01 00 00       	jmp    1595e <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x7a0>
   15764:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   1576b:	eb 38                	jmp    157a5 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x5e7>
   1576d:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15770:	48 63 d0             	movsxd rdx,eax
   15773:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   1577a:	48 01 d0             	add    rax,rdx
   1577d:	0f b6 08             	movzx  ecx,BYTE PTR [rax]
   15780:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15783:	48 63 d0             	movsxd rdx,eax
   15786:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1578a:	48 01 d0             	add    rax,rdx
   1578d:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   15790:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15793:	48 63 f0             	movsxd rsi,eax
   15796:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1579a:	48 01 f0             	add    rax,rsi
   1579d:	01 ca                	add    edx,ecx
   1579f:	88 10                	mov    BYTE PTR [rax],dl
   157a1:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   157a5:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   157a8:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
   157ab:	7c c0                	jl     1576d <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x5af>
   157ad:	e9 ac 01 00 00       	jmp    1595e <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x7a0>
   157b2:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   157b9:	eb 57                	jmp    15812 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x654>
   157bb:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   157be:	48 63 d0             	movsxd rdx,eax
   157c1:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   157c8:	48 01 d0             	add    rax,rdx
   157cb:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   157ce:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   157d1:	48 63 c8             	movsxd rcx,eax
   157d4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   157d8:	48 01 c8             	add    rax,rcx
   157db:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   157de:	0f b6 c8             	movzx  ecx,al
   157e1:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   157e4:	2b 45 8c             	sub    eax,DWORD PTR [rbp-0x74]
   157e7:	48 63 f0             	movsxd rsi,eax
   157ea:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   157ee:	48 01 f0             	add    rax,rsi
   157f1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   157f4:	0f b6 c0             	movzx  eax,al
   157f7:	01 c8                	add    eax,ecx
   157f9:	d1 f8                	sar    eax,1
   157fb:	89 c6                	mov    esi,eax
   157fd:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15800:	48 63 c8             	movsxd rcx,eax
   15803:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15807:	48 01 c8             	add    rax,rcx
   1580a:	01 f2                	add    edx,esi
   1580c:	88 10                	mov    BYTE PTR [rax],dl
   1580e:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15812:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15815:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
   15818:	7c a1                	jl     157bb <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x5fd>
   1581a:	e9 3f 01 00 00       	jmp    1595e <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x7a0>
   1581f:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15826:	eb 73                	jmp    1589b <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x6dd>
   15828:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1582b:	48 63 d0             	movsxd rdx,eax
   1582e:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15835:	48 01 d0             	add    rax,rdx
   15838:	0f b6 18             	movzx  ebx,BYTE PTR [rax]
   1583b:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1583e:	2b 45 8c             	sub    eax,DWORD PTR [rbp-0x74]
   15841:	48 63 d0             	movsxd rdx,eax
   15844:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   15848:	48 01 d0             	add    rax,rdx
   1584b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1584e:	0f b6 d0             	movzx  edx,al
   15851:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15854:	48 63 c8             	movsxd rcx,eax
   15857:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1585b:	48 01 c8             	add    rax,rcx
   1585e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15861:	0f b6 c8             	movzx  ecx,al
   15864:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15867:	2b 45 8c             	sub    eax,DWORD PTR [rbp-0x74]
   1586a:	48 63 f0             	movsxd rsi,eax
   1586d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15871:	48 01 f0             	add    rax,rsi
   15874:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15877:	0f b6 c0             	movzx  eax,al
   1587a:	89 ce                	mov    esi,ecx
   1587c:	89 c7                	mov    edi,eax
   1587e:	e8 c9 f8 ff ff       	call   1514c <stbi__paeth(int, int, int)>
   15883:	89 c1                	mov    ecx,eax
   15885:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15888:	48 63 d0             	movsxd rdx,eax
   1588b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1588f:	48 01 d0             	add    rax,rdx
   15892:	8d 14 0b             	lea    edx,[rbx+rcx*1]
   15895:	88 10                	mov    BYTE PTR [rax],dl
   15897:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   1589b:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1589e:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
   158a1:	7c 85                	jl     15828 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x66a>
   158a3:	e9 b6 00 00 00       	jmp    1595e <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x7a0>
   158a8:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   158af:	eb 3f                	jmp    158f0 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x732>
   158b1:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   158b4:	48 63 d0             	movsxd rdx,eax
   158b7:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   158be:	48 01 d0             	add    rax,rdx
   158c1:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   158c4:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   158c7:	2b 45 8c             	sub    eax,DWORD PTR [rbp-0x74]
   158ca:	48 63 c8             	movsxd rcx,eax
   158cd:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   158d1:	48 01 c8             	add    rax,rcx
   158d4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   158d7:	d0 e8                	shr    al,1
   158d9:	89 c6                	mov    esi,eax
   158db:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   158de:	48 63 c8             	movsxd rcx,eax
   158e1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   158e5:	48 01 c8             	add    rax,rcx
   158e8:	01 f2                	add    edx,esi
   158ea:	88 10                	mov    BYTE PTR [rax],dl
   158ec:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   158f0:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   158f3:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
   158f6:	7c b9                	jl     158b1 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x6f3>
   158f8:	eb 64                	jmp    1595e <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x7a0>
   158fa:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15901:	eb 52                	jmp    15955 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x797>
   15903:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15906:	48 63 d0             	movsxd rdx,eax
   15909:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15910:	48 01 d0             	add    rax,rdx
   15913:	0f b6 18             	movzx  ebx,BYTE PTR [rax]
   15916:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15919:	2b 45 8c             	sub    eax,DWORD PTR [rbp-0x74]
   1591c:	48 63 d0             	movsxd rdx,eax
   1591f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15923:	48 01 d0             	add    rax,rdx
   15926:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15929:	0f b6 c0             	movzx  eax,al
   1592c:	ba 00 00 00 00       	mov    edx,0x0
   15931:	be 00 00 00 00       	mov    esi,0x0
   15936:	89 c7                	mov    edi,eax
   15938:	e8 0f f8 ff ff       	call   1514c <stbi__paeth(int, int, int)>
   1593d:	89 c1                	mov    ecx,eax
   1593f:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15942:	48 63 d0             	movsxd rdx,eax
   15945:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15949:	48 01 d0             	add    rax,rdx
   1594c:	8d 14 0b             	lea    edx,[rbx+rcx*1]
   1594f:	88 10                	mov    BYTE PTR [rax],dl
   15951:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15955:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15958:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
   1595b:	7c a6                	jl     15903 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x745>
   1595d:	90                   	nop
   1595e:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   15961:	48 98                	cdqe   
   15963:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   1596a:	e9 50 05 00 00       	jmp    15ebf <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xd01>
   1596f:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15972:	83 c0 01             	add    eax,0x1
   15975:	39 85 58 ff ff ff    	cmp    DWORD PTR [rbp-0xa8],eax
   1597b:	74 28                	je     159a5 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x7e7>
   1597d:	48 8d 05 84 52 02 00 	lea    rax,[rip+0x25284]        # 3ac08 <stbi__depth_scale_table+0x10>
   15984:	48 89 c1             	mov    rcx,rax
   15987:	ba df 11 00 00       	mov    edx,0x11df
   1598c:	48 8d 05 05 47 02 00 	lea    rax,[rip+0x24705]        # 3a098 <_IO_stdin_used+0x98>
   15993:	48 89 c6             	mov    rsi,rax
   15996:	48 8d 05 3a 53 02 00 	lea    rax,[rip+0x2533a]        # 3acd7 <stbi__depth_scale_table+0xdf>
   1599d:	48 89 c7             	mov    rdi,rax
   159a0:	e8 db e8 fe ff       	call   4280 <__assert_fail@plt>
   159a5:	83 7d 94 06          	cmp    DWORD PTR [rbp-0x6c],0x6
   159a9:	0f 87 bb 04 00 00    	ja     15e6a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xcac>
   159af:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   159b2:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   159ba:	48 8d 05 6b 53 02 00 	lea    rax,[rip+0x2536b]        # 3ad2c <stbi__depth_scale_table+0x134>
   159c1:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   159c4:	48 98                	cdqe   
   159c6:	48 8d 15 5f 53 02 00 	lea    rdx,[rip+0x2535f]        # 3ad2c <stbi__depth_scale_table+0x134>
   159cd:	48 01 d0             	add    rax,rdx
   159d0:	ff e0                	jmp    rax
   159d2:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   159d8:	83 e8 01             	sub    eax,0x1
   159db:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   159de:	eb 69                	jmp    15a49 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x88b>
   159e0:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   159e7:	eb 26                	jmp    15a0f <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x851>
   159e9:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   159ec:	48 63 d0             	movsxd rdx,eax
   159ef:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   159f6:	48 01 d0             	add    rax,rdx
   159f9:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
   159fc:	48 63 ca             	movsxd rcx,edx
   159ff:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   15a03:	48 01 ca             	add    rdx,rcx
   15a06:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15a09:	88 02                	mov    BYTE PTR [rdx],al
   15a0b:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15a0f:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15a12:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   15a15:	7c d2                	jl     159e9 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x82b>
   15a17:	83 6d 80 01          	sub    DWORD PTR [rbp-0x80],0x1
   15a1b:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15a1e:	48 63 d0             	movsxd rdx,eax
   15a21:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15a25:	48 01 d0             	add    rax,rdx
   15a28:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15a2b:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15a2e:	48 98                	cdqe   
   15a30:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   15a37:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15a3a:	48 98                	cdqe   
   15a3c:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15a40:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15a43:	48 98                	cdqe   
   15a45:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   15a49:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   15a4d:	75 91                	jne    159e0 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x822>
   15a4f:	e9 16 04 00 00       	jmp    15e6a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xcac>
   15a54:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15a5a:	83 e8 01             	sub    eax,0x1
   15a5d:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   15a60:	eb 7e                	jmp    15ae0 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x922>
   15a62:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15a69:	eb 3b                	jmp    15aa6 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x8e8>
   15a6b:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15a6e:	48 63 d0             	movsxd rdx,eax
   15a71:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15a78:	48 01 d0             	add    rax,rdx
   15a7b:	0f b6 08             	movzx  ecx,BYTE PTR [rax]
   15a7e:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15a81:	2b 45 a8             	sub    eax,DWORD PTR [rbp-0x58]
   15a84:	48 63 d0             	movsxd rdx,eax
   15a87:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15a8b:	48 01 d0             	add    rax,rdx
   15a8e:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   15a91:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15a94:	48 63 f0             	movsxd rsi,eax
   15a97:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15a9b:	48 01 f0             	add    rax,rsi
   15a9e:	01 ca                	add    edx,ecx
   15aa0:	88 10                	mov    BYTE PTR [rax],dl
   15aa2:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15aa6:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15aa9:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   15aac:	7c bd                	jl     15a6b <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x8ad>
   15aae:	83 6d 80 01          	sub    DWORD PTR [rbp-0x80],0x1
   15ab2:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15ab5:	48 63 d0             	movsxd rdx,eax
   15ab8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15abc:	48 01 d0             	add    rax,rdx
   15abf:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15ac2:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15ac5:	48 98                	cdqe   
   15ac7:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   15ace:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15ad1:	48 98                	cdqe   
   15ad3:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15ad7:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15ada:	48 98                	cdqe   
   15adc:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   15ae0:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   15ae4:	0f 85 78 ff ff ff    	jne    15a62 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x8a4>
   15aea:	e9 7b 03 00 00       	jmp    15e6a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xcac>
   15aef:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15af5:	83 e8 01             	sub    eax,0x1
   15af8:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   15afb:	eb 7b                	jmp    15b78 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x9ba>
   15afd:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15b04:	eb 38                	jmp    15b3e <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x980>
   15b06:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15b09:	48 63 d0             	movsxd rdx,eax
   15b0c:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15b13:	48 01 d0             	add    rax,rdx
   15b16:	0f b6 08             	movzx  ecx,BYTE PTR [rax]
   15b19:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15b1c:	48 63 d0             	movsxd rdx,eax
   15b1f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   15b23:	48 01 d0             	add    rax,rdx
   15b26:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   15b29:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15b2c:	48 63 f0             	movsxd rsi,eax
   15b2f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15b33:	48 01 f0             	add    rax,rsi
   15b36:	01 ca                	add    edx,ecx
   15b38:	88 10                	mov    BYTE PTR [rax],dl
   15b3a:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15b3e:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15b41:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   15b44:	7c c0                	jl     15b06 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x948>
   15b46:	83 6d 80 01          	sub    DWORD PTR [rbp-0x80],0x1
   15b4a:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15b4d:	48 63 d0             	movsxd rdx,eax
   15b50:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15b54:	48 01 d0             	add    rax,rdx
   15b57:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15b5a:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15b5d:	48 98                	cdqe   
   15b5f:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   15b66:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15b69:	48 98                	cdqe   
   15b6b:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15b6f:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15b72:	48 98                	cdqe   
   15b74:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   15b78:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   15b7c:	0f 85 7b ff ff ff    	jne    15afd <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x93f>
   15b82:	e9 e3 02 00 00       	jmp    15e6a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xcac>
   15b87:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15b8d:	83 e8 01             	sub    eax,0x1
   15b90:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   15b93:	e9 9a 00 00 00       	jmp    15c32 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xa74>
   15b98:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15b9f:	eb 57                	jmp    15bf8 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xa3a>
   15ba1:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15ba4:	48 63 d0             	movsxd rdx,eax
   15ba7:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15bae:	48 01 d0             	add    rax,rdx
   15bb1:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   15bb4:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15bb7:	48 63 c8             	movsxd rcx,eax
   15bba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   15bbe:	48 01 c8             	add    rax,rcx
   15bc1:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15bc4:	0f b6 c8             	movzx  ecx,al
   15bc7:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15bca:	2b 45 a8             	sub    eax,DWORD PTR [rbp-0x58]
   15bcd:	48 63 f0             	movsxd rsi,eax
   15bd0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15bd4:	48 01 f0             	add    rax,rsi
   15bd7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15bda:	0f b6 c0             	movzx  eax,al
   15bdd:	01 c8                	add    eax,ecx
   15bdf:	d1 f8                	sar    eax,1
   15be1:	89 c6                	mov    esi,eax
   15be3:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15be6:	48 63 c8             	movsxd rcx,eax
   15be9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15bed:	48 01 c8             	add    rax,rcx
   15bf0:	01 f2                	add    edx,esi
   15bf2:	88 10                	mov    BYTE PTR [rax],dl
   15bf4:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15bf8:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15bfb:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   15bfe:	7c a1                	jl     15ba1 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x9e3>
   15c00:	83 6d 80 01          	sub    DWORD PTR [rbp-0x80],0x1
   15c04:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15c07:	48 63 d0             	movsxd rdx,eax
   15c0a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15c0e:	48 01 d0             	add    rax,rdx
   15c11:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15c14:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15c17:	48 98                	cdqe   
   15c19:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   15c20:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15c23:	48 98                	cdqe   
   15c25:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15c29:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15c2c:	48 98                	cdqe   
   15c2e:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   15c32:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   15c36:	0f 85 5c ff ff ff    	jne    15b98 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x9da>
   15c3c:	e9 29 02 00 00       	jmp    15e6a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xcac>
   15c41:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15c47:	83 e8 01             	sub    eax,0x1
   15c4a:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   15c4d:	e9 b6 00 00 00       	jmp    15d08 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xb4a>
   15c52:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15c59:	eb 73                	jmp    15cce <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xb10>
   15c5b:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15c5e:	48 63 d0             	movsxd rdx,eax
   15c61:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15c68:	48 01 d0             	add    rax,rdx
   15c6b:	0f b6 18             	movzx  ebx,BYTE PTR [rax]
   15c6e:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15c71:	2b 45 a8             	sub    eax,DWORD PTR [rbp-0x58]
   15c74:	48 63 d0             	movsxd rdx,eax
   15c77:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   15c7b:	48 01 d0             	add    rax,rdx
   15c7e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15c81:	0f b6 d0             	movzx  edx,al
   15c84:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15c87:	48 63 c8             	movsxd rcx,eax
   15c8a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   15c8e:	48 01 c8             	add    rax,rcx
   15c91:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15c94:	0f b6 c8             	movzx  ecx,al
   15c97:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15c9a:	2b 45 a8             	sub    eax,DWORD PTR [rbp-0x58]
   15c9d:	48 63 f0             	movsxd rsi,eax
   15ca0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15ca4:	48 01 f0             	add    rax,rsi
   15ca7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15caa:	0f b6 c0             	movzx  eax,al
   15cad:	89 ce                	mov    esi,ecx
   15caf:	89 c7                	mov    edi,eax
   15cb1:	e8 96 f4 ff ff       	call   1514c <stbi__paeth(int, int, int)>
   15cb6:	89 c1                	mov    ecx,eax
   15cb8:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15cbb:	48 63 d0             	movsxd rdx,eax
   15cbe:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15cc2:	48 01 d0             	add    rax,rdx
   15cc5:	8d 14 0b             	lea    edx,[rbx+rcx*1]
   15cc8:	88 10                	mov    BYTE PTR [rax],dl
   15cca:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15cce:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15cd1:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   15cd4:	7c 85                	jl     15c5b <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xa9d>
   15cd6:	83 6d 80 01          	sub    DWORD PTR [rbp-0x80],0x1
   15cda:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15cdd:	48 63 d0             	movsxd rdx,eax
   15ce0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15ce4:	48 01 d0             	add    rax,rdx
   15ce7:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15cea:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15ced:	48 98                	cdqe   
   15cef:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   15cf6:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15cf9:	48 98                	cdqe   
   15cfb:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15cff:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15d02:	48 98                	cdqe   
   15d04:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   15d08:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   15d0c:	0f 85 40 ff ff ff    	jne    15c52 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xa94>
   15d12:	e9 53 01 00 00       	jmp    15e6a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xcac>
   15d17:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15d1d:	83 e8 01             	sub    eax,0x1
   15d20:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   15d23:	e9 82 00 00 00       	jmp    15daa <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xbec>
   15d28:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15d2f:	eb 3f                	jmp    15d70 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xbb2>
   15d31:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15d34:	48 63 d0             	movsxd rdx,eax
   15d37:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15d3e:	48 01 d0             	add    rax,rdx
   15d41:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   15d44:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15d47:	2b 45 a8             	sub    eax,DWORD PTR [rbp-0x58]
   15d4a:	48 63 c8             	movsxd rcx,eax
   15d4d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15d51:	48 01 c8             	add    rax,rcx
   15d54:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15d57:	d0 e8                	shr    al,1
   15d59:	89 c6                	mov    esi,eax
   15d5b:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15d5e:	48 63 c8             	movsxd rcx,eax
   15d61:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15d65:	48 01 c8             	add    rax,rcx
   15d68:	01 f2                	add    edx,esi
   15d6a:	88 10                	mov    BYTE PTR [rax],dl
   15d6c:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15d70:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15d73:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   15d76:	7c b9                	jl     15d31 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xb73>
   15d78:	83 6d 80 01          	sub    DWORD PTR [rbp-0x80],0x1
   15d7c:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15d7f:	48 63 d0             	movsxd rdx,eax
   15d82:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15d86:	48 01 d0             	add    rax,rdx
   15d89:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15d8c:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15d8f:	48 98                	cdqe   
   15d91:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   15d98:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15d9b:	48 98                	cdqe   
   15d9d:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15da1:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15da4:	48 98                	cdqe   
   15da6:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   15daa:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   15dae:	0f 85 74 ff ff ff    	jne    15d28 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xb6a>
   15db4:	e9 b1 00 00 00       	jmp    15e6a <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xcac>
   15db9:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   15dbf:	83 e8 01             	sub    eax,0x1
   15dc2:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   15dc5:	e9 95 00 00 00       	jmp    15e5f <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xca1>
   15dca:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   15dd1:	eb 52                	jmp    15e25 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc67>
   15dd3:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15dd6:	48 63 d0             	movsxd rdx,eax
   15dd9:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   15de0:	48 01 d0             	add    rax,rdx
   15de3:	0f b6 18             	movzx  ebx,BYTE PTR [rax]
   15de6:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15de9:	2b 45 a8             	sub    eax,DWORD PTR [rbp-0x58]
   15dec:	48 63 d0             	movsxd rdx,eax
   15def:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15df3:	48 01 d0             	add    rax,rdx
   15df6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15df9:	0f b6 c0             	movzx  eax,al
   15dfc:	ba 00 00 00 00       	mov    edx,0x0
   15e01:	be 00 00 00 00       	mov    esi,0x0
   15e06:	89 c7                	mov    edi,eax
   15e08:	e8 3f f3 ff ff       	call   1514c <stbi__paeth(int, int, int)>
   15e0d:	89 c1                	mov    ecx,eax
   15e0f:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15e12:	48 63 d0             	movsxd rdx,eax
   15e15:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15e19:	48 01 d0             	add    rax,rdx
   15e1c:	8d 14 0b             	lea    edx,[rbx+rcx*1]
   15e1f:	88 10                	mov    BYTE PTR [rax],dl
   15e21:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   15e25:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   15e28:	3b 45 8c             	cmp    eax,DWORD PTR [rbp-0x74]
   15e2b:	7c a6                	jl     15dd3 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc15>
   15e2d:	83 6d 80 01          	sub    DWORD PTR [rbp-0x80],0x1
   15e31:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15e34:	48 63 d0             	movsxd rdx,eax
   15e37:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15e3b:	48 01 d0             	add    rax,rdx
   15e3e:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15e41:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15e44:	48 98                	cdqe   
   15e46:	48 01 85 60 ff ff ff 	add    QWORD PTR [rbp-0xa0],rax
   15e4d:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15e50:	48 98                	cdqe   
   15e52:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15e56:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15e59:	48 98                	cdqe   
   15e5b:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
   15e5f:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   15e63:	0f 85 61 ff ff ff    	jne    15dca <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xc0c>
   15e69:	90                   	nop
   15e6a:	83 7d 10 10          	cmp    DWORD PTR [rbp+0x10],0x10
   15e6e:	75 4f                	jne    15ebf <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xd01>
   15e70:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   15e77:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   15e7b:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   15e7e:	0f af 45 84          	imul   eax,DWORD PTR [rbp-0x7c]
   15e82:	89 c0                	mov    eax,eax
   15e84:	48 01 d0             	add    rax,rdx
   15e87:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   15e8b:	c7 45 80 00 00 00 00 	mov    DWORD PTR [rbp-0x80],0x0
   15e92:	eb 20                	jmp    15eb4 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xcf6>
   15e94:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   15e97:	48 98                	cdqe   
   15e99:	48 8d 50 01          	lea    rdx,[rax+0x1]
   15e9d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   15ea1:	48 01 d0             	add    rax,rdx
   15ea4:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   15ea7:	83 45 80 01          	add    DWORD PTR [rbp-0x80],0x1
   15eab:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   15eae:	48 98                	cdqe   
   15eb0:	48 01 45 b8          	add    QWORD PTR [rbp-0x48],rax
   15eb4:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
   15eb7:	3b 85 54 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xac]
   15ebd:	72 d5                	jb     15e94 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xcd6>
   15ebf:	83 45 84 01          	add    DWORD PTR [rbp-0x7c],0x1
   15ec3:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   15ec6:	3b 85 50 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xb0]
   15ecc:	0f 82 a5 f4 ff ff    	jb     15377 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1b9>
   15ed2:	83 7d 10 07          	cmp    DWORD PTR [rbp+0x10],0x7
   15ed6:	0f 8f 26 06 00 00    	jg     16502 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1344>
   15edc:	c7 45 84 00 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x0
   15ee3:	e9 09 06 00 00       	jmp    164f1 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1333>
   15ee8:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   15eef:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   15ef3:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   15ef6:	0f af 45 84          	imul   eax,DWORD PTR [rbp-0x7c]
   15efa:	89 c0                	mov    eax,eax
   15efc:	48 01 d0             	add    rax,rdx
   15eff:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   15f03:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   15f0a:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   15f0e:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   15f11:	0f af 45 84          	imul   eax,DWORD PTR [rbp-0x7c]
   15f15:	89 c1                	mov    ecx,eax
   15f17:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   15f1d:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   15f24:	89 c0                	mov    eax,eax
   15f26:	48 01 c8             	add    rax,rcx
   15f29:	8b 4d ac             	mov    ecx,DWORD PTR [rbp-0x54]
   15f2c:	48 29 c8             	sub    rax,rcx
   15f2f:	48 01 d0             	add    rax,rdx
   15f32:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   15f36:	83 7d 18 00          	cmp    DWORD PTR [rbp+0x18],0x0
   15f3a:	75 12                	jne    15f4e <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xd90>
   15f3c:	8b 45 10             	mov    eax,DWORD PTR [rbp+0x10]
   15f3f:	48 98                	cdqe   
   15f41:	48 8d 15 b0 4c 02 00 	lea    rdx,[rip+0x24cb0]        # 3abf8 <stbi__depth_scale_table>
   15f48:	0f b6 04 10          	movzx  eax,BYTE PTR [rax+rdx*1]
   15f4c:	eb 05                	jmp    15f53 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xd95>
   15f4e:	b8 01 00 00 00       	mov    eax,0x1
   15f53:	88 85 7f ff ff ff    	mov    BYTE PTR [rbp-0x81],al
   15f59:	83 7d 10 04          	cmp    DWORD PTR [rbp+0x10],0x4
   15f5d:	0f 85 8d 00 00 00    	jne    15ff0 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xe32>
   15f63:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15f66:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   15f6d:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   15f70:	eb 49                	jmp    15fbb <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xdfd>
   15f72:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15f76:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15f79:	c0 e8 04             	shr    al,0x4
   15f7c:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15f82:	89 c2                	mov    edx,eax
   15f84:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15f88:	48 8d 48 01          	lea    rcx,[rax+0x1]
   15f8c:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   15f90:	88 10                	mov    BYTE PTR [rax],dl
   15f92:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15f96:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15f99:	83 e0 0f             	and    eax,0xf
   15f9c:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15fa2:	89 c2                	mov    edx,eax
   15fa4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15fa8:	48 8d 48 01          	lea    rcx,[rax+0x1]
   15fac:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   15fb0:	88 10                	mov    BYTE PTR [rax],dl
   15fb2:	83 6d 88 02          	sub    DWORD PTR [rbp-0x78],0x2
   15fb6:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
   15fbb:	83 7d 88 01          	cmp    DWORD PTR [rbp-0x78],0x1
   15fbf:	7f b1                	jg     15f72 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xdb4>
   15fc1:	83 7d 88 00          	cmp    DWORD PTR [rbp-0x78],0x0
   15fc5:	0f 8e b6 03 00 00    	jle    16381 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x11c3>
   15fcb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   15fcf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   15fd2:	c0 e8 04             	shr    al,0x4
   15fd5:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   15fdb:	89 c2                	mov    edx,eax
   15fdd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   15fe1:	48 8d 48 01          	lea    rcx,[rax+0x1]
   15fe5:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   15fe9:	88 10                	mov    BYTE PTR [rax],dl
   15feb:	e9 91 03 00 00       	jmp    16381 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x11c3>
   15ff0:	83 7d 10 02          	cmp    DWORD PTR [rbp+0x10],0x2
   15ff4:	0f 85 2c 01 00 00    	jne    16126 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xf68>
   15ffa:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   15ffd:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   16004:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   16007:	e9 8f 00 00 00       	jmp    1609b <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xedd>
   1600c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16010:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16013:	c0 e8 06             	shr    al,0x6
   16016:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   1601c:	89 c2                	mov    edx,eax
   1601e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16022:	48 8d 48 01          	lea    rcx,[rax+0x1]
   16026:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   1602a:	88 10                	mov    BYTE PTR [rax],dl
   1602c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16030:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16033:	c0 e8 04             	shr    al,0x4
   16036:	83 e0 03             	and    eax,0x3
   16039:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   1603f:	89 c2                	mov    edx,eax
   16041:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16045:	48 8d 48 01          	lea    rcx,[rax+0x1]
   16049:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   1604d:	88 10                	mov    BYTE PTR [rax],dl
   1604f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16053:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16056:	c0 e8 02             	shr    al,0x2
   16059:	83 e0 03             	and    eax,0x3
   1605c:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16062:	89 c2                	mov    edx,eax
   16064:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16068:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1606c:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16070:	88 10                	mov    BYTE PTR [rax],dl
   16072:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16076:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16079:	83 e0 03             	and    eax,0x3
   1607c:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16082:	89 c2                	mov    edx,eax
   16084:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16088:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1608c:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16090:	88 10                	mov    BYTE PTR [rax],dl
   16092:	83 6d 88 04          	sub    DWORD PTR [rbp-0x78],0x4
   16096:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
   1609b:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
   1609f:	0f 8f 67 ff ff ff    	jg     1600c <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xe4e>
   160a5:	83 7d 88 00          	cmp    DWORD PTR [rbp-0x78],0x0
   160a9:	7e 20                	jle    160cb <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xf0d>
   160ab:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   160af:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   160b2:	c0 e8 06             	shr    al,0x6
   160b5:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   160bb:	89 c2                	mov    edx,eax
   160bd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   160c1:	48 8d 48 01          	lea    rcx,[rax+0x1]
   160c5:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   160c9:	88 10                	mov    BYTE PTR [rax],dl
   160cb:	83 7d 88 01          	cmp    DWORD PTR [rbp-0x78],0x1
   160cf:	7e 23                	jle    160f4 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xf36>
   160d1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   160d5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   160d8:	c0 e8 04             	shr    al,0x4
   160db:	83 e0 03             	and    eax,0x3
   160de:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   160e4:	89 c2                	mov    edx,eax
   160e6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   160ea:	48 8d 48 01          	lea    rcx,[rax+0x1]
   160ee:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   160f2:	88 10                	mov    BYTE PTR [rax],dl
   160f4:	83 7d 88 02          	cmp    DWORD PTR [rbp-0x78],0x2
   160f8:	0f 8e 83 02 00 00    	jle    16381 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x11c3>
   160fe:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16102:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16105:	c0 e8 02             	shr    al,0x2
   16108:	83 e0 03             	and    eax,0x3
   1610b:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16111:	89 c2                	mov    edx,eax
   16113:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16117:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1611b:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   1611f:	88 10                	mov    BYTE PTR [rax],dl
   16121:	e9 5b 02 00 00       	jmp    16381 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x11c3>
   16126:	83 7d 10 01          	cmp    DWORD PTR [rbp+0x10],0x1
   1612a:	0f 85 51 02 00 00    	jne    16381 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x11c3>
   16130:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   16133:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   1613a:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   1613d:	e9 1a 01 00 00       	jmp    1625c <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x109e>
   16142:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16146:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16149:	c0 e8 07             	shr    al,0x7
   1614c:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16152:	89 c2                	mov    edx,eax
   16154:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16158:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1615c:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16160:	88 10                	mov    BYTE PTR [rax],dl
   16162:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16166:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16169:	c0 e8 06             	shr    al,0x6
   1616c:	83 e0 01             	and    eax,0x1
   1616f:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16175:	89 c2                	mov    edx,eax
   16177:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1617b:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1617f:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16183:	88 10                	mov    BYTE PTR [rax],dl
   16185:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16189:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1618c:	c0 e8 05             	shr    al,0x5
   1618f:	83 e0 01             	and    eax,0x1
   16192:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16198:	89 c2                	mov    edx,eax
   1619a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1619e:	48 8d 48 01          	lea    rcx,[rax+0x1]
   161a2:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   161a6:	88 10                	mov    BYTE PTR [rax],dl
   161a8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   161ac:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   161af:	c0 e8 04             	shr    al,0x4
   161b2:	83 e0 01             	and    eax,0x1
   161b5:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   161bb:	89 c2                	mov    edx,eax
   161bd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   161c1:	48 8d 48 01          	lea    rcx,[rax+0x1]
   161c5:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   161c9:	88 10                	mov    BYTE PTR [rax],dl
   161cb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   161cf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   161d2:	c0 e8 03             	shr    al,0x3
   161d5:	83 e0 01             	and    eax,0x1
   161d8:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   161de:	89 c2                	mov    edx,eax
   161e0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   161e4:	48 8d 48 01          	lea    rcx,[rax+0x1]
   161e8:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   161ec:	88 10                	mov    BYTE PTR [rax],dl
   161ee:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   161f2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   161f5:	c0 e8 02             	shr    al,0x2
   161f8:	83 e0 01             	and    eax,0x1
   161fb:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16201:	89 c2                	mov    edx,eax
   16203:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16207:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1620b:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   1620f:	88 10                	mov    BYTE PTR [rax],dl
   16211:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16215:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16218:	d0 e8                	shr    al,1
   1621a:	83 e0 01             	and    eax,0x1
   1621d:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16223:	89 c2                	mov    edx,eax
   16225:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16229:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1622d:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16231:	88 10                	mov    BYTE PTR [rax],dl
   16233:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16237:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1623a:	83 e0 01             	and    eax,0x1
   1623d:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16243:	89 c2                	mov    edx,eax
   16245:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16249:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1624d:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16251:	88 10                	mov    BYTE PTR [rax],dl
   16253:	83 6d 88 08          	sub    DWORD PTR [rbp-0x78],0x8
   16257:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
   1625c:	83 7d 88 07          	cmp    DWORD PTR [rbp-0x78],0x7
   16260:	0f 8f dc fe ff ff    	jg     16142 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xf84>
   16266:	83 7d 88 00          	cmp    DWORD PTR [rbp-0x78],0x0
   1626a:	7e 20                	jle    1628c <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x10ce>
   1626c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16270:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16273:	c0 e8 07             	shr    al,0x7
   16276:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   1627c:	89 c2                	mov    edx,eax
   1627e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16282:	48 8d 48 01          	lea    rcx,[rax+0x1]
   16286:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   1628a:	88 10                	mov    BYTE PTR [rax],dl
   1628c:	83 7d 88 01          	cmp    DWORD PTR [rbp-0x78],0x1
   16290:	7e 23                	jle    162b5 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x10f7>
   16292:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16296:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16299:	c0 e8 06             	shr    al,0x6
   1629c:	83 e0 01             	and    eax,0x1
   1629f:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   162a5:	89 c2                	mov    edx,eax
   162a7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   162ab:	48 8d 48 01          	lea    rcx,[rax+0x1]
   162af:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   162b3:	88 10                	mov    BYTE PTR [rax],dl
   162b5:	83 7d 88 02          	cmp    DWORD PTR [rbp-0x78],0x2
   162b9:	7e 23                	jle    162de <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1120>
   162bb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   162bf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   162c2:	c0 e8 05             	shr    al,0x5
   162c5:	83 e0 01             	and    eax,0x1
   162c8:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   162ce:	89 c2                	mov    edx,eax
   162d0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   162d4:	48 8d 48 01          	lea    rcx,[rax+0x1]
   162d8:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   162dc:	88 10                	mov    BYTE PTR [rax],dl
   162de:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
   162e2:	7e 23                	jle    16307 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1149>
   162e4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   162e8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   162eb:	c0 e8 04             	shr    al,0x4
   162ee:	83 e0 01             	and    eax,0x1
   162f1:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   162f7:	89 c2                	mov    edx,eax
   162f9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   162fd:	48 8d 48 01          	lea    rcx,[rax+0x1]
   16301:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16305:	88 10                	mov    BYTE PTR [rax],dl
   16307:	83 7d 88 04          	cmp    DWORD PTR [rbp-0x78],0x4
   1630b:	7e 23                	jle    16330 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1172>
   1630d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16311:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16314:	c0 e8 03             	shr    al,0x3
   16317:	83 e0 01             	and    eax,0x1
   1631a:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16320:	89 c2                	mov    edx,eax
   16322:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16326:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1632a:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   1632e:	88 10                	mov    BYTE PTR [rax],dl
   16330:	83 7d 88 05          	cmp    DWORD PTR [rbp-0x78],0x5
   16334:	7e 23                	jle    16359 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x119b>
   16336:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1633a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1633d:	c0 e8 02             	shr    al,0x2
   16340:	83 e0 01             	and    eax,0x1
   16343:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16349:	89 c2                	mov    edx,eax
   1634b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1634f:	48 8d 48 01          	lea    rcx,[rax+0x1]
   16353:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   16357:	88 10                	mov    BYTE PTR [rax],dl
   16359:	83 7d 88 06          	cmp    DWORD PTR [rbp-0x78],0x6
   1635d:	7e 22                	jle    16381 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x11c3>
   1635f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16363:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16366:	d0 e8                	shr    al,1
   16368:	83 e0 01             	and    eax,0x1
   1636b:	f6 a5 7f ff ff ff    	mul    BYTE PTR [rbp-0x81]
   16371:	89 c2                	mov    edx,eax
   16373:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16377:	48 8d 48 01          	lea    rcx,[rax+0x1]
   1637b:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
   1637f:	88 10                	mov    BYTE PTR [rax],dl
   16381:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   16384:	3b 85 58 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xa8]
   1638a:	0f 84 5d 01 00 00    	je     164ed <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x132f>
   16390:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   16397:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   1639b:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1639e:	0f af 45 84          	imul   eax,DWORD PTR [rbp-0x7c]
   163a2:	89 c0                	mov    eax,eax
   163a4:	48 01 d0             	add    rax,rdx
   163a7:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   163ab:	83 7d a4 01          	cmp    DWORD PTR [rbp-0x5c],0x1
   163af:	75 53                	jne    16404 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1246>
   163b1:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   163b7:	83 e8 01             	sub    eax,0x1
   163ba:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
   163bd:	eb 3a                	jmp    163f9 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x123b>
   163bf:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   163c2:	01 c0                	add    eax,eax
   163c4:	48 98                	cdqe   
   163c6:	48 8d 50 01          	lea    rdx,[rax+0x1]
   163ca:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   163ce:	48 01 d0             	add    rax,rdx
   163d1:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   163d4:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   163d7:	48 63 d0             	movsxd rdx,eax
   163da:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   163de:	48 01 d0             	add    rax,rdx
   163e1:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   163e4:	01 d2                	add    edx,edx
   163e6:	48 63 ca             	movsxd rcx,edx
   163e9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   163ed:	48 01 ca             	add    rdx,rcx
   163f0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   163f3:	88 02                	mov    BYTE PTR [rdx],al
   163f5:	83 6d 98 01          	sub    DWORD PTR [rbp-0x68],0x1
   163f9:	83 7d 98 00          	cmp    DWORD PTR [rbp-0x68],0x0
   163fd:	79 c0                	jns    163bf <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1201>
   163ff:	e9 e9 00 00 00       	jmp    164ed <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x132f>
   16404:	83 7d a4 03          	cmp    DWORD PTR [rbp-0x5c],0x3
   16408:	74 28                	je     16432 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1274>
   1640a:	48 8d 05 f7 47 02 00 	lea    rax,[rip+0x247f7]        # 3ac08 <stbi__depth_scale_table+0x10>
   16411:	48 89 c1             	mov    rcx,rax
   16414:	ba 38 12 00 00       	mov    edx,0x1238
   16419:	48 8d 05 78 3c 02 00 	lea    rax,[rip+0x23c78]        # 3a098 <_IO_stdin_used+0x98>
   16420:	48 89 c6             	mov    rsi,rax
   16423:	48 8d 05 be 48 02 00 	lea    rax,[rip+0x248be]        # 3ace8 <stbi__depth_scale_table+0xf0>
   1642a:	48 89 c7             	mov    rdi,rax
   1642d:	e8 4e de fe ff       	call   4280 <__assert_fail@plt>
   16432:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16438:	83 e8 01             	sub    eax,0x1
   1643b:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
   1643e:	e9 a0 00 00 00       	jmp    164e3 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1325>
   16443:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   16446:	c1 e0 02             	shl    eax,0x2
   16449:	48 98                	cdqe   
   1644b:	48 8d 50 03          	lea    rdx,[rax+0x3]
   1644f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16453:	48 01 d0             	add    rax,rdx
   16456:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   16459:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   1645c:	89 d0                	mov    eax,edx
   1645e:	01 c0                	add    eax,eax
   16460:	01 d0                	add    eax,edx
   16462:	48 98                	cdqe   
   16464:	48 8d 50 02          	lea    rdx,[rax+0x2]
   16468:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1646c:	48 01 d0             	add    rax,rdx
   1646f:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   16472:	c1 e2 02             	shl    edx,0x2
   16475:	48 63 d2             	movsxd rdx,edx
   16478:	48 8d 4a 02          	lea    rcx,[rdx+0x2]
   1647c:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   16480:	48 01 ca             	add    rdx,rcx
   16483:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16486:	88 02                	mov    BYTE PTR [rdx],al
   16488:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   1648b:	89 d0                	mov    eax,edx
   1648d:	01 c0                	add    eax,eax
   1648f:	01 d0                	add    eax,edx
   16491:	48 98                	cdqe   
   16493:	48 8d 50 01          	lea    rdx,[rax+0x1]
   16497:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1649b:	48 01 d0             	add    rax,rdx
   1649e:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   164a1:	c1 e2 02             	shl    edx,0x2
   164a4:	48 63 d2             	movsxd rdx,edx
   164a7:	48 8d 4a 01          	lea    rcx,[rdx+0x1]
   164ab:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   164af:	48 01 ca             	add    rdx,rcx
   164b2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   164b5:	88 02                	mov    BYTE PTR [rdx],al
   164b7:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   164ba:	89 d0                	mov    eax,edx
   164bc:	01 c0                	add    eax,eax
   164be:	01 d0                	add    eax,edx
   164c0:	48 63 d0             	movsxd rdx,eax
   164c3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   164c7:	48 01 d0             	add    rax,rdx
   164ca:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   164cd:	c1 e2 02             	shl    edx,0x2
   164d0:	48 63 ca             	movsxd rcx,edx
   164d3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   164d7:	48 01 ca             	add    rdx,rcx
   164da:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   164dd:	88 02                	mov    BYTE PTR [rdx],al
   164df:	83 6d 98 01          	sub    DWORD PTR [rbp-0x68],0x1
   164e3:	83 7d 98 00          	cmp    DWORD PTR [rbp-0x68],0x0
   164e7:	0f 89 56 ff ff ff    	jns    16443 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x1285>
   164ed:	83 45 84 01          	add    DWORD PTR [rbp-0x7c],0x1
   164f1:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   164f4:	3b 85 50 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xb0]
   164fa:	0f 82 e8 f9 ff ff    	jb     15ee8 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0xd2a>
   16500:	eb 79                	jmp    1657b <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x13bd>
   16502:	83 7d 10 10          	cmp    DWORD PTR [rbp+0x10],0x10
   16506:	75 73                	jne    1657b <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x13bd>
   16508:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   1650f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   16513:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   16517:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1651b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   1651f:	c7 45 80 00 00 00 00 	mov    DWORD PTR [rbp-0x80],0x0
   16526:	eb 36                	jmp    1655e <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x13a0>
   16528:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1652c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1652f:	0f b6 c0             	movzx  eax,al
   16532:	c1 e0 08             	shl    eax,0x8
   16535:	89 c2                	mov    edx,eax
   16537:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1653b:	48 83 c0 01          	add    rax,0x1
   1653f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16542:	0f b6 c0             	movzx  eax,al
   16545:	09 d0                	or     eax,edx
   16547:	89 c2                	mov    edx,eax
   16549:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1654d:	66 89 10             	mov    WORD PTR [rax],dx
   16550:	83 45 80 01          	add    DWORD PTR [rbp-0x80],0x1
   16554:	48 83 45 e0 02       	add    QWORD PTR [rbp-0x20],0x2
   16559:	48 83 45 d8 02       	add    QWORD PTR [rbp-0x28],0x2
   1655e:	8b 85 54 ff ff ff    	mov    eax,DWORD PTR [rbp-0xac]
   16564:	0f af 85 50 ff ff ff 	imul   eax,DWORD PTR [rbp-0xb0]
   1656b:	89 c2                	mov    edx,eax
   1656d:	8b 85 58 ff ff ff    	mov    eax,DWORD PTR [rbp-0xa8]
   16573:	0f af c2             	imul   eax,edx
   16576:	39 45 80             	cmp    DWORD PTR [rbp-0x80],eax
   16579:	72 ad                	jb     16528 <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)+0x136a>
   1657b:	b8 01 00 00 00       	mov    eax,0x1
   16580:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   16584:	c9                   	leave  
   16585:	c3                   	ret    

0000000000016586 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)>:
   16586:	55                   	push   rbp
   16587:	48 89 e5             	mov    rbp,rsp
   1658a:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
   16591:	48 89 bd 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdi
   16598:	48 89 b5 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rsi
   1659f:	89 95 2c ff ff ff    	mov    DWORD PTR [rbp-0xd4],edx
   165a5:	89 8d 28 ff ff ff    	mov    DWORD PTR [rbp-0xd8],ecx
   165ab:	44 89 85 24 ff ff ff 	mov    DWORD PTR [rbp-0xdc],r8d
   165b2:	44 89 8d 20 ff ff ff 	mov    DWORD PTR [rbp-0xe0],r9d
   165b9:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   165c2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   165c6:	31 c0                	xor    eax,eax
   165c8:	83 bd 24 ff ff ff 10 	cmp    DWORD PTR [rbp-0xdc],0x10
   165cf:	75 07                	jne    165d8 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x52>
   165d1:	b8 02 00 00 00       	mov    eax,0x2
   165d6:	eb 05                	jmp    165dd <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x57>
   165d8:	b8 01 00 00 00       	mov    eax,0x1
   165dd:	89 85 4c ff ff ff    	mov    DWORD PTR [rbp-0xb4],eax
   165e3:	8b 85 28 ff ff ff    	mov    eax,DWORD PTR [rbp-0xd8]
   165e9:	0f af 85 4c ff ff ff 	imul   eax,DWORD PTR [rbp-0xb4]
   165f0:	89 85 50 ff ff ff    	mov    DWORD PTR [rbp-0xb0],eax
   165f6:	83 7d 10 00          	cmp    DWORD PTR [rbp+0x10],0x0
   165fa:	75 54                	jne    16650 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0xca>
   165fc:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   16603:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16606:	44 8b 48 04          	mov    r9d,DWORD PTR [rax+0x4]
   1660a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   16611:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16614:	44 8b 00             	mov    r8d,DWORD PTR [rax]
   16617:	8b 8d 28 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xd8]
   1661d:	8b 95 2c ff ff ff    	mov    edx,DWORD PTR [rbp-0xd4]
   16623:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
   1662a:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   16631:	8b bd 20 ff ff ff    	mov    edi,DWORD PTR [rbp-0xe0]
   16637:	57                   	push   rdi
   16638:	8b bd 24 ff ff ff    	mov    edi,DWORD PTR [rbp-0xdc]
   1663e:	57                   	push   rdi
   1663f:	48 89 c7             	mov    rdi,rax
   16642:	e8 77 eb ff ff       	call   151be <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)>
   16647:	48 83 c4 10          	add    rsp,0x10
   1664b:	e9 d4 03 00 00       	jmp    16a24 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x49e>
   16650:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   16657:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1665a:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1665d:	89 c6                	mov    esi,eax
   1665f:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   16666:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16669:	8b 00                	mov    eax,DWORD PTR [rax]
   1666b:	89 c7                	mov    edi,eax
   1666d:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   16673:	b9 00 00 00 00       	mov    ecx,0x0
   16678:	89 c2                	mov    edx,eax
   1667a:	e8 22 e7 fe ff       	call   4da1 <stbi__malloc_mad3(int, int, int, int)>
   1667f:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
   16686:	c7 85 40 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xc0],0x0
   16690:	e9 6b 03 00 00       	jmp    16a00 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x47a>
   16695:	c7 85 70 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x90],0x0
   1669f:	c7 85 74 ff ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x4
   166a9:	c7 85 78 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x88],0x0
   166b3:	c7 85 7c ff ff ff 02 00 00 00 	mov    DWORD PTR [rbp-0x84],0x2
   166bd:	c7 45 80 00 00 00 00 	mov    DWORD PTR [rbp-0x80],0x0
   166c4:	c7 45 84 01 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x1
   166cb:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   166d2:	c7 45 90 00 00 00 00 	mov    DWORD PTR [rbp-0x70],0x0
   166d9:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
   166e0:	c7 45 98 04 00 00 00 	mov    DWORD PTR [rbp-0x68],0x4
   166e7:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
   166ee:	c7 45 a0 02 00 00 00 	mov    DWORD PTR [rbp-0x60],0x2
   166f5:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   166fc:	c7 45 a8 01 00 00 00 	mov    DWORD PTR [rbp-0x58],0x1
   16703:	c7 45 b0 08 00 00 00 	mov    DWORD PTR [rbp-0x50],0x8
   1670a:	c7 45 b4 08 00 00 00 	mov    DWORD PTR [rbp-0x4c],0x8
   16711:	c7 45 b8 04 00 00 00 	mov    DWORD PTR [rbp-0x48],0x4
   16718:	c7 45 bc 04 00 00 00 	mov    DWORD PTR [rbp-0x44],0x4
   1671f:	c7 45 c0 02 00 00 00 	mov    DWORD PTR [rbp-0x40],0x2
   16726:	c7 45 c4 02 00 00 00 	mov    DWORD PTR [rbp-0x3c],0x2
   1672d:	c7 45 c8 01 00 00 00 	mov    DWORD PTR [rbp-0x38],0x1
   16734:	c7 45 d0 08 00 00 00 	mov    DWORD PTR [rbp-0x30],0x8
   1673b:	c7 45 d4 08 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x8
   16742:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [rbp-0x28],0x8
   16749:	c7 45 dc 04 00 00 00 	mov    DWORD PTR [rbp-0x24],0x4
   16750:	c7 45 e0 04 00 00 00 	mov    DWORD PTR [rbp-0x20],0x4
   16757:	c7 45 e4 02 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x2
   1675e:	c7 45 e8 02 00 00 00 	mov    DWORD PTR [rbp-0x18],0x2
   16765:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   1676c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1676f:	8b 10                	mov    edx,DWORD PTR [rax]
   16771:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   16777:	48 98                	cdqe   
   16779:	8b 84 85 70 ff ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x90]
   16780:	29 c2                	sub    edx,eax
   16782:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   16788:	48 98                	cdqe   
   1678a:	8b 44 85 b0          	mov    eax,DWORD PTR [rbp+rax*4-0x50]
   1678e:	01 d0                	add    eax,edx
   16790:	8d 50 ff             	lea    edx,[rax-0x1]
   16793:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   16799:	48 98                	cdqe   
   1679b:	8b 44 85 b0          	mov    eax,DWORD PTR [rbp+rax*4-0x50]
   1679f:	89 c1                	mov    ecx,eax
   167a1:	89 d0                	mov    eax,edx
   167a3:	ba 00 00 00 00       	mov    edx,0x0
   167a8:	f7 f1                	div    ecx
   167aa:	89 85 54 ff ff ff    	mov    DWORD PTR [rbp-0xac],eax
   167b0:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   167b7:	48 8b 00             	mov    rax,QWORD PTR [rax]
   167ba:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
   167bd:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   167c3:	48 98                	cdqe   
   167c5:	8b 44 85 90          	mov    eax,DWORD PTR [rbp+rax*4-0x70]
   167c9:	29 c2                	sub    edx,eax
   167cb:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   167d1:	48 98                	cdqe   
   167d3:	8b 44 85 d0          	mov    eax,DWORD PTR [rbp+rax*4-0x30]
   167d7:	01 d0                	add    eax,edx
   167d9:	8d 50 ff             	lea    edx,[rax-0x1]
   167dc:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   167e2:	48 98                	cdqe   
   167e4:	8b 44 85 d0          	mov    eax,DWORD PTR [rbp+rax*4-0x30]
   167e8:	89 c1                	mov    ecx,eax
   167ea:	89 d0                	mov    eax,edx
   167ec:	ba 00 00 00 00       	mov    edx,0x0
   167f1:	f7 f1                	div    ecx
   167f3:	89 85 58 ff ff ff    	mov    DWORD PTR [rbp-0xa8],eax
   167f9:	83 bd 54 ff ff ff 00 	cmp    DWORD PTR [rbp-0xac],0x0
   16800:	0f 84 f3 01 00 00    	je     169f9 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x473>
   16806:	83 bd 58 ff ff ff 00 	cmp    DWORD PTR [rbp-0xa8],0x0
   1680d:	0f 84 e6 01 00 00    	je     169f9 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x473>
   16813:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   1681a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1681d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   16820:	0f af 85 54 ff ff ff 	imul   eax,DWORD PTR [rbp-0xac]
   16827:	0f af 85 24 ff ff ff 	imul   eax,DWORD PTR [rbp-0xdc]
   1682e:	83 c0 07             	add    eax,0x7
   16831:	c1 f8 03             	sar    eax,0x3
   16834:	83 c0 01             	add    eax,0x1
   16837:	0f af 85 58 ff ff ff 	imul   eax,DWORD PTR [rbp-0xa8]
   1683e:	89 85 5c ff ff ff    	mov    DWORD PTR [rbp-0xa4],eax
   16844:	44 8b 8d 58 ff ff ff 	mov    r9d,DWORD PTR [rbp-0xa8]
   1684b:	44 8b 85 54 ff ff ff 	mov    r8d,DWORD PTR [rbp-0xac]
   16852:	8b 8d 28 ff ff ff    	mov    ecx,DWORD PTR [rbp-0xd8]
   16858:	8b 95 2c ff ff ff    	mov    edx,DWORD PTR [rbp-0xd4]
   1685e:	48 8b b5 30 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xd0]
   16865:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   1686c:	8b bd 20 ff ff ff    	mov    edi,DWORD PTR [rbp-0xe0]
   16872:	57                   	push   rdi
   16873:	8b bd 24 ff ff ff    	mov    edi,DWORD PTR [rbp-0xdc]
   16879:	57                   	push   rdi
   1687a:	48 89 c7             	mov    rdi,rax
   1687d:	e8 3c e9 ff ff       	call   151be <stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)>
   16882:	48 83 c4 10          	add    rsp,0x10
   16886:	85 c0                	test   eax,eax
   16888:	0f 94 c0             	sete   al
   1688b:	84 c0                	test   al,al
   1688d:	74 19                	je     168a8 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x322>
   1688f:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   16896:	48 89 c7             	mov    rdi,rax
   16899:	e8 92 dc fe ff       	call   4530 <free@plt>
   1689e:	b8 00 00 00 00       	mov    eax,0x0
   168a3:	e9 7c 01 00 00       	jmp    16a24 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x49e>
   168a8:	c7 85 48 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xb8],0x0
   168b2:	e9 04 01 00 00       	jmp    169bb <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x435>
   168b7:	c7 85 44 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xbc],0x0
   168c1:	e9 dc 00 00 00       	jmp    169a2 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x41c>
   168c6:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   168cc:	48 98                	cdqe   
   168ce:	8b 44 85 d0          	mov    eax,DWORD PTR [rbp+rax*4-0x30]
   168d2:	0f af 85 48 ff ff ff 	imul   eax,DWORD PTR [rbp-0xb8]
   168d9:	89 c2                	mov    edx,eax
   168db:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   168e1:	48 98                	cdqe   
   168e3:	8b 44 85 90          	mov    eax,DWORD PTR [rbp+rax*4-0x70]
   168e7:	01 d0                	add    eax,edx
   168e9:	89 85 60 ff ff ff    	mov    DWORD PTR [rbp-0xa0],eax
   168ef:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   168f5:	48 98                	cdqe   
   168f7:	8b 44 85 b0          	mov    eax,DWORD PTR [rbp+rax*4-0x50]
   168fb:	0f af 85 44 ff ff ff 	imul   eax,DWORD PTR [rbp-0xbc]
   16902:	89 c2                	mov    edx,eax
   16904:	8b 85 40 ff ff ff    	mov    eax,DWORD PTR [rbp-0xc0]
   1690a:	48 98                	cdqe   
   1690c:	8b 84 85 70 ff ff ff 	mov    eax,DWORD PTR [rbp+rax*4-0x90]
   16913:	01 d0                	add    eax,edx
   16915:	89 85 64 ff ff ff    	mov    DWORD PTR [rbp-0x9c],eax
   1691b:	8b 85 50 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb0]
   16921:	48 98                	cdqe   
   16923:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   1692a:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
   1692e:	8b 95 48 ff ff ff    	mov    edx,DWORD PTR [rbp-0xb8]
   16934:	89 d6                	mov    esi,edx
   16936:	0f af b5 54 ff ff ff 	imul   esi,DWORD PTR [rbp-0xac]
   1693d:	8b 95 44 ff ff ff    	mov    edx,DWORD PTR [rbp-0xbc]
   16943:	01 f2                	add    edx,esi
   16945:	0f af 95 50 ff ff ff 	imul   edx,DWORD PTR [rbp-0xb0]
   1694c:	48 63 d2             	movsxd rdx,edx
   1694f:	48 8d 34 11          	lea    rsi,[rcx+rdx*1]
   16953:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   1695a:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
   1695d:	8b 0a                	mov    ecx,DWORD PTR [rdx]
   1695f:	8b 95 60 ff ff ff    	mov    edx,DWORD PTR [rbp-0xa0]
   16965:	0f af ca             	imul   ecx,edx
   16968:	8b 95 50 ff ff ff    	mov    edx,DWORD PTR [rbp-0xb0]
   1696e:	0f af d1             	imul   edx,ecx
   16971:	89 d1                	mov    ecx,edx
   16973:	8b 95 64 ff ff ff    	mov    edx,DWORD PTR [rbp-0x9c]
   16979:	0f af 95 50 ff ff ff 	imul   edx,DWORD PTR [rbp-0xb0]
   16980:	48 63 d2             	movsxd rdx,edx
   16983:	48 01 d1             	add    rcx,rdx
   16986:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
   1698d:	48 01 d1             	add    rcx,rdx
   16990:	48 89 c2             	mov    rdx,rax
   16993:	48 89 cf             	mov    rdi,rcx
   16996:	e8 d5 d9 fe ff       	call   4370 <memcpy@plt>
   1699b:	83 85 44 ff ff ff 01 	add    DWORD PTR [rbp-0xbc],0x1
   169a2:	8b 85 44 ff ff ff    	mov    eax,DWORD PTR [rbp-0xbc]
   169a8:	3b 85 54 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xac]
   169ae:	0f 8c 12 ff ff ff    	jl     168c6 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x340>
   169b4:	83 85 48 ff ff ff 01 	add    DWORD PTR [rbp-0xb8],0x1
   169bb:	8b 85 48 ff ff ff    	mov    eax,DWORD PTR [rbp-0xb8]
   169c1:	3b 85 58 ff ff ff    	cmp    eax,DWORD PTR [rbp-0xa8]
   169c7:	0f 8c ea fe ff ff    	jl     168b7 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x331>
   169cd:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   169d4:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   169d8:	48 89 c7             	mov    rdi,rax
   169db:	e8 50 db fe ff       	call   4530 <free@plt>
   169e0:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   169e6:	48 01 85 30 ff ff ff 	add    QWORD PTR [rbp-0xd0],rax
   169ed:	8b 85 5c ff ff ff    	mov    eax,DWORD PTR [rbp-0xa4]
   169f3:	29 85 2c ff ff ff    	sub    DWORD PTR [rbp-0xd4],eax
   169f9:	83 85 40 ff ff ff 01 	add    DWORD PTR [rbp-0xc0],0x1
   16a00:	83 bd 40 ff ff ff 06 	cmp    DWORD PTR [rbp-0xc0],0x6
   16a07:	0f 8e 88 fc ff ff    	jle    16695 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x10f>
   16a0d:	48 8b 85 38 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc8]
   16a14:	48 8b 95 68 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x98]
   16a1b:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   16a1f:	b8 01 00 00 00       	mov    eax,0x1
   16a24:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   16a28:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   16a31:	74 05                	je     16a38 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)+0x4b2>
   16a33:	e8 a8 da fe ff       	call   44e0 <__stack_chk_fail@plt>
   16a38:	c9                   	leave  
   16a39:	c3                   	ret    

0000000000016a3a <stbi__compute_transparency(stbi__png*, unsigned char*, int)>:
   16a3a:	55                   	push   rbp
   16a3b:	48 89 e5             	mov    rbp,rsp
   16a3e:	48 83 ec 40          	sub    rsp,0x40
   16a42:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   16a46:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   16a4a:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
   16a4d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   16a51:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16a54:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   16a58:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   16a5c:	8b 10                	mov    edx,DWORD PTR [rax]
   16a5e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   16a62:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   16a65:	0f af c2             	imul   eax,edx
   16a68:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   16a6b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   16a6f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   16a73:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   16a77:	83 7d cc 02          	cmp    DWORD PTR [rbp-0x34],0x2
   16a7b:	74 2e                	je     16aab <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x71>
   16a7d:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
   16a81:	74 28                	je     16aab <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x71>
   16a83:	48 8d 05 be 42 02 00 	lea    rax,[rip+0x242be]        # 3ad48 <stbi__depth_scale_table+0x150>
   16a8a:	48 89 c1             	mov    rcx,rax
   16a8d:	ba 86 12 00 00       	mov    edx,0x1286
   16a92:	48 8d 05 ff 35 02 00 	lea    rax,[rip+0x235ff]        # 3a098 <_IO_stdin_used+0x98>
   16a99:	48 89 c6             	mov    rsi,rax
   16a9c:	48 8d 05 df 42 02 00 	lea    rax,[rip+0x242df]        # 3ad82 <stbi__depth_scale_table+0x18a>
   16aa3:	48 89 c7             	mov    rdi,rax
   16aa6:	e8 d5 d7 fe ff       	call   4280 <__assert_fail@plt>
   16aab:	83 7d cc 02          	cmp    DWORD PTR [rbp-0x34],0x2
   16aaf:	75 44                	jne    16af5 <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0xbb>
   16ab1:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   16ab8:	eb 31                	jmp    16aeb <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0xb1>
   16aba:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16abe:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   16ac1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16ac5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16ac8:	38 c2                	cmp    dl,al
   16aca:	75 07                	jne    16ad3 <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x99>
   16acc:	ba 00 00 00 00       	mov    edx,0x0
   16ad1:	eb 05                	jmp    16ad8 <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x9e>
   16ad3:	ba ff ff ff ff       	mov    edx,0xffffffff
   16ad8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16adc:	48 83 c0 01          	add    rax,0x1
   16ae0:	88 10                	mov    BYTE PTR [rax],dl
   16ae2:	48 83 45 f0 02       	add    QWORD PTR [rbp-0x10],0x2
   16ae7:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   16aeb:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   16aee:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   16af1:	72 c7                	jb     16aba <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x80>
   16af3:	eb 6b                	jmp    16b60 <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x126>
   16af5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   16afc:	eb 5a                	jmp    16b58 <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x11e>
   16afe:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16b02:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   16b05:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16b09:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16b0c:	38 c2                	cmp    dl,al
   16b0e:	75 3f                	jne    16b4f <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x115>
   16b10:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16b14:	48 83 c0 01          	add    rax,0x1
   16b18:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   16b1b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16b1f:	48 83 c0 01          	add    rax,0x1
   16b23:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16b26:	38 c2                	cmp    dl,al
   16b28:	75 25                	jne    16b4f <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x115>
   16b2a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16b2e:	48 83 c0 02          	add    rax,0x2
   16b32:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   16b35:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16b39:	48 83 c0 02          	add    rax,0x2
   16b3d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16b40:	38 c2                	cmp    dl,al
   16b42:	75 0b                	jne    16b4f <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0x115>
   16b44:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16b48:	48 83 c0 03          	add    rax,0x3
   16b4c:	c6 00 00             	mov    BYTE PTR [rax],0x0
   16b4f:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
   16b54:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   16b58:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   16b5b:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   16b5e:	72 9e                	jb     16afe <stbi__compute_transparency(stbi__png*, unsigned char*, int)+0xc4>
   16b60:	b8 01 00 00 00       	mov    eax,0x1
   16b65:	c9                   	leave  
   16b66:	c3                   	ret    

0000000000016b67 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)>:
   16b67:	55                   	push   rbp
   16b68:	48 89 e5             	mov    rbp,rsp
   16b6b:	48 83 ec 40          	sub    rsp,0x40
   16b6f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   16b73:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   16b77:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
   16b7a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   16b7e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16b81:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   16b85:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   16b89:	8b 10                	mov    edx,DWORD PTR [rax]
   16b8b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   16b8f:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   16b92:	0f af c2             	imul   eax,edx
   16b95:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   16b98:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   16b9c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   16ba0:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   16ba4:	83 7d cc 02          	cmp    DWORD PTR [rbp-0x34],0x2
   16ba8:	74 2e                	je     16bd8 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x71>
   16baa:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
   16bae:	74 28                	je     16bd8 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x71>
   16bb0:	48 8d 05 e9 41 02 00 	lea    rax,[rip+0x241e9]        # 3ada0 <stbi__depth_scale_table+0x1a8>
   16bb7:	48 89 c1             	mov    rcx,rax
   16bba:	ba 9f 12 00 00       	mov    edx,0x129f
   16bbf:	48 8d 05 d2 34 02 00 	lea    rax,[rip+0x234d2]        # 3a098 <_IO_stdin_used+0x98>
   16bc6:	48 89 c6             	mov    rsi,rax
   16bc9:	48 8d 05 b2 41 02 00 	lea    rax,[rip+0x241b2]        # 3ad82 <stbi__depth_scale_table+0x18a>
   16bd0:	48 89 c7             	mov    rdi,rax
   16bd3:	e8 a8 d6 fe ff       	call   4280 <__assert_fail@plt>
   16bd8:	83 7d cc 02          	cmp    DWORD PTR [rbp-0x34],0x2
   16bdc:	75 46                	jne    16c24 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0xbd>
   16bde:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   16be5:	eb 33                	jmp    16c1a <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0xb3>
   16be7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16beb:	0f b7 10             	movzx  edx,WORD PTR [rax]
   16bee:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16bf2:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16bf5:	66 39 c2             	cmp    dx,ax
   16bf8:	75 07                	jne    16c01 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x9a>
   16bfa:	ba 00 00 00 00       	mov    edx,0x0
   16bff:	eb 05                	jmp    16c06 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x9f>
   16c01:	ba ff ff ff ff       	mov    edx,0xffffffff
   16c06:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16c0a:	48 83 c0 02          	add    rax,0x2
   16c0e:	66 89 10             	mov    WORD PTR [rax],dx
   16c11:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
   16c16:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   16c1a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   16c1d:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   16c20:	72 c5                	jb     16be7 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x80>
   16c22:	eb 70                	jmp    16c94 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x12d>
   16c24:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   16c2b:	eb 5f                	jmp    16c8c <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x125>
   16c2d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16c31:	0f b7 10             	movzx  edx,WORD PTR [rax]
   16c34:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16c38:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16c3b:	66 39 c2             	cmp    dx,ax
   16c3e:	75 43                	jne    16c83 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x11c>
   16c40:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16c44:	48 83 c0 02          	add    rax,0x2
   16c48:	0f b7 10             	movzx  edx,WORD PTR [rax]
   16c4b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16c4f:	48 83 c0 02          	add    rax,0x2
   16c53:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16c56:	66 39 c2             	cmp    dx,ax
   16c59:	75 28                	jne    16c83 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x11c>
   16c5b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16c5f:	48 83 c0 04          	add    rax,0x4
   16c63:	0f b7 10             	movzx  edx,WORD PTR [rax]
   16c66:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   16c6a:	48 83 c0 04          	add    rax,0x4
   16c6e:	0f b7 00             	movzx  eax,WORD PTR [rax]
   16c71:	66 39 c2             	cmp    dx,ax
   16c74:	75 0d                	jne    16c83 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0x11c>
   16c76:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16c7a:	48 83 c0 06          	add    rax,0x6
   16c7e:	66 c7 00 00 00       	mov    WORD PTR [rax],0x0
   16c83:	48 83 45 f0 08       	add    QWORD PTR [rbp-0x10],0x8
   16c88:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   16c8c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   16c8f:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   16c92:	72 99                	jb     16c2d <stbi__compute_transparency16(stbi__png*, unsigned short*, int)+0xc6>
   16c94:	b8 01 00 00 00       	mov    eax,0x1
   16c99:	c9                   	leave  
   16c9a:	c3                   	ret    

0000000000016c9b <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)>:
   16c9b:	55                   	push   rbp
   16c9c:	48 89 e5             	mov    rbp,rsp
   16c9f:	48 83 ec 50          	sub    rsp,0x50
   16ca3:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   16ca7:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   16cab:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
   16cae:	89 4d b8             	mov    DWORD PTR [rbp-0x48],ecx
   16cb1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16cb5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16cb8:	8b 10                	mov    edx,DWORD PTR [rax]
   16cba:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16cbe:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16cc1:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   16cc4:	0f af c2             	imul   eax,edx
   16cc7:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   16cca:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16cce:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   16cd2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   16cd6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   16cd9:	8b 4d b8             	mov    ecx,DWORD PTR [rbp-0x48]
   16cdc:	ba 00 00 00 00       	mov    edx,0x0
   16ce1:	89 ce                	mov    esi,ecx
   16ce3:	89 c7                	mov    edi,eax
   16ce5:	e8 69 e0 fe ff       	call   4d53 <stbi__malloc_mad2(int, int, int)>
   16cea:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   16cee:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   16cf3:	75 14                	jne    16d09 <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0x6e>
   16cf5:	48 8d 05 37 33 02 00 	lea    rax,[rip+0x23337]        # 3a033 <_IO_stdin_used+0x33>
   16cfc:	48 89 c7             	mov    rdi,rax
   16cff:	e8 6e de fe ff       	call   4b72 <stbi__err(char const*)>
   16d04:	e9 5c 01 00 00       	jmp    16e65 <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0x1ca>
   16d09:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   16d0d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   16d11:	83 7d b8 03          	cmp    DWORD PTR [rbp-0x48],0x3
   16d15:	0f 85 85 00 00 00    	jne    16da0 <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0x105>
   16d1b:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
   16d22:	eb 6f                	jmp    16d93 <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0xf8>
   16d24:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   16d27:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16d2b:	48 01 d0             	add    rax,rdx
   16d2e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16d31:	0f b6 c0             	movzx  eax,al
   16d34:	c1 e0 02             	shl    eax,0x2
   16d37:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   16d3a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   16d3d:	48 63 d0             	movsxd rdx,eax
   16d40:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16d44:	48 01 d0             	add    rax,rdx
   16d47:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   16d4a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   16d4e:	88 10                	mov    BYTE PTR [rax],dl
   16d50:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   16d53:	48 98                	cdqe   
   16d55:	48 8d 50 01          	lea    rdx,[rax+0x1]
   16d59:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16d5d:	48 01 d0             	add    rax,rdx
   16d60:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   16d64:	48 83 c2 01          	add    rdx,0x1
   16d68:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16d6b:	88 02                	mov    BYTE PTR [rdx],al
   16d6d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   16d70:	48 98                	cdqe   
   16d72:	48 8d 50 02          	lea    rdx,[rax+0x2]
   16d76:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16d7a:	48 01 d0             	add    rax,rdx
   16d7d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   16d81:	48 83 c2 02          	add    rdx,0x2
   16d85:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16d88:	88 02                	mov    BYTE PTR [rdx],al
   16d8a:	48 83 45 e8 03       	add    QWORD PTR [rbp-0x18],0x3
   16d8f:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   16d93:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   16d96:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
   16d99:	72 89                	jb     16d24 <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0x89>
   16d9b:	e9 a4 00 00 00       	jmp    16e44 <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0x1a9>
   16da0:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
   16da7:	e9 8c 00 00 00       	jmp    16e38 <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0x19d>
   16dac:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   16daf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16db3:	48 01 d0             	add    rax,rdx
   16db6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16db9:	0f b6 c0             	movzx  eax,al
   16dbc:	c1 e0 02             	shl    eax,0x2
   16dbf:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   16dc2:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   16dc5:	48 63 d0             	movsxd rdx,eax
   16dc8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16dcc:	48 01 d0             	add    rax,rdx
   16dcf:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   16dd2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   16dd6:	88 10                	mov    BYTE PTR [rax],dl
   16dd8:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   16ddb:	48 98                	cdqe   
   16ddd:	48 8d 50 01          	lea    rdx,[rax+0x1]
   16de1:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16de5:	48 01 d0             	add    rax,rdx
   16de8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   16dec:	48 83 c2 01          	add    rdx,0x1
   16df0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16df3:	88 02                	mov    BYTE PTR [rdx],al
   16df5:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   16df8:	48 98                	cdqe   
   16dfa:	48 8d 50 02          	lea    rdx,[rax+0x2]
   16dfe:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16e02:	48 01 d0             	add    rax,rdx
   16e05:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   16e09:	48 83 c2 02          	add    rdx,0x2
   16e0d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16e10:	88 02                	mov    BYTE PTR [rdx],al
   16e12:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   16e15:	48 98                	cdqe   
   16e17:	48 8d 50 03          	lea    rdx,[rax+0x3]
   16e1b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   16e1f:	48 01 d0             	add    rax,rdx
   16e22:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   16e26:	48 83 c2 03          	add    rdx,0x3
   16e2a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16e2d:	88 02                	mov    BYTE PTR [rdx],al
   16e2f:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
   16e34:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   16e38:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   16e3b:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
   16e3e:	0f 82 68 ff ff ff    	jb     16dac <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)+0x111>
   16e44:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16e48:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   16e4c:	48 89 c7             	mov    rdi,rax
   16e4f:	e8 dc d6 fe ff       	call   4530 <free@plt>
   16e54:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   16e58:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   16e5c:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   16e60:	b8 01 00 00 00       	mov    eax,0x1
   16e65:	c9                   	leave  
   16e66:	c3                   	ret    

0000000000016e67 <stbi_set_unpremultiply_on_load>:
   16e67:	55                   	push   rbp
   16e68:	48 89 e5             	mov    rbp,rsp
   16e6b:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   16e6e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   16e71:	89 05 01 39 03 00    	mov    DWORD PTR [rip+0x33901],eax        # 4a778 <stbi__unpremultiply_on_load>
   16e77:	90                   	nop
   16e78:	5d                   	pop    rbp
   16e79:	c3                   	ret    

0000000000016e7a <stbi_convert_iphone_png_to_rgb>:
   16e7a:	55                   	push   rbp
   16e7b:	48 89 e5             	mov    rbp,rsp
   16e7e:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   16e81:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   16e84:	89 05 f2 38 03 00    	mov    DWORD PTR [rip+0x338f2],eax        # 4a77c <stbi__de_iphone_flag>
   16e8a:	90                   	nop
   16e8b:	5d                   	pop    rbp
   16e8c:	c3                   	ret    

0000000000016e8d <stbi__de_iphone(stbi__png*)>:
   16e8d:	55                   	push   rbp
   16e8e:	48 89 e5             	mov    rbp,rsp
   16e91:	48 83 ec 30          	sub    rsp,0x30
   16e95:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   16e99:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   16e9d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   16ea0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   16ea4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   16ea8:	8b 10                	mov    edx,DWORD PTR [rax]
   16eaa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   16eae:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   16eb1:	0f af c2             	imul   eax,edx
   16eb4:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   16eb7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   16ebb:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   16ebf:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   16ec3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   16ec7:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
   16eca:	83 f8 03             	cmp    eax,0x3
   16ecd:	75 45                	jne    16f14 <stbi__de_iphone(stbi__png*)+0x87>
   16ecf:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   16ed6:	eb 2f                	jmp    16f07 <stbi__de_iphone(stbi__png*)+0x7a>
   16ed8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16edc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16edf:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
   16ee2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16ee6:	0f b6 50 02          	movzx  edx,BYTE PTR [rax+0x2]
   16eea:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16eee:	88 10                	mov    BYTE PTR [rax],dl
   16ef0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16ef4:	48 8d 50 02          	lea    rdx,[rax+0x2]
   16ef8:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
   16efc:	88 02                	mov    BYTE PTR [rdx],al
   16efe:	48 83 45 f0 03       	add    QWORD PTR [rbp-0x10],0x3
   16f03:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   16f07:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   16f0a:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   16f0d:	72 c9                	jb     16ed8 <stbi__de_iphone(stbi__png*)+0x4b>
   16f0f:	e9 6d 01 00 00       	jmp    17081 <stbi__de_iphone(stbi__png*)+0x1f4>
   16f14:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   16f18:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
   16f1b:	83 f8 04             	cmp    eax,0x4
   16f1e:	74 28                	je     16f48 <stbi__de_iphone(stbi__png*)+0xbb>
   16f20:	48 8d 05 c1 3e 02 00 	lea    rax,[rip+0x23ec1]        # 3ade8 <stbi__depth_scale_table+0x1f0>
   16f27:	48 89 c1             	mov    rcx,rax
   16f2a:	ba f0 12 00 00       	mov    edx,0x12f0
   16f2f:	48 8d 05 62 31 02 00 	lea    rax,[rip+0x23162]        # 3a098 <_IO_stdin_used+0x98>
   16f36:	48 89 c6             	mov    rsi,rax
   16f39:	48 8d 05 c9 3e 02 00 	lea    rax,[rip+0x23ec9]        # 3ae09 <stbi__depth_scale_table+0x211>
   16f40:	48 89 c7             	mov    rdi,rax
   16f43:	e8 38 d3 fe ff       	call   4280 <__assert_fail@plt>
   16f48:	8b 05 2a 38 03 00    	mov    eax,DWORD PTR [rip+0x3382a]        # 4a778 <stbi__unpremultiply_on_load>
   16f4e:	85 c0                	test   eax,eax
   16f50:	0f 84 eb 00 00 00    	je     17041 <stbi__de_iphone(stbi__png*)+0x1b4>
   16f56:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   16f5d:	e9 d1 00 00 00       	jmp    17033 <stbi__de_iphone(stbi__png*)+0x1a6>
   16f62:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16f66:	0f b6 40 03          	movzx  eax,BYTE PTR [rax+0x3]
   16f6a:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
   16f6d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16f71:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16f74:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
   16f77:	80 7d e4 00          	cmp    BYTE PTR [rbp-0x1c],0x0
   16f7b:	0f 84 8d 00 00 00    	je     1700e <stbi__de_iphone(stbi__png*)+0x181>
   16f81:	0f b6 45 e4          	movzx  eax,BYTE PTR [rbp-0x1c]
   16f85:	d0 e8                	shr    al,1
   16f87:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
   16f8a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16f8e:	48 83 c0 02          	add    rax,0x2
   16f92:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16f95:	0f b6 d0             	movzx  edx,al
   16f98:	89 d0                	mov    eax,edx
   16f9a:	c1 e0 08             	shl    eax,0x8
   16f9d:	29 d0                	sub    eax,edx
   16f9f:	89 c1                	mov    ecx,eax
   16fa1:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
   16fa5:	01 c8                	add    eax,ecx
   16fa7:	0f b6 75 e4          	movzx  esi,BYTE PTR [rbp-0x1c]
   16fab:	99                   	cdq    
   16fac:	f7 fe                	idiv   esi
   16fae:	89 c2                	mov    edx,eax
   16fb0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16fb4:	88 10                	mov    BYTE PTR [rax],dl
   16fb6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16fba:	48 83 c0 01          	add    rax,0x1
   16fbe:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   16fc1:	0f b6 d0             	movzx  edx,al
   16fc4:	89 d0                	mov    eax,edx
   16fc6:	c1 e0 08             	shl    eax,0x8
   16fc9:	29 d0                	sub    eax,edx
   16fcb:	89 c1                	mov    ecx,eax
   16fcd:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
   16fd1:	01 c8                	add    eax,ecx
   16fd3:	0f b6 7d e4          	movzx  edi,BYTE PTR [rbp-0x1c]
   16fd7:	99                   	cdq    
   16fd8:	f7 ff                	idiv   edi
   16fda:	89 c2                	mov    edx,eax
   16fdc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   16fe0:	48 83 c0 01          	add    rax,0x1
   16fe4:	88 10                	mov    BYTE PTR [rax],dl
   16fe6:	0f b6 55 e5          	movzx  edx,BYTE PTR [rbp-0x1b]
   16fea:	89 d0                	mov    eax,edx
   16fec:	c1 e0 08             	shl    eax,0x8
   16fef:	29 d0                	sub    eax,edx
   16ff1:	89 c1                	mov    ecx,eax
   16ff3:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
   16ff7:	01 c8                	add    eax,ecx
   16ff9:	0f b6 75 e4          	movzx  esi,BYTE PTR [rbp-0x1c]
   16ffd:	99                   	cdq    
   16ffe:	f7 fe                	idiv   esi
   17000:	89 c2                	mov    edx,eax
   17002:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   17006:	48 83 c0 02          	add    rax,0x2
   1700a:	88 10                	mov    BYTE PTR [rax],dl
   1700c:	eb 1c                	jmp    1702a <stbi__de_iphone(stbi__png*)+0x19d>
   1700e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   17012:	0f b6 50 02          	movzx  edx,BYTE PTR [rax+0x2]
   17016:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1701a:	88 10                	mov    BYTE PTR [rax],dl
   1701c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   17020:	48 8d 50 02          	lea    rdx,[rax+0x2]
   17024:	0f b6 45 e5          	movzx  eax,BYTE PTR [rbp-0x1b]
   17028:	88 02                	mov    BYTE PTR [rdx],al
   1702a:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
   1702f:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   17033:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   17036:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   17039:	0f 82 23 ff ff ff    	jb     16f62 <stbi__de_iphone(stbi__png*)+0xd5>
   1703f:	eb 40                	jmp    17081 <stbi__de_iphone(stbi__png*)+0x1f4>
   17041:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   17048:	eb 2f                	jmp    17079 <stbi__de_iphone(stbi__png*)+0x1ec>
   1704a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1704e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   17051:	88 45 e3             	mov    BYTE PTR [rbp-0x1d],al
   17054:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   17058:	0f b6 50 02          	movzx  edx,BYTE PTR [rax+0x2]
   1705c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   17060:	88 10                	mov    BYTE PTR [rax],dl
   17062:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   17066:	48 8d 50 02          	lea    rdx,[rax+0x2]
   1706a:	0f b6 45 e3          	movzx  eax,BYTE PTR [rbp-0x1d]
   1706e:	88 02                	mov    BYTE PTR [rdx],al
   17070:	48 83 45 f0 04       	add    QWORD PTR [rbp-0x10],0x4
   17075:	83 45 e8 01          	add    DWORD PTR [rbp-0x18],0x1
   17079:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1707c:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   1707f:	72 c9                	jb     1704a <stbi__de_iphone(stbi__png*)+0x1bd>
   17081:	90                   	nop
   17082:	c9                   	leave  
   17083:	c3                   	ret    

0000000000017084 <stbi__parse_png_file(stbi__png*, int, int)>:
   17084:	55                   	push   rbp
   17085:	48 89 e5             	mov    rbp,rsp
   17088:	53                   	push   rbx
   17089:	48 81 ec 98 04 00 00 	sub    rsp,0x498
   17090:	48 89 bd 68 fb ff ff 	mov    QWORD PTR [rbp-0x498],rdi
   17097:	89 b5 64 fb ff ff    	mov    DWORD PTR [rbp-0x49c],esi
   1709d:	89 95 60 fb ff ff    	mov    DWORD PTR [rbp-0x4a0],edx
   170a3:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   170ac:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   170b0:	31 c0                	xor    eax,eax
   170b2:	c6 85 7e fb ff ff 00 	mov    BYTE PTR [rbp-0x482],0x0
   170b9:	c6 85 7f fb ff ff 00 	mov    BYTE PTR [rbp-0x481],0x0
   170c0:	66 c7 85 dd fb ff ff 00 00 	mov    WORD PTR [rbp-0x423],0x0
   170c9:	c6 85 df fb ff ff 00 	mov    BYTE PTR [rbp-0x421],0x0
   170d0:	c7 85 84 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x47c],0x0
   170da:	c7 85 88 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x478],0x0
   170e4:	c7 85 90 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x470],0x0
   170ee:	c7 85 94 fb ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x46c],0x1
   170f8:	c7 85 9c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x464],0x0
   17102:	c7 85 a0 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x460],0x0
   1710c:	c7 85 a4 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x45c],0x0
   17116:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1711d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17120:	48 89 85 b8 fb ff ff 	mov    QWORD PTR [rbp-0x448],rax
   17127:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1712e:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   17136:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1713d:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   17145:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1714c:	48 c7 40 18 00 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
   17154:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1715b:	48 89 c7             	mov    rdi,rax
   1715e:	e8 8c df ff ff       	call   150ef <stbi__check_png_header(stbi__context*)>
   17163:	85 c0                	test   eax,eax
   17165:	0f 94 c0             	sete   al
   17168:	84 c0                	test   al,al
   1716a:	74 0a                	je     17176 <stbi__parse_png_file(stbi__png*, int, int)+0xf2>
   1716c:	b8 00 00 00 00       	mov    eax,0x0
   17171:	e9 52 0d 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17176:	83 bd 64 fb ff ff 01 	cmp    DWORD PTR [rbp-0x49c],0x1
   1717d:	75 0a                	jne    17189 <stbi__parse_png_file(stbi__png*, int, int)+0x105>
   1717f:	b8 01 00 00 00       	mov    eax,0x1
   17184:	e9 3f 0d 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17189:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17190:	48 89 c7             	mov    rdi,rax
   17193:	e8 04 df ff ff       	call   1509c <stbi__get_chunk_header(stbi__context*)>
   17198:	48 89 85 cc fb ff ff 	mov    QWORD PTR [rbp-0x434],rax
   1719f:	8b 85 d0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x430]
   171a5:	3d 53 4e 52 74       	cmp    eax,0x74524e53
   171aa:	0f 84 4a 05 00 00    	je     176fa <stbi__parse_png_file(stbi__png*, int, int)+0x676>
   171b0:	3d 53 4e 52 74       	cmp    eax,0x74524e53
   171b5:	0f 87 67 0c 00 00    	ja     17e22 <stbi__parse_png_file(stbi__png*, int, int)+0xd9e>
   171bb:	3d 45 54 4c 50       	cmp    eax,0x504c5445
   171c0:	0f 84 ff 03 00 00    	je     175c5 <stbi__parse_png_file(stbi__png*, int, int)+0x541>
   171c6:	3d 45 54 4c 50       	cmp    eax,0x504c5445
   171cb:	0f 87 51 0c 00 00    	ja     17e22 <stbi__parse_png_file(stbi__png*, int, int)+0xd9e>
   171d1:	3d 52 44 48 49       	cmp    eax,0x49484452
   171d6:	74 60                	je     17238 <stbi__parse_png_file(stbi__png*, int, int)+0x1b4>
   171d8:	3d 52 44 48 49       	cmp    eax,0x49484452
   171dd:	0f 87 3f 0c 00 00    	ja     17e22 <stbi__parse_png_file(stbi__png*, int, int)+0xd9e>
   171e3:	3d 44 4e 45 49       	cmp    eax,0x49454e44
   171e8:	0f 84 c0 08 00 00    	je     17aae <stbi__parse_png_file(stbi__png*, int, int)+0xa2a>
   171ee:	3d 44 4e 45 49       	cmp    eax,0x49454e44
   171f3:	0f 87 29 0c 00 00    	ja     17e22 <stbi__parse_png_file(stbi__png*, int, int)+0xd9e>
   171f9:	3d 49 42 67 43       	cmp    eax,0x43674249
   171fe:	74 10                	je     17210 <stbi__parse_png_file(stbi__png*, int, int)+0x18c>
   17200:	3d 54 41 44 49       	cmp    eax,0x49444154
   17205:	0f 84 06 07 00 00    	je     17911 <stbi__parse_png_file(stbi__png*, int, int)+0x88d>
   1720b:	e9 12 0c 00 00       	jmp    17e22 <stbi__parse_png_file(stbi__png*, int, int)+0xd9e>
   17210:	c7 85 a4 fb ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x45c],0x1
   1721a:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   17220:	89 c2                	mov    edx,eax
   17222:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17229:	89 d6                	mov    esi,edx
   1722b:	48 89 c7             	mov    rdi,rax
   1722e:	e8 d2 f3 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   17233:	e9 7c 0c 00 00       	jmp    17eb4 <stbi__parse_png_file(stbi__png*, int, int)+0xe30>
   17238:	83 bd 94 fb ff ff 00 	cmp    DWORD PTR [rbp-0x46c],0x0
   1723f:	75 14                	jne    17255 <stbi__parse_png_file(stbi__png*, int, int)+0x1d1>
   17241:	48 8d 05 d3 3b 02 00 	lea    rax,[rip+0x23bd3]        # 3ae1b <stbi__depth_scale_table+0x223>
   17248:	48 89 c7             	mov    rdi,rax
   1724b:	e8 22 d9 fe ff       	call   4b72 <stbi__err(char const*)>
   17250:	e9 73 0c 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17255:	c7 85 94 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x46c],0x0
   1725f:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   17265:	83 f8 0d             	cmp    eax,0xd
   17268:	74 14                	je     1727e <stbi__parse_png_file(stbi__png*, int, int)+0x1fa>
   1726a:	48 8d 05 b8 3b 02 00 	lea    rax,[rip+0x23bb8]        # 3ae29 <stbi__depth_scale_table+0x231>
   17271:	48 89 c7             	mov    rdi,rax
   17274:	e8 f9 d8 fe ff       	call   4b72 <stbi__err(char const*)>
   17279:	e9 4a 0c 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   1727e:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17285:	48 89 c7             	mov    rdi,rax
   17288:	e8 a5 f5 fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1728d:	48 8b 95 b8 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x448]
   17294:	89 02                	mov    DWORD PTR [rdx],eax
   17296:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1729d:	8b 00                	mov    eax,DWORD PTR [rax]
   1729f:	3d 00 00 00 01       	cmp    eax,0x1000000
   172a4:	76 14                	jbe    172ba <stbi__parse_png_file(stbi__png*, int, int)+0x236>
   172a6:	48 8d 05 9f 33 02 00 	lea    rax,[rip+0x2339f]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   172ad:	48 89 c7             	mov    rdi,rax
   172b0:	e8 bd d8 fe ff       	call   4b72 <stbi__err(char const*)>
   172b5:	e9 0e 0c 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   172ba:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   172c1:	48 89 c7             	mov    rdi,rax
   172c4:	e8 69 f5 fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   172c9:	48 8b 95 b8 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x448]
   172d0:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
   172d3:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   172da:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   172dd:	3d 00 00 00 01       	cmp    eax,0x1000000
   172e2:	76 14                	jbe    172f8 <stbi__parse_png_file(stbi__png*, int, int)+0x274>
   172e4:	48 8d 05 61 33 02 00 	lea    rax,[rip+0x23361]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   172eb:	48 89 c7             	mov    rdi,rax
   172ee:	e8 7f d8 fe ff       	call   4b72 <stbi__err(char const*)>
   172f3:	e9 d0 0b 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   172f8:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   172ff:	48 89 c7             	mov    rdi,rax
   17302:	e8 0a f2 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   17307:	0f b6 d0             	movzx  edx,al
   1730a:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17311:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   17314:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1731b:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1731e:	83 f8 01             	cmp    eax,0x1
   17321:	74 50                	je     17373 <stbi__parse_png_file(stbi__png*, int, int)+0x2ef>
   17323:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1732a:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1732d:	83 f8 02             	cmp    eax,0x2
   17330:	74 41                	je     17373 <stbi__parse_png_file(stbi__png*, int, int)+0x2ef>
   17332:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17339:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1733c:	83 f8 04             	cmp    eax,0x4
   1733f:	74 32                	je     17373 <stbi__parse_png_file(stbi__png*, int, int)+0x2ef>
   17341:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17348:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1734b:	83 f8 08             	cmp    eax,0x8
   1734e:	74 23                	je     17373 <stbi__parse_png_file(stbi__png*, int, int)+0x2ef>
   17350:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17357:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1735a:	83 f8 10             	cmp    eax,0x10
   1735d:	74 14                	je     17373 <stbi__parse_png_file(stbi__png*, int, int)+0x2ef>
   1735f:	48 8d 05 d0 3a 02 00 	lea    rax,[rip+0x23ad0]        # 3ae36 <stbi__depth_scale_table+0x23e>
   17366:	48 89 c7             	mov    rdi,rax
   17369:	e8 04 d8 fe ff       	call   4b72 <stbi__err(char const*)>
   1736e:	e9 55 0b 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17373:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1737a:	48 89 c7             	mov    rdi,rax
   1737d:	e8 8f f1 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   17382:	0f b6 c0             	movzx  eax,al
   17385:	89 85 a0 fb ff ff    	mov    DWORD PTR [rbp-0x460],eax
   1738b:	83 bd a0 fb ff ff 06 	cmp    DWORD PTR [rbp-0x460],0x6
   17392:	7e 14                	jle    173a8 <stbi__parse_png_file(stbi__png*, int, int)+0x324>
   17394:	48 8d 05 af 3a 02 00 	lea    rax,[rip+0x23aaf]        # 3ae4a <stbi__depth_scale_table+0x252>
   1739b:	48 89 c7             	mov    rdi,rax
   1739e:	e8 cf d7 fe ff       	call   4b72 <stbi__err(char const*)>
   173a3:	e9 20 0b 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   173a8:	83 bd a0 fb ff ff 03 	cmp    DWORD PTR [rbp-0x460],0x3
   173af:	75 23                	jne    173d4 <stbi__parse_png_file(stbi__png*, int, int)+0x350>
   173b1:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   173b8:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   173bb:	83 f8 10             	cmp    eax,0x10
   173be:	75 14                	jne    173d4 <stbi__parse_png_file(stbi__png*, int, int)+0x350>
   173c0:	48 8d 05 83 3a 02 00 	lea    rax,[rip+0x23a83]        # 3ae4a <stbi__depth_scale_table+0x252>
   173c7:	48 89 c7             	mov    rdi,rax
   173ca:	e8 a3 d7 fe ff       	call   4b72 <stbi__err(char const*)>
   173cf:	e9 f4 0a 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   173d4:	83 bd a0 fb ff ff 03 	cmp    DWORD PTR [rbp-0x460],0x3
   173db:	75 09                	jne    173e6 <stbi__parse_png_file(stbi__png*, int, int)+0x362>
   173dd:	c6 85 7e fb ff ff 03 	mov    BYTE PTR [rbp-0x482],0x3
   173e4:	eb 21                	jmp    17407 <stbi__parse_png_file(stbi__png*, int, int)+0x383>
   173e6:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   173ec:	83 e0 01             	and    eax,0x1
   173ef:	85 c0                	test   eax,eax
   173f1:	74 14                	je     17407 <stbi__parse_png_file(stbi__png*, int, int)+0x383>
   173f3:	48 8d 05 50 3a 02 00 	lea    rax,[rip+0x23a50]        # 3ae4a <stbi__depth_scale_table+0x252>
   173fa:	48 89 c7             	mov    rdi,rax
   173fd:	e8 70 d7 fe ff       	call   4b72 <stbi__err(char const*)>
   17402:	e9 c1 0a 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17407:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1740e:	48 89 c7             	mov    rdi,rax
   17411:	e8 fb f0 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   17416:	0f b6 c0             	movzx  eax,al
   17419:	89 85 a8 fb ff ff    	mov    DWORD PTR [rbp-0x458],eax
   1741f:	83 bd a8 fb ff ff 00 	cmp    DWORD PTR [rbp-0x458],0x0
   17426:	74 14                	je     1743c <stbi__parse_png_file(stbi__png*, int, int)+0x3b8>
   17428:	48 8d 05 25 3a 02 00 	lea    rax,[rip+0x23a25]        # 3ae54 <stbi__depth_scale_table+0x25c>
   1742f:	48 89 c7             	mov    rdi,rax
   17432:	e8 3b d7 fe ff       	call   4b72 <stbi__err(char const*)>
   17437:	e9 8c 0a 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   1743c:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17443:	48 89 c7             	mov    rdi,rax
   17446:	e8 c6 f0 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1744b:	0f b6 c0             	movzx  eax,al
   1744e:	89 85 ac fb ff ff    	mov    DWORD PTR [rbp-0x454],eax
   17454:	83 bd ac fb ff ff 00 	cmp    DWORD PTR [rbp-0x454],0x0
   1745b:	74 14                	je     17471 <stbi__parse_png_file(stbi__png*, int, int)+0x3ed>
   1745d:	48 8d 05 00 3a 02 00 	lea    rax,[rip+0x23a00]        # 3ae64 <stbi__depth_scale_table+0x26c>
   17464:	48 89 c7             	mov    rdi,rax
   17467:	e8 06 d7 fe ff       	call   4b72 <stbi__err(char const*)>
   1746c:	e9 57 0a 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17471:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17478:	48 89 c7             	mov    rdi,rax
   1747b:	e8 91 f0 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   17480:	0f b6 c0             	movzx  eax,al
   17483:	89 85 9c fb ff ff    	mov    DWORD PTR [rbp-0x464],eax
   17489:	83 bd 9c fb ff ff 01 	cmp    DWORD PTR [rbp-0x464],0x1
   17490:	7e 14                	jle    174a6 <stbi__parse_png_file(stbi__png*, int, int)+0x422>
   17492:	48 8d 05 dd 39 02 00 	lea    rax,[rip+0x239dd]        # 3ae76 <stbi__depth_scale_table+0x27e>
   17499:	48 89 c7             	mov    rdi,rax
   1749c:	e8 d1 d6 fe ff       	call   4b72 <stbi__err(char const*)>
   174a1:	e9 22 0a 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   174a6:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   174ad:	8b 00                	mov    eax,DWORD PTR [rax]
   174af:	85 c0                	test   eax,eax
   174b1:	74 0e                	je     174c1 <stbi__parse_png_file(stbi__png*, int, int)+0x43d>
   174b3:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   174ba:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   174bd:	85 c0                	test   eax,eax
   174bf:	75 14                	jne    174d5 <stbi__parse_png_file(stbi__png*, int, int)+0x451>
   174c1:	48 8d 05 c3 39 02 00 	lea    rax,[rip+0x239c3]        # 3ae8b <stbi__depth_scale_table+0x293>
   174c8:	48 89 c7             	mov    rdi,rax
   174cb:	e8 a2 d6 fe ff       	call   4b72 <stbi__err(char const*)>
   174d0:	e9 f3 09 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   174d5:	80 bd 7e fb ff ff 00 	cmp    BYTE PTR [rbp-0x482],0x0
   174dc:	0f 85 98 00 00 00    	jne    1757a <stbi__parse_png_file(stbi__png*, int, int)+0x4f6>
   174e2:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   174e8:	83 e0 02             	and    eax,0x2
   174eb:	85 c0                	test   eax,eax
   174ed:	74 07                	je     174f6 <stbi__parse_png_file(stbi__png*, int, int)+0x472>
   174ef:	ba 03 00 00 00       	mov    edx,0x3
   174f4:	eb 05                	jmp    174fb <stbi__parse_png_file(stbi__png*, int, int)+0x477>
   174f6:	ba 01 00 00 00       	mov    edx,0x1
   174fb:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   17501:	c1 f8 02             	sar    eax,0x2
   17504:	83 e0 01             	and    eax,0x1
   17507:	01 c2                	add    edx,eax
   17509:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17510:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   17513:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1751a:	8b 18                	mov    ebx,DWORD PTR [rax]
   1751c:	b8 00 00 00 40       	mov    eax,0x40000000
   17521:	ba 00 00 00 00       	mov    edx,0x0
   17526:	f7 f3                	div    ebx
   17528:	89 c2                	mov    edx,eax
   1752a:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17531:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   17534:	89 c1                	mov    ecx,eax
   17536:	89 d0                	mov    eax,edx
   17538:	ba 00 00 00 00       	mov    edx,0x0
   1753d:	f7 f1                	div    ecx
   1753f:	89 c2                	mov    edx,eax
   17541:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17548:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1754b:	39 c2                	cmp    edx,eax
   1754d:	73 14                	jae    17563 <stbi__parse_png_file(stbi__png*, int, int)+0x4df>
   1754f:	48 8d 05 f6 30 02 00 	lea    rax,[rip+0x230f6]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   17556:	48 89 c7             	mov    rdi,rax
   17559:	e8 14 d6 fe ff       	call   4b72 <stbi__err(char const*)>
   1755e:	e9 65 09 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17563:	83 bd 64 fb ff ff 02 	cmp    DWORD PTR [rbp-0x49c],0x2
   1756a:	0f 85 43 09 00 00    	jne    17eb3 <stbi__parse_png_file(stbi__png*, int, int)+0xe2f>
   17570:	b8 01 00 00 00       	mov    eax,0x1
   17575:	e9 4e 09 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   1757a:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17581:	c7 40 08 01 00 00 00 	mov    DWORD PTR [rax+0x8],0x1
   17588:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1758f:	8b 18                	mov    ebx,DWORD PTR [rax]
   17591:	b8 00 00 00 10       	mov    eax,0x10000000
   17596:	ba 00 00 00 00       	mov    edx,0x0
   1759b:	f7 f3                	div    ebx
   1759d:	89 c2                	mov    edx,eax
   1759f:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   175a6:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   175a9:	39 c2                	cmp    edx,eax
   175ab:	0f 83 02 09 00 00    	jae    17eb3 <stbi__parse_png_file(stbi__png*, int, int)+0xe2f>
   175b1:	48 8d 05 94 30 02 00 	lea    rax,[rip+0x23094]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   175b8:	48 89 c7             	mov    rdi,rax
   175bb:	e8 b2 d5 fe ff       	call   4b72 <stbi__err(char const*)>
   175c0:	e9 03 09 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   175c5:	83 bd 94 fb ff ff 00 	cmp    DWORD PTR [rbp-0x46c],0x0
   175cc:	74 14                	je     175e2 <stbi__parse_png_file(stbi__png*, int, int)+0x55e>
   175ce:	48 8d 05 c4 38 02 00 	lea    rax,[rip+0x238c4]        # 3ae99 <stbi__depth_scale_table+0x2a1>
   175d5:	48 89 c7             	mov    rdi,rax
   175d8:	e8 95 d5 fe ff       	call   4b72 <stbi__err(char const*)>
   175dd:	e9 e6 08 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   175e2:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   175e8:	3d 00 03 00 00       	cmp    eax,0x300
   175ed:	76 14                	jbe    17603 <stbi__parse_png_file(stbi__png*, int, int)+0x57f>
   175ef:	48 8d 05 b2 38 02 00 	lea    rax,[rip+0x238b2]        # 3aea8 <stbi__depth_scale_table+0x2b0>
   175f6:	48 89 c7             	mov    rdi,rax
   175f9:	e8 74 d5 fe ff       	call   4b72 <stbi__err(char const*)>
   175fe:	e9 c5 08 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17603:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   17609:	89 c2                	mov    edx,eax
   1760b:	b8 ab aa aa aa       	mov    eax,0xaaaaaaab
   17610:	48 0f af c2          	imul   rax,rdx
   17614:	48 c1 e8 20          	shr    rax,0x20
   17618:	d1 e8                	shr    eax,1
   1761a:	89 85 90 fb ff ff    	mov    DWORD PTR [rbp-0x470],eax
   17620:	8b 95 90 fb ff ff    	mov    edx,DWORD PTR [rbp-0x470]
   17626:	89 d0                	mov    eax,edx
   17628:	01 c0                	add    eax,eax
   1762a:	01 c2                	add    edx,eax
   1762c:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   17632:	39 c2                	cmp    edx,eax
   17634:	74 14                	je     1764a <stbi__parse_png_file(stbi__png*, int, int)+0x5c6>
   17636:	48 8d 05 6b 38 02 00 	lea    rax,[rip+0x2386b]        # 3aea8 <stbi__depth_scale_table+0x2b0>
   1763d:	48 89 c7             	mov    rdi,rax
   17640:	e8 2d d5 fe ff       	call   4b72 <stbi__err(char const*)>
   17645:	e9 7e 08 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   1764a:	c7 85 8c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x474],0x0
   17654:	e9 8a 00 00 00       	jmp    176e3 <stbi__parse_png_file(stbi__png*, int, int)+0x65f>
   17659:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   1765f:	8d 1c 85 00 00 00 00 	lea    ebx,[rax*4+0x0]
   17666:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1766d:	48 89 c7             	mov    rdi,rax
   17670:	e8 9c ee fe ff       	call   6511 <stbi__get8(stbi__context*)>
   17675:	89 da                	mov    edx,ebx
   17677:	88 84 15 e0 fb ff ff 	mov    BYTE PTR [rbp+rdx*1-0x420],al
   1767e:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   17684:	c1 e0 02             	shl    eax,0x2
   17687:	8d 58 01             	lea    ebx,[rax+0x1]
   1768a:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17691:	48 89 c7             	mov    rdi,rax
   17694:	e8 78 ee fe ff       	call   6511 <stbi__get8(stbi__context*)>
   17699:	89 da                	mov    edx,ebx
   1769b:	88 84 15 e0 fb ff ff 	mov    BYTE PTR [rbp+rdx*1-0x420],al
   176a2:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   176a8:	c1 e0 02             	shl    eax,0x2
   176ab:	8d 58 02             	lea    ebx,[rax+0x2]
   176ae:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   176b5:	48 89 c7             	mov    rdi,rax
   176b8:	e8 54 ee fe ff       	call   6511 <stbi__get8(stbi__context*)>
   176bd:	89 da                	mov    edx,ebx
   176bf:	88 84 15 e0 fb ff ff 	mov    BYTE PTR [rbp+rdx*1-0x420],al
   176c6:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   176cc:	c1 e0 02             	shl    eax,0x2
   176cf:	83 c0 03             	add    eax,0x3
   176d2:	89 c0                	mov    eax,eax
   176d4:	c6 84 05 e0 fb ff ff ff 	mov    BYTE PTR [rbp+rax*1-0x420],0xff
   176dc:	83 85 8c fb ff ff 01 	add    DWORD PTR [rbp-0x474],0x1
   176e3:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   176e9:	3b 85 90 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x470]
   176ef:	0f 82 64 ff ff ff    	jb     17659 <stbi__parse_png_file(stbi__png*, int, int)+0x5d5>
   176f5:	e9 ba 07 00 00       	jmp    17eb4 <stbi__parse_png_file(stbi__png*, int, int)+0xe30>
   176fa:	83 bd 94 fb ff ff 00 	cmp    DWORD PTR [rbp-0x46c],0x0
   17701:	74 14                	je     17717 <stbi__parse_png_file(stbi__png*, int, int)+0x693>
   17703:	48 8d 05 8f 37 02 00 	lea    rax,[rip+0x2378f]        # 3ae99 <stbi__depth_scale_table+0x2a1>
   1770a:	48 89 c7             	mov    rdi,rax
   1770d:	e8 60 d4 fe ff       	call   4b72 <stbi__err(char const*)>
   17712:	e9 b1 07 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17717:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   1771e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   17722:	48 85 c0             	test   rax,rax
   17725:	74 14                	je     1773b <stbi__parse_png_file(stbi__png*, int, int)+0x6b7>
   17727:	48 8d 05 87 37 02 00 	lea    rax,[rip+0x23787]        # 3aeb5 <stbi__depth_scale_table+0x2bd>
   1772e:	48 89 c7             	mov    rdi,rax
   17731:	e8 3c d4 fe ff       	call   4b72 <stbi__err(char const*)>
   17736:	e9 8d 07 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   1773b:	80 bd 7e fb ff ff 00 	cmp    BYTE PTR [rbp-0x482],0x0
   17742:	0f 84 b1 00 00 00    	je     177f9 <stbi__parse_png_file(stbi__png*, int, int)+0x775>
   17748:	83 bd 64 fb ff ff 02 	cmp    DWORD PTR [rbp-0x49c],0x2
   1774f:	75 18                	jne    17769 <stbi__parse_png_file(stbi__png*, int, int)+0x6e5>
   17751:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17758:	c7 40 08 04 00 00 00 	mov    DWORD PTR [rax+0x8],0x4
   1775f:	b8 01 00 00 00       	mov    eax,0x1
   17764:	e9 5f 07 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17769:	83 bd 90 fb ff ff 00 	cmp    DWORD PTR [rbp-0x470],0x0
   17770:	75 14                	jne    17786 <stbi__parse_png_file(stbi__png*, int, int)+0x702>
   17772:	48 8d 05 4c 37 02 00 	lea    rax,[rip+0x2374c]        # 3aec5 <stbi__depth_scale_table+0x2cd>
   17779:	48 89 c7             	mov    rdi,rax
   1777c:	e8 f1 d3 fe ff       	call   4b72 <stbi__err(char const*)>
   17781:	e9 42 07 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17786:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   1778c:	39 85 90 fb ff ff    	cmp    DWORD PTR [rbp-0x470],eax
   17792:	73 14                	jae    177a8 <stbi__parse_png_file(stbi__png*, int, int)+0x724>
   17794:	48 8d 05 3b 37 02 00 	lea    rax,[rip+0x2373b]        # 3aed6 <stbi__depth_scale_table+0x2de>
   1779b:	48 89 c7             	mov    rdi,rax
   1779e:	e8 cf d3 fe ff       	call   4b72 <stbi__err(char const*)>
   177a3:	e9 20 07 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   177a8:	c6 85 7e fb ff ff 04 	mov    BYTE PTR [rbp-0x482],0x4
   177af:	c7 85 8c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x474],0x0
   177b9:	eb 2b                	jmp    177e6 <stbi__parse_png_file(stbi__png*, int, int)+0x762>
   177bb:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   177c1:	c1 e0 02             	shl    eax,0x2
   177c4:	8d 58 03             	lea    ebx,[rax+0x3]
   177c7:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   177ce:	48 89 c7             	mov    rdi,rax
   177d1:	e8 3b ed fe ff       	call   6511 <stbi__get8(stbi__context*)>
   177d6:	89 da                	mov    edx,ebx
   177d8:	88 84 15 e0 fb ff ff 	mov    BYTE PTR [rbp+rdx*1-0x420],al
   177df:	83 85 8c fb ff ff 01 	add    DWORD PTR [rbp-0x474],0x1
   177e6:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   177ec:	39 85 8c fb ff ff    	cmp    DWORD PTR [rbp-0x474],eax
   177f2:	72 c7                	jb     177bb <stbi__parse_png_file(stbi__png*, int, int)+0x737>
   177f4:	e9 bb 06 00 00       	jmp    17eb4 <stbi__parse_png_file(stbi__png*, int, int)+0xe30>
   177f9:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17800:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   17803:	83 e0 01             	and    eax,0x1
   17806:	85 c0                	test   eax,eax
   17808:	75 14                	jne    1781e <stbi__parse_png_file(stbi__png*, int, int)+0x79a>
   1780a:	48 8d 05 d2 36 02 00 	lea    rax,[rip+0x236d2]        # 3aee3 <stbi__depth_scale_table+0x2eb>
   17811:	48 89 c7             	mov    rdi,rax
   17814:	e8 59 d3 fe ff       	call   4b72 <stbi__err(char const*)>
   17819:	e9 aa 06 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   1781e:	8b 95 cc fb ff ff    	mov    edx,DWORD PTR [rbp-0x434]
   17824:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1782b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1782e:	01 c0                	add    eax,eax
   17830:	39 c2                	cmp    edx,eax
   17832:	74 14                	je     17848 <stbi__parse_png_file(stbi__png*, int, int)+0x7c4>
   17834:	48 8d 05 9b 36 02 00 	lea    rax,[rip+0x2369b]        # 3aed6 <stbi__depth_scale_table+0x2de>
   1783b:	48 89 c7             	mov    rdi,rax
   1783e:	e8 2f d3 fe ff       	call   4b72 <stbi__err(char const*)>
   17843:	e9 80 06 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17848:	c6 85 7f fb ff ff 01 	mov    BYTE PTR [rbp-0x481],0x1
   1784f:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17856:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   17859:	83 f8 10             	cmp    eax,0x10
   1785c:	75 4b                	jne    178a9 <stbi__parse_png_file(stbi__png*, int, int)+0x825>
   1785e:	c7 85 98 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x468],0x0
   17868:	eb 28                	jmp    17892 <stbi__parse_png_file(stbi__png*, int, int)+0x80e>
   1786a:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17871:	48 89 c7             	mov    rdi,rax
   17874:	e8 7b ef fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   17879:	89 c2                	mov    edx,eax
   1787b:	8b 85 98 fb ff ff    	mov    eax,DWORD PTR [rbp-0x468]
   17881:	48 98                	cdqe   
   17883:	66 89 94 45 d6 fb ff ff 	mov    WORD PTR [rbp+rax*2-0x42a],dx
   1788b:	83 85 98 fb ff ff 01 	add    DWORD PTR [rbp-0x468],0x1
   17892:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17899:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1789c:	39 85 98 fb ff ff    	cmp    DWORD PTR [rbp-0x468],eax
   178a2:	7c c6                	jl     1786a <stbi__parse_png_file(stbi__png*, int, int)+0x7e6>
   178a4:	e9 0b 06 00 00       	jmp    17eb4 <stbi__parse_png_file(stbi__png*, int, int)+0xe30>
   178a9:	c7 85 98 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x468],0x0
   178b3:	eb 45                	jmp    178fa <stbi__parse_png_file(stbi__png*, int, int)+0x876>
   178b5:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   178bc:	48 89 c7             	mov    rdi,rax
   178bf:	e8 30 ef fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   178c4:	89 c1                	mov    ecx,eax
   178c6:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   178cd:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   178d0:	48 98                	cdqe   
   178d2:	48 8d 15 1f 33 02 00 	lea    rdx,[rip+0x2331f]        # 3abf8 <stbi__depth_scale_table>
   178d9:	0f b6 14 10          	movzx  edx,BYTE PTR [rax+rdx*1]
   178dd:	89 c8                	mov    eax,ecx
   178df:	0f af c2             	imul   eax,edx
   178e2:	89 c2                	mov    edx,eax
   178e4:	8b 85 98 fb ff ff    	mov    eax,DWORD PTR [rbp-0x468]
   178ea:	48 98                	cdqe   
   178ec:	88 94 05 dd fb ff ff 	mov    BYTE PTR [rbp+rax*1-0x423],dl
   178f3:	83 85 98 fb ff ff 01 	add    DWORD PTR [rbp-0x468],0x1
   178fa:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17901:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   17904:	39 85 98 fb ff ff    	cmp    DWORD PTR [rbp-0x468],eax
   1790a:	7c a9                	jl     178b5 <stbi__parse_png_file(stbi__png*, int, int)+0x831>
   1790c:	e9 a3 05 00 00       	jmp    17eb4 <stbi__parse_png_file(stbi__png*, int, int)+0xe30>
   17911:	83 bd 94 fb ff ff 00 	cmp    DWORD PTR [rbp-0x46c],0x0
   17918:	74 14                	je     1792e <stbi__parse_png_file(stbi__png*, int, int)+0x8aa>
   1791a:	48 8d 05 78 35 02 00 	lea    rax,[rip+0x23578]        # 3ae99 <stbi__depth_scale_table+0x2a1>
   17921:	48 89 c7             	mov    rdi,rax
   17924:	e8 49 d2 fe ff       	call   4b72 <stbi__err(char const*)>
   17929:	e9 9a 05 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   1792e:	80 bd 7e fb ff ff 00 	cmp    BYTE PTR [rbp-0x482],0x0
   17935:	74 1d                	je     17954 <stbi__parse_png_file(stbi__png*, int, int)+0x8d0>
   17937:	83 bd 90 fb ff ff 00 	cmp    DWORD PTR [rbp-0x470],0x0
   1793e:	75 14                	jne    17954 <stbi__parse_png_file(stbi__png*, int, int)+0x8d0>
   17940:	48 8d 05 ac 35 02 00 	lea    rax,[rip+0x235ac]        # 3aef3 <stbi__depth_scale_table+0x2fb>
   17947:	48 89 c7             	mov    rdi,rax
   1794a:	e8 23 d2 fe ff       	call   4b72 <stbi__err(char const*)>
   1794f:	e9 74 05 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17954:	83 bd 64 fb ff ff 02 	cmp    DWORD PTR [rbp-0x49c],0x2
   1795b:	75 1b                	jne    17978 <stbi__parse_png_file(stbi__png*, int, int)+0x8f4>
   1795d:	0f b6 95 7e fb ff ff 	movzx  edx,BYTE PTR [rbp-0x482]
   17964:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   1796b:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   1796e:	b8 01 00 00 00       	mov    eax,0x1
   17973:	e9 50 05 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17978:	8b 95 cc fb ff ff    	mov    edx,DWORD PTR [rbp-0x434]
   1797e:	8b 85 84 fb ff ff    	mov    eax,DWORD PTR [rbp-0x47c]
   17984:	01 d0                	add    eax,edx
   17986:	89 c2                	mov    edx,eax
   17988:	8b 85 84 fb ff ff    	mov    eax,DWORD PTR [rbp-0x47c]
   1798e:	39 c2                	cmp    edx,eax
   17990:	7d 0a                	jge    1799c <stbi__parse_png_file(stbi__png*, int, int)+0x918>
   17992:	b8 00 00 00 00       	mov    eax,0x0
   17997:	e9 2c 05 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   1799c:	8b 95 cc fb ff ff    	mov    edx,DWORD PTR [rbp-0x434]
   179a2:	8b 85 84 fb ff ff    	mov    eax,DWORD PTR [rbp-0x47c]
   179a8:	01 d0                	add    eax,edx
   179aa:	39 85 88 fb ff ff    	cmp    DWORD PTR [rbp-0x478],eax
   179b0:	0f 83 9c 00 00 00    	jae    17a52 <stbi__parse_png_file(stbi__png*, int, int)+0x9ce>
   179b6:	8b 85 88 fb ff ff    	mov    eax,DWORD PTR [rbp-0x478]
   179bc:	89 85 b4 fb ff ff    	mov    DWORD PTR [rbp-0x44c],eax
   179c2:	83 bd 88 fb ff ff 00 	cmp    DWORD PTR [rbp-0x478],0x0
   179c9:	75 1e                	jne    179e9 <stbi__parse_png_file(stbi__png*, int, int)+0x965>
   179cb:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   179d1:	ba 00 10 00 00       	mov    edx,0x1000
   179d6:	39 d0                	cmp    eax,edx
   179d8:	0f 42 c2             	cmovb  eax,edx
   179db:	89 85 88 fb ff ff    	mov    DWORD PTR [rbp-0x478],eax
   179e1:	eb 06                	jmp    179e9 <stbi__parse_png_file(stbi__png*, int, int)+0x965>
   179e3:	d1 a5 88 fb ff ff    	shl    DWORD PTR [rbp-0x478],1
   179e9:	8b 95 cc fb ff ff    	mov    edx,DWORD PTR [rbp-0x434]
   179ef:	8b 85 84 fb ff ff    	mov    eax,DWORD PTR [rbp-0x47c]
   179f5:	01 d0                	add    eax,edx
   179f7:	39 85 88 fb ff ff    	cmp    DWORD PTR [rbp-0x478],eax
   179fd:	72 e4                	jb     179e3 <stbi__parse_png_file(stbi__png*, int, int)+0x95f>
   179ff:	8b 95 88 fb ff ff    	mov    edx,DWORD PTR [rbp-0x478]
   17a05:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17a0c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   17a10:	48 89 d6             	mov    rsi,rdx
   17a13:	48 89 c7             	mov    rdi,rax
   17a16:	e8 05 cd fe ff       	call   4720 <realloc@plt>
   17a1b:	48 89 85 c0 fb ff ff 	mov    QWORD PTR [rbp-0x440],rax
   17a22:	48 83 bd c0 fb ff ff 00 	cmp    QWORD PTR [rbp-0x440],0x0
   17a2a:	75 14                	jne    17a40 <stbi__parse_png_file(stbi__png*, int, int)+0x9bc>
   17a2c:	48 8d 05 00 26 02 00 	lea    rax,[rip+0x22600]        # 3a033 <_IO_stdin_used+0x33>
   17a33:	48 89 c7             	mov    rdi,rax
   17a36:	e8 37 d1 fe ff       	call   4b72 <stbi__err(char const*)>
   17a3b:	e9 88 04 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17a40:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17a47:	48 8b 95 c0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x440]
   17a4e:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   17a52:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   17a58:	89 c2                	mov    edx,eax
   17a5a:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17a61:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   17a65:	8b 85 84 fb ff ff    	mov    eax,DWORD PTR [rbp-0x47c]
   17a6b:	48 01 c1             	add    rcx,rax
   17a6e:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17a75:	48 89 ce             	mov    rsi,rcx
   17a78:	48 89 c7             	mov    rdi,rax
   17a7b:	e8 40 ec fe ff       	call   66c0 <stbi__getn(stbi__context*, unsigned char*, int)>
   17a80:	85 c0                	test   eax,eax
   17a82:	0f 94 c0             	sete   al
   17a85:	84 c0                	test   al,al
   17a87:	74 14                	je     17a9d <stbi__parse_png_file(stbi__png*, int, int)+0xa19>
   17a89:	48 8d 05 6b 34 02 00 	lea    rax,[rip+0x2346b]        # 3aefb <stbi__depth_scale_table+0x303>
   17a90:	48 89 c7             	mov    rdi,rax
   17a93:	e8 da d0 fe ff       	call   4b72 <stbi__err(char const*)>
   17a98:	e9 2b 04 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17a9d:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   17aa3:	01 85 84 fb ff ff    	add    DWORD PTR [rbp-0x47c],eax
   17aa9:	e9 06 04 00 00       	jmp    17eb4 <stbi__parse_png_file(stbi__png*, int, int)+0xe30>
   17aae:	83 bd 94 fb ff ff 00 	cmp    DWORD PTR [rbp-0x46c],0x0
   17ab5:	74 14                	je     17acb <stbi__parse_png_file(stbi__png*, int, int)+0xa47>
   17ab7:	48 8d 05 db 33 02 00 	lea    rax,[rip+0x233db]        # 3ae99 <stbi__depth_scale_table+0x2a1>
   17abe:	48 89 c7             	mov    rdi,rax
   17ac1:	e8 ac d0 fe ff       	call   4b72 <stbi__err(char const*)>
   17ac6:	e9 fd 03 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17acb:	83 bd 64 fb ff ff 00 	cmp    DWORD PTR [rbp-0x49c],0x0
   17ad2:	74 0a                	je     17ade <stbi__parse_png_file(stbi__png*, int, int)+0xa5a>
   17ad4:	b8 01 00 00 00       	mov    eax,0x1
   17ad9:	e9 ea 03 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17ade:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17ae5:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   17ae9:	48 85 c0             	test   rax,rax
   17aec:	75 14                	jne    17b02 <stbi__parse_png_file(stbi__png*, int, int)+0xa7e>
   17aee:	48 8d 05 10 34 02 00 	lea    rax,[rip+0x23410]        # 3af05 <stbi__depth_scale_table+0x30d>
   17af5:	48 89 c7             	mov    rdi,rax
   17af8:	e8 75 d0 fe ff       	call   4b72 <stbi__err(char const*)>
   17afd:	e9 c6 03 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17b02:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17b09:	8b 10                	mov    edx,DWORD PTR [rax]
   17b0b:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17b12:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   17b15:	0f af c2             	imul   eax,edx
   17b18:	83 c0 07             	add    eax,0x7
   17b1b:	c1 e8 03             	shr    eax,0x3
   17b1e:	89 85 b0 fb ff ff    	mov    DWORD PTR [rbp-0x450],eax
   17b24:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17b2b:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   17b2e:	0f af 85 b0 fb ff ff 	imul   eax,DWORD PTR [rbp-0x450]
   17b35:	89 c2                	mov    edx,eax
   17b37:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17b3e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   17b41:	0f af d0             	imul   edx,eax
   17b44:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17b4b:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   17b4e:	01 d0                	add    eax,edx
   17b50:	89 85 80 fb ff ff    	mov    DWORD PTR [rbp-0x480],eax
   17b56:	83 bd a4 fb ff ff 00 	cmp    DWORD PTR [rbp-0x45c],0x0
   17b5d:	0f 94 c0             	sete   al
   17b60:	0f b6 c8             	movzx  ecx,al
   17b63:	8b 85 80 fb ff ff    	mov    eax,DWORD PTR [rbp-0x480]
   17b69:	89 c7                	mov    edi,eax
   17b6b:	8b b5 84 fb ff ff    	mov    esi,DWORD PTR [rbp-0x47c]
   17b71:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17b78:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   17b7c:	48 8d 95 80 fb ff ff 	lea    rdx,[rbp-0x480]
   17b83:	41 89 c8             	mov    r8d,ecx
   17b86:	48 89 d1             	mov    rcx,rdx
   17b89:	89 fa                	mov    edx,edi
   17b8b:	48 89 c7             	mov    rdi,rax
   17b8e:	e8 78 d1 ff ff       	call   14d0b <stbi_zlib_decode_malloc_guesssize_headerflag>
   17b93:	48 8b 95 68 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x498]
   17b9a:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
   17b9e:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17ba5:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   17ba9:	48 85 c0             	test   rax,rax
   17bac:	75 0a                	jne    17bb8 <stbi__parse_png_file(stbi__png*, int, int)+0xb34>
   17bae:	b8 00 00 00 00       	mov    eax,0x0
   17bb3:	e9 10 03 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17bb8:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17bbf:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   17bc3:	48 89 c7             	mov    rdi,rax
   17bc6:	e8 65 c9 fe ff       	call   4530 <free@plt>
   17bcb:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17bd2:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   17bda:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17be1:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   17be4:	83 c0 01             	add    eax,0x1
   17be7:	39 85 60 fb ff ff    	cmp    DWORD PTR [rbp-0x4a0],eax
   17bed:	75 12                	jne    17c01 <stbi__parse_png_file(stbi__png*, int, int)+0xb7d>
   17bef:	83 bd 60 fb ff ff 03 	cmp    DWORD PTR [rbp-0x4a0],0x3
   17bf6:	74 09                	je     17c01 <stbi__parse_png_file(stbi__png*, int, int)+0xb7d>
   17bf8:	80 bd 7e fb ff ff 00 	cmp    BYTE PTR [rbp-0x482],0x0
   17bff:	74 09                	je     17c0a <stbi__parse_png_file(stbi__png*, int, int)+0xb86>
   17c01:	80 bd 7f fb ff ff 00 	cmp    BYTE PTR [rbp-0x481],0x0
   17c08:	74 19                	je     17c23 <stbi__parse_png_file(stbi__png*, int, int)+0xb9f>
   17c0a:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17c11:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   17c14:	8d 50 01             	lea    edx,[rax+0x1]
   17c17:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17c1e:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
   17c21:	eb 14                	jmp    17c37 <stbi__parse_png_file(stbi__png*, int, int)+0xbb3>
   17c23:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17c2a:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
   17c2d:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17c34:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
   17c37:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17c3e:	44 8b 40 20          	mov    r8d,DWORD PTR [rax+0x20]
   17c42:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17c49:	8b 48 0c             	mov    ecx,DWORD PTR [rax+0xc]
   17c4c:	8b 95 80 fb ff ff    	mov    edx,DWORD PTR [rbp-0x480]
   17c52:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17c59:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
   17c5d:	44 8b 8d a0 fb ff ff 	mov    r9d,DWORD PTR [rbp-0x460]
   17c64:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17c6b:	48 83 ec 08          	sub    rsp,0x8
   17c6f:	8b bd 9c fb ff ff    	mov    edi,DWORD PTR [rbp-0x464]
   17c75:	57                   	push   rdi
   17c76:	48 89 c7             	mov    rdi,rax
   17c79:	e8 08 e9 ff ff       	call   16586 <stbi__create_png_image(stbi__png*, unsigned char*, unsigned int, int, int, int, int)>
   17c7e:	48 83 c4 10          	add    rsp,0x10
   17c82:	85 c0                	test   eax,eax
   17c84:	0f 94 c0             	sete   al
   17c87:	84 c0                	test   al,al
   17c89:	74 0a                	je     17c95 <stbi__parse_png_file(stbi__png*, int, int)+0xc11>
   17c8b:	b8 00 00 00 00       	mov    eax,0x0
   17c90:	e9 33 02 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17c95:	80 bd 7f fb ff ff 00 	cmp    BYTE PTR [rbp-0x481],0x0
   17c9c:	74 7b                	je     17d19 <stbi__parse_png_file(stbi__png*, int, int)+0xc95>
   17c9e:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17ca5:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   17ca8:	83 f8 10             	cmp    eax,0x10
   17cab:	75 36                	jne    17ce3 <stbi__parse_png_file(stbi__png*, int, int)+0xc5f>
   17cad:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17cb4:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   17cb7:	48 8d 8d d6 fb ff ff 	lea    rcx,[rbp-0x42a]
   17cbe:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17cc5:	48 89 ce             	mov    rsi,rcx
   17cc8:	48 89 c7             	mov    rdi,rax
   17ccb:	e8 97 ee ff ff       	call   16b67 <stbi__compute_transparency16(stbi__png*, unsigned short*, int)>
   17cd0:	85 c0                	test   eax,eax
   17cd2:	0f 94 c0             	sete   al
   17cd5:	84 c0                	test   al,al
   17cd7:	74 40                	je     17d19 <stbi__parse_png_file(stbi__png*, int, int)+0xc95>
   17cd9:	b8 00 00 00 00       	mov    eax,0x0
   17cde:	e9 e5 01 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17ce3:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17cea:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   17ced:	48 8d 8d dd fb ff ff 	lea    rcx,[rbp-0x423]
   17cf4:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17cfb:	48 89 ce             	mov    rsi,rcx
   17cfe:	48 89 c7             	mov    rdi,rax
   17d01:	e8 34 ed ff ff       	call   16a3a <stbi__compute_transparency(stbi__png*, unsigned char*, int)>
   17d06:	85 c0                	test   eax,eax
   17d08:	0f 94 c0             	sete   al
   17d0b:	84 c0                	test   al,al
   17d0d:	74 0a                	je     17d19 <stbi__parse_png_file(stbi__png*, int, int)+0xc95>
   17d0f:	b8 00 00 00 00       	mov    eax,0x0
   17d14:	e9 af 01 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17d19:	83 bd a4 fb ff ff 00 	cmp    DWORD PTR [rbp-0x45c],0x0
   17d20:	74 28                	je     17d4a <stbi__parse_png_file(stbi__png*, int, int)+0xcc6>
   17d22:	8b 05 54 2a 03 00    	mov    eax,DWORD PTR [rip+0x32a54]        # 4a77c <stbi__de_iphone_flag>
   17d28:	85 c0                	test   eax,eax
   17d2a:	74 1e                	je     17d4a <stbi__parse_png_file(stbi__png*, int, int)+0xcc6>
   17d2c:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17d33:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
   17d36:	83 f8 02             	cmp    eax,0x2
   17d39:	7e 0f                	jle    17d4a <stbi__parse_png_file(stbi__png*, int, int)+0xcc6>
   17d3b:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17d42:	48 89 c7             	mov    rdi,rax
   17d45:	e8 43 f1 ff ff       	call   16e8d <stbi__de_iphone(stbi__png*)>
   17d4a:	80 bd 7e fb ff ff 00 	cmp    BYTE PTR [rbp-0x482],0x0
   17d51:	74 74                	je     17dc7 <stbi__parse_png_file(stbi__png*, int, int)+0xd43>
   17d53:	0f b6 95 7e fb ff ff 	movzx  edx,BYTE PTR [rbp-0x482]
   17d5a:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17d61:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   17d64:	0f b6 95 7e fb ff ff 	movzx  edx,BYTE PTR [rbp-0x482]
   17d6b:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17d72:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
   17d75:	83 bd 60 fb ff ff 02 	cmp    DWORD PTR [rbp-0x4a0],0x2
   17d7c:	7e 10                	jle    17d8e <stbi__parse_png_file(stbi__png*, int, int)+0xd0a>
   17d7e:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17d85:	8b 95 60 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4a0]
   17d8b:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
   17d8e:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17d95:	8b 48 0c             	mov    ecx,DWORD PTR [rax+0xc]
   17d98:	8b 95 90 fb ff ff    	mov    edx,DWORD PTR [rbp-0x470]
   17d9e:	48 8d b5 e0 fb ff ff 	lea    rsi,[rbp-0x420]
   17da5:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17dac:	48 89 c7             	mov    rdi,rax
   17daf:	e8 e7 ee ff ff       	call   16c9b <stbi__expand_png_palette(stbi__png*, unsigned char*, int, int)>
   17db4:	85 c0                	test   eax,eax
   17db6:	0f 94 c0             	sete   al
   17db9:	84 c0                	test   al,al
   17dbb:	74 2a                	je     17de7 <stbi__parse_png_file(stbi__png*, int, int)+0xd63>
   17dbd:	b8 00 00 00 00       	mov    eax,0x0
   17dc2:	e9 01 01 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17dc7:	80 bd 7f fb ff ff 00 	cmp    BYTE PTR [rbp-0x481],0x0
   17dce:	74 17                	je     17de7 <stbi__parse_png_file(stbi__png*, int, int)+0xd63>
   17dd0:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17dd7:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   17dda:	8d 50 01             	lea    edx,[rax+0x1]
   17ddd:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17de4:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   17de7:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17dee:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   17df2:	48 89 c7             	mov    rdi,rax
   17df5:	e8 36 c7 fe ff       	call   4530 <free@plt>
   17dfa:	48 8b 85 68 fb ff ff 	mov    rax,QWORD PTR [rbp-0x498]
   17e01:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   17e09:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17e10:	48 89 c7             	mov    rdi,rax
   17e13:	e8 1a ea fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   17e18:	b8 01 00 00 00       	mov    eax,0x1
   17e1d:	e9 a6 00 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17e22:	83 bd 94 fb ff ff 00 	cmp    DWORD PTR [rbp-0x46c],0x0
   17e29:	74 14                	je     17e3f <stbi__parse_png_file(stbi__png*, int, int)+0xdbb>
   17e2b:	48 8d 05 67 30 02 00 	lea    rax,[rip+0x23067]        # 3ae99 <stbi__depth_scale_table+0x2a1>
   17e32:	48 89 c7             	mov    rdi,rax
   17e35:	e8 38 cd fe ff       	call   4b72 <stbi__err(char const*)>
   17e3a:	e9 89 00 00 00       	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17e3f:	8b 85 d0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x430]
   17e45:	25 00 00 00 20       	and    eax,0x20000000
   17e4a:	85 c0                	test   eax,eax
   17e4c:	75 4a                	jne    17e98 <stbi__parse_png_file(stbi__png*, int, int)+0xe14>
   17e4e:	8b 85 d0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x430]
   17e54:	c1 e8 18             	shr    eax,0x18
   17e57:	88 05 03 26 03 00    	mov    BYTE PTR [rip+0x32603],al        # 4a460 <stbi__parse_png_file(stbi__png*, int, int)::invalid_chunk>
   17e5d:	8b 85 d0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x430]
   17e63:	c1 e8 10             	shr    eax,0x10
   17e66:	88 05 f5 25 03 00    	mov    BYTE PTR [rip+0x325f5],al        # 4a461 <stbi__parse_png_file(stbi__png*, int, int)::invalid_chunk+0x1>
   17e6c:	8b 85 d0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x430]
   17e72:	c1 e8 08             	shr    eax,0x8
   17e75:	88 05 e7 25 03 00    	mov    BYTE PTR [rip+0x325e7],al        # 4a462 <stbi__parse_png_file(stbi__png*, int, int)::invalid_chunk+0x2>
   17e7b:	8b 85 d0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x430]
   17e81:	88 05 dc 25 03 00    	mov    BYTE PTR [rip+0x325dc],al        # 4a463 <stbi__parse_png_file(stbi__png*, int, int)::invalid_chunk+0x3>
   17e87:	48 8d 05 d2 25 03 00 	lea    rax,[rip+0x325d2]        # 4a460 <stbi__parse_png_file(stbi__png*, int, int)::invalid_chunk>
   17e8e:	48 89 c7             	mov    rdi,rax
   17e91:	e8 dc cc fe ff       	call   4b72 <stbi__err(char const*)>
   17e96:	eb 30                	jmp    17ec8 <stbi__parse_png_file(stbi__png*, int, int)+0xe44>
   17e98:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   17e9e:	89 c2                	mov    edx,eax
   17ea0:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17ea7:	89 d6                	mov    esi,edx
   17ea9:	48 89 c7             	mov    rdi,rax
   17eac:	e8 54 e7 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   17eb1:	eb 01                	jmp    17eb4 <stbi__parse_png_file(stbi__png*, int, int)+0xe30>
   17eb3:	90                   	nop
   17eb4:	48 8b 85 b8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x448]
   17ebb:	48 89 c7             	mov    rdi,rax
   17ebe:	e8 6f e9 fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   17ec3:	e9 c1 f2 ff ff       	jmp    17189 <stbi__parse_png_file(stbi__png*, int, int)+0x105>
   17ec8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   17ecc:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   17ed5:	74 05                	je     17edc <stbi__parse_png_file(stbi__png*, int, int)+0xe58>
   17ed7:	e8 04 c6 fe ff       	call   44e0 <__stack_chk_fail@plt>
   17edc:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   17ee0:	c9                   	leave  
   17ee1:	c3                   	ret    

0000000000017ee2 <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)>:
   17ee2:	55                   	push   rbp
   17ee3:	48 89 e5             	mov    rbp,rsp
   17ee6:	48 83 ec 40          	sub    rsp,0x40
   17eea:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   17eee:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   17ef2:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   17ef6:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   17efa:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
   17efe:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
   17f02:	48 c7 45 f8 00 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
   17f0a:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   17f0e:	78 06                	js     17f16 <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x34>
   17f10:	83 7d cc 04          	cmp    DWORD PTR [rbp-0x34],0x4
   17f14:	7e 19                	jle    17f2f <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x4d>
   17f16:	48 8d 05 62 27 02 00 	lea    rax,[rip+0x22762]        # 3a67f <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x8d>
   17f1d:	48 89 c7             	mov    rdi,rax
   17f20:	e8 4d cc fe ff       	call   4b72 <stbi__err(char const*)>
   17f25:	b8 00 00 00 00       	mov    eax,0x0
   17f2a:	e9 9d 01 00 00       	jmp    180cc <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x1ea>
   17f2f:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   17f32:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17f36:	be 00 00 00 00       	mov    esi,0x0
   17f3b:	48 89 c7             	mov    rdi,rax
   17f3e:	e8 41 f1 ff ff       	call   17084 <stbi__parse_png_file(stbi__png*, int, int)>
   17f43:	85 c0                	test   eax,eax
   17f45:	0f 95 c0             	setne  al
   17f48:	84 c0                	test   al,al
   17f4a:	0f 84 24 01 00 00    	je     18074 <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x192>
   17f50:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17f54:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   17f57:	83 f8 07             	cmp    eax,0x7
   17f5a:	7f 0c                	jg     17f68 <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x86>
   17f5c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   17f60:	c7 00 08 00 00 00    	mov    DWORD PTR [rax],0x8
   17f66:	eb 0d                	jmp    17f75 <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x93>
   17f68:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17f6c:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
   17f6f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   17f73:	89 10                	mov    DWORD PTR [rax],edx
   17f75:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17f79:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   17f7d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   17f81:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17f85:	48 c7 40 18 00 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
   17f8d:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   17f91:	0f 84 a3 00 00 00    	je     1803a <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x158>
   17f97:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17f9b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17f9e:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
   17fa1:	39 45 cc             	cmp    DWORD PTR [rbp-0x34],eax
   17fa4:	0f 84 90 00 00 00    	je     1803a <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x158>
   17faa:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   17fae:	8b 00                	mov    eax,DWORD PTR [rax]
   17fb0:	83 f8 08             	cmp    eax,0x8
   17fb3:	75 35                	jne    17fea <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x108>
   17fb5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17fb9:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17fbc:	8b 78 04             	mov    edi,DWORD PTR [rax+0x4]
   17fbf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17fc3:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17fc6:	8b 08                	mov    ecx,DWORD PTR [rax]
   17fc8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17fcc:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17fcf:	8b 70 0c             	mov    esi,DWORD PTR [rax+0xc]
   17fd2:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   17fd5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   17fd9:	41 89 f8             	mov    r8d,edi
   17fdc:	48 89 c7             	mov    rdi,rax
   17fdf:	e8 1d e9 fe ff       	call   6901 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   17fe4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   17fe8:	eb 33                	jmp    1801d <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x13b>
   17fea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17fee:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17ff1:	8b 78 04             	mov    edi,DWORD PTR [rax+0x4]
   17ff4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   17ff8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   17ffb:	8b 08                	mov    ecx,DWORD PTR [rax]
   17ffd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18001:	48 8b 00             	mov    rax,QWORD PTR [rax]
   18004:	8b 70 0c             	mov    esi,DWORD PTR [rax+0xc]
   18007:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   1800a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1800e:	41 89 f8             	mov    r8d,edi
   18011:	48 89 c7             	mov    rdi,rax
   18014:	e8 67 ee fe ff       	call   6e80 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)>
   18019:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1801d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18021:	48 8b 00             	mov    rax,QWORD PTR [rax]
   18024:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   18027:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
   1802a:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1802f:	75 09                	jne    1803a <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x158>
   18031:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18035:	e9 92 00 00 00       	jmp    180cc <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x1ea>
   1803a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1803e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   18041:	8b 00                	mov    eax,DWORD PTR [rax]
   18043:	89 c2                	mov    edx,eax
   18045:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18049:	89 10                	mov    DWORD PTR [rax],edx
   1804b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1804f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   18052:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   18055:	89 c2                	mov    edx,eax
   18057:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1805b:	89 10                	mov    DWORD PTR [rax],edx
   1805d:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   18062:	74 10                	je     18074 <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)+0x192>
   18064:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18068:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1806b:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
   1806e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   18072:	89 10                	mov    DWORD PTR [rax],edx
   18074:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18078:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   1807c:	48 89 c7             	mov    rdi,rax
   1807f:	e8 ac c4 fe ff       	call   4530 <free@plt>
   18084:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18088:	48 c7 40 18 00 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
   18090:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18094:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   18098:	48 89 c7             	mov    rdi,rax
   1809b:	e8 90 c4 fe ff       	call   4530 <free@plt>
   180a0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   180a4:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   180ac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   180b0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   180b4:	48 89 c7             	mov    rdi,rax
   180b7:	e8 74 c4 fe ff       	call   4530 <free@plt>
   180bc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   180c0:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   180c8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   180cc:	c9                   	leave  
   180cd:	c3                   	ret    

00000000000180ce <stbi__png_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   180ce:	55                   	push   rbp
   180cf:	48 89 e5             	mov    rbp,rsp
   180d2:	48 83 ec 60          	sub    rsp,0x60
   180d6:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   180da:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   180de:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   180e2:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
   180e6:	44 89 45 ac          	mov    DWORD PTR [rbp-0x54],r8d
   180ea:	4c 89 4d a0          	mov    QWORD PTR [rbp-0x60],r9
   180ee:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   180f7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   180fb:	31 c0                	xor    eax,eax
   180fd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   18101:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   18105:	4c 8b 45 a0          	mov    r8,QWORD PTR [rbp-0x60]
   18109:	8b 7d ac             	mov    edi,DWORD PTR [rbp-0x54]
   1810c:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
   18110:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   18114:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   18118:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   1811c:	4d 89 c1             	mov    r9,r8
   1811f:	41 89 f8             	mov    r8d,edi
   18122:	48 89 c7             	mov    rdi,rax
   18125:	e8 b8 fd ff ff       	call   17ee2 <stbi__do_png(stbi__png*, int*, int*, int*, int, stbi__result_info*)>
   1812a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1812e:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   18137:	74 05                	je     1813e <stbi__png_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x70>
   18139:	e8 a2 c3 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1813e:	c9                   	leave  
   1813f:	c3                   	ret    

0000000000018140 <stbi__png_test(stbi__context*)>:
   18140:	55                   	push   rbp
   18141:	48 89 e5             	mov    rbp,rsp
   18144:	48 83 ec 20          	sub    rsp,0x20
   18148:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1814c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18150:	48 89 c7             	mov    rdi,rax
   18153:	e8 97 cf ff ff       	call   150ef <stbi__check_png_header(stbi__context*)>
   18158:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1815b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1815f:	48 89 c7             	mov    rdi,rax
   18162:	e8 c5 c9 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   18167:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1816a:	c9                   	leave  
   1816b:	c3                   	ret    

000000000001816c <stbi__png_info_raw(stbi__png*, int*, int*, int*)>:
   1816c:	55                   	push   rbp
   1816d:	48 89 e5             	mov    rbp,rsp
   18170:	48 83 ec 20          	sub    rsp,0x20
   18174:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   18178:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   1817c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   18180:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   18184:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   18188:	ba 00 00 00 00       	mov    edx,0x0
   1818d:	be 02 00 00 00       	mov    esi,0x2
   18192:	48 89 c7             	mov    rdi,rax
   18195:	e8 ea ee ff ff       	call   17084 <stbi__parse_png_file(stbi__png*, int, int)>
   1819a:	85 c0                	test   eax,eax
   1819c:	0f 94 c0             	sete   al
   1819f:	84 c0                	test   al,al
   181a1:	74 16                	je     181b9 <stbi__png_info_raw(stbi__png*, int*, int*, int*)+0x4d>
   181a3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   181a7:	48 8b 00             	mov    rax,QWORD PTR [rax]
   181aa:	48 89 c7             	mov    rdi,rax
   181ad:	e8 7a c9 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   181b2:	b8 00 00 00 00       	mov    eax,0x0
   181b7:	eb 4d                	jmp    18206 <stbi__png_info_raw(stbi__png*, int*, int*, int*)+0x9a>
   181b9:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   181be:	74 11                	je     181d1 <stbi__png_info_raw(stbi__png*, int*, int*, int*)+0x65>
   181c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   181c4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   181c7:	8b 00                	mov    eax,DWORD PTR [rax]
   181c9:	89 c2                	mov    edx,eax
   181cb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   181cf:	89 10                	mov    DWORD PTR [rax],edx
   181d1:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
   181d6:	74 12                	je     181ea <stbi__png_info_raw(stbi__png*, int*, int*, int*)+0x7e>
   181d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   181dc:	48 8b 00             	mov    rax,QWORD PTR [rax]
   181df:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   181e2:	89 c2                	mov    edx,eax
   181e4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   181e8:	89 10                	mov    DWORD PTR [rax],edx
   181ea:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   181ef:	74 10                	je     18201 <stbi__png_info_raw(stbi__png*, int*, int*, int*)+0x95>
   181f1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   181f5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   181f8:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
   181fb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   181ff:	89 10                	mov    DWORD PTR [rax],edx
   18201:	b8 01 00 00 00       	mov    eax,0x1
   18206:	c9                   	leave  
   18207:	c3                   	ret    

0000000000018208 <stbi__png_info(stbi__context*, int*, int*, int*)>:
   18208:	55                   	push   rbp
   18209:	48 89 e5             	mov    rbp,rsp
   1820c:	48 83 ec 50          	sub    rsp,0x50
   18210:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   18214:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   18218:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   1821c:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
   18220:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   18229:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1822d:	31 c0                	xor    eax,eax
   1822f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   18233:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   18237:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
   1823b:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   1823f:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   18243:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   18247:	48 89 c7             	mov    rdi,rax
   1824a:	e8 1d ff ff ff       	call   1816c <stbi__png_info_raw(stbi__png*, int*, int*, int*)>
   1824f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   18253:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1825c:	74 05                	je     18263 <stbi__png_info(stbi__context*, int*, int*, int*)+0x5b>
   1825e:	e8 7d c2 fe ff       	call   44e0 <__stack_chk_fail@plt>
   18263:	c9                   	leave  
   18264:	c3                   	ret    

0000000000018265 <stbi__png_is16(stbi__context*)>:
   18265:	55                   	push   rbp
   18266:	48 89 e5             	mov    rbp,rsp
   18269:	48 83 ec 40          	sub    rsp,0x40
   1826d:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   18271:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1827a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1827e:	31 c0                	xor    eax,eax
   18280:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   18284:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   18288:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   1828c:	b9 00 00 00 00       	mov    ecx,0x0
   18291:	ba 00 00 00 00       	mov    edx,0x0
   18296:	be 00 00 00 00       	mov    esi,0x0
   1829b:	48 89 c7             	mov    rdi,rax
   1829e:	e8 c9 fe ff ff       	call   1816c <stbi__png_info_raw(stbi__png*, int*, int*, int*)>
   182a3:	85 c0                	test   eax,eax
   182a5:	0f 94 c0             	sete   al
   182a8:	84 c0                	test   al,al
   182aa:	74 07                	je     182b3 <stbi__png_is16(stbi__context*)+0x4e>
   182ac:	b8 00 00 00 00       	mov    eax,0x0
   182b1:	eb 20                	jmp    182d3 <stbi__png_is16(stbi__context*)+0x6e>
   182b3:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   182b6:	83 f8 10             	cmp    eax,0x10
   182b9:	74 13                	je     182ce <stbi__png_is16(stbi__context*)+0x69>
   182bb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   182bf:	48 89 c7             	mov    rdi,rax
   182c2:	e8 65 c8 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   182c7:	b8 00 00 00 00       	mov    eax,0x0
   182cc:	eb 05                	jmp    182d3 <stbi__png_is16(stbi__context*)+0x6e>
   182ce:	b8 01 00 00 00       	mov    eax,0x1
   182d3:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   182d7:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   182e0:	74 05                	je     182e7 <stbi__png_is16(stbi__context*)+0x82>
   182e2:	e8 f9 c1 fe ff       	call   44e0 <__stack_chk_fail@plt>
   182e7:	c9                   	leave  
   182e8:	c3                   	ret    

00000000000182e9 <stbi__bmp_test_raw(stbi__context*)>:
   182e9:	55                   	push   rbp
   182ea:	48 89 e5             	mov    rbp,rsp
   182ed:	48 83 ec 20          	sub    rsp,0x20
   182f1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   182f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   182f9:	48 89 c7             	mov    rdi,rax
   182fc:	e8 10 e2 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   18301:	3c 42                	cmp    al,0x42
   18303:	0f 95 c0             	setne  al
   18306:	84 c0                	test   al,al
   18308:	74 0a                	je     18314 <stbi__bmp_test_raw(stbi__context*)+0x2b>
   1830a:	b8 00 00 00 00       	mov    eax,0x0
   1830f:	e9 8e 00 00 00       	jmp    183a2 <stbi__bmp_test_raw(stbi__context*)+0xb9>
   18314:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18318:	48 89 c7             	mov    rdi,rax
   1831b:	e8 f1 e1 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   18320:	3c 4d                	cmp    al,0x4d
   18322:	0f 95 c0             	setne  al
   18325:	84 c0                	test   al,al
   18327:	74 07                	je     18330 <stbi__bmp_test_raw(stbi__context*)+0x47>
   18329:	b8 00 00 00 00       	mov    eax,0x0
   1832e:	eb 72                	jmp    183a2 <stbi__bmp_test_raw(stbi__context*)+0xb9>
   18330:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18334:	48 89 c7             	mov    rdi,rax
   18337:	e8 67 e5 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   1833c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18340:	48 89 c7             	mov    rdi,rax
   18343:	e8 22 e5 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   18348:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1834c:	48 89 c7             	mov    rdi,rax
   1834f:	e8 16 e5 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   18354:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18358:	48 89 c7             	mov    rdi,rax
   1835b:	e8 43 e5 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   18360:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18364:	48 89 c7             	mov    rdi,rax
   18367:	e8 37 e5 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   1836c:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   1836f:	83 7d f8 0c          	cmp    DWORD PTR [rbp-0x8],0xc
   18373:	74 18                	je     1838d <stbi__bmp_test_raw(stbi__context*)+0xa4>
   18375:	83 7d f8 28          	cmp    DWORD PTR [rbp-0x8],0x28
   18379:	74 12                	je     1838d <stbi__bmp_test_raw(stbi__context*)+0xa4>
   1837b:	83 7d f8 38          	cmp    DWORD PTR [rbp-0x8],0x38
   1837f:	74 0c                	je     1838d <stbi__bmp_test_raw(stbi__context*)+0xa4>
   18381:	83 7d f8 6c          	cmp    DWORD PTR [rbp-0x8],0x6c
   18385:	74 06                	je     1838d <stbi__bmp_test_raw(stbi__context*)+0xa4>
   18387:	83 7d f8 7c          	cmp    DWORD PTR [rbp-0x8],0x7c
   1838b:	75 07                	jne    18394 <stbi__bmp_test_raw(stbi__context*)+0xab>
   1838d:	b8 01 00 00 00       	mov    eax,0x1
   18392:	eb 05                	jmp    18399 <stbi__bmp_test_raw(stbi__context*)+0xb0>
   18394:	b8 00 00 00 00       	mov    eax,0x0
   18399:	0f b6 c0             	movzx  eax,al
   1839c:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1839f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   183a2:	c9                   	leave  
   183a3:	c3                   	ret    

00000000000183a4 <stbi__bmp_test(stbi__context*)>:
   183a4:	55                   	push   rbp
   183a5:	48 89 e5             	mov    rbp,rsp
   183a8:	48 83 ec 20          	sub    rsp,0x20
   183ac:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   183b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   183b4:	48 89 c7             	mov    rdi,rax
   183b7:	e8 2d ff ff ff       	call   182e9 <stbi__bmp_test_raw(stbi__context*)>
   183bc:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   183bf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   183c3:	48 89 c7             	mov    rdi,rax
   183c6:	e8 61 c7 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   183cb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   183ce:	c9                   	leave  
   183cf:	c3                   	ret    

00000000000183d0 <stbi__high_bit(unsigned int)>:
   183d0:	55                   	push   rbp
   183d1:	48 89 e5             	mov    rbp,rsp
   183d4:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   183d7:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   183de:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
   183e2:	75 07                	jne    183eb <stbi__high_bit(unsigned int)+0x1b>
   183e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
   183e9:	eb 4b                	jmp    18436 <stbi__high_bit(unsigned int)+0x66>
   183eb:	81 7d ec ff ff 00 00 	cmp    DWORD PTR [rbp-0x14],0xffff
   183f2:	76 08                	jbe    183fc <stbi__high_bit(unsigned int)+0x2c>
   183f4:	83 45 fc 10          	add    DWORD PTR [rbp-0x4],0x10
   183f8:	c1 6d ec 10          	shr    DWORD PTR [rbp-0x14],0x10
   183fc:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
   18403:	76 08                	jbe    1840d <stbi__high_bit(unsigned int)+0x3d>
   18405:	83 45 fc 08          	add    DWORD PTR [rbp-0x4],0x8
   18409:	c1 6d ec 08          	shr    DWORD PTR [rbp-0x14],0x8
   1840d:	83 7d ec 0f          	cmp    DWORD PTR [rbp-0x14],0xf
   18411:	76 08                	jbe    1841b <stbi__high_bit(unsigned int)+0x4b>
   18413:	83 45 fc 04          	add    DWORD PTR [rbp-0x4],0x4
   18417:	c1 6d ec 04          	shr    DWORD PTR [rbp-0x14],0x4
   1841b:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
   1841f:	76 08                	jbe    18429 <stbi__high_bit(unsigned int)+0x59>
   18421:	83 45 fc 02          	add    DWORD PTR [rbp-0x4],0x2
   18425:	c1 6d ec 02          	shr    DWORD PTR [rbp-0x14],0x2
   18429:	83 7d ec 01          	cmp    DWORD PTR [rbp-0x14],0x1
   1842d:	76 04                	jbe    18433 <stbi__high_bit(unsigned int)+0x63>
   1842f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   18433:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   18436:	5d                   	pop    rbp
   18437:	c3                   	ret    

0000000000018438 <stbi__bitcount(unsigned int)>:
   18438:	55                   	push   rbp
   18439:	48 89 e5             	mov    rbp,rsp
   1843c:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   1843f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   18442:	25 55 55 55 55       	and    eax,0x55555555
   18447:	89 c2                	mov    edx,eax
   18449:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1844c:	d1 e8                	shr    eax,1
   1844e:	25 55 55 55 55       	and    eax,0x55555555
   18453:	01 d0                	add    eax,edx
   18455:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   18458:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1845b:	25 33 33 33 33       	and    eax,0x33333333
   18460:	89 c2                	mov    edx,eax
   18462:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   18465:	c1 e8 02             	shr    eax,0x2
   18468:	25 33 33 33 33       	and    eax,0x33333333
   1846d:	01 d0                	add    eax,edx
   1846f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   18472:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   18475:	c1 e8 04             	shr    eax,0x4
   18478:	89 c2                	mov    edx,eax
   1847a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1847d:	01 d0                	add    eax,edx
   1847f:	25 0f 0f 0f 0f       	and    eax,0xf0f0f0f
   18484:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   18487:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1848a:	c1 e8 08             	shr    eax,0x8
   1848d:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   18490:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   18493:	c1 e8 10             	shr    eax,0x10
   18496:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   18499:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1849c:	0f b6 c0             	movzx  eax,al
   1849f:	5d                   	pop    rbp
   184a0:	c3                   	ret    

00000000000184a1 <stbi__shiftsigned(unsigned int, int, int)>:
   184a1:	55                   	push   rbp
   184a2:	48 89 e5             	mov    rbp,rsp
   184a5:	48 83 ec 10          	sub    rsp,0x10
   184a9:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   184ac:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   184af:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
   184b2:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   184b6:	79 0c                	jns    184c4 <stbi__shiftsigned(unsigned int, int, int)+0x23>
   184b8:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   184bb:	f7 d8                	neg    eax
   184bd:	89 c1                	mov    ecx,eax
   184bf:	d3 65 fc             	shl    DWORD PTR [rbp-0x4],cl
   184c2:	eb 08                	jmp    184cc <stbi__shiftsigned(unsigned int, int, int)+0x2b>
   184c4:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   184c7:	89 c1                	mov    ecx,eax
   184c9:	d3 6d fc             	shr    DWORD PTR [rbp-0x4],cl
   184cc:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
   184d3:	76 28                	jbe    184fd <stbi__shiftsigned(unsigned int, int, int)+0x5c>
   184d5:	48 8d 05 34 2a 02 00 	lea    rax,[rip+0x22a34]        # 3af10 <stbi__depth_scale_table+0x318>
   184dc:	48 89 c1             	mov    rcx,rax
   184df:	ba 4d 14 00 00       	mov    edx,0x144d
   184e4:	48 8d 05 ad 1b 02 00 	lea    rax,[rip+0x21bad]        # 3a098 <_IO_stdin_used+0x98>
   184eb:	48 89 c6             	mov    rsi,rax
   184ee:	48 8d 05 49 2a 02 00 	lea    rax,[rip+0x22a49]        # 3af3e <stbi__depth_scale_table+0x346>
   184f5:	48 89 c7             	mov    rdi,rax
   184f8:	e8 83 bd fe ff       	call   4280 <__assert_fail@plt>
   184fd:	b8 08 00 00 00       	mov    eax,0x8
   18502:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
   18505:	89 c1                	mov    ecx,eax
   18507:	d3 6d fc             	shr    DWORD PTR [rbp-0x4],cl
   1850a:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
   1850e:	78 06                	js     18516 <stbi__shiftsigned(unsigned int, int, int)+0x75>
   18510:	83 7d f4 08          	cmp    DWORD PTR [rbp-0xc],0x8
   18514:	7e 28                	jle    1853e <stbi__shiftsigned(unsigned int, int, int)+0x9d>
   18516:	48 8d 05 f3 29 02 00 	lea    rax,[rip+0x229f3]        # 3af10 <stbi__depth_scale_table+0x318>
   1851d:	48 89 c1             	mov    rcx,rax
   18520:	ba 4f 14 00 00       	mov    edx,0x144f
   18525:	48 8d 05 6c 1b 02 00 	lea    rax,[rip+0x21b6c]        # 3a098 <_IO_stdin_used+0x98>
   1852c:	48 89 c6             	mov    rsi,rax
   1852f:	48 8d 05 10 2a 02 00 	lea    rax,[rip+0x22a10]        # 3af46 <stbi__depth_scale_table+0x34e>
   18536:	48 89 c7             	mov    rdi,rax
   18539:	e8 42 bd fe ff       	call   4280 <__assert_fail@plt>
   1853e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   18541:	48 98                	cdqe   
   18543:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1854b:	48 8d 05 2e 1f 03 00 	lea    rax,[rip+0x31f2e]        # 4a480 <stbi__shiftsigned(unsigned int, int, int)::mul_table>
   18552:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   18555:	0f af 45 fc          	imul   eax,DWORD PTR [rbp-0x4]
   18559:	89 c6                	mov    esi,eax
   1855b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1855e:	48 98                	cdqe   
   18560:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   18568:	48 8d 05 51 1f 03 00 	lea    rax,[rip+0x31f51]        # 4a4c0 <stbi__shiftsigned(unsigned int, int, int)::shift_table>
   1856f:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   18572:	89 c1                	mov    ecx,eax
   18574:	d3 fe                	sar    esi,cl
   18576:	89 f0                	mov    eax,esi
   18578:	c9                   	leave  
   18579:	c3                   	ret    

000000000001857a <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)>:
   1857a:	55                   	push   rbp
   1857b:	48 89 e5             	mov    rbp,rsp
   1857e:	48 83 ec 20          	sub    rsp,0x20
   18582:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   18586:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1858a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1858e:	48 89 c7             	mov    rdi,rax
   18591:	e8 7b df fe ff       	call   6511 <stbi__get8(stbi__context*)>
   18596:	3c 42                	cmp    al,0x42
   18598:	75 10                	jne    185aa <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x30>
   1859a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1859e:	48 89 c7             	mov    rdi,rax
   185a1:	e8 6b df fe ff       	call   6511 <stbi__get8(stbi__context*)>
   185a6:	3c 4d                	cmp    al,0x4d
   185a8:	74 07                	je     185b1 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x37>
   185aa:	b8 01 00 00 00       	mov    eax,0x1
   185af:	eb 05                	jmp    185b6 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x3c>
   185b1:	b8 00 00 00 00       	mov    eax,0x0
   185b6:	84 c0                	test   al,al
   185b8:	74 19                	je     185d3 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x59>
   185ba:	48 8d 05 9c 29 02 00 	lea    rax,[rip+0x2299c]        # 3af5d <stbi__depth_scale_table+0x365>
   185c1:	48 89 c7             	mov    rdi,rax
   185c4:	e8 a9 c5 fe ff       	call   4b72 <stbi__err(char const*)>
   185c9:	b8 00 00 00 00       	mov    eax,0x0
   185ce:	e9 39 04 00 00       	jmp    18a0c <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x492>
   185d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   185d7:	48 89 c7             	mov    rdi,rax
   185da:	e8 c4 e2 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   185df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   185e3:	48 89 c7             	mov    rdi,rax
   185e6:	e8 7f e2 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   185eb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   185ef:	48 89 c7             	mov    rdi,rax
   185f2:	e8 73 e2 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   185f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   185fb:	48 89 c7             	mov    rdi,rax
   185fe:	e8 a0 e2 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   18603:	89 c2                	mov    edx,eax
   18605:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18609:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
   1860c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18610:	48 89 c7             	mov    rdi,rax
   18613:	e8 8b e2 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   18618:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   1861b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1861f:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   18622:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   18625:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18629:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
   18630:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18634:	8b 50 18             	mov    edx,DWORD PTR [rax+0x18]
   18637:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1863b:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   1863e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18642:	8b 50 14             	mov    edx,DWORD PTR [rax+0x14]
   18645:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18649:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   1864c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18650:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
   18653:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18657:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
   1865a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1865e:	c7 40 20 0e 00 00 00 	mov    DWORD PTR [rax+0x20],0xe
   18665:	83 7d f8 0c          	cmp    DWORD PTR [rbp-0x8],0xc
   18669:	74 31                	je     1869c <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x122>
   1866b:	83 7d f8 28          	cmp    DWORD PTR [rbp-0x8],0x28
   1866f:	74 2b                	je     1869c <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x122>
   18671:	83 7d f8 38          	cmp    DWORD PTR [rbp-0x8],0x38
   18675:	74 25                	je     1869c <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x122>
   18677:	83 7d f8 6c          	cmp    DWORD PTR [rbp-0x8],0x6c
   1867b:	74 1f                	je     1869c <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x122>
   1867d:	83 7d f8 7c          	cmp    DWORD PTR [rbp-0x8],0x7c
   18681:	74 19                	je     1869c <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x122>
   18683:	48 8d 05 db 28 02 00 	lea    rax,[rip+0x228db]        # 3af65 <stbi__depth_scale_table+0x36d>
   1868a:	48 89 c7             	mov    rdi,rax
   1868d:	e8 e0 c4 fe ff       	call   4b72 <stbi__err(char const*)>
   18692:	b8 00 00 00 00       	mov    eax,0x0
   18697:	e9 70 03 00 00       	jmp    18a0c <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x492>
   1869c:	83 7d f8 0c          	cmp    DWORD PTR [rbp-0x8],0xc
   186a0:	75 2b                	jne    186cd <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x153>
   186a2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   186a6:	48 89 c7             	mov    rdi,rax
   186a9:	e8 bc e1 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   186ae:	89 c2                	mov    edx,eax
   186b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   186b4:	89 10                	mov    DWORD PTR [rax],edx
   186b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   186ba:	48 89 c7             	mov    rdi,rax
   186bd:	e8 a8 e1 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   186c2:	89 c2                	mov    edx,eax
   186c4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   186c8:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
   186cb:	eb 25                	jmp    186f2 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x178>
   186cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   186d1:	48 89 c7             	mov    rdi,rax
   186d4:	e8 ca e1 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   186d9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   186dd:	89 02                	mov    DWORD PTR [rdx],eax
   186df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   186e3:	48 89 c7             	mov    rdi,rax
   186e6:	e8 b8 e1 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   186eb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   186ef:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
   186f2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   186f6:	48 89 c7             	mov    rdi,rax
   186f9:	e8 6c e1 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   186fe:	83 f8 01             	cmp    eax,0x1
   18701:	0f 95 c0             	setne  al
   18704:	84 c0                	test   al,al
   18706:	74 19                	je     18721 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x1a7>
   18708:	48 8d 05 62 28 02 00 	lea    rax,[rip+0x22862]        # 3af71 <stbi__depth_scale_table+0x379>
   1870f:	48 89 c7             	mov    rdi,rax
   18712:	e8 5b c4 fe ff       	call   4b72 <stbi__err(char const*)>
   18717:	b8 00 00 00 00       	mov    eax,0x0
   1871c:	e9 eb 02 00 00       	jmp    18a0c <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x492>
   18721:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18725:	48 89 c7             	mov    rdi,rax
   18728:	e8 3d e1 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1872d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   18731:	89 02                	mov    DWORD PTR [rdx],eax
   18733:	83 7d f8 0c          	cmp    DWORD PTR [rbp-0x8],0xc
   18737:	0f 84 ca 02 00 00    	je     18a07 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x48d>
   1873d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18741:	48 89 c7             	mov    rdi,rax
   18744:	e8 5a e1 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   18749:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1874c:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
   18750:	74 06                	je     18758 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x1de>
   18752:	83 7d fc 02          	cmp    DWORD PTR [rbp-0x4],0x2
   18756:	75 19                	jne    18771 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x1f7>
   18758:	48 8d 05 1a 28 02 00 	lea    rax,[rip+0x2281a]        # 3af79 <stbi__depth_scale_table+0x381>
   1875f:	48 89 c7             	mov    rdi,rax
   18762:	e8 0b c4 fe ff       	call   4b72 <stbi__err(char const*)>
   18767:	b8 00 00 00 00       	mov    eax,0x0
   1876c:	e9 9b 02 00 00       	jmp    18a0c <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x492>
   18771:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18775:	48 89 c7             	mov    rdi,rax
   18778:	e8 26 e1 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   1877d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18781:	48 89 c7             	mov    rdi,rax
   18784:	e8 1a e1 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   18789:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1878d:	48 89 c7             	mov    rdi,rax
   18790:	e8 0e e1 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   18795:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18799:	48 89 c7             	mov    rdi,rax
   1879c:	e8 02 e1 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   187a1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   187a5:	48 89 c7             	mov    rdi,rax
   187a8:	e8 f6 e0 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   187ad:	83 7d f8 28          	cmp    DWORD PTR [rbp-0x8],0x28
   187b1:	74 0a                	je     187bd <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x243>
   187b3:	83 7d f8 38          	cmp    DWORD PTR [rbp-0x8],0x38
   187b7:	0f 85 75 01 00 00    	jne    18932 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x3b8>
   187bd:	83 7d f8 38          	cmp    DWORD PTR [rbp-0x8],0x38
   187c1:	75 30                	jne    187f3 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x279>
   187c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   187c7:	48 89 c7             	mov    rdi,rax
   187ca:	e8 d4 e0 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   187cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   187d3:	48 89 c7             	mov    rdi,rax
   187d6:	e8 c8 e0 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   187db:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   187df:	48 89 c7             	mov    rdi,rax
   187e2:	e8 bc e0 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   187e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   187eb:	48 89 c7             	mov    rdi,rax
   187ee:	e8 b0 e0 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   187f3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   187f7:	8b 00                	mov    eax,DWORD PTR [rax]
   187f9:	83 f8 10             	cmp    eax,0x10
   187fc:	74 0f                	je     1880d <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x293>
   187fe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18802:	8b 00                	mov    eax,DWORD PTR [rax]
   18804:	83 f8 20             	cmp    eax,0x20
   18807:	0f 85 f9 01 00 00    	jne    18a06 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x48c>
   1880d:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   18811:	75 6d                	jne    18880 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x306>
   18813:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18817:	8b 00                	mov    eax,DWORD PTR [rax]
   18819:	83 f8 20             	cmp    eax,0x20
   1881c:	75 3c                	jne    1885a <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x2e0>
   1881e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18822:	c7 40 0c 00 00 ff 00 	mov    DWORD PTR [rax+0xc],0xff0000
   18829:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1882d:	c7 40 10 00 ff 00 00 	mov    DWORD PTR [rax+0x10],0xff00
   18834:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18838:	c7 40 14 ff 00 00 00 	mov    DWORD PTR [rax+0x14],0xff
   1883f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18843:	c7 40 18 00 00 00 ff 	mov    DWORD PTR [rax+0x18],0xff000000
   1884a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1884e:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [rax+0x1c],0x0
   18855:	e9 ac 01 00 00       	jmp    18a06 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x48c>
   1885a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1885e:	c7 40 0c 00 7c 00 00 	mov    DWORD PTR [rax+0xc],0x7c00
   18865:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18869:	c7 40 10 e0 03 00 00 	mov    DWORD PTR [rax+0x10],0x3e0
   18870:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   18874:	c7 40 14 1f 00 00 00 	mov    DWORD PTR [rax+0x14],0x1f
   1887b:	e9 86 01 00 00       	jmp    18a06 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x48c>
   18880:	83 7d fc 03          	cmp    DWORD PTR [rbp-0x4],0x3
   18884:	0f 85 8f 00 00 00    	jne    18919 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x39f>
   1888a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1888e:	48 89 c7             	mov    rdi,rax
   18891:	e8 0d e0 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   18896:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1889a:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
   1889d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   188a1:	48 89 c7             	mov    rdi,rax
   188a4:	e8 fa df fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   188a9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   188ad:	89 42 10             	mov    DWORD PTR [rdx+0x10],eax
   188b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   188b4:	48 89 c7             	mov    rdi,rax
   188b7:	e8 e7 df fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   188bc:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   188c0:	89 42 14             	mov    DWORD PTR [rdx+0x14],eax
   188c3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   188c7:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   188ca:	8d 50 0c             	lea    edx,[rax+0xc]
   188cd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   188d1:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   188d4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   188d8:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   188db:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   188df:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   188e2:	39 c2                	cmp    edx,eax
   188e4:	0f 85 1c 01 00 00    	jne    18a06 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x48c>
   188ea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   188ee:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
   188f1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   188f5:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
   188f8:	39 c2                	cmp    edx,eax
   188fa:	0f 85 06 01 00 00    	jne    18a06 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x48c>
   18900:	48 8d 05 6a 26 02 00 	lea    rax,[rip+0x2266a]        # 3af71 <stbi__depth_scale_table+0x379>
   18907:	48 89 c7             	mov    rdi,rax
   1890a:	e8 63 c2 fe ff       	call   4b72 <stbi__err(char const*)>
   1890f:	b8 00 00 00 00       	mov    eax,0x0
   18914:	e9 f3 00 00 00       	jmp    18a0c <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x492>
   18919:	48 8d 05 51 26 02 00 	lea    rax,[rip+0x22651]        # 3af71 <stbi__depth_scale_table+0x379>
   18920:	48 89 c7             	mov    rdi,rax
   18923:	e8 4a c2 fe ff       	call   4b72 <stbi__err(char const*)>
   18928:	b8 00 00 00 00       	mov    eax,0x0
   1892d:	e9 da 00 00 00       	jmp    18a0c <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x492>
   18932:	83 7d f8 6c          	cmp    DWORD PTR [rbp-0x8],0x6c
   18936:	74 1f                	je     18957 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x3dd>
   18938:	83 7d f8 7c          	cmp    DWORD PTR [rbp-0x8],0x7c
   1893c:	74 19                	je     18957 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x3dd>
   1893e:	48 8d 05 2c 26 02 00 	lea    rax,[rip+0x2262c]        # 3af71 <stbi__depth_scale_table+0x379>
   18945:	48 89 c7             	mov    rdi,rax
   18948:	e8 25 c2 fe ff       	call   4b72 <stbi__err(char const*)>
   1894d:	b8 00 00 00 00       	mov    eax,0x0
   18952:	e9 b5 00 00 00       	jmp    18a0c <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x492>
   18957:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1895b:	48 89 c7             	mov    rdi,rax
   1895e:	e8 40 df fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   18963:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   18967:	89 42 0c             	mov    DWORD PTR [rdx+0xc],eax
   1896a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1896e:	48 89 c7             	mov    rdi,rax
   18971:	e8 2d df fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   18976:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1897a:	89 42 10             	mov    DWORD PTR [rdx+0x10],eax
   1897d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18981:	48 89 c7             	mov    rdi,rax
   18984:	e8 1a df fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   18989:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1898d:	89 42 14             	mov    DWORD PTR [rdx+0x14],eax
   18990:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   18994:	48 89 c7             	mov    rdi,rax
   18997:	e8 07 df fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   1899c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   189a0:	89 42 18             	mov    DWORD PTR [rdx+0x18],eax
   189a3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   189a7:	48 89 c7             	mov    rdi,rax
   189aa:	e8 f4 de fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   189af:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   189b6:	eb 10                	jmp    189c8 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x44e>
   189b8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   189bc:	48 89 c7             	mov    rdi,rax
   189bf:	e8 df de fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   189c4:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   189c8:	83 7d f4 0b          	cmp    DWORD PTR [rbp-0xc],0xb
   189cc:	7e ea                	jle    189b8 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x43e>
   189ce:	83 7d f8 7c          	cmp    DWORD PTR [rbp-0x8],0x7c
   189d2:	75 33                	jne    18a07 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x48d>
   189d4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   189d8:	48 89 c7             	mov    rdi,rax
   189db:	e8 c3 de fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   189e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   189e4:	48 89 c7             	mov    rdi,rax
   189e7:	e8 b7 de fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   189ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   189f0:	48 89 c7             	mov    rdi,rax
   189f3:	e8 ab de fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   189f8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   189fc:	48 89 c7             	mov    rdi,rax
   189ff:	e8 9f de fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   18a04:	eb 01                	jmp    18a07 <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)+0x48d>
   18a06:	90                   	nop
   18a07:	b8 01 00 00 00       	mov    eax,0x1
   18a0c:	c9                   	leave  
   18a0d:	c3                   	ret    

0000000000018a0e <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   18a0e:	55                   	push   rbp
   18a0f:	48 89 e5             	mov    rbp,rsp
   18a12:	53                   	push   rbx
   18a13:	48 81 ec 18 05 00 00 	sub    rsp,0x518
   18a1a:	48 89 bd 08 fb ff ff 	mov    QWORD PTR [rbp-0x4f8],rdi
   18a21:	48 89 b5 00 fb ff ff 	mov    QWORD PTR [rbp-0x500],rsi
   18a28:	48 89 95 f8 fa ff ff 	mov    QWORD PTR [rbp-0x508],rdx
   18a2f:	48 89 8d f0 fa ff ff 	mov    QWORD PTR [rbp-0x510],rcx
   18a36:	44 89 85 ec fa ff ff 	mov    DWORD PTR [rbp-0x514],r8d
   18a3d:	4c 89 8d e0 fa ff ff 	mov    QWORD PTR [rbp-0x520],r9
   18a44:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   18a4d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   18a51:	31 c0                	xor    eax,eax
   18a53:	c7 85 70 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x490],0x0
   18a5d:	c7 85 74 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x48c],0x0
   18a67:	c7 85 78 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x488],0x0
   18a71:	c7 85 7c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x484],0x0
   18a7b:	c7 85 20 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4e0],0x0
   18a85:	c7 85 cc fb ff ff ff 00 00 00 	mov    DWORD PTR [rbp-0x434],0xff
   18a8f:	48 8d 95 b0 fb ff ff 	lea    rdx,[rbp-0x450]
   18a96:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18a9d:	48 89 d6             	mov    rsi,rdx
   18aa0:	48 89 c7             	mov    rdi,rax
   18aa3:	e8 d2 fa ff ff       	call   1857a <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)>
   18aa8:	48 85 c0             	test   rax,rax
   18aab:	0f 94 c0             	sete   al
   18aae:	84 c0                	test   al,al
   18ab0:	74 0a                	je     18abc <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xae>
   18ab2:	b8 00 00 00 00       	mov    eax,0x0
   18ab7:	e9 b9 0f 00 00       	jmp    19a75 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1067>
   18abc:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18ac3:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   18ac6:	85 c0                	test   eax,eax
   18ac8:	0f 9f c0             	setg   al
   18acb:	0f b6 c0             	movzx  eax,al
   18ace:	89 85 80 fb ff ff    	mov    DWORD PTR [rbp-0x480],eax
   18ad4:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18adb:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   18ade:	89 c2                	mov    edx,eax
   18ae0:	f7 da                	neg    edx
   18ae2:	0f 49 c2             	cmovns eax,edx
   18ae5:	89 c2                	mov    edx,eax
   18ae7:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18aee:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
   18af1:	8b 85 bc fb ff ff    	mov    eax,DWORD PTR [rbp-0x444]
   18af7:	89 85 70 fb ff ff    	mov    DWORD PTR [rbp-0x490],eax
   18afd:	8b 85 c0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x440]
   18b03:	89 85 74 fb ff ff    	mov    DWORD PTR [rbp-0x48c],eax
   18b09:	8b 85 c4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x43c]
   18b0f:	89 85 78 fb ff ff    	mov    DWORD PTR [rbp-0x488],eax
   18b15:	8b 85 c8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x438]
   18b1b:	89 85 7c fb ff ff    	mov    DWORD PTR [rbp-0x484],eax
   18b21:	8b 85 cc fb ff ff    	mov    eax,DWORD PTR [rbp-0x434]
   18b27:	89 85 1c fb ff ff    	mov    DWORD PTR [rbp-0x4e4],eax
   18b2d:	8b 85 b8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x448]
   18b33:	83 f8 0c             	cmp    eax,0xc
   18b36:	75 3b                	jne    18b73 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x165>
   18b38:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18b3e:	83 f8 17             	cmp    eax,0x17
   18b41:	7f 5a                	jg     18b9d <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x18f>
   18b43:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   18b49:	8b 95 d0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x430]
   18b4f:	29 d0                	sub    eax,edx
   18b51:	83 e8 18             	sub    eax,0x18
   18b54:	48 63 d0             	movsxd rdx,eax
   18b57:	48 69 d2 56 55 55 55 	imul   rdx,rdx,0x55555556
   18b5e:	48 c1 ea 20          	shr    rdx,0x20
   18b62:	c1 f8 1f             	sar    eax,0x1f
   18b65:	89 c1                	mov    ecx,eax
   18b67:	89 d0                	mov    eax,edx
   18b69:	29 c8                	sub    eax,ecx
   18b6b:	89 85 20 fb ff ff    	mov    DWORD PTR [rbp-0x4e0],eax
   18b71:	eb 2a                	jmp    18b9d <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x18f>
   18b73:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18b79:	83 f8 0f             	cmp    eax,0xf
   18b7c:	7f 1f                	jg     18b9d <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x18f>
   18b7e:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   18b84:	8b 95 d0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x430]
   18b8a:	29 d0                	sub    eax,edx
   18b8c:	8b 95 b8 fb ff ff    	mov    edx,DWORD PTR [rbp-0x448]
   18b92:	29 d0                	sub    eax,edx
   18b94:	c1 f8 02             	sar    eax,0x2
   18b97:	89 85 20 fb ff ff    	mov    DWORD PTR [rbp-0x4e0],eax
   18b9d:	83 bd 20 fb ff ff 00 	cmp    DWORD PTR [rbp-0x4e0],0x0
   18ba4:	75 52                	jne    18bf8 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1ea>
   18ba6:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   18bac:	48 63 d0             	movsxd rdx,eax
   18baf:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18bb6:	48 8b 80 b8 00 00 00 	mov    rax,QWORD PTR [rax+0xb8]
   18bbd:	48 8b 8d 08 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x4f8]
   18bc4:	48 83 c1 38          	add    rcx,0x38
   18bc8:	48 29 c8             	sub    rax,rcx
   18bcb:	48 39 c2             	cmp    rdx,rax
   18bce:	74 28                	je     18bf8 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1ea>
   18bd0:	48 8d 05 b1 23 02 00 	lea    rax,[rip+0x223b1]        # 3af88 <stbi__depth_scale_table+0x390>
   18bd7:	48 89 c1             	mov    rcx,rax
   18bda:	ba cf 14 00 00       	mov    edx,0x14cf
   18bdf:	48 8d 05 b2 14 02 00 	lea    rax,[rip+0x214b2]        # 3a098 <_IO_stdin_used+0x98>
   18be6:	48 89 c6             	mov    rsi,rax
   18be9:	48 8d 05 e8 23 02 00 	lea    rax,[rip+0x223e8]        # 3afd8 <stbi__depth_scale_table+0x3e0>
   18bf0:	48 89 c7             	mov    rdi,rax
   18bf3:	e8 88 b6 fe ff       	call   4280 <__assert_fail@plt>
   18bf8:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18bfe:	83 f8 18             	cmp    eax,0x18
   18c01:	75 1c                	jne    18c1f <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x211>
   18c03:	81 bd 7c fb ff ff 00 00 00 ff 	cmp    DWORD PTR [rbp-0x484],0xff000000
   18c0d:	75 10                	jne    18c1f <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x211>
   18c0f:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18c16:	c7 40 08 03 00 00 00 	mov    DWORD PTR [rax+0x8],0x3
   18c1d:	eb 1f                	jmp    18c3e <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x230>
   18c1f:	83 bd 7c fb ff ff 00 	cmp    DWORD PTR [rbp-0x484],0x0
   18c26:	74 07                	je     18c2f <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x221>
   18c28:	ba 04 00 00 00       	mov    edx,0x4
   18c2d:	eb 05                	jmp    18c34 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x226>
   18c2f:	ba 03 00 00 00       	mov    edx,0x3
   18c34:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18c3b:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   18c3e:	83 bd ec fa ff ff 00 	cmp    DWORD PTR [rbp-0x514],0x0
   18c45:	74 17                	je     18c5e <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x250>
   18c47:	83 bd ec fa ff ff 02 	cmp    DWORD PTR [rbp-0x514],0x2
   18c4e:	7e 0e                	jle    18c5e <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x250>
   18c50:	8b 85 ec fa ff ff    	mov    eax,DWORD PTR [rbp-0x514]
   18c56:	89 85 30 fb ff ff    	mov    DWORD PTR [rbp-0x4d0],eax
   18c5c:	eb 10                	jmp    18c6e <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x260>
   18c5e:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18c65:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   18c68:	89 85 30 fb ff ff    	mov    DWORD PTR [rbp-0x4d0],eax
   18c6e:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18c75:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   18c78:	89 c2                	mov    edx,eax
   18c7a:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18c81:	8b 00                	mov    eax,DWORD PTR [rax]
   18c83:	89 c6                	mov    esi,eax
   18c85:	8b 85 30 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4d0]
   18c8b:	b9 00 00 00 00       	mov    ecx,0x0
   18c90:	89 c7                	mov    edi,eax
   18c92:	e8 c5 bf fe ff       	call   4c5c <stbi__mad3sizes_valid(int, int, int, int)>
   18c97:	85 c0                	test   eax,eax
   18c99:	0f 94 c0             	sete   al
   18c9c:	84 c0                	test   al,al
   18c9e:	74 19                	je     18cb9 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x2ab>
   18ca0:	48 8d 05 a5 19 02 00 	lea    rax,[rip+0x219a5]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   18ca7:	48 89 c7             	mov    rdi,rax
   18caa:	e8 c3 be fe ff       	call   4b72 <stbi__err(char const*)>
   18caf:	b8 00 00 00 00       	mov    eax,0x0
   18cb4:	e9 bc 0d 00 00       	jmp    19a75 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1067>
   18cb9:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18cc0:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   18cc3:	89 c2                	mov    edx,eax
   18cc5:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18ccc:	8b 00                	mov    eax,DWORD PTR [rax]
   18cce:	89 c6                	mov    esi,eax
   18cd0:	8b 85 30 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4d0]
   18cd6:	b9 00 00 00 00       	mov    ecx,0x0
   18cdb:	89 c7                	mov    edi,eax
   18cdd:	e8 bf c0 fe ff       	call   4da1 <stbi__malloc_mad3(int, int, int, int)>
   18ce2:	48 89 85 98 fb ff ff 	mov    QWORD PTR [rbp-0x468],rax
   18ce9:	48 83 bd 98 fb ff ff 00 	cmp    QWORD PTR [rbp-0x468],0x0
   18cf1:	75 19                	jne    18d0c <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x2fe>
   18cf3:	48 8d 05 39 13 02 00 	lea    rax,[rip+0x21339]        # 3a033 <_IO_stdin_used+0x33>
   18cfa:	48 89 c7             	mov    rdi,rax
   18cfd:	e8 70 be fe ff       	call   4b72 <stbi__err(char const*)>
   18d02:	b8 00 00 00 00       	mov    eax,0x0
   18d07:	e9 69 0d 00 00       	jmp    19a75 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1067>
   18d0c:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18d12:	83 f8 0f             	cmp    eax,0xf
   18d15:	0f 8f ed 05 00 00    	jg     19308 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x8fa>
   18d1b:	c7 85 34 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4cc],0x0
   18d25:	83 bd 20 fb ff ff 00 	cmp    DWORD PTR [rbp-0x4e0],0x0
   18d2c:	74 0c                	je     18d3a <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x32c>
   18d2e:	81 bd 20 fb ff ff 00 01 00 00 	cmp    DWORD PTR [rbp-0x4e0],0x100
   18d38:	7e 28                	jle    18d62 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x354>
   18d3a:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   18d41:	48 89 c7             	mov    rdi,rax
   18d44:	e8 e7 b7 fe ff       	call   4530 <free@plt>
   18d49:	48 8d 05 b9 22 02 00 	lea    rax,[rip+0x222b9]        # 3b009 <stbi__depth_scale_table+0x411>
   18d50:	48 89 c7             	mov    rdi,rax
   18d53:	e8 1a be fe ff       	call   4b72 <stbi__err(char const*)>
   18d58:	b8 00 00 00 00       	mov    eax,0x0
   18d5d:	e9 13 0d 00 00       	jmp    19a75 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1067>
   18d62:	c7 85 24 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4dc],0x0
   18d6c:	e9 8e 00 00 00       	jmp    18dff <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x3f1>
   18d71:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18d78:	48 89 c7             	mov    rdi,rax
   18d7b:	e8 91 d7 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   18d80:	8b 95 24 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4dc]
   18d86:	48 63 d2             	movsxd rdx,edx
   18d89:	88 84 95 e2 fb ff ff 	mov    BYTE PTR [rbp+rdx*4-0x41e],al
   18d90:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18d97:	48 89 c7             	mov    rdi,rax
   18d9a:	e8 72 d7 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   18d9f:	8b 95 24 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4dc]
   18da5:	48 63 d2             	movsxd rdx,edx
   18da8:	88 84 95 e1 fb ff ff 	mov    BYTE PTR [rbp+rdx*4-0x41f],al
   18daf:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18db6:	48 89 c7             	mov    rdi,rax
   18db9:	e8 53 d7 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   18dbe:	8b 95 24 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4dc]
   18dc4:	48 63 d2             	movsxd rdx,edx
   18dc7:	88 84 95 e0 fb ff ff 	mov    BYTE PTR [rbp+rdx*4-0x420],al
   18dce:	8b 85 b8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x448]
   18dd4:	83 f8 0c             	cmp    eax,0xc
   18dd7:	74 0f                	je     18de8 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x3da>
   18dd9:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18de0:	48 89 c7             	mov    rdi,rax
   18de3:	e8 29 d7 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   18de8:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   18dee:	48 98                	cdqe   
   18df0:	c6 84 85 e3 fb ff ff ff 	mov    BYTE PTR [rbp+rax*4-0x41d],0xff
   18df8:	83 85 24 fb ff ff 01 	add    DWORD PTR [rbp-0x4dc],0x1
   18dff:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   18e05:	3b 85 20 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x4e0]
   18e0b:	0f 8c 60 ff ff ff    	jl     18d71 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x363>
   18e11:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   18e17:	8b 95 d0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x430]
   18e1d:	29 d0                	sub    eax,edx
   18e1f:	8b 8d b8 fb ff ff    	mov    ecx,DWORD PTR [rbp-0x448]
   18e25:	29 c8                	sub    eax,ecx
   18e27:	89 c2                	mov    edx,eax
   18e29:	8b 85 b8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x448]
   18e2f:	83 f8 0c             	cmp    eax,0xc
   18e32:	75 07                	jne    18e3b <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x42d>
   18e34:	b8 03 00 00 00       	mov    eax,0x3
   18e39:	eb 05                	jmp    18e40 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x432>
   18e3b:	b8 04 00 00 00       	mov    eax,0x4
   18e40:	0f af 85 20 fb ff ff 	imul   eax,DWORD PTR [rbp-0x4e0]
   18e47:	29 c2                	sub    edx,eax
   18e49:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18e50:	89 d6                	mov    esi,edx
   18e52:	48 89 c7             	mov    rdi,rax
   18e55:	e8 ab d7 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   18e5a:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18e60:	83 f8 01             	cmp    eax,0x1
   18e63:	75 17                	jne    18e7c <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x46e>
   18e65:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18e6c:	8b 00                	mov    eax,DWORD PTR [rax]
   18e6e:	83 c0 07             	add    eax,0x7
   18e71:	c1 e8 03             	shr    eax,0x3
   18e74:	89 85 2c fb ff ff    	mov    DWORD PTR [rbp-0x4d4],eax
   18e7a:	eb 65                	jmp    18ee1 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x4d3>
   18e7c:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18e82:	83 f8 04             	cmp    eax,0x4
   18e85:	75 16                	jne    18e9d <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x48f>
   18e87:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18e8e:	8b 00                	mov    eax,DWORD PTR [rax]
   18e90:	83 c0 01             	add    eax,0x1
   18e93:	d1 e8                	shr    eax,1
   18e95:	89 85 2c fb ff ff    	mov    DWORD PTR [rbp-0x4d4],eax
   18e9b:	eb 44                	jmp    18ee1 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x4d3>
   18e9d:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18ea3:	83 f8 08             	cmp    eax,0x8
   18ea6:	75 11                	jne    18eb9 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x4ab>
   18ea8:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18eaf:	8b 00                	mov    eax,DWORD PTR [rax]
   18eb1:	89 85 2c fb ff ff    	mov    DWORD PTR [rbp-0x4d4],eax
   18eb7:	eb 28                	jmp    18ee1 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x4d3>
   18eb9:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   18ec0:	48 89 c7             	mov    rdi,rax
   18ec3:	e8 68 b6 fe ff       	call   4530 <free@plt>
   18ec8:	48 8d 05 42 21 02 00 	lea    rax,[rip+0x22142]        # 3b011 <stbi__depth_scale_table+0x419>
   18ecf:	48 89 c7             	mov    rdi,rax
   18ed2:	e8 9b bc fe ff       	call   4b72 <stbi__err(char const*)>
   18ed7:	b8 00 00 00 00       	mov    eax,0x0
   18edc:	e9 94 0b 00 00       	jmp    19a75 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1067>
   18ee1:	8b 85 2c fb ff ff    	mov    eax,DWORD PTR [rbp-0x4d4]
   18ee7:	f7 d8                	neg    eax
   18ee9:	83 e0 03             	and    eax,0x3
   18eec:	89 85 84 fb ff ff    	mov    DWORD PTR [rbp-0x47c],eax
   18ef2:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   18ef8:	83 f8 01             	cmp    eax,0x1
   18efb:	0f 85 ad 01 00 00    	jne    190ae <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x6a0>
   18f01:	c7 85 28 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4d8],0x0
   18f0b:	e9 83 01 00 00       	jmp    19093 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x685>
   18f10:	c7 85 38 fb ff ff 07 00 00 00 	mov    DWORD PTR [rbp-0x4c8],0x7
   18f1a:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   18f21:	48 89 c7             	mov    rdi,rax
   18f24:	e8 e8 d5 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   18f29:	0f b6 c0             	movzx  eax,al
   18f2c:	89 85 3c fb ff ff    	mov    DWORD PTR [rbp-0x4c4],eax
   18f32:	c7 85 24 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4dc],0x0
   18f3c:	e9 1c 01 00 00       	jmp    1905d <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x64f>
   18f41:	8b 85 38 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c8]
   18f47:	8b 95 3c fb ff ff    	mov    edx,DWORD PTR [rbp-0x4c4]
   18f4d:	89 c1                	mov    ecx,eax
   18f4f:	d3 fa                	sar    edx,cl
   18f51:	89 d0                	mov    eax,edx
   18f53:	83 e0 01             	and    eax,0x1
   18f56:	89 85 94 fb ff ff    	mov    DWORD PTR [rbp-0x46c],eax
   18f5c:	8b 85 94 fb ff ff    	mov    eax,DWORD PTR [rbp-0x46c]
   18f62:	48 98                	cdqe   
   18f64:	0f b6 94 85 e0 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x420]
   18f6c:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   18f73:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   18f79:	8d 48 01             	lea    ecx,[rax+0x1]
   18f7c:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   18f82:	48 98                	cdqe   
   18f84:	48 01 f0             	add    rax,rsi
   18f87:	88 10                	mov    BYTE PTR [rax],dl
   18f89:	8b 85 94 fb ff ff    	mov    eax,DWORD PTR [rbp-0x46c]
   18f8f:	48 98                	cdqe   
   18f91:	0f b6 94 85 e1 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x41f]
   18f99:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   18fa0:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   18fa6:	8d 48 01             	lea    ecx,[rax+0x1]
   18fa9:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   18faf:	48 98                	cdqe   
   18fb1:	48 01 f0             	add    rax,rsi
   18fb4:	88 10                	mov    BYTE PTR [rax],dl
   18fb6:	8b 85 94 fb ff ff    	mov    eax,DWORD PTR [rbp-0x46c]
   18fbc:	48 98                	cdqe   
   18fbe:	0f b6 94 85 e2 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x41e]
   18fc6:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   18fcd:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   18fd3:	8d 48 01             	lea    ecx,[rax+0x1]
   18fd6:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   18fdc:	48 98                	cdqe   
   18fde:	48 01 f0             	add    rax,rsi
   18fe1:	88 10                	mov    BYTE PTR [rax],dl
   18fe3:	83 bd 30 fb ff ff 04 	cmp    DWORD PTR [rbp-0x4d0],0x4
   18fea:	75 1e                	jne    1900a <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5fc>
   18fec:	48 8b 8d 98 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x468]
   18ff3:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   18ff9:	8d 50 01             	lea    edx,[rax+0x1]
   18ffc:	89 95 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],edx
   19002:	48 98                	cdqe   
   19004:	48 01 c8             	add    rax,rcx
   19007:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   1900a:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   19010:	8d 50 01             	lea    edx,[rax+0x1]
   19013:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   1901a:	8b 00                	mov    eax,DWORD PTR [rax]
   1901c:	39 c2                	cmp    edx,eax
   1901e:	74 54                	je     19074 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x666>
   19020:	83 ad 38 fb ff ff 01 	sub    DWORD PTR [rbp-0x4c8],0x1
   19027:	8b 85 38 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c8]
   1902d:	c1 e8 1f             	shr    eax,0x1f
   19030:	84 c0                	test   al,al
   19032:	74 22                	je     19056 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x648>
   19034:	c7 85 38 fb ff ff 07 00 00 00 	mov    DWORD PTR [rbp-0x4c8],0x7
   1903e:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19045:	48 89 c7             	mov    rdi,rax
   19048:	e8 c4 d4 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1904d:	0f b6 c0             	movzx  eax,al
   19050:	89 85 3c fb ff ff    	mov    DWORD PTR [rbp-0x4c4],eax
   19056:	83 85 24 fb ff ff 01 	add    DWORD PTR [rbp-0x4dc],0x1
   1905d:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19064:	8b 00                	mov    eax,DWORD PTR [rax]
   19066:	39 85 24 fb ff ff    	cmp    DWORD PTR [rbp-0x4dc],eax
   1906c:	0f 8c cf fe ff ff    	jl     18f41 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x533>
   19072:	eb 01                	jmp    19075 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x667>
   19074:	90                   	nop
   19075:	8b 95 84 fb ff ff    	mov    edx,DWORD PTR [rbp-0x47c]
   1907b:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19082:	89 d6                	mov    esi,edx
   19084:	48 89 c7             	mov    rdi,rax
   19087:	e8 79 d5 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1908c:	83 85 28 fb ff ff 01 	add    DWORD PTR [rbp-0x4d8],0x1
   19093:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   1909a:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1909d:	39 85 28 fb ff ff    	cmp    DWORD PTR [rbp-0x4d8],eax
   190a3:	0f 8c 67 fe ff ff    	jl     18f10 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x502>
   190a9:	e9 84 07 00 00       	jmp    19832 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xe24>
   190ae:	c7 85 28 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4d8],0x0
   190b8:	e9 30 02 00 00       	jmp    192ed <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x8df>
   190bd:	c7 85 24 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4dc],0x0
   190c7:	e9 eb 01 00 00       	jmp    192b7 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x8a9>
   190cc:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   190d3:	48 89 c7             	mov    rdi,rax
   190d6:	e8 36 d4 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   190db:	0f b6 c0             	movzx  eax,al
   190de:	89 85 40 fb ff ff    	mov    DWORD PTR [rbp-0x4c0],eax
   190e4:	c7 85 44 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4bc],0x0
   190ee:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   190f4:	83 f8 04             	cmp    eax,0x4
   190f7:	75 16                	jne    1910f <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x701>
   190f9:	8b 85 40 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c0]
   190ff:	83 e0 0f             	and    eax,0xf
   19102:	89 85 44 fb ff ff    	mov    DWORD PTR [rbp-0x4bc],eax
   19108:	c1 bd 40 fb ff ff 04 	sar    DWORD PTR [rbp-0x4c0],0x4
   1910f:	8b 85 40 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c0]
   19115:	48 98                	cdqe   
   19117:	0f b6 94 85 e0 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x420]
   1911f:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   19126:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   1912c:	8d 48 01             	lea    ecx,[rax+0x1]
   1912f:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   19135:	48 98                	cdqe   
   19137:	48 01 f0             	add    rax,rsi
   1913a:	88 10                	mov    BYTE PTR [rax],dl
   1913c:	8b 85 40 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c0]
   19142:	48 98                	cdqe   
   19144:	0f b6 94 85 e1 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x41f]
   1914c:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   19153:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   19159:	8d 48 01             	lea    ecx,[rax+0x1]
   1915c:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   19162:	48 98                	cdqe   
   19164:	48 01 f0             	add    rax,rsi
   19167:	88 10                	mov    BYTE PTR [rax],dl
   19169:	8b 85 40 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c0]
   1916f:	48 98                	cdqe   
   19171:	0f b6 94 85 e2 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x41e]
   19179:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   19180:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   19186:	8d 48 01             	lea    ecx,[rax+0x1]
   19189:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   1918f:	48 98                	cdqe   
   19191:	48 01 f0             	add    rax,rsi
   19194:	88 10                	mov    BYTE PTR [rax],dl
   19196:	83 bd 30 fb ff ff 04 	cmp    DWORD PTR [rbp-0x4d0],0x4
   1919d:	75 1e                	jne    191bd <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x7af>
   1919f:	48 8b 8d 98 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x468]
   191a6:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   191ac:	8d 50 01             	lea    edx,[rax+0x1]
   191af:	89 95 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],edx
   191b5:	48 98                	cdqe   
   191b7:	48 01 c8             	add    rax,rcx
   191ba:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   191bd:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   191c3:	8d 50 01             	lea    edx,[rax+0x1]
   191c6:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   191cd:	8b 00                	mov    eax,DWORD PTR [rax]
   191cf:	39 c2                	cmp    edx,eax
   191d1:	0f 84 f7 00 00 00    	je     192ce <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x8c0>
   191d7:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   191dd:	83 f8 08             	cmp    eax,0x8
   191e0:	75 14                	jne    191f6 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x7e8>
   191e2:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   191e9:	48 89 c7             	mov    rdi,rax
   191ec:	e8 20 d3 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   191f1:	0f b6 c0             	movzx  eax,al
   191f4:	eb 06                	jmp    191fc <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x7ee>
   191f6:	8b 85 44 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4bc]
   191fc:	89 85 40 fb ff ff    	mov    DWORD PTR [rbp-0x4c0],eax
   19202:	8b 85 40 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c0]
   19208:	48 98                	cdqe   
   1920a:	0f b6 94 85 e0 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x420]
   19212:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   19219:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   1921f:	8d 48 01             	lea    ecx,[rax+0x1]
   19222:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   19228:	48 98                	cdqe   
   1922a:	48 01 f0             	add    rax,rsi
   1922d:	88 10                	mov    BYTE PTR [rax],dl
   1922f:	8b 85 40 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c0]
   19235:	48 98                	cdqe   
   19237:	0f b6 94 85 e1 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x41f]
   1923f:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   19246:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   1924c:	8d 48 01             	lea    ecx,[rax+0x1]
   1924f:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   19255:	48 98                	cdqe   
   19257:	48 01 f0             	add    rax,rsi
   1925a:	88 10                	mov    BYTE PTR [rax],dl
   1925c:	8b 85 40 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4c0]
   19262:	48 98                	cdqe   
   19264:	0f b6 94 85 e2 fb ff ff 	movzx  edx,BYTE PTR [rbp+rax*4-0x41e]
   1926c:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   19273:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   19279:	8d 48 01             	lea    ecx,[rax+0x1]
   1927c:	89 8d 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],ecx
   19282:	48 98                	cdqe   
   19284:	48 01 f0             	add    rax,rsi
   19287:	88 10                	mov    BYTE PTR [rax],dl
   19289:	83 bd 30 fb ff ff 04 	cmp    DWORD PTR [rbp-0x4d0],0x4
   19290:	75 1e                	jne    192b0 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x8a2>
   19292:	48 8b 8d 98 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x468]
   19299:	8b 85 34 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4cc]
   1929f:	8d 50 01             	lea    edx,[rax+0x1]
   192a2:	89 95 34 fb ff ff    	mov    DWORD PTR [rbp-0x4cc],edx
   192a8:	48 98                	cdqe   
   192aa:	48 01 c8             	add    rax,rcx
   192ad:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   192b0:	83 85 24 fb ff ff 02 	add    DWORD PTR [rbp-0x4dc],0x2
   192b7:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   192be:	8b 00                	mov    eax,DWORD PTR [rax]
   192c0:	39 85 24 fb ff ff    	cmp    DWORD PTR [rbp-0x4dc],eax
   192c6:	0f 8c 00 fe ff ff    	jl     190cc <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x6be>
   192cc:	eb 01                	jmp    192cf <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x8c1>
   192ce:	90                   	nop
   192cf:	8b 95 84 fb ff ff    	mov    edx,DWORD PTR [rbp-0x47c]
   192d5:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   192dc:	89 d6                	mov    esi,edx
   192de:	48 89 c7             	mov    rdi,rax
   192e1:	e8 1f d3 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   192e6:	83 85 28 fb ff ff 01 	add    DWORD PTR [rbp-0x4d8],0x1
   192ed:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   192f4:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   192f7:	39 85 28 fb ff ff    	cmp    DWORD PTR [rbp-0x4d8],eax
   192fd:	0f 8c ba fd ff ff    	jl     190bd <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x6af>
   19303:	e9 2a 05 00 00       	jmp    19832 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xe24>
   19308:	c7 85 48 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4b8],0x0
   19312:	c7 85 4c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4b4],0x0
   1931c:	c7 85 50 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4b0],0x0
   19326:	c7 85 54 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4ac],0x0
   19330:	c7 85 58 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4a8],0x0
   1933a:	c7 85 5c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4a4],0x0
   19344:	c7 85 60 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4a0],0x0
   1934e:	c7 85 64 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x49c],0x0
   19358:	c7 85 68 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x498],0x0
   19362:	c7 85 6c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x494],0x0
   1936c:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   19372:	8b 95 d0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x430]
   19378:	29 d0                	sub    eax,edx
   1937a:	8b 8d b8 fb ff ff    	mov    ecx,DWORD PTR [rbp-0x448]
   19380:	29 c8                	sub    eax,ecx
   19382:	89 c2                	mov    edx,eax
   19384:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   1938b:	89 d6                	mov    esi,edx
   1938d:	48 89 c7             	mov    rdi,rax
   19390:	e8 70 d2 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   19395:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   1939b:	83 f8 18             	cmp    eax,0x18
   1939e:	75 17                	jne    193b7 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x9a9>
   193a0:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   193a7:	8b 10                	mov    edx,DWORD PTR [rax]
   193a9:	89 d0                	mov    eax,edx
   193ab:	01 c0                	add    eax,eax
   193ad:	01 d0                	add    eax,edx
   193af:	89 85 2c fb ff ff    	mov    DWORD PTR [rbp-0x4d4],eax
   193b5:	eb 28                	jmp    193df <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x9d1>
   193b7:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   193bd:	83 f8 10             	cmp    eax,0x10
   193c0:	75 13                	jne    193d5 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x9c7>
   193c2:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   193c9:	8b 00                	mov    eax,DWORD PTR [rax]
   193cb:	01 c0                	add    eax,eax
   193cd:	89 85 2c fb ff ff    	mov    DWORD PTR [rbp-0x4d4],eax
   193d3:	eb 0a                	jmp    193df <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x9d1>
   193d5:	c7 85 2c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4d4],0x0
   193df:	8b 85 2c fb ff ff    	mov    eax,DWORD PTR [rbp-0x4d4]
   193e5:	f7 d8                	neg    eax
   193e7:	83 e0 03             	and    eax,0x3
   193ea:	89 85 84 fb ff ff    	mov    DWORD PTR [rbp-0x47c],eax
   193f0:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   193f6:	83 f8 18             	cmp    eax,0x18
   193f9:	75 0c                	jne    19407 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x9f9>
   193fb:	c7 85 6c fb ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x494],0x1
   19405:	eb 45                	jmp    1944c <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa3e>
   19407:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   1940d:	83 f8 20             	cmp    eax,0x20
   19410:	75 3a                	jne    1944c <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa3e>
   19412:	81 bd 78 fb ff ff ff 00 00 00 	cmp    DWORD PTR [rbp-0x488],0xff
   1941c:	75 2e                	jne    1944c <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa3e>
   1941e:	81 bd 74 fb ff ff 00 ff 00 00 	cmp    DWORD PTR [rbp-0x48c],0xff00
   19428:	75 22                	jne    1944c <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa3e>
   1942a:	81 bd 70 fb ff ff 00 00 ff 00 	cmp    DWORD PTR [rbp-0x490],0xff0000
   19434:	75 16                	jne    1944c <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa3e>
   19436:	81 bd 7c fb ff ff 00 00 00 ff 	cmp    DWORD PTR [rbp-0x484],0xff000000
   19440:	75 0a                	jne    1944c <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa3e>
   19442:	c7 85 6c fb ff ff 02 00 00 00 	mov    DWORD PTR [rbp-0x494],0x2
   1944c:	83 bd 6c fb ff ff 00 	cmp    DWORD PTR [rbp-0x494],0x0
   19453:	0f 85 e7 00 00 00    	jne    19540 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xb32>
   19459:	83 bd 70 fb ff ff 00 	cmp    DWORD PTR [rbp-0x490],0x0
   19460:	74 12                	je     19474 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa66>
   19462:	83 bd 74 fb ff ff 00 	cmp    DWORD PTR [rbp-0x48c],0x0
   19469:	74 09                	je     19474 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa66>
   1946b:	83 bd 78 fb ff ff 00 	cmp    DWORD PTR [rbp-0x488],0x0
   19472:	75 28                	jne    1949c <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa8e>
   19474:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   1947b:	48 89 c7             	mov    rdi,rax
   1947e:	e8 ad b0 fe ff       	call   4530 <free@plt>
   19483:	48 8d 05 8f 1b 02 00 	lea    rax,[rip+0x21b8f]        # 3b019 <stbi__depth_scale_table+0x421>
   1948a:	48 89 c7             	mov    rdi,rax
   1948d:	e8 e0 b6 fe ff       	call   4b72 <stbi__err(char const*)>
   19492:	b8 00 00 00 00       	mov    eax,0x0
   19497:	e9 d9 05 00 00       	jmp    19a75 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1067>
   1949c:	8b 85 70 fb ff ff    	mov    eax,DWORD PTR [rbp-0x490]
   194a2:	89 c7                	mov    edi,eax
   194a4:	e8 27 ef ff ff       	call   183d0 <stbi__high_bit(unsigned int)>
   194a9:	83 e8 07             	sub    eax,0x7
   194ac:	89 85 48 fb ff ff    	mov    DWORD PTR [rbp-0x4b8],eax
   194b2:	8b 85 70 fb ff ff    	mov    eax,DWORD PTR [rbp-0x490]
   194b8:	89 c7                	mov    edi,eax
   194ba:	e8 79 ef ff ff       	call   18438 <stbi__bitcount(unsigned int)>
   194bf:	89 85 58 fb ff ff    	mov    DWORD PTR [rbp-0x4a8],eax
   194c5:	8b 85 74 fb ff ff    	mov    eax,DWORD PTR [rbp-0x48c]
   194cb:	89 c7                	mov    edi,eax
   194cd:	e8 fe ee ff ff       	call   183d0 <stbi__high_bit(unsigned int)>
   194d2:	83 e8 07             	sub    eax,0x7
   194d5:	89 85 4c fb ff ff    	mov    DWORD PTR [rbp-0x4b4],eax
   194db:	8b 85 74 fb ff ff    	mov    eax,DWORD PTR [rbp-0x48c]
   194e1:	89 c7                	mov    edi,eax
   194e3:	e8 50 ef ff ff       	call   18438 <stbi__bitcount(unsigned int)>
   194e8:	89 85 5c fb ff ff    	mov    DWORD PTR [rbp-0x4a4],eax
   194ee:	8b 85 78 fb ff ff    	mov    eax,DWORD PTR [rbp-0x488]
   194f4:	89 c7                	mov    edi,eax
   194f6:	e8 d5 ee ff ff       	call   183d0 <stbi__high_bit(unsigned int)>
   194fb:	83 e8 07             	sub    eax,0x7
   194fe:	89 85 50 fb ff ff    	mov    DWORD PTR [rbp-0x4b0],eax
   19504:	8b 85 78 fb ff ff    	mov    eax,DWORD PTR [rbp-0x488]
   1950a:	89 c7                	mov    edi,eax
   1950c:	e8 27 ef ff ff       	call   18438 <stbi__bitcount(unsigned int)>
   19511:	89 85 60 fb ff ff    	mov    DWORD PTR [rbp-0x4a0],eax
   19517:	8b 85 7c fb ff ff    	mov    eax,DWORD PTR [rbp-0x484]
   1951d:	89 c7                	mov    edi,eax
   1951f:	e8 ac ee ff ff       	call   183d0 <stbi__high_bit(unsigned int)>
   19524:	83 e8 07             	sub    eax,0x7
   19527:	89 85 54 fb ff ff    	mov    DWORD PTR [rbp-0x4ac],eax
   1952d:	8b 85 7c fb ff ff    	mov    eax,DWORD PTR [rbp-0x484]
   19533:	89 c7                	mov    edi,eax
   19535:	e8 fe ee ff ff       	call   18438 <stbi__bitcount(unsigned int)>
   1953a:	89 85 64 fb ff ff    	mov    DWORD PTR [rbp-0x49c],eax
   19540:	c7 85 28 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4d8],0x0
   1954a:	e9 cd 02 00 00       	jmp    1981c <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xe0e>
   1954f:	83 bd 6c fb ff ff 00 	cmp    DWORD PTR [rbp-0x494],0x0
   19556:	0f 84 0b 01 00 00    	je     19667 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc59>
   1955c:	c7 85 24 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4dc],0x0
   19566:	e9 e2 00 00 00       	jmp    1964d <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc3f>
   1956b:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   19571:	48 98                	cdqe   
   19573:	48 8d 50 02          	lea    rdx,[rax+0x2]
   19577:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   1957e:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   19582:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19589:	48 89 c7             	mov    rdi,rax
   1958c:	e8 80 cf fe ff       	call   6511 <stbi__get8(stbi__context*)>
   19591:	88 03                	mov    BYTE PTR [rbx],al
   19593:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   19599:	48 98                	cdqe   
   1959b:	48 8d 50 01          	lea    rdx,[rax+0x1]
   1959f:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   195a6:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   195aa:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   195b1:	48 89 c7             	mov    rdi,rax
   195b4:	e8 58 cf fe ff       	call   6511 <stbi__get8(stbi__context*)>
   195b9:	88 03                	mov    BYTE PTR [rbx],al
   195bb:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   195c1:	48 63 d0             	movsxd rdx,eax
   195c4:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   195cb:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   195cf:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   195d6:	48 89 c7             	mov    rdi,rax
   195d9:	e8 33 cf fe ff       	call   6511 <stbi__get8(stbi__context*)>
   195de:	88 03                	mov    BYTE PTR [rbx],al
   195e0:	83 85 68 fb ff ff 03 	add    DWORD PTR [rbp-0x498],0x3
   195e7:	83 bd 6c fb ff ff 02 	cmp    DWORD PTR [rbp-0x494],0x2
   195ee:	75 11                	jne    19601 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xbf3>
   195f0:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   195f7:	48 89 c7             	mov    rdi,rax
   195fa:	e8 12 cf fe ff       	call   6511 <stbi__get8(stbi__context*)>
   195ff:	eb 05                	jmp    19606 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xbf8>
   19601:	b8 ff ff ff ff       	mov    eax,0xffffffff
   19606:	88 85 1a fb ff ff    	mov    BYTE PTR [rbp-0x4e6],al
   1960c:	0f b6 85 1a fb ff ff 	movzx  eax,BYTE PTR [rbp-0x4e6]
   19613:	09 85 1c fb ff ff    	or     DWORD PTR [rbp-0x4e4],eax
   19619:	83 bd 30 fb ff ff 04 	cmp    DWORD PTR [rbp-0x4d0],0x4
   19620:	75 24                	jne    19646 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc38>
   19622:	0f b6 95 1a fb ff ff 	movzx  edx,BYTE PTR [rbp-0x4e6]
   19629:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   19630:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   19636:	8d 48 01             	lea    ecx,[rax+0x1]
   19639:	89 8d 68 fb ff ff    	mov    DWORD PTR [rbp-0x498],ecx
   1963f:	48 98                	cdqe   
   19641:	48 01 f0             	add    rax,rsi
   19644:	88 10                	mov    BYTE PTR [rax],dl
   19646:	83 85 24 fb ff ff 01 	add    DWORD PTR [rbp-0x4dc],0x1
   1964d:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19654:	8b 00                	mov    eax,DWORD PTR [rax]
   19656:	39 85 24 fb ff ff    	cmp    DWORD PTR [rbp-0x4dc],eax
   1965c:	0f 8c 09 ff ff ff    	jl     1956b <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xb5d>
   19662:	e9 97 01 00 00       	jmp    197fe <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xdf0>
   19667:	8b 85 b0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x450]
   1966d:	89 85 88 fb ff ff    	mov    DWORD PTR [rbp-0x478],eax
   19673:	c7 85 24 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4dc],0x0
   1967d:	e9 67 01 00 00       	jmp    197e9 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xddb>
   19682:	83 bd 88 fb ff ff 10 	cmp    DWORD PTR [rbp-0x478],0x10
   19689:	75 11                	jne    1969c <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc8e>
   1968b:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19692:	48 89 c7             	mov    rdi,rax
   19695:	e8 d0 d1 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1969a:	eb 0f                	jmp    196ab <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc9d>
   1969c:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   196a3:	48 89 c7             	mov    rdi,rax
   196a6:	e8 f8 d1 fe ff       	call   68a3 <stbi__get32le(stbi__context*)>
   196ab:	89 85 8c fb ff ff    	mov    DWORD PTR [rbp-0x474],eax
   196b1:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   196b7:	23 85 70 fb ff ff    	and    eax,DWORD PTR [rbp-0x490]
   196bd:	8b 95 58 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4a8]
   196c3:	8b 8d 48 fb ff ff    	mov    ecx,DWORD PTR [rbp-0x4b8]
   196c9:	89 ce                	mov    esi,ecx
   196cb:	89 c7                	mov    edi,eax
   196cd:	e8 cf ed ff ff       	call   184a1 <stbi__shiftsigned(unsigned int, int, int)>
   196d2:	89 c1                	mov    ecx,eax
   196d4:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   196db:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   196e1:	8d 50 01             	lea    edx,[rax+0x1]
   196e4:	89 95 68 fb ff ff    	mov    DWORD PTR [rbp-0x498],edx
   196ea:	48 98                	cdqe   
   196ec:	48 01 f0             	add    rax,rsi
   196ef:	88 08                	mov    BYTE PTR [rax],cl
   196f1:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   196f7:	23 85 74 fb ff ff    	and    eax,DWORD PTR [rbp-0x48c]
   196fd:	8b 95 5c fb ff ff    	mov    edx,DWORD PTR [rbp-0x4a4]
   19703:	8b 8d 4c fb ff ff    	mov    ecx,DWORD PTR [rbp-0x4b4]
   19709:	89 ce                	mov    esi,ecx
   1970b:	89 c7                	mov    edi,eax
   1970d:	e8 8f ed ff ff       	call   184a1 <stbi__shiftsigned(unsigned int, int, int)>
   19712:	89 c1                	mov    ecx,eax
   19714:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   1971b:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   19721:	8d 50 01             	lea    edx,[rax+0x1]
   19724:	89 95 68 fb ff ff    	mov    DWORD PTR [rbp-0x498],edx
   1972a:	48 98                	cdqe   
   1972c:	48 01 f0             	add    rax,rsi
   1972f:	88 08                	mov    BYTE PTR [rax],cl
   19731:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   19737:	23 85 78 fb ff ff    	and    eax,DWORD PTR [rbp-0x488]
   1973d:	8b 95 60 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4a0]
   19743:	8b 8d 50 fb ff ff    	mov    ecx,DWORD PTR [rbp-0x4b0]
   19749:	89 ce                	mov    esi,ecx
   1974b:	89 c7                	mov    edi,eax
   1974d:	e8 4f ed ff ff       	call   184a1 <stbi__shiftsigned(unsigned int, int, int)>
   19752:	89 c1                	mov    ecx,eax
   19754:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   1975b:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   19761:	8d 50 01             	lea    edx,[rax+0x1]
   19764:	89 95 68 fb ff ff    	mov    DWORD PTR [rbp-0x498],edx
   1976a:	48 98                	cdqe   
   1976c:	48 01 f0             	add    rax,rsi
   1976f:	88 08                	mov    BYTE PTR [rax],cl
   19771:	83 bd 7c fb ff ff 00 	cmp    DWORD PTR [rbp-0x484],0x0
   19778:	74 23                	je     1979d <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xd8f>
   1977a:	8b 85 8c fb ff ff    	mov    eax,DWORD PTR [rbp-0x474]
   19780:	23 85 7c fb ff ff    	and    eax,DWORD PTR [rbp-0x484]
   19786:	8b 95 64 fb ff ff    	mov    edx,DWORD PTR [rbp-0x49c]
   1978c:	8b 8d 54 fb ff ff    	mov    ecx,DWORD PTR [rbp-0x4ac]
   19792:	89 ce                	mov    esi,ecx
   19794:	89 c7                	mov    edi,eax
   19796:	e8 06 ed ff ff       	call   184a1 <stbi__shiftsigned(unsigned int, int, int)>
   1979b:	eb 05                	jmp    197a2 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xd94>
   1979d:	b8 ff 00 00 00       	mov    eax,0xff
   197a2:	89 85 90 fb ff ff    	mov    DWORD PTR [rbp-0x470],eax
   197a8:	8b 85 90 fb ff ff    	mov    eax,DWORD PTR [rbp-0x470]
   197ae:	09 85 1c fb ff ff    	or     DWORD PTR [rbp-0x4e4],eax
   197b4:	83 bd 30 fb ff ff 04 	cmp    DWORD PTR [rbp-0x4d0],0x4
   197bb:	75 25                	jne    197e2 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xdd4>
   197bd:	8b 85 90 fb ff ff    	mov    eax,DWORD PTR [rbp-0x470]
   197c3:	89 c1                	mov    ecx,eax
   197c5:	48 8b b5 98 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x468]
   197cc:	8b 85 68 fb ff ff    	mov    eax,DWORD PTR [rbp-0x498]
   197d2:	8d 50 01             	lea    edx,[rax+0x1]
   197d5:	89 95 68 fb ff ff    	mov    DWORD PTR [rbp-0x498],edx
   197db:	48 98                	cdqe   
   197dd:	48 01 f0             	add    rax,rsi
   197e0:	88 08                	mov    BYTE PTR [rax],cl
   197e2:	83 85 24 fb ff ff 01 	add    DWORD PTR [rbp-0x4dc],0x1
   197e9:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   197f0:	8b 00                	mov    eax,DWORD PTR [rax]
   197f2:	39 85 24 fb ff ff    	cmp    DWORD PTR [rbp-0x4dc],eax
   197f8:	0f 8c 84 fe ff ff    	jl     19682 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc74>
   197fe:	8b 95 84 fb ff ff    	mov    edx,DWORD PTR [rbp-0x47c]
   19804:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   1980b:	89 d6                	mov    esi,edx
   1980d:	48 89 c7             	mov    rdi,rax
   19810:	e8 f0 cd fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   19815:	83 85 28 fb ff ff 01 	add    DWORD PTR [rbp-0x4d8],0x1
   1981c:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19823:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   19826:	39 85 28 fb ff ff    	cmp    DWORD PTR [rbp-0x4d8],eax
   1982c:	0f 8c 1d fd ff ff    	jl     1954f <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xb41>
   19832:	83 bd 30 fb ff ff 04 	cmp    DWORD PTR [rbp-0x4d0],0x4
   19839:	75 53                	jne    1988e <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xe80>
   1983b:	83 bd 1c fb ff ff 00 	cmp    DWORD PTR [rbp-0x4e4],0x0
   19842:	75 4a                	jne    1988e <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xe80>
   19844:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   1984b:	8b 10                	mov    edx,DWORD PTR [rax]
   1984d:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19854:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   19857:	0f af c2             	imul   eax,edx
   1985a:	c1 e0 02             	shl    eax,0x2
   1985d:	83 e8 01             	sub    eax,0x1
   19860:	89 85 24 fb ff ff    	mov    DWORD PTR [rbp-0x4dc],eax
   19866:	eb 1d                	jmp    19885 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xe77>
   19868:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   1986e:	48 63 d0             	movsxd rdx,eax
   19871:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   19878:	48 01 d0             	add    rax,rdx
   1987b:	c6 00 ff             	mov    BYTE PTR [rax],0xff
   1987e:	83 ad 24 fb ff ff 04 	sub    DWORD PTR [rbp-0x4dc],0x4
   19885:	83 bd 24 fb ff ff 00 	cmp    DWORD PTR [rbp-0x4dc],0x0
   1988c:	79 da                	jns    19868 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xe5a>
   1988e:	83 bd 80 fb ff ff 00 	cmp    DWORD PTR [rbp-0x480],0x0
   19895:	0f 84 2b 01 00 00    	je     199c6 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xfb8>
   1989b:	c7 85 28 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4d8],0x0
   198a5:	e9 04 01 00 00       	jmp    199ae <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xfa0>
   198aa:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   198b1:	8b 10                	mov    edx,DWORD PTR [rax]
   198b3:	8b 85 28 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4d8]
   198b9:	0f af d0             	imul   edx,eax
   198bc:	8b 85 30 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4d0]
   198c2:	0f af c2             	imul   eax,edx
   198c5:	89 c2                	mov    edx,eax
   198c7:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   198ce:	48 01 d0             	add    rax,rdx
   198d1:	48 89 85 a0 fb ff ff 	mov    QWORD PTR [rbp-0x460],rax
   198d8:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   198df:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   198e2:	8b 95 28 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4d8]
   198e8:	29 d0                	sub    eax,edx
   198ea:	8d 50 ff             	lea    edx,[rax-0x1]
   198ed:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   198f4:	8b 00                	mov    eax,DWORD PTR [rax]
   198f6:	0f af d0             	imul   edx,eax
   198f9:	8b 85 30 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4d0]
   198ff:	0f af c2             	imul   eax,edx
   19902:	89 c2                	mov    edx,eax
   19904:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   1990b:	48 01 d0             	add    rax,rdx
   1990e:	48 89 85 a8 fb ff ff 	mov    QWORD PTR [rbp-0x458],rax
   19915:	c7 85 24 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4dc],0x0
   1991f:	eb 6a                	jmp    1998b <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xf7d>
   19921:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   19927:	48 63 d0             	movsxd rdx,eax
   1992a:	48 8b 85 a0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x460]
   19931:	48 01 d0             	add    rax,rdx
   19934:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   19937:	88 85 1b fb ff ff    	mov    BYTE PTR [rbp-0x4e5],al
   1993d:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   19943:	48 63 d0             	movsxd rdx,eax
   19946:	48 8b 85 a8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x458]
   1994d:	48 01 d0             	add    rax,rdx
   19950:	8b 95 24 fb ff ff    	mov    edx,DWORD PTR [rbp-0x4dc]
   19956:	48 63 ca             	movsxd rcx,edx
   19959:	48 8b 95 a0 fb ff ff 	mov    rdx,QWORD PTR [rbp-0x460]
   19960:	48 01 ca             	add    rdx,rcx
   19963:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   19966:	88 02                	mov    BYTE PTR [rdx],al
   19968:	8b 85 24 fb ff ff    	mov    eax,DWORD PTR [rbp-0x4dc]
   1996e:	48 63 d0             	movsxd rdx,eax
   19971:	48 8b 85 a8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x458]
   19978:	48 01 c2             	add    rdx,rax
   1997b:	0f b6 85 1b fb ff ff 	movzx  eax,BYTE PTR [rbp-0x4e5]
   19982:	88 02                	mov    BYTE PTR [rdx],al
   19984:	83 85 24 fb ff ff 01 	add    DWORD PTR [rbp-0x4dc],0x1
   1998b:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19992:	8b 00                	mov    eax,DWORD PTR [rax]
   19994:	0f af 85 30 fb ff ff 	imul   eax,DWORD PTR [rbp-0x4d0]
   1999b:	39 85 24 fb ff ff    	cmp    DWORD PTR [rbp-0x4dc],eax
   199a1:	0f 8c 7a ff ff ff    	jl     19921 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xf13>
   199a7:	83 85 28 fb ff ff 01 	add    DWORD PTR [rbp-0x4d8],0x1
   199ae:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   199b5:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   199b8:	d1 f8                	sar    eax,1
   199ba:	39 85 28 fb ff ff    	cmp    DWORD PTR [rbp-0x4d8],eax
   199c0:	0f 8c e4 fe ff ff    	jl     198aa <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xe9c>
   199c6:	83 bd ec fa ff ff 00 	cmp    DWORD PTR [rbp-0x514],0x0
   199cd:	74 59                	je     19a28 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x101a>
   199cf:	8b 85 ec fa ff ff    	mov    eax,DWORD PTR [rbp-0x514]
   199d5:	3b 85 30 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x4d0]
   199db:	74 4b                	je     19a28 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x101a>
   199dd:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   199e4:	8b 78 04             	mov    edi,DWORD PTR [rax+0x4]
   199e7:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   199ee:	8b 08                	mov    ecx,DWORD PTR [rax]
   199f0:	8b 95 ec fa ff ff    	mov    edx,DWORD PTR [rbp-0x514]
   199f6:	8b b5 30 fb ff ff    	mov    esi,DWORD PTR [rbp-0x4d0]
   199fc:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   19a03:	41 89 f8             	mov    r8d,edi
   19a06:	48 89 c7             	mov    rdi,rax
   19a09:	e8 f3 ce fe ff       	call   6901 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   19a0e:	48 89 85 98 fb ff ff 	mov    QWORD PTR [rbp-0x468],rax
   19a15:	48 83 bd 98 fb ff ff 00 	cmp    QWORD PTR [rbp-0x468],0x0
   19a1d:	75 09                	jne    19a28 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x101a>
   19a1f:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   19a26:	eb 4d                	jmp    19a75 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1067>
   19a28:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19a2f:	8b 00                	mov    eax,DWORD PTR [rax]
   19a31:	89 c2                	mov    edx,eax
   19a33:	48 8b 85 00 fb ff ff 	mov    rax,QWORD PTR [rbp-0x500]
   19a3a:	89 10                	mov    DWORD PTR [rax],edx
   19a3c:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19a43:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   19a46:	89 c2                	mov    edx,eax
   19a48:	48 8b 85 f8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x508]
   19a4f:	89 10                	mov    DWORD PTR [rax],edx
   19a51:	48 83 bd f0 fa ff ff 00 	cmp    QWORD PTR [rbp-0x510],0x0
   19a59:	74 13                	je     19a6e <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1060>
   19a5b:	48 8b 85 08 fb ff ff 	mov    rax,QWORD PTR [rbp-0x4f8]
   19a62:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
   19a65:	48 8b 85 f0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x510]
   19a6c:	89 10                	mov    DWORD PTR [rax],edx
   19a6e:	48 8b 85 98 fb ff ff 	mov    rax,QWORD PTR [rbp-0x468]
   19a75:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   19a79:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   19a82:	74 05                	je     19a89 <stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x107b>
   19a84:	e8 57 aa fe ff       	call   44e0 <__stack_chk_fail@plt>
   19a89:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   19a8d:	c9                   	leave  
   19a8e:	c3                   	ret    

0000000000019a8f <stbi__tga_get_comp(int, int, int*)>:
   19a8f:	55                   	push   rbp
   19a90:	48 89 e5             	mov    rbp,rsp
   19a93:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   19a96:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   19a99:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
   19a9d:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   19aa2:	74 0a                	je     19aae <stbi__tga_get_comp(int, int, int*)+0x1f>
   19aa4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   19aa8:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
   19aae:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   19ab1:	83 e8 08             	sub    eax,0x8
   19ab4:	83 f8 18             	cmp    eax,0x18
   19ab7:	77 5e                	ja     19b17 <stbi__tga_get_comp(int, int, int*)+0x88>
   19ab9:	89 c0                	mov    eax,eax
   19abb:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   19ac3:	48 8d 05 5a 15 02 00 	lea    rax,[rip+0x2155a]        # 3b024 <stbi__depth_scale_table+0x42c>
   19aca:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
   19acd:	48 98                	cdqe   
   19acf:	48 8d 15 4e 15 02 00 	lea    rdx,[rip+0x2154e]        # 3b024 <stbi__depth_scale_table+0x42c>
   19ad6:	48 01 d0             	add    rax,rdx
   19ad9:	ff e0                	jmp    rax
   19adb:	b8 01 00 00 00       	mov    eax,0x1
   19ae0:	eb 3a                	jmp    19b1c <stbi__tga_get_comp(int, int, int*)+0x8d>
   19ae2:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   19ae6:	74 07                	je     19aef <stbi__tga_get_comp(int, int, int*)+0x60>
   19ae8:	b8 02 00 00 00       	mov    eax,0x2
   19aed:	eb 2d                	jmp    19b1c <stbi__tga_get_comp(int, int, int*)+0x8d>
   19aef:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   19af4:	74 0a                	je     19b00 <stbi__tga_get_comp(int, int, int*)+0x71>
   19af6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   19afa:	c7 00 01 00 00 00    	mov    DWORD PTR [rax],0x1
   19b00:	b8 03 00 00 00       	mov    eax,0x3
   19b05:	eb 15                	jmp    19b1c <stbi__tga_get_comp(int, int, int*)+0x8d>
   19b07:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   19b0a:	8d 50 07             	lea    edx,[rax+0x7]
   19b0d:	85 c0                	test   eax,eax
   19b0f:	0f 48 c2             	cmovs  eax,edx
   19b12:	c1 f8 03             	sar    eax,0x3
   19b15:	eb 05                	jmp    19b1c <stbi__tga_get_comp(int, int, int*)+0x8d>
   19b17:	b8 00 00 00 00       	mov    eax,0x0
   19b1c:	5d                   	pop    rbp
   19b1d:	c3                   	ret    

0000000000019b1e <stbi__tga_info(stbi__context*, int*, int*, int*)>:
   19b1e:	55                   	push   rbp
   19b1f:	48 89 e5             	mov    rbp,rsp
   19b22:	48 83 ec 40          	sub    rsp,0x40
   19b26:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   19b2a:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   19b2e:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   19b32:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   19b36:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19b3a:	48 89 c7             	mov    rdi,rax
   19b3d:	e8 cf c9 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   19b42:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19b46:	48 89 c7             	mov    rdi,rax
   19b49:	e8 c3 c9 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   19b4e:	0f b6 c0             	movzx  eax,al
   19b51:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   19b54:	83 7d e8 01          	cmp    DWORD PTR [rbp-0x18],0x1
   19b58:	7e 16                	jle    19b70 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x52>
   19b5a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19b5e:	48 89 c7             	mov    rdi,rax
   19b61:	e8 c6 af fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   19b66:	b8 00 00 00 00       	mov    eax,0x0
   19b6b:	e9 26 02 00 00       	jmp    19d96 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   19b70:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19b74:	48 89 c7             	mov    rdi,rax
   19b77:	e8 95 c9 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   19b7c:	0f b6 c0             	movzx  eax,al
   19b7f:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   19b82:	83 7d e8 01          	cmp    DWORD PTR [rbp-0x18],0x1
   19b86:	0f 85 92 00 00 00    	jne    19c1e <stbi__tga_info(stbi__context*, int*, int*, int*)+0x100>
   19b8c:	83 7d ec 01          	cmp    DWORD PTR [rbp-0x14],0x1
   19b90:	74 1c                	je     19bae <stbi__tga_info(stbi__context*, int*, int*, int*)+0x90>
   19b92:	83 7d ec 09          	cmp    DWORD PTR [rbp-0x14],0x9
   19b96:	74 16                	je     19bae <stbi__tga_info(stbi__context*, int*, int*, int*)+0x90>
   19b98:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19b9c:	48 89 c7             	mov    rdi,rax
   19b9f:	e8 88 af fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   19ba4:	b8 00 00 00 00       	mov    eax,0x0
   19ba9:	e9 e8 01 00 00       	jmp    19d96 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   19bae:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19bb2:	be 04 00 00 00       	mov    esi,0x4
   19bb7:	48 89 c7             	mov    rdi,rax
   19bba:	e8 46 ca fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   19bbf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19bc3:	48 89 c7             	mov    rdi,rax
   19bc6:	e8 46 c9 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   19bcb:	0f b6 c0             	movzx  eax,al
   19bce:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   19bd1:	83 7d f0 08          	cmp    DWORD PTR [rbp-0x10],0x8
   19bd5:	74 2e                	je     19c05 <stbi__tga_info(stbi__context*, int*, int*, int*)+0xe7>
   19bd7:	83 7d f0 0f          	cmp    DWORD PTR [rbp-0x10],0xf
   19bdb:	74 28                	je     19c05 <stbi__tga_info(stbi__context*, int*, int*, int*)+0xe7>
   19bdd:	83 7d f0 10          	cmp    DWORD PTR [rbp-0x10],0x10
   19be1:	74 22                	je     19c05 <stbi__tga_info(stbi__context*, int*, int*, int*)+0xe7>
   19be3:	83 7d f0 18          	cmp    DWORD PTR [rbp-0x10],0x18
   19be7:	74 1c                	je     19c05 <stbi__tga_info(stbi__context*, int*, int*, int*)+0xe7>
   19be9:	83 7d f0 20          	cmp    DWORD PTR [rbp-0x10],0x20
   19bed:	74 16                	je     19c05 <stbi__tga_info(stbi__context*, int*, int*, int*)+0xe7>
   19bef:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19bf3:	48 89 c7             	mov    rdi,rax
   19bf6:	e8 31 af fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   19bfb:	b8 00 00 00 00       	mov    eax,0x0
   19c00:	e9 91 01 00 00       	jmp    19d96 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   19c05:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19c09:	be 04 00 00 00       	mov    esi,0x4
   19c0e:	48 89 c7             	mov    rdi,rax
   19c11:	e8 ef c9 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   19c16:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   19c19:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   19c1c:	eb 46                	jmp    19c64 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x146>
   19c1e:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
   19c22:	74 28                	je     19c4c <stbi__tga_info(stbi__context*, int*, int*, int*)+0x12e>
   19c24:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
   19c28:	74 22                	je     19c4c <stbi__tga_info(stbi__context*, int*, int*, int*)+0x12e>
   19c2a:	83 7d ec 0a          	cmp    DWORD PTR [rbp-0x14],0xa
   19c2e:	74 1c                	je     19c4c <stbi__tga_info(stbi__context*, int*, int*, int*)+0x12e>
   19c30:	83 7d ec 0b          	cmp    DWORD PTR [rbp-0x14],0xb
   19c34:	74 16                	je     19c4c <stbi__tga_info(stbi__context*, int*, int*, int*)+0x12e>
   19c36:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19c3a:	48 89 c7             	mov    rdi,rax
   19c3d:	e8 ea ae fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   19c42:	b8 00 00 00 00       	mov    eax,0x0
   19c47:	e9 4a 01 00 00       	jmp    19d96 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   19c4c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19c50:	be 09 00 00 00       	mov    esi,0x9
   19c55:	48 89 c7             	mov    rdi,rax
   19c58:	e8 a8 c9 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   19c5d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   19c64:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19c68:	48 89 c7             	mov    rdi,rax
   19c6b:	e8 fa cb fe ff       	call   686a <stbi__get16le(stbi__context*)>
   19c70:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   19c73:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
   19c77:	7f 16                	jg     19c8f <stbi__tga_info(stbi__context*, int*, int*, int*)+0x171>
   19c79:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19c7d:	48 89 c7             	mov    rdi,rax
   19c80:	e8 a7 ae fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   19c85:	b8 00 00 00 00       	mov    eax,0x0
   19c8a:	e9 07 01 00 00       	jmp    19d96 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   19c8f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19c93:	48 89 c7             	mov    rdi,rax
   19c96:	e8 cf cb fe ff       	call   686a <stbi__get16le(stbi__context*)>
   19c9b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   19c9e:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   19ca2:	7f 16                	jg     19cba <stbi__tga_info(stbi__context*, int*, int*, int*)+0x19c>
   19ca4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19ca8:	48 89 c7             	mov    rdi,rax
   19cab:	e8 7c ae fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   19cb0:	b8 00 00 00 00       	mov    eax,0x0
   19cb5:	e9 dc 00 00 00       	jmp    19d96 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   19cba:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19cbe:	48 89 c7             	mov    rdi,rax
   19cc1:	e8 4b c8 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   19cc6:	0f b6 c0             	movzx  eax,al
   19cc9:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   19ccc:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19cd0:	48 89 c7             	mov    rdi,rax
   19cd3:	e8 39 c8 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   19cd8:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   19cdc:	74 3b                	je     19d19 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x1fb>
   19cde:	83 7d fc 08          	cmp    DWORD PTR [rbp-0x4],0x8
   19ce2:	74 1c                	je     19d00 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x1e2>
   19ce4:	83 7d fc 10          	cmp    DWORD PTR [rbp-0x4],0x10
   19ce8:	74 16                	je     19d00 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x1e2>
   19cea:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19cee:	48 89 c7             	mov    rdi,rax
   19cf1:	e8 36 ae fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   19cf6:	b8 00 00 00 00       	mov    eax,0x0
   19cfb:	e9 96 00 00 00       	jmp    19d96 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   19d00:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   19d03:	ba 00 00 00 00       	mov    edx,0x0
   19d08:	be 00 00 00 00       	mov    esi,0x0
   19d0d:	89 c7                	mov    edi,eax
   19d0f:	e8 7b fd ff ff       	call   19a8f <stbi__tga_get_comp(int, int, int*)>
   19d14:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   19d17:	eb 2f                	jmp    19d48 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x22a>
   19d19:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
   19d1d:	74 06                	je     19d25 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x207>
   19d1f:	83 7d ec 0b          	cmp    DWORD PTR [rbp-0x14],0xb
   19d23:	75 07                	jne    19d2c <stbi__tga_info(stbi__context*, int*, int*, int*)+0x20e>
   19d25:	b8 01 00 00 00       	mov    eax,0x1
   19d2a:	eb 05                	jmp    19d31 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x213>
   19d2c:	b8 00 00 00 00       	mov    eax,0x0
   19d31:	0f b6 c8             	movzx  ecx,al
   19d34:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   19d37:	ba 00 00 00 00       	mov    edx,0x0
   19d3c:	89 ce                	mov    esi,ecx
   19d3e:	89 c7                	mov    edi,eax
   19d40:	e8 4a fd ff ff       	call   19a8f <stbi__tga_get_comp(int, int, int*)>
   19d45:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   19d48:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
   19d4c:	75 13                	jne    19d61 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x243>
   19d4e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   19d52:	48 89 c7             	mov    rdi,rax
   19d55:	e8 d2 ad fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   19d5a:	b8 00 00 00 00       	mov    eax,0x0
   19d5f:	eb 35                	jmp    19d96 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x278>
   19d61:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   19d66:	74 09                	je     19d71 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x253>
   19d68:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   19d6c:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   19d6f:	89 10                	mov    DWORD PTR [rax],edx
   19d71:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   19d76:	74 09                	je     19d81 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x263>
   19d78:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   19d7c:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   19d7f:	89 10                	mov    DWORD PTR [rax],edx
   19d81:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
   19d86:	74 09                	je     19d91 <stbi__tga_info(stbi__context*, int*, int*, int*)+0x273>
   19d88:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   19d8c:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   19d8f:	89 10                	mov    DWORD PTR [rax],edx
   19d91:	b8 01 00 00 00       	mov    eax,0x1
   19d96:	c9                   	leave  
   19d97:	c3                   	ret    

0000000000019d98 <stbi__tga_test(stbi__context*)>:
   19d98:	55                   	push   rbp
   19d99:	48 89 e5             	mov    rbp,rsp
   19d9c:	48 83 ec 20          	sub    rsp,0x20
   19da0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   19da4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   19dab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19daf:	48 89 c7             	mov    rdi,rax
   19db2:	e8 5a c7 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   19db7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19dbb:	48 89 c7             	mov    rdi,rax
   19dbe:	e8 4e c7 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   19dc3:	0f b6 c0             	movzx  eax,al
   19dc6:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   19dc9:	83 7d f8 01          	cmp    DWORD PTR [rbp-0x8],0x1
   19dcd:	0f 8f 22 01 00 00    	jg     19ef5 <stbi__tga_test(stbi__context*)+0x15d>
   19dd3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19dd7:	48 89 c7             	mov    rdi,rax
   19dda:	e8 32 c7 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   19ddf:	0f b6 c0             	movzx  eax,al
   19de2:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   19de5:	83 7d f8 01          	cmp    DWORD PTR [rbp-0x8],0x1
   19de9:	75 68                	jne    19e53 <stbi__tga_test(stbi__context*)+0xbb>
   19deb:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
   19def:	74 0a                	je     19dfb <stbi__tga_test(stbi__context*)+0x63>
   19df1:	83 7d fc 09          	cmp    DWORD PTR [rbp-0x4],0x9
   19df5:	0f 85 fd 00 00 00    	jne    19ef8 <stbi__tga_test(stbi__context*)+0x160>
   19dfb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19dff:	be 04 00 00 00       	mov    esi,0x4
   19e04:	48 89 c7             	mov    rdi,rax
   19e07:	e8 f9 c7 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   19e0c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19e10:	48 89 c7             	mov    rdi,rax
   19e13:	e8 f9 c6 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   19e18:	0f b6 c0             	movzx  eax,al
   19e1b:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   19e1e:	83 7d fc 08          	cmp    DWORD PTR [rbp-0x4],0x8
   19e22:	74 1c                	je     19e40 <stbi__tga_test(stbi__context*)+0xa8>
   19e24:	83 7d fc 0f          	cmp    DWORD PTR [rbp-0x4],0xf
   19e28:	74 16                	je     19e40 <stbi__tga_test(stbi__context*)+0xa8>
   19e2a:	83 7d fc 10          	cmp    DWORD PTR [rbp-0x4],0x10
   19e2e:	74 10                	je     19e40 <stbi__tga_test(stbi__context*)+0xa8>
   19e30:	83 7d fc 18          	cmp    DWORD PTR [rbp-0x4],0x18
   19e34:	74 0a                	je     19e40 <stbi__tga_test(stbi__context*)+0xa8>
   19e36:	83 7d fc 20          	cmp    DWORD PTR [rbp-0x4],0x20
   19e3a:	0f 85 bb 00 00 00    	jne    19efb <stbi__tga_test(stbi__context*)+0x163>
   19e40:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19e44:	be 04 00 00 00       	mov    esi,0x4
   19e49:	48 89 c7             	mov    rdi,rax
   19e4c:	e8 b4 c7 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   19e51:	eb 2d                	jmp    19e80 <stbi__tga_test(stbi__context*)+0xe8>
   19e53:	83 7d fc 02          	cmp    DWORD PTR [rbp-0x4],0x2
   19e57:	74 16                	je     19e6f <stbi__tga_test(stbi__context*)+0xd7>
   19e59:	83 7d fc 03          	cmp    DWORD PTR [rbp-0x4],0x3
   19e5d:	74 10                	je     19e6f <stbi__tga_test(stbi__context*)+0xd7>
   19e5f:	83 7d fc 0a          	cmp    DWORD PTR [rbp-0x4],0xa
   19e63:	74 0a                	je     19e6f <stbi__tga_test(stbi__context*)+0xd7>
   19e65:	83 7d fc 0b          	cmp    DWORD PTR [rbp-0x4],0xb
   19e69:	0f 85 8f 00 00 00    	jne    19efe <stbi__tga_test(stbi__context*)+0x166>
   19e6f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19e73:	be 09 00 00 00       	mov    esi,0x9
   19e78:	48 89 c7             	mov    rdi,rax
   19e7b:	e8 85 c7 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   19e80:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19e84:	48 89 c7             	mov    rdi,rax
   19e87:	e8 de c9 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   19e8c:	85 c0                	test   eax,eax
   19e8e:	0f 9e c0             	setle  al
   19e91:	84 c0                	test   al,al
   19e93:	75 6c                	jne    19f01 <stbi__tga_test(stbi__context*)+0x169>
   19e95:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19e99:	48 89 c7             	mov    rdi,rax
   19e9c:	e8 c9 c9 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   19ea1:	85 c0                	test   eax,eax
   19ea3:	0f 9e c0             	setle  al
   19ea6:	84 c0                	test   al,al
   19ea8:	75 5a                	jne    19f04 <stbi__tga_test(stbi__context*)+0x16c>
   19eaa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19eae:	48 89 c7             	mov    rdi,rax
   19eb1:	e8 5b c6 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   19eb6:	0f b6 c0             	movzx  eax,al
   19eb9:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   19ebc:	83 7d f8 01          	cmp    DWORD PTR [rbp-0x8],0x1
   19ec0:	75 0c                	jne    19ece <stbi__tga_test(stbi__context*)+0x136>
   19ec2:	83 7d fc 08          	cmp    DWORD PTR [rbp-0x4],0x8
   19ec6:	74 06                	je     19ece <stbi__tga_test(stbi__context*)+0x136>
   19ec8:	83 7d fc 10          	cmp    DWORD PTR [rbp-0x4],0x10
   19ecc:	75 39                	jne    19f07 <stbi__tga_test(stbi__context*)+0x16f>
   19ece:	83 7d fc 08          	cmp    DWORD PTR [rbp-0x4],0x8
   19ed2:	74 18                	je     19eec <stbi__tga_test(stbi__context*)+0x154>
   19ed4:	83 7d fc 0f          	cmp    DWORD PTR [rbp-0x4],0xf
   19ed8:	74 12                	je     19eec <stbi__tga_test(stbi__context*)+0x154>
   19eda:	83 7d fc 10          	cmp    DWORD PTR [rbp-0x4],0x10
   19ede:	74 0c                	je     19eec <stbi__tga_test(stbi__context*)+0x154>
   19ee0:	83 7d fc 18          	cmp    DWORD PTR [rbp-0x4],0x18
   19ee4:	74 06                	je     19eec <stbi__tga_test(stbi__context*)+0x154>
   19ee6:	83 7d fc 20          	cmp    DWORD PTR [rbp-0x4],0x20
   19eea:	75 1e                	jne    19f0a <stbi__tga_test(stbi__context*)+0x172>
   19eec:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [rbp-0xc],0x1
   19ef3:	eb 16                	jmp    19f0b <stbi__tga_test(stbi__context*)+0x173>
   19ef5:	90                   	nop
   19ef6:	eb 13                	jmp    19f0b <stbi__tga_test(stbi__context*)+0x173>
   19ef8:	90                   	nop
   19ef9:	eb 10                	jmp    19f0b <stbi__tga_test(stbi__context*)+0x173>
   19efb:	90                   	nop
   19efc:	eb 0d                	jmp    19f0b <stbi__tga_test(stbi__context*)+0x173>
   19efe:	90                   	nop
   19eff:	eb 0a                	jmp    19f0b <stbi__tga_test(stbi__context*)+0x173>
   19f01:	90                   	nop
   19f02:	eb 07                	jmp    19f0b <stbi__tga_test(stbi__context*)+0x173>
   19f04:	90                   	nop
   19f05:	eb 04                	jmp    19f0b <stbi__tga_test(stbi__context*)+0x173>
   19f07:	90                   	nop
   19f08:	eb 01                	jmp    19f0b <stbi__tga_test(stbi__context*)+0x173>
   19f0a:	90                   	nop
   19f0b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19f0f:	48 89 c7             	mov    rdi,rax
   19f12:	e8 15 ac fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   19f17:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   19f1a:	c9                   	leave  
   19f1b:	c3                   	ret    

0000000000019f1c <stbi__tga_read_rgb16(stbi__context*, unsigned char*)>:
   19f1c:	55                   	push   rbp
   19f1d:	48 89 e5             	mov    rbp,rsp
   19f20:	48 83 ec 20          	sub    rsp,0x20
   19f24:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   19f28:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   19f2c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   19f30:	48 89 c7             	mov    rdi,rax
   19f33:	e8 32 c9 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   19f38:	66 89 45 f0          	mov    WORD PTR [rbp-0x10],ax
   19f3c:	66 c7 45 f2 1f 00    	mov    WORD PTR [rbp-0xe],0x1f
   19f42:	0f b7 45 f0          	movzx  eax,WORD PTR [rbp-0x10]
   19f46:	66 c1 e8 0a          	shr    ax,0xa
   19f4a:	66 23 45 f2          	and    ax,WORD PTR [rbp-0xe]
   19f4e:	0f b7 c0             	movzx  eax,ax
   19f51:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   19f54:	0f b7 45 f0          	movzx  eax,WORD PTR [rbp-0x10]
   19f58:	66 c1 e8 05          	shr    ax,0x5
   19f5c:	66 23 45 f2          	and    ax,WORD PTR [rbp-0xe]
   19f60:	0f b7 c0             	movzx  eax,ax
   19f63:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   19f66:	0f b7 45 f0          	movzx  eax,WORD PTR [rbp-0x10]
   19f6a:	66 23 45 f2          	and    ax,WORD PTR [rbp-0xe]
   19f6e:	0f b7 c0             	movzx  eax,ax
   19f71:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   19f74:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   19f77:	89 d0                	mov    eax,edx
   19f79:	c1 e0 08             	shl    eax,0x8
   19f7c:	29 d0                	sub    eax,edx
   19f7e:	48 63 d0             	movsxd rdx,eax
   19f81:	48 69 d2 43 08 21 84 	imul   rdx,rdx,0xffffffff84210843
   19f88:	48 c1 ea 20          	shr    rdx,0x20
   19f8c:	01 c2                	add    edx,eax
   19f8e:	c1 fa 04             	sar    edx,0x4
   19f91:	c1 f8 1f             	sar    eax,0x1f
   19f94:	89 c1                	mov    ecx,eax
   19f96:	89 d0                	mov    eax,edx
   19f98:	29 c8                	sub    eax,ecx
   19f9a:	89 c2                	mov    edx,eax
   19f9c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   19fa0:	88 10                	mov    BYTE PTR [rax],dl
   19fa2:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   19fa5:	89 d0                	mov    eax,edx
   19fa7:	c1 e0 08             	shl    eax,0x8
   19faa:	29 d0                	sub    eax,edx
   19fac:	48 63 d0             	movsxd rdx,eax
   19faf:	48 69 d2 43 08 21 84 	imul   rdx,rdx,0xffffffff84210843
   19fb6:	48 c1 ea 20          	shr    rdx,0x20
   19fba:	01 c2                	add    edx,eax
   19fbc:	c1 fa 04             	sar    edx,0x4
   19fbf:	c1 f8 1f             	sar    eax,0x1f
   19fc2:	29 c2                	sub    edx,eax
   19fc4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   19fc8:	48 83 c0 01          	add    rax,0x1
   19fcc:	88 10                	mov    BYTE PTR [rax],dl
   19fce:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   19fd1:	89 d0                	mov    eax,edx
   19fd3:	c1 e0 08             	shl    eax,0x8
   19fd6:	29 d0                	sub    eax,edx
   19fd8:	48 63 d0             	movsxd rdx,eax
   19fdb:	48 69 d2 43 08 21 84 	imul   rdx,rdx,0xffffffff84210843
   19fe2:	48 c1 ea 20          	shr    rdx,0x20
   19fe6:	01 c2                	add    edx,eax
   19fe8:	c1 fa 04             	sar    edx,0x4
   19feb:	c1 f8 1f             	sar    eax,0x1f
   19fee:	29 c2                	sub    edx,eax
   19ff0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   19ff4:	48 83 c0 02          	add    rax,0x2
   19ff8:	88 10                	mov    BYTE PTR [rax],dl
   19ffa:	90                   	nop
   19ffb:	c9                   	leave  
   19ffc:	c3                   	ret    

0000000000019ffd <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   19ffd:	55                   	push   rbp
   19ffe:	48 89 e5             	mov    rbp,rsp
   1a001:	48 81 ec d0 00 00 00 	sub    rsp,0xd0
   1a008:	48 89 bd 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdi
   1a00f:	48 89 b5 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rsi
   1a016:	48 89 95 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rdx
   1a01d:	48 89 8d 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],rcx
   1a024:	44 89 85 3c ff ff ff 	mov    DWORD PTR [rbp-0xc4],r8d
   1a02b:	4c 89 8d 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],r9
   1a032:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1a03b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1a03f:	31 c0                	xor    eax,eax
   1a041:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a048:	48 89 c7             	mov    rdi,rax
   1a04b:	e8 c1 c4 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1a050:	0f b6 c0             	movzx  eax,al
   1a053:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
   1a056:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a05d:	48 89 c7             	mov    rdi,rax
   1a060:	e8 ac c4 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1a065:	0f b6 c0             	movzx  eax,al
   1a068:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
   1a06b:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a072:	48 89 c7             	mov    rdi,rax
   1a075:	e8 97 c4 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1a07a:	0f b6 c0             	movzx  eax,al
   1a07d:	89 85 68 ff ff ff    	mov    DWORD PTR [rbp-0x98],eax
   1a083:	c7 85 6c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x94],0x0
   1a08d:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a094:	48 89 c7             	mov    rdi,rax
   1a097:	e8 ce c7 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1a09c:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
   1a09f:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a0a6:	48 89 c7             	mov    rdi,rax
   1a0a9:	e8 bc c7 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1a0ae:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
   1a0b1:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a0b8:	48 89 c7             	mov    rdi,rax
   1a0bb:	e8 51 c4 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1a0c0:	0f b6 c0             	movzx  eax,al
   1a0c3:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   1a0c6:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a0cd:	48 89 c7             	mov    rdi,rax
   1a0d0:	e8 95 c7 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1a0d5:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
   1a0d8:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a0df:	48 89 c7             	mov    rdi,rax
   1a0e2:	e8 83 c7 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1a0e7:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
   1a0ea:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a0f1:	48 89 c7             	mov    rdi,rax
   1a0f4:	e8 71 c7 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1a0f9:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
   1a0fc:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a103:	48 89 c7             	mov    rdi,rax
   1a106:	e8 5f c7 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1a10b:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
   1a10e:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a115:	48 89 c7             	mov    rdi,rax
   1a118:	e8 f4 c3 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1a11d:	0f b6 c0             	movzx  eax,al
   1a120:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
   1a123:	c7 85 64 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x9c],0x0
   1a12d:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a134:	48 89 c7             	mov    rdi,rax
   1a137:	e8 d5 c3 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1a13c:	0f b6 c0             	movzx  eax,al
   1a13f:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
   1a142:	48 c7 45 d0 00 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
   1a14a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   1a151:	c7 85 7c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x84],0x0
   1a15b:	c7 45 80 00 00 00 00 	mov    DWORD PTR [rbp-0x80],0x0
   1a162:	c7 45 84 01 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x1
   1a169:	83 bd 68 ff ff ff 07 	cmp    DWORD PTR [rbp-0x98],0x7
   1a170:	7e 11                	jle    1a183 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x186>
   1a172:	83 ad 68 ff ff ff 08 	sub    DWORD PTR [rbp-0x98],0x8
   1a179:	c7 85 6c ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x94],0x1
   1a183:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
   1a186:	83 e0 20             	and    eax,0x20
   1a189:	85 c0                	test   eax,eax
   1a18b:	0f 94 c0             	sete   al
   1a18e:	0f b6 c0             	movzx  eax,al
   1a191:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
   1a194:	83 7d 98 00          	cmp    DWORD PTR [rbp-0x68],0x0
   1a198:	74 1e                	je     1a1b8 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1bb>
   1a19a:	48 8d 95 64 ff ff ff 	lea    rdx,[rbp-0x9c]
   1a1a1:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1a1a4:	be 00 00 00 00       	mov    esi,0x0
   1a1a9:	89 c7                	mov    edi,eax
   1a1ab:	e8 df f8 ff ff       	call   19a8f <stbi__tga_get_comp(int, int, int*)>
   1a1b0:	89 85 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],eax
   1a1b6:	eb 26                	jmp    1a1de <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1e1>
   1a1b8:	83 bd 68 ff ff ff 03 	cmp    DWORD PTR [rbp-0x98],0x3
   1a1bf:	0f 94 c0             	sete   al
   1a1c2:	0f b6 c8             	movzx  ecx,al
   1a1c5:	48 8d 95 64 ff ff ff 	lea    rdx,[rbp-0x9c]
   1a1cc:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   1a1cf:	89 ce                	mov    esi,ecx
   1a1d1:	89 c7                	mov    edi,eax
   1a1d3:	e8 b7 f8 ff ff       	call   19a8f <stbi__tga_get_comp(int, int, int*)>
   1a1d8:	89 85 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],eax
   1a1de:	83 bd 70 ff ff ff 00 	cmp    DWORD PTR [rbp-0x90],0x0
   1a1e5:	75 19                	jne    1a200 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x203>
   1a1e7:	48 8d 05 9a 0e 02 00 	lea    rax,[rip+0x20e9a]        # 3b088 <stbi__depth_scale_table+0x490>
   1a1ee:	48 89 c7             	mov    rdi,rax
   1a1f1:	e8 7c a9 fe ff       	call   4b72 <stbi__err(char const*)>
   1a1f6:	b8 00 00 00 00       	mov    eax,0x0
   1a1fb:	e9 7b 06 00 00       	jmp    1a87b <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x87e>
   1a200:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   1a207:	8b 55 b0             	mov    edx,DWORD PTR [rbp-0x50]
   1a20a:	89 10                	mov    DWORD PTR [rax],edx
   1a20c:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
   1a213:	8b 55 b4             	mov    edx,DWORD PTR [rbp-0x4c]
   1a216:	89 10                	mov    DWORD PTR [rax],edx
   1a218:	48 83 bd 40 ff ff ff 00 	cmp    QWORD PTR [rbp-0xc0],0x0
   1a220:	74 0f                	je     1a231 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x234>
   1a222:	48 8b 85 40 ff ff ff 	mov    rax,QWORD PTR [rbp-0xc0]
   1a229:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [rbp-0x90]
   1a22f:	89 10                	mov    DWORD PTR [rax],edx
   1a231:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [rbp-0x90]
   1a237:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1a23a:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1a23d:	b9 00 00 00 00       	mov    ecx,0x0
   1a242:	89 c7                	mov    edi,eax
   1a244:	e8 13 aa fe ff       	call   4c5c <stbi__mad3sizes_valid(int, int, int, int)>
   1a249:	85 c0                	test   eax,eax
   1a24b:	0f 94 c0             	sete   al
   1a24e:	84 c0                	test   al,al
   1a250:	74 19                	je     1a26b <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x26e>
   1a252:	48 8d 05 f3 03 02 00 	lea    rax,[rip+0x203f3]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   1a259:	48 89 c7             	mov    rdi,rax
   1a25c:	e8 11 a9 fe ff       	call   4b72 <stbi__err(char const*)>
   1a261:	b8 00 00 00 00       	mov    eax,0x0
   1a266:	e9 10 06 00 00       	jmp    1a87b <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x87e>
   1a26b:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [rbp-0x90]
   1a271:	8b 75 b4             	mov    esi,DWORD PTR [rbp-0x4c]
   1a274:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1a277:	b9 00 00 00 00       	mov    ecx,0x0
   1a27c:	89 c7                	mov    edi,eax
   1a27e:	e8 1e ab fe ff       	call   4da1 <stbi__malloc_mad3(int, int, int, int)>
   1a283:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1a287:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   1a28c:	75 19                	jne    1a2a7 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x2aa>
   1a28e:	48 8d 05 9e fd 01 00 	lea    rax,[rip+0x1fd9e]        # 3a033 <_IO_stdin_used+0x33>
   1a295:	48 89 c7             	mov    rdi,rax
   1a298:	e8 d5 a8 fe ff       	call   4b72 <stbi__err(char const*)>
   1a29d:	b8 00 00 00 00       	mov    eax,0x0
   1a2a2:	e9 d4 05 00 00       	jmp    1a87b <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x87e>
   1a2a7:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
   1a2aa:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a2b1:	89 d6                	mov    esi,edx
   1a2b3:	48 89 c7             	mov    rdi,rax
   1a2b6:	e8 4a c3 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1a2bb:	83 7d 98 00          	cmp    DWORD PTR [rbp-0x68],0x0
   1a2bf:	0f 85 95 00 00 00    	jne    1a35a <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x35d>
   1a2c5:	83 bd 6c ff ff ff 00 	cmp    DWORD PTR [rbp-0x94],0x0
   1a2cc:	0f 85 88 00 00 00    	jne    1a35a <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x35d>
   1a2d2:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1a2d8:	85 c0                	test   eax,eax
   1a2da:	75 7e                	jne    1a35a <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x35d>
   1a2dc:	c7 85 74 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x0
   1a2e6:	eb 62                	jmp    1a34a <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x34d>
   1a2e8:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1a2ec:	74 0e                	je     1a2fc <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x2ff>
   1a2ee:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   1a2f1:	2b 85 74 ff ff ff    	sub    eax,DWORD PTR [rbp-0x8c]
   1a2f7:	83 e8 01             	sub    eax,0x1
   1a2fa:	eb 06                	jmp    1a302 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x305>
   1a2fc:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1a302:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
   1a305:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
   1a308:	0f af 45 b0          	imul   eax,DWORD PTR [rbp-0x50]
   1a30c:	0f af 85 70 ff ff ff 	imul   eax,DWORD PTR [rbp-0x90]
   1a313:	48 63 d0             	movsxd rdx,eax
   1a316:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a31a:	48 01 d0             	add    rax,rdx
   1a31d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   1a321:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1a324:	0f af 85 70 ff ff ff 	imul   eax,DWORD PTR [rbp-0x90]
   1a32b:	89 c2                	mov    edx,eax
   1a32d:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   1a331:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a338:	48 89 ce             	mov    rsi,rcx
   1a33b:	48 89 c7             	mov    rdi,rax
   1a33e:	e8 7d c3 fe ff       	call   66c0 <stbi__getn(stbi__context*, unsigned char*, int)>
   1a343:	83 85 74 ff ff ff 01 	add    DWORD PTR [rbp-0x8c],0x1
   1a34a:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1a350:	3b 45 b4             	cmp    eax,DWORD PTR [rbp-0x4c]
   1a353:	7c 93                	jl     1a2e8 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x2eb>
   1a355:	e9 4d 04 00 00       	jmp    1a7a7 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x7aa>
   1a35a:	83 7d 98 00          	cmp    DWORD PTR [rbp-0x68],0x0
   1a35e:	0f 84 3c 01 00 00    	je     1a4a0 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x4a3>
   1a364:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
   1a367:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a36e:	89 d6                	mov    esi,edx
   1a370:	48 89 c7             	mov    rdi,rax
   1a373:	e8 8d c2 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1a378:	8b 8d 70 ff ff ff    	mov    ecx,DWORD PTR [rbp-0x90]
   1a37e:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1a381:	ba 00 00 00 00       	mov    edx,0x0
   1a386:	89 ce                	mov    esi,ecx
   1a388:	89 c7                	mov    edi,eax
   1a38a:	e8 c4 a9 fe ff       	call   4d53 <stbi__malloc_mad2(int, int, int)>
   1a38f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   1a393:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   1a398:	75 25                	jne    1a3bf <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x3c2>
   1a39a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a39e:	48 89 c7             	mov    rdi,rax
   1a3a1:	e8 8a a1 fe ff       	call   4530 <free@plt>
   1a3a6:	48 8d 05 86 fc 01 00 	lea    rax,[rip+0x1fc86]        # 3a033 <_IO_stdin_used+0x33>
   1a3ad:	48 89 c7             	mov    rdi,rax
   1a3b0:	e8 bd a7 fe ff       	call   4b72 <stbi__err(char const*)>
   1a3b5:	b8 00 00 00 00       	mov    eax,0x0
   1a3ba:	e9 bc 04 00 00       	jmp    1a87b <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x87e>
   1a3bf:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1a3c5:	85 c0                	test   eax,eax
   1a3c7:	74 7b                	je     1a444 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x447>
   1a3c9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1a3cd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   1a3d1:	83 bd 70 ff ff ff 03 	cmp    DWORD PTR [rbp-0x90],0x3
   1a3d8:	74 28                	je     1a402 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x405>
   1a3da:	48 8d 05 b7 0c 02 00 	lea    rax,[rip+0x20cb7]        # 3b098 <stbi__depth_scale_table+0x4a0>
   1a3e1:	48 89 c1             	mov    rcx,rax
   1a3e4:	ba 3f 16 00 00       	mov    edx,0x163f
   1a3e9:	48 8d 05 a8 fc 01 00 	lea    rax,[rip+0x1fca8]        # 3a098 <_IO_stdin_used+0x98>
   1a3f0:	48 89 c6             	mov    rsi,rax
   1a3f3:	48 8d 05 ee 0c 02 00 	lea    rax,[rip+0x20cee]        # 3b0e8 <stbi__depth_scale_table+0x4f0>
   1a3fa:	48 89 c7             	mov    rdi,rax
   1a3fd:	e8 7e 9e fe ff       	call   4280 <__assert_fail@plt>
   1a402:	c7 85 74 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x0
   1a40c:	eb 29                	jmp    1a437 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x43a>
   1a40e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   1a412:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a419:	48 89 d6             	mov    rsi,rdx
   1a41c:	48 89 c7             	mov    rdi,rax
   1a41f:	e8 f8 fa ff ff       	call   19f1c <stbi__tga_read_rgb16(stbi__context*, unsigned char*)>
   1a424:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   1a42a:	48 98                	cdqe   
   1a42c:	48 01 45 d8          	add    QWORD PTR [rbp-0x28],rax
   1a430:	83 85 74 ff ff ff 01 	add    DWORD PTR [rbp-0x8c],0x1
   1a437:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1a43d:	3b 45 a0             	cmp    eax,DWORD PTR [rbp-0x60]
   1a440:	7c cc                	jl     1a40e <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x411>
   1a442:	eb 5c                	jmp    1a4a0 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x4a3>
   1a444:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1a447:	0f af 85 70 ff ff ff 	imul   eax,DWORD PTR [rbp-0x90]
   1a44e:	89 c2                	mov    edx,eax
   1a450:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   1a454:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a45b:	48 89 ce             	mov    rsi,rcx
   1a45e:	48 89 c7             	mov    rdi,rax
   1a461:	e8 5a c2 fe ff       	call   66c0 <stbi__getn(stbi__context*, unsigned char*, int)>
   1a466:	85 c0                	test   eax,eax
   1a468:	0f 94 c0             	sete   al
   1a46b:	84 c0                	test   al,al
   1a46d:	74 31                	je     1a4a0 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x4a3>
   1a46f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a473:	48 89 c7             	mov    rdi,rax
   1a476:	e8 b5 a0 fe ff       	call   4530 <free@plt>
   1a47b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1a47f:	48 89 c7             	mov    rdi,rax
   1a482:	e8 a9 a0 fe ff       	call   4530 <free@plt>
   1a487:	48 8d 05 6f 0c 02 00 	lea    rax,[rip+0x20c6f]        # 3b0fd <stbi__depth_scale_table+0x505>
   1a48e:	48 89 c7             	mov    rdi,rax
   1a491:	e8 dc a6 fe ff       	call   4b72 <stbi__err(char const*)>
   1a496:	b8 00 00 00 00       	mov    eax,0x0
   1a49b:	e9 db 03 00 00       	jmp    1a87b <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x87e>
   1a4a0:	c7 85 74 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x0
   1a4aa:	e9 fa 01 00 00       	jmp    1a6a9 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x6ac>
   1a4af:	83 bd 6c ff ff ff 00 	cmp    DWORD PTR [rbp-0x94],0x0
   1a4b6:	74 4e                	je     1a506 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x509>
   1a4b8:	83 bd 7c ff ff ff 00 	cmp    DWORD PTR [rbp-0x84],0x0
   1a4bf:	75 36                	jne    1a4f7 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x4fa>
   1a4c1:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a4c8:	48 89 c7             	mov    rdi,rax
   1a4cb:	e8 41 c0 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1a4d0:	0f b6 c0             	movzx  eax,al
   1a4d3:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
   1a4d6:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   1a4d9:	83 e0 7f             	and    eax,0x7f
   1a4dc:	83 c0 01             	add    eax,0x1
   1a4df:	89 85 7c ff ff ff    	mov    DWORD PTR [rbp-0x84],eax
   1a4e5:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   1a4e8:	c1 f8 07             	sar    eax,0x7
   1a4eb:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
   1a4ee:	c7 45 84 01 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x1
   1a4f5:	eb 16                	jmp    1a50d <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x510>
   1a4f7:	83 7d 80 00          	cmp    DWORD PTR [rbp-0x80],0x0
   1a4fb:	75 10                	jne    1a50d <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x510>
   1a4fd:	c7 45 84 01 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x1
   1a504:	eb 07                	jmp    1a50d <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x510>
   1a506:	c7 45 84 01 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x1
   1a50d:	83 7d 84 00          	cmp    DWORD PTR [rbp-0x7c],0x0
   1a511:	0f 84 33 01 00 00    	je     1a64a <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x64d>
   1a517:	83 7d 98 00          	cmp    DWORD PTR [rbp-0x68],0x0
   1a51b:	0f 84 92 00 00 00    	je     1a5b3 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5b6>
   1a521:	83 7d b8 08          	cmp    DWORD PTR [rbp-0x48],0x8
   1a525:	75 14                	jne    1a53b <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x53e>
   1a527:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a52e:	48 89 c7             	mov    rdi,rax
   1a531:	e8 db bf fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1a536:	0f b6 c0             	movzx  eax,al
   1a539:	eb 0f                	jmp    1a54a <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x54d>
   1a53b:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a542:	48 89 c7             	mov    rdi,rax
   1a545:	e8 20 c3 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1a54a:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   1a54d:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1a550:	3b 45 a0             	cmp    eax,DWORD PTR [rbp-0x60]
   1a553:	7c 07                	jl     1a55c <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x55f>
   1a555:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   1a55c:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1a55f:	0f af 85 70 ff ff ff 	imul   eax,DWORD PTR [rbp-0x90]
   1a566:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   1a569:	c7 85 78 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x88],0x0
   1a573:	eb 2b                	jmp    1a5a0 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5a3>
   1a575:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
   1a578:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a57e:	01 d0                	add    eax,edx
   1a580:	48 63 d0             	movsxd rdx,eax
   1a583:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1a587:	48 01 d0             	add    rax,rdx
   1a58a:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   1a58d:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a593:	48 98                	cdqe   
   1a595:	88 54 05 f4          	mov    BYTE PTR [rbp+rax*1-0xc],dl
   1a599:	83 85 78 ff ff ff 01 	add    DWORD PTR [rbp-0x88],0x1
   1a5a0:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a5a6:	3b 85 70 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x90]
   1a5ac:	7c c7                	jl     1a575 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x578>
   1a5ae:	e9 90 00 00 00       	jmp    1a643 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x646>
   1a5b3:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1a5b9:	85 c0                	test   eax,eax
   1a5bb:	74 49                	je     1a606 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x609>
   1a5bd:	83 bd 70 ff ff ff 03 	cmp    DWORD PTR [rbp-0x90],0x3
   1a5c4:	74 28                	je     1a5ee <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5f1>
   1a5c6:	48 8d 05 cb 0a 02 00 	lea    rax,[rip+0x20acb]        # 3b098 <stbi__depth_scale_table+0x4a0>
   1a5cd:	48 89 c1             	mov    rcx,rax
   1a5d0:	ba 70 16 00 00       	mov    edx,0x1670
   1a5d5:	48 8d 05 bc fa 01 00 	lea    rax,[rip+0x1fabc]        # 3a098 <_IO_stdin_used+0x98>
   1a5dc:	48 89 c6             	mov    rsi,rax
   1a5df:	48 8d 05 02 0b 02 00 	lea    rax,[rip+0x20b02]        # 3b0e8 <stbi__depth_scale_table+0x4f0>
   1a5e6:	48 89 c7             	mov    rdi,rax
   1a5e9:	e8 92 9c fe ff       	call   4280 <__assert_fail@plt>
   1a5ee:	48 8d 55 f4          	lea    rdx,[rbp-0xc]
   1a5f2:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a5f9:	48 89 d6             	mov    rsi,rdx
   1a5fc:	48 89 c7             	mov    rdi,rax
   1a5ff:	e8 18 f9 ff ff       	call   19f1c <stbi__tga_read_rgb16(stbi__context*, unsigned char*)>
   1a604:	eb 3d                	jmp    1a643 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x646>
   1a606:	c7 85 78 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x88],0x0
   1a610:	eb 23                	jmp    1a635 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x638>
   1a612:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   1a619:	48 89 c7             	mov    rdi,rax
   1a61c:	e8 f0 be fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1a621:	8b 95 78 ff ff ff    	mov    edx,DWORD PTR [rbp-0x88]
   1a627:	48 63 d2             	movsxd rdx,edx
   1a62a:	88 44 15 f4          	mov    BYTE PTR [rbp+rdx*1-0xc],al
   1a62e:	83 85 78 ff ff ff 01 	add    DWORD PTR [rbp-0x88],0x1
   1a635:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a63b:	3b 85 70 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x90]
   1a641:	7c cf                	jl     1a612 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x615>
   1a643:	c7 45 84 00 00 00 00 	mov    DWORD PTR [rbp-0x7c],0x0
   1a64a:	c7 85 78 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x88],0x0
   1a654:	eb 37                	jmp    1a68d <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x690>
   1a656:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1a65c:	0f af 85 70 ff ff ff 	imul   eax,DWORD PTR [rbp-0x90]
   1a663:	89 c2                	mov    edx,eax
   1a665:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a66b:	01 d0                	add    eax,edx
   1a66d:	48 63 d0             	movsxd rdx,eax
   1a670:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a674:	48 01 c2             	add    rdx,rax
   1a677:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a67d:	48 98                	cdqe   
   1a67f:	0f b6 44 05 f4       	movzx  eax,BYTE PTR [rbp+rax*1-0xc]
   1a684:	88 02                	mov    BYTE PTR [rdx],al
   1a686:	83 85 78 ff ff ff 01 	add    DWORD PTR [rbp-0x88],0x1
   1a68d:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a693:	3b 85 70 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x90]
   1a699:	7c bb                	jl     1a656 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x659>
   1a69b:	83 ad 7c ff ff ff 01 	sub    DWORD PTR [rbp-0x84],0x1
   1a6a2:	83 85 74 ff ff ff 01 	add    DWORD PTR [rbp-0x8c],0x1
   1a6a9:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1a6ac:	0f af 45 b4          	imul   eax,DWORD PTR [rbp-0x4c]
   1a6b0:	39 85 74 ff ff ff    	cmp    DWORD PTR [rbp-0x8c],eax
   1a6b6:	0f 8c f3 fd ff ff    	jl     1a4af <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x4b2>
   1a6bc:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1a6c0:	0f 84 ce 00 00 00    	je     1a794 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x797>
   1a6c6:	c7 85 78 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x88],0x0
   1a6d0:	e9 ae 00 00 00       	jmp    1a783 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x786>
   1a6d5:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a6db:	0f af 45 b0          	imul   eax,DWORD PTR [rbp-0x50]
   1a6df:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [rbp-0x90]
   1a6e5:	0f af c2             	imul   eax,edx
   1a6e8:	89 45 8c             	mov    DWORD PTR [rbp-0x74],eax
   1a6eb:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   1a6ee:	83 e8 01             	sub    eax,0x1
   1a6f1:	2b 85 78 ff ff ff    	sub    eax,DWORD PTR [rbp-0x88]
   1a6f7:	0f af 45 b0          	imul   eax,DWORD PTR [rbp-0x50]
   1a6fb:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [rbp-0x90]
   1a701:	0f af c2             	imul   eax,edx
   1a704:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
   1a707:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1a70a:	0f af 85 70 ff ff ff 	imul   eax,DWORD PTR [rbp-0x90]
   1a711:	89 85 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],eax
   1a717:	eb 5a                	jmp    1a773 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x776>
   1a719:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1a71c:	48 63 d0             	movsxd rdx,eax
   1a71f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a723:	48 01 d0             	add    rax,rdx
   1a726:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1a729:	88 85 62 ff ff ff    	mov    BYTE PTR [rbp-0x9e],al
   1a72f:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   1a732:	48 63 d0             	movsxd rdx,eax
   1a735:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a739:	48 01 d0             	add    rax,rdx
   1a73c:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
   1a73f:	48 63 ca             	movsxd rcx,edx
   1a742:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   1a746:	48 01 ca             	add    rdx,rcx
   1a749:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1a74c:	88 02                	mov    BYTE PTR [rdx],al
   1a74e:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   1a751:	48 63 d0             	movsxd rdx,eax
   1a754:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a758:	48 01 c2             	add    rdx,rax
   1a75b:	0f b6 85 62 ff ff ff 	movzx  eax,BYTE PTR [rbp-0x9e]
   1a762:	88 02                	mov    BYTE PTR [rdx],al
   1a764:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1a768:	83 45 90 01          	add    DWORD PTR [rbp-0x70],0x1
   1a76c:	83 ad 74 ff ff ff 01 	sub    DWORD PTR [rbp-0x8c],0x1
   1a773:	83 bd 74 ff ff ff 00 	cmp    DWORD PTR [rbp-0x8c],0x0
   1a77a:	7f 9d                	jg     1a719 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x71c>
   1a77c:	83 85 78 ff ff ff 01 	add    DWORD PTR [rbp-0x88],0x1
   1a783:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [rbp-0x88]
   1a789:	01 c0                	add    eax,eax
   1a78b:	39 45 b4             	cmp    DWORD PTR [rbp-0x4c],eax
   1a78e:	0f 8f 41 ff ff ff    	jg     1a6d5 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x6d8>
   1a794:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   1a799:	74 0c                	je     1a7a7 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x7aa>
   1a79b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1a79f:	48 89 c7             	mov    rdi,rax
   1a7a2:	e8 89 9d fe ff       	call   4530 <free@plt>
   1a7a7:	83 bd 70 ff ff ff 02 	cmp    DWORD PTR [rbp-0x90],0x2
   1a7ae:	7e 6c                	jle    1a81c <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x81f>
   1a7b0:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [rbp-0x9c]
   1a7b6:	85 c0                	test   eax,eax
   1a7b8:	75 62                	jne    1a81c <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x81f>
   1a7ba:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a7be:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   1a7c2:	c7 85 74 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x8c],0x0
   1a7cc:	eb 3f                	jmp    1a80d <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x810>
   1a7ce:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1a7d2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1a7d5:	88 85 63 ff ff ff    	mov    BYTE PTR [rbp-0x9d],al
   1a7db:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1a7df:	0f b6 50 02          	movzx  edx,BYTE PTR [rax+0x2]
   1a7e3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1a7e7:	88 10                	mov    BYTE PTR [rax],dl
   1a7e9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1a7ed:	48 8d 50 02          	lea    rdx,[rax+0x2]
   1a7f1:	0f b6 85 63 ff ff ff 	movzx  eax,BYTE PTR [rbp-0x9d]
   1a7f8:	88 02                	mov    BYTE PTR [rdx],al
   1a7fa:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [rbp-0x90]
   1a800:	48 98                	cdqe   
   1a802:	48 01 45 e0          	add    QWORD PTR [rbp-0x20],rax
   1a806:	83 85 74 ff ff ff 01 	add    DWORD PTR [rbp-0x8c],0x1
   1a80d:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1a810:	0f af 45 b4          	imul   eax,DWORD PTR [rbp-0x4c]
   1a814:	39 85 74 ff ff ff    	cmp    DWORD PTR [rbp-0x8c],eax
   1a81a:	7c b2                	jl     1a7ce <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x7d1>
   1a81c:	83 bd 3c ff ff ff 00 	cmp    DWORD PTR [rbp-0xc4],0x0
   1a823:	74 33                	je     1a858 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x85b>
   1a825:	8b 85 3c ff ff ff    	mov    eax,DWORD PTR [rbp-0xc4]
   1a82b:	3b 85 70 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x90]
   1a831:	74 25                	je     1a858 <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x85b>
   1a833:	8b 7d b4             	mov    edi,DWORD PTR [rbp-0x4c]
   1a836:	8b 4d b0             	mov    ecx,DWORD PTR [rbp-0x50]
   1a839:	8b 95 3c ff ff ff    	mov    edx,DWORD PTR [rbp-0xc4]
   1a83f:	8b b5 70 ff ff ff    	mov    esi,DWORD PTR [rbp-0x90]
   1a845:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a849:	41 89 f8             	mov    r8d,edi
   1a84c:	48 89 c7             	mov    rdi,rax
   1a84f:	e8 ad c0 fe ff       	call   6901 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   1a854:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1a858:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
   1a85f:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   1a862:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
   1a865:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
   1a868:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   1a86b:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   1a86e:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
   1a871:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1a874:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
   1a877:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1a87b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1a87f:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1a888:	74 05                	je     1a88f <stbi__tga_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x892>
   1a88a:	e8 51 9c fe ff       	call   44e0 <__stack_chk_fail@plt>
   1a88f:	c9                   	leave  
   1a890:	c3                   	ret    

000000000001a891 <stbi__psd_test(stbi__context*)>:
   1a891:	55                   	push   rbp
   1a892:	48 89 e5             	mov    rbp,rsp
   1a895:	48 83 ec 20          	sub    rsp,0x20
   1a899:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1a89d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1a8a1:	48 89 c7             	mov    rdi,rax
   1a8a4:	e8 89 bf fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1a8a9:	3d 53 50 42 38       	cmp    eax,0x38425053
   1a8ae:	0f 94 c0             	sete   al
   1a8b1:	0f b6 c0             	movzx  eax,al
   1a8b4:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1a8b7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1a8bb:	48 89 c7             	mov    rdi,rax
   1a8be:	e8 69 a2 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1a8c3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1a8c6:	c9                   	leave  
   1a8c7:	c3                   	ret    

000000000001a8c8 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)>:
   1a8c8:	55                   	push   rbp
   1a8c9:	48 89 e5             	mov    rbp,rsp
   1a8cc:	48 83 ec 30          	sub    rsp,0x30
   1a8d0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1a8d4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1a8d8:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
   1a8db:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   1a8e2:	e9 b9 00 00 00       	jmp    1a9a0 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0xd8>
   1a8e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1a8eb:	48 89 c7             	mov    rdi,rax
   1a8ee:	e8 1e bc fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1a8f3:	0f b6 c0             	movzx  eax,al
   1a8f6:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   1a8f9:	81 7d f8 80 00 00 00 	cmp    DWORD PTR [rbp-0x8],0x80
   1a900:	0f 84 9a 00 00 00    	je     1a9a0 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0xd8>
   1a906:	83 7d f8 7f          	cmp    DWORD PTR [rbp-0x8],0x7f
   1a90a:	7f 41                	jg     1a94d <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0x85>
   1a90c:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
   1a910:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   1a913:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
   1a916:	7e 0a                	jle    1a922 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0x5a>
   1a918:	b8 00 00 00 00       	mov    eax,0x0
   1a91d:	e9 9b 00 00 00       	jmp    1a9bd <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0xf5>
   1a922:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   1a925:	01 45 f4             	add    DWORD PTR [rbp-0xc],eax
   1a928:	eb 1b                	jmp    1a945 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0x7d>
   1a92a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1a92e:	48 89 c7             	mov    rdi,rax
   1a931:	e8 db bb fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1a936:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1a93a:	88 02                	mov    BYTE PTR [rdx],al
   1a93c:	48 83 45 e0 04       	add    QWORD PTR [rbp-0x20],0x4
   1a941:	83 6d f8 01          	sub    DWORD PTR [rbp-0x8],0x1
   1a945:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   1a949:	75 df                	jne    1a92a <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0x62>
   1a94b:	eb 53                	jmp    1a9a0 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0xd8>
   1a94d:	81 7d f8 80 00 00 00 	cmp    DWORD PTR [rbp-0x8],0x80
   1a954:	7e 4a                	jle    1a9a0 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0xd8>
   1a956:	b8 01 01 00 00       	mov    eax,0x101
   1a95b:	2b 45 f8             	sub    eax,DWORD PTR [rbp-0x8]
   1a95e:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   1a961:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   1a964:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
   1a967:	7e 07                	jle    1a970 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0xa8>
   1a969:	b8 00 00 00 00       	mov    eax,0x0
   1a96e:	eb 4d                	jmp    1a9bd <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0xf5>
   1a970:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1a974:	48 89 c7             	mov    rdi,rax
   1a977:	e8 95 bb fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1a97c:	88 45 f3             	mov    BYTE PTR [rbp-0xd],al
   1a97f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   1a982:	01 45 f4             	add    DWORD PTR [rbp-0xc],eax
   1a985:	eb 13                	jmp    1a99a <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0xd2>
   1a987:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1a98b:	0f b6 55 f3          	movzx  edx,BYTE PTR [rbp-0xd]
   1a98f:	88 10                	mov    BYTE PTR [rax],dl
   1a991:	48 83 45 e0 04       	add    QWORD PTR [rbp-0x20],0x4
   1a996:	83 6d f8 01          	sub    DWORD PTR [rbp-0x8],0x1
   1a99a:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   1a99e:	75 e7                	jne    1a987 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0xbf>
   1a9a0:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   1a9a3:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
   1a9a6:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1a9a9:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   1a9ad:	0f 9f c0             	setg   al
   1a9b0:	84 c0                	test   al,al
   1a9b2:	0f 85 2f ff ff ff    	jne    1a8e7 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)+0x1f>
   1a9b8:	b8 01 00 00 00       	mov    eax,0x1
   1a9bd:	c9                   	leave  
   1a9be:	c3                   	ret    

000000000001a9bf <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)>:
   1a9bf:	55                   	push   rbp
   1a9c0:	48 89 e5             	mov    rbp,rsp
   1a9c3:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
   1a9ca:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
   1a9d1:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
   1a9d8:	48 89 95 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdx
   1a9df:	48 89 8d 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rcx
   1a9e6:	44 89 85 5c ff ff ff 	mov    DWORD PTR [rbp-0xa4],r8d
   1a9ed:	4c 89 8d 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],r9
   1a9f4:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1a9fb:	48 89 c7             	mov    rdi,rax
   1a9fe:	e8 2f be fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1aa03:	3d 53 50 42 38       	cmp    eax,0x38425053
   1aa08:	0f 95 c0             	setne  al
   1aa0b:	84 c0                	test   al,al
   1aa0d:	74 19                	je     1aa28 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x69>
   1aa0f:	48 8d 05 f3 06 02 00 	lea    rax,[rip+0x206f3]        # 3b109 <stbi__depth_scale_table+0x511>
   1aa16:	48 89 c7             	mov    rdi,rax
   1aa19:	e8 54 a1 fe ff       	call   4b72 <stbi__err(char const*)>
   1aa1e:	b8 00 00 00 00       	mov    eax,0x0
   1aa23:	e9 1b 08 00 00       	jmp    1b243 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x884>
   1aa28:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1aa2f:	48 89 c7             	mov    rdi,rax
   1aa32:	e8 bd bd fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1aa37:	83 f8 01             	cmp    eax,0x1
   1aa3a:	0f 95 c0             	setne  al
   1aa3d:	84 c0                	test   al,al
   1aa3f:	74 19                	je     1aa5a <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x9b>
   1aa41:	48 8d 05 c9 06 02 00 	lea    rax,[rip+0x206c9]        # 3b111 <stbi__depth_scale_table+0x519>
   1aa48:	48 89 c7             	mov    rdi,rax
   1aa4b:	e8 22 a1 fe ff       	call   4b72 <stbi__err(char const*)>
   1aa50:	b8 00 00 00 00       	mov    eax,0x0
   1aa55:	e9 e9 07 00 00       	jmp    1b243 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x884>
   1aa5a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1aa61:	be 06 00 00 00       	mov    esi,0x6
   1aa66:	48 89 c7             	mov    rdi,rax
   1aa69:	e8 97 bb fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1aa6e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1aa75:	48 89 c7             	mov    rdi,rax
   1aa78:	e8 77 bd fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1aa7d:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
   1aa80:	83 7d 90 00          	cmp    DWORD PTR [rbp-0x70],0x0
   1aa84:	78 06                	js     1aa8c <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0xcd>
   1aa86:	83 7d 90 10          	cmp    DWORD PTR [rbp-0x70],0x10
   1aa8a:	7e 19                	jle    1aaa5 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0xe6>
   1aa8c:	48 8d 05 8c 06 02 00 	lea    rax,[rip+0x2068c]        # 3b11f <stbi__depth_scale_table+0x527>
   1aa93:	48 89 c7             	mov    rdi,rax
   1aa96:	e8 d7 a0 fe ff       	call   4b72 <stbi__err(char const*)>
   1aa9b:	b8 00 00 00 00       	mov    eax,0x0
   1aaa0:	e9 9e 07 00 00       	jmp    1b243 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x884>
   1aaa5:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1aaac:	48 89 c7             	mov    rdi,rax
   1aaaf:	e8 7e bd fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1aab4:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
   1aab7:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1aabe:	48 89 c7             	mov    rdi,rax
   1aac1:	e8 6c bd fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1aac6:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
   1aac9:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1aad0:	48 89 c7             	mov    rdi,rax
   1aad3:	e8 1c bd fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1aad8:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
   1aadb:	83 7d 9c 08          	cmp    DWORD PTR [rbp-0x64],0x8
   1aadf:	74 1f                	je     1ab00 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x141>
   1aae1:	83 7d 9c 10          	cmp    DWORD PTR [rbp-0x64],0x10
   1aae5:	74 19                	je     1ab00 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x141>
   1aae7:	48 8d 05 45 06 02 00 	lea    rax,[rip+0x20645]        # 3b133 <stbi__depth_scale_table+0x53b>
   1aaee:	48 89 c7             	mov    rdi,rax
   1aaf1:	e8 7c a0 fe ff       	call   4b72 <stbi__err(char const*)>
   1aaf6:	b8 00 00 00 00       	mov    eax,0x0
   1aafb:	e9 43 07 00 00       	jmp    1b243 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x884>
   1ab00:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1ab07:	48 89 c7             	mov    rdi,rax
   1ab0a:	e8 e5 bc fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1ab0f:	83 f8 03             	cmp    eax,0x3
   1ab12:	0f 95 c0             	setne  al
   1ab15:	84 c0                	test   al,al
   1ab17:	74 19                	je     1ab32 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x173>
   1ab19:	48 8d 05 29 06 02 00 	lea    rax,[rip+0x20629]        # 3b149 <stbi__depth_scale_table+0x551>
   1ab20:	48 89 c7             	mov    rdi,rax
   1ab23:	e8 4a a0 fe ff       	call   4b72 <stbi__err(char const*)>
   1ab28:	b8 00 00 00 00       	mov    eax,0x0
   1ab2d:	e9 11 07 00 00       	jmp    1b243 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x884>
   1ab32:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1ab39:	48 89 c7             	mov    rdi,rax
   1ab3c:	e8 f1 bc fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1ab41:	89 c2                	mov    edx,eax
   1ab43:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1ab4a:	89 d6                	mov    esi,edx
   1ab4c:	48 89 c7             	mov    rdi,rax
   1ab4f:	e8 b1 ba fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1ab54:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1ab5b:	48 89 c7             	mov    rdi,rax
   1ab5e:	e8 cf bc fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1ab63:	89 c2                	mov    edx,eax
   1ab65:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1ab6c:	89 d6                	mov    esi,edx
   1ab6e:	48 89 c7             	mov    rdi,rax
   1ab71:	e8 8f ba fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1ab76:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1ab7d:	48 89 c7             	mov    rdi,rax
   1ab80:	e8 ad bc fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1ab85:	89 c2                	mov    edx,eax
   1ab87:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1ab8e:	89 d6                	mov    esi,edx
   1ab90:	48 89 c7             	mov    rdi,rax
   1ab93:	e8 6d ba fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1ab98:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1ab9f:	48 89 c7             	mov    rdi,rax
   1aba2:	e8 4d bc fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1aba7:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
   1abaa:	83 7d a0 01          	cmp    DWORD PTR [rbp-0x60],0x1
   1abae:	7e 19                	jle    1abc9 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x20a>
   1abb0:	48 8d 05 c7 fe 01 00 	lea    rax,[rip+0x1fec7]        # 3aa7e <stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag+0xce>
   1abb7:	48 89 c7             	mov    rdi,rax
   1abba:	e8 b3 9f fe ff       	call   4b72 <stbi__err(char const*)>
   1abbf:	b8 00 00 00 00       	mov    eax,0x0
   1abc4:	e9 7a 06 00 00       	jmp    1b243 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x884>
   1abc9:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
   1abcc:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1abcf:	b9 00 00 00 00       	mov    ecx,0x0
   1abd4:	89 c6                	mov    esi,eax
   1abd6:	bf 04 00 00 00       	mov    edi,0x4
   1abdb:	e8 7c a0 fe ff       	call   4c5c <stbi__mad3sizes_valid(int, int, int, int)>
   1abe0:	85 c0                	test   eax,eax
   1abe2:	0f 94 c0             	sete   al
   1abe5:	84 c0                	test   al,al
   1abe7:	74 19                	je     1ac02 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x243>
   1abe9:	48 8d 05 5c fa 01 00 	lea    rax,[rip+0x1fa5c]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   1abf0:	48 89 c7             	mov    rdi,rax
   1abf3:	e8 7a 9f fe ff       	call   4b72 <stbi__err(char const*)>
   1abf8:	b8 00 00 00 00       	mov    eax,0x0
   1abfd:	e9 41 06 00 00       	jmp    1b243 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x884>
   1ac02:	83 7d a0 00          	cmp    DWORD PTR [rbp-0x60],0x0
   1ac06:	75 36                	jne    1ac3e <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x27f>
   1ac08:	83 7d 9c 10          	cmp    DWORD PTR [rbp-0x64],0x10
   1ac0c:	75 30                	jne    1ac3e <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x27f>
   1ac0e:	83 7d 10 10          	cmp    DWORD PTR [rbp+0x10],0x10
   1ac12:	75 2a                	jne    1ac3e <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x27f>
   1ac14:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
   1ac17:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1ac1a:	b9 00 00 00 00       	mov    ecx,0x0
   1ac1f:	89 c6                	mov    esi,eax
   1ac21:	bf 08 00 00 00       	mov    edi,0x8
   1ac26:	e8 76 a1 fe ff       	call   4da1 <stbi__malloc_mad3(int, int, int, int)>
   1ac2b:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1ac2f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   1ac36:	c7 00 10 00 00 00    	mov    DWORD PTR [rax],0x10
   1ac3c:	eb 18                	jmp    1ac56 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x297>
   1ac3e:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1ac41:	0f af 45 94          	imul   eax,DWORD PTR [rbp-0x6c]
   1ac45:	c1 e0 02             	shl    eax,0x2
   1ac48:	48 98                	cdqe   
   1ac4a:	48 89 c7             	mov    rdi,rax
   1ac4d:	e8 3c 9f fe ff       	call   4b8e <stbi__malloc(unsigned long)>
   1ac52:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1ac56:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
   1ac5b:	75 19                	jne    1ac76 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2b7>
   1ac5d:	48 8d 05 cf f3 01 00 	lea    rax,[rip+0x1f3cf]        # 3a033 <_IO_stdin_used+0x33>
   1ac64:	48 89 c7             	mov    rdi,rax
   1ac67:	e8 06 9f fe ff       	call   4b72 <stbi__err(char const*)>
   1ac6c:	b8 00 00 00 00       	mov    eax,0x0
   1ac71:	e9 cd 05 00 00       	jmp    1b243 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x884>
   1ac76:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1ac79:	0f af 45 94          	imul   eax,DWORD PTR [rbp-0x6c]
   1ac7d:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   1ac80:	83 7d a0 00          	cmp    DWORD PTR [rbp-0x60],0x0
   1ac84:	0f 84 ce 00 00 00    	je     1ad58 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x399>
   1ac8a:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   1ac8d:	0f af 45 90          	imul   eax,DWORD PTR [rbp-0x70]
   1ac91:	8d 14 00             	lea    edx,[rax+rax*1]
   1ac94:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1ac9b:	89 d6                	mov    esi,edx
   1ac9d:	48 89 c7             	mov    rdi,rax
   1aca0:	e8 60 b9 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1aca5:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   1acac:	e9 98 00 00 00       	jmp    1ad49 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x38a>
   1acb1:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1acb4:	48 63 d0             	movsxd rdx,eax
   1acb7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1acbb:	48 01 d0             	add    rax,rdx
   1acbe:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1acc2:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1acc5:	3b 45 90             	cmp    eax,DWORD PTR [rbp-0x70]
   1acc8:	7c 34                	jl     1acfe <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x33f>
   1acca:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1acd1:	eb 21                	jmp    1acf4 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x335>
   1acd3:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
   1acd7:	75 07                	jne    1ace0 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x321>
   1acd9:	ba ff ff ff ff       	mov    edx,0xffffffff
   1acde:	eb 05                	jmp    1ace5 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x326>
   1ace0:	ba 00 00 00 00       	mov    edx,0x0
   1ace5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1ace9:	88 10                	mov    BYTE PTR [rax],dl
   1aceb:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1acef:	48 83 45 c8 04       	add    QWORD PTR [rbp-0x38],0x4
   1acf4:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1acf7:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
   1acfa:	7c d7                	jl     1acd3 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x314>
   1acfc:	eb 47                	jmp    1ad45 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x386>
   1acfe:	8b 55 a4             	mov    edx,DWORD PTR [rbp-0x5c]
   1ad01:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
   1ad05:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1ad0c:	48 89 ce             	mov    rsi,rcx
   1ad0f:	48 89 c7             	mov    rdi,rax
   1ad12:	e8 b1 fb ff ff       	call   1a8c8 <stbi__psd_decode_rle(stbi__context*, unsigned char*, int)>
   1ad17:	85 c0                	test   eax,eax
   1ad19:	0f 94 c0             	sete   al
   1ad1c:	84 c0                	test   al,al
   1ad1e:	74 25                	je     1ad45 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x386>
   1ad20:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1ad24:	48 89 c7             	mov    rdi,rax
   1ad27:	e8 04 98 fe ff       	call   4530 <free@plt>
   1ad2c:	48 8d 05 29 04 02 00 	lea    rax,[rip+0x20429]        # 3b15c <stbi__depth_scale_table+0x564>
   1ad33:	48 89 c7             	mov    rdi,rax
   1ad36:	e8 37 9e fe ff       	call   4b72 <stbi__err(char const*)>
   1ad3b:	b8 00 00 00 00       	mov    eax,0x0
   1ad40:	e9 fe 04 00 00       	jmp    1b243 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x884>
   1ad45:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   1ad49:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
   1ad4d:	0f 8e 5e ff ff ff    	jle    1acb1 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x2f2>
   1ad53:	e9 a7 01 00 00       	jmp    1aeff <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x540>
   1ad58:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
   1ad5f:	e9 91 01 00 00       	jmp    1aef5 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x536>
   1ad64:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1ad67:	3b 45 90             	cmp    eax,DWORD PTR [rbp-0x70]
   1ad6a:	0f 8c af 00 00 00    	jl     1ae1f <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x460>
   1ad70:	83 7d 9c 10          	cmp    DWORD PTR [rbp-0x64],0x10
   1ad74:	75 5a                	jne    1add0 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x411>
   1ad76:	83 7d 10 10          	cmp    DWORD PTR [rbp+0x10],0x10
   1ad7a:	75 54                	jne    1add0 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x411>
   1ad7c:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1ad7f:	48 98                	cdqe   
   1ad81:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1ad85:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1ad89:	48 01 d0             	add    rax,rdx
   1ad8c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   1ad90:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
   1ad94:	75 07                	jne    1ad9d <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x3de>
   1ad96:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1ad9b:	eb 05                	jmp    1ada2 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x3e3>
   1ad9d:	b8 00 00 00 00       	mov    eax,0x0
   1ada2:	66 89 45 86          	mov    WORD PTR [rbp-0x7a],ax
   1ada6:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1adad:	eb 14                	jmp    1adc3 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x404>
   1adaf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1adb3:	0f b7 55 86          	movzx  edx,WORD PTR [rbp-0x7a]
   1adb7:	66 89 10             	mov    WORD PTR [rax],dx
   1adba:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1adbe:	48 83 45 d0 08       	add    QWORD PTR [rbp-0x30],0x8
   1adc3:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1adc6:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
   1adc9:	7c e4                	jl     1adaf <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x3f0>
   1adcb:	e9 21 01 00 00       	jmp    1aef1 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x532>
   1add0:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1add3:	48 63 d0             	movsxd rdx,eax
   1add6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1adda:	48 01 d0             	add    rax,rdx
   1addd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   1ade1:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
   1ade5:	75 07                	jne    1adee <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x42f>
   1ade7:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1adec:	eb 05                	jmp    1adf3 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x434>
   1adee:	b8 00 00 00 00       	mov    eax,0x0
   1adf3:	88 45 85             	mov    BYTE PTR [rbp-0x7b],al
   1adf6:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1adfd:	eb 13                	jmp    1ae12 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x453>
   1adff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1ae03:	0f b6 55 85          	movzx  edx,BYTE PTR [rbp-0x7b]
   1ae07:	88 10                	mov    BYTE PTR [rax],dl
   1ae09:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1ae0d:	48 83 45 d8 04       	add    QWORD PTR [rbp-0x28],0x4
   1ae12:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1ae15:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
   1ae18:	7c e5                	jl     1adff <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x440>
   1ae1a:	e9 d2 00 00 00       	jmp    1aef1 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x532>
   1ae1f:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   1ae26:	8b 00                	mov    eax,DWORD PTR [rax]
   1ae28:	83 f8 10             	cmp    eax,0x10
   1ae2b:	75 48                	jne    1ae75 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x4b6>
   1ae2d:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1ae30:	48 98                	cdqe   
   1ae32:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1ae36:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1ae3a:	48 01 d0             	add    rax,rdx
   1ae3d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   1ae41:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1ae48:	eb 21                	jmp    1ae6b <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x4ac>
   1ae4a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1ae51:	48 89 c7             	mov    rdi,rax
   1ae54:	e8 9b b9 fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1ae59:	89 c2                	mov    edx,eax
   1ae5b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1ae5f:	66 89 10             	mov    WORD PTR [rax],dx
   1ae62:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1ae66:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
   1ae6b:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1ae6e:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
   1ae71:	7c d7                	jl     1ae4a <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x48b>
   1ae73:	eb 7c                	jmp    1aef1 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x532>
   1ae75:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
   1ae78:	48 63 d0             	movsxd rdx,eax
   1ae7b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1ae7f:	48 01 d0             	add    rax,rdx
   1ae82:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   1ae86:	83 7d 9c 10          	cmp    DWORD PTR [rbp-0x64],0x10
   1ae8a:	75 36                	jne    1aec2 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x503>
   1ae8c:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1ae93:	eb 23                	jmp    1aeb8 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x4f9>
   1ae95:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1ae9c:	48 89 c7             	mov    rdi,rax
   1ae9f:	e8 50 b9 fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1aea4:	c1 f8 08             	sar    eax,0x8
   1aea7:	89 c2                	mov    edx,eax
   1aea9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1aead:	88 10                	mov    BYTE PTR [rax],dl
   1aeaf:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1aeb3:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
   1aeb8:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1aebb:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
   1aebe:	7c d5                	jl     1ae95 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x4d6>
   1aec0:	eb 2f                	jmp    1aef1 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x532>
   1aec2:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1aec9:	eb 1e                	jmp    1aee9 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x52a>
   1aecb:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1aed2:	48 89 c7             	mov    rdi,rax
   1aed5:	e8 37 b6 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1aeda:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1aede:	88 02                	mov    BYTE PTR [rdx],al
   1aee0:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1aee4:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
   1aee9:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1aeec:	3b 45 a4             	cmp    eax,DWORD PTR [rbp-0x5c]
   1aeef:	7c da                	jl     1aecb <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x50c>
   1aef1:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
   1aef5:	83 7d 88 03          	cmp    DWORD PTR [rbp-0x78],0x3
   1aef9:	0f 8e 65 fe ff ff    	jle    1ad64 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x3a5>
   1aeff:	83 7d 90 03          	cmp    DWORD PTR [rbp-0x70],0x3
   1af03:	0f 8e 90 02 00 00    	jle    1b199 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x7da>
   1af09:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   1af10:	8b 00                	mov    eax,DWORD PTR [rax]
   1af12:	83 f8 10             	cmp    eax,0x10
   1af15:	0f 85 46 01 00 00    	jne    1b061 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x6a2>
   1af1b:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1af22:	e9 25 01 00 00       	jmp    1b04c <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x68d>
   1af27:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1af2a:	c1 e0 02             	shl    eax,0x2
   1af2d:	48 98                	cdqe   
   1af2f:	48 8d 14 00          	lea    rdx,[rax+rax*1]
   1af33:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1af37:	48 01 d0             	add    rax,rdx
   1af3a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1af3e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1af42:	48 83 c0 06          	add    rax,0x6
   1af46:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1af49:	66 85 c0             	test   ax,ax
   1af4c:	0f 84 f6 00 00 00    	je     1b048 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x689>
   1af52:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1af56:	48 83 c0 06          	add    rax,0x6
   1af5a:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1af5d:	66 83 f8 ff          	cmp    ax,0xffff
   1af61:	0f 84 e1 00 00 00    	je     1b048 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x689>
   1af67:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1af6b:	48 83 c0 06          	add    rax,0x6
   1af6f:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1af72:	0f b7 c0             	movzx  eax,ax
   1af75:	66 0f ef c0          	pxor   xmm0,xmm0
   1af79:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1af7d:	f3 0f 10 0d cb 1a 02 00 	movss  xmm1,DWORD PTR [rip+0x21acb]        # 3ca50 <NANO_SEC+0x1788>
   1af85:	f3 0f 5e c1          	divss  xmm0,xmm1
   1af89:	f3 0f 11 45 b4       	movss  DWORD PTR [rbp-0x4c],xmm0
   1af8e:	f3 0f 10 05 ae 1a 02 00 	movss  xmm0,DWORD PTR [rip+0x21aae]        # 3ca44 <NANO_SEC+0x177c>
   1af96:	f3 0f 5e 45 b4       	divss  xmm0,DWORD PTR [rbp-0x4c]
   1af9b:	f3 0f 11 45 b8       	movss  DWORD PTR [rbp-0x48],xmm0
   1afa0:	f3 0f 10 05 9c 1a 02 00 	movss  xmm0,DWORD PTR [rip+0x21a9c]        # 3ca44 <NANO_SEC+0x177c>
   1afa8:	0f 28 c8             	movaps xmm1,xmm0
   1afab:	f3 0f 5c 4d b8       	subss  xmm1,DWORD PTR [rbp-0x48]
   1afb0:	f3 0f 10 05 98 1a 02 00 	movss  xmm0,DWORD PTR [rip+0x21a98]        # 3ca50 <NANO_SEC+0x1788>
   1afb8:	f3 0f 59 c1          	mulss  xmm0,xmm1
   1afbc:	f3 0f 11 45 bc       	movss  DWORD PTR [rbp-0x44],xmm0
   1afc1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1afc5:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1afc8:	0f b7 c0             	movzx  eax,ax
   1afcb:	66 0f ef c0          	pxor   xmm0,xmm0
   1afcf:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1afd3:	f3 0f 59 45 b8       	mulss  xmm0,DWORD PTR [rbp-0x48]
   1afd8:	f3 0f 58 45 bc       	addss  xmm0,DWORD PTR [rbp-0x44]
   1afdd:	f3 0f 2c c0          	cvttss2si eax,xmm0
   1afe1:	89 c2                	mov    edx,eax
   1afe3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1afe7:	66 89 10             	mov    WORD PTR [rax],dx
   1afea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1afee:	48 83 c0 02          	add    rax,0x2
   1aff2:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1aff5:	0f b7 c0             	movzx  eax,ax
   1aff8:	66 0f ef c0          	pxor   xmm0,xmm0
   1affc:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1b000:	f3 0f 59 45 b8       	mulss  xmm0,DWORD PTR [rbp-0x48]
   1b005:	f3 0f 58 45 bc       	addss  xmm0,DWORD PTR [rbp-0x44]
   1b00a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1b00e:	48 83 c0 02          	add    rax,0x2
   1b012:	f3 0f 2c d0          	cvttss2si edx,xmm0
   1b016:	66 89 10             	mov    WORD PTR [rax],dx
   1b019:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1b01d:	48 83 c0 04          	add    rax,0x4
   1b021:	0f b7 00             	movzx  eax,WORD PTR [rax]
   1b024:	0f b7 c0             	movzx  eax,ax
   1b027:	66 0f ef c0          	pxor   xmm0,xmm0
   1b02b:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1b02f:	f3 0f 59 45 b8       	mulss  xmm0,DWORD PTR [rbp-0x48]
   1b034:	f3 0f 58 45 bc       	addss  xmm0,DWORD PTR [rbp-0x44]
   1b039:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1b03d:	48 83 c0 04          	add    rax,0x4
   1b041:	f3 0f 2c d0          	cvttss2si edx,xmm0
   1b045:	66 89 10             	mov    WORD PTR [rax],dx
   1b048:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1b04c:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1b04f:	0f af 45 94          	imul   eax,DWORD PTR [rbp-0x6c]
   1b053:	39 45 8c             	cmp    DWORD PTR [rbp-0x74],eax
   1b056:	0f 8c cb fe ff ff    	jl     1af27 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x568>
   1b05c:	e9 38 01 00 00       	jmp    1b199 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x7da>
   1b061:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1b068:	e9 1c 01 00 00       	jmp    1b189 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x7ca>
   1b06d:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1b070:	c1 e0 02             	shl    eax,0x2
   1b073:	48 63 d0             	movsxd rdx,eax
   1b076:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b07a:	48 01 d0             	add    rax,rdx
   1b07d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   1b081:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1b085:	48 83 c0 03          	add    rax,0x3
   1b089:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1b08c:	84 c0                	test   al,al
   1b08e:	0f 84 f1 00 00 00    	je     1b185 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x7c6>
   1b094:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1b098:	48 83 c0 03          	add    rax,0x3
   1b09c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1b09f:	3c ff                	cmp    al,0xff
   1b0a1:	0f 84 de 00 00 00    	je     1b185 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x7c6>
   1b0a7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1b0ab:	48 83 c0 03          	add    rax,0x3
   1b0af:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1b0b2:	0f b6 c0             	movzx  eax,al
   1b0b5:	66 0f ef c0          	pxor   xmm0,xmm0
   1b0b9:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1b0bd:	f3 0f 10 0d 83 19 02 00 	movss  xmm1,DWORD PTR [rip+0x21983]        # 3ca48 <NANO_SEC+0x1780>
   1b0c5:	f3 0f 5e c1          	divss  xmm0,xmm1
   1b0c9:	f3 0f 11 45 a8       	movss  DWORD PTR [rbp-0x58],xmm0
   1b0ce:	f3 0f 10 05 6e 19 02 00 	movss  xmm0,DWORD PTR [rip+0x2196e]        # 3ca44 <NANO_SEC+0x177c>
   1b0d6:	f3 0f 5e 45 a8       	divss  xmm0,DWORD PTR [rbp-0x58]
   1b0db:	f3 0f 11 45 ac       	movss  DWORD PTR [rbp-0x54],xmm0
   1b0e0:	f3 0f 10 05 5c 19 02 00 	movss  xmm0,DWORD PTR [rip+0x2195c]        # 3ca44 <NANO_SEC+0x177c>
   1b0e8:	0f 28 c8             	movaps xmm1,xmm0
   1b0eb:	f3 0f 5c 4d ac       	subss  xmm1,DWORD PTR [rbp-0x54]
   1b0f0:	f3 0f 10 05 50 19 02 00 	movss  xmm0,DWORD PTR [rip+0x21950]        # 3ca48 <NANO_SEC+0x1780>
   1b0f8:	f3 0f 59 c1          	mulss  xmm0,xmm1
   1b0fc:	f3 0f 11 45 b0       	movss  DWORD PTR [rbp-0x50],xmm0
   1b101:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1b105:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1b108:	0f b6 c0             	movzx  eax,al
   1b10b:	66 0f ef c0          	pxor   xmm0,xmm0
   1b10f:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1b113:	f3 0f 59 45 ac       	mulss  xmm0,DWORD PTR [rbp-0x54]
   1b118:	f3 0f 58 45 b0       	addss  xmm0,DWORD PTR [rbp-0x50]
   1b11d:	f3 0f 2c c0          	cvttss2si eax,xmm0
   1b121:	89 c2                	mov    edx,eax
   1b123:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1b127:	88 10                	mov    BYTE PTR [rax],dl
   1b129:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1b12d:	48 83 c0 01          	add    rax,0x1
   1b131:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1b134:	0f b6 c0             	movzx  eax,al
   1b137:	66 0f ef c0          	pxor   xmm0,xmm0
   1b13b:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1b13f:	f3 0f 59 45 ac       	mulss  xmm0,DWORD PTR [rbp-0x54]
   1b144:	f3 0f 58 45 b0       	addss  xmm0,DWORD PTR [rbp-0x50]
   1b149:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1b14d:	48 83 c0 01          	add    rax,0x1
   1b151:	f3 0f 2c d0          	cvttss2si edx,xmm0
   1b155:	88 10                	mov    BYTE PTR [rax],dl
   1b157:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1b15b:	48 83 c0 02          	add    rax,0x2
   1b15f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1b162:	0f b6 c0             	movzx  eax,al
   1b165:	66 0f ef c0          	pxor   xmm0,xmm0
   1b169:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1b16d:	f3 0f 59 45 ac       	mulss  xmm0,DWORD PTR [rbp-0x54]
   1b172:	f3 0f 58 45 b0       	addss  xmm0,DWORD PTR [rbp-0x50]
   1b177:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1b17b:	48 83 c0 02          	add    rax,0x2
   1b17f:	f3 0f 2c d0          	cvttss2si edx,xmm0
   1b183:	88 10                	mov    BYTE PTR [rax],dl
   1b185:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
   1b189:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1b18c:	0f af 45 94          	imul   eax,DWORD PTR [rbp-0x6c]
   1b190:	39 45 8c             	cmp    DWORD PTR [rbp-0x74],eax
   1b193:	0f 8c d4 fe ff ff    	jl     1b06d <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x6ae>
   1b199:	83 bd 5c ff ff ff 00 	cmp    DWORD PTR [rbp-0xa4],0x0
   1b1a0:	74 6e                	je     1b210 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x851>
   1b1a2:	83 bd 5c ff ff ff 04 	cmp    DWORD PTR [rbp-0xa4],0x4
   1b1a9:	74 65                	je     1b210 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x851>
   1b1ab:	48 8b 85 50 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb0]
   1b1b2:	8b 00                	mov    eax,DWORD PTR [rax]
   1b1b4:	83 f8 10             	cmp    eax,0x10
   1b1b7:	75 26                	jne    1b1df <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x820>
   1b1b9:	8b 75 94             	mov    esi,DWORD PTR [rbp-0x6c]
   1b1bc:	8b 4d 98             	mov    ecx,DWORD PTR [rbp-0x68]
   1b1bf:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
   1b1c5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b1c9:	41 89 f0             	mov    r8d,esi
   1b1cc:	be 04 00 00 00       	mov    esi,0x4
   1b1d1:	48 89 c7             	mov    rdi,rax
   1b1d4:	e8 a7 bc fe ff       	call   6e80 <stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int)>
   1b1d9:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1b1dd:	eb 24                	jmp    1b203 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x844>
   1b1df:	8b 75 94             	mov    esi,DWORD PTR [rbp-0x6c]
   1b1e2:	8b 4d 98             	mov    ecx,DWORD PTR [rbp-0x68]
   1b1e5:	8b 95 5c ff ff ff    	mov    edx,DWORD PTR [rbp-0xa4]
   1b1eb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b1ef:	41 89 f0             	mov    r8d,esi
   1b1f2:	be 04 00 00 00       	mov    esi,0x4
   1b1f7:	48 89 c7             	mov    rdi,rax
   1b1fa:	e8 02 b7 fe ff       	call   6901 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   1b1ff:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1b203:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
   1b208:	75 06                	jne    1b210 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x851>
   1b20a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b20e:	eb 33                	jmp    1b243 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x884>
   1b210:	48 83 bd 60 ff ff ff 00 	cmp    QWORD PTR [rbp-0xa0],0x0
   1b218:	74 0d                	je     1b227 <stbi__psd_load(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)+0x868>
   1b21a:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   1b221:	c7 00 04 00 00 00    	mov    DWORD PTR [rax],0x4
   1b227:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   1b22e:	8b 55 94             	mov    edx,DWORD PTR [rbp-0x6c]
   1b231:	89 10                	mov    DWORD PTR [rax],edx
   1b233:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
   1b23a:	8b 55 98             	mov    edx,DWORD PTR [rbp-0x68]
   1b23d:	89 10                	mov    DWORD PTR [rax],edx
   1b23f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b243:	c9                   	leave  
   1b244:	c3                   	ret    

000000000001b245 <stbi__pic_is4(stbi__context*, char const*)>:
   1b245:	55                   	push   rbp
   1b246:	48 89 e5             	mov    rbp,rsp
   1b249:	48 83 ec 20          	sub    rsp,0x20
   1b24d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1b251:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1b255:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1b25c:	eb 30                	jmp    1b28e <stbi__pic_is4(stbi__context*, char const*)+0x49>
   1b25e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b262:	48 89 c7             	mov    rdi,rax
   1b265:	e8 a7 b2 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1b26a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   1b26d:	48 63 ca             	movsxd rcx,edx
   1b270:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1b274:	48 01 ca             	add    rdx,rcx
   1b277:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
   1b27a:	38 d0                	cmp    al,dl
   1b27c:	0f 95 c0             	setne  al
   1b27f:	84 c0                	test   al,al
   1b281:	74 07                	je     1b28a <stbi__pic_is4(stbi__context*, char const*)+0x45>
   1b283:	b8 00 00 00 00       	mov    eax,0x0
   1b288:	eb 0f                	jmp    1b299 <stbi__pic_is4(stbi__context*, char const*)+0x54>
   1b28a:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1b28e:	83 7d fc 03          	cmp    DWORD PTR [rbp-0x4],0x3
   1b292:	7e ca                	jle    1b25e <stbi__pic_is4(stbi__context*, char const*)+0x19>
   1b294:	b8 01 00 00 00       	mov    eax,0x1
   1b299:	c9                   	leave  
   1b29a:	c3                   	ret    

000000000001b29b <stbi__pic_test_core(stbi__context*)>:
   1b29b:	55                   	push   rbp
   1b29c:	48 89 e5             	mov    rbp,rsp
   1b29f:	48 83 ec 20          	sub    rsp,0x20
   1b2a3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1b2a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b2ab:	48 8d 15 b2 fe 01 00 	lea    rdx,[rip+0x1feb2]        # 3b164 <stbi__depth_scale_table+0x56c>
   1b2b2:	48 89 d6             	mov    rsi,rdx
   1b2b5:	48 89 c7             	mov    rdi,rax
   1b2b8:	e8 88 ff ff ff       	call   1b245 <stbi__pic_is4(stbi__context*, char const*)>
   1b2bd:	85 c0                	test   eax,eax
   1b2bf:	0f 94 c0             	sete   al
   1b2c2:	84 c0                	test   al,al
   1b2c4:	74 07                	je     1b2cd <stbi__pic_test_core(stbi__context*)+0x32>
   1b2c6:	b8 00 00 00 00       	mov    eax,0x0
   1b2cb:	eb 4a                	jmp    1b317 <stbi__pic_test_core(stbi__context*)+0x7c>
   1b2cd:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1b2d4:	eb 10                	jmp    1b2e6 <stbi__pic_test_core(stbi__context*)+0x4b>
   1b2d6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b2da:	48 89 c7             	mov    rdi,rax
   1b2dd:	e8 2f b2 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1b2e2:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1b2e6:	83 7d fc 53          	cmp    DWORD PTR [rbp-0x4],0x53
   1b2ea:	7e ea                	jle    1b2d6 <stbi__pic_test_core(stbi__context*)+0x3b>
   1b2ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1b2f0:	48 8d 15 72 fe 01 00 	lea    rdx,[rip+0x1fe72]        # 3b169 <stbi__depth_scale_table+0x571>
   1b2f7:	48 89 d6             	mov    rsi,rdx
   1b2fa:	48 89 c7             	mov    rdi,rax
   1b2fd:	e8 43 ff ff ff       	call   1b245 <stbi__pic_is4(stbi__context*, char const*)>
   1b302:	85 c0                	test   eax,eax
   1b304:	0f 94 c0             	sete   al
   1b307:	84 c0                	test   al,al
   1b309:	74 07                	je     1b312 <stbi__pic_test_core(stbi__context*)+0x77>
   1b30b:	b8 00 00 00 00       	mov    eax,0x0
   1b310:	eb 05                	jmp    1b317 <stbi__pic_test_core(stbi__context*)+0x7c>
   1b312:	b8 01 00 00 00       	mov    eax,0x1
   1b317:	c9                   	leave  
   1b318:	c3                   	ret    

000000000001b319 <stbi__readval(stbi__context*, int, unsigned char*)>:
   1b319:	55                   	push   rbp
   1b31a:	48 89 e5             	mov    rbp,rsp
   1b31d:	53                   	push   rbx
   1b31e:	48 83 ec 38          	sub    rsp,0x38
   1b322:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   1b326:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
   1b329:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   1b32d:	c7 45 e8 80 00 00 00 	mov    DWORD PTR [rbp-0x18],0x80
   1b334:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   1b33b:	eb 58                	jmp    1b395 <stbi__readval(stbi__context*, int, unsigned char*)+0x7c>
   1b33d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1b340:	23 45 e8             	and    eax,DWORD PTR [rbp-0x18]
   1b343:	85 c0                	test   eax,eax
   1b345:	74 47                	je     1b38e <stbi__readval(stbi__context*, int, unsigned char*)+0x75>
   1b347:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b34b:	48 89 c7             	mov    rdi,rax
   1b34e:	e8 41 b2 fe ff       	call   6594 <stbi__at_eof(stbi__context*)>
   1b353:	85 c0                	test   eax,eax
   1b355:	0f 95 c0             	setne  al
   1b358:	84 c0                	test   al,al
   1b35a:	74 16                	je     1b372 <stbi__readval(stbi__context*, int, unsigned char*)+0x59>
   1b35c:	48 8d 05 0b fe 01 00 	lea    rax,[rip+0x1fe0b]        # 3b16e <stbi__depth_scale_table+0x576>
   1b363:	48 89 c7             	mov    rdi,rax
   1b366:	e8 07 98 fe ff       	call   4b72 <stbi__err(char const*)>
   1b36b:	b8 00 00 00 00       	mov    eax,0x0
   1b370:	eb 2d                	jmp    1b39f <stbi__readval(stbi__context*, int, unsigned char*)+0x86>
   1b372:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1b375:	48 63 d0             	movsxd rdx,eax
   1b378:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b37c:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   1b380:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b384:	48 89 c7             	mov    rdi,rax
   1b387:	e8 85 b1 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1b38c:	88 03                	mov    BYTE PTR [rbx],al
   1b38e:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
   1b392:	d1 7d e8             	sar    DWORD PTR [rbp-0x18],1
   1b395:	83 7d ec 03          	cmp    DWORD PTR [rbp-0x14],0x3
   1b399:	7e a2                	jle    1b33d <stbi__readval(stbi__context*, int, unsigned char*)+0x24>
   1b39b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b39f:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   1b3a3:	c9                   	leave  
   1b3a4:	c3                   	ret    

000000000001b3a5 <stbi__copyval(int, unsigned char*, unsigned char const*)>:
   1b3a5:	55                   	push   rbp
   1b3a6:	48 89 e5             	mov    rbp,rsp
   1b3a9:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   1b3ac:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1b3b0:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1b3b4:	c7 45 f8 80 00 00 00 	mov    DWORD PTR [rbp-0x8],0x80
   1b3bb:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1b3c2:	eb 30                	jmp    1b3f4 <stbi__copyval(int, unsigned char*, unsigned char const*)+0x4f>
   1b3c4:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1b3c7:	23 45 f8             	and    eax,DWORD PTR [rbp-0x8]
   1b3ca:	85 c0                	test   eax,eax
   1b3cc:	74 1f                	je     1b3ed <stbi__copyval(int, unsigned char*, unsigned char const*)+0x48>
   1b3ce:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1b3d1:	48 63 d0             	movsxd rdx,eax
   1b3d4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b3d8:	48 01 d0             	add    rax,rdx
   1b3db:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   1b3de:	48 63 ca             	movsxd rcx,edx
   1b3e1:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1b3e5:	48 01 ca             	add    rdx,rcx
   1b3e8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1b3eb:	88 02                	mov    BYTE PTR [rdx],al
   1b3ed:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1b3f1:	d1 7d f8             	sar    DWORD PTR [rbp-0x8],1
   1b3f4:	83 7d fc 03          	cmp    DWORD PTR [rbp-0x4],0x3
   1b3f8:	7e ca                	jle    1b3c4 <stbi__copyval(int, unsigned char*, unsigned char const*)+0x1f>
   1b3fa:	90                   	nop
   1b3fb:	90                   	nop
   1b3fc:	5d                   	pop    rbp
   1b3fd:	c3                   	ret    

000000000001b3fe <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)>:
   1b3fe:	55                   	push   rbp
   1b3ff:	48 89 e5             	mov    rbp,rsp
   1b402:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
   1b409:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
   1b410:	89 b5 74 ff ff ff    	mov    DWORD PTR [rbp-0x8c],esi
   1b416:	89 95 70 ff ff ff    	mov    DWORD PTR [rbp-0x90],edx
   1b41c:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
   1b423:	4c 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],r8
   1b42a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1b433:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1b437:	31 c0                	xor    eax,eax
   1b439:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
   1b440:	c7 45 90 00 00 00 00 	mov    DWORD PTR [rbp-0x70],0x0
   1b447:	83 7d 90 0a          	cmp    DWORD PTR [rbp-0x70],0xa
   1b44b:	75 19                	jne    1b466 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x68>
   1b44d:	48 8d 05 34 fc 01 00 	lea    rax,[rip+0x1fc34]        # 3b088 <stbi__depth_scale_table+0x490>
   1b454:	48 89 c7             	mov    rdi,rax
   1b457:	e8 16 97 fe ff       	call   4b72 <stbi__err(char const*)>
   1b45c:	b8 00 00 00 00       	mov    eax,0x0
   1b461:	e9 7d 04 00 00       	jmp    1b8e3 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4e5>
   1b466:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   1b469:	8d 50 01             	lea    edx,[rax+0x1]
   1b46c:	89 55 90             	mov    DWORD PTR [rbp-0x70],edx
   1b46f:	48 8d 4d d0          	lea    rcx,[rbp-0x30]
   1b473:	48 63 d0             	movsxd rdx,eax
   1b476:	48 89 d0             	mov    rax,rdx
   1b479:	48 01 c0             	add    rax,rax
   1b47c:	48 01 d0             	add    rax,rdx
   1b47f:	48 01 c8             	add    rax,rcx
   1b482:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1b486:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b48d:	48 89 c7             	mov    rdi,rax
   1b490:	e8 7c b0 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1b495:	0f b6 c0             	movzx  eax,al
   1b498:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
   1b49b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b4a2:	48 89 c7             	mov    rdi,rax
   1b4a5:	e8 67 b0 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1b4aa:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b4ae:	88 02                	mov    BYTE PTR [rdx],al
   1b4b0:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b4b7:	48 89 c7             	mov    rdi,rax
   1b4ba:	e8 52 b0 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1b4bf:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b4c3:	88 42 01             	mov    BYTE PTR [rdx+0x1],al
   1b4c6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b4cd:	48 89 c7             	mov    rdi,rax
   1b4d0:	e8 3c b0 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1b4d5:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   1b4d9:	88 42 02             	mov    BYTE PTR [rdx+0x2],al
   1b4dc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b4e0:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1b4e4:	0f b6 c0             	movzx  eax,al
   1b4e7:	09 45 8c             	or     DWORD PTR [rbp-0x74],eax
   1b4ea:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b4f1:	48 89 c7             	mov    rdi,rax
   1b4f4:	e8 9b b0 fe ff       	call   6594 <stbi__at_eof(stbi__context*)>
   1b4f9:	85 c0                	test   eax,eax
   1b4fb:	0f 95 c0             	setne  al
   1b4fe:	84 c0                	test   al,al
   1b500:	74 19                	je     1b51b <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x11d>
   1b502:	48 8d 05 65 fc 01 00 	lea    rax,[rip+0x1fc65]        # 3b16e <stbi__depth_scale_table+0x576>
   1b509:	48 89 c7             	mov    rdi,rax
   1b50c:	e8 61 96 fe ff       	call   4b72 <stbi__err(char const*)>
   1b511:	b8 00 00 00 00       	mov    eax,0x0
   1b516:	e9 c8 03 00 00       	jmp    1b8e3 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4e5>
   1b51b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1b51f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1b522:	3c 08                	cmp    al,0x8
   1b524:	74 19                	je     1b53f <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x141>
   1b526:	48 8d 05 5b fb 01 00 	lea    rax,[rip+0x1fb5b]        # 3b088 <stbi__depth_scale_table+0x490>
   1b52d:	48 89 c7             	mov    rdi,rax
   1b530:	e8 3d 96 fe ff       	call   4b72 <stbi__err(char const*)>
   1b535:	b8 00 00 00 00       	mov    eax,0x0
   1b53a:	e9 a4 03 00 00       	jmp    1b8e3 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4e5>
   1b53f:	83 7d b4 00          	cmp    DWORD PTR [rbp-0x4c],0x0
   1b543:	0f 85 fe fe ff ff    	jne    1b447 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x49>
   1b549:	8b 45 8c             	mov    eax,DWORD PTR [rbp-0x74]
   1b54c:	83 e0 10             	and    eax,0x10
   1b54f:	85 c0                	test   eax,eax
   1b551:	74 07                	je     1b55a <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x15c>
   1b553:	ba 04 00 00 00       	mov    edx,0x4
   1b558:	eb 05                	jmp    1b55f <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x161>
   1b55a:	ba 03 00 00 00       	mov    edx,0x3
   1b55f:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   1b566:	89 10                	mov    DWORD PTR [rax],edx
   1b568:	c7 45 94 00 00 00 00 	mov    DWORD PTR [rbp-0x6c],0x0
   1b56f:	e9 59 03 00 00       	jmp    1b8cd <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4cf>
   1b574:	c7 45 98 00 00 00 00 	mov    DWORD PTR [rbp-0x68],0x0
   1b57b:	e9 3d 03 00 00       	jmp    1b8bd <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4bf>
   1b580:	48 8d 4d d0          	lea    rcx,[rbp-0x30]
   1b584:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1b587:	48 63 d0             	movsxd rdx,eax
   1b58a:	48 89 d0             	mov    rax,rdx
   1b58d:	48 01 c0             	add    rax,rax
   1b590:	48 01 d0             	add    rax,rdx
   1b593:	48 01 c8             	add    rax,rcx
   1b596:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1b59a:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   1b59d:	0f af 85 74 ff ff ff 	imul   eax,DWORD PTR [rbp-0x8c]
   1b5a4:	c1 e0 02             	shl    eax,0x2
   1b5a7:	48 63 d0             	movsxd rdx,eax
   1b5aa:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   1b5b1:	48 01 d0             	add    rax,rdx
   1b5b4:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   1b5b8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b5bc:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
   1b5c0:	0f b6 c0             	movzx  eax,al
   1b5c3:	83 f8 02             	cmp    eax,0x2
   1b5c6:	0f 84 5f 01 00 00    	je     1b72b <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x32d>
   1b5cc:	83 f8 02             	cmp    eax,0x2
   1b5cf:	7f 09                	jg     1b5da <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x1dc>
   1b5d1:	85 c0                	test   eax,eax
   1b5d3:	74 1e                	je     1b5f3 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x1f5>
   1b5d5:	83 f8 01             	cmp    eax,0x1
   1b5d8:	74 6f                	je     1b649 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x24b>
   1b5da:	48 8d 05 a7 fa 01 00 	lea    rax,[rip+0x1faa7]        # 3b088 <stbi__depth_scale_table+0x490>
   1b5e1:	48 89 c7             	mov    rdi,rax
   1b5e4:	e8 89 95 fe ff       	call   4b72 <stbi__err(char const*)>
   1b5e9:	b8 00 00 00 00       	mov    eax,0x0
   1b5ee:	e9 f0 02 00 00       	jmp    1b8e3 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4e5>
   1b5f3:	c7 45 9c 00 00 00 00 	mov    DWORD PTR [rbp-0x64],0x0
   1b5fa:	eb 3d                	jmp    1b639 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x23b>
   1b5fc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b600:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1b604:	0f b6 c8             	movzx  ecx,al
   1b607:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   1b60b:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b612:	89 ce                	mov    esi,ecx
   1b614:	48 89 c7             	mov    rdi,rax
   1b617:	e8 fd fc ff ff       	call   1b319 <stbi__readval(stbi__context*, int, unsigned char*)>
   1b61c:	48 85 c0             	test   rax,rax
   1b61f:	0f 94 c0             	sete   al
   1b622:	84 c0                	test   al,al
   1b624:	74 0a                	je     1b630 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x232>
   1b626:	b8 00 00 00 00       	mov    eax,0x0
   1b62b:	e9 b3 02 00 00       	jmp    1b8e3 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4e5>
   1b630:	83 45 9c 01          	add    DWORD PTR [rbp-0x64],0x1
   1b634:	48 83 45 b8 04       	add    QWORD PTR [rbp-0x48],0x4
   1b639:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
   1b63c:	3b 85 74 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x8c]
   1b642:	7c b8                	jl     1b5fc <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x1fe>
   1b644:	e9 70 02 00 00       	jmp    1b8b9 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4bb>
   1b649:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1b64f:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
   1b652:	e9 c5 00 00 00       	jmp    1b71c <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x31e>
   1b657:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b65e:	48 89 c7             	mov    rdi,rax
   1b661:	e8 ab ae fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1b666:	88 45 8b             	mov    BYTE PTR [rbp-0x75],al
   1b669:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b670:	48 89 c7             	mov    rdi,rax
   1b673:	e8 1c af fe ff       	call   6594 <stbi__at_eof(stbi__context*)>
   1b678:	85 c0                	test   eax,eax
   1b67a:	0f 95 c0             	setne  al
   1b67d:	84 c0                	test   al,al
   1b67f:	74 19                	je     1b69a <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x29c>
   1b681:	48 8d 05 e6 fa 01 00 	lea    rax,[rip+0x1fae6]        # 3b16e <stbi__depth_scale_table+0x576>
   1b688:	48 89 c7             	mov    rdi,rax
   1b68b:	e8 e2 94 fe ff       	call   4b72 <stbi__err(char const*)>
   1b690:	b8 00 00 00 00       	mov    eax,0x0
   1b695:	e9 49 02 00 00       	jmp    1b8e3 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4e5>
   1b69a:	0f b6 45 8b          	movzx  eax,BYTE PTR [rbp-0x75]
   1b69e:	39 45 a0             	cmp    DWORD PTR [rbp-0x60],eax
   1b6a1:	7d 06                	jge    1b6a9 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x2ab>
   1b6a3:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   1b6a6:	88 45 8b             	mov    BYTE PTR [rbp-0x75],al
   1b6a9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b6ad:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1b6b1:	0f b6 c8             	movzx  ecx,al
   1b6b4:	48 8d 55 f4          	lea    rdx,[rbp-0xc]
   1b6b8:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b6bf:	89 ce                	mov    esi,ecx
   1b6c1:	48 89 c7             	mov    rdi,rax
   1b6c4:	e8 50 fc ff ff       	call   1b319 <stbi__readval(stbi__context*, int, unsigned char*)>
   1b6c9:	48 85 c0             	test   rax,rax
   1b6cc:	0f 94 c0             	sete   al
   1b6cf:	84 c0                	test   al,al
   1b6d1:	74 0a                	je     1b6dd <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x2df>
   1b6d3:	b8 00 00 00 00       	mov    eax,0x0
   1b6d8:	e9 06 02 00 00       	jmp    1b8e3 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4e5>
   1b6dd:	c7 45 a4 00 00 00 00 	mov    DWORD PTR [rbp-0x5c],0x0
   1b6e4:	eb 26                	jmp    1b70c <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x30e>
   1b6e6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b6ea:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1b6ee:	0f b6 c0             	movzx  eax,al
   1b6f1:	48 8d 55 f4          	lea    rdx,[rbp-0xc]
   1b6f5:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
   1b6f9:	48 89 ce             	mov    rsi,rcx
   1b6fc:	89 c7                	mov    edi,eax
   1b6fe:	e8 a2 fc ff ff       	call   1b3a5 <stbi__copyval(int, unsigned char*, unsigned char const*)>
   1b703:	83 45 a4 01          	add    DWORD PTR [rbp-0x5c],0x1
   1b707:	48 83 45 b8 04       	add    QWORD PTR [rbp-0x48],0x4
   1b70c:	0f b6 45 8b          	movzx  eax,BYTE PTR [rbp-0x75]
   1b710:	39 45 a4             	cmp    DWORD PTR [rbp-0x5c],eax
   1b713:	7c d1                	jl     1b6e6 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x2e8>
   1b715:	0f b6 45 8b          	movzx  eax,BYTE PTR [rbp-0x75]
   1b719:	29 45 a0             	sub    DWORD PTR [rbp-0x60],eax
   1b71c:	83 7d a0 00          	cmp    DWORD PTR [rbp-0x60],0x0
   1b720:	0f 8f 31 ff ff ff    	jg     1b657 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x259>
   1b726:	e9 8e 01 00 00       	jmp    1b8b9 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4bb>
   1b72b:	8b 85 74 ff ff ff    	mov    eax,DWORD PTR [rbp-0x8c]
   1b731:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
   1b734:	e9 75 01 00 00       	jmp    1b8ae <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4b0>
   1b739:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b740:	48 89 c7             	mov    rdi,rax
   1b743:	e8 c9 ad fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1b748:	0f b6 c0             	movzx  eax,al
   1b74b:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
   1b74e:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b755:	48 89 c7             	mov    rdi,rax
   1b758:	e8 37 ae fe ff       	call   6594 <stbi__at_eof(stbi__context*)>
   1b75d:	85 c0                	test   eax,eax
   1b75f:	0f 95 c0             	setne  al
   1b762:	84 c0                	test   al,al
   1b764:	74 19                	je     1b77f <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x381>
   1b766:	48 8d 05 01 fa 01 00 	lea    rax,[rip+0x1fa01]        # 3b16e <stbi__depth_scale_table+0x576>
   1b76d:	48 89 c7             	mov    rdi,rax
   1b770:	e8 fd 93 fe ff       	call   4b72 <stbi__err(char const*)>
   1b775:	b8 00 00 00 00       	mov    eax,0x0
   1b77a:	e9 64 01 00 00       	jmp    1b8e3 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4e5>
   1b77f:	83 7d ac 7f          	cmp    DWORD PTR [rbp-0x54],0x7f
   1b783:	0f 8e af 00 00 00    	jle    1b838 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x43a>
   1b789:	81 7d ac 80 00 00 00 	cmp    DWORD PTR [rbp-0x54],0x80
   1b790:	75 14                	jne    1b7a6 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x3a8>
   1b792:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b799:	48 89 c7             	mov    rdi,rax
   1b79c:	e8 53 b0 fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1b7a1:	89 45 ac             	mov    DWORD PTR [rbp-0x54],eax
   1b7a4:	eb 04                	jmp    1b7aa <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x3ac>
   1b7a6:	83 6d ac 7f          	sub    DWORD PTR [rbp-0x54],0x7f
   1b7aa:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   1b7ad:	3b 45 a8             	cmp    eax,DWORD PTR [rbp-0x58]
   1b7b0:	7e 19                	jle    1b7cb <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x3cd>
   1b7b2:	48 8d 05 b5 f9 01 00 	lea    rax,[rip+0x1f9b5]        # 3b16e <stbi__depth_scale_table+0x576>
   1b7b9:	48 89 c7             	mov    rdi,rax
   1b7bc:	e8 b1 93 fe ff       	call   4b72 <stbi__err(char const*)>
   1b7c1:	b8 00 00 00 00       	mov    eax,0x0
   1b7c6:	e9 18 01 00 00       	jmp    1b8e3 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4e5>
   1b7cb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b7cf:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1b7d3:	0f b6 c8             	movzx  ecx,al
   1b7d6:	48 8d 55 f4          	lea    rdx,[rbp-0xc]
   1b7da:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b7e1:	89 ce                	mov    esi,ecx
   1b7e3:	48 89 c7             	mov    rdi,rax
   1b7e6:	e8 2e fb ff ff       	call   1b319 <stbi__readval(stbi__context*, int, unsigned char*)>
   1b7eb:	48 85 c0             	test   rax,rax
   1b7ee:	0f 94 c0             	sete   al
   1b7f1:	84 c0                	test   al,al
   1b7f3:	74 0a                	je     1b7ff <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x401>
   1b7f5:	b8 00 00 00 00       	mov    eax,0x0
   1b7fa:	e9 e4 00 00 00       	jmp    1b8e3 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4e5>
   1b7ff:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   1b806:	eb 26                	jmp    1b82e <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x430>
   1b808:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b80c:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1b810:	0f b6 c0             	movzx  eax,al
   1b813:	48 8d 55 f4          	lea    rdx,[rbp-0xc]
   1b817:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
   1b81b:	48 89 ce             	mov    rsi,rcx
   1b81e:	89 c7                	mov    edi,eax
   1b820:	e8 80 fb ff ff       	call   1b3a5 <stbi__copyval(int, unsigned char*, unsigned char const*)>
   1b825:	83 45 b0 01          	add    DWORD PTR [rbp-0x50],0x1
   1b829:	48 83 45 b8 04       	add    QWORD PTR [rbp-0x48],0x4
   1b82e:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1b831:	3b 45 ac             	cmp    eax,DWORD PTR [rbp-0x54]
   1b834:	7c d2                	jl     1b808 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x40a>
   1b836:	eb 70                	jmp    1b8a8 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4aa>
   1b838:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
   1b83c:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   1b83f:	3b 45 a8             	cmp    eax,DWORD PTR [rbp-0x58]
   1b842:	7e 19                	jle    1b85d <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x45f>
   1b844:	48 8d 05 23 f9 01 00 	lea    rax,[rip+0x1f923]        # 3b16e <stbi__depth_scale_table+0x576>
   1b84b:	48 89 c7             	mov    rdi,rax
   1b84e:	e8 1f 93 fe ff       	call   4b72 <stbi__err(char const*)>
   1b853:	b8 00 00 00 00       	mov    eax,0x0
   1b858:	e9 86 00 00 00       	jmp    1b8e3 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4e5>
   1b85d:	c7 45 b0 00 00 00 00 	mov    DWORD PTR [rbp-0x50],0x0
   1b864:	eb 3a                	jmp    1b8a0 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4a2>
   1b866:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1b86a:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1b86e:	0f b6 c8             	movzx  ecx,al
   1b871:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   1b875:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
   1b87c:	89 ce                	mov    esi,ecx
   1b87e:	48 89 c7             	mov    rdi,rax
   1b881:	e8 93 fa ff ff       	call   1b319 <stbi__readval(stbi__context*, int, unsigned char*)>
   1b886:	48 85 c0             	test   rax,rax
   1b889:	0f 94 c0             	sete   al
   1b88c:	84 c0                	test   al,al
   1b88e:	74 07                	je     1b897 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x499>
   1b890:	b8 00 00 00 00       	mov    eax,0x0
   1b895:	eb 4c                	jmp    1b8e3 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4e5>
   1b897:	83 45 b0 01          	add    DWORD PTR [rbp-0x50],0x1
   1b89b:	48 83 45 b8 04       	add    QWORD PTR [rbp-0x48],0x4
   1b8a0:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   1b8a3:	3b 45 ac             	cmp    eax,DWORD PTR [rbp-0x54]
   1b8a6:	7c be                	jl     1b866 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x468>
   1b8a8:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
   1b8ab:	29 45 a8             	sub    DWORD PTR [rbp-0x58],eax
   1b8ae:	83 7d a8 00          	cmp    DWORD PTR [rbp-0x58],0x0
   1b8b2:	0f 8f 81 fe ff ff    	jg     1b739 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x33b>
   1b8b8:	90                   	nop
   1b8b9:	83 45 98 01          	add    DWORD PTR [rbp-0x68],0x1
   1b8bd:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
   1b8c0:	3b 45 90             	cmp    eax,DWORD PTR [rbp-0x70]
   1b8c3:	0f 8c b7 fc ff ff    	jl     1b580 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x182>
   1b8c9:	83 45 94 01          	add    DWORD PTR [rbp-0x6c],0x1
   1b8cd:	8b 45 94             	mov    eax,DWORD PTR [rbp-0x6c]
   1b8d0:	3b 85 70 ff ff ff    	cmp    eax,DWORD PTR [rbp-0x90]
   1b8d6:	0f 8c 98 fc ff ff    	jl     1b574 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x176>
   1b8dc:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   1b8e3:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1b8e7:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1b8f0:	74 05                	je     1b8f7 <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)+0x4f9>
   1b8f2:	e8 e9 8b fe ff       	call   44e0 <__stack_chk_fail@plt>
   1b8f7:	c9                   	leave  
   1b8f8:	c3                   	ret    

000000000001b8f9 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   1b8f9:	55                   	push   rbp
   1b8fa:	48 89 e5             	mov    rbp,rsp
   1b8fd:	48 83 ec 50          	sub    rsp,0x50
   1b901:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   1b905:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   1b909:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   1b90d:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   1b911:	44 89 45 bc          	mov    DWORD PTR [rbp-0x44],r8d
   1b915:	4c 89 4d b0          	mov    QWORD PTR [rbp-0x50],r9
   1b919:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1b922:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1b926:	31 c0                	xor    eax,eax
   1b928:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
   1b92d:	75 08                	jne    1b937 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x3e>
   1b92f:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   1b933:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1b937:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
   1b93e:	eb 10                	jmp    1b950 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x57>
   1b940:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b944:	48 89 c7             	mov    rdi,rax
   1b947:	e8 c5 ab fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1b94c:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
   1b950:	83 7d e4 5b          	cmp    DWORD PTR [rbp-0x1c],0x5b
   1b954:	7e ea                	jle    1b940 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x47>
   1b956:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b95a:	48 89 c7             	mov    rdi,rax
   1b95d:	e8 92 ae fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1b962:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   1b965:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b969:	48 89 c7             	mov    rdi,rax
   1b96c:	e8 83 ae fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1b971:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   1b974:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b978:	48 89 c7             	mov    rdi,rax
   1b97b:	e8 14 ac fe ff       	call   6594 <stbi__at_eof(stbi__context*)>
   1b980:	85 c0                	test   eax,eax
   1b982:	0f 95 c0             	setne  al
   1b985:	84 c0                	test   al,al
   1b987:	74 19                	je     1b9a2 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xa9>
   1b989:	48 8d 05 de f7 01 00 	lea    rax,[rip+0x1f7de]        # 3b16e <stbi__depth_scale_table+0x576>
   1b990:	48 89 c7             	mov    rdi,rax
   1b993:	e8 da 91 fe ff       	call   4b72 <stbi__err(char const*)>
   1b998:	b8 00 00 00 00       	mov    eax,0x0
   1b99d:	e9 17 01 00 00       	jmp    1bab9 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1c0>
   1b9a2:	8b 75 ec             	mov    esi,DWORD PTR [rbp-0x14]
   1b9a5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1b9a8:	b9 00 00 00 00       	mov    ecx,0x0
   1b9ad:	ba 04 00 00 00       	mov    edx,0x4
   1b9b2:	89 c7                	mov    edi,eax
   1b9b4:	e8 a3 92 fe ff       	call   4c5c <stbi__mad3sizes_valid(int, int, int, int)>
   1b9b9:	85 c0                	test   eax,eax
   1b9bb:	0f 94 c0             	sete   al
   1b9be:	84 c0                	test   al,al
   1b9c0:	74 19                	je     1b9db <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xe2>
   1b9c2:	48 8d 05 83 ec 01 00 	lea    rax,[rip+0x1ec83]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   1b9c9:	48 89 c7             	mov    rdi,rax
   1b9cc:	e8 a1 91 fe ff       	call   4b72 <stbi__err(char const*)>
   1b9d1:	b8 00 00 00 00       	mov    eax,0x0
   1b9d6:	e9 de 00 00 00       	jmp    1bab9 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1c0>
   1b9db:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b9df:	48 89 c7             	mov    rdi,rax
   1b9e2:	e8 4b ae fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1b9e7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b9eb:	48 89 c7             	mov    rdi,rax
   1b9ee:	e8 01 ae fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1b9f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1b9f7:	48 89 c7             	mov    rdi,rax
   1b9fa:	e8 f5 ad fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1b9ff:	8b 75 ec             	mov    esi,DWORD PTR [rbp-0x14]
   1ba02:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1ba05:	b9 00 00 00 00       	mov    ecx,0x0
   1ba0a:	ba 04 00 00 00       	mov    edx,0x4
   1ba0f:	89 c7                	mov    edi,eax
   1ba11:	e8 8b 93 fe ff       	call   4da1 <stbi__malloc_mad3(int, int, int, int)>
   1ba16:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   1ba1a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1ba1d:	0f af 45 ec          	imul   eax,DWORD PTR [rbp-0x14]
   1ba21:	c1 e0 02             	shl    eax,0x2
   1ba24:	48 63 d0             	movsxd rdx,eax
   1ba27:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1ba2b:	be ff 00 00 00       	mov    esi,0xff
   1ba30:	48 89 c7             	mov    rdi,rax
   1ba33:	e8 a8 87 fe ff       	call   41e0 <memset@plt>
   1ba38:	48 8b 7d f0          	mov    rdi,QWORD PTR [rbp-0x10]
   1ba3c:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   1ba40:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   1ba43:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
   1ba46:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1ba4a:	49 89 f8             	mov    r8,rdi
   1ba4d:	48 89 c7             	mov    rdi,rax
   1ba50:	e8 a9 f9 ff ff       	call   1b3fe <stbi__pic_load_core(stbi__context*, int, int, int*, unsigned char*)>
   1ba55:	48 85 c0             	test   rax,rax
   1ba58:	0f 94 c0             	sete   al
   1ba5b:	84 c0                	test   al,al
   1ba5d:	74 14                	je     1ba73 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x17a>
   1ba5f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1ba63:	48 89 c7             	mov    rdi,rax
   1ba66:	e8 c5 8a fe ff       	call   4530 <free@plt>
   1ba6b:	48 c7 45 f0 00 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
   1ba73:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1ba77:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   1ba7a:	89 10                	mov    DWORD PTR [rax],edx
   1ba7c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1ba80:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   1ba83:	89 10                	mov    DWORD PTR [rax],edx
   1ba85:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
   1ba89:	75 09                	jne    1ba94 <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x19b>
   1ba8b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1ba8f:	8b 00                	mov    eax,DWORD PTR [rax]
   1ba91:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
   1ba94:	8b 75 ec             	mov    esi,DWORD PTR [rbp-0x14]
   1ba97:	8b 4d e8             	mov    ecx,DWORD PTR [rbp-0x18]
   1ba9a:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
   1ba9d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1baa1:	41 89 f0             	mov    r8d,esi
   1baa4:	be 04 00 00 00       	mov    esi,0x4
   1baa9:	48 89 c7             	mov    rdi,rax
   1baac:	e8 50 ae fe ff       	call   6901 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   1bab1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   1bab5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1bab9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1babd:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1bac6:	74 05                	je     1bacd <stbi__pic_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1d4>
   1bac8:	e8 13 8a fe ff       	call   44e0 <__stack_chk_fail@plt>
   1bacd:	c9                   	leave  
   1bace:	c3                   	ret    

000000000001bacf <stbi__pic_test(stbi__context*)>:
   1bacf:	55                   	push   rbp
   1bad0:	48 89 e5             	mov    rbp,rsp
   1bad3:	48 83 ec 20          	sub    rsp,0x20
   1bad7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1badb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1badf:	48 89 c7             	mov    rdi,rax
   1bae2:	e8 b4 f7 ff ff       	call   1b29b <stbi__pic_test_core(stbi__context*)>
   1bae7:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1baea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1baee:	48 89 c7             	mov    rdi,rax
   1baf1:	e8 36 90 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1baf6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1baf9:	c9                   	leave  
   1bafa:	c3                   	ret    

000000000001bafb <stbi__gif_test_raw(stbi__context*)>:
   1bafb:	55                   	push   rbp
   1bafc:	48 89 e5             	mov    rbp,rsp
   1baff:	48 83 ec 20          	sub    rsp,0x20
   1bb03:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1bb07:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bb0b:	48 89 c7             	mov    rdi,rax
   1bb0e:	e8 fe a9 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bb13:	3c 47                	cmp    al,0x47
   1bb15:	75 30                	jne    1bb47 <stbi__gif_test_raw(stbi__context*)+0x4c>
   1bb17:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bb1b:	48 89 c7             	mov    rdi,rax
   1bb1e:	e8 ee a9 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bb23:	3c 49                	cmp    al,0x49
   1bb25:	75 20                	jne    1bb47 <stbi__gif_test_raw(stbi__context*)+0x4c>
   1bb27:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bb2b:	48 89 c7             	mov    rdi,rax
   1bb2e:	e8 de a9 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bb33:	3c 46                	cmp    al,0x46
   1bb35:	75 10                	jne    1bb47 <stbi__gif_test_raw(stbi__context*)+0x4c>
   1bb37:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bb3b:	48 89 c7             	mov    rdi,rax
   1bb3e:	e8 ce a9 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bb43:	3c 38                	cmp    al,0x38
   1bb45:	74 07                	je     1bb4e <stbi__gif_test_raw(stbi__context*)+0x53>
   1bb47:	b8 01 00 00 00       	mov    eax,0x1
   1bb4c:	eb 05                	jmp    1bb53 <stbi__gif_test_raw(stbi__context*)+0x58>
   1bb4e:	b8 00 00 00 00       	mov    eax,0x0
   1bb53:	84 c0                	test   al,al
   1bb55:	74 07                	je     1bb5e <stbi__gif_test_raw(stbi__context*)+0x63>
   1bb57:	b8 00 00 00 00       	mov    eax,0x0
   1bb5c:	eb 46                	jmp    1bba4 <stbi__gif_test_raw(stbi__context*)+0xa9>
   1bb5e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bb62:	48 89 c7             	mov    rdi,rax
   1bb65:	e8 a7 a9 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bb6a:	0f b6 c0             	movzx  eax,al
   1bb6d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1bb70:	83 7d fc 39          	cmp    DWORD PTR [rbp-0x4],0x39
   1bb74:	74 0d                	je     1bb83 <stbi__gif_test_raw(stbi__context*)+0x88>
   1bb76:	83 7d fc 37          	cmp    DWORD PTR [rbp-0x4],0x37
   1bb7a:	74 07                	je     1bb83 <stbi__gif_test_raw(stbi__context*)+0x88>
   1bb7c:	b8 00 00 00 00       	mov    eax,0x0
   1bb81:	eb 21                	jmp    1bba4 <stbi__gif_test_raw(stbi__context*)+0xa9>
   1bb83:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bb87:	48 89 c7             	mov    rdi,rax
   1bb8a:	e8 82 a9 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bb8f:	3c 61                	cmp    al,0x61
   1bb91:	0f 95 c0             	setne  al
   1bb94:	84 c0                	test   al,al
   1bb96:	74 07                	je     1bb9f <stbi__gif_test_raw(stbi__context*)+0xa4>
   1bb98:	b8 00 00 00 00       	mov    eax,0x0
   1bb9d:	eb 05                	jmp    1bba4 <stbi__gif_test_raw(stbi__context*)+0xa9>
   1bb9f:	b8 01 00 00 00       	mov    eax,0x1
   1bba4:	c9                   	leave  
   1bba5:	c3                   	ret    

000000000001bba6 <stbi__gif_test(stbi__context*)>:
   1bba6:	55                   	push   rbp
   1bba7:	48 89 e5             	mov    rbp,rsp
   1bbaa:	48 83 ec 20          	sub    rsp,0x20
   1bbae:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1bbb2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bbb6:	48 89 c7             	mov    rdi,rax
   1bbb9:	e8 3d ff ff ff       	call   1bafb <stbi__gif_test_raw(stbi__context*)>
   1bbbe:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1bbc1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bbc5:	48 89 c7             	mov    rdi,rax
   1bbc8:	e8 5f 8f fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1bbcd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1bbd0:	c9                   	leave  
   1bbd1:	c3                   	ret    

000000000001bbd2 <stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)>:
   1bbd2:	55                   	push   rbp
   1bbd3:	48 89 e5             	mov    rbp,rsp
   1bbd6:	53                   	push   rbx
   1bbd7:	48 83 ec 38          	sub    rsp,0x38
   1bbdb:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   1bbdf:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   1bbe3:	89 55 cc             	mov    DWORD PTR [rbp-0x34],edx
   1bbe6:	89 4d c8             	mov    DWORD PTR [rbp-0x38],ecx
   1bbe9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   1bbf0:	e9 9a 00 00 00       	jmp    1bc8f <stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)+0xbd>
   1bbf5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1bbf8:	48 98                	cdqe   
   1bbfa:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1bc02:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1bc06:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   1bc0a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bc0e:	48 89 c7             	mov    rdi,rax
   1bc11:	e8 fb a8 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bc16:	88 43 02             	mov    BYTE PTR [rbx+0x2],al
   1bc19:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1bc1c:	48 98                	cdqe   
   1bc1e:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1bc26:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1bc2a:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   1bc2e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bc32:	48 89 c7             	mov    rdi,rax
   1bc35:	e8 d7 a8 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bc3a:	88 43 01             	mov    BYTE PTR [rbx+0x1],al
   1bc3d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1bc40:	48 98                	cdqe   
   1bc42:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1bc4a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1bc4e:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   1bc52:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bc56:	48 89 c7             	mov    rdi,rax
   1bc59:	e8 b3 a8 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bc5e:	88 03                	mov    BYTE PTR [rbx],al
   1bc60:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
   1bc63:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
   1bc66:	75 07                	jne    1bc6f <stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)+0x9d>
   1bc68:	ba 00 00 00 00       	mov    edx,0x0
   1bc6d:	eb 05                	jmp    1bc74 <stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)+0xa2>
   1bc6f:	ba ff ff ff ff       	mov    edx,0xffffffff
   1bc74:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1bc77:	48 98                	cdqe   
   1bc79:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   1bc81:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1bc85:	48 01 c8             	add    rax,rcx
   1bc88:	88 50 03             	mov    BYTE PTR [rax+0x3],dl
   1bc8b:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
   1bc8f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1bc92:	3b 45 cc             	cmp    eax,DWORD PTR [rbp-0x34]
   1bc95:	0f 8c 5a ff ff ff    	jl     1bbf5 <stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)+0x23>
   1bc9b:	90                   	nop
   1bc9c:	90                   	nop
   1bc9d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   1bca1:	c9                   	leave  
   1bca2:	c3                   	ret    

000000000001bca3 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)>:
   1bca3:	55                   	push   rbp
   1bca4:	48 89 e5             	mov    rbp,rsp
   1bca7:	48 83 ec 30          	sub    rsp,0x30
   1bcab:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1bcaf:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1bcb3:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1bcb7:	89 4d d4             	mov    DWORD PTR [rbp-0x2c],ecx
   1bcba:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bcbe:	48 89 c7             	mov    rdi,rax
   1bcc1:	e8 4b a8 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bcc6:	3c 47                	cmp    al,0x47
   1bcc8:	75 30                	jne    1bcfa <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x57>
   1bcca:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bcce:	48 89 c7             	mov    rdi,rax
   1bcd1:	e8 3b a8 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bcd6:	3c 49                	cmp    al,0x49
   1bcd8:	75 20                	jne    1bcfa <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x57>
   1bcda:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bcde:	48 89 c7             	mov    rdi,rax
   1bce1:	e8 2b a8 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bce6:	3c 46                	cmp    al,0x46
   1bce8:	75 10                	jne    1bcfa <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x57>
   1bcea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bcee:	48 89 c7             	mov    rdi,rax
   1bcf1:	e8 1b a8 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bcf6:	3c 38                	cmp    al,0x38
   1bcf8:	74 07                	je     1bd01 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x5e>
   1bcfa:	b8 01 00 00 00       	mov    eax,0x1
   1bcff:	eb 05                	jmp    1bd06 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x63>
   1bd01:	b8 00 00 00 00       	mov    eax,0x0
   1bd06:	84 c0                	test   al,al
   1bd08:	74 14                	je     1bd1e <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x7b>
   1bd0a:	48 8d 05 66 f4 01 00 	lea    rax,[rip+0x1f466]        # 3b177 <stbi__depth_scale_table+0x57f>
   1bd11:	48 89 c7             	mov    rdi,rax
   1bd14:	e8 59 8e fe ff       	call   4b72 <stbi__err(char const*)>
   1bd19:	e9 39 01 00 00       	jmp    1be57 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x1b4>
   1bd1e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bd22:	48 89 c7             	mov    rdi,rax
   1bd25:	e8 e7 a7 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bd2a:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
   1bd2d:	80 7d ff 37          	cmp    BYTE PTR [rbp-0x1],0x37
   1bd31:	74 1a                	je     1bd4d <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0xaa>
   1bd33:	80 7d ff 39          	cmp    BYTE PTR [rbp-0x1],0x39
   1bd37:	74 14                	je     1bd4d <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0xaa>
   1bd39:	48 8d 05 37 f4 01 00 	lea    rax,[rip+0x1f437]        # 3b177 <stbi__depth_scale_table+0x57f>
   1bd40:	48 89 c7             	mov    rdi,rax
   1bd43:	e8 2a 8e fe ff       	call   4b72 <stbi__err(char const*)>
   1bd48:	e9 0a 01 00 00       	jmp    1be57 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x1b4>
   1bd4d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bd51:	48 89 c7             	mov    rdi,rax
   1bd54:	e8 b8 a7 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bd59:	3c 61                	cmp    al,0x61
   1bd5b:	0f 95 c0             	setne  al
   1bd5e:	84 c0                	test   al,al
   1bd60:	74 14                	je     1bd76 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0xd3>
   1bd62:	48 8d 05 0e f4 01 00 	lea    rax,[rip+0x1f40e]        # 3b177 <stbi__depth_scale_table+0x57f>
   1bd69:	48 89 c7             	mov    rdi,rax
   1bd6c:	e8 01 8e fe ff       	call   4b72 <stbi__err(char const*)>
   1bd71:	e9 e1 00 00 00       	jmp    1be57 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x1b4>
   1bd76:	48 8d 05 02 f4 01 00 	lea    rax,[rip+0x1f402]        # 3b17f <stbi__depth_scale_table+0x587>
   1bd7d:	64 48 89 04 25 f0 ff ff ff 	mov    QWORD PTR fs:0xfffffffffffffff0,rax
   1bd86:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bd8a:	48 89 c7             	mov    rdi,rax
   1bd8d:	e8 d8 aa fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1bd92:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1bd96:	89 02                	mov    DWORD PTR [rdx],eax
   1bd98:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bd9c:	48 89 c7             	mov    rdi,rax
   1bd9f:	e8 c6 aa fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1bda4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1bda8:	89 42 04             	mov    DWORD PTR [rdx+0x4],eax
   1bdab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bdaf:	48 89 c7             	mov    rdi,rax
   1bdb2:	e8 5a a7 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bdb7:	0f b6 d0             	movzx  edx,al
   1bdba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1bdbe:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   1bdc1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bdc5:	48 89 c7             	mov    rdi,rax
   1bdc8:	e8 44 a7 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bdcd:	0f b6 d0             	movzx  edx,al
   1bdd0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1bdd4:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
   1bdd7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1bddb:	48 89 c7             	mov    rdi,rax
   1bdde:	e8 2e a7 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1bde3:	0f b6 d0             	movzx  edx,al
   1bde6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1bdea:	89 50 28             	mov    DWORD PTR [rax+0x28],edx
   1bded:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1bdf1:	c7 40 2c ff ff ff ff 	mov    DWORD PTR [rax+0x2c],0xffffffff
   1bdf8:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
   1bdfd:	74 0a                	je     1be09 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x166>
   1bdff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1be03:	c7 00 04 00 00 00    	mov    DWORD PTR [rax],0x4
   1be09:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
   1be0d:	74 07                	je     1be16 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x173>
   1be0f:	b8 01 00 00 00       	mov    eax,0x1
   1be14:	eb 41                	jmp    1be57 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x1b4>
   1be16:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1be1a:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1be1d:	25 80 00 00 00       	and    eax,0x80
   1be22:	85 c0                	test   eax,eax
   1be24:	74 2c                	je     1be52 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)+0x1af>
   1be26:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1be2a:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1be2d:	83 e0 07             	and    eax,0x7
   1be30:	ba 02 00 00 00       	mov    edx,0x2
   1be35:	89 c1                	mov    ecx,eax
   1be37:	d3 e2                	shl    edx,cl
   1be39:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1be3d:	48 8d 70 34          	lea    rsi,[rax+0x34]
   1be41:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1be45:	b9 ff ff ff ff       	mov    ecx,0xffffffff
   1be4a:	48 89 c7             	mov    rdi,rax
   1be4d:	e8 80 fd ff ff       	call   1bbd2 <stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)>
   1be52:	b8 01 00 00 00       	mov    eax,0x1
   1be57:	c9                   	leave  
   1be58:	c3                   	ret    

000000000001be59 <stbi__gif_info_raw(stbi__context*, int*, int*, int*)>:
   1be59:	55                   	push   rbp
   1be5a:	48 89 e5             	mov    rbp,rsp
   1be5d:	48 83 ec 30          	sub    rsp,0x30
   1be61:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1be65:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1be69:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1be6d:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   1be71:	bf 70 88 00 00       	mov    edi,0x8870
   1be76:	e8 13 8d fe ff       	call   4b8e <stbi__malloc(unsigned long)>
   1be7b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1be7f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   1be83:	48 8b 75 f8          	mov    rsi,QWORD PTR [rbp-0x8]
   1be87:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1be8b:	b9 01 00 00 00       	mov    ecx,0x1
   1be90:	48 89 c7             	mov    rdi,rax
   1be93:	e8 0b fe ff ff       	call   1bca3 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)>
   1be98:	85 c0                	test   eax,eax
   1be9a:	0f 94 c0             	sete   al
   1be9d:	84 c0                	test   al,al
   1be9f:	74 1f                	je     1bec0 <stbi__gif_info_raw(stbi__context*, int*, int*, int*)+0x67>
   1bea1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1bea5:	48 89 c7             	mov    rdi,rax
   1bea8:	e8 83 86 fe ff       	call   4530 <free@plt>
   1bead:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1beb1:	48 89 c7             	mov    rdi,rax
   1beb4:	e8 73 8c fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1beb9:	b8 00 00 00 00       	mov    eax,0x0
   1bebe:	eb 38                	jmp    1bef8 <stbi__gif_info_raw(stbi__context*, int*, int*, int*)+0x9f>
   1bec0:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   1bec5:	74 0c                	je     1bed3 <stbi__gif_info_raw(stbi__context*, int*, int*, int*)+0x7a>
   1bec7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1becb:	8b 10                	mov    edx,DWORD PTR [rax]
   1becd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1bed1:	89 10                	mov    DWORD PTR [rax],edx
   1bed3:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
   1bed8:	74 0d                	je     1bee7 <stbi__gif_info_raw(stbi__context*, int*, int*, int*)+0x8e>
   1beda:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1bede:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
   1bee1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bee5:	89 10                	mov    DWORD PTR [rax],edx
   1bee7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1beeb:	48 89 c7             	mov    rdi,rax
   1beee:	e8 3d 86 fe ff       	call   4530 <free@plt>
   1bef3:	b8 01 00 00 00       	mov    eax,0x1
   1bef8:	c9                   	leave  
   1bef9:	c3                   	ret    

000000000001befa <stbi__out_gif_code(stbi__gif*, unsigned short)>:
   1befa:	55                   	push   rbp
   1befb:	48 89 e5             	mov    rbp,rsp
   1befe:	48 83 ec 30          	sub    rsp,0x30
   1bf02:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   1bf06:	89 f0                	mov    eax,esi
   1bf08:	66 89 45 d4          	mov    WORD PTR [rbp-0x2c],ax
   1bf0c:	0f b7 55 d4          	movzx  edx,WORD PTR [rbp-0x2c]
   1bf10:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bf14:	48 63 d2             	movsxd rdx,edx
   1bf17:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1bf1e:	0f b7 44 90 04       	movzx  eax,WORD PTR [rax+rdx*4+0x4]
   1bf23:	66 85 c0             	test   ax,ax
   1bf26:	78 28                	js     1bf50 <stbi__out_gif_code(stbi__gif*, unsigned short)+0x56>
   1bf28:	0f b7 55 d4          	movzx  edx,WORD PTR [rbp-0x2c]
   1bf2c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bf30:	48 63 d2             	movsxd rdx,edx
   1bf33:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1bf3a:	0f b7 44 90 04       	movzx  eax,WORD PTR [rax+rdx*4+0x4]
   1bf3f:	0f b7 d0             	movzx  edx,ax
   1bf42:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bf46:	89 d6                	mov    esi,edx
   1bf48:	48 89 c7             	mov    rdi,rax
   1bf4b:	e8 aa ff ff ff       	call   1befa <stbi__out_gif_code(stbi__gif*, unsigned short)>
   1bf50:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bf54:	8b 90 60 88 00 00    	mov    edx,DWORD PTR [rax+0x8860]
   1bf5a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bf5e:	8b 80 58 88 00 00    	mov    eax,DWORD PTR [rax+0x8858]
   1bf64:	39 c2                	cmp    edx,eax
   1bf66:	0f 8d be 01 00 00    	jge    1c12a <stbi__out_gif_code(stbi__gif*, unsigned short)+0x230>
   1bf6c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bf70:	8b 90 5c 88 00 00    	mov    edx,DWORD PTR [rax+0x885c]
   1bf76:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bf7a:	8b 80 60 88 00 00    	mov    eax,DWORD PTR [rax+0x8860]
   1bf80:	01 d0                	add    eax,edx
   1bf82:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   1bf85:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bf89:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   1bf8d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1bf90:	48 98                	cdqe   
   1bf92:	48 01 d0             	add    rax,rdx
   1bf95:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   1bf99:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bf9d:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   1bfa1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1bfa4:	8d 50 03             	lea    edx,[rax+0x3]
   1bfa7:	85 c0                	test   eax,eax
   1bfa9:	0f 48 c2             	cmovs  eax,edx
   1bfac:	c1 f8 02             	sar    eax,0x2
   1bfaf:	48 98                	cdqe   
   1bfb1:	48 01 c8             	add    rax,rcx
   1bfb4:	c6 00 01             	mov    BYTE PTR [rax],0x1
   1bfb7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bfbb:	48 8b 88 38 88 00 00 	mov    rcx,QWORD PTR [rax+0x8838]
   1bfc2:	0f b7 55 d4          	movzx  edx,WORD PTR [rbp-0x2c]
   1bfc6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1bfca:	48 63 d2             	movsxd rdx,edx
   1bfcd:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1bfd4:	0f b6 44 90 07       	movzx  eax,BYTE PTR [rax+rdx*4+0x7]
   1bfd9:	0f b6 c0             	movzx  eax,al
   1bfdc:	c1 e0 02             	shl    eax,0x2
   1bfdf:	48 98                	cdqe   
   1bfe1:	48 01 c8             	add    rax,rcx
   1bfe4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1bfe8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1bfec:	48 83 c0 03          	add    rax,0x3
   1bff0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1bff3:	3c 80                	cmp    al,0x80
   1bff5:	76 43                	jbe    1c03a <stbi__out_gif_code(stbi__gif*, unsigned short)+0x140>
   1bff7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1bffb:	0f b6 50 02          	movzx  edx,BYTE PTR [rax+0x2]
   1bfff:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1c003:	88 10                	mov    BYTE PTR [rax],dl
   1c005:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1c009:	48 8d 50 01          	lea    rdx,[rax+0x1]
   1c00d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1c011:	0f b6 40 01          	movzx  eax,BYTE PTR [rax+0x1]
   1c015:	88 02                	mov    BYTE PTR [rdx],al
   1c017:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1c01b:	48 8d 50 02          	lea    rdx,[rax+0x2]
   1c01f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1c023:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1c026:	88 02                	mov    BYTE PTR [rdx],al
   1c028:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1c02c:	48 8d 50 03          	lea    rdx,[rax+0x3]
   1c030:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1c034:	0f b6 40 03          	movzx  eax,BYTE PTR [rax+0x3]
   1c038:	88 02                	mov    BYTE PTR [rdx],al
   1c03a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c03e:	8b 80 5c 88 00 00    	mov    eax,DWORD PTR [rax+0x885c]
   1c044:	8d 50 04             	lea    edx,[rax+0x4]
   1c047:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c04b:	89 90 5c 88 00 00    	mov    DWORD PTR [rax+0x885c],edx
   1c051:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c055:	8b 90 5c 88 00 00    	mov    edx,DWORD PTR [rax+0x885c]
   1c05b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c05f:	8b 80 54 88 00 00    	mov    eax,DWORD PTR [rax+0x8854]
   1c065:	39 c2                	cmp    edx,eax
   1c067:	0f 8c be 00 00 00    	jl     1c12b <stbi__out_gif_code(stbi__gif*, unsigned short)+0x231>
   1c06d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c071:	8b 90 4c 88 00 00    	mov    edx,DWORD PTR [rax+0x884c]
   1c077:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c07b:	89 90 5c 88 00 00    	mov    DWORD PTR [rax+0x885c],edx
   1c081:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c085:	8b 90 60 88 00 00    	mov    edx,DWORD PTR [rax+0x8860]
   1c08b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c08f:	8b 80 44 88 00 00    	mov    eax,DWORD PTR [rax+0x8844]
   1c095:	01 c2                	add    edx,eax
   1c097:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c09b:	89 90 60 88 00 00    	mov    DWORD PTR [rax+0x8860],edx
   1c0a1:	eb 5b                	jmp    1c0fe <stbi__out_gif_code(stbi__gif*, unsigned short)+0x204>
   1c0a3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c0a7:	8b 90 64 88 00 00    	mov    edx,DWORD PTR [rax+0x8864]
   1c0ad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c0b1:	8b 80 40 88 00 00    	mov    eax,DWORD PTR [rax+0x8840]
   1c0b7:	89 c1                	mov    ecx,eax
   1c0b9:	d3 e2                	shl    edx,cl
   1c0bb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c0bf:	89 90 44 88 00 00    	mov    DWORD PTR [rax+0x8844],edx
   1c0c5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c0c9:	8b 90 50 88 00 00    	mov    edx,DWORD PTR [rax+0x8850]
   1c0cf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c0d3:	8b 80 44 88 00 00    	mov    eax,DWORD PTR [rax+0x8844]
   1c0d9:	d1 f8                	sar    eax,1
   1c0db:	01 c2                	add    edx,eax
   1c0dd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c0e1:	89 90 60 88 00 00    	mov    DWORD PTR [rax+0x8860],edx
   1c0e7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c0eb:	8b 80 40 88 00 00    	mov    eax,DWORD PTR [rax+0x8840]
   1c0f1:	8d 50 ff             	lea    edx,[rax-0x1]
   1c0f4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c0f8:	89 90 40 88 00 00    	mov    DWORD PTR [rax+0x8840],edx
   1c0fe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c102:	8b 90 60 88 00 00    	mov    edx,DWORD PTR [rax+0x8860]
   1c108:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c10c:	8b 80 58 88 00 00    	mov    eax,DWORD PTR [rax+0x8858]
   1c112:	39 c2                	cmp    edx,eax
   1c114:	7c 15                	jl     1c12b <stbi__out_gif_code(stbi__gif*, unsigned short)+0x231>
   1c116:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1c11a:	8b 80 40 88 00 00    	mov    eax,DWORD PTR [rax+0x8840]
   1c120:	85 c0                	test   eax,eax
   1c122:	0f 8f 7b ff ff ff    	jg     1c0a3 <stbi__out_gif_code(stbi__gif*, unsigned short)+0x1a9>
   1c128:	eb 01                	jmp    1c12b <stbi__out_gif_code(stbi__gif*, unsigned short)+0x231>
   1c12a:	90                   	nop
   1c12b:	c9                   	leave  
   1c12c:	c3                   	ret    

000000000001c12d <stbi__process_gif_raster(stbi__context*, stbi__gif*)>:
   1c12d:	55                   	push   rbp
   1c12e:	48 89 e5             	mov    rbp,rsp
   1c131:	48 83 ec 50          	sub    rsp,0x50
   1c135:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   1c139:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   1c13d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c141:	48 89 c7             	mov    rdi,rax
   1c144:	e8 c8 a3 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1c149:	88 45 cb             	mov    BYTE PTR [rbp-0x35],al
   1c14c:	80 7d cb 0c          	cmp    BYTE PTR [rbp-0x35],0xc
   1c150:	76 0a                	jbe    1c15c <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x2f>
   1c152:	b8 00 00 00 00       	mov    eax,0x0
   1c157:	e9 1c 03 00 00       	jmp    1c478 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x34b>
   1c15c:	0f b6 45 cb          	movzx  eax,BYTE PTR [rbp-0x35]
   1c160:	ba 01 00 00 00       	mov    edx,0x1
   1c165:	89 c1                	mov    ecx,eax
   1c167:	d3 e2                	shl    edx,cl
   1c169:	89 d0                	mov    eax,edx
   1c16b:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   1c16e:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x1
   1c175:	0f b6 45 cb          	movzx  eax,BYTE PTR [rbp-0x35]
   1c179:	83 c0 01             	add    eax,0x1
   1c17c:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   1c17f:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c182:	ba 01 00 00 00       	mov    edx,0x1
   1c187:	89 c1                	mov    ecx,eax
   1c189:	d3 e2                	shl    edx,cl
   1c18b:	89 d0                	mov    eax,edx
   1c18d:	83 e8 01             	sub    eax,0x1
   1c190:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   1c193:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   1c19a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
   1c1a1:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
   1c1a8:	eb 50                	jmp    1c1fa <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0xcd>
   1c1aa:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c1ae:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   1c1b1:	48 63 d2             	movsxd rdx,edx
   1c1b4:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1c1bb:	66 c7 44 90 04 ff ff 	mov    WORD PTR [rax+rdx*4+0x4],0xffff
   1c1c2:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   1c1c5:	89 c1                	mov    ecx,eax
   1c1c7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c1cb:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   1c1ce:	48 63 d2             	movsxd rdx,edx
   1c1d1:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1c1d8:	88 4c 90 06          	mov    BYTE PTR [rax+rdx*4+0x6],cl
   1c1dc:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   1c1df:	89 c1                	mov    ecx,eax
   1c1e1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c1e5:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   1c1e8:	48 63 d2             	movsxd rdx,edx
   1c1eb:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1c1f2:	88 4c 90 07          	mov    BYTE PTR [rax+rdx*4+0x7],cl
   1c1f6:	83 45 d0 01          	add    DWORD PTR [rbp-0x30],0x1
   1c1fa:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   1c1fd:	3b 45 f0             	cmp    eax,DWORD PTR [rbp-0x10]
   1c200:	7c a8                	jl     1c1aa <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x7d>
   1c202:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1c205:	83 c0 02             	add    eax,0x2
   1c208:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   1c20b:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [rbp-0x1c],0xffffffff
   1c212:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [rbp-0x34],0x0
   1c219:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1c21c:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
   1c21f:	7d 50                	jge    1c271 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x144>
   1c221:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   1c225:	75 25                	jne    1c24c <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x11f>
   1c227:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c22b:	48 89 c7             	mov    rdi,rax
   1c22e:	e8 de a2 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1c233:	0f b6 c0             	movzx  eax,al
   1c236:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   1c239:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   1c23d:	75 0d                	jne    1c24c <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x11f>
   1c23f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c243:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1c247:	e9 2c 02 00 00       	jmp    1c478 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x34b>
   1c24c:	83 6d cc 01          	sub    DWORD PTR [rbp-0x34],0x1
   1c250:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c254:	48 89 c7             	mov    rdi,rax
   1c257:	e8 b5 a2 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1c25c:	0f b6 d0             	movzx  edx,al
   1c25f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1c262:	89 c1                	mov    ecx,eax
   1c264:	d3 e2                	shl    edx,cl
   1c266:	89 d0                	mov    eax,edx
   1c268:	09 45 e8             	or     DWORD PTR [rbp-0x18],eax
   1c26b:	83 45 ec 08          	add    DWORD PTR [rbp-0x14],0x8
   1c26f:	eb a8                	jmp    1c219 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0xec>
   1c271:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1c274:	23 45 dc             	and    eax,DWORD PTR [rbp-0x24]
   1c277:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1c27a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c27d:	89 c1                	mov    ecx,eax
   1c27f:	d3 7d e8             	sar    DWORD PTR [rbp-0x18],cl
   1c282:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c285:	29 45 ec             	sub    DWORD PTR [rbp-0x14],eax
   1c288:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1c28b:	3b 45 f0             	cmp    eax,DWORD PTR [rbp-0x10]
   1c28e:	75 3a                	jne    1c2ca <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x19d>
   1c290:	0f b6 45 cb          	movzx  eax,BYTE PTR [rbp-0x35]
   1c294:	83 c0 01             	add    eax,0x1
   1c297:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   1c29a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c29d:	ba 01 00 00 00       	mov    edx,0x1
   1c2a2:	89 c1                	mov    ecx,eax
   1c2a4:	d3 e2                	shl    edx,cl
   1c2a6:	89 d0                	mov    eax,edx
   1c2a8:	83 e8 01             	sub    eax,0x1
   1c2ab:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   1c2ae:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1c2b1:	83 c0 02             	add    eax,0x2
   1c2b4:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   1c2b7:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [rbp-0x1c],0xffffffff
   1c2be:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
   1c2c5:	e9 4f ff ff ff       	jmp    1c219 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0xec>
   1c2ca:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   1c2cd:	83 c0 01             	add    eax,0x1
   1c2d0:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   1c2d3:	75 4e                	jne    1c323 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x1f6>
   1c2d5:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   1c2d8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c2dc:	89 d6                	mov    esi,edx
   1c2de:	48 89 c7             	mov    rdi,rax
   1c2e1:	e8 1f a3 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1c2e6:	eb 11                	jmp    1c2f9 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x1cc>
   1c2e8:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   1c2eb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c2ef:	89 d6                	mov    esi,edx
   1c2f1:	48 89 c7             	mov    rdi,rax
   1c2f4:	e8 0c a3 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1c2f9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c2fd:	48 89 c7             	mov    rdi,rax
   1c300:	e8 0c a2 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1c305:	0f b6 c0             	movzx  eax,al
   1c308:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   1c30b:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   1c30f:	0f 9f c0             	setg   al
   1c312:	84 c0                	test   al,al
   1c314:	75 d2                	jne    1c2e8 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x1bb>
   1c316:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c31a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1c31e:	e9 55 01 00 00       	jmp    1c478 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x34b>
   1c323:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1c326:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
   1c329:	0f 8f 35 01 00 00    	jg     1c464 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x337>
   1c32f:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
   1c333:	74 19                	je     1c34e <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x221>
   1c335:	48 8d 05 44 ee 01 00 	lea    rax,[rip+0x1ee44]        # 3b180 <stbi__depth_scale_table+0x588>
   1c33c:	48 89 c7             	mov    rdi,rax
   1c33f:	e8 2e 88 fe ff       	call   4b72 <stbi__err(char const*)>
   1c344:	b8 00 00 00 00       	mov    eax,0x0
   1c349:	e9 2a 01 00 00       	jmp    1c478 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x34b>
   1c34e:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   1c352:	0f 88 a4 00 00 00    	js     1c3fc <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x2cf>
   1c358:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   1c35b:	8d 50 01             	lea    edx,[rax+0x1]
   1c35e:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
   1c361:	48 98                	cdqe   
   1c363:	48 05 0c 02 00 00    	add    rax,0x20c
   1c369:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1c371:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c375:	48 01 d0             	add    rax,rdx
   1c378:	48 83 c0 04          	add    rax,0x4
   1c37c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1c380:	81 7d e0 00 20 00 00 	cmp    DWORD PTR [rbp-0x20],0x2000
   1c387:	7e 19                	jle    1c3a2 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x275>
   1c389:	48 8d 05 fe ed 01 00 	lea    rax,[rip+0x1edfe]        # 3b18e <stbi__depth_scale_table+0x596>
   1c390:	48 89 c7             	mov    rdi,rax
   1c393:	e8 da 87 fe ff       	call   4b72 <stbi__err(char const*)>
   1c398:	b8 00 00 00 00       	mov    eax,0x0
   1c39d:	e9 d6 00 00 00       	jmp    1c478 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x34b>
   1c3a2:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   1c3a5:	89 c2                	mov    edx,eax
   1c3a7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1c3ab:	66 89 10             	mov    WORD PTR [rax],dx
   1c3ae:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c3b2:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   1c3b5:	48 63 d2             	movsxd rdx,edx
   1c3b8:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1c3bf:	0f b6 54 90 06       	movzx  edx,BYTE PTR [rax+rdx*4+0x6]
   1c3c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1c3c8:	88 50 02             	mov    BYTE PTR [rax+0x2],dl
   1c3cb:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1c3ce:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
   1c3d1:	75 0a                	jne    1c3dd <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x2b0>
   1c3d3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1c3d7:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1c3db:	eb 16                	jmp    1c3f3 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x2c6>
   1c3dd:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c3e1:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   1c3e4:	48 63 d2             	movsxd rdx,edx
   1c3e7:	48 81 c2 0c 02 00 00 	add    rdx,0x20c
   1c3ee:	0f b6 44 90 06       	movzx  eax,BYTE PTR [rax+rdx*4+0x6]
   1c3f3:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1c3f7:	88 42 03             	mov    BYTE PTR [rdx+0x3],al
   1c3fa:	eb 1e                	jmp    1c41a <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x2ed>
   1c3fc:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1c3ff:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
   1c402:	75 16                	jne    1c41a <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x2ed>
   1c404:	48 8d 05 92 ed 01 00 	lea    rax,[rip+0x1ed92]        # 3b19d <stbi__depth_scale_table+0x5a5>
   1c40b:	48 89 c7             	mov    rdi,rax
   1c40e:	e8 5f 87 fe ff       	call   4b72 <stbi__err(char const*)>
   1c413:	b8 00 00 00 00       	mov    eax,0x0
   1c418:	eb 5e                	jmp    1c478 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x34b>
   1c41a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1c41d:	0f b7 d0             	movzx  edx,ax
   1c420:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c424:	89 d6                	mov    esi,edx
   1c426:	48 89 c7             	mov    rdi,rax
   1c429:	e8 cc fa ff ff       	call   1befa <stbi__out_gif_code(stbi__gif*, unsigned short)>
   1c42e:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   1c431:	23 45 dc             	and    eax,DWORD PTR [rbp-0x24]
   1c434:	85 c0                	test   eax,eax
   1c436:	75 21                	jne    1c459 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x32c>
   1c438:	81 7d e0 ff 0f 00 00 	cmp    DWORD PTR [rbp-0x20],0xfff
   1c43f:	7f 18                	jg     1c459 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0x32c>
   1c441:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   1c445:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c448:	ba 01 00 00 00       	mov    edx,0x1
   1c44d:	89 c1                	mov    ecx,eax
   1c44f:	d3 e2                	shl    edx,cl
   1c451:	89 d0                	mov    eax,edx
   1c453:	83 e8 01             	sub    eax,0x1
   1c456:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   1c459:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1c45c:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   1c45f:	e9 b5 fd ff ff       	jmp    1c219 <stbi__process_gif_raster(stbi__context*, stbi__gif*)+0xec>
   1c464:	48 8d 05 32 ed 01 00 	lea    rax,[rip+0x1ed32]        # 3b19d <stbi__depth_scale_table+0x5a5>
   1c46b:	48 89 c7             	mov    rdi,rax
   1c46e:	e8 ff 86 fe ff       	call   4b72 <stbi__err(char const*)>
   1c473:	b8 00 00 00 00       	mov    eax,0x0
   1c478:	c9                   	leave  
   1c479:	c3                   	ret    

000000000001c47a <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)>:
   1c47a:	55                   	push   rbp
   1c47b:	48 89 e5             	mov    rbp,rsp
   1c47e:	48 83 ec 70          	sub    rsp,0x70
   1c482:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   1c486:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   1c48a:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
   1c48e:	89 4d a4             	mov    DWORD PTR [rbp-0x5c],ecx
   1c491:	4c 89 45 98          	mov    QWORD PTR [rbp-0x68],r8
   1c495:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [rbp-0x30],0x0
   1c49c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c4a0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1c4a4:	48 85 c0             	test   rax,rax
   1c4a7:	0f 85 67 01 00 00    	jne    1c614 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x19a>
   1c4ad:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   1c4b1:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
   1c4b5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c4b9:	b9 00 00 00 00       	mov    ecx,0x0
   1c4be:	48 89 c7             	mov    rdi,rax
   1c4c1:	e8 dd f7 ff ff       	call   1bca3 <stbi__gif_header(stbi__context*, stbi__gif*, int*, int)>
   1c4c6:	85 c0                	test   eax,eax
   1c4c8:	0f 94 c0             	sete   al
   1c4cb:	84 c0                	test   al,al
   1c4cd:	74 0a                	je     1c4d9 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x5f>
   1c4cf:	b8 00 00 00 00       	mov    eax,0x0
   1c4d4:	e9 50 07 00 00       	jmp    1cc29 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7af>
   1c4d9:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c4dd:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
   1c4e0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c4e4:	8b 00                	mov    eax,DWORD PTR [rax]
   1c4e6:	b9 00 00 00 00       	mov    ecx,0x0
   1c4eb:	89 c6                	mov    esi,eax
   1c4ed:	bf 04 00 00 00       	mov    edi,0x4
   1c4f2:	e8 65 87 fe ff       	call   4c5c <stbi__mad3sizes_valid(int, int, int, int)>
   1c4f7:	85 c0                	test   eax,eax
   1c4f9:	0f 94 c0             	sete   al
   1c4fc:	84 c0                	test   al,al
   1c4fe:	74 19                	je     1c519 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x9f>
   1c500:	48 8d 05 45 e1 01 00 	lea    rax,[rip+0x1e145]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   1c507:	48 89 c7             	mov    rdi,rax
   1c50a:	e8 63 86 fe ff       	call   4b72 <stbi__err(char const*)>
   1c50f:	b8 00 00 00 00       	mov    eax,0x0
   1c514:	e9 10 07 00 00       	jmp    1cc29 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7af>
   1c519:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c51d:	8b 10                	mov    edx,DWORD PTR [rax]
   1c51f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c523:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1c526:	0f af c2             	imul   eax,edx
   1c529:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   1c52c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c52f:	c1 e0 02             	shl    eax,0x2
   1c532:	48 98                	cdqe   
   1c534:	48 89 c7             	mov    rdi,rax
   1c537:	e8 52 86 fe ff       	call   4b8e <stbi__malloc(unsigned long)>
   1c53c:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   1c540:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
   1c544:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c547:	c1 e0 02             	shl    eax,0x2
   1c54a:	48 98                	cdqe   
   1c54c:	48 89 c7             	mov    rdi,rax
   1c54f:	e8 3a 86 fe ff       	call   4b8e <stbi__malloc(unsigned long)>
   1c554:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   1c558:	48 89 42 10          	mov    QWORD PTR [rdx+0x10],rax
   1c55c:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c55f:	48 98                	cdqe   
   1c561:	48 89 c7             	mov    rdi,rax
   1c564:	e8 25 86 fe ff       	call   4b8e <stbi__malloc(unsigned long)>
   1c569:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   1c56d:	48 89 42 18          	mov    QWORD PTR [rdx+0x18],rax
   1c571:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c575:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1c579:	48 85 c0             	test   rax,rax
   1c57c:	74 1a                	je     1c598 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x11e>
   1c57e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c582:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   1c586:	48 85 c0             	test   rax,rax
   1c589:	74 0d                	je     1c598 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x11e>
   1c58b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c58f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   1c593:	48 85 c0             	test   rax,rax
   1c596:	75 19                	jne    1c5b1 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x137>
   1c598:	48 8d 05 94 da 01 00 	lea    rax,[rip+0x1da94]        # 3a033 <_IO_stdin_used+0x33>
   1c59f:	48 89 c7             	mov    rdi,rax
   1c5a2:	e8 cb 85 fe ff       	call   4b72 <stbi__err(char const*)>
   1c5a7:	b8 00 00 00 00       	mov    eax,0x0
   1c5ac:	e9 78 06 00 00       	jmp    1cc29 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7af>
   1c5b1:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c5b4:	c1 e0 02             	shl    eax,0x2
   1c5b7:	48 63 d0             	movsxd rdx,eax
   1c5ba:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c5be:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   1c5c2:	be 00 00 00 00       	mov    esi,0x0
   1c5c7:	48 89 c7             	mov    rdi,rax
   1c5ca:	e8 11 7c fe ff       	call   41e0 <memset@plt>
   1c5cf:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c5d2:	c1 e0 02             	shl    eax,0x2
   1c5d5:	48 63 d0             	movsxd rdx,eax
   1c5d8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c5dc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   1c5e0:	be 00 00 00 00       	mov    esi,0x0
   1c5e5:	48 89 c7             	mov    rdi,rax
   1c5e8:	e8 f3 7b fe ff       	call   41e0 <memset@plt>
   1c5ed:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   1c5f0:	48 63 d0             	movsxd rdx,eax
   1c5f3:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c5f7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   1c5fb:	be 00 00 00 00       	mov    esi,0x0
   1c600:	48 89 c7             	mov    rdi,rax
   1c603:	e8 d8 7b fe ff       	call   41e0 <memset@plt>
   1c608:	c7 45 d0 01 00 00 00 	mov    DWORD PTR [rbp-0x30],0x1
   1c60f:	e9 21 01 00 00       	jmp    1c735 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x2bb>
   1c614:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c618:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
   1c61b:	c1 f8 02             	sar    eax,0x2
   1c61e:	83 e0 07             	and    eax,0x7
   1c621:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   1c624:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c628:	8b 10                	mov    edx,DWORD PTR [rax]
   1c62a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c62e:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1c631:	0f af c2             	imul   eax,edx
   1c634:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   1c637:	83 7d cc 03          	cmp    DWORD PTR [rbp-0x34],0x3
   1c63b:	75 0e                	jne    1c64b <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x1d1>
   1c63d:	48 83 7d 98 00       	cmp    QWORD PTR [rbp-0x68],0x0
   1c642:	75 07                	jne    1c64b <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x1d1>
   1c644:	c7 45 cc 02 00 00 00 	mov    DWORD PTR [rbp-0x34],0x2
   1c64b:	83 7d cc 03          	cmp    DWORD PTR [rbp-0x34],0x3
   1c64f:	75 56                	jne    1c6a7 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x22d>
   1c651:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
   1c658:	eb 43                	jmp    1c69d <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x223>
   1c65a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c65e:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   1c662:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c665:	48 98                	cdqe   
   1c667:	48 01 d0             	add    rax,rdx
   1c66a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1c66d:	84 c0                	test   al,al
   1c66f:	74 28                	je     1c699 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x21f>
   1c671:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c674:	c1 e0 02             	shl    eax,0x2
   1c677:	48 63 d0             	movsxd rdx,eax
   1c67a:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1c67e:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   1c682:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c686:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   1c68a:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c68d:	c1 e0 02             	shl    eax,0x2
   1c690:	48 98                	cdqe   
   1c692:	48 01 c2             	add    rdx,rax
   1c695:	8b 01                	mov    eax,DWORD PTR [rcx]
   1c697:	89 02                	mov    DWORD PTR [rdx],eax
   1c699:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
   1c69d:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c6a0:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
   1c6a3:	7c b5                	jl     1c65a <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x1e0>
   1c6a5:	eb 5d                	jmp    1c704 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x28a>
   1c6a7:	83 7d cc 02          	cmp    DWORD PTR [rbp-0x34],0x2
   1c6ab:	75 57                	jne    1c704 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x28a>
   1c6ad:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
   1c6b4:	eb 46                	jmp    1c6fc <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x282>
   1c6b6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c6ba:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   1c6be:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c6c1:	48 98                	cdqe   
   1c6c3:	48 01 d0             	add    rax,rdx
   1c6c6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1c6c9:	84 c0                	test   al,al
   1c6cb:	74 2b                	je     1c6f8 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x27e>
   1c6cd:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c6d1:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   1c6d5:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c6d8:	c1 e0 02             	shl    eax,0x2
   1c6db:	48 98                	cdqe   
   1c6dd:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   1c6e1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c6e5:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   1c6e9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c6ec:	c1 e0 02             	shl    eax,0x2
   1c6ef:	48 98                	cdqe   
   1c6f1:	48 01 c2             	add    rdx,rax
   1c6f4:	8b 01                	mov    eax,DWORD PTR [rcx]
   1c6f6:	89 02                	mov    DWORD PTR [rdx],eax
   1c6f8:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
   1c6fc:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1c6ff:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
   1c702:	7c b2                	jl     1c6b6 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x23c>
   1c704:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c708:	8b 10                	mov    edx,DWORD PTR [rax]
   1c70a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c70e:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1c711:	0f af c2             	imul   eax,edx
   1c714:	c1 e0 02             	shl    eax,0x2
   1c717:	48 63 d0             	movsxd rdx,eax
   1c71a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c71e:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   1c722:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c726:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   1c72a:	48 89 ce             	mov    rsi,rcx
   1c72d:	48 89 c7             	mov    rdi,rax
   1c730:	e8 3b 7c fe ff       	call   4370 <memcpy@plt>
   1c735:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c739:	8b 10                	mov    edx,DWORD PTR [rax]
   1c73b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c73f:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1c742:	0f af c2             	imul   eax,edx
   1c745:	48 63 d0             	movsxd rdx,eax
   1c748:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c74c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   1c750:	be 00 00 00 00       	mov    esi,0x0
   1c755:	48 89 c7             	mov    rdi,rax
   1c758:	e8 83 7a fe ff       	call   41e0 <memset@plt>
   1c75d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c761:	48 89 c7             	mov    rdi,rax
   1c764:	e8 a8 9d fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1c769:	0f b6 c0             	movzx  eax,al
   1c76c:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   1c76f:	83 7d dc 3b          	cmp    DWORD PTR [rbp-0x24],0x3b
   1c773:	0f 84 8f 04 00 00    	je     1cc08 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x78e>
   1c779:	83 7d dc 3b          	cmp    DWORD PTR [rbp-0x24],0x3b
   1c77d:	0f 8f 8b 04 00 00    	jg     1cc0e <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x794>
   1c783:	83 7d dc 21          	cmp    DWORD PTR [rbp-0x24],0x21
   1c787:	0f 84 44 03 00 00    	je     1cad1 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x657>
   1c78d:	83 7d dc 2c          	cmp    DWORD PTR [rbp-0x24],0x2c
   1c791:	0f 85 77 04 00 00    	jne    1cc0e <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x794>
   1c797:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c79b:	48 89 c7             	mov    rdi,rax
   1c79e:	e8 c7 a0 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1c7a3:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   1c7a6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c7aa:	48 89 c7             	mov    rdi,rax
   1c7ad:	e8 b8 a0 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1c7b2:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   1c7b5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c7b9:	48 89 c7             	mov    rdi,rax
   1c7bc:	e8 a9 a0 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1c7c1:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   1c7c4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c7c8:	48 89 c7             	mov    rdi,rax
   1c7cb:	e8 9a a0 fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1c7d0:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   1c7d3:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   1c7d6:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1c7d9:	01 c2                	add    edx,eax
   1c7db:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c7df:	8b 00                	mov    eax,DWORD PTR [rax]
   1c7e1:	39 c2                	cmp    edx,eax
   1c7e3:	7f 13                	jg     1c7f8 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x37e>
   1c7e5:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   1c7e8:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   1c7eb:	01 c2                	add    edx,eax
   1c7ed:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c7f1:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1c7f4:	39 c2                	cmp    edx,eax
   1c7f6:	7e 19                	jle    1c811 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x397>
   1c7f8:	48 8d 05 b5 e9 01 00 	lea    rax,[rip+0x1e9b5]        # 3b1b4 <stbi__depth_scale_table+0x5bc>
   1c7ff:	48 89 c7             	mov    rdi,rax
   1c802:	e8 6b 83 fe ff       	call   4b72 <stbi__err(char const*)>
   1c807:	b8 00 00 00 00       	mov    eax,0x0
   1c80c:	e9 18 04 00 00       	jmp    1cc29 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7af>
   1c811:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c815:	8b 00                	mov    eax,DWORD PTR [rax]
   1c817:	8d 14 85 00 00 00 00 	lea    edx,[rax*4+0x0]
   1c81e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c822:	89 90 64 88 00 00    	mov    DWORD PTR [rax+0x8864],edx
   1c828:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   1c82b:	8d 14 85 00 00 00 00 	lea    edx,[rax*4+0x0]
   1c832:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c836:	89 90 4c 88 00 00    	mov    DWORD PTR [rax+0x884c],edx
   1c83c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c840:	8b 80 64 88 00 00    	mov    eax,DWORD PTR [rax+0x8864]
   1c846:	0f af 45 e4          	imul   eax,DWORD PTR [rbp-0x1c]
   1c84a:	89 c2                	mov    edx,eax
   1c84c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c850:	89 90 50 88 00 00    	mov    DWORD PTR [rax+0x8850],edx
   1c856:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c85a:	8b 90 4c 88 00 00    	mov    edx,DWORD PTR [rax+0x884c]
   1c860:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1c863:	c1 e0 02             	shl    eax,0x2
   1c866:	01 c2                	add    edx,eax
   1c868:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c86c:	89 90 54 88 00 00    	mov    DWORD PTR [rax+0x8854],edx
   1c872:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c876:	8b 90 50 88 00 00    	mov    edx,DWORD PTR [rax+0x8850]
   1c87c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c880:	8b 80 64 88 00 00    	mov    eax,DWORD PTR [rax+0x8864]
   1c886:	0f af 45 ec          	imul   eax,DWORD PTR [rbp-0x14]
   1c88a:	01 c2                	add    edx,eax
   1c88c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c890:	89 90 58 88 00 00    	mov    DWORD PTR [rax+0x8858],edx
   1c896:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c89a:	8b 90 4c 88 00 00    	mov    edx,DWORD PTR [rax+0x884c]
   1c8a0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c8a4:	89 90 5c 88 00 00    	mov    DWORD PTR [rax+0x885c],edx
   1c8aa:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c8ae:	8b 90 50 88 00 00    	mov    edx,DWORD PTR [rax+0x8850]
   1c8b4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c8b8:	89 90 60 88 00 00    	mov    DWORD PTR [rax+0x8860],edx
   1c8be:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
   1c8c2:	75 14                	jne    1c8d8 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x45e>
   1c8c4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c8c8:	8b 90 58 88 00 00    	mov    edx,DWORD PTR [rax+0x8858]
   1c8ce:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c8d2:	89 90 60 88 00 00    	mov    DWORD PTR [rax+0x8860],edx
   1c8d8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1c8dc:	48 89 c7             	mov    rdi,rax
   1c8df:	e8 2d 9c fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1c8e4:	0f b6 d0             	movzx  edx,al
   1c8e7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c8eb:	89 90 48 88 00 00    	mov    DWORD PTR [rax+0x8848],edx
   1c8f1:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c8f5:	8b 80 48 88 00 00    	mov    eax,DWORD PTR [rax+0x8848]
   1c8fb:	83 e0 40             	and    eax,0x40
   1c8fe:	85 c0                	test   eax,eax
   1c900:	74 2b                	je     1c92d <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x4b3>
   1c902:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c906:	8b 80 64 88 00 00    	mov    eax,DWORD PTR [rax+0x8864]
   1c90c:	8d 14 c5 00 00 00 00 	lea    edx,[rax*8+0x0]
   1c913:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c917:	89 90 44 88 00 00    	mov    DWORD PTR [rax+0x8844],edx
   1c91d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c921:	c7 80 40 88 00 00 03 00 00 00 	mov    DWORD PTR [rax+0x8840],0x3
   1c92b:	eb 22                	jmp    1c94f <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x4d5>
   1c92d:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c931:	8b 90 64 88 00 00    	mov    edx,DWORD PTR [rax+0x8864]
   1c937:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c93b:	89 90 44 88 00 00    	mov    DWORD PTR [rax+0x8844],edx
   1c941:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c945:	c7 80 40 88 00 00 00 00 00 00 	mov    DWORD PTR [rax+0x8840],0x0
   1c94f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c953:	8b 80 48 88 00 00    	mov    eax,DWORD PTR [rax+0x8848]
   1c959:	25 80 00 00 00       	and    eax,0x80
   1c95e:	85 c0                	test   eax,eax
   1c960:	74 62                	je     1c9c4 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x54a>
   1c962:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c966:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
   1c969:	83 e0 01             	and    eax,0x1
   1c96c:	85 c0                	test   eax,eax
   1c96e:	74 09                	je     1c979 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x4ff>
   1c970:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c974:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
   1c977:	eb 05                	jmp    1c97e <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x504>
   1c979:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1c97e:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   1c982:	8b 92 48 88 00 00    	mov    edx,DWORD PTR [rdx+0x8848]
   1c988:	83 e2 07             	and    edx,0x7
   1c98b:	be 02 00 00 00       	mov    esi,0x2
   1c990:	89 d1                	mov    ecx,edx
   1c992:	d3 e6                	shl    esi,cl
   1c994:	89 f2                	mov    edx,esi
   1c996:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
   1c99a:	48 8d b1 34 04 00 00 	lea    rsi,[rcx+0x434]
   1c9a1:	48 8b 7d b8          	mov    rdi,QWORD PTR [rbp-0x48]
   1c9a5:	89 c1                	mov    ecx,eax
   1c9a7:	e8 26 f2 ff ff       	call   1bbd2 <stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)>
   1c9ac:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c9b0:	48 8d 90 34 04 00 00 	lea    rdx,[rax+0x434]
   1c9b7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c9bb:	48 89 90 38 88 00 00 	mov    QWORD PTR [rax+0x8838],rdx
   1c9c2:	eb 3e                	jmp    1ca02 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x588>
   1c9c4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c9c8:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   1c9cb:	25 80 00 00 00       	and    eax,0x80
   1c9d0:	85 c0                	test   eax,eax
   1c9d2:	74 15                	je     1c9e9 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x56f>
   1c9d4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c9d8:	48 8d 50 34          	lea    rdx,[rax+0x34]
   1c9dc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1c9e0:	48 89 90 38 88 00 00 	mov    QWORD PTR [rax+0x8838],rdx
   1c9e7:	eb 19                	jmp    1ca02 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x588>
   1c9e9:	48 8d 05 d9 e7 01 00 	lea    rax,[rip+0x1e7d9]        # 3b1c9 <stbi__depth_scale_table+0x5d1>
   1c9f0:	48 89 c7             	mov    rdi,rax
   1c9f3:	e8 7a 81 fe ff       	call   4b72 <stbi__err(char const*)>
   1c9f8:	b8 00 00 00 00       	mov    eax,0x0
   1c9fd:	e9 27 02 00 00       	jmp    1cc29 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7af>
   1ca02:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   1ca06:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ca0a:	48 89 d6             	mov    rsi,rdx
   1ca0d:	48 89 c7             	mov    rdi,rax
   1ca10:	e8 18 f7 ff ff       	call   1c12d <stbi__process_gif_raster(stbi__context*, stbi__gif*)>
   1ca15:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1ca19:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1ca1e:	75 0a                	jne    1ca2a <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x5b0>
   1ca20:	b8 00 00 00 00       	mov    eax,0x0
   1ca25:	e9 ff 01 00 00       	jmp    1cc29 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7af>
   1ca2a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1ca2e:	8b 10                	mov    edx,DWORD PTR [rax]
   1ca30:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1ca34:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1ca37:	0f af c2             	imul   eax,edx
   1ca3a:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   1ca3d:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
   1ca41:	0f 84 81 00 00 00    	je     1cac8 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x64e>
   1ca47:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1ca4b:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   1ca4e:	85 c0                	test   eax,eax
   1ca50:	7e 76                	jle    1cac8 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x64e>
   1ca52:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [rbp-0x2c],0x0
   1ca59:	eb 65                	jmp    1cac0 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x646>
   1ca5b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1ca5f:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
   1ca63:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1ca66:	48 98                	cdqe   
   1ca68:	48 01 d0             	add    rax,rdx
   1ca6b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1ca6e:	84 c0                	test   al,al
   1ca70:	75 4a                	jne    1cabc <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x642>
   1ca72:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1ca76:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
   1ca79:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1ca7d:	48 63 d2             	movsxd rdx,edx
   1ca80:	c6 44 90 37 ff       	mov    BYTE PTR [rax+rdx*4+0x37],0xff
   1ca85:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1ca89:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   1ca8c:	48 98                	cdqe   
   1ca8e:	48 83 c0 0c          	add    rax,0xc
   1ca92:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ca9a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1ca9e:	48 01 d0             	add    rax,rdx
   1caa1:	48 8d 48 04          	lea    rcx,[rax+0x4]
   1caa5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1caa9:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   1caad:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1cab0:	c1 e0 02             	shl    eax,0x2
   1cab3:	48 98                	cdqe   
   1cab5:	48 01 c2             	add    rdx,rax
   1cab8:	8b 01                	mov    eax,DWORD PTR [rcx]
   1caba:	89 02                	mov    DWORD PTR [rdx],eax
   1cabc:	83 45 d4 01          	add    DWORD PTR [rbp-0x2c],0x1
   1cac0:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   1cac3:	3b 45 d8             	cmp    eax,DWORD PTR [rbp-0x28]
   1cac6:	7c 93                	jl     1ca5b <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x5e1>
   1cac8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1cacc:	e9 58 01 00 00       	jmp    1cc29 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7af>
   1cad1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1cad5:	48 89 c7             	mov    rdi,rax
   1cad8:	e8 34 9a fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1cadd:	0f b6 c0             	movzx  eax,al
   1cae0:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   1cae3:	81 7d f0 f9 00 00 00 	cmp    DWORD PTR [rbp-0x10],0xf9
   1caea:	0f 85 f9 00 00 00    	jne    1cbe9 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x76f>
   1caf0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1caf4:	48 89 c7             	mov    rdi,rax
   1caf7:	e8 15 9a fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1cafc:	0f b6 c0             	movzx  eax,al
   1caff:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1cb02:	83 7d f4 04          	cmp    DWORD PTR [rbp-0xc],0x4
   1cb06:	0f 85 b9 00 00 00    	jne    1cbc5 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x74b>
   1cb0c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1cb10:	48 89 c7             	mov    rdi,rax
   1cb13:	e8 f9 99 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1cb18:	0f b6 d0             	movzx  edx,al
   1cb1b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1cb1f:	89 50 30             	mov    DWORD PTR [rax+0x30],edx
   1cb22:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1cb26:	48 89 c7             	mov    rdi,rax
   1cb29:	e8 3c 9d fe ff       	call   686a <stbi__get16le(stbi__context*)>
   1cb2e:	89 c2                	mov    edx,eax
   1cb30:	89 d0                	mov    eax,edx
   1cb32:	c1 e0 02             	shl    eax,0x2
   1cb35:	01 d0                	add    eax,edx
   1cb37:	01 c0                	add    eax,eax
   1cb39:	89 c2                	mov    edx,eax
   1cb3b:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1cb3f:	89 90 68 88 00 00    	mov    DWORD PTR [rax+0x8868],edx
   1cb45:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1cb49:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
   1cb4c:	85 c0                	test   eax,eax
   1cb4e:	78 13                	js     1cb63 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x6e9>
   1cb50:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1cb54:	8b 50 2c             	mov    edx,DWORD PTR [rax+0x2c]
   1cb57:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1cb5b:	48 63 d2             	movsxd rdx,edx
   1cb5e:	c6 44 90 37 ff       	mov    BYTE PTR [rax+rdx*4+0x37],0xff
   1cb63:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1cb67:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
   1cb6a:	83 e0 01             	and    eax,0x1
   1cb6d:	85 c0                	test   eax,eax
   1cb6f:	74 36                	je     1cba7 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x72d>
   1cb71:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1cb75:	48 89 c7             	mov    rdi,rax
   1cb78:	e8 94 99 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1cb7d:	0f b6 d0             	movzx  edx,al
   1cb80:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1cb84:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   1cb87:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1cb8b:	8b 40 2c             	mov    eax,DWORD PTR [rax+0x2c]
   1cb8e:	85 c0                	test   eax,eax
   1cb90:	78 57                	js     1cbe9 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x76f>
   1cb92:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1cb96:	8b 50 2c             	mov    edx,DWORD PTR [rax+0x2c]
   1cb99:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1cb9d:	48 63 d2             	movsxd rdx,edx
   1cba0:	c6 44 90 37 00       	mov    BYTE PTR [rax+rdx*4+0x37],0x0
   1cba5:	eb 42                	jmp    1cbe9 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x76f>
   1cba7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1cbab:	be 01 00 00 00       	mov    esi,0x1
   1cbb0:	48 89 c7             	mov    rdi,rax
   1cbb3:	e8 4d 9a fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1cbb8:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1cbbc:	c7 40 2c ff ff ff ff 	mov    DWORD PTR [rax+0x2c],0xffffffff
   1cbc3:	eb 24                	jmp    1cbe9 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x76f>
   1cbc5:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   1cbc8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1cbcc:	89 d6                	mov    esi,edx
   1cbce:	48 89 c7             	mov    rdi,rax
   1cbd1:	e8 2f 9a fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1cbd6:	eb 4c                	jmp    1cc24 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7aa>
   1cbd8:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   1cbdb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1cbdf:	89 d6                	mov    esi,edx
   1cbe1:	48 89 c7             	mov    rdi,rax
   1cbe4:	e8 1c 9a fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1cbe9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1cbed:	48 89 c7             	mov    rdi,rax
   1cbf0:	e8 1c 99 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1cbf5:	0f b6 c0             	movzx  eax,al
   1cbf8:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1cbfb:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
   1cbff:	0f 95 c0             	setne  al
   1cc02:	84 c0                	test   al,al
   1cc04:	75 d2                	jne    1cbd8 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x75e>
   1cc06:	eb 1c                	jmp    1cc24 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7aa>
   1cc08:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1cc0c:	eb 1b                	jmp    1cc29 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7af>
   1cc0e:	48 8d 05 c8 e5 01 00 	lea    rax,[rip+0x1e5c8]        # 3b1dd <stbi__depth_scale_table+0x5e5>
   1cc15:	48 89 c7             	mov    rdi,rax
   1cc18:	e8 55 7f fe ff       	call   4b72 <stbi__err(char const*)>
   1cc1d:	b8 00 00 00 00       	mov    eax,0x0
   1cc22:	eb 05                	jmp    1cc29 <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x7af>
   1cc24:	e9 34 fb ff ff       	jmp    1c75d <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)+0x2e3>
   1cc29:	c9                   	leave  
   1cc2a:	c3                   	ret    

000000000001cc2b <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)>:
   1cc2b:	55                   	push   rbp
   1cc2c:	48 89 e5             	mov    rbp,rsp
   1cc2f:	48 81 ec e0 88 00 00 	sub    rsp,0x88e0
   1cc36:	48 89 bd 48 77 ff ff 	mov    QWORD PTR [rbp-0x88b8],rdi
   1cc3d:	48 89 b5 40 77 ff ff 	mov    QWORD PTR [rbp-0x88c0],rsi
   1cc44:	48 89 95 38 77 ff ff 	mov    QWORD PTR [rbp-0x88c8],rdx
   1cc4b:	48 89 8d 30 77 ff ff 	mov    QWORD PTR [rbp-0x88d0],rcx
   1cc52:	4c 89 85 28 77 ff ff 	mov    QWORD PTR [rbp-0x88d8],r8
   1cc59:	4c 89 8d 20 77 ff ff 	mov    QWORD PTR [rbp-0x88e0],r9
   1cc60:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1cc69:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1cc6d:	31 c0                	xor    eax,eax
   1cc6f:	48 8b 85 48 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88b8]
   1cc76:	48 89 c7             	mov    rdi,rax
   1cc79:	e8 28 ef ff ff       	call   1bba6 <stbi__gif_test(stbi__context*)>
   1cc7e:	85 c0                	test   eax,eax
   1cc80:	0f 95 c0             	setne  al
   1cc83:	84 c0                	test   al,al
   1cc85:	0f 84 2f 03 00 00    	je     1cfba <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x38f>
   1cc8b:	c7 85 58 77 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x88a8],0x0
   1cc95:	48 c7 85 60 77 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x88a0],0x0
   1cca0:	48 c7 85 68 77 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x8898],0x0
   1ccab:	48 c7 85 70 77 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x8890],0x0
   1ccb6:	48 8d 85 80 77 ff ff 	lea    rax,[rbp-0x8880]
   1ccbd:	ba 70 88 00 00       	mov    edx,0x8870
   1ccc2:	be 00 00 00 00       	mov    esi,0x0
   1ccc7:	48 89 c7             	mov    rdi,rax
   1ccca:	e8 11 75 fe ff       	call   41e0 <memset@plt>
   1cccf:	48 83 bd 40 77 ff ff 00 	cmp    QWORD PTR [rbp-0x88c0],0x0
   1ccd7:	74 0e                	je     1cce7 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0xbc>
   1ccd9:	48 8b 85 40 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88c0]
   1cce0:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   1cce7:	48 8b 8d 70 77 ff ff 	mov    rcx,QWORD PTR [rbp-0x8890]
   1ccee:	48 8b 95 20 77 ff ff 	mov    rdx,QWORD PTR [rbp-0x88e0]
   1ccf5:	48 8d b5 80 77 ff ff 	lea    rsi,[rbp-0x8880]
   1ccfc:	48 8b 85 48 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88b8]
   1cd03:	49 89 c8             	mov    r8,rcx
   1cd06:	8b 4d 10             	mov    ecx,DWORD PTR [rbp+0x10]
   1cd09:	48 89 c7             	mov    rdi,rax
   1cd0c:	e8 69 f7 ff ff       	call   1c47a <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)>
   1cd11:	48 89 85 60 77 ff ff 	mov    QWORD PTR [rbp-0x88a0],rax
   1cd18:	48 8b 85 60 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88a0]
   1cd1f:	48 3b 85 48 77 ff ff 	cmp    rax,QWORD PTR [rbp-0x88b8]
   1cd26:	75 0b                	jne    1cd33 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x108>
   1cd28:	48 c7 85 60 77 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x88a0],0x0
   1cd33:	48 83 bd 60 77 ff ff 00 	cmp    QWORD PTR [rbp-0x88a0],0x0
   1cd3b:	0f 84 e0 01 00 00    	je     1cf21 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x2f6>
   1cd41:	8b 95 80 77 ff ff    	mov    edx,DWORD PTR [rbp-0x8880]
   1cd47:	48 8b 85 38 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88c8]
   1cd4e:	89 10                	mov    DWORD PTR [rax],edx
   1cd50:	8b 95 84 77 ff ff    	mov    edx,DWORD PTR [rbp-0x887c]
   1cd56:	48 8b 85 30 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88d0]
   1cd5d:	89 10                	mov    DWORD PTR [rax],edx
   1cd5f:	83 85 58 77 ff ff 01 	add    DWORD PTR [rbp-0x88a8],0x1
   1cd66:	8b 95 80 77 ff ff    	mov    edx,DWORD PTR [rbp-0x8880]
   1cd6c:	8b 85 84 77 ff ff    	mov    eax,DWORD PTR [rbp-0x887c]
   1cd72:	0f af c2             	imul   eax,edx
   1cd75:	c1 e0 02             	shl    eax,0x2
   1cd78:	89 85 5c 77 ff ff    	mov    DWORD PTR [rbp-0x88a4],eax
   1cd7e:	48 83 bd 68 77 ff ff 00 	cmp    QWORD PTR [rbp-0x8898],0x0
   1cd86:	0f 84 c2 00 00 00    	je     1ce4e <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x223>
   1cd8c:	8b 85 58 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a8]
   1cd92:	0f af 85 5c 77 ff ff 	imul   eax,DWORD PTR [rbp-0x88a4]
   1cd99:	48 63 d0             	movsxd rdx,eax
   1cd9c:	48 8b 85 68 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8898]
   1cda3:	48 89 d6             	mov    rsi,rdx
   1cda6:	48 89 c7             	mov    rdi,rax
   1cda9:	e8 72 79 fe ff       	call   4720 <realloc@plt>
   1cdae:	48 89 85 78 77 ff ff 	mov    QWORD PTR [rbp-0x8888],rax
   1cdb5:	48 83 bd 78 77 ff ff 00 	cmp    QWORD PTR [rbp-0x8888],0x0
   1cdbd:	75 46                	jne    1ce05 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x1da>
   1cdbf:	48 8b 85 88 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8878]
   1cdc6:	48 89 c7             	mov    rdi,rax
   1cdc9:	e8 62 77 fe ff       	call   4530 <free@plt>
   1cdce:	48 8b 85 98 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8868]
   1cdd5:	48 89 c7             	mov    rdi,rax
   1cdd8:	e8 53 77 fe ff       	call   4530 <free@plt>
   1cddd:	48 8b 85 90 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8870]
   1cde4:	48 89 c7             	mov    rdi,rax
   1cde7:	e8 44 77 fe ff       	call   4530 <free@plt>
   1cdec:	48 8d 05 40 d2 01 00 	lea    rax,[rip+0x1d240]        # 3a033 <_IO_stdin_used+0x33>
   1cdf3:	48 89 c7             	mov    rdi,rax
   1cdf6:	e8 77 7d fe ff       	call   4b72 <stbi__err(char const*)>
   1cdfb:	b8 00 00 00 00       	mov    eax,0x0
   1ce00:	e9 c9 01 00 00       	jmp    1cfce <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x3a3>
   1ce05:	48 8b 85 78 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8888]
   1ce0c:	48 89 85 68 77 ff ff 	mov    QWORD PTR [rbp-0x8898],rax
   1ce13:	48 83 bd 40 77 ff ff 00 	cmp    QWORD PTR [rbp-0x88c0],0x0
   1ce1b:	74 77                	je     1ce94 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x269>
   1ce1d:	8b 85 58 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a8]
   1ce23:	48 98                	cdqe   
   1ce25:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1ce2d:	48 8b 85 40 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88c0]
   1ce34:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1ce37:	48 89 d6             	mov    rsi,rdx
   1ce3a:	48 89 c7             	mov    rdi,rax
   1ce3d:	e8 de 78 fe ff       	call   4720 <realloc@plt>
   1ce42:	48 8b 95 40 77 ff ff 	mov    rdx,QWORD PTR [rbp-0x88c0]
   1ce49:	48 89 02             	mov    QWORD PTR [rdx],rax
   1ce4c:	eb 46                	jmp    1ce94 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x269>
   1ce4e:	8b 85 58 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a8]
   1ce54:	0f af 85 5c 77 ff ff 	imul   eax,DWORD PTR [rbp-0x88a4]
   1ce5b:	48 98                	cdqe   
   1ce5d:	48 89 c7             	mov    rdi,rax
   1ce60:	e8 29 7d fe ff       	call   4b8e <stbi__malloc(unsigned long)>
   1ce65:	48 89 85 68 77 ff ff 	mov    QWORD PTR [rbp-0x8898],rax
   1ce6c:	48 83 bd 40 77 ff ff 00 	cmp    QWORD PTR [rbp-0x88c0],0x0
   1ce74:	74 1e                	je     1ce94 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x269>
   1ce76:	8b 85 58 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a8]
   1ce7c:	48 98                	cdqe   
   1ce7e:	48 c1 e0 02          	shl    rax,0x2
   1ce82:	48 89 c7             	mov    rdi,rax
   1ce85:	e8 04 7d fe ff       	call   4b8e <stbi__malloc(unsigned long)>
   1ce8a:	48 8b 95 40 77 ff ff 	mov    rdx,QWORD PTR [rbp-0x88c0]
   1ce91:	48 89 02             	mov    QWORD PTR [rdx],rax
   1ce94:	8b 85 5c 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a4]
   1ce9a:	48 63 d0             	movsxd rdx,eax
   1ce9d:	8b 85 58 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a8]
   1cea3:	83 e8 01             	sub    eax,0x1
   1cea6:	0f af 85 5c 77 ff ff 	imul   eax,DWORD PTR [rbp-0x88a4]
   1cead:	48 63 c8             	movsxd rcx,eax
   1ceb0:	48 8b 85 68 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8898]
   1ceb7:	48 01 c1             	add    rcx,rax
   1ceba:	48 8b 85 60 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88a0]
   1cec1:	48 89 c6             	mov    rsi,rax
   1cec4:	48 89 cf             	mov    rdi,rcx
   1cec7:	e8 a4 74 fe ff       	call   4370 <memcpy@plt>
   1cecc:	83 bd 58 77 ff ff 01 	cmp    DWORD PTR [rbp-0x88a8],0x1
   1ced3:	7e 21                	jle    1cef6 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x2cb>
   1ced5:	8b 85 5c 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a4]
   1cedb:	01 c0                	add    eax,eax
   1cedd:	48 98                	cdqe   
   1cedf:	48 f7 d8             	neg    rax
   1cee2:	48 89 c2             	mov    rdx,rax
   1cee5:	48 8b 85 68 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8898]
   1ceec:	48 01 d0             	add    rax,rdx
   1ceef:	48 89 85 70 77 ff ff 	mov    QWORD PTR [rbp-0x8890],rax
   1cef6:	48 83 bd 40 77 ff ff 00 	cmp    QWORD PTR [rbp-0x88c0],0x0
   1cefe:	74 21                	je     1cf21 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x2f6>
   1cf00:	48 8b 85 40 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88c0]
   1cf07:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   1cf0a:	8b 85 58 77 ff ff    	mov    eax,DWORD PTR [rbp-0x88a8]
   1cf10:	83 e8 01             	sub    eax,0x1
   1cf13:	89 c0                	mov    eax,eax
   1cf15:	48 c1 e0 02          	shl    rax,0x2
   1cf19:	48 01 c2             	add    rdx,rax
   1cf1c:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1cf1f:	89 02                	mov    DWORD PTR [rdx],eax
   1cf21:	48 83 bd 60 77 ff ff 00 	cmp    QWORD PTR [rbp-0x88a0],0x0
   1cf29:	0f 85 b8 fd ff ff    	jne    1cce7 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0xbc>
   1cf2f:	48 8b 85 88 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8878]
   1cf36:	48 89 c7             	mov    rdi,rax
   1cf39:	e8 f2 75 fe ff       	call   4530 <free@plt>
   1cf3e:	48 8b 85 98 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8868]
   1cf45:	48 89 c7             	mov    rdi,rax
   1cf48:	e8 e3 75 fe ff       	call   4530 <free@plt>
   1cf4d:	48 8b 85 90 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8870]
   1cf54:	48 89 c7             	mov    rdi,rax
   1cf57:	e8 d4 75 fe ff       	call   4530 <free@plt>
   1cf5c:	83 7d 10 00          	cmp    DWORD PTR [rbp+0x10],0x0
   1cf60:	74 40                	je     1cfa2 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x377>
   1cf62:	83 7d 10 04          	cmp    DWORD PTR [rbp+0x10],0x4
   1cf66:	74 3a                	je     1cfa2 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x377>
   1cf68:	8b 85 84 77 ff ff    	mov    eax,DWORD PTR [rbp-0x887c]
   1cf6e:	89 c1                	mov    ecx,eax
   1cf70:	8b 85 80 77 ff ff    	mov    eax,DWORD PTR [rbp-0x8880]
   1cf76:	0f af 85 58 77 ff ff 	imul   eax,DWORD PTR [rbp-0x88a8]
   1cf7d:	89 c2                	mov    edx,eax
   1cf7f:	48 8b 85 68 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8898]
   1cf86:	41 89 c8             	mov    r8d,ecx
   1cf89:	89 d1                	mov    ecx,edx
   1cf8b:	8b 55 10             	mov    edx,DWORD PTR [rbp+0x10]
   1cf8e:	be 04 00 00 00       	mov    esi,0x4
   1cf93:	48 89 c7             	mov    rdi,rax
   1cf96:	e8 66 99 fe ff       	call   6901 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   1cf9b:	48 89 85 68 77 ff ff 	mov    QWORD PTR [rbp-0x8898],rax
   1cfa2:	48 8b 85 28 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88d8]
   1cfa9:	8b 95 58 77 ff ff    	mov    edx,DWORD PTR [rbp-0x88a8]
   1cfaf:	89 10                	mov    DWORD PTR [rax],edx
   1cfb1:	48 8b 85 68 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8898]
   1cfb8:	eb 14                	jmp    1cfce <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x3a3>
   1cfba:	48 8d 05 b6 e1 01 00 	lea    rax,[rip+0x1e1b6]        # 3b177 <stbi__depth_scale_table+0x57f>
   1cfc1:	48 89 c7             	mov    rdi,rax
   1cfc4:	e8 a9 7b fe ff       	call   4b72 <stbi__err(char const*)>
   1cfc9:	b8 00 00 00 00       	mov    eax,0x0
   1cfce:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1cfd2:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1cfdb:	74 05                	je     1cfe2 <stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int)+0x3b7>
   1cfdd:	e8 fe 74 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1cfe2:	c9                   	leave  
   1cfe3:	c3                   	ret    

000000000001cfe4 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   1cfe4:	55                   	push   rbp
   1cfe5:	48 89 e5             	mov    rbp,rsp
   1cfe8:	48 81 ec c0 88 00 00 	sub    rsp,0x88c0
   1cfef:	48 89 bd 68 77 ff ff 	mov    QWORD PTR [rbp-0x8898],rdi
   1cff6:	48 89 b5 60 77 ff ff 	mov    QWORD PTR [rbp-0x88a0],rsi
   1cffd:	48 89 95 58 77 ff ff 	mov    QWORD PTR [rbp-0x88a8],rdx
   1d004:	48 89 8d 50 77 ff ff 	mov    QWORD PTR [rbp-0x88b0],rcx
   1d00b:	44 89 85 4c 77 ff ff 	mov    DWORD PTR [rbp-0x88b4],r8d
   1d012:	4c 89 8d 40 77 ff ff 	mov    QWORD PTR [rbp-0x88c0],r9
   1d019:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1d022:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1d026:	31 c0                	xor    eax,eax
   1d028:	48 c7 85 78 77 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x8888],0x0
   1d033:	48 8d 85 80 77 ff ff 	lea    rax,[rbp-0x8880]
   1d03a:	ba 70 88 00 00       	mov    edx,0x8870
   1d03f:	be 00 00 00 00       	mov    esi,0x0
   1d044:	48 89 c7             	mov    rdi,rax
   1d047:	e8 94 71 fe ff       	call   41e0 <memset@plt>
   1d04c:	8b 8d 4c 77 ff ff    	mov    ecx,DWORD PTR [rbp-0x88b4]
   1d052:	48 8b 95 50 77 ff ff 	mov    rdx,QWORD PTR [rbp-0x88b0]
   1d059:	48 8d b5 80 77 ff ff 	lea    rsi,[rbp-0x8880]
   1d060:	48 8b 85 68 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8898]
   1d067:	41 b8 00 00 00 00    	mov    r8d,0x0
   1d06d:	48 89 c7             	mov    rdi,rax
   1d070:	e8 05 f4 ff ff       	call   1c47a <stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*)>
   1d075:	48 89 85 78 77 ff ff 	mov    QWORD PTR [rbp-0x8888],rax
   1d07c:	48 8b 85 78 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8888]
   1d083:	48 3b 85 68 77 ff ff 	cmp    rax,QWORD PTR [rbp-0x8898]
   1d08a:	75 0b                	jne    1d097 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xb3>
   1d08c:	48 c7 85 78 77 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x8888],0x0
   1d097:	48 83 bd 78 77 ff ff 00 	cmp    QWORD PTR [rbp-0x8888],0x0
   1d09f:	74 66                	je     1d107 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x123>
   1d0a1:	8b 95 80 77 ff ff    	mov    edx,DWORD PTR [rbp-0x8880]
   1d0a7:	48 8b 85 60 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88a0]
   1d0ae:	89 10                	mov    DWORD PTR [rax],edx
   1d0b0:	8b 95 84 77 ff ff    	mov    edx,DWORD PTR [rbp-0x887c]
   1d0b6:	48 8b 85 58 77 ff ff 	mov    rax,QWORD PTR [rbp-0x88a8]
   1d0bd:	89 10                	mov    DWORD PTR [rax],edx
   1d0bf:	83 bd 4c 77 ff ff 00 	cmp    DWORD PTR [rbp-0x88b4],0x0
   1d0c6:	74 5a                	je     1d122 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x13e>
   1d0c8:	83 bd 4c 77 ff ff 04 	cmp    DWORD PTR [rbp-0x88b4],0x4
   1d0cf:	74 51                	je     1d122 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x13e>
   1d0d1:	8b 85 84 77 ff ff    	mov    eax,DWORD PTR [rbp-0x887c]
   1d0d7:	89 c6                	mov    esi,eax
   1d0d9:	8b 85 80 77 ff ff    	mov    eax,DWORD PTR [rbp-0x8880]
   1d0df:	89 c1                	mov    ecx,eax
   1d0e1:	8b 95 4c 77 ff ff    	mov    edx,DWORD PTR [rbp-0x88b4]
   1d0e7:	48 8b 85 78 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8888]
   1d0ee:	41 89 f0             	mov    r8d,esi
   1d0f1:	be 04 00 00 00       	mov    esi,0x4
   1d0f6:	48 89 c7             	mov    rdi,rax
   1d0f9:	e8 03 98 fe ff       	call   6901 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   1d0fe:	48 89 85 78 77 ff ff 	mov    QWORD PTR [rbp-0x8888],rax
   1d105:	eb 1b                	jmp    1d122 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x13e>
   1d107:	48 8b 85 88 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8878]
   1d10e:	48 85 c0             	test   rax,rax
   1d111:	74 0f                	je     1d122 <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x13e>
   1d113:	48 8b 85 88 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8878]
   1d11a:	48 89 c7             	mov    rdi,rax
   1d11d:	e8 0e 74 fe ff       	call   4530 <free@plt>
   1d122:	48 8b 85 98 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8868]
   1d129:	48 89 c7             	mov    rdi,rax
   1d12c:	e8 ff 73 fe ff       	call   4530 <free@plt>
   1d131:	48 8b 85 90 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8870]
   1d138:	48 89 c7             	mov    rdi,rax
   1d13b:	e8 f0 73 fe ff       	call   4530 <free@plt>
   1d140:	48 8b 85 78 77 ff ff 	mov    rax,QWORD PTR [rbp-0x8888]
   1d147:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1d14b:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1d154:	74 05                	je     1d15b <stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x177>
   1d156:	e8 85 73 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1d15b:	c9                   	leave  
   1d15c:	c3                   	ret    

000000000001d15d <stbi__gif_info(stbi__context*, int*, int*, int*)>:
   1d15d:	55                   	push   rbp
   1d15e:	48 89 e5             	mov    rbp,rsp
   1d161:	48 83 ec 20          	sub    rsp,0x20
   1d165:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   1d169:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   1d16d:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   1d171:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   1d175:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1d179:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1d17d:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1d181:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1d185:	48 89 c7             	mov    rdi,rax
   1d188:	e8 cc ec ff ff       	call   1be59 <stbi__gif_info_raw(stbi__context*, int*, int*, int*)>
   1d18d:	c9                   	leave  
   1d18e:	c3                   	ret    

000000000001d18f <stbi__hdr_test_core(stbi__context*, char const*)>:
   1d18f:	55                   	push   rbp
   1d190:	48 89 e5             	mov    rbp,rsp
   1d193:	48 83 ec 20          	sub    rsp,0x20
   1d197:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1d19b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1d19f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1d1a6:	eb 36                	jmp    1d1de <stbi__hdr_test_core(stbi__context*, char const*)+0x4f>
   1d1a8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d1ac:	48 89 c7             	mov    rdi,rax
   1d1af:	e8 5d 93 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1d1b4:	0f b6 d0             	movzx  edx,al
   1d1b7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1d1ba:	48 63 c8             	movsxd rcx,eax
   1d1bd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d1c1:	48 01 c8             	add    rax,rcx
   1d1c4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d1c7:	0f be c0             	movsx  eax,al
   1d1ca:	39 c2                	cmp    edx,eax
   1d1cc:	0f 95 c0             	setne  al
   1d1cf:	84 c0                	test   al,al
   1d1d1:	74 07                	je     1d1da <stbi__hdr_test_core(stbi__context*, char const*)+0x4b>
   1d1d3:	b8 00 00 00 00       	mov    eax,0x0
   1d1d8:	eb 29                	jmp    1d203 <stbi__hdr_test_core(stbi__context*, char const*)+0x74>
   1d1da:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1d1de:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1d1e1:	48 63 d0             	movsxd rdx,eax
   1d1e4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d1e8:	48 01 d0             	add    rax,rdx
   1d1eb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d1ee:	84 c0                	test   al,al
   1d1f0:	75 b6                	jne    1d1a8 <stbi__hdr_test_core(stbi__context*, char const*)+0x19>
   1d1f2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d1f6:	48 89 c7             	mov    rdi,rax
   1d1f9:	e8 2e 79 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1d1fe:	b8 01 00 00 00       	mov    eax,0x1
   1d203:	c9                   	leave  
   1d204:	c3                   	ret    

000000000001d205 <stbi__hdr_test(stbi__context*)>:
   1d205:	55                   	push   rbp
   1d206:	48 89 e5             	mov    rbp,rsp
   1d209:	48 83 ec 20          	sub    rsp,0x20
   1d20d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1d211:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d215:	48 8d 15 ce df 01 00 	lea    rdx,[rip+0x1dfce]        # 3b1ea <stbi__depth_scale_table+0x5f2>
   1d21c:	48 89 d6             	mov    rsi,rdx
   1d21f:	48 89 c7             	mov    rdi,rax
   1d222:	e8 68 ff ff ff       	call   1d18f <stbi__hdr_test_core(stbi__context*, char const*)>
   1d227:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1d22a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d22e:	48 89 c7             	mov    rdi,rax
   1d231:	e8 f6 78 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1d236:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   1d23a:	75 25                	jne    1d261 <stbi__hdr_test(stbi__context*)+0x5c>
   1d23c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d240:	48 8d 15 af df 01 00 	lea    rdx,[rip+0x1dfaf]        # 3b1f6 <stbi__depth_scale_table+0x5fe>
   1d247:	48 89 d6             	mov    rsi,rdx
   1d24a:	48 89 c7             	mov    rdi,rax
   1d24d:	e8 3d ff ff ff       	call   1d18f <stbi__hdr_test_core(stbi__context*, char const*)>
   1d252:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1d255:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d259:	48 89 c7             	mov    rdi,rax
   1d25c:	e8 cb 78 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1d261:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1d264:	c9                   	leave  
   1d265:	c3                   	ret    

000000000001d266 <stbi__hdr_gettoken(stbi__context*, char*)>:
   1d266:	55                   	push   rbp
   1d267:	48 89 e5             	mov    rbp,rsp
   1d26a:	48 83 ec 20          	sub    rsp,0x20
   1d26e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1d272:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1d276:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1d27d:	c6 45 fb 00          	mov    BYTE PTR [rbp-0x5],0x0
   1d281:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d285:	48 89 c7             	mov    rdi,rax
   1d288:	e8 84 92 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1d28d:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
   1d290:	eb 63                	jmp    1d2f5 <stbi__hdr_gettoken(stbi__context*, char*)+0x8f>
   1d292:	0f b6 55 fb          	movzx  edx,BYTE PTR [rbp-0x5]
   1d296:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   1d29a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1d29d:	8d 48 01             	lea    ecx,[rax+0x1]
   1d2a0:	89 4d fc             	mov    DWORD PTR [rbp-0x4],ecx
   1d2a3:	48 98                	cdqe   
   1d2a5:	48 01 f0             	add    rax,rsi
   1d2a8:	88 10                	mov    BYTE PTR [rax],dl
   1d2aa:	81 7d fc ff 03 00 00 	cmp    DWORD PTR [rbp-0x4],0x3ff
   1d2b1:	75 33                	jne    1d2e6 <stbi__hdr_gettoken(stbi__context*, char*)+0x80>
   1d2b3:	90                   	nop
   1d2b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d2b8:	48 89 c7             	mov    rdi,rax
   1d2bb:	e8 d4 92 fe ff       	call   6594 <stbi__at_eof(stbi__context*)>
   1d2c0:	85 c0                	test   eax,eax
   1d2c2:	75 17                	jne    1d2db <stbi__hdr_gettoken(stbi__context*, char*)+0x75>
   1d2c4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d2c8:	48 89 c7             	mov    rdi,rax
   1d2cb:	e8 41 92 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1d2d0:	3c 0a                	cmp    al,0xa
   1d2d2:	74 07                	je     1d2db <stbi__hdr_gettoken(stbi__context*, char*)+0x75>
   1d2d4:	b8 01 00 00 00       	mov    eax,0x1
   1d2d9:	eb 05                	jmp    1d2e0 <stbi__hdr_gettoken(stbi__context*, char*)+0x7a>
   1d2db:	b8 00 00 00 00       	mov    eax,0x0
   1d2e0:	84 c0                	test   al,al
   1d2e2:	75 d0                	jne    1d2b4 <stbi__hdr_gettoken(stbi__context*, char*)+0x4e>
   1d2e4:	eb 39                	jmp    1d31f <stbi__hdr_gettoken(stbi__context*, char*)+0xb9>
   1d2e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d2ea:	48 89 c7             	mov    rdi,rax
   1d2ed:	e8 1f 92 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1d2f2:	88 45 fb             	mov    BYTE PTR [rbp-0x5],al
   1d2f5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d2f9:	48 89 c7             	mov    rdi,rax
   1d2fc:	e8 93 92 fe ff       	call   6594 <stbi__at_eof(stbi__context*)>
   1d301:	85 c0                	test   eax,eax
   1d303:	75 0d                	jne    1d312 <stbi__hdr_gettoken(stbi__context*, char*)+0xac>
   1d305:	80 7d fb 0a          	cmp    BYTE PTR [rbp-0x5],0xa
   1d309:	74 07                	je     1d312 <stbi__hdr_gettoken(stbi__context*, char*)+0xac>
   1d30b:	b8 01 00 00 00       	mov    eax,0x1
   1d310:	eb 05                	jmp    1d317 <stbi__hdr_gettoken(stbi__context*, char*)+0xb1>
   1d312:	b8 00 00 00 00       	mov    eax,0x0
   1d317:	84 c0                	test   al,al
   1d319:	0f 85 73 ff ff ff    	jne    1d292 <stbi__hdr_gettoken(stbi__context*, char*)+0x2c>
   1d31f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1d322:	48 63 d0             	movsxd rdx,eax
   1d325:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d329:	48 01 d0             	add    rax,rdx
   1d32c:	c6 00 00             	mov    BYTE PTR [rax],0x0
   1d32f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d333:	c9                   	leave  
   1d334:	c3                   	ret    

000000000001d335 <stbi__hdr_convert(float*, unsigned char*, int)>:
   1d335:	55                   	push   rbp
   1d336:	48 89 e5             	mov    rbp,rsp
   1d339:	48 83 ec 30          	sub    rsp,0x30
   1d33d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1d341:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1d345:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
   1d348:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d34c:	48 83 c0 03          	add    rax,0x3
   1d350:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d353:	84 c0                	test   al,al
   1d355:	0f 84 28 01 00 00    	je     1d483 <stbi__hdr_convert(float*, unsigned char*, int)+0x14e>
   1d35b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d35f:	48 83 c0 03          	add    rax,0x3
   1d363:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d366:	0f b6 c0             	movzx  eax,al
   1d369:	2d 88 00 00 00       	sub    eax,0x88
   1d36e:	89 c7                	mov    edi,eax
   1d370:	8b 05 ce f6 01 00    	mov    eax,DWORD PTR [rip+0x1f6ce]        # 3ca44 <NANO_SEC+0x177c>
   1d376:	66 0f 6e c0          	movd   xmm0,eax
   1d37a:	e8 8b 7f 00 00       	call   2530a <std::ldexp(float, int)>
   1d37f:	66 0f 7e c0          	movd   eax,xmm0
   1d383:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1d386:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
   1d38a:	7f 4d                	jg     1d3d9 <stbi__hdr_convert(float*, unsigned char*, int)+0xa4>
   1d38c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d390:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d393:	0f b6 d0             	movzx  edx,al
   1d396:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d39a:	48 83 c0 01          	add    rax,0x1
   1d39e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d3a1:	0f b6 c0             	movzx  eax,al
   1d3a4:	01 c2                	add    edx,eax
   1d3a6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d3aa:	48 83 c0 02          	add    rax,0x2
   1d3ae:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d3b1:	0f b6 c0             	movzx  eax,al
   1d3b4:	01 d0                	add    eax,edx
   1d3b6:	66 0f ef c0          	pxor   xmm0,xmm0
   1d3ba:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1d3be:	f3 0f 59 45 fc       	mulss  xmm0,DWORD PTR [rbp-0x4]
   1d3c3:	f3 0f 10 0d 89 f6 01 00 	movss  xmm1,DWORD PTR [rip+0x1f689]        # 3ca54 <NANO_SEC+0x178c>
   1d3cb:	f3 0f 5e c1          	divss  xmm0,xmm1
   1d3cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d3d3:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d3d7:	eb 6d                	jmp    1d446 <stbi__hdr_convert(float*, unsigned char*, int)+0x111>
   1d3d9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d3dd:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d3e0:	0f b6 c0             	movzx  eax,al
   1d3e3:	66 0f ef c0          	pxor   xmm0,xmm0
   1d3e7:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1d3eb:	f3 0f 59 45 fc       	mulss  xmm0,DWORD PTR [rbp-0x4]
   1d3f0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d3f4:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d3f8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d3fc:	48 83 c0 01          	add    rax,0x1
   1d400:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d403:	0f b6 c0             	movzx  eax,al
   1d406:	66 0f ef c0          	pxor   xmm0,xmm0
   1d40a:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1d40e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d412:	48 83 c0 04          	add    rax,0x4
   1d416:	f3 0f 59 45 fc       	mulss  xmm0,DWORD PTR [rbp-0x4]
   1d41b:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d41f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1d423:	48 83 c0 02          	add    rax,0x2
   1d427:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d42a:	0f b6 c0             	movzx  eax,al
   1d42d:	66 0f ef c0          	pxor   xmm0,xmm0
   1d431:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   1d435:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d439:	48 83 c0 08          	add    rax,0x8
   1d43d:	f3 0f 59 45 fc       	mulss  xmm0,DWORD PTR [rbp-0x4]
   1d442:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d446:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
   1d44a:	75 14                	jne    1d460 <stbi__hdr_convert(float*, unsigned char*, int)+0x12b>
   1d44c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d450:	48 83 c0 04          	add    rax,0x4
   1d454:	f3 0f 10 05 e8 f5 01 00 	movss  xmm0,DWORD PTR [rip+0x1f5e8]        # 3ca44 <NANO_SEC+0x177c>
   1d45c:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d460:	83 7d dc 04          	cmp    DWORD PTR [rbp-0x24],0x4
   1d464:	0f 85 a2 00 00 00    	jne    1d50c <stbi__hdr_convert(float*, unsigned char*, int)+0x1d7>
   1d46a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d46e:	48 83 c0 0c          	add    rax,0xc
   1d472:	f3 0f 10 05 ca f5 01 00 	movss  xmm0,DWORD PTR [rip+0x1f5ca]        # 3ca44 <NANO_SEC+0x177c>
   1d47a:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d47e:	e9 89 00 00 00       	jmp    1d50c <stbi__hdr_convert(float*, unsigned char*, int)+0x1d7>
   1d483:	83 7d dc 04          	cmp    DWORD PTR [rbp-0x24],0x4
   1d487:	74 20                	je     1d4a9 <stbi__hdr_convert(float*, unsigned char*, int)+0x174>
   1d489:	83 7d dc 04          	cmp    DWORD PTR [rbp-0x24],0x4
   1d48d:	7f 7d                	jg     1d50c <stbi__hdr_convert(float*, unsigned char*, int)+0x1d7>
   1d48f:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
   1d493:	74 28                	je     1d4bd <stbi__hdr_convert(float*, unsigned char*, int)+0x188>
   1d495:	83 7d dc 03          	cmp    DWORD PTR [rbp-0x24],0x3
   1d499:	7f 71                	jg     1d50c <stbi__hdr_convert(float*, unsigned char*, int)+0x1d7>
   1d49b:	83 7d dc 01          	cmp    DWORD PTR [rbp-0x24],0x1
   1d49f:	74 5e                	je     1d4ff <stbi__hdr_convert(float*, unsigned char*, int)+0x1ca>
   1d4a1:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2
   1d4a5:	74 44                	je     1d4eb <stbi__hdr_convert(float*, unsigned char*, int)+0x1b6>
   1d4a7:	eb 63                	jmp    1d50c <stbi__hdr_convert(float*, unsigned char*, int)+0x1d7>
   1d4a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d4ad:	48 83 c0 0c          	add    rax,0xc
   1d4b1:	f3 0f 10 05 8b f5 01 00 	movss  xmm0,DWORD PTR [rip+0x1f58b]        # 3ca44 <NANO_SEC+0x177c>
   1d4b9:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d4bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d4c1:	48 8d 50 08          	lea    rdx,[rax+0x8]
   1d4c5:	66 0f ef c0          	pxor   xmm0,xmm0
   1d4c9:	f3 0f 11 02          	movss  DWORD PTR [rdx],xmm0
   1d4cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d4d1:	48 83 c0 04          	add    rax,0x4
   1d4d5:	f3 0f 10 02          	movss  xmm0,DWORD PTR [rdx]
   1d4d9:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d4dd:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   1d4e1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d4e5:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d4e9:	eb 21                	jmp    1d50c <stbi__hdr_convert(float*, unsigned char*, int)+0x1d7>
   1d4eb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d4ef:	48 83 c0 04          	add    rax,0x4
   1d4f3:	f3 0f 10 05 49 f5 01 00 	movss  xmm0,DWORD PTR [rip+0x1f549]        # 3ca44 <NANO_SEC+0x177c>
   1d4fb:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d4ff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1d503:	66 0f ef c0          	pxor   xmm0,xmm0
   1d507:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   1d50b:	90                   	nop
   1d50c:	90                   	nop
   1d50d:	c9                   	leave  
   1d50e:	c3                   	ret    

000000000001d50f <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   1d50f:	55                   	push   rbp
   1d510:	48 89 e5             	mov    rbp,rsp
   1d513:	48 81 ec a0 04 00 00 	sub    rsp,0x4a0
   1d51a:	48 89 bd 88 fb ff ff 	mov    QWORD PTR [rbp-0x478],rdi
   1d521:	48 89 b5 80 fb ff ff 	mov    QWORD PTR [rbp-0x480],rsi
   1d528:	48 89 95 78 fb ff ff 	mov    QWORD PTR [rbp-0x488],rdx
   1d52f:	48 89 8d 70 fb ff ff 	mov    QWORD PTR [rbp-0x490],rcx
   1d536:	44 89 85 6c fb ff ff 	mov    DWORD PTR [rbp-0x494],r8d
   1d53d:	4c 89 8d 60 fb ff ff 	mov    QWORD PTR [rbp-0x4a0],r9
   1d544:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1d54d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1d551:	31 c0                	xor    eax,eax
   1d553:	c7 85 9c fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x464],0x0
   1d55d:	48 8d 95 f0 fb ff ff 	lea    rdx,[rbp-0x410]
   1d564:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d56b:	48 89 d6             	mov    rsi,rdx
   1d56e:	48 89 c7             	mov    rdi,rax
   1d571:	e8 f0 fc ff ff       	call   1d266 <stbi__hdr_gettoken(stbi__context*, char*)>
   1d576:	48 89 85 d8 fb ff ff 	mov    QWORD PTR [rbp-0x428],rax
   1d57d:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1d584:	48 8d 15 73 dc 01 00 	lea    rdx,[rip+0x1dc73]        # 3b1fe <stbi__depth_scale_table+0x606>
   1d58b:	48 89 d6             	mov    rsi,rdx
   1d58e:	48 89 c7             	mov    rdi,rax
   1d591:	e8 9a 70 fe ff       	call   4630 <strcmp@plt>
   1d596:	85 c0                	test   eax,eax
   1d598:	74 36                	je     1d5d0 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc1>
   1d59a:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1d5a1:	48 8d 15 61 dc 01 00 	lea    rdx,[rip+0x1dc61]        # 3b209 <stbi__depth_scale_table+0x611>
   1d5a8:	48 89 d6             	mov    rsi,rdx
   1d5ab:	48 89 c7             	mov    rdi,rax
   1d5ae:	e8 7d 70 fe ff       	call   4630 <strcmp@plt>
   1d5b3:	85 c0                	test   eax,eax
   1d5b5:	74 19                	je     1d5d0 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc1>
   1d5b7:	48 8d 05 52 dc 01 00 	lea    rax,[rip+0x1dc52]        # 3b210 <stbi__depth_scale_table+0x618>
   1d5be:	48 89 c7             	mov    rdi,rax
   1d5c1:	e8 ac 75 fe ff       	call   4b72 <stbi__err(char const*)>
   1d5c6:	b8 00 00 00 00       	mov    eax,0x0
   1d5cb:	e9 a5 07 00 00       	jmp    1dd75 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x866>
   1d5d0:	48 8d 95 f0 fb ff ff 	lea    rdx,[rbp-0x410]
   1d5d7:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d5de:	48 89 d6             	mov    rsi,rdx
   1d5e1:	48 89 c7             	mov    rdi,rax
   1d5e4:	e8 7d fc ff ff       	call   1d266 <stbi__hdr_gettoken(stbi__context*, char*)>
   1d5e9:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
   1d5f0:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d5f7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d5fa:	84 c0                	test   al,al
   1d5fc:	74 29                	je     1d627 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x118>
   1d5fe:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d605:	48 8d 15 0c dc 01 00 	lea    rdx,[rip+0x1dc0c]        # 3b218 <stbi__depth_scale_table+0x620>
   1d60c:	48 89 d6             	mov    rsi,rdx
   1d60f:	48 89 c7             	mov    rdi,rax
   1d612:	e8 19 70 fe ff       	call   4630 <strcmp@plt>
   1d617:	85 c0                	test   eax,eax
   1d619:	75 b5                	jne    1d5d0 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc1>
   1d61b:	c7 85 9c fb ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x464],0x1
   1d625:	eb a9                	jmp    1d5d0 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xc1>
   1d627:	90                   	nop
   1d628:	83 bd 9c fb ff ff 00 	cmp    DWORD PTR [rbp-0x464],0x0
   1d62f:	75 19                	jne    1d64a <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x13b>
   1d631:	48 8d 05 f7 db 01 00 	lea    rax,[rip+0x1dbf7]        # 3b22f <stbi__depth_scale_table+0x637>
   1d638:	48 89 c7             	mov    rdi,rax
   1d63b:	e8 32 75 fe ff       	call   4b72 <stbi__err(char const*)>
   1d640:	b8 00 00 00 00       	mov    eax,0x0
   1d645:	e9 2b 07 00 00       	jmp    1dd75 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x866>
   1d64a:	48 8d 95 f0 fb ff ff 	lea    rdx,[rbp-0x410]
   1d651:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d658:	48 89 d6             	mov    rsi,rdx
   1d65b:	48 89 c7             	mov    rdi,rax
   1d65e:	e8 03 fc ff ff       	call   1d266 <stbi__hdr_gettoken(stbi__context*, char*)>
   1d663:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
   1d66a:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d671:	ba 03 00 00 00       	mov    edx,0x3
   1d676:	48 8d 0d c5 db 01 00 	lea    rcx,[rip+0x1dbc5]        # 3b242 <stbi__depth_scale_table+0x64a>
   1d67d:	48 89 ce             	mov    rsi,rcx
   1d680:	48 89 c7             	mov    rdi,rax
   1d683:	e8 18 6b fe ff       	call   41a0 <strncmp@plt>
   1d688:	85 c0                	test   eax,eax
   1d68a:	74 19                	je     1d6a5 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x196>
   1d68c:	48 8d 05 b3 db 01 00 	lea    rax,[rip+0x1dbb3]        # 3b246 <stbi__depth_scale_table+0x64e>
   1d693:	48 89 c7             	mov    rdi,rax
   1d696:	e8 d7 74 fe ff       	call   4b72 <stbi__err(char const*)>
   1d69b:	b8 00 00 00 00       	mov    eax,0x0
   1d6a0:	e9 d0 06 00 00       	jmp    1dd75 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x866>
   1d6a5:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d6ac:	48 83 c0 03          	add    rax,0x3
   1d6b0:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
   1d6b7:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d6be:	48 8d 8d c8 fb ff ff 	lea    rcx,[rbp-0x438]
   1d6c5:	ba 0a 00 00 00       	mov    edx,0xa
   1d6ca:	48 89 ce             	mov    rsi,rcx
   1d6cd:	48 89 c7             	mov    rdi,rax
   1d6d0:	e8 4b 71 fe ff       	call   4820 <strtol@plt>
   1d6d5:	89 85 b0 fb ff ff    	mov    DWORD PTR [rbp-0x450],eax
   1d6db:	eb 12                	jmp    1d6ef <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1e0>
   1d6dd:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d6e4:	48 83 c0 01          	add    rax,0x1
   1d6e8:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
   1d6ef:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d6f6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1d6f9:	3c 20                	cmp    al,0x20
   1d6fb:	74 e0                	je     1d6dd <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x1ce>
   1d6fd:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d704:	ba 03 00 00 00       	mov    edx,0x3
   1d709:	48 8d 0d 4e db 01 00 	lea    rcx,[rip+0x1db4e]        # 3b25e <stbi__depth_scale_table+0x666>
   1d710:	48 89 ce             	mov    rsi,rcx
   1d713:	48 89 c7             	mov    rdi,rax
   1d716:	e8 85 6a fe ff       	call   41a0 <strncmp@plt>
   1d71b:	85 c0                	test   eax,eax
   1d71d:	74 19                	je     1d738 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x229>
   1d71f:	48 8d 05 20 db 01 00 	lea    rax,[rip+0x1db20]        # 3b246 <stbi__depth_scale_table+0x64e>
   1d726:	48 89 c7             	mov    rdi,rax
   1d729:	e8 44 74 fe ff       	call   4b72 <stbi__err(char const*)>
   1d72e:	b8 00 00 00 00       	mov    eax,0x0
   1d733:	e9 3d 06 00 00       	jmp    1dd75 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x866>
   1d738:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d73f:	48 83 c0 03          	add    rax,0x3
   1d743:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
   1d74a:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1d751:	ba 0a 00 00 00       	mov    edx,0xa
   1d756:	be 00 00 00 00       	mov    esi,0x0
   1d75b:	48 89 c7             	mov    rdi,rax
   1d75e:	e8 bd 70 fe ff       	call   4820 <strtol@plt>
   1d763:	89 85 b4 fb ff ff    	mov    DWORD PTR [rbp-0x44c],eax
   1d769:	48 8b 85 80 fb ff ff 	mov    rax,QWORD PTR [rbp-0x480]
   1d770:	8b 95 b4 fb ff ff    	mov    edx,DWORD PTR [rbp-0x44c]
   1d776:	89 10                	mov    DWORD PTR [rax],edx
   1d778:	48 8b 85 78 fb ff ff 	mov    rax,QWORD PTR [rbp-0x488]
   1d77f:	8b 95 b0 fb ff ff    	mov    edx,DWORD PTR [rbp-0x450]
   1d785:	89 10                	mov    DWORD PTR [rax],edx
   1d787:	48 83 bd 70 fb ff ff 00 	cmp    QWORD PTR [rbp-0x490],0x0
   1d78f:	74 0d                	je     1d79e <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x28f>
   1d791:	48 8b 85 70 fb ff ff 	mov    rax,QWORD PTR [rbp-0x490]
   1d798:	c7 00 03 00 00 00    	mov    DWORD PTR [rax],0x3
   1d79e:	83 bd 6c fb ff ff 00 	cmp    DWORD PTR [rbp-0x494],0x0
   1d7a5:	75 0a                	jne    1d7b1 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x2a2>
   1d7a7:	c7 85 6c fb ff ff 03 00 00 00 	mov    DWORD PTR [rbp-0x494],0x3
   1d7b1:	8b 95 6c fb ff ff    	mov    edx,DWORD PTR [rbp-0x494]
   1d7b7:	8b b5 b0 fb ff ff    	mov    esi,DWORD PTR [rbp-0x450]
   1d7bd:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   1d7c3:	41 b8 00 00 00 00    	mov    r8d,0x0
   1d7c9:	b9 04 00 00 00       	mov    ecx,0x4
   1d7ce:	89 c7                	mov    edi,eax
   1d7d0:	e8 f1 74 fe ff       	call   4cc6 <stbi__mad4sizes_valid(int, int, int, int, int)>
   1d7d5:	85 c0                	test   eax,eax
   1d7d7:	0f 94 c0             	sete   al
   1d7da:	84 c0                	test   al,al
   1d7dc:	74 19                	je     1d7f7 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x2e8>
   1d7de:	48 8d 05 67 ce 01 00 	lea    rax,[rip+0x1ce67]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   1d7e5:	48 89 c7             	mov    rdi,rax
   1d7e8:	e8 85 73 fe ff       	call   4b72 <stbi__err(char const*)>
   1d7ed:	b8 00 00 00 00       	mov    eax,0x0
   1d7f2:	e9 7e 05 00 00       	jmp    1dd75 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x866>
   1d7f7:	8b 95 6c fb ff ff    	mov    edx,DWORD PTR [rbp-0x494]
   1d7fd:	8b b5 b0 fb ff ff    	mov    esi,DWORD PTR [rbp-0x450]
   1d803:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   1d809:	41 b8 00 00 00 00    	mov    r8d,0x0
   1d80f:	b9 04 00 00 00       	mov    ecx,0x4
   1d814:	89 c7                	mov    edi,eax
   1d816:	e8 dc 75 fe ff       	call   4df7 <stbi__malloc_mad4(int, int, int, int, int)>
   1d81b:	48 89 85 e0 fb ff ff 	mov    QWORD PTR [rbp-0x420],rax
   1d822:	48 83 bd e0 fb ff ff 00 	cmp    QWORD PTR [rbp-0x420],0x0
   1d82a:	75 19                	jne    1d845 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x336>
   1d82c:	48 8d 05 00 c8 01 00 	lea    rax,[rip+0x1c800]        # 3a033 <_IO_stdin_used+0x33>
   1d833:	48 89 c7             	mov    rdi,rax
   1d836:	e8 37 73 fe ff       	call   4b72 <stbi__err(char const*)>
   1d83b:	b8 00 00 00 00       	mov    eax,0x0
   1d840:	e9 30 05 00 00       	jmp    1dd75 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x866>
   1d845:	83 bd b4 fb ff ff 07 	cmp    DWORD PTR [rbp-0x44c],0x7
   1d84c:	7e 10                	jle    1d85e <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x34f>
   1d84e:	81 bd b4 fb ff ff ff 7f 00 00 	cmp    DWORD PTR [rbp-0x44c],0x7fff
   1d858:	0f 8e c5 00 00 00    	jle    1d923 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x414>
   1d85e:	c7 85 a4 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x45c],0x0
   1d868:	e9 9f 00 00 00       	jmp    1d90c <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x3fd>
   1d86d:	c7 85 a0 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x460],0x0
   1d877:	eb 7a                	jmp    1d8f3 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x3e4>
   1d879:	90                   	nop
   1d87a:	48 8d 8d ec fb ff ff 	lea    rcx,[rbp-0x414]
   1d881:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d888:	ba 04 00 00 00       	mov    edx,0x4
   1d88d:	48 89 ce             	mov    rsi,rcx
   1d890:	48 89 c7             	mov    rdi,rax
   1d893:	e8 28 8e fe ff       	call   66c0 <stbi__getn(stbi__context*, unsigned char*, int)>
   1d898:	8b 85 a4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x45c]
   1d89e:	0f af 85 b4 fb ff ff 	imul   eax,DWORD PTR [rbp-0x44c]
   1d8a5:	0f af 85 6c fb ff ff 	imul   eax,DWORD PTR [rbp-0x494]
   1d8ac:	48 63 d0             	movsxd rdx,eax
   1d8af:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1d8b5:	0f af 85 6c fb ff ff 	imul   eax,DWORD PTR [rbp-0x494]
   1d8bc:	48 98                	cdqe   
   1d8be:	48 01 d0             	add    rax,rdx
   1d8c1:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1d8c9:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1d8d0:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   1d8d4:	8b 95 6c fb ff ff    	mov    edx,DWORD PTR [rbp-0x494]
   1d8da:	48 8d 85 ec fb ff ff 	lea    rax,[rbp-0x414]
   1d8e1:	48 89 c6             	mov    rsi,rax
   1d8e4:	48 89 cf             	mov    rdi,rcx
   1d8e7:	e8 49 fa ff ff       	call   1d335 <stbi__hdr_convert(float*, unsigned char*, int)>
   1d8ec:	83 85 a0 fb ff ff 01 	add    DWORD PTR [rbp-0x460],0x1
   1d8f3:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1d8f9:	3b 85 b4 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x44c]
   1d8ff:	0f 8c 74 ff ff ff    	jl     1d879 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x36a>
   1d905:	83 85 a4 fb ff ff 01 	add    DWORD PTR [rbp-0x45c],0x1
   1d90c:	8b 85 a4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x45c]
   1d912:	3b 85 b0 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x450]
   1d918:	0f 8c 4f ff ff ff    	jl     1d86d <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x35e>
   1d91e:	e9 4b 04 00 00       	jmp    1dd6e <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x85f>
   1d923:	48 c7 85 d0 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x430],0x0
   1d92e:	c7 85 a4 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x45c],0x0
   1d938:	e9 06 04 00 00       	jmp    1dd43 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x834>
   1d93d:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d944:	48 89 c7             	mov    rdi,rax
   1d947:	e8 c5 8b fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1d94c:	0f b6 c0             	movzx  eax,al
   1d94f:	89 85 b8 fb ff ff    	mov    DWORD PTR [rbp-0x448],eax
   1d955:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d95c:	48 89 c7             	mov    rdi,rax
   1d95f:	e8 ad 8b fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1d964:	0f b6 c0             	movzx  eax,al
   1d967:	89 85 bc fb ff ff    	mov    DWORD PTR [rbp-0x444],eax
   1d96d:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d974:	48 89 c7             	mov    rdi,rax
   1d977:	e8 95 8b fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1d97c:	0f b6 c0             	movzx  eax,al
   1d97f:	89 85 c0 fb ff ff    	mov    DWORD PTR [rbp-0x440],eax
   1d985:	83 bd b8 fb ff ff 02 	cmp    DWORD PTR [rbp-0x448],0x2
   1d98c:	75 1c                	jne    1d9aa <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x49b>
   1d98e:	83 bd bc fb ff ff 02 	cmp    DWORD PTR [rbp-0x444],0x2
   1d995:	75 13                	jne    1d9aa <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x49b>
   1d997:	8b 85 c0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x440]
   1d99d:	25 80 00 00 00       	and    eax,0x80
   1d9a2:	85 c0                	test   eax,eax
   1d9a4:	0f 84 80 00 00 00    	je     1da2a <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x51b>
   1d9aa:	8b 85 b8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x448]
   1d9b0:	88 85 ec fb ff ff    	mov    BYTE PTR [rbp-0x414],al
   1d9b6:	8b 85 bc fb ff ff    	mov    eax,DWORD PTR [rbp-0x444]
   1d9bc:	88 85 ed fb ff ff    	mov    BYTE PTR [rbp-0x413],al
   1d9c2:	8b 85 c0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x440]
   1d9c8:	88 85 ee fb ff ff    	mov    BYTE PTR [rbp-0x412],al
   1d9ce:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1d9d5:	48 89 c7             	mov    rdi,rax
   1d9d8:	e8 34 8b fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1d9dd:	88 85 ef fb ff ff    	mov    BYTE PTR [rbp-0x411],al
   1d9e3:	8b 95 6c fb ff ff    	mov    edx,DWORD PTR [rbp-0x494]
   1d9e9:	48 8d 8d ec fb ff ff 	lea    rcx,[rbp-0x414]
   1d9f0:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1d9f7:	48 89 ce             	mov    rsi,rcx
   1d9fa:	48 89 c7             	mov    rdi,rax
   1d9fd:	e8 33 f9 ff ff       	call   1d335 <stbi__hdr_convert(float*, unsigned char*, int)>
   1da02:	c7 85 a0 fb ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x460],0x1
   1da0c:	c7 85 a4 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x45c],0x0
   1da16:	48 8b 85 d0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x430]
   1da1d:	48 89 c7             	mov    rdi,rax
   1da20:	e8 0b 6b fe ff       	call   4530 <free@plt>
   1da25:	e9 50 fe ff ff       	jmp    1d87a <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x36b>
   1da2a:	c1 a5 c0 fb ff ff 08 	shl    DWORD PTR [rbp-0x440],0x8
   1da31:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1da38:	48 89 c7             	mov    rdi,rax
   1da3b:	e8 d1 8a fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1da40:	0f b6 c0             	movzx  eax,al
   1da43:	09 85 c0 fb ff ff    	or     DWORD PTR [rbp-0x440],eax
   1da49:	8b 85 c0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x440]
   1da4f:	3b 85 b4 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x44c]
   1da55:	74 37                	je     1da8e <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x57f>
   1da57:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1da5e:	48 89 c7             	mov    rdi,rax
   1da61:	e8 ca 6a fe ff       	call   4530 <free@plt>
   1da66:	48 8b 85 d0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x430]
   1da6d:	48 89 c7             	mov    rdi,rax
   1da70:	e8 bb 6a fe ff       	call   4530 <free@plt>
   1da75:	48 8d 05 ec d7 01 00 	lea    rax,[rip+0x1d7ec]        # 3b268 <stbi__depth_scale_table+0x670>
   1da7c:	48 89 c7             	mov    rdi,rax
   1da7f:	e8 ee 70 fe ff       	call   4b72 <stbi__err(char const*)>
   1da84:	b8 00 00 00 00       	mov    eax,0x0
   1da89:	e9 e7 02 00 00       	jmp    1dd75 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x866>
   1da8e:	48 83 bd d0 fb ff ff 00 	cmp    QWORD PTR [rbp-0x430],0x0
   1da96:	75 50                	jne    1dae8 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5d9>
   1da98:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   1da9e:	ba 00 00 00 00       	mov    edx,0x0
   1daa3:	be 04 00 00 00       	mov    esi,0x4
   1daa8:	89 c7                	mov    edi,eax
   1daaa:	e8 a4 72 fe ff       	call   4d53 <stbi__malloc_mad2(int, int, int)>
   1daaf:	48 89 85 d0 fb ff ff 	mov    QWORD PTR [rbp-0x430],rax
   1dab6:	48 83 bd d0 fb ff ff 00 	cmp    QWORD PTR [rbp-0x430],0x0
   1dabe:	75 28                	jne    1dae8 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5d9>
   1dac0:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1dac7:	48 89 c7             	mov    rdi,rax
   1daca:	e8 61 6a fe ff       	call   4530 <free@plt>
   1dacf:	48 8d 05 5d c5 01 00 	lea    rax,[rip+0x1c55d]        # 3a033 <_IO_stdin_used+0x33>
   1dad6:	48 89 c7             	mov    rdi,rax
   1dad9:	e8 94 70 fe ff       	call   4b72 <stbi__err(char const*)>
   1dade:	b8 00 00 00 00       	mov    eax,0x0
   1dae3:	e9 8d 02 00 00       	jmp    1dd75 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x866>
   1dae8:	c7 85 a8 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x458],0x0
   1daf2:	e9 bd 01 00 00       	jmp    1dcb4 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x7a5>
   1daf7:	c7 85 a0 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x460],0x0
   1db01:	e9 83 01 00 00       	jmp    1dc89 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x77a>
   1db06:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1db0d:	48 89 c7             	mov    rdi,rax
   1db10:	e8 fc 89 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1db15:	88 85 9a fb ff ff    	mov    BYTE PTR [rbp-0x466],al
   1db1b:	80 bd 9a fb ff ff 80 	cmp    BYTE PTR [rbp-0x466],0x80
   1db22:	0f 86 bc 00 00 00    	jbe    1dbe4 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x6d5>
   1db28:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1db2f:	48 89 c7             	mov    rdi,rax
   1db32:	e8 da 89 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1db37:	88 85 9b fb ff ff    	mov    BYTE PTR [rbp-0x465],al
   1db3d:	80 85 9a fb ff ff 80 	add    BYTE PTR [rbp-0x466],0x80
   1db44:	0f b6 85 9a fb ff ff 	movzx  eax,BYTE PTR [rbp-0x466]
   1db4b:	39 85 c4 fb ff ff    	cmp    DWORD PTR [rbp-0x43c],eax
   1db51:	7d 37                	jge    1db8a <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x67b>
   1db53:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1db5a:	48 89 c7             	mov    rdi,rax
   1db5d:	e8 ce 69 fe ff       	call   4530 <free@plt>
   1db62:	48 8b 85 d0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x430]
   1db69:	48 89 c7             	mov    rdi,rax
   1db6c:	e8 bf 69 fe ff       	call   4530 <free@plt>
   1db71:	48 8d 05 e4 d5 01 00 	lea    rax,[rip+0x1d5e4]        # 3b15c <stbi__depth_scale_table+0x564>
   1db78:	48 89 c7             	mov    rdi,rax
   1db7b:	e8 f2 6f fe ff       	call   4b72 <stbi__err(char const*)>
   1db80:	b8 00 00 00 00       	mov    eax,0x0
   1db85:	e9 eb 01 00 00       	jmp    1dd75 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x866>
   1db8a:	c7 85 ac fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x454],0x0
   1db94:	eb 3a                	jmp    1dbd0 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x6c1>
   1db96:	0f b6 95 9b fb ff ff 	movzx  edx,BYTE PTR [rbp-0x465]
   1db9d:	48 8b b5 d0 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x430]
   1dba4:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1dbaa:	8d 48 01             	lea    ecx,[rax+0x1]
   1dbad:	89 8d a0 fb ff ff    	mov    DWORD PTR [rbp-0x460],ecx
   1dbb3:	8d 0c 85 00 00 00 00 	lea    ecx,[rax*4+0x0]
   1dbba:	8b 85 a8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x458]
   1dbc0:	01 c8                	add    eax,ecx
   1dbc2:	48 98                	cdqe   
   1dbc4:	48 01 f0             	add    rax,rsi
   1dbc7:	88 10                	mov    BYTE PTR [rax],dl
   1dbc9:	83 85 ac fb ff ff 01 	add    DWORD PTR [rbp-0x454],0x1
   1dbd0:	0f b6 85 9a fb ff ff 	movzx  eax,BYTE PTR [rbp-0x466]
   1dbd7:	39 85 ac fb ff ff    	cmp    DWORD PTR [rbp-0x454],eax
   1dbdd:	7c b7                	jl     1db96 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x687>
   1dbdf:	e9 a5 00 00 00       	jmp    1dc89 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x77a>
   1dbe4:	0f b6 85 9a fb ff ff 	movzx  eax,BYTE PTR [rbp-0x466]
   1dbeb:	39 85 c4 fb ff ff    	cmp    DWORD PTR [rbp-0x43c],eax
   1dbf1:	7d 37                	jge    1dc2a <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x71b>
   1dbf3:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1dbfa:	48 89 c7             	mov    rdi,rax
   1dbfd:	e8 2e 69 fe ff       	call   4530 <free@plt>
   1dc02:	48 8b 85 d0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x430]
   1dc09:	48 89 c7             	mov    rdi,rax
   1dc0c:	e8 1f 69 fe ff       	call   4530 <free@plt>
   1dc11:	48 8d 05 44 d5 01 00 	lea    rax,[rip+0x1d544]        # 3b15c <stbi__depth_scale_table+0x564>
   1dc18:	48 89 c7             	mov    rdi,rax
   1dc1b:	e8 52 6f fe ff       	call   4b72 <stbi__err(char const*)>
   1dc20:	b8 00 00 00 00       	mov    eax,0x0
   1dc25:	e9 4b 01 00 00       	jmp    1dd75 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x866>
   1dc2a:	c7 85 ac fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x454],0x0
   1dc34:	eb 44                	jmp    1dc7a <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x76b>
   1dc36:	48 8b 85 88 fb ff ff 	mov    rax,QWORD PTR [rbp-0x478]
   1dc3d:	48 89 c7             	mov    rdi,rax
   1dc40:	e8 cc 88 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1dc45:	89 c2                	mov    edx,eax
   1dc47:	48 8b b5 d0 fb ff ff 	mov    rsi,QWORD PTR [rbp-0x430]
   1dc4e:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1dc54:	8d 48 01             	lea    ecx,[rax+0x1]
   1dc57:	89 8d a0 fb ff ff    	mov    DWORD PTR [rbp-0x460],ecx
   1dc5d:	8d 0c 85 00 00 00 00 	lea    ecx,[rax*4+0x0]
   1dc64:	8b 85 a8 fb ff ff    	mov    eax,DWORD PTR [rbp-0x458]
   1dc6a:	01 c8                	add    eax,ecx
   1dc6c:	48 98                	cdqe   
   1dc6e:	48 01 f0             	add    rax,rsi
   1dc71:	88 10                	mov    BYTE PTR [rax],dl
   1dc73:	83 85 ac fb ff ff 01 	add    DWORD PTR [rbp-0x454],0x1
   1dc7a:	0f b6 85 9a fb ff ff 	movzx  eax,BYTE PTR [rbp-0x466]
   1dc81:	39 85 ac fb ff ff    	cmp    DWORD PTR [rbp-0x454],eax
   1dc87:	7c ad                	jl     1dc36 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x727>
   1dc89:	8b 85 b4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x44c]
   1dc8f:	2b 85 a0 fb ff ff    	sub    eax,DWORD PTR [rbp-0x460]
   1dc95:	89 85 c4 fb ff ff    	mov    DWORD PTR [rbp-0x43c],eax
   1dc9b:	83 bd c4 fb ff ff 00 	cmp    DWORD PTR [rbp-0x43c],0x0
   1dca2:	0f 9f c0             	setg   al
   1dca5:	84 c0                	test   al,al
   1dca7:	0f 85 59 fe ff ff    	jne    1db06 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5f7>
   1dcad:	83 85 a8 fb ff ff 01 	add    DWORD PTR [rbp-0x458],0x1
   1dcb4:	83 bd a8 fb ff ff 03 	cmp    DWORD PTR [rbp-0x458],0x3
   1dcbb:	0f 8e 36 fe ff ff    	jle    1daf7 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x5e8>
   1dcc1:	c7 85 a0 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x460],0x0
   1dccb:	eb 61                	jmp    1dd2e <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x81f>
   1dccd:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1dcd3:	c1 e0 02             	shl    eax,0x2
   1dcd6:	48 63 d0             	movsxd rdx,eax
   1dcd9:	48 8b 85 d0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x430]
   1dce0:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   1dce4:	8b 85 a4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x45c]
   1dcea:	0f af 85 b4 fb ff ff 	imul   eax,DWORD PTR [rbp-0x44c]
   1dcf1:	89 c2                	mov    edx,eax
   1dcf3:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1dcf9:	01 d0                	add    eax,edx
   1dcfb:	0f af 85 6c fb ff ff 	imul   eax,DWORD PTR [rbp-0x494]
   1dd02:	48 98                	cdqe   
   1dd04:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   1dd0c:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1dd13:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   1dd17:	8b 85 6c fb ff ff    	mov    eax,DWORD PTR [rbp-0x494]
   1dd1d:	89 c2                	mov    edx,eax
   1dd1f:	48 89 cf             	mov    rdi,rcx
   1dd22:	e8 0e f6 ff ff       	call   1d335 <stbi__hdr_convert(float*, unsigned char*, int)>
   1dd27:	83 85 a0 fb ff ff 01 	add    DWORD PTR [rbp-0x460],0x1
   1dd2e:	8b 85 a0 fb ff ff    	mov    eax,DWORD PTR [rbp-0x460]
   1dd34:	3b 85 b4 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x44c]
   1dd3a:	7c 91                	jl     1dccd <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x7be>
   1dd3c:	83 85 a4 fb ff ff 01 	add    DWORD PTR [rbp-0x45c],0x1
   1dd43:	8b 85 a4 fb ff ff    	mov    eax,DWORD PTR [rbp-0x45c]
   1dd49:	3b 85 b0 fb ff ff    	cmp    eax,DWORD PTR [rbp-0x450]
   1dd4f:	0f 8c e8 fb ff ff    	jl     1d93d <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x42e>
   1dd55:	48 83 bd d0 fb ff ff 00 	cmp    QWORD PTR [rbp-0x430],0x0
   1dd5d:	74 0f                	je     1dd6e <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x85f>
   1dd5f:	48 8b 85 d0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x430]
   1dd66:	48 89 c7             	mov    rdi,rax
   1dd69:	e8 c2 67 fe ff       	call   4530 <free@plt>
   1dd6e:	48 8b 85 e0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x420]
   1dd75:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1dd79:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1dd82:	74 05                	je     1dd89 <stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x87a>
   1dd84:	e8 57 67 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1dd89:	c9                   	leave  
   1dd8a:	c3                   	ret    

000000000001dd8b <stbi__hdr_info(stbi__context*, int*, int*, int*)>:
   1dd8b:	55                   	push   rbp
   1dd8c:	48 89 e5             	mov    rbp,rsp
   1dd8f:	48 81 ec 40 04 00 00 	sub    rsp,0x440
   1dd96:	48 89 bd d8 fb ff ff 	mov    QWORD PTR [rbp-0x428],rdi
   1dd9d:	48 89 b5 d0 fb ff ff 	mov    QWORD PTR [rbp-0x430],rsi
   1dda4:	48 89 95 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rdx
   1ddab:	48 89 8d c0 fb ff ff 	mov    QWORD PTR [rbp-0x440],rcx
   1ddb2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1ddbb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1ddbf:	31 c0                	xor    eax,eax
   1ddc1:	c7 85 e4 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x41c],0x0
   1ddcb:	48 83 bd d0 fb ff ff 00 	cmp    QWORD PTR [rbp-0x430],0x0
   1ddd3:	75 0e                	jne    1dde3 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x58>
   1ddd5:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   1dddc:	48 89 85 d0 fb ff ff 	mov    QWORD PTR [rbp-0x430],rax
   1dde3:	48 83 bd c8 fb ff ff 00 	cmp    QWORD PTR [rbp-0x438],0x0
   1ddeb:	75 0e                	jne    1ddfb <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x70>
   1dded:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   1ddf4:	48 89 85 c8 fb ff ff 	mov    QWORD PTR [rbp-0x438],rax
   1ddfb:	48 83 bd c0 fb ff ff 00 	cmp    QWORD PTR [rbp-0x440],0x0
   1de03:	75 0e                	jne    1de13 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x88>
   1de05:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
   1de0c:	48 89 85 c0 fb ff ff 	mov    QWORD PTR [rbp-0x440],rax
   1de13:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1de1a:	48 89 c7             	mov    rdi,rax
   1de1d:	e8 e3 f3 ff ff       	call   1d205 <stbi__hdr_test(stbi__context*)>
   1de22:	85 c0                	test   eax,eax
   1de24:	0f 94 c0             	sete   al
   1de27:	84 c0                	test   al,al
   1de29:	74 19                	je     1de44 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0xb9>
   1de2b:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1de32:	48 89 c7             	mov    rdi,rax
   1de35:	e8 f2 6c fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1de3a:	b8 00 00 00 00       	mov    eax,0x0
   1de3f:	e9 b2 01 00 00       	jmp    1dff6 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x26b>
   1de44:	48 8d 95 f0 fb ff ff 	lea    rdx,[rbp-0x410]
   1de4b:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1de52:	48 89 d6             	mov    rsi,rdx
   1de55:	48 89 c7             	mov    rdi,rax
   1de58:	e8 09 f4 ff ff       	call   1d266 <stbi__hdr_gettoken(stbi__context*, char*)>
   1de5d:	48 89 85 e8 fb ff ff 	mov    QWORD PTR [rbp-0x418],rax
   1de64:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1de6b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1de6e:	84 c0                	test   al,al
   1de70:	74 29                	je     1de9b <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x110>
   1de72:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1de79:	48 8d 15 98 d3 01 00 	lea    rdx,[rip+0x1d398]        # 3b218 <stbi__depth_scale_table+0x620>
   1de80:	48 89 d6             	mov    rsi,rdx
   1de83:	48 89 c7             	mov    rdi,rax
   1de86:	e8 a5 67 fe ff       	call   4630 <strcmp@plt>
   1de8b:	85 c0                	test   eax,eax
   1de8d:	75 b5                	jne    1de44 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0xb9>
   1de8f:	c7 85 e4 fb ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0x41c],0x1
   1de99:	eb a9                	jmp    1de44 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0xb9>
   1de9b:	90                   	nop
   1de9c:	83 bd e4 fb ff ff 00 	cmp    DWORD PTR [rbp-0x41c],0x0
   1dea3:	75 19                	jne    1debe <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x133>
   1dea5:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1deac:	48 89 c7             	mov    rdi,rax
   1deaf:	e8 78 6c fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1deb4:	b8 00 00 00 00       	mov    eax,0x0
   1deb9:	e9 38 01 00 00       	jmp    1dff6 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x26b>
   1debe:	48 8d 95 f0 fb ff ff 	lea    rdx,[rbp-0x410]
   1dec5:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1decc:	48 89 d6             	mov    rsi,rdx
   1decf:	48 89 c7             	mov    rdi,rax
   1ded2:	e8 8f f3 ff ff       	call   1d266 <stbi__hdr_gettoken(stbi__context*, char*)>
   1ded7:	48 89 85 e8 fb ff ff 	mov    QWORD PTR [rbp-0x418],rax
   1dede:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1dee5:	ba 03 00 00 00       	mov    edx,0x3
   1deea:	48 8d 0d 51 d3 01 00 	lea    rcx,[rip+0x1d351]        # 3b242 <stbi__depth_scale_table+0x64a>
   1def1:	48 89 ce             	mov    rsi,rcx
   1def4:	48 89 c7             	mov    rdi,rax
   1def7:	e8 a4 62 fe ff       	call   41a0 <strncmp@plt>
   1defc:	85 c0                	test   eax,eax
   1defe:	74 19                	je     1df19 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x18e>
   1df00:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1df07:	48 89 c7             	mov    rdi,rax
   1df0a:	e8 1d 6c fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1df0f:	b8 00 00 00 00       	mov    eax,0x0
   1df14:	e9 dd 00 00 00       	jmp    1dff6 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x26b>
   1df19:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1df20:	48 83 c0 03          	add    rax,0x3
   1df24:	48 89 85 e8 fb ff ff 	mov    QWORD PTR [rbp-0x418],rax
   1df2b:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1df32:	48 8d 8d e8 fb ff ff 	lea    rcx,[rbp-0x418]
   1df39:	ba 0a 00 00 00       	mov    edx,0xa
   1df3e:	48 89 ce             	mov    rsi,rcx
   1df41:	48 89 c7             	mov    rdi,rax
   1df44:	e8 d7 68 fe ff       	call   4820 <strtol@plt>
   1df49:	89 c2                	mov    edx,eax
   1df4b:	48 8b 85 c8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x438]
   1df52:	89 10                	mov    DWORD PTR [rax],edx
   1df54:	eb 12                	jmp    1df68 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x1dd>
   1df56:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1df5d:	48 83 c0 01          	add    rax,0x1
   1df61:	48 89 85 e8 fb ff ff 	mov    QWORD PTR [rbp-0x418],rax
   1df68:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1df6f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1df72:	3c 20                	cmp    al,0x20
   1df74:	74 e0                	je     1df56 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x1cb>
   1df76:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1df7d:	ba 03 00 00 00       	mov    edx,0x3
   1df82:	48 8d 0d d5 d2 01 00 	lea    rcx,[rip+0x1d2d5]        # 3b25e <stbi__depth_scale_table+0x666>
   1df89:	48 89 ce             	mov    rsi,rcx
   1df8c:	48 89 c7             	mov    rdi,rax
   1df8f:	e8 0c 62 fe ff       	call   41a0 <strncmp@plt>
   1df94:	85 c0                	test   eax,eax
   1df96:	74 16                	je     1dfae <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x223>
   1df98:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
   1df9f:	48 89 c7             	mov    rdi,rax
   1dfa2:	e8 85 6b fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1dfa7:	b8 00 00 00 00       	mov    eax,0x0
   1dfac:	eb 48                	jmp    1dff6 <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x26b>
   1dfae:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1dfb5:	48 83 c0 03          	add    rax,0x3
   1dfb9:	48 89 85 e8 fb ff ff 	mov    QWORD PTR [rbp-0x418],rax
   1dfc0:	48 8b 85 e8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x418]
   1dfc7:	ba 0a 00 00 00       	mov    edx,0xa
   1dfcc:	be 00 00 00 00       	mov    esi,0x0
   1dfd1:	48 89 c7             	mov    rdi,rax
   1dfd4:	e8 47 68 fe ff       	call   4820 <strtol@plt>
   1dfd9:	89 c2                	mov    edx,eax
   1dfdb:	48 8b 85 d0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x430]
   1dfe2:	89 10                	mov    DWORD PTR [rax],edx
   1dfe4:	48 8b 85 c0 fb ff ff 	mov    rax,QWORD PTR [rbp-0x440]
   1dfeb:	c7 00 03 00 00 00    	mov    DWORD PTR [rax],0x3
   1dff1:	b8 01 00 00 00       	mov    eax,0x1
   1dff6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1dffa:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1e003:	74 05                	je     1e00a <stbi__hdr_info(stbi__context*, int*, int*, int*)+0x27f>
   1e005:	e8 d6 64 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1e00a:	c9                   	leave  
   1e00b:	c3                   	ret    

000000000001e00c <stbi__bmp_info(stbi__context*, int*, int*, int*)>:
   1e00c:	55                   	push   rbp
   1e00d:	48 89 e5             	mov    rbp,rsp
   1e010:	48 83 ec 60          	sub    rsp,0x60
   1e014:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   1e018:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   1e01c:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
   1e020:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
   1e024:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1e02d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1e031:	31 c0                	xor    eax,eax
   1e033:	c7 45 ec ff 00 00 00 	mov    DWORD PTR [rbp-0x14],0xff
   1e03a:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
   1e03e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1e042:	48 89 d6             	mov    rsi,rdx
   1e045:	48 89 c7             	mov    rdi,rax
   1e048:	e8 2d a5 ff ff       	call   1857a <stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*)>
   1e04d:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1e051:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1e055:	48 89 c7             	mov    rdi,rax
   1e058:	e8 cf 6a fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e05d:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   1e062:	75 07                	jne    1e06b <stbi__bmp_info(stbi__context*, int*, int*, int*)+0x5f>
   1e064:	b8 00 00 00 00       	mov    eax,0x0
   1e069:	eb 6e                	jmp    1e0d9 <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xcd>
   1e06b:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   1e070:	74 0e                	je     1e080 <stbi__bmp_info(stbi__context*, int*, int*, int*)+0x74>
   1e072:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1e076:	8b 00                	mov    eax,DWORD PTR [rax]
   1e078:	89 c2                	mov    edx,eax
   1e07a:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1e07e:	89 10                	mov    DWORD PTR [rax],edx
   1e080:	48 83 7d a8 00       	cmp    QWORD PTR [rbp-0x58],0x0
   1e085:	74 0f                	je     1e096 <stbi__bmp_info(stbi__context*, int*, int*, int*)+0x8a>
   1e087:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1e08b:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1e08e:	89 c2                	mov    edx,eax
   1e090:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e094:	89 10                	mov    DWORD PTR [rax],edx
   1e096:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   1e09b:	74 37                	je     1e0d4 <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xc8>
   1e09d:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   1e0a0:	83 f8 18             	cmp    eax,0x18
   1e0a3:	75 16                	jne    1e0bb <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xaf>
   1e0a5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1e0a8:	3d 00 00 00 ff       	cmp    eax,0xff000000
   1e0ad:	75 0c                	jne    1e0bb <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xaf>
   1e0af:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   1e0b3:	c7 00 03 00 00 00    	mov    DWORD PTR [rax],0x3
   1e0b9:	eb 19                	jmp    1e0d4 <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xc8>
   1e0bb:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   1e0be:	85 c0                	test   eax,eax
   1e0c0:	74 07                	je     1e0c9 <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xbd>
   1e0c2:	ba 04 00 00 00       	mov    edx,0x4
   1e0c7:	eb 05                	jmp    1e0ce <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xc2>
   1e0c9:	ba 03 00 00 00       	mov    edx,0x3
   1e0ce:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   1e0d2:	89 10                	mov    DWORD PTR [rax],edx
   1e0d4:	b8 01 00 00 00       	mov    eax,0x1
   1e0d9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1e0dd:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1e0e6:	74 05                	je     1e0ed <stbi__bmp_info(stbi__context*, int*, int*, int*)+0xe1>
   1e0e8:	e8 f3 63 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1e0ed:	c9                   	leave  
   1e0ee:	c3                   	ret    

000000000001e0ef <stbi__psd_info(stbi__context*, int*, int*, int*)>:
   1e0ef:	55                   	push   rbp
   1e0f0:	48 89 e5             	mov    rbp,rsp
   1e0f3:	48 83 ec 40          	sub    rsp,0x40
   1e0f7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   1e0fb:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   1e0ff:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   1e103:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   1e107:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1e110:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1e114:	31 c0                	xor    eax,eax
   1e116:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   1e11b:	75 08                	jne    1e125 <stbi__psd_info(stbi__context*, int*, int*, int*)+0x36>
   1e11d:	48 8d 45 ec          	lea    rax,[rbp-0x14]
   1e121:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   1e125:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   1e12a:	75 08                	jne    1e134 <stbi__psd_info(stbi__context*, int*, int*, int*)+0x45>
   1e12c:	48 8d 45 ec          	lea    rax,[rbp-0x14]
   1e130:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1e134:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
   1e139:	75 08                	jne    1e143 <stbi__psd_info(stbi__context*, int*, int*, int*)+0x54>
   1e13b:	48 8d 45 ec          	lea    rax,[rbp-0x14]
   1e13f:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1e143:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e147:	48 89 c7             	mov    rdi,rax
   1e14a:	e8 e3 86 fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1e14f:	3d 53 50 42 38       	cmp    eax,0x38425053
   1e154:	0f 95 c0             	setne  al
   1e157:	84 c0                	test   al,al
   1e159:	74 16                	je     1e171 <stbi__psd_info(stbi__context*, int*, int*, int*)+0x82>
   1e15b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e15f:	48 89 c7             	mov    rdi,rax
   1e162:	e8 c5 69 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e167:	b8 00 00 00 00       	mov    eax,0x0
   1e16c:	e9 fc 00 00 00       	jmp    1e26d <stbi__psd_info(stbi__context*, int*, int*, int*)+0x17e>
   1e171:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e175:	48 89 c7             	mov    rdi,rax
   1e178:	e8 77 86 fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1e17d:	83 f8 01             	cmp    eax,0x1
   1e180:	0f 95 c0             	setne  al
   1e183:	84 c0                	test   al,al
   1e185:	74 16                	je     1e19d <stbi__psd_info(stbi__context*, int*, int*, int*)+0xae>
   1e187:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e18b:	48 89 c7             	mov    rdi,rax
   1e18e:	e8 99 69 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e193:	b8 00 00 00 00       	mov    eax,0x0
   1e198:	e9 d0 00 00 00       	jmp    1e26d <stbi__psd_info(stbi__context*, int*, int*, int*)+0x17e>
   1e19d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e1a1:	be 06 00 00 00       	mov    esi,0x6
   1e1a6:	48 89 c7             	mov    rdi,rax
   1e1a9:	e8 57 84 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1e1ae:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e1b2:	48 89 c7             	mov    rdi,rax
   1e1b5:	e8 3a 86 fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1e1ba:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   1e1bd:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
   1e1c1:	78 06                	js     1e1c9 <stbi__psd_info(stbi__context*, int*, int*, int*)+0xda>
   1e1c3:	83 7d f0 10          	cmp    DWORD PTR [rbp-0x10],0x10
   1e1c7:	7e 16                	jle    1e1df <stbi__psd_info(stbi__context*, int*, int*, int*)+0xf0>
   1e1c9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e1cd:	48 89 c7             	mov    rdi,rax
   1e1d0:	e8 57 69 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e1d5:	b8 00 00 00 00       	mov    eax,0x0
   1e1da:	e9 8e 00 00 00       	jmp    1e26d <stbi__psd_info(stbi__context*, int*, int*, int*)+0x17e>
   1e1df:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e1e3:	48 89 c7             	mov    rdi,rax
   1e1e6:	e8 47 86 fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1e1eb:	89 c2                	mov    edx,eax
   1e1ed:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1e1f1:	89 10                	mov    DWORD PTR [rax],edx
   1e1f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e1f7:	48 89 c7             	mov    rdi,rax
   1e1fa:	e8 33 86 fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1e1ff:	89 c2                	mov    edx,eax
   1e201:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1e205:	89 10                	mov    DWORD PTR [rax],edx
   1e207:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e20b:	48 89 c7             	mov    rdi,rax
   1e20e:	e8 e1 85 fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1e213:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1e216:	83 7d f4 08          	cmp    DWORD PTR [rbp-0xc],0x8
   1e21a:	74 19                	je     1e235 <stbi__psd_info(stbi__context*, int*, int*, int*)+0x146>
   1e21c:	83 7d f4 10          	cmp    DWORD PTR [rbp-0xc],0x10
   1e220:	74 13                	je     1e235 <stbi__psd_info(stbi__context*, int*, int*, int*)+0x146>
   1e222:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e226:	48 89 c7             	mov    rdi,rax
   1e229:	e8 fe 68 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e22e:	b8 00 00 00 00       	mov    eax,0x0
   1e233:	eb 38                	jmp    1e26d <stbi__psd_info(stbi__context*, int*, int*, int*)+0x17e>
   1e235:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e239:	48 89 c7             	mov    rdi,rax
   1e23c:	e8 b3 85 fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1e241:	83 f8 03             	cmp    eax,0x3
   1e244:	0f 95 c0             	setne  al
   1e247:	84 c0                	test   al,al
   1e249:	74 13                	je     1e25e <stbi__psd_info(stbi__context*, int*, int*, int*)+0x16f>
   1e24b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e24f:	48 89 c7             	mov    rdi,rax
   1e252:	e8 d5 68 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e257:	b8 00 00 00 00       	mov    eax,0x0
   1e25c:	eb 0f                	jmp    1e26d <stbi__psd_info(stbi__context*, int*, int*, int*)+0x17e>
   1e25e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1e262:	c7 00 04 00 00 00    	mov    DWORD PTR [rax],0x4
   1e268:	b8 01 00 00 00       	mov    eax,0x1
   1e26d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1e271:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1e27a:	74 05                	je     1e281 <stbi__psd_info(stbi__context*, int*, int*, int*)+0x192>
   1e27c:	e8 5f 62 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1e281:	c9                   	leave  
   1e282:	c3                   	ret    

000000000001e283 <stbi__psd_is16(stbi__context*)>:
   1e283:	55                   	push   rbp
   1e284:	48 89 e5             	mov    rbp,rsp
   1e287:	48 83 ec 20          	sub    rsp,0x20
   1e28b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1e28f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e293:	48 89 c7             	mov    rdi,rax
   1e296:	e8 97 85 fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1e29b:	3d 53 50 42 38       	cmp    eax,0x38425053
   1e2a0:	0f 95 c0             	setne  al
   1e2a3:	84 c0                	test   al,al
   1e2a5:	74 16                	je     1e2bd <stbi__psd_is16(stbi__context*)+0x3a>
   1e2a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e2ab:	48 89 c7             	mov    rdi,rax
   1e2ae:	e8 79 68 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e2b3:	b8 00 00 00 00       	mov    eax,0x0
   1e2b8:	e9 b0 00 00 00       	jmp    1e36d <stbi__psd_is16(stbi__context*)+0xea>
   1e2bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e2c1:	48 89 c7             	mov    rdi,rax
   1e2c4:	e8 2b 85 fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1e2c9:	83 f8 01             	cmp    eax,0x1
   1e2cc:	0f 95 c0             	setne  al
   1e2cf:	84 c0                	test   al,al
   1e2d1:	74 16                	je     1e2e9 <stbi__psd_is16(stbi__context*)+0x66>
   1e2d3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e2d7:	48 89 c7             	mov    rdi,rax
   1e2da:	e8 4d 68 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e2df:	b8 00 00 00 00       	mov    eax,0x0
   1e2e4:	e9 84 00 00 00       	jmp    1e36d <stbi__psd_is16(stbi__context*)+0xea>
   1e2e9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e2ed:	be 06 00 00 00       	mov    esi,0x6
   1e2f2:	48 89 c7             	mov    rdi,rax
   1e2f5:	e8 0b 83 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1e2fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e2fe:	48 89 c7             	mov    rdi,rax
   1e301:	e8 ee 84 fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1e306:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   1e309:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
   1e30d:	78 06                	js     1e315 <stbi__psd_is16(stbi__context*)+0x92>
   1e30f:	83 7d f8 10          	cmp    DWORD PTR [rbp-0x8],0x10
   1e313:	7e 13                	jle    1e328 <stbi__psd_is16(stbi__context*)+0xa5>
   1e315:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e319:	48 89 c7             	mov    rdi,rax
   1e31c:	e8 0b 68 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e321:	b8 00 00 00 00       	mov    eax,0x0
   1e326:	eb 45                	jmp    1e36d <stbi__psd_is16(stbi__context*)+0xea>
   1e328:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e32c:	48 89 c7             	mov    rdi,rax
   1e32f:	e8 fe 84 fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1e334:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e338:	48 89 c7             	mov    rdi,rax
   1e33b:	e8 f2 84 fe ff       	call   6832 <stbi__get32be(stbi__context*)>
   1e340:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e344:	48 89 c7             	mov    rdi,rax
   1e347:	e8 a8 84 fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1e34c:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1e34f:	83 7d fc 10          	cmp    DWORD PTR [rbp-0x4],0x10
   1e353:	74 13                	je     1e368 <stbi__psd_is16(stbi__context*)+0xe5>
   1e355:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e359:	48 89 c7             	mov    rdi,rax
   1e35c:	e8 cb 67 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e361:	b8 00 00 00 00       	mov    eax,0x0
   1e366:	eb 05                	jmp    1e36d <stbi__psd_is16(stbi__context*)+0xea>
   1e368:	b8 01 00 00 00       	mov    eax,0x1
   1e36d:	c9                   	leave  
   1e36e:	c3                   	ret    

000000000001e36f <stbi__pic_info(stbi__context*, int*, int*, int*)>:
   1e36f:	55                   	push   rbp
   1e370:	48 89 e5             	mov    rbp,rsp
   1e373:	48 83 ec 70          	sub    rsp,0x70
   1e377:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   1e37b:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   1e37f:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   1e383:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
   1e387:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1e390:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1e394:	31 c0                	xor    eax,eax
   1e396:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
   1e39d:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
   1e3a4:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   1e3a9:	75 08                	jne    1e3b3 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x44>
   1e3ab:	48 8d 45 b8          	lea    rax,[rbp-0x48]
   1e3af:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   1e3b3:	48 83 7d 98 00       	cmp    QWORD PTR [rbp-0x68],0x0
   1e3b8:	75 08                	jne    1e3c2 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x53>
   1e3ba:	48 8d 45 b8          	lea    rax,[rbp-0x48]
   1e3be:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   1e3c2:	48 83 7d 90 00       	cmp    QWORD PTR [rbp-0x70],0x0
   1e3c7:	75 08                	jne    1e3d1 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x62>
   1e3c9:	48 8d 45 b8          	lea    rax,[rbp-0x48]
   1e3cd:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   1e3d1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e3d5:	48 8d 15 88 cd 01 00 	lea    rdx,[rip+0x1cd88]        # 3b164 <stbi__depth_scale_table+0x56c>
   1e3dc:	48 89 d6             	mov    rsi,rdx
   1e3df:	48 89 c7             	mov    rdi,rax
   1e3e2:	e8 5e ce ff ff       	call   1b245 <stbi__pic_is4(stbi__context*, char const*)>
   1e3e7:	85 c0                	test   eax,eax
   1e3e9:	0f 94 c0             	sete   al
   1e3ec:	84 c0                	test   al,al
   1e3ee:	74 16                	je     1e406 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x97>
   1e3f0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e3f4:	48 89 c7             	mov    rdi,rax
   1e3f7:	e8 30 67 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e3fc:	b8 00 00 00 00       	mov    eax,0x0
   1e401:	e9 a4 01 00 00       	jmp    1e5aa <stbi__pic_info(stbi__context*, int*, int*, int*)+0x23b>
   1e406:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e40a:	be 58 00 00 00       	mov    esi,0x58
   1e40f:	48 89 c7             	mov    rdi,rax
   1e412:	e8 ee 81 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1e417:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e41b:	48 89 c7             	mov    rdi,rax
   1e41e:	e8 d1 83 fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1e423:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   1e427:	89 02                	mov    DWORD PTR [rdx],eax
   1e429:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e42d:	48 89 c7             	mov    rdi,rax
   1e430:	e8 bf 83 fe ff       	call   67f4 <stbi__get16be(stbi__context*)>
   1e435:	48 8b 55 98          	mov    rdx,QWORD PTR [rbp-0x68]
   1e439:	89 02                	mov    DWORD PTR [rdx],eax
   1e43b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e43f:	48 89 c7             	mov    rdi,rax
   1e442:	e8 4d 81 fe ff       	call   6594 <stbi__at_eof(stbi__context*)>
   1e447:	85 c0                	test   eax,eax
   1e449:	0f 95 c0             	setne  al
   1e44c:	84 c0                	test   al,al
   1e44e:	74 16                	je     1e466 <stbi__pic_info(stbi__context*, int*, int*, int*)+0xf7>
   1e450:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e454:	48 89 c7             	mov    rdi,rax
   1e457:	e8 d0 66 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e45c:	b8 00 00 00 00       	mov    eax,0x0
   1e461:	e9 44 01 00 00       	jmp    1e5aa <stbi__pic_info(stbi__context*, int*, int*, int*)+0x23b>
   1e466:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   1e46a:	8b 00                	mov    eax,DWORD PTR [rax]
   1e46c:	85 c0                	test   eax,eax
   1e46e:	74 30                	je     1e4a0 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x131>
   1e470:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   1e474:	8b 08                	mov    ecx,DWORD PTR [rax]
   1e476:	b8 00 00 00 10       	mov    eax,0x10000000
   1e47b:	99                   	cdq    
   1e47c:	f7 f9                	idiv   ecx
   1e47e:	89 c2                	mov    edx,eax
   1e480:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   1e484:	8b 00                	mov    eax,DWORD PTR [rax]
   1e486:	39 c2                	cmp    edx,eax
   1e488:	7d 16                	jge    1e4a0 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x131>
   1e48a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e48e:	48 89 c7             	mov    rdi,rax
   1e491:	e8 96 66 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e496:	b8 00 00 00 00       	mov    eax,0x0
   1e49b:	e9 0a 01 00 00       	jmp    1e5aa <stbi__pic_info(stbi__context*, int*, int*, int*)+0x23b>
   1e4a0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e4a4:	be 08 00 00 00       	mov    esi,0x8
   1e4a9:	48 89 c7             	mov    rdi,rax
   1e4ac:	e8 54 81 fe ff       	call   6605 <stbi__skip(stbi__context*, int)>
   1e4b1:	83 7d c0 0a          	cmp    DWORD PTR [rbp-0x40],0xa
   1e4b5:	75 0a                	jne    1e4c1 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x152>
   1e4b7:	b8 00 00 00 00       	mov    eax,0x0
   1e4bc:	e9 e9 00 00 00       	jmp    1e5aa <stbi__pic_info(stbi__context*, int*, int*, int*)+0x23b>
   1e4c1:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
   1e4c4:	8d 50 01             	lea    edx,[rax+0x1]
   1e4c7:	89 55 c0             	mov    DWORD PTR [rbp-0x40],edx
   1e4ca:	48 8d 4d d0          	lea    rcx,[rbp-0x30]
   1e4ce:	48 63 d0             	movsxd rdx,eax
   1e4d1:	48 89 d0             	mov    rax,rdx
   1e4d4:	48 01 c0             	add    rax,rax
   1e4d7:	48 01 d0             	add    rax,rdx
   1e4da:	48 01 c8             	add    rax,rcx
   1e4dd:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1e4e1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e4e5:	48 89 c7             	mov    rdi,rax
   1e4e8:	e8 24 80 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1e4ed:	0f b6 c0             	movzx  eax,al
   1e4f0:	89 45 c4             	mov    DWORD PTR [rbp-0x3c],eax
   1e4f3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e4f7:	48 89 c7             	mov    rdi,rax
   1e4fa:	e8 12 80 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1e4ff:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   1e503:	88 02                	mov    BYTE PTR [rdx],al
   1e505:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e509:	48 89 c7             	mov    rdi,rax
   1e50c:	e8 00 80 fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1e511:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   1e515:	88 42 01             	mov    BYTE PTR [rdx+0x1],al
   1e518:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e51c:	48 89 c7             	mov    rdi,rax
   1e51f:	e8 ed 7f fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1e524:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   1e528:	88 42 02             	mov    BYTE PTR [rdx+0x2],al
   1e52b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1e52f:	0f b6 40 02          	movzx  eax,BYTE PTR [rax+0x2]
   1e533:	0f b6 c0             	movzx  eax,al
   1e536:	09 45 bc             	or     DWORD PTR [rbp-0x44],eax
   1e539:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e53d:	48 89 c7             	mov    rdi,rax
   1e540:	e8 4f 80 fe ff       	call   6594 <stbi__at_eof(stbi__context*)>
   1e545:	85 c0                	test   eax,eax
   1e547:	0f 95 c0             	setne  al
   1e54a:	84 c0                	test   al,al
   1e54c:	74 13                	je     1e561 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x1f2>
   1e54e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e552:	48 89 c7             	mov    rdi,rax
   1e555:	e8 d2 65 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e55a:	b8 00 00 00 00       	mov    eax,0x0
   1e55f:	eb 49                	jmp    1e5aa <stbi__pic_info(stbi__context*, int*, int*, int*)+0x23b>
   1e561:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   1e565:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1e568:	3c 08                	cmp    al,0x8
   1e56a:	74 13                	je     1e57f <stbi__pic_info(stbi__context*, int*, int*, int*)+0x210>
   1e56c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   1e570:	48 89 c7             	mov    rdi,rax
   1e573:	e8 b4 65 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e578:	b8 00 00 00 00       	mov    eax,0x0
   1e57d:	eb 2b                	jmp    1e5aa <stbi__pic_info(stbi__context*, int*, int*, int*)+0x23b>
   1e57f:	83 7d c4 00          	cmp    DWORD PTR [rbp-0x3c],0x0
   1e583:	0f 85 28 ff ff ff    	jne    1e4b1 <stbi__pic_info(stbi__context*, int*, int*, int*)+0x142>
   1e589:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
   1e58c:	83 e0 10             	and    eax,0x10
   1e58f:	85 c0                	test   eax,eax
   1e591:	74 07                	je     1e59a <stbi__pic_info(stbi__context*, int*, int*, int*)+0x22b>
   1e593:	ba 04 00 00 00       	mov    edx,0x4
   1e598:	eb 05                	jmp    1e59f <stbi__pic_info(stbi__context*, int*, int*, int*)+0x230>
   1e59a:	ba 03 00 00 00       	mov    edx,0x3
   1e59f:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
   1e5a3:	89 10                	mov    DWORD PTR [rax],edx
   1e5a5:	b8 01 00 00 00       	mov    eax,0x1
   1e5aa:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1e5ae:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1e5b7:	74 05                	je     1e5be <stbi__pic_info(stbi__context*, int*, int*, int*)+0x24f>
   1e5b9:	e8 22 5f fe ff       	call   44e0 <__stack_chk_fail@plt>
   1e5be:	c9                   	leave  
   1e5bf:	c3                   	ret    

000000000001e5c0 <stbi__pnm_test(stbi__context*)>:
   1e5c0:	55                   	push   rbp
   1e5c1:	48 89 e5             	mov    rbp,rsp
   1e5c4:	48 83 ec 20          	sub    rsp,0x20
   1e5c8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1e5cc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e5d0:	48 89 c7             	mov    rdi,rax
   1e5d3:	e8 39 7f fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1e5d8:	88 45 fe             	mov    BYTE PTR [rbp-0x2],al
   1e5db:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e5df:	48 89 c7             	mov    rdi,rax
   1e5e2:	e8 2a 7f fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1e5e7:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
   1e5ea:	80 7d fe 50          	cmp    BYTE PTR [rbp-0x2],0x50
   1e5ee:	75 0c                	jne    1e5fc <stbi__pnm_test(stbi__context*)+0x3c>
   1e5f0:	80 7d ff 35          	cmp    BYTE PTR [rbp-0x1],0x35
   1e5f4:	74 19                	je     1e60f <stbi__pnm_test(stbi__context*)+0x4f>
   1e5f6:	80 7d ff 36          	cmp    BYTE PTR [rbp-0x1],0x36
   1e5fa:	74 13                	je     1e60f <stbi__pnm_test(stbi__context*)+0x4f>
   1e5fc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e600:	48 89 c7             	mov    rdi,rax
   1e603:	e8 24 65 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e608:	b8 00 00 00 00       	mov    eax,0x0
   1e60d:	eb 05                	jmp    1e614 <stbi__pnm_test(stbi__context*)+0x54>
   1e60f:	b8 01 00 00 00       	mov    eax,0x1
   1e614:	c9                   	leave  
   1e615:	c3                   	ret    

000000000001e616 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)>:
   1e616:	55                   	push   rbp
   1e617:	48 89 e5             	mov    rbp,rsp
   1e61a:	48 83 ec 40          	sub    rsp,0x40
   1e61e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1e622:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1e626:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1e62a:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   1e62e:	44 89 45 cc          	mov    DWORD PTR [rbp-0x34],r8d
   1e632:	4c 89 4d c0          	mov    QWORD PTR [rbp-0x40],r9
   1e636:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e63a:	48 8d 48 08          	lea    rcx,[rax+0x8]
   1e63e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e642:	48 8d 50 04          	lea    rdx,[rax+0x4]
   1e646:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
   1e64a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e64e:	48 89 c7             	mov    rdi,rax
   1e651:	e8 15 03 00 00       	call   1e96b <stbi__pnm_info(stbi__context*, int*, int*, int*)>
   1e656:	85 c0                	test   eax,eax
   1e658:	0f 94 c0             	sete   al
   1e65b:	84 c0                	test   al,al
   1e65d:	74 0a                	je     1e669 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x53>
   1e65f:	b8 00 00 00 00       	mov    eax,0x0
   1e664:	e9 3a 01 00 00       	jmp    1e7a3 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x18d>
   1e669:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e66d:	8b 00                	mov    eax,DWORD PTR [rax]
   1e66f:	89 c2                	mov    edx,eax
   1e671:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1e675:	89 10                	mov    DWORD PTR [rax],edx
   1e677:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e67b:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1e67e:	89 c2                	mov    edx,eax
   1e680:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e684:	89 10                	mov    DWORD PTR [rax],edx
   1e686:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   1e68b:	74 0d                	je     1e69a <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x84>
   1e68d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e691:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
   1e694:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   1e698:	89 10                	mov    DWORD PTR [rax],edx
   1e69a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e69e:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1e6a1:	89 c2                	mov    edx,eax
   1e6a3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e6a7:	8b 00                	mov    eax,DWORD PTR [rax]
   1e6a9:	89 c6                	mov    esi,eax
   1e6ab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e6af:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1e6b2:	b9 00 00 00 00       	mov    ecx,0x0
   1e6b7:	89 c7                	mov    edi,eax
   1e6b9:	e8 9e 65 fe ff       	call   4c5c <stbi__mad3sizes_valid(int, int, int, int)>
   1e6be:	85 c0                	test   eax,eax
   1e6c0:	0f 94 c0             	sete   al
   1e6c3:	84 c0                	test   al,al
   1e6c5:	74 19                	je     1e6e0 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0xca>
   1e6c7:	48 8d 05 7e bf 01 00 	lea    rax,[rip+0x1bf7e]        # 3a64c <stbi__process_frame_header(stbi__jpeg*, int)::rgb+0x5a>
   1e6ce:	48 89 c7             	mov    rdi,rax
   1e6d1:	e8 9c 64 fe ff       	call   4b72 <stbi__err(char const*)>
   1e6d6:	b8 00 00 00 00       	mov    eax,0x0
   1e6db:	e9 c3 00 00 00       	jmp    1e7a3 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x18d>
   1e6e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e6e4:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1e6e7:	89 c2                	mov    edx,eax
   1e6e9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e6ed:	8b 00                	mov    eax,DWORD PTR [rax]
   1e6ef:	89 c6                	mov    esi,eax
   1e6f1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e6f5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1e6f8:	b9 00 00 00 00       	mov    ecx,0x0
   1e6fd:	89 c7                	mov    edi,eax
   1e6ff:	e8 9d 66 fe ff       	call   4da1 <stbi__malloc_mad3(int, int, int, int)>
   1e704:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1e708:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1e70d:	75 16                	jne    1e725 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x10f>
   1e70f:	48 8d 05 1d b9 01 00 	lea    rax,[rip+0x1b91d]        # 3a033 <_IO_stdin_used+0x33>
   1e716:	48 89 c7             	mov    rdi,rax
   1e719:	e8 54 64 fe ff       	call   4b72 <stbi__err(char const*)>
   1e71e:	b8 00 00 00 00       	mov    eax,0x0
   1e723:	eb 7e                	jmp    1e7a3 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x18d>
   1e725:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e729:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1e72c:	89 c2                	mov    edx,eax
   1e72e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e732:	8b 00                	mov    eax,DWORD PTR [rax]
   1e734:	0f af d0             	imul   edx,eax
   1e737:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e73b:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
   1e73e:	0f af c2             	imul   eax,edx
   1e741:	89 c2                	mov    edx,eax
   1e743:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   1e747:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e74b:	48 89 ce             	mov    rsi,rcx
   1e74e:	48 89 c7             	mov    rdi,rax
   1e751:	e8 6a 7f fe ff       	call   66c0 <stbi__getn(stbi__context*, unsigned char*, int)>
   1e756:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   1e75a:	74 43                	je     1e79f <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x189>
   1e75c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e760:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   1e763:	39 45 cc             	cmp    DWORD PTR [rbp-0x34],eax
   1e766:	74 37                	je     1e79f <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x189>
   1e768:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e76c:	8b 78 04             	mov    edi,DWORD PTR [rax+0x4]
   1e76f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e773:	8b 08                	mov    ecx,DWORD PTR [rax]
   1e775:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e779:	8b 70 08             	mov    esi,DWORD PTR [rax+0x8]
   1e77c:	8b 55 cc             	mov    edx,DWORD PTR [rbp-0x34]
   1e77f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e783:	41 89 f8             	mov    r8d,edi
   1e786:	48 89 c7             	mov    rdi,rax
   1e789:	e8 73 81 fe ff       	call   6901 <stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int)>
   1e78e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1e792:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1e797:	75 06                	jne    1e79f <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x189>
   1e799:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e79d:	eb 04                	jmp    1e7a3 <stbi__pnm_load(stbi__context*, int*, int*, int*, int, stbi__result_info*)+0x18d>
   1e79f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e7a3:	c9                   	leave  
   1e7a4:	c3                   	ret    

000000000001e7a5 <stbi__pnm_isspace(char)>:
   1e7a5:	55                   	push   rbp
   1e7a6:	48 89 e5             	mov    rbp,rsp
   1e7a9:	89 f8                	mov    eax,edi
   1e7ab:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
   1e7ae:	80 7d fc 20          	cmp    BYTE PTR [rbp-0x4],0x20
   1e7b2:	74 1e                	je     1e7d2 <stbi__pnm_isspace(char)+0x2d>
   1e7b4:	80 7d fc 09          	cmp    BYTE PTR [rbp-0x4],0x9
   1e7b8:	74 18                	je     1e7d2 <stbi__pnm_isspace(char)+0x2d>
   1e7ba:	80 7d fc 0a          	cmp    BYTE PTR [rbp-0x4],0xa
   1e7be:	74 12                	je     1e7d2 <stbi__pnm_isspace(char)+0x2d>
   1e7c0:	80 7d fc 0b          	cmp    BYTE PTR [rbp-0x4],0xb
   1e7c4:	74 0c                	je     1e7d2 <stbi__pnm_isspace(char)+0x2d>
   1e7c6:	80 7d fc 0c          	cmp    BYTE PTR [rbp-0x4],0xc
   1e7ca:	74 06                	je     1e7d2 <stbi__pnm_isspace(char)+0x2d>
   1e7cc:	80 7d fc 0d          	cmp    BYTE PTR [rbp-0x4],0xd
   1e7d0:	75 07                	jne    1e7d9 <stbi__pnm_isspace(char)+0x34>
   1e7d2:	b8 01 00 00 00       	mov    eax,0x1
   1e7d7:	eb 05                	jmp    1e7de <stbi__pnm_isspace(char)+0x39>
   1e7d9:	b8 00 00 00 00       	mov    eax,0x0
   1e7de:	0f b6 c0             	movzx  eax,al
   1e7e1:	5d                   	pop    rbp
   1e7e2:	c3                   	ret    

000000000001e7e3 <stbi__pnm_skip_whitespace(stbi__context*, char*)>:
   1e7e3:	55                   	push   rbp
   1e7e4:	48 89 e5             	mov    rbp,rsp
   1e7e7:	48 83 ec 10          	sub    rsp,0x10
   1e7eb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   1e7ef:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   1e7f3:	eb 14                	jmp    1e809 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x26>
   1e7f5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e7f9:	48 89 c7             	mov    rdi,rax
   1e7fc:	e8 10 7d fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1e801:	89 c2                	mov    edx,eax
   1e803:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1e807:	88 10                	mov    BYTE PTR [rax],dl
   1e809:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e80d:	48 89 c7             	mov    rdi,rax
   1e810:	e8 7f 7d fe ff       	call   6594 <stbi__at_eof(stbi__context*)>
   1e815:	85 c0                	test   eax,eax
   1e817:	75 1c                	jne    1e835 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x52>
   1e819:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1e81d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1e820:	0f be c0             	movsx  eax,al
   1e823:	89 c7                	mov    edi,eax
   1e825:	e8 7b ff ff ff       	call   1e7a5 <stbi__pnm_isspace(char)>
   1e82a:	85 c0                	test   eax,eax
   1e82c:	74 07                	je     1e835 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x52>
   1e82e:	b8 01 00 00 00       	mov    eax,0x1
   1e833:	eb 05                	jmp    1e83a <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x57>
   1e835:	b8 00 00 00 00       	mov    eax,0x0
   1e83a:	84 c0                	test   al,al
   1e83c:	75 b7                	jne    1e7f5 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x12>
   1e83e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e842:	48 89 c7             	mov    rdi,rax
   1e845:	e8 4a 7d fe ff       	call   6594 <stbi__at_eof(stbi__context*)>
   1e84a:	85 c0                	test   eax,eax
   1e84c:	75 0b                	jne    1e859 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x76>
   1e84e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1e852:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1e855:	3c 23                	cmp    al,0x23
   1e857:	74 07                	je     1e860 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x7d>
   1e859:	b8 01 00 00 00       	mov    eax,0x1
   1e85e:	eb 05                	jmp    1e865 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x82>
   1e860:	b8 00 00 00 00       	mov    eax,0x0
   1e865:	84 c0                	test   al,al
   1e867:	75 51                	jne    1e8ba <stbi__pnm_skip_whitespace(stbi__context*, char*)+0xd7>
   1e869:	eb 14                	jmp    1e87f <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x9c>
   1e86b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e86f:	48 89 c7             	mov    rdi,rax
   1e872:	e8 9a 7c fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1e877:	89 c2                	mov    edx,eax
   1e879:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1e87d:	88 10                	mov    BYTE PTR [rax],dl
   1e87f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1e883:	48 89 c7             	mov    rdi,rax
   1e886:	e8 09 7d fe ff       	call   6594 <stbi__at_eof(stbi__context*)>
   1e88b:	85 c0                	test   eax,eax
   1e88d:	75 1d                	jne    1e8ac <stbi__pnm_skip_whitespace(stbi__context*, char*)+0xc9>
   1e88f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1e893:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1e896:	3c 0a                	cmp    al,0xa
   1e898:	74 12                	je     1e8ac <stbi__pnm_skip_whitespace(stbi__context*, char*)+0xc9>
   1e89a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   1e89e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1e8a1:	3c 0d                	cmp    al,0xd
   1e8a3:	74 07                	je     1e8ac <stbi__pnm_skip_whitespace(stbi__context*, char*)+0xc9>
   1e8a5:	b8 01 00 00 00       	mov    eax,0x1
   1e8aa:	eb 05                	jmp    1e8b1 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0xce>
   1e8ac:	b8 00 00 00 00       	mov    eax,0x0
   1e8b1:	84 c0                	test   al,al
   1e8b3:	75 b6                	jne    1e86b <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x88>
   1e8b5:	e9 4f ff ff ff       	jmp    1e809 <stbi__pnm_skip_whitespace(stbi__context*, char*)+0x26>
   1e8ba:	90                   	nop
   1e8bb:	90                   	nop
   1e8bc:	c9                   	leave  
   1e8bd:	c3                   	ret    

000000000001e8be <stbi__pnm_isdigit(char)>:
   1e8be:	55                   	push   rbp
   1e8bf:	48 89 e5             	mov    rbp,rsp
   1e8c2:	89 f8                	mov    eax,edi
   1e8c4:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
   1e8c7:	80 7d fc 2f          	cmp    BYTE PTR [rbp-0x4],0x2f
   1e8cb:	7e 0d                	jle    1e8da <stbi__pnm_isdigit(char)+0x1c>
   1e8cd:	80 7d fc 39          	cmp    BYTE PTR [rbp-0x4],0x39
   1e8d1:	7f 07                	jg     1e8da <stbi__pnm_isdigit(char)+0x1c>
   1e8d3:	b8 01 00 00 00       	mov    eax,0x1
   1e8d8:	eb 05                	jmp    1e8df <stbi__pnm_isdigit(char)+0x21>
   1e8da:	b8 00 00 00 00       	mov    eax,0x0
   1e8df:	0f b6 c0             	movzx  eax,al
   1e8e2:	5d                   	pop    rbp
   1e8e3:	c3                   	ret    

000000000001e8e4 <stbi__pnm_getinteger(stbi__context*, char*)>:
   1e8e4:	55                   	push   rbp
   1e8e5:	48 89 e5             	mov    rbp,rsp
   1e8e8:	48 83 ec 20          	sub    rsp,0x20
   1e8ec:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1e8f0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1e8f4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1e8fb:	eb 34                	jmp    1e931 <stbi__pnm_getinteger(stbi__context*, char*)+0x4d>
   1e8fd:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   1e900:	89 d0                	mov    eax,edx
   1e902:	c1 e0 02             	shl    eax,0x2
   1e905:	01 d0                	add    eax,edx
   1e907:	01 c0                	add    eax,eax
   1e909:	89 c2                	mov    edx,eax
   1e90b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1e90f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1e912:	0f be c0             	movsx  eax,al
   1e915:	83 e8 30             	sub    eax,0x30
   1e918:	01 d0                	add    eax,edx
   1e91a:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   1e91d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e921:	48 89 c7             	mov    rdi,rax
   1e924:	e8 e8 7b fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1e929:	89 c2                	mov    edx,eax
   1e92b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1e92f:	88 10                	mov    BYTE PTR [rax],dl
   1e931:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1e935:	48 89 c7             	mov    rdi,rax
   1e938:	e8 57 7c fe ff       	call   6594 <stbi__at_eof(stbi__context*)>
   1e93d:	85 c0                	test   eax,eax
   1e93f:	75 1c                	jne    1e95d <stbi__pnm_getinteger(stbi__context*, char*)+0x79>
   1e941:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1e945:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1e948:	0f be c0             	movsx  eax,al
   1e94b:	89 c7                	mov    edi,eax
   1e94d:	e8 6c ff ff ff       	call   1e8be <stbi__pnm_isdigit(char)>
   1e952:	85 c0                	test   eax,eax
   1e954:	74 07                	je     1e95d <stbi__pnm_getinteger(stbi__context*, char*)+0x79>
   1e956:	b8 01 00 00 00       	mov    eax,0x1
   1e95b:	eb 05                	jmp    1e962 <stbi__pnm_getinteger(stbi__context*, char*)+0x7e>
   1e95d:	b8 00 00 00 00       	mov    eax,0x0
   1e962:	84 c0                	test   al,al
   1e964:	75 97                	jne    1e8fd <stbi__pnm_getinteger(stbi__context*, char*)+0x19>
   1e966:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1e969:	c9                   	leave  
   1e96a:	c3                   	ret    

000000000001e96b <stbi__pnm_info(stbi__context*, int*, int*, int*)>:
   1e96b:	55                   	push   rbp
   1e96c:	48 89 e5             	mov    rbp,rsp
   1e96f:	48 83 ec 40          	sub    rsp,0x40
   1e973:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   1e977:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   1e97b:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   1e97f:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   1e983:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1e98c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1e990:	31 c0                	xor    eax,eax
   1e992:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
   1e997:	75 08                	jne    1e9a1 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x36>
   1e999:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   1e99d:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   1e9a1:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
   1e9a6:	75 08                	jne    1e9b0 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x45>
   1e9a8:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   1e9ac:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   1e9b0:	48 83 7d c0 00       	cmp    QWORD PTR [rbp-0x40],0x0
   1e9b5:	75 08                	jne    1e9bf <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x54>
   1e9b7:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   1e9bb:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   1e9bf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e9c3:	48 89 c7             	mov    rdi,rax
   1e9c6:	e8 61 61 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1e9cb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e9cf:	48 89 c7             	mov    rdi,rax
   1e9d2:	e8 3a 7b fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1e9d7:	88 45 ee             	mov    BYTE PTR [rbp-0x12],al
   1e9da:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e9de:	48 89 c7             	mov    rdi,rax
   1e9e1:	e8 2b 7b fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1e9e6:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
   1e9e9:	80 7d ee 50          	cmp    BYTE PTR [rbp-0x12],0x50
   1e9ed:	75 0c                	jne    1e9fb <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x90>
   1e9ef:	80 7d ef 35          	cmp    BYTE PTR [rbp-0x11],0x35
   1e9f3:	74 1c                	je     1ea11 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0xa6>
   1e9f5:	80 7d ef 36          	cmp    BYTE PTR [rbp-0x11],0x36
   1e9f9:	74 16                	je     1ea11 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0xa6>
   1e9fb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1e9ff:	48 89 c7             	mov    rdi,rax
   1ea02:	e8 25 61 fe ff       	call   4b2c <stbi__rewind(stbi__context*)>
   1ea07:	b8 00 00 00 00       	mov    eax,0x0
   1ea0c:	e9 c7 00 00 00       	jmp    1ead8 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x16d>
   1ea11:	80 7d ef 36          	cmp    BYTE PTR [rbp-0x11],0x36
   1ea15:	75 07                	jne    1ea1e <stbi__pnm_info(stbi__context*, int*, int*, int*)+0xb3>
   1ea17:	ba 03 00 00 00       	mov    edx,0x3
   1ea1c:	eb 05                	jmp    1ea23 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0xb8>
   1ea1e:	ba 01 00 00 00       	mov    edx,0x1
   1ea23:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   1ea27:	89 10                	mov    DWORD PTR [rax],edx
   1ea29:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1ea2d:	48 89 c7             	mov    rdi,rax
   1ea30:	e8 dc 7a fe ff       	call   6511 <stbi__get8(stbi__context*)>
   1ea35:	88 45 ed             	mov    BYTE PTR [rbp-0x13],al
   1ea38:	48 8d 55 ed          	lea    rdx,[rbp-0x13]
   1ea3c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1ea40:	48 89 d6             	mov    rsi,rdx
   1ea43:	48 89 c7             	mov    rdi,rax
   1ea46:	e8 98 fd ff ff       	call   1e7e3 <stbi__pnm_skip_whitespace(stbi__context*, char*)>
   1ea4b:	48 8d 55 ed          	lea    rdx,[rbp-0x13]
   1ea4f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1ea53:	48 89 d6             	mov    rsi,rdx
   1ea56:	48 89 c7             	mov    rdi,rax
   1ea59:	e8 86 fe ff ff       	call   1e8e4 <stbi__pnm_getinteger(stbi__context*, char*)>
   1ea5e:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   1ea62:	89 02                	mov    DWORD PTR [rdx],eax
   1ea64:	48 8d 55 ed          	lea    rdx,[rbp-0x13]
   1ea68:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1ea6c:	48 89 d6             	mov    rsi,rdx
   1ea6f:	48 89 c7             	mov    rdi,rax
   1ea72:	e8 6c fd ff ff       	call   1e7e3 <stbi__pnm_skip_whitespace(stbi__context*, char*)>
   1ea77:	48 8d 55 ed          	lea    rdx,[rbp-0x13]
   1ea7b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1ea7f:	48 89 d6             	mov    rsi,rdx
   1ea82:	48 89 c7             	mov    rdi,rax
   1ea85:	e8 5a fe ff ff       	call   1e8e4 <stbi__pnm_getinteger(stbi__context*, char*)>
   1ea8a:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   1ea8e:	89 02                	mov    DWORD PTR [rdx],eax
   1ea90:	48 8d 55 ed          	lea    rdx,[rbp-0x13]
   1ea94:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1ea98:	48 89 d6             	mov    rsi,rdx
   1ea9b:	48 89 c7             	mov    rdi,rax
   1ea9e:	e8 40 fd ff ff       	call   1e7e3 <stbi__pnm_skip_whitespace(stbi__context*, char*)>
   1eaa3:	48 8d 55 ed          	lea    rdx,[rbp-0x13]
   1eaa7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   1eaab:	48 89 d6             	mov    rsi,rdx
   1eaae:	48 89 c7             	mov    rdi,rax
   1eab1:	e8 2e fe ff ff       	call   1e8e4 <stbi__pnm_getinteger(stbi__context*, char*)>
   1eab6:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1eab9:	81 7d f4 ff 00 00 00 	cmp    DWORD PTR [rbp-0xc],0xff
   1eac0:	7e 11                	jle    1ead3 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x168>
   1eac2:	48 8d 05 bf c7 01 00 	lea    rax,[rip+0x1c7bf]        # 3b288 <stbi__depth_scale_table+0x690>
   1eac9:	48 89 c7             	mov    rdi,rax
   1eacc:	e8 a1 60 fe ff       	call   4b72 <stbi__err(char const*)>
   1ead1:	eb 05                	jmp    1ead8 <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x16d>
   1ead3:	b8 01 00 00 00       	mov    eax,0x1
   1ead8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1eadc:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1eae5:	74 05                	je     1eaec <stbi__pnm_info(stbi__context*, int*, int*, int*)+0x181>
   1eae7:	e8 f4 59 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1eaec:	c9                   	leave  
   1eaed:	c3                   	ret    

000000000001eaee <stbi__info_main(stbi__context*, int*, int*, int*)>:
   1eaee:	55                   	push   rbp
   1eaef:	48 89 e5             	mov    rbp,rsp
   1eaf2:	48 83 ec 20          	sub    rsp,0x20
   1eaf6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   1eafa:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   1eafe:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   1eb02:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   1eb06:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1eb0a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1eb0e:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1eb12:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1eb16:	48 89 c7             	mov    rdi,rax
   1eb19:	e8 5f 4c ff ff       	call   1377d <stbi__jpeg_info(stbi__context*, int*, int*, int*)>
   1eb1e:	85 c0                	test   eax,eax
   1eb20:	0f 95 c0             	setne  al
   1eb23:	84 c0                	test   al,al
   1eb25:	74 0a                	je     1eb31 <stbi__info_main(stbi__context*, int*, int*, int*)+0x43>
   1eb27:	b8 01 00 00 00       	mov    eax,0x1
   1eb2c:	e9 5f 01 00 00       	jmp    1ec90 <stbi__info_main(stbi__context*, int*, int*, int*)+0x1a2>
   1eb31:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1eb35:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1eb39:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1eb3d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1eb41:	48 89 c7             	mov    rdi,rax
   1eb44:	e8 bf 96 ff ff       	call   18208 <stbi__png_info(stbi__context*, int*, int*, int*)>
   1eb49:	85 c0                	test   eax,eax
   1eb4b:	0f 95 c0             	setne  al
   1eb4e:	84 c0                	test   al,al
   1eb50:	74 0a                	je     1eb5c <stbi__info_main(stbi__context*, int*, int*, int*)+0x6e>
   1eb52:	b8 01 00 00 00       	mov    eax,0x1
   1eb57:	e9 34 01 00 00       	jmp    1ec90 <stbi__info_main(stbi__context*, int*, int*, int*)+0x1a2>
   1eb5c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1eb60:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1eb64:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1eb68:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1eb6c:	48 89 c7             	mov    rdi,rax
   1eb6f:	e8 e9 e5 ff ff       	call   1d15d <stbi__gif_info(stbi__context*, int*, int*, int*)>
   1eb74:	85 c0                	test   eax,eax
   1eb76:	0f 95 c0             	setne  al
   1eb79:	84 c0                	test   al,al
   1eb7b:	74 0a                	je     1eb87 <stbi__info_main(stbi__context*, int*, int*, int*)+0x99>
   1eb7d:	b8 01 00 00 00       	mov    eax,0x1
   1eb82:	e9 09 01 00 00       	jmp    1ec90 <stbi__info_main(stbi__context*, int*, int*, int*)+0x1a2>
   1eb87:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1eb8b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1eb8f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1eb93:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1eb97:	48 89 c7             	mov    rdi,rax
   1eb9a:	e8 6d f4 ff ff       	call   1e00c <stbi__bmp_info(stbi__context*, int*, int*, int*)>
   1eb9f:	85 c0                	test   eax,eax
   1eba1:	0f 95 c0             	setne  al
   1eba4:	84 c0                	test   al,al
   1eba6:	74 0a                	je     1ebb2 <stbi__info_main(stbi__context*, int*, int*, int*)+0xc4>
   1eba8:	b8 01 00 00 00       	mov    eax,0x1
   1ebad:	e9 de 00 00 00       	jmp    1ec90 <stbi__info_main(stbi__context*, int*, int*, int*)+0x1a2>
   1ebb2:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1ebb6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1ebba:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1ebbe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ebc2:	48 89 c7             	mov    rdi,rax
   1ebc5:	e8 25 f5 ff ff       	call   1e0ef <stbi__psd_info(stbi__context*, int*, int*, int*)>
   1ebca:	85 c0                	test   eax,eax
   1ebcc:	0f 95 c0             	setne  al
   1ebcf:	84 c0                	test   al,al
   1ebd1:	74 0a                	je     1ebdd <stbi__info_main(stbi__context*, int*, int*, int*)+0xef>
   1ebd3:	b8 01 00 00 00       	mov    eax,0x1
   1ebd8:	e9 b3 00 00 00       	jmp    1ec90 <stbi__info_main(stbi__context*, int*, int*, int*)+0x1a2>
   1ebdd:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1ebe1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1ebe5:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1ebe9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ebed:	48 89 c7             	mov    rdi,rax
   1ebf0:	e8 7a f7 ff ff       	call   1e36f <stbi__pic_info(stbi__context*, int*, int*, int*)>
   1ebf5:	85 c0                	test   eax,eax
   1ebf7:	0f 95 c0             	setne  al
   1ebfa:	84 c0                	test   al,al
   1ebfc:	74 0a                	je     1ec08 <stbi__info_main(stbi__context*, int*, int*, int*)+0x11a>
   1ebfe:	b8 01 00 00 00       	mov    eax,0x1
   1ec03:	e9 88 00 00 00       	jmp    1ec90 <stbi__info_main(stbi__context*, int*, int*, int*)+0x1a2>
   1ec08:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1ec0c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1ec10:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1ec14:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ec18:	48 89 c7             	mov    rdi,rax
   1ec1b:	e8 4b fd ff ff       	call   1e96b <stbi__pnm_info(stbi__context*, int*, int*, int*)>
   1ec20:	85 c0                	test   eax,eax
   1ec22:	0f 95 c0             	setne  al
   1ec25:	84 c0                	test   al,al
   1ec27:	74 07                	je     1ec30 <stbi__info_main(stbi__context*, int*, int*, int*)+0x142>
   1ec29:	b8 01 00 00 00       	mov    eax,0x1
   1ec2e:	eb 60                	jmp    1ec90 <stbi__info_main(stbi__context*, int*, int*, int*)+0x1a2>
   1ec30:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1ec34:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1ec38:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1ec3c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ec40:	48 89 c7             	mov    rdi,rax
   1ec43:	e8 43 f1 ff ff       	call   1dd8b <stbi__hdr_info(stbi__context*, int*, int*, int*)>
   1ec48:	85 c0                	test   eax,eax
   1ec4a:	0f 95 c0             	setne  al
   1ec4d:	84 c0                	test   al,al
   1ec4f:	74 07                	je     1ec58 <stbi__info_main(stbi__context*, int*, int*, int*)+0x16a>
   1ec51:	b8 01 00 00 00       	mov    eax,0x1
   1ec56:	eb 38                	jmp    1ec90 <stbi__info_main(stbi__context*, int*, int*, int*)+0x1a2>
   1ec58:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   1ec5c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   1ec60:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   1ec64:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ec68:	48 89 c7             	mov    rdi,rax
   1ec6b:	e8 ae ae ff ff       	call   19b1e <stbi__tga_info(stbi__context*, int*, int*, int*)>
   1ec70:	85 c0                	test   eax,eax
   1ec72:	0f 95 c0             	setne  al
   1ec75:	84 c0                	test   al,al
   1ec77:	74 07                	je     1ec80 <stbi__info_main(stbi__context*, int*, int*, int*)+0x192>
   1ec79:	b8 01 00 00 00       	mov    eax,0x1
   1ec7e:	eb 10                	jmp    1ec90 <stbi__info_main(stbi__context*, int*, int*, int*)+0x1a2>
   1ec80:	48 8d 05 99 b3 01 00 	lea    rax,[rip+0x1b399]        # 3a020 <_IO_stdin_used+0x20>
   1ec87:	48 89 c7             	mov    rdi,rax
   1ec8a:	e8 e3 5e fe ff       	call   4b72 <stbi__err(char const*)>
   1ec8f:	90                   	nop
   1ec90:	c9                   	leave  
   1ec91:	c3                   	ret    

000000000001ec92 <stbi__is_16_main(stbi__context*)>:
   1ec92:	55                   	push   rbp
   1ec93:	48 89 e5             	mov    rbp,rsp
   1ec96:	48 83 ec 10          	sub    rsp,0x10
   1ec9a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   1ec9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1eca2:	48 89 c7             	mov    rdi,rax
   1eca5:	e8 bb 95 ff ff       	call   18265 <stbi__png_is16(stbi__context*)>
   1ecaa:	85 c0                	test   eax,eax
   1ecac:	0f 95 c0             	setne  al
   1ecaf:	84 c0                	test   al,al
   1ecb1:	74 07                	je     1ecba <stbi__is_16_main(stbi__context*)+0x28>
   1ecb3:	b8 01 00 00 00       	mov    eax,0x1
   1ecb8:	eb 21                	jmp    1ecdb <stbi__is_16_main(stbi__context*)+0x49>
   1ecba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ecbe:	48 89 c7             	mov    rdi,rax
   1ecc1:	e8 bd f5 ff ff       	call   1e283 <stbi__psd_is16(stbi__context*)>
   1ecc6:	85 c0                	test   eax,eax
   1ecc8:	0f 95 c0             	setne  al
   1eccb:	84 c0                	test   al,al
   1eccd:	74 07                	je     1ecd6 <stbi__is_16_main(stbi__context*)+0x44>
   1eccf:	b8 01 00 00 00       	mov    eax,0x1
   1ecd4:	eb 05                	jmp    1ecdb <stbi__is_16_main(stbi__context*)+0x49>
   1ecd6:	b8 00 00 00 00       	mov    eax,0x0
   1ecdb:	c9                   	leave  
   1ecdc:	c3                   	ret    

000000000001ecdd <stbi_info>:
   1ecdd:	55                   	push   rbp
   1ecde:	48 89 e5             	mov    rbp,rsp
   1ece1:	48 83 ec 30          	sub    rsp,0x30
   1ece5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1ece9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1eced:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   1ecf1:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   1ecf5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1ecf9:	48 8d 15 47 b4 01 00 	lea    rdx,[rip+0x1b447]        # 3a147 <_IO_stdin_used+0x147>
   1ed00:	48 89 d6             	mov    rsi,rdx
   1ed03:	48 89 c7             	mov    rdi,rax
   1ed06:	e8 f3 6a fe ff       	call   57fe <stbi__fopen(char const*, char const*)>
   1ed0b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1ed0f:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1ed14:	75 11                	jne    1ed27 <stbi_info+0x4a>
   1ed16:	48 8d 05 2d b4 01 00 	lea    rax,[rip+0x1b42d]        # 3a14a <_IO_stdin_used+0x14a>
   1ed1d:	48 89 c7             	mov    rdi,rax
   1ed20:	e8 4d 5e fe ff       	call   4b72 <stbi__err(char const*)>
   1ed25:	eb 2a                	jmp    1ed51 <stbi_info+0x74>
   1ed27:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   1ed2b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   1ed2f:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   1ed33:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ed37:	48 89 c7             	mov    rdi,rax
   1ed3a:	e8 14 00 00 00       	call   1ed53 <stbi_info_from_file>
   1ed3f:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1ed42:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ed46:	48 89 c7             	mov    rdi,rax
   1ed49:	e8 d2 56 fe ff       	call   4420 <fclose@plt>
   1ed4e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1ed51:	c9                   	leave  
   1ed52:	c3                   	ret    

000000000001ed53 <stbi_info_from_file>:
   1ed53:	55                   	push   rbp
   1ed54:	48 89 e5             	mov    rbp,rsp
   1ed57:	48 81 ec 10 01 00 00 	sub    rsp,0x110
   1ed5e:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
   1ed65:	48 89 b5 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rsi
   1ed6c:	48 89 95 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdx
   1ed73:	48 89 8d f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rcx
   1ed7a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1ed83:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1ed87:	31 c0                	xor    eax,eax
   1ed89:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
   1ed90:	48 89 c7             	mov    rdi,rax
   1ed93:	e8 98 52 fe ff       	call   4030 <ftell@plt>
   1ed98:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
   1ed9f:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
   1eda6:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1edad:	48 89 d6             	mov    rsi,rdx
   1edb0:	48 89 c7             	mov    rdi,rax
   1edb3:	e8 47 5d fe ff       	call   4aff <stbi__start_file(stbi__context*, _IO_FILE*)>
   1edb8:	48 8b 8d f0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x110]
   1edbf:	48 8b 95 f8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x108]
   1edc6:	48 8b b5 00 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x100]
   1edcd:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1edd4:	48 89 c7             	mov    rdi,rax
   1edd7:	e8 12 fd ff ff       	call   1eaee <stbi__info_main(stbi__context*, int*, int*, int*)>
   1eddc:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
   1ede2:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   1ede9:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
   1edf0:	ba 00 00 00 00       	mov    edx,0x0
   1edf5:	48 89 ce             	mov    rsi,rcx
   1edf8:	48 89 c7             	mov    rdi,rax
   1edfb:	e8 d0 56 fe ff       	call   44d0 <fseek@plt>
   1ee00:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   1ee06:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1ee0a:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1ee13:	74 05                	je     1ee1a <stbi_info_from_file+0xc7>
   1ee15:	e8 c6 56 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1ee1a:	c9                   	leave  
   1ee1b:	c3                   	ret    

000000000001ee1c <stbi_is_16_bit>:
   1ee1c:	55                   	push   rbp
   1ee1d:	48 89 e5             	mov    rbp,rsp
   1ee20:	48 83 ec 20          	sub    rsp,0x20
   1ee24:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1ee28:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1ee2c:	48 8d 15 14 b3 01 00 	lea    rdx,[rip+0x1b314]        # 3a147 <_IO_stdin_used+0x147>
   1ee33:	48 89 d6             	mov    rsi,rdx
   1ee36:	48 89 c7             	mov    rdi,rax
   1ee39:	e8 c0 69 fe ff       	call   57fe <stbi__fopen(char const*, char const*)>
   1ee3e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1ee42:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1ee47:	75 11                	jne    1ee5a <stbi_is_16_bit+0x3e>
   1ee49:	48 8d 05 fa b2 01 00 	lea    rax,[rip+0x1b2fa]        # 3a14a <_IO_stdin_used+0x14a>
   1ee50:	48 89 c7             	mov    rdi,rax
   1ee53:	e8 1a 5d fe ff       	call   4b72 <stbi__err(char const*)>
   1ee58:	eb 1e                	jmp    1ee78 <stbi_is_16_bit+0x5c>
   1ee5a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ee5e:	48 89 c7             	mov    rdi,rax
   1ee61:	e8 14 00 00 00       	call   1ee7a <stbi_is_16_bit_from_file>
   1ee66:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   1ee69:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1ee6d:	48 89 c7             	mov    rdi,rax
   1ee70:	e8 ab 55 fe ff       	call   4420 <fclose@plt>
   1ee75:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   1ee78:	c9                   	leave  
   1ee79:	c3                   	ret    

000000000001ee7a <stbi_is_16_bit_from_file>:
   1ee7a:	55                   	push   rbp
   1ee7b:	48 89 e5             	mov    rbp,rsp
   1ee7e:	48 81 ec 00 01 00 00 	sub    rsp,0x100
   1ee85:	48 89 bd 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdi
   1ee8c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1ee95:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1ee99:	31 c0                	xor    eax,eax
   1ee9b:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
   1eea2:	48 89 c7             	mov    rdi,rax
   1eea5:	e8 86 51 fe ff       	call   4030 <ftell@plt>
   1eeaa:	48 89 85 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rax
   1eeb1:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
   1eeb8:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1eebf:	48 89 d6             	mov    rsi,rdx
   1eec2:	48 89 c7             	mov    rdi,rax
   1eec5:	e8 35 5c fe ff       	call   4aff <stbi__start_file(stbi__context*, _IO_FILE*)>
   1eeca:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1eed1:	48 89 c7             	mov    rdi,rax
   1eed4:	e8 b9 fd ff ff       	call   1ec92 <stbi__is_16_main(stbi__context*)>
   1eed9:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
   1eedf:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   1eee6:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
   1eeed:	ba 00 00 00 00       	mov    edx,0x0
   1eef2:	48 89 ce             	mov    rsi,rcx
   1eef5:	48 89 c7             	mov    rdi,rax
   1eef8:	e8 d3 55 fe ff       	call   44d0 <fseek@plt>
   1eefd:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   1ef03:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1ef07:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1ef10:	74 05                	je     1ef17 <stbi_is_16_bit_from_file+0x9d>
   1ef12:	e8 c9 55 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1ef17:	c9                   	leave  
   1ef18:	c3                   	ret    

000000000001ef19 <stbi_info_from_memory>:
   1ef19:	55                   	push   rbp
   1ef1a:	48 89 e5             	mov    rbp,rsp
   1ef1d:	48 81 ec 10 01 00 00 	sub    rsp,0x110
   1ef24:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
   1ef2b:	89 b5 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],esi
   1ef31:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
   1ef38:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
   1ef3f:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
   1ef46:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1ef4f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1ef53:	31 c0                	xor    eax,eax
   1ef55:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
   1ef5b:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   1ef62:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1ef69:	48 89 ce             	mov    rsi,rcx
   1ef6c:	48 89 c7             	mov    rdi,rax
   1ef6f:	e8 0c 5a fe ff       	call   4980 <stbi__start_mem(stbi__context*, unsigned char const*, int)>
   1ef74:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
   1ef7b:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
   1ef82:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
   1ef89:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1ef90:	48 89 c7             	mov    rdi,rax
   1ef93:	e8 56 fb ff ff       	call   1eaee <stbi__info_main(stbi__context*, int*, int*, int*)>
   1ef98:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1ef9c:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1efa5:	74 05                	je     1efac <stbi_info_from_memory+0x93>
   1efa7:	e8 34 55 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1efac:	c9                   	leave  
   1efad:	c3                   	ret    

000000000001efae <stbi_info_from_callbacks>:
   1efae:	55                   	push   rbp
   1efaf:	48 89 e5             	mov    rbp,rsp
   1efb2:	48 81 ec 10 01 00 00 	sub    rsp,0x110
   1efb9:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
   1efc0:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
   1efc7:	48 89 95 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rdx
   1efce:	48 89 8d 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rcx
   1efd5:	4c 89 85 f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],r8
   1efdc:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1efe5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1efe9:	31 c0                	xor    eax,eax
   1efeb:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
   1eff2:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   1eff9:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1f000:	48 89 ce             	mov    rsi,rcx
   1f003:	48 89 c7             	mov    rdi,rax
   1f006:	e8 f1 59 fe ff       	call   49fc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>
   1f00b:	48 8b 8d f8 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x108]
   1f012:	48 8b 95 00 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x100]
   1f019:	48 8b b5 08 ff ff ff 	mov    rsi,QWORD PTR [rbp-0xf8]
   1f020:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1f027:	48 89 c7             	mov    rdi,rax
   1f02a:	e8 bf fa ff ff       	call   1eaee <stbi__info_main(stbi__context*, int*, int*, int*)>
   1f02f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1f033:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1f03c:	74 05                	je     1f043 <stbi_info_from_callbacks+0x95>
   1f03e:	e8 9d 54 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1f043:	c9                   	leave  
   1f044:	c3                   	ret    

000000000001f045 <stbi_is_16_bit_from_memory>:
   1f045:	55                   	push   rbp
   1f046:	48 89 e5             	mov    rbp,rsp
   1f049:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
   1f050:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
   1f057:	89 b5 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],esi
   1f05d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1f066:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1f06a:	31 c0                	xor    eax,eax
   1f06c:	8b 95 14 ff ff ff    	mov    edx,DWORD PTR [rbp-0xec]
   1f072:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   1f079:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1f080:	48 89 ce             	mov    rsi,rcx
   1f083:	48 89 c7             	mov    rdi,rax
   1f086:	e8 f5 58 fe ff       	call   4980 <stbi__start_mem(stbi__context*, unsigned char const*, int)>
   1f08b:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1f092:	48 89 c7             	mov    rdi,rax
   1f095:	e8 f8 fb ff ff       	call   1ec92 <stbi__is_16_main(stbi__context*)>
   1f09a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1f09e:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1f0a7:	74 05                	je     1f0ae <stbi_is_16_bit_from_memory+0x69>
   1f0a9:	e8 32 54 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1f0ae:	c9                   	leave  
   1f0af:	c3                   	ret    

000000000001f0b0 <stbi_is_16_bit_from_callbacks>:
   1f0b0:	55                   	push   rbp
   1f0b1:	48 89 e5             	mov    rbp,rsp
   1f0b4:	48 81 ec f0 00 00 00 	sub    rsp,0xf0
   1f0bb:	48 89 bd 18 ff ff ff 	mov    QWORD PTR [rbp-0xe8],rdi
   1f0c2:	48 89 b5 10 ff ff ff 	mov    QWORD PTR [rbp-0xf0],rsi
   1f0c9:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1f0d2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1f0d6:	31 c0                	xor    eax,eax
   1f0d8:	48 8b 95 10 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf0]
   1f0df:	48 8b 8d 18 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe8]
   1f0e6:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1f0ed:	48 89 ce             	mov    rsi,rcx
   1f0f0:	48 89 c7             	mov    rdi,rax
   1f0f3:	e8 04 59 fe ff       	call   49fc <stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)>
   1f0f8:	48 8d 85 20 ff ff ff 	lea    rax,[rbp-0xe0]
   1f0ff:	48 89 c7             	mov    rdi,rax
   1f102:	e8 8b fb ff ff       	call   1ec92 <stbi__is_16_main(stbi__context*)>
   1f107:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   1f10b:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   1f114:	74 05                	je     1f11b <stbi_is_16_bit_from_callbacks+0x6b>
   1f116:	e8 c5 53 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1f11b:	c9                   	leave  
   1f11c:	c3                   	ret    

000000000001f11d <LDClearErrors()>:
   1f11d:	55                   	push   rbp
   1f11e:	48 89 e5             	mov    rbp,rsp
   1f121:	48 83 ec 10          	sub    rsp,0x10
   1f125:	e8 c6 50 fe ff       	call   41f0 <dlerror@plt>
   1f12a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1f12e:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1f133:	74 02                	je     1f137 <LDClearErrors()+0x1a>
   1f135:	eb ee                	jmp    1f125 <LDClearErrors()+0x8>
   1f137:	90                   	nop
   1f138:	c9                   	leave  
   1f139:	c3                   	ret    

000000000001f13a <LDLogCall(char const*, char const*, int)>:
   1f13a:	55                   	push   rbp
   1f13b:	48 89 e5             	mov    rbp,rsp
   1f13e:	48 83 ec 30          	sub    rsp,0x30
   1f142:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1f146:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1f14a:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
   1f14d:	c6 45 f7 01          	mov    BYTE PTR [rbp-0x9],0x1
   1f151:	e8 9a 50 fe ff       	call   41f0 <dlerror@plt>
   1f156:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   1f15a:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   1f15f:	0f 84 b9 00 00 00    	je     1f21e <LDLogCall(char const*, char const*, int)+0xe4>
   1f165:	48 8d 05 60 c1 01 00 	lea    rax,[rip+0x1c160]        # 3b2cc <NANO_SEC+0x4>
   1f16c:	48 89 c6             	mov    rsi,rax
   1f16f:	48 8d 05 ca b3 02 00 	lea    rax,[rip+0x2b3ca]        # 4a540 <std::cout@@GLIBCXX_3.4>
   1f176:	48 89 c7             	mov    rdi,rax
   1f179:	e8 82 52 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1f17e:	48 89 c2             	mov    rdx,rax
   1f181:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   1f185:	48 89 c6             	mov    rsi,rax
   1f188:	48 89 d7             	mov    rdi,rdx
   1f18b:	e8 70 52 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1f190:	48 89 c2             	mov    rdx,rax
   1f193:	48 8d 05 3b c1 01 00 	lea    rax,[rip+0x1c13b]        # 3b2d5 <NANO_SEC+0xd>
   1f19a:	48 89 c6             	mov    rsi,rax
   1f19d:	48 89 d7             	mov    rdi,rdx
   1f1a0:	e8 5b 52 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1f1a5:	48 89 c2             	mov    rdx,rax
   1f1a8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   1f1ab:	89 c6                	mov    esi,eax
   1f1ad:	48 89 d7             	mov    rdi,rdx
   1f1b0:	e8 9b 55 fe ff       	call   4750 <std::ostream::operator<<(int)@plt>
   1f1b5:	48 89 c2             	mov    rdx,rax
   1f1b8:	48 8d 05 1d c1 01 00 	lea    rax,[rip+0x1c11d]        # 3b2dc <NANO_SEC+0x14>
   1f1bf:	48 89 c6             	mov    rsi,rax
   1f1c2:	48 89 d7             	mov    rdi,rdx
   1f1c5:	e8 36 52 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1f1ca:	48 89 c2             	mov    rdx,rax
   1f1cd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   1f1d1:	48 89 c6             	mov    rsi,rax
   1f1d4:	48 89 d7             	mov    rdi,rdx
   1f1d7:	e8 24 52 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1f1dc:	48 89 c2             	mov    rdx,rax
   1f1df:	48 8d 05 f6 c0 01 00 	lea    rax,[rip+0x1c0f6]        # 3b2dc <NANO_SEC+0x14>
   1f1e6:	48 89 c6             	mov    rsi,rax
   1f1e9:	48 89 d7             	mov    rdi,rdx
   1f1ec:	e8 0f 52 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1f1f1:	48 89 c2             	mov    rdx,rax
   1f1f4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1f1f8:	48 89 c6             	mov    rsi,rax
   1f1fb:	48 89 d7             	mov    rdi,rdx
   1f1fe:	e8 fd 51 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1f203:	48 8b 15 b6 ad 02 00 	mov    rdx,QWORD PTR [rip+0x2adb6]        # 49fc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   1f20a:	48 89 d6             	mov    rsi,rdx
   1f20d:	48 89 c7             	mov    rdi,rax
   1f210:	e8 4b 52 fe ff       	call   4460 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   1f215:	c6 45 f7 00          	mov    BYTE PTR [rbp-0x9],0x0
   1f219:	e9 33 ff ff ff       	jmp    1f151 <LDLogCall(char const*, char const*, int)+0x17>
   1f21e:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
   1f222:	c9                   	leave  
   1f223:	c3                   	ret    

000000000001f224 <MemSet(void*, signed char, unsigned int)>:
   1f224:	55                   	push   rbp
   1f225:	48 89 e5             	mov    rbp,rsp
   1f228:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1f22c:	89 f0                	mov    eax,esi
   1f22e:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
   1f231:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
   1f234:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1f23b:	eb 14                	jmp    1f251 <MemSet(void*, signed char, unsigned int)+0x2d>
   1f23d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   1f240:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1f244:	48 01 c2             	add    rdx,rax
   1f247:	0f b6 45 e4          	movzx  eax,BYTE PTR [rbp-0x1c]
   1f24b:	88 02                	mov    BYTE PTR [rdx],al
   1f24d:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1f251:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1f254:	3b 45 e0             	cmp    eax,DWORD PTR [rbp-0x20]
   1f257:	72 e4                	jb     1f23d <MemSet(void*, signed char, unsigned int)+0x19>
   1f259:	90                   	nop
   1f25a:	90                   	nop
   1f25b:	5d                   	pop    rbp
   1f25c:	c3                   	ret    

000000000001f25d <MemCpy(void*, void*, unsigned int)>:
   1f25d:	55                   	push   rbp
   1f25e:	48 89 e5             	mov    rbp,rsp
   1f261:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1f265:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   1f269:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
   1f26c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1f273:	eb 1d                	jmp    1f292 <MemCpy(void*, void*, unsigned int)+0x35>
   1f275:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   1f278:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1f27c:	48 01 d0             	add    rax,rdx
   1f27f:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
   1f282:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   1f286:	48 01 ca             	add    rdx,rcx
   1f289:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   1f28c:	88 02                	mov    BYTE PTR [rdx],al
   1f28e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1f292:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   1f295:	3b 45 dc             	cmp    eax,DWORD PTR [rbp-0x24]
   1f298:	72 db                	jb     1f275 <MemCpy(void*, void*, unsigned int)+0x18>
   1f29a:	90                   	nop
   1f29b:	90                   	nop
   1f29c:	5d                   	pop    rbp
   1f29d:	c3                   	ret    

000000000001f29e <LoadRendererInterface(RendererInterface&, char const*)>:
   1f29e:	55                   	push   rbp
   1f29f:	48 89 e5             	mov    rbp,rsp
   1f2a2:	53                   	push   rbx
   1f2a3:	48 83 ec 48          	sub    rsp,0x48
   1f2a7:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   1f2ab:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   1f2af:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   1f2b8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   1f2bc:	31 c0                	xor    eax,eax
   1f2be:	48 8d 4d b0          	lea    rcx,[rbp-0x50]
   1f2c2:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   1f2c6:	ba 02 00 00 00       	mov    edx,0x2
   1f2cb:	48 89 ce             	mov    rsi,rcx
   1f2ce:	48 89 c7             	mov    rdi,rax
   1f2d1:	e8 5c 69 00 00       	call   25c32 <std::filesystem::__cxx11::path::path<char const*, std::filesystem::__cxx11::path>(char const* const&, std::filesystem::__cxx11::path::format)>
   1f2d6:	48 8b 5d b8          	mov    rbx,QWORD PTR [rbp-0x48]
   1f2da:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   1f2de:	48 89 c7             	mov    rdi,rax
   1f2e1:	e8 7a 50 fe ff       	call   4360 <std::filesystem::last_write_time(std::filesystem::__cxx11::path const&)@plt>
   1f2e6:	48 89 83 20 01 00 00 	mov    QWORD PTR [rbx+0x120],rax
   1f2ed:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   1f2f1:	48 89 c7             	mov    rdi,rax
   1f2f4:	e8 23 61 00 00       	call   2541c <std::filesystem::__cxx11::path::~path()>
   1f2f9:	48 8d 05 de bf 01 00 	lea    rax,[rip+0x1bfde]        # 3b2de <NANO_SEC+0x16>
   1f300:	48 89 c6             	mov    rsi,rax
   1f303:	48 8d 05 36 b2 02 00 	lea    rax,[rip+0x2b236]        # 4a540 <std::cout@@GLIBCXX_3.4>
   1f30a:	48 89 c7             	mov    rdi,rax
   1f30d:	e8 ee 50 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1f312:	48 89 c2             	mov    rdx,rax
   1f315:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1f319:	48 89 c6             	mov    rsi,rax
   1f31c:	48 89 d7             	mov    rdi,rdx
   1f31f:	e8 dc 50 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1f324:	48 8b 15 95 ac 02 00 	mov    rdx,QWORD PTR [rip+0x2ac95]        # 49fc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   1f32b:	48 89 d6             	mov    rsi,rdx
   1f32e:	48 89 c7             	mov    rdi,rax
   1f331:	e8 2a 51 fe ff       	call   4460 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   1f336:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   1f33a:	be 01 00 00 00       	mov    esi,0x1
   1f33f:	48 89 c7             	mov    rdi,rax
   1f342:	e8 29 53 fe ff       	call   4670 <dlopen@plt>
   1f347:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   1f34b:	48 89 02             	mov    QWORD PTR [rdx],rax
   1f34e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f352:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f355:	48 85 c0             	test   rax,rax
   1f358:	75 48                	jne    1f3a2 <LoadRendererInterface(RendererInterface&, char const*)+0x104>
   1f35a:	48 8d 05 87 bf 01 00 	lea    rax,[rip+0x1bf87]        # 3b2e8 <NANO_SEC+0x20>
   1f361:	48 89 c6             	mov    rsi,rax
   1f364:	48 8d 05 f5 b2 02 00 	lea    rax,[rip+0x2b2f5]        # 4a660 <std::cerr@@GLIBCXX_3.4>
   1f36b:	48 89 c7             	mov    rdi,rax
   1f36e:	e8 8d 50 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1f373:	48 89 c3             	mov    rbx,rax
   1f376:	e8 75 4e fe ff       	call   41f0 <dlerror@plt>
   1f37b:	48 89 c6             	mov    rsi,rax
   1f37e:	48 89 df             	mov    rdi,rbx
   1f381:	e8 7a 50 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1f386:	48 8b 15 33 ac 02 00 	mov    rdx,QWORD PTR [rip+0x2ac33]        # 49fc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   1f38d:	48 89 d6             	mov    rsi,rdx
   1f390:	48 89 c7             	mov    rdi,rax
   1f393:	e8 c8 50 fe ff       	call   4460 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   1f398:	bf 01 00 00 00       	mov    edi,0x1
   1f39d:	e8 9e 51 fe ff       	call   4540 <exit@plt>
   1f3a2:	48 8d 05 55 bf 01 00 	lea    rax,[rip+0x1bf55]        # 3b2fe <NANO_SEC+0x36>
   1f3a9:	48 89 c6             	mov    rsi,rax
   1f3ac:	48 8d 05 8d b1 02 00 	lea    rax,[rip+0x2b18d]        # 4a540 <std::cout@@GLIBCXX_3.4>
   1f3b3:	48 89 c7             	mov    rdi,rax
   1f3b6:	e8 45 50 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   1f3bb:	48 8b 15 fe ab 02 00 	mov    rdx,QWORD PTR [rip+0x2abfe]        # 49fc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   1f3c2:	48 89 d6             	mov    rsi,rdx
   1f3c5:	48 89 c7             	mov    rdi,rax
   1f3c8:	e8 93 50 fe ff       	call   4460 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   1f3cd:	e8 4b fd ff ff       	call   1f11d <LDClearErrors()>
   1f3d2:	e8 46 fd ff ff       	call   1f11d <LDClearErrors()>
   1f3d7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f3db:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f3de:	48 8d 15 29 bf 01 00 	lea    rdx,[rip+0x1bf29]        # 3b30e <NANO_SEC+0x46>
   1f3e5:	48 89 d6             	mov    rsi,rdx
   1f3e8:	48 89 c7             	mov    rdi,rax
   1f3eb:	e8 d0 53 fe ff       	call   47c0 <dlsym@plt>
   1f3f0:	48 89 c2             	mov    rdx,rax
   1f3f3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f3f7:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   1f3fb:	ba 81 00 00 00       	mov    edx,0x81
   1f400:	48 8d 05 19 bf 01 00 	lea    rax,[rip+0x1bf19]        # 3b320 <NANO_SEC+0x58>
   1f407:	48 89 c6             	mov    rsi,rax
   1f40a:	48 8d 05 2f bf 01 00 	lea    rax,[rip+0x1bf2f]        # 3b340 <NANO_SEC+0x78>
   1f411:	48 89 c7             	mov    rdi,rax
   1f414:	e8 21 fd ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f419:	83 f0 01             	xor    eax,0x1
   1f41c:	84 c0                	test   al,al
   1f41e:	74 02                	je     1f422 <LoadRendererInterface(RendererInterface&, char const*)+0x184>
   1f420:	0f 0b                	ud2    
   1f422:	e8 f6 fc ff ff       	call   1f11d <LDClearErrors()>
   1f427:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f42b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f42e:	48 8d 15 77 bf 01 00 	lea    rdx,[rip+0x1bf77]        # 3b3ac <NANO_SEC+0xe4>
   1f435:	48 89 d6             	mov    rsi,rdx
   1f438:	48 89 c7             	mov    rdi,rax
   1f43b:	e8 80 53 fe ff       	call   47c0 <dlsym@plt>
   1f440:	48 89 c2             	mov    rdx,rax
   1f443:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f447:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   1f44b:	ba 82 00 00 00       	mov    edx,0x82
   1f450:	48 8d 05 c9 be 01 00 	lea    rax,[rip+0x1bec9]        # 3b320 <NANO_SEC+0x58>
   1f457:	48 89 c6             	mov    rsi,rax
   1f45a:	48 8d 05 6f bf 01 00 	lea    rax,[rip+0x1bf6f]        # 3b3d0 <NANO_SEC+0x108>
   1f461:	48 89 c7             	mov    rdi,rax
   1f464:	e8 d1 fc ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f469:	83 f0 01             	xor    eax,0x1
   1f46c:	84 c0                	test   al,al
   1f46e:	74 02                	je     1f472 <LoadRendererInterface(RendererInterface&, char const*)+0x1d4>
   1f470:	0f 0b                	ud2    
   1f472:	e8 a6 fc ff ff       	call   1f11d <LDClearErrors()>
   1f477:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f47b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f47e:	48 8d 15 e1 bf 01 00 	lea    rdx,[rip+0x1bfe1]        # 3b466 <NANO_SEC+0x19e>
   1f485:	48 89 d6             	mov    rsi,rdx
   1f488:	48 89 c7             	mov    rdi,rax
   1f48b:	e8 30 53 fe ff       	call   47c0 <dlsym@plt>
   1f490:	48 89 c2             	mov    rdx,rax
   1f493:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f497:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   1f49b:	ba 83 00 00 00       	mov    edx,0x83
   1f4a0:	48 8d 05 79 be 01 00 	lea    rax,[rip+0x1be79]        # 3b320 <NANO_SEC+0x58>
   1f4a7:	48 89 c6             	mov    rsi,rax
   1f4aa:	48 8d 05 cf bf 01 00 	lea    rax,[rip+0x1bfcf]        # 3b480 <NANO_SEC+0x1b8>
   1f4b1:	48 89 c7             	mov    rdi,rax
   1f4b4:	e8 81 fc ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f4b9:	83 f0 01             	xor    eax,0x1
   1f4bc:	84 c0                	test   al,al
   1f4be:	74 02                	je     1f4c2 <LoadRendererInterface(RendererInterface&, char const*)+0x224>
   1f4c0:	0f 0b                	ud2    
   1f4c2:	e8 56 fc ff ff       	call   1f11d <LDClearErrors()>
   1f4c7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f4cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f4ce:	48 8d 15 23 c0 01 00 	lea    rdx,[rip+0x1c023]        # 3b4f8 <NANO_SEC+0x230>
   1f4d5:	48 89 d6             	mov    rsi,rdx
   1f4d8:	48 89 c7             	mov    rdi,rax
   1f4db:	e8 e0 52 fe ff       	call   47c0 <dlsym@plt>
   1f4e0:	48 89 c2             	mov    rdx,rax
   1f4e3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f4e7:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
   1f4eb:	ba 85 00 00 00       	mov    edx,0x85
   1f4f0:	48 8d 05 29 be 01 00 	lea    rax,[rip+0x1be29]        # 3b320 <NANO_SEC+0x58>
   1f4f7:	48 89 c6             	mov    rsi,rax
   1f4fa:	48 8d 05 0f c0 01 00 	lea    rax,[rip+0x1c00f]        # 3b510 <NANO_SEC+0x248>
   1f501:	48 89 c7             	mov    rdi,rax
   1f504:	e8 31 fc ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f509:	83 f0 01             	xor    eax,0x1
   1f50c:	84 c0                	test   al,al
   1f50e:	74 02                	je     1f512 <LoadRendererInterface(RendererInterface&, char const*)+0x274>
   1f510:	0f 0b                	ud2    
   1f512:	e8 06 fc ff ff       	call   1f11d <LDClearErrors()>
   1f517:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f51b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f51e:	48 8d 15 5d c0 01 00 	lea    rdx,[rip+0x1c05d]        # 3b582 <NANO_SEC+0x2ba>
   1f525:	48 89 d6             	mov    rsi,rdx
   1f528:	48 89 c7             	mov    rdi,rax
   1f52b:	e8 90 52 fe ff       	call   47c0 <dlsym@plt>
   1f530:	48 89 c2             	mov    rdx,rax
   1f533:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f537:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
   1f53b:	ba 86 00 00 00       	mov    edx,0x86
   1f540:	48 8d 05 d9 bd 01 00 	lea    rax,[rip+0x1bdd9]        # 3b320 <NANO_SEC+0x58>
   1f547:	48 89 c6             	mov    rsi,rax
   1f54a:	48 8d 05 47 c0 01 00 	lea    rax,[rip+0x1c047]        # 3b598 <NANO_SEC+0x2d0>
   1f551:	48 89 c7             	mov    rdi,rax
   1f554:	e8 e1 fb ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f559:	83 f0 01             	xor    eax,0x1
   1f55c:	84 c0                	test   al,al
   1f55e:	74 02                	je     1f562 <LoadRendererInterface(RendererInterface&, char const*)+0x2c4>
   1f560:	0f 0b                	ud2    
   1f562:	e8 b6 fb ff ff       	call   1f11d <LDClearErrors()>
   1f567:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f56b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f56e:	48 8d 15 8f c0 01 00 	lea    rdx,[rip+0x1c08f]        # 3b604 <NANO_SEC+0x33c>
   1f575:	48 89 d6             	mov    rsi,rdx
   1f578:	48 89 c7             	mov    rdi,rax
   1f57b:	e8 40 52 fe ff       	call   47c0 <dlsym@plt>
   1f580:	48 89 c2             	mov    rdx,rax
   1f583:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f587:	48 89 50 48          	mov    QWORD PTR [rax+0x48],rdx
   1f58b:	ba 87 00 00 00       	mov    edx,0x87
   1f590:	48 8d 05 89 bd 01 00 	lea    rax,[rip+0x1bd89]        # 3b320 <NANO_SEC+0x58>
   1f597:	48 89 c6             	mov    rsi,rax
   1f59a:	48 8d 05 6f c0 01 00 	lea    rax,[rip+0x1c06f]        # 3b610 <NANO_SEC+0x348>
   1f5a1:	48 89 c7             	mov    rdi,rax
   1f5a4:	e8 91 fb ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f5a9:	83 f0 01             	xor    eax,0x1
   1f5ac:	84 c0                	test   al,al
   1f5ae:	74 02                	je     1f5b2 <LoadRendererInterface(RendererInterface&, char const*)+0x314>
   1f5b0:	0f 0b                	ud2    
   1f5b2:	e8 66 fb ff ff       	call   1f11d <LDClearErrors()>
   1f5b7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f5bb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f5be:	48 8d 15 ab c0 01 00 	lea    rdx,[rip+0x1c0ab]        # 3b670 <NANO_SEC+0x3a8>
   1f5c5:	48 89 d6             	mov    rsi,rdx
   1f5c8:	48 89 c7             	mov    rdi,rax
   1f5cb:	e8 f0 51 fe ff       	call   47c0 <dlsym@plt>
   1f5d0:	48 89 c2             	mov    rdx,rax
   1f5d3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f5d7:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
   1f5db:	ba 88 00 00 00       	mov    edx,0x88
   1f5e0:	48 8d 05 39 bd 01 00 	lea    rax,[rip+0x1bd39]        # 3b320 <NANO_SEC+0x58>
   1f5e7:	48 89 c6             	mov    rsi,rax
   1f5ea:	48 8d 05 9f c0 01 00 	lea    rax,[rip+0x1c09f]        # 3b690 <NANO_SEC+0x3c8>
   1f5f1:	48 89 c7             	mov    rdi,rax
   1f5f4:	e8 41 fb ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f5f9:	83 f0 01             	xor    eax,0x1
   1f5fc:	84 c0                	test   al,al
   1f5fe:	74 02                	je     1f602 <LoadRendererInterface(RendererInterface&, char const*)+0x364>
   1f600:	0f 0b                	ud2    
   1f602:	e8 16 fb ff ff       	call   1f11d <LDClearErrors()>
   1f607:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f60b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f60e:	48 8d 15 02 c1 01 00 	lea    rdx,[rip+0x1c102]        # 3b717 <NANO_SEC+0x44f>
   1f615:	48 89 d6             	mov    rsi,rdx
   1f618:	48 89 c7             	mov    rdi,rax
   1f61b:	e8 a0 51 fe ff       	call   47c0 <dlsym@plt>
   1f620:	48 89 c2             	mov    rdx,rax
   1f623:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f627:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
   1f62b:	ba 89 00 00 00       	mov    edx,0x89
   1f630:	48 8d 05 e9 bc 01 00 	lea    rax,[rip+0x1bce9]        # 3b320 <NANO_SEC+0x58>
   1f637:	48 89 c6             	mov    rsi,rax
   1f63a:	48 8d 05 ef c0 01 00 	lea    rax,[rip+0x1c0ef]        # 3b730 <NANO_SEC+0x468>
   1f641:	48 89 c7             	mov    rdi,rax
   1f644:	e8 f1 fa ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f649:	83 f0 01             	xor    eax,0x1
   1f64c:	84 c0                	test   al,al
   1f64e:	74 02                	je     1f652 <LoadRendererInterface(RendererInterface&, char const*)+0x3b4>
   1f650:	0f 0b                	ud2    
   1f652:	e8 c6 fa ff ff       	call   1f11d <LDClearErrors()>
   1f657:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f65b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f65e:	48 8d 15 52 c1 01 00 	lea    rdx,[rip+0x1c152]        # 3b7b7 <NANO_SEC+0x4ef>
   1f665:	48 89 d6             	mov    rsi,rdx
   1f668:	48 89 c7             	mov    rdi,rax
   1f66b:	e8 50 51 fe ff       	call   47c0 <dlsym@plt>
   1f670:	48 89 c2             	mov    rdx,rax
   1f673:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f677:	48 89 50 40          	mov    QWORD PTR [rax+0x40],rdx
   1f67b:	ba 8a 00 00 00       	mov    edx,0x8a
   1f680:	48 8d 05 99 bc 01 00 	lea    rax,[rip+0x1bc99]        # 3b320 <NANO_SEC+0x58>
   1f687:	48 89 c6             	mov    rsi,rax
   1f68a:	48 8d 05 3f c1 01 00 	lea    rax,[rip+0x1c13f]        # 3b7d0 <NANO_SEC+0x508>
   1f691:	48 89 c7             	mov    rdi,rax
   1f694:	e8 a1 fa ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f699:	83 f0 01             	xor    eax,0x1
   1f69c:	84 c0                	test   al,al
   1f69e:	74 02                	je     1f6a2 <LoadRendererInterface(RendererInterface&, char const*)+0x404>
   1f6a0:	0f 0b                	ud2    
   1f6a2:	e8 76 fa ff ff       	call   1f11d <LDClearErrors()>
   1f6a7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f6ab:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f6ae:	48 8d 15 a2 c1 01 00 	lea    rdx,[rip+0x1c1a2]        # 3b857 <NANO_SEC+0x58f>
   1f6b5:	48 89 d6             	mov    rsi,rdx
   1f6b8:	48 89 c7             	mov    rdi,rax
   1f6bb:	e8 00 51 fe ff       	call   47c0 <dlsym@plt>
   1f6c0:	48 89 c2             	mov    rdx,rax
   1f6c3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f6c7:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
   1f6cb:	ba 8b 00 00 00       	mov    edx,0x8b
   1f6d0:	48 8d 05 49 bc 01 00 	lea    rax,[rip+0x1bc49]        # 3b320 <NANO_SEC+0x58>
   1f6d7:	48 89 c6             	mov    rsi,rax
   1f6da:	48 8d 05 87 c1 01 00 	lea    rax,[rip+0x1c187]        # 3b868 <NANO_SEC+0x5a0>
   1f6e1:	48 89 c7             	mov    rdi,rax
   1f6e4:	e8 51 fa ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f6e9:	83 f0 01             	xor    eax,0x1
   1f6ec:	84 c0                	test   al,al
   1f6ee:	74 02                	je     1f6f2 <LoadRendererInterface(RendererInterface&, char const*)+0x454>
   1f6f0:	0f 0b                	ud2    
   1f6f2:	e8 26 fa ff ff       	call   1f11d <LDClearErrors()>
   1f6f7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f6fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f6fe:	48 8d 15 c0 c1 01 00 	lea    rdx,[rip+0x1c1c0]        # 3b8c5 <NANO_SEC+0x5fd>
   1f705:	48 89 d6             	mov    rsi,rdx
   1f708:	48 89 c7             	mov    rdi,rax
   1f70b:	e8 b0 50 fe ff       	call   47c0 <dlsym@plt>
   1f710:	48 89 c2             	mov    rdx,rax
   1f713:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f717:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
   1f71b:	ba 8c 00 00 00       	mov    edx,0x8c
   1f720:	48 8d 05 f9 bb 01 00 	lea    rax,[rip+0x1bbf9]        # 3b320 <NANO_SEC+0x58>
   1f727:	48 89 c6             	mov    rsi,rax
   1f72a:	48 8d 05 a7 c1 01 00 	lea    rax,[rip+0x1c1a7]        # 3b8d8 <NANO_SEC+0x610>
   1f731:	48 89 c7             	mov    rdi,rax
   1f734:	e8 01 fa ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f739:	83 f0 01             	xor    eax,0x1
   1f73c:	84 c0                	test   al,al
   1f73e:	74 02                	je     1f742 <LoadRendererInterface(RendererInterface&, char const*)+0x4a4>
   1f740:	0f 0b                	ud2    
   1f742:	e8 d6 f9 ff ff       	call   1f11d <LDClearErrors()>
   1f747:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f74b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f74e:	48 8d 15 e6 c1 01 00 	lea    rdx,[rip+0x1c1e6]        # 3b93b <NANO_SEC+0x673>
   1f755:	48 89 d6             	mov    rsi,rdx
   1f758:	48 89 c7             	mov    rdi,rax
   1f75b:	e8 60 50 fe ff       	call   47c0 <dlsym@plt>
   1f760:	48 89 c2             	mov    rdx,rax
   1f763:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f767:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
   1f76b:	ba 8d 00 00 00       	mov    edx,0x8d
   1f770:	48 8d 05 a9 bb 01 00 	lea    rax,[rip+0x1bba9]        # 3b320 <NANO_SEC+0x58>
   1f777:	48 89 c6             	mov    rsi,rax
   1f77a:	48 8d 05 c7 c1 01 00 	lea    rax,[rip+0x1c1c7]        # 3b948 <NANO_SEC+0x680>
   1f781:	48 89 c7             	mov    rdi,rax
   1f784:	e8 b1 f9 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f789:	83 f0 01             	xor    eax,0x1
   1f78c:	84 c0                	test   al,al
   1f78e:	74 02                	je     1f792 <LoadRendererInterface(RendererInterface&, char const*)+0x4f4>
   1f790:	0f 0b                	ud2    
   1f792:	e8 86 f9 ff ff       	call   1f11d <LDClearErrors()>
   1f797:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f79b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f79e:	48 8d 15 06 c2 01 00 	lea    rdx,[rip+0x1c206]        # 3b9ab <NANO_SEC+0x6e3>
   1f7a5:	48 89 d6             	mov    rsi,rdx
   1f7a8:	48 89 c7             	mov    rdi,rax
   1f7ab:	e8 10 50 fe ff       	call   47c0 <dlsym@plt>
   1f7b0:	48 89 c2             	mov    rdx,rax
   1f7b3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f7b7:	48 89 50 68          	mov    QWORD PTR [rax+0x68],rdx
   1f7bb:	ba 8e 00 00 00       	mov    edx,0x8e
   1f7c0:	48 8d 05 59 bb 01 00 	lea    rax,[rip+0x1bb59]        # 3b320 <NANO_SEC+0x58>
   1f7c7:	48 89 c6             	mov    rsi,rax
   1f7ca:	48 8d 05 ef c1 01 00 	lea    rax,[rip+0x1c1ef]        # 3b9c0 <NANO_SEC+0x6f8>
   1f7d1:	48 89 c7             	mov    rdi,rax
   1f7d4:	e8 61 f9 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f7d9:	83 f0 01             	xor    eax,0x1
   1f7dc:	84 c0                	test   al,al
   1f7de:	74 02                	je     1f7e2 <LoadRendererInterface(RendererInterface&, char const*)+0x544>
   1f7e0:	0f 0b                	ud2    
   1f7e2:	e8 36 f9 ff ff       	call   1f11d <LDClearErrors()>
   1f7e7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f7eb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f7ee:	48 8d 15 31 c2 01 00 	lea    rdx,[rip+0x1c231]        # 3ba26 <NANO_SEC+0x75e>
   1f7f5:	48 89 d6             	mov    rsi,rdx
   1f7f8:	48 89 c7             	mov    rdi,rax
   1f7fb:	e8 c0 4f fe ff       	call   47c0 <dlsym@plt>
   1f800:	48 89 c2             	mov    rdx,rax
   1f803:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f807:	48 89 50 70          	mov    QWORD PTR [rax+0x70],rdx
   1f80b:	ba 8f 00 00 00       	mov    edx,0x8f
   1f810:	48 8d 05 09 bb 01 00 	lea    rax,[rip+0x1bb09]        # 3b320 <NANO_SEC+0x58>
   1f817:	48 89 c6             	mov    rsi,rax
   1f81a:	48 8d 05 1f c2 01 00 	lea    rax,[rip+0x1c21f]        # 3ba40 <NANO_SEC+0x778>
   1f821:	48 89 c7             	mov    rdi,rax
   1f824:	e8 11 f9 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f829:	83 f0 01             	xor    eax,0x1
   1f82c:	84 c0                	test   al,al
   1f82e:	74 02                	je     1f832 <LoadRendererInterface(RendererInterface&, char const*)+0x594>
   1f830:	0f 0b                	ud2    
   1f832:	e8 e6 f8 ff ff       	call   1f11d <LDClearErrors()>
   1f837:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f83b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f83e:	48 8d 15 76 c2 01 00 	lea    rdx,[rip+0x1c276]        # 3babb <NANO_SEC+0x7f3>
   1f845:	48 89 d6             	mov    rsi,rdx
   1f848:	48 89 c7             	mov    rdi,rax
   1f84b:	e8 70 4f fe ff       	call   47c0 <dlsym@plt>
   1f850:	48 89 c2             	mov    rdx,rax
   1f853:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f857:	48 89 50 78          	mov    QWORD PTR [rax+0x78],rdx
   1f85b:	ba 90 00 00 00       	mov    edx,0x90
   1f860:	48 8d 05 b9 ba 01 00 	lea    rax,[rip+0x1bab9]        # 3b320 <NANO_SEC+0x58>
   1f867:	48 89 c6             	mov    rsi,rax
   1f86a:	48 8d 05 5f c2 01 00 	lea    rax,[rip+0x1c25f]        # 3bad0 <NANO_SEC+0x808>
   1f871:	48 89 c7             	mov    rdi,rax
   1f874:	e8 c1 f8 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f879:	83 f0 01             	xor    eax,0x1
   1f87c:	84 c0                	test   al,al
   1f87e:	74 02                	je     1f882 <LoadRendererInterface(RendererInterface&, char const*)+0x5e4>
   1f880:	0f 0b                	ud2    
   1f882:	e8 96 f8 ff ff       	call   1f11d <LDClearErrors()>
   1f887:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f88b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f88e:	48 8d 15 b0 c2 01 00 	lea    rdx,[rip+0x1c2b0]        # 3bb45 <NANO_SEC+0x87d>
   1f895:	48 89 d6             	mov    rsi,rdx
   1f898:	48 89 c7             	mov    rdi,rax
   1f89b:	e8 20 4f fe ff       	call   47c0 <dlsym@plt>
   1f8a0:	48 89 c2             	mov    rdx,rax
   1f8a3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f8a7:	48 89 90 80 00 00 00 	mov    QWORD PTR [rax+0x80],rdx
   1f8ae:	ba 91 00 00 00       	mov    edx,0x91
   1f8b3:	48 8d 05 66 ba 01 00 	lea    rax,[rip+0x1ba66]        # 3b320 <NANO_SEC+0x58>
   1f8ba:	48 89 c6             	mov    rsi,rax
   1f8bd:	48 8d 05 94 c2 01 00 	lea    rax,[rip+0x1c294]        # 3bb58 <NANO_SEC+0x890>
   1f8c4:	48 89 c7             	mov    rdi,rax
   1f8c7:	e8 6e f8 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f8cc:	83 f0 01             	xor    eax,0x1
   1f8cf:	84 c0                	test   al,al
   1f8d1:	74 02                	je     1f8d5 <LoadRendererInterface(RendererInterface&, char const*)+0x637>
   1f8d3:	0f 0b                	ud2    
   1f8d5:	e8 43 f8 ff ff       	call   1f11d <LDClearErrors()>
   1f8da:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f8de:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f8e1:	48 8d 15 df c2 01 00 	lea    rdx,[rip+0x1c2df]        # 3bbc7 <NANO_SEC+0x8ff>
   1f8e8:	48 89 d6             	mov    rsi,rdx
   1f8eb:	48 89 c7             	mov    rdi,rax
   1f8ee:	e8 cd 4e fe ff       	call   47c0 <dlsym@plt>
   1f8f3:	48 89 c2             	mov    rdx,rax
   1f8f6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f8fa:	48 89 90 88 00 00 00 	mov    QWORD PTR [rax+0x88],rdx
   1f901:	ba 92 00 00 00       	mov    edx,0x92
   1f906:	48 8d 05 13 ba 01 00 	lea    rax,[rip+0x1ba13]        # 3b320 <NANO_SEC+0x58>
   1f90d:	48 89 c6             	mov    rsi,rax
   1f910:	48 8d 05 c1 c2 01 00 	lea    rax,[rip+0x1c2c1]        # 3bbd8 <NANO_SEC+0x910>
   1f917:	48 89 c7             	mov    rdi,rax
   1f91a:	e8 1b f8 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f91f:	83 f0 01             	xor    eax,0x1
   1f922:	84 c0                	test   al,al
   1f924:	74 02                	je     1f928 <LoadRendererInterface(RendererInterface&, char const*)+0x68a>
   1f926:	0f 0b                	ud2    
   1f928:	e8 f0 f7 ff ff       	call   1f11d <LDClearErrors()>
   1f92d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f931:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f934:	48 8d 15 06 c3 01 00 	lea    rdx,[rip+0x1c306]        # 3bc41 <NANO_SEC+0x979>
   1f93b:	48 89 d6             	mov    rsi,rdx
   1f93e:	48 89 c7             	mov    rdi,rax
   1f941:	e8 7a 4e fe ff       	call   47c0 <dlsym@plt>
   1f946:	48 89 c2             	mov    rdx,rax
   1f949:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f94d:	48 89 90 90 00 00 00 	mov    QWORD PTR [rax+0x90],rdx
   1f954:	ba 93 00 00 00       	mov    edx,0x93
   1f959:	48 8d 05 c0 b9 01 00 	lea    rax,[rip+0x1b9c0]        # 3b320 <NANO_SEC+0x58>
   1f960:	48 89 c6             	mov    rsi,rax
   1f963:	48 8d 05 ee c2 01 00 	lea    rax,[rip+0x1c2ee]        # 3bc58 <NANO_SEC+0x990>
   1f96a:	48 89 c7             	mov    rdi,rax
   1f96d:	e8 c8 f7 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f972:	83 f0 01             	xor    eax,0x1
   1f975:	84 c0                	test   al,al
   1f977:	74 02                	je     1f97b <LoadRendererInterface(RendererInterface&, char const*)+0x6dd>
   1f979:	0f 0b                	ud2    
   1f97b:	e8 9d f7 ff ff       	call   1f11d <LDClearErrors()>
   1f980:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f984:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f987:	48 8d 15 36 c3 01 00 	lea    rdx,[rip+0x1c336]        # 3bcc4 <NANO_SEC+0x9fc>
   1f98e:	48 89 d6             	mov    rsi,rdx
   1f991:	48 89 c7             	mov    rdi,rax
   1f994:	e8 27 4e fe ff       	call   47c0 <dlsym@plt>
   1f999:	48 89 c2             	mov    rdx,rax
   1f99c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f9a0:	48 89 90 98 00 00 00 	mov    QWORD PTR [rax+0x98],rdx
   1f9a7:	ba 94 00 00 00       	mov    edx,0x94
   1f9ac:	48 8d 05 6d b9 01 00 	lea    rax,[rip+0x1b96d]        # 3b320 <NANO_SEC+0x58>
   1f9b3:	48 89 c6             	mov    rsi,rax
   1f9b6:	48 8d 05 1b c3 01 00 	lea    rax,[rip+0x1c31b]        # 3bcd8 <NANO_SEC+0xa10>
   1f9bd:	48 89 c7             	mov    rdi,rax
   1f9c0:	e8 75 f7 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1f9c5:	83 f0 01             	xor    eax,0x1
   1f9c8:	84 c0                	test   al,al
   1f9ca:	74 02                	je     1f9ce <LoadRendererInterface(RendererInterface&, char const*)+0x730>
   1f9cc:	0f 0b                	ud2    
   1f9ce:	e8 4a f7 ff ff       	call   1f11d <LDClearErrors()>
   1f9d3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f9d7:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1f9da:	48 8d 15 6f c3 01 00 	lea    rdx,[rip+0x1c36f]        # 3bd50 <NANO_SEC+0xa88>
   1f9e1:	48 89 d6             	mov    rsi,rdx
   1f9e4:	48 89 c7             	mov    rdi,rax
   1f9e7:	e8 d4 4d fe ff       	call   47c0 <dlsym@plt>
   1f9ec:	48 89 c2             	mov    rdx,rax
   1f9ef:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1f9f3:	48 89 90 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],rdx
   1f9fa:	ba 95 00 00 00       	mov    edx,0x95
   1f9ff:	48 8d 05 1a b9 01 00 	lea    rax,[rip+0x1b91a]        # 3b320 <NANO_SEC+0x58>
   1fa06:	48 89 c6             	mov    rsi,rax
   1fa09:	48 8d 05 50 c3 01 00 	lea    rax,[rip+0x1c350]        # 3bd60 <NANO_SEC+0xa98>
   1fa10:	48 89 c7             	mov    rdi,rax
   1fa13:	e8 22 f7 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fa18:	83 f0 01             	xor    eax,0x1
   1fa1b:	84 c0                	test   al,al
   1fa1d:	74 02                	je     1fa21 <LoadRendererInterface(RendererInterface&, char const*)+0x783>
   1fa1f:	0f 0b                	ud2    
   1fa21:	e8 f7 f6 ff ff       	call   1f11d <LDClearErrors()>
   1fa26:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fa2a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fa2d:	48 8d 15 8f c3 01 00 	lea    rdx,[rip+0x1c38f]        # 3bdc3 <NANO_SEC+0xafb>
   1fa34:	48 89 d6             	mov    rsi,rdx
   1fa37:	48 89 c7             	mov    rdi,rax
   1fa3a:	e8 81 4d fe ff       	call   47c0 <dlsym@plt>
   1fa3f:	48 89 c2             	mov    rdx,rax
   1fa42:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fa46:	48 89 90 a8 00 00 00 	mov    QWORD PTR [rax+0xa8],rdx
   1fa4d:	ba 96 00 00 00       	mov    edx,0x96
   1fa52:	48 8d 05 c7 b8 01 00 	lea    rax,[rip+0x1b8c7]        # 3b320 <NANO_SEC+0x58>
   1fa59:	48 89 c6             	mov    rsi,rax
   1fa5c:	48 8d 05 6d c3 01 00 	lea    rax,[rip+0x1c36d]        # 3bdd0 <NANO_SEC+0xb08>
   1fa63:	48 89 c7             	mov    rdi,rax
   1fa66:	e8 cf f6 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fa6b:	83 f0 01             	xor    eax,0x1
   1fa6e:	84 c0                	test   al,al
   1fa70:	74 02                	je     1fa74 <LoadRendererInterface(RendererInterface&, char const*)+0x7d6>
   1fa72:	0f 0b                	ud2    
   1fa74:	e8 a4 f6 ff ff       	call   1f11d <LDClearErrors()>
   1fa79:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fa7d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fa80:	48 8d 15 a9 c3 01 00 	lea    rdx,[rip+0x1c3a9]        # 3be30 <NANO_SEC+0xb68>
   1fa87:	48 89 d6             	mov    rsi,rdx
   1fa8a:	48 89 c7             	mov    rdi,rax
   1fa8d:	e8 2e 4d fe ff       	call   47c0 <dlsym@plt>
   1fa92:	48 89 c2             	mov    rdx,rax
   1fa95:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fa99:	48 89 90 b0 00 00 00 	mov    QWORD PTR [rax+0xb0],rdx
   1faa0:	ba 97 00 00 00       	mov    edx,0x97
   1faa5:	48 8d 05 74 b8 01 00 	lea    rax,[rip+0x1b874]        # 3b320 <NANO_SEC+0x58>
   1faac:	48 89 c6             	mov    rsi,rax
   1faaf:	48 8d 05 8a c3 01 00 	lea    rax,[rip+0x1c38a]        # 3be40 <NANO_SEC+0xb78>
   1fab6:	48 89 c7             	mov    rdi,rax
   1fab9:	e8 7c f6 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fabe:	83 f0 01             	xor    eax,0x1
   1fac1:	84 c0                	test   al,al
   1fac3:	74 02                	je     1fac7 <LoadRendererInterface(RendererInterface&, char const*)+0x829>
   1fac5:	0f 0b                	ud2    
   1fac7:	e8 51 f6 ff ff       	call   1f11d <LDClearErrors()>
   1facc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fad0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fad3:	48 8d 15 cc c3 01 00 	lea    rdx,[rip+0x1c3cc]        # 3bea6 <NANO_SEC+0xbde>
   1fada:	48 89 d6             	mov    rsi,rdx
   1fadd:	48 89 c7             	mov    rdi,rax
   1fae0:	e8 db 4c fe ff       	call   47c0 <dlsym@plt>
   1fae5:	48 89 c2             	mov    rdx,rax
   1fae8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1faec:	48 89 90 b8 00 00 00 	mov    QWORD PTR [rax+0xb8],rdx
   1faf3:	ba 98 00 00 00       	mov    edx,0x98
   1faf8:	48 8d 05 21 b8 01 00 	lea    rax,[rip+0x1b821]        # 3b320 <NANO_SEC+0x58>
   1faff:	48 89 c6             	mov    rsi,rax
   1fb02:	48 8d 05 af c3 01 00 	lea    rax,[rip+0x1c3af]        # 3beb8 <NANO_SEC+0xbf0>
   1fb09:	48 89 c7             	mov    rdi,rax
   1fb0c:	e8 29 f6 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fb11:	83 f0 01             	xor    eax,0x1
   1fb14:	84 c0                	test   al,al
   1fb16:	74 02                	je     1fb1a <LoadRendererInterface(RendererInterface&, char const*)+0x87c>
   1fb18:	0f 0b                	ud2    
   1fb1a:	e8 fe f5 ff ff       	call   1f11d <LDClearErrors()>
   1fb1f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fb23:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fb26:	48 8d 15 ee c3 01 00 	lea    rdx,[rip+0x1c3ee]        # 3bf1b <NANO_SEC+0xc53>
   1fb2d:	48 89 d6             	mov    rsi,rdx
   1fb30:	48 89 c7             	mov    rdi,rax
   1fb33:	e8 88 4c fe ff       	call   47c0 <dlsym@plt>
   1fb38:	48 89 c2             	mov    rdx,rax
   1fb3b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fb3f:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
   1fb46:	ba 99 00 00 00       	mov    edx,0x99
   1fb4b:	48 8d 05 ce b7 01 00 	lea    rax,[rip+0x1b7ce]        # 3b320 <NANO_SEC+0x58>
   1fb52:	48 89 c6             	mov    rsi,rax
   1fb55:	48 8d 05 cc c3 01 00 	lea    rax,[rip+0x1c3cc]        # 3bf28 <NANO_SEC+0xc60>
   1fb5c:	48 89 c7             	mov    rdi,rax
   1fb5f:	e8 d6 f5 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fb64:	83 f0 01             	xor    eax,0x1
   1fb67:	84 c0                	test   al,al
   1fb69:	74 02                	je     1fb6d <LoadRendererInterface(RendererInterface&, char const*)+0x8cf>
   1fb6b:	0f 0b                	ud2    
   1fb6d:	e8 ab f5 ff ff       	call   1f11d <LDClearErrors()>
   1fb72:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fb76:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fb79:	48 8d 15 08 c4 01 00 	lea    rdx,[rip+0x1c408]        # 3bf88 <NANO_SEC+0xcc0>
   1fb80:	48 89 d6             	mov    rsi,rdx
   1fb83:	48 89 c7             	mov    rdi,rax
   1fb86:	e8 35 4c fe ff       	call   47c0 <dlsym@plt>
   1fb8b:	48 89 c2             	mov    rdx,rax
   1fb8e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fb92:	48 89 90 c8 00 00 00 	mov    QWORD PTR [rax+0xc8],rdx
   1fb99:	ba 9a 00 00 00       	mov    edx,0x9a
   1fb9e:	48 8d 05 7b b7 01 00 	lea    rax,[rip+0x1b77b]        # 3b320 <NANO_SEC+0x58>
   1fba5:	48 89 c6             	mov    rsi,rax
   1fba8:	48 8d 05 e9 c3 01 00 	lea    rax,[rip+0x1c3e9]        # 3bf98 <NANO_SEC+0xcd0>
   1fbaf:	48 89 c7             	mov    rdi,rax
   1fbb2:	e8 83 f5 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fbb7:	83 f0 01             	xor    eax,0x1
   1fbba:	84 c0                	test   al,al
   1fbbc:	74 02                	je     1fbc0 <LoadRendererInterface(RendererInterface&, char const*)+0x922>
   1fbbe:	0f 0b                	ud2    
   1fbc0:	e8 58 f5 ff ff       	call   1f11d <LDClearErrors()>
   1fbc5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fbc9:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fbcc:	48 8d 15 25 c4 01 00 	lea    rdx,[rip+0x1c425]        # 3bff8 <NANO_SEC+0xd30>
   1fbd3:	48 89 d6             	mov    rsi,rdx
   1fbd6:	48 89 c7             	mov    rdi,rax
   1fbd9:	e8 e2 4b fe ff       	call   47c0 <dlsym@plt>
   1fbde:	48 89 c2             	mov    rdx,rax
   1fbe1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fbe5:	48 89 90 d0 00 00 00 	mov    QWORD PTR [rax+0xd0],rdx
   1fbec:	ba 9b 00 00 00       	mov    edx,0x9b
   1fbf1:	48 8d 05 28 b7 01 00 	lea    rax,[rip+0x1b728]        # 3b320 <NANO_SEC+0x58>
   1fbf8:	48 89 c6             	mov    rsi,rax
   1fbfb:	48 8d 05 06 c4 01 00 	lea    rax,[rip+0x1c406]        # 3c008 <NANO_SEC+0xd40>
   1fc02:	48 89 c7             	mov    rdi,rax
   1fc05:	e8 30 f5 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fc0a:	83 f0 01             	xor    eax,0x1
   1fc0d:	84 c0                	test   al,al
   1fc0f:	74 02                	je     1fc13 <LoadRendererInterface(RendererInterface&, char const*)+0x975>
   1fc11:	0f 0b                	ud2    
   1fc13:	e8 05 f5 ff ff       	call   1f11d <LDClearErrors()>
   1fc18:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fc1c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fc1f:	48 8d 15 4b c4 01 00 	lea    rdx,[rip+0x1c44b]        # 3c071 <NANO_SEC+0xda9>
   1fc26:	48 89 d6             	mov    rsi,rdx
   1fc29:	48 89 c7             	mov    rdi,rax
   1fc2c:	e8 8f 4b fe ff       	call   47c0 <dlsym@plt>
   1fc31:	48 89 c2             	mov    rdx,rax
   1fc34:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fc38:	48 89 90 d8 00 00 00 	mov    QWORD PTR [rax+0xd8],rdx
   1fc3f:	ba 9c 00 00 00       	mov    edx,0x9c
   1fc44:	48 8d 05 d5 b6 01 00 	lea    rax,[rip+0x1b6d5]        # 3b320 <NANO_SEC+0x58>
   1fc4b:	48 89 c6             	mov    rsi,rax
   1fc4e:	48 8d 05 2b c4 01 00 	lea    rax,[rip+0x1c42b]        # 3c080 <NANO_SEC+0xdb8>
   1fc55:	48 89 c7             	mov    rdi,rax
   1fc58:	e8 dd f4 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fc5d:	83 f0 01             	xor    eax,0x1
   1fc60:	84 c0                	test   al,al
   1fc62:	74 02                	je     1fc66 <LoadRendererInterface(RendererInterface&, char const*)+0x9c8>
   1fc64:	0f 0b                	ud2    
   1fc66:	e8 b2 f4 ff ff       	call   1f11d <LDClearErrors()>
   1fc6b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fc6f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fc72:	48 8d 15 f8 c3 01 00 	lea    rdx,[rip+0x1c3f8]        # 3c071 <NANO_SEC+0xda9>
   1fc79:	48 89 d6             	mov    rsi,rdx
   1fc7c:	48 89 c7             	mov    rdi,rax
   1fc7f:	e8 3c 4b fe ff       	call   47c0 <dlsym@plt>
   1fc84:	48 89 c2             	mov    rdx,rax
   1fc87:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fc8b:	48 89 90 d8 00 00 00 	mov    QWORD PTR [rax+0xd8],rdx
   1fc92:	ba 9d 00 00 00       	mov    edx,0x9d
   1fc97:	48 8d 05 82 b6 01 00 	lea    rax,[rip+0x1b682]        # 3b320 <NANO_SEC+0x58>
   1fc9e:	48 89 c6             	mov    rsi,rax
   1fca1:	48 8d 05 d8 c3 01 00 	lea    rax,[rip+0x1c3d8]        # 3c080 <NANO_SEC+0xdb8>
   1fca8:	48 89 c7             	mov    rdi,rax
   1fcab:	e8 8a f4 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fcb0:	83 f0 01             	xor    eax,0x1
   1fcb3:	84 c0                	test   al,al
   1fcb5:	74 02                	je     1fcb9 <LoadRendererInterface(RendererInterface&, char const*)+0xa1b>
   1fcb7:	0f 0b                	ud2    
   1fcb9:	e8 5f f4 ff ff       	call   1f11d <LDClearErrors()>
   1fcbe:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fcc2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fcc5:	48 8d 15 1a c4 01 00 	lea    rdx,[rip+0x1c41a]        # 3c0e6 <NANO_SEC+0xe1e>
   1fccc:	48 89 d6             	mov    rsi,rdx
   1fccf:	48 89 c7             	mov    rdi,rax
   1fcd2:	e8 e9 4a fe ff       	call   47c0 <dlsym@plt>
   1fcd7:	48 89 c2             	mov    rdx,rax
   1fcda:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fcde:	48 89 90 e0 00 00 00 	mov    QWORD PTR [rax+0xe0],rdx
   1fce5:	ba 9e 00 00 00       	mov    edx,0x9e
   1fcea:	48 8d 05 2f b6 01 00 	lea    rax,[rip+0x1b62f]        # 3b320 <NANO_SEC+0x58>
   1fcf1:	48 89 c6             	mov    rsi,rax
   1fcf4:	48 8d 05 05 c4 01 00 	lea    rax,[rip+0x1c405]        # 3c100 <NANO_SEC+0xe38>
   1fcfb:	48 89 c7             	mov    rdi,rax
   1fcfe:	e8 37 f4 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fd03:	83 f0 01             	xor    eax,0x1
   1fd06:	84 c0                	test   al,al
   1fd08:	74 02                	je     1fd0c <LoadRendererInterface(RendererInterface&, char const*)+0xa6e>
   1fd0a:	0f 0b                	ud2    
   1fd0c:	e8 0c f4 ff ff       	call   1f11d <LDClearErrors()>
   1fd11:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fd15:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fd18:	48 8d 15 59 c4 01 00 	lea    rdx,[rip+0x1c459]        # 3c178 <NANO_SEC+0xeb0>
   1fd1f:	48 89 d6             	mov    rsi,rdx
   1fd22:	48 89 c7             	mov    rdi,rax
   1fd25:	e8 96 4a fe ff       	call   47c0 <dlsym@plt>
   1fd2a:	48 89 c2             	mov    rdx,rax
   1fd2d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fd31:	48 89 90 e8 00 00 00 	mov    QWORD PTR [rax+0xe8],rdx
   1fd38:	ba 9f 00 00 00       	mov    edx,0x9f
   1fd3d:	48 8d 05 dc b5 01 00 	lea    rax,[rip+0x1b5dc]        # 3b320 <NANO_SEC+0x58>
   1fd44:	48 89 c6             	mov    rsi,rax
   1fd47:	48 8d 05 42 c4 01 00 	lea    rax,[rip+0x1c442]        # 3c190 <NANO_SEC+0xec8>
   1fd4e:	48 89 c7             	mov    rdi,rax
   1fd51:	e8 e4 f3 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fd56:	83 f0 01             	xor    eax,0x1
   1fd59:	84 c0                	test   al,al
   1fd5b:	74 02                	je     1fd5f <LoadRendererInterface(RendererInterface&, char const*)+0xac1>
   1fd5d:	0f 0b                	ud2    
   1fd5f:	e8 b9 f3 ff ff       	call   1f11d <LDClearErrors()>
   1fd64:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fd68:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fd6b:	48 8d 15 99 c4 01 00 	lea    rdx,[rip+0x1c499]        # 3c20b <NANO_SEC+0xf43>
   1fd72:	48 89 d6             	mov    rsi,rdx
   1fd75:	48 89 c7             	mov    rdi,rax
   1fd78:	e8 43 4a fe ff       	call   47c0 <dlsym@plt>
   1fd7d:	48 89 c2             	mov    rdx,rax
   1fd80:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fd84:	48 89 90 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],rdx
   1fd8b:	ba a1 00 00 00       	mov    edx,0xa1
   1fd90:	48 8d 05 89 b5 01 00 	lea    rax,[rip+0x1b589]        # 3b320 <NANO_SEC+0x58>
   1fd97:	48 89 c6             	mov    rsi,rax
   1fd9a:	48 8d 05 7f c4 01 00 	lea    rax,[rip+0x1c47f]        # 3c220 <NANO_SEC+0xf58>
   1fda1:	48 89 c7             	mov    rdi,rax
   1fda4:	e8 91 f3 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fda9:	83 f0 01             	xor    eax,0x1
   1fdac:	84 c0                	test   al,al
   1fdae:	74 02                	je     1fdb2 <LoadRendererInterface(RendererInterface&, char const*)+0xb14>
   1fdb0:	0f 0b                	ud2    
   1fdb2:	e8 66 f3 ff ff       	call   1f11d <LDClearErrors()>
   1fdb7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fdbb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fdbe:	48 8d 15 d3 c4 01 00 	lea    rdx,[rip+0x1c4d3]        # 3c298 <NANO_SEC+0xfd0>
   1fdc5:	48 89 d6             	mov    rsi,rdx
   1fdc8:	48 89 c7             	mov    rdi,rax
   1fdcb:	e8 f0 49 fe ff       	call   47c0 <dlsym@plt>
   1fdd0:	48 89 c2             	mov    rdx,rax
   1fdd3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fdd7:	48 89 90 f8 00 00 00 	mov    QWORD PTR [rax+0xf8],rdx
   1fdde:	ba a2 00 00 00       	mov    edx,0xa2
   1fde3:	48 8d 05 36 b5 01 00 	lea    rax,[rip+0x1b536]        # 3b320 <NANO_SEC+0x58>
   1fdea:	48 89 c6             	mov    rsi,rax
   1fded:	48 8d 05 bc c4 01 00 	lea    rax,[rip+0x1c4bc]        # 3c2b0 <NANO_SEC+0xfe8>
   1fdf4:	48 89 c7             	mov    rdi,rax
   1fdf7:	e8 3e f3 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fdfc:	83 f0 01             	xor    eax,0x1
   1fdff:	84 c0                	test   al,al
   1fe01:	74 02                	je     1fe05 <LoadRendererInterface(RendererInterface&, char const*)+0xb67>
   1fe03:	0f 0b                	ud2    
   1fe05:	e8 13 f3 ff ff       	call   1f11d <LDClearErrors()>
   1fe0a:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fe0e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fe11:	48 8d 15 19 c5 01 00 	lea    rdx,[rip+0x1c519]        # 3c331 <NANO_SEC+0x1069>
   1fe18:	48 89 d6             	mov    rsi,rdx
   1fe1b:	48 89 c7             	mov    rdi,rax
   1fe1e:	e8 9d 49 fe ff       	call   47c0 <dlsym@plt>
   1fe23:	48 89 c2             	mov    rdx,rax
   1fe26:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fe2a:	48 89 90 08 01 00 00 	mov    QWORD PTR [rax+0x108],rdx
   1fe31:	ba a4 00 00 00       	mov    edx,0xa4
   1fe36:	48 8d 05 e3 b4 01 00 	lea    rax,[rip+0x1b4e3]        # 3b320 <NANO_SEC+0x58>
   1fe3d:	48 89 c6             	mov    rsi,rax
   1fe40:	48 8d 05 f9 c4 01 00 	lea    rax,[rip+0x1c4f9]        # 3c340 <NANO_SEC+0x1078>
   1fe47:	48 89 c7             	mov    rdi,rax
   1fe4a:	e8 eb f2 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fe4f:	83 f0 01             	xor    eax,0x1
   1fe52:	84 c0                	test   al,al
   1fe54:	74 02                	je     1fe58 <LoadRendererInterface(RendererInterface&, char const*)+0xbba>
   1fe56:	0f 0b                	ud2    
   1fe58:	e8 c0 f2 ff ff       	call   1f11d <LDClearErrors()>
   1fe5d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fe61:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1fe64:	48 8d 15 3e c5 01 00 	lea    rdx,[rip+0x1c53e]        # 3c3a9 <NANO_SEC+0x10e1>
   1fe6b:	48 89 d6             	mov    rsi,rdx
   1fe6e:	48 89 c7             	mov    rdi,rax
   1fe71:	e8 4a 49 fe ff       	call   47c0 <dlsym@plt>
   1fe76:	48 89 c2             	mov    rdx,rax
   1fe79:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fe7d:	48 89 90 00 01 00 00 	mov    QWORD PTR [rax+0x100],rdx
   1fe84:	ba a5 00 00 00       	mov    edx,0xa5
   1fe89:	48 8d 05 90 b4 01 00 	lea    rax,[rip+0x1b490]        # 3b320 <NANO_SEC+0x58>
   1fe90:	48 89 c6             	mov    rsi,rax
   1fe93:	48 8d 05 1e c5 01 00 	lea    rax,[rip+0x1c51e]        # 3c3b8 <NANO_SEC+0x10f0>
   1fe9a:	48 89 c7             	mov    rdi,rax
   1fe9d:	e8 98 f2 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fea2:	83 f0 01             	xor    eax,0x1
   1fea5:	84 c0                	test   al,al
   1fea7:	74 02                	je     1feab <LoadRendererInterface(RendererInterface&, char const*)+0xc0d>
   1fea9:	0f 0b                	ud2    
   1feab:	e8 6d f2 ff ff       	call   1f11d <LDClearErrors()>
   1feb0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1feb4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1feb7:	48 8d 15 5d c5 01 00 	lea    rdx,[rip+0x1c55d]        # 3c41b <NANO_SEC+0x1153>
   1febe:	48 89 d6             	mov    rsi,rdx
   1fec1:	48 89 c7             	mov    rdi,rax
   1fec4:	e8 f7 48 fe ff       	call   47c0 <dlsym@plt>
   1fec9:	48 89 c2             	mov    rdx,rax
   1fecc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1fed0:	48 89 90 10 01 00 00 	mov    QWORD PTR [rax+0x110],rdx
   1fed7:	ba a7 00 00 00       	mov    edx,0xa7
   1fedc:	48 8d 05 3d b4 01 00 	lea    rax,[rip+0x1b43d]        # 3b320 <NANO_SEC+0x58>
   1fee3:	48 89 c6             	mov    rsi,rax
   1fee6:	48 8d 05 3b c5 01 00 	lea    rax,[rip+0x1c53b]        # 3c428 <NANO_SEC+0x1160>
   1feed:	48 89 c7             	mov    rdi,rax
   1fef0:	e8 45 f2 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1fef5:	83 f0 01             	xor    eax,0x1
   1fef8:	84 c0                	test   al,al
   1fefa:	74 02                	je     1fefe <LoadRendererInterface(RendererInterface&, char const*)+0xc60>
   1fefc:	0f 0b                	ud2    
   1fefe:	e8 1a f2 ff ff       	call   1f11d <LDClearErrors()>
   1ff03:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ff07:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1ff0a:	48 8d 15 71 c5 01 00 	lea    rdx,[rip+0x1c571]        # 3c482 <NANO_SEC+0x11ba>
   1ff11:	48 89 d6             	mov    rsi,rdx
   1ff14:	48 89 c7             	mov    rdi,rax
   1ff17:	e8 a4 48 fe ff       	call   47c0 <dlsym@plt>
   1ff1c:	48 89 c2             	mov    rdx,rax
   1ff1f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   1ff23:	48 89 90 18 01 00 00 	mov    QWORD PTR [rax+0x118],rdx
   1ff2a:	ba a8 00 00 00       	mov    edx,0xa8
   1ff2f:	48 8d 05 ea b3 01 00 	lea    rax,[rip+0x1b3ea]        # 3b320 <NANO_SEC+0x58>
   1ff36:	48 89 c6             	mov    rsi,rax
   1ff39:	48 8d 05 50 c5 01 00 	lea    rax,[rip+0x1c550]        # 3c490 <NANO_SEC+0x11c8>
   1ff40:	48 89 c7             	mov    rdi,rax
   1ff43:	e8 f2 f1 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1ff48:	83 f0 01             	xor    eax,0x1
   1ff4b:	84 c0                	test   al,al
   1ff4d:	74 1c                	je     1ff6b <LoadRendererInterface(RendererInterface&, char const*)+0xccd>
   1ff4f:	0f 0b                	ud2    
   1ff51:	48 89 c3             	mov    rbx,rax
   1ff54:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   1ff58:	48 89 c7             	mov    rdi,rax
   1ff5b:	e8 bc 54 00 00       	call   2541c <std::filesystem::__cxx11::path::~path()>
   1ff60:	48 89 d8             	mov    rax,rbx
   1ff63:	48 89 c7             	mov    rdi,rax
   1ff66:	e8 f5 47 fe ff       	call   4760 <_Unwind_Resume@plt>
   1ff6b:	90                   	nop
   1ff6c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1ff70:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   1ff79:	74 05                	je     1ff80 <LoadRendererInterface(RendererInterface&, char const*)+0xce2>
   1ff7b:	e8 60 45 fe ff       	call   44e0 <__stack_chk_fail@plt>
   1ff80:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   1ff84:	c9                   	leave  
   1ff85:	c3                   	ret    

000000000001ff86 <UnloadRendererInterface(RendererInterface&)>:
   1ff86:	55                   	push   rbp
   1ff87:	48 89 e5             	mov    rbp,rsp
   1ff8a:	48 83 ec 20          	sub    rsp,0x20
   1ff8e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   1ff92:	e8 86 f1 ff ff       	call   1f11d <LDClearErrors()>
   1ff97:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1ff9b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   1ff9e:	48 89 c7             	mov    rdi,rax
   1ffa1:	e8 5a 43 fe ff       	call   4300 <dlclose@plt>
   1ffa6:	ba ac 00 00 00       	mov    edx,0xac
   1ffab:	48 8d 05 6e b3 01 00 	lea    rax,[rip+0x1b36e]        # 3b320 <NANO_SEC+0x58>
   1ffb2:	48 89 c6             	mov    rsi,rax
   1ffb5:	48 8d 05 31 c5 01 00 	lea    rax,[rip+0x1c531]        # 3c4ed <NANO_SEC+0x1225>
   1ffbc:	48 89 c7             	mov    rdi,rax
   1ffbf:	e8 76 f1 ff ff       	call   1f13a <LDLogCall(char const*, char const*, int)>
   1ffc4:	83 f0 01             	xor    eax,0x1
   1ffc7:	84 c0                	test   al,al
   1ffc9:	74 02                	je     1ffcd <UnloadRendererInterface(RendererInterface&)+0x47>
   1ffcb:	0f 0b                	ud2    
   1ffcd:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   1ffd4:	eb 11                	jmp    1ffe7 <UnloadRendererInterface(RendererInterface&)+0x61>
   1ffd6:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   1ffd9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   1ffdd:	48 01 d0             	add    rax,rdx
   1ffe0:	c6 00 00             	mov    BYTE PTR [rax],0x0
   1ffe3:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   1ffe7:	81 7d fc 27 01 00 00 	cmp    DWORD PTR [rbp-0x4],0x127
   1ffee:	76 e6                	jbe    1ffd6 <UnloadRendererInterface(RendererInterface&)+0x50>
   1fff0:	90                   	nop
   1fff1:	90                   	nop
   1fff2:	c9                   	leave  
   1fff3:	c3                   	ret    

000000000001fff4 <AlsaLogCall(char const*, char const*, int, int)>:
   1fff4:	55                   	push   rbp
   1fff5:	48 89 e5             	mov    rbp,rsp
   1fff8:	53                   	push   rbx
   1fff9:	48 83 ec 28          	sub    rsp,0x28
   1fffd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   20001:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   20005:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
   20008:	89 4d d8             	mov    DWORD PTR [rbp-0x28],ecx
   2000b:	83 7d d8 00          	cmp    DWORD PTR [rbp-0x28],0x0
   2000f:	0f 89 c8 00 00 00    	jns    200dd <AlsaLogCall(char const*, char const*, int, int)+0xe9>
   20015:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   20018:	89 c6                	mov    esi,eax
   2001a:	48 8d 05 3f a6 02 00 	lea    rax,[rip+0x2a63f]        # 4a660 <std::cerr@@GLIBCXX_3.4>
   20021:	48 89 c7             	mov    rdi,rax
   20024:	e8 27 47 fe ff       	call   4750 <std::ostream::operator<<(int)@plt>
   20029:	48 89 c2             	mov    rdx,rax
   2002c:	48 8d 05 d4 c4 01 00 	lea    rax,[rip+0x1c4d4]        # 3c507 <NANO_SEC+0x123f>
   20033:	48 89 c6             	mov    rsi,rax
   20036:	48 89 d7             	mov    rdi,rdx
   20039:	e8 c2 43 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   2003e:	48 89 c3             	mov    rbx,rax
   20041:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   20044:	89 c7                	mov    edi,eax
   20046:	e8 d5 42 fe ff       	call   4320 <snd_strerror@plt>
   2004b:	48 89 c6             	mov    rsi,rax
   2004e:	48 89 df             	mov    rdi,rbx
   20051:	e8 aa 43 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   20056:	48 89 c2             	mov    rdx,rax
   20059:	48 8d 05 7c b2 01 00 	lea    rax,[rip+0x1b27c]        # 3b2dc <NANO_SEC+0x14>
   20060:	48 89 c6             	mov    rsi,rax
   20063:	48 89 d7             	mov    rdi,rdx
   20066:	e8 95 43 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   2006b:	48 89 c2             	mov    rdx,rax
   2006e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20072:	48 89 c6             	mov    rsi,rax
   20075:	48 89 d7             	mov    rdi,rdx
   20078:	e8 83 43 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   2007d:	48 89 c2             	mov    rdx,rax
   20080:	48 8d 05 8e c4 01 00 	lea    rax,[rip+0x1c48e]        # 3c515 <NANO_SEC+0x124d>
   20087:	48 89 c6             	mov    rsi,rax
   2008a:	48 89 d7             	mov    rdi,rdx
   2008d:	e8 6e 43 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   20092:	48 89 c2             	mov    rdx,rax
   20095:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   20099:	48 89 c6             	mov    rsi,rax
   2009c:	48 89 d7             	mov    rdi,rdx
   2009f:	e8 5c 43 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   200a4:	48 89 c2             	mov    rdx,rax
   200a7:	48 8d 05 6f c4 01 00 	lea    rax,[rip+0x1c46f]        # 3c51d <NANO_SEC+0x1255>
   200ae:	48 89 c6             	mov    rsi,rax
   200b1:	48 89 d7             	mov    rdi,rdx
   200b4:	e8 47 43 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   200b9:	48 89 c2             	mov    rdx,rax
   200bc:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   200bf:	89 c6                	mov    esi,eax
   200c1:	48 89 d7             	mov    rdi,rdx
   200c4:	e8 87 46 fe ff       	call   4750 <std::ostream::operator<<(int)@plt>
   200c9:	48 8b 15 f0 9e 02 00 	mov    rdx,QWORD PTR [rip+0x29ef0]        # 49fc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   200d0:	48 89 d6             	mov    rsi,rdx
   200d3:	48 89 c7             	mov    rdi,rax
   200d6:	e8 85 43 fe ff       	call   4460 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   200db:	0f 0b                	ud2    
   200dd:	90                   	nop
   200de:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   200e2:	c9                   	leave  
   200e3:	c3                   	ret    

00000000000200e4 <InitSound(SoundSystemState&)>:
   200e4:	55                   	push   rbp
   200e5:	48 89 e5             	mov    rbp,rsp
   200e8:	48 83 ec 50          	sub    rsp,0x50
   200ec:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   200f0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   200f9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   200fd:	31 c0                	xor    eax,eax
   200ff:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   20103:	b9 01 00 00 00       	mov    ecx,0x1
   20108:	ba 00 00 00 00       	mov    edx,0x0
   2010d:	48 8d 35 11 c4 01 00 	lea    rsi,[rip+0x1c411]        # 3c525 <NANO_SEC+0x125d>
   20114:	48 89 c7             	mov    rdi,rax
   20117:	e8 74 41 fe ff       	call   4290 <snd_pcm_open@plt>
   2011c:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   2011f:	83 7d cc 00          	cmp    DWORD PTR [rbp-0x34],0x0
   20123:	74 23                	je     20148 <InitSound(SoundSystemState&)+0x64>
   20125:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   20128:	89 c1                	mov    ecx,eax
   2012a:	ba 3c 00 00 00       	mov    edx,0x3c
   2012f:	48 8d 05 f7 c3 01 00 	lea    rax,[rip+0x1c3f7]        # 3c52d <NANO_SEC+0x1265>
   20136:	48 89 c6             	mov    rsi,rax
   20139:	48 8d 05 10 c4 01 00 	lea    rax,[rip+0x1c410]        # 3c550 <NANO_SEC+0x1288>
   20140:	48 89 c7             	mov    rdi,rax
   20143:	e8 ac fe ff ff       	call   1fff4 <AlsaLogCall(char const*, char const*, int, int)>
   20148:	e8 b3 43 fe ff       	call   4500 <snd_pcm_hw_params_sizeof@plt>
   2014d:	48 8d 50 08          	lea    rdx,[rax+0x8]
   20151:	b8 10 00 00 00       	mov    eax,0x10
   20156:	48 83 e8 01          	sub    rax,0x1
   2015a:	48 01 d0             	add    rax,rdx
   2015d:	b9 10 00 00 00       	mov    ecx,0x10
   20162:	ba 00 00 00 00       	mov    edx,0x0
   20167:	48 f7 f1             	div    rcx
   2016a:	48 6b c0 10          	imul   rax,rax,0x10
   2016e:	48 29 c4             	sub    rsp,rax
   20171:	48 89 e0             	mov    rax,rsp
   20174:	48 83 c0 0f          	add    rax,0xf
   20178:	48 c1 e8 04          	shr    rax,0x4
   2017c:	48 c1 e0 04          	shl    rax,0x4
   20180:	48 89 c2             	mov    rdx,rax
   20183:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   20187:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   2018b:	e8 70 43 fe ff       	call   4500 <snd_pcm_hw_params_sizeof@plt>
   20190:	48 89 c2             	mov    rdx,rax
   20193:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   20197:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   2019b:	be 00 00 00 00       	mov    esi,0x0
   201a0:	48 89 c7             	mov    rdi,rax
   201a3:	e8 38 40 fe ff       	call   41e0 <memset@plt>
   201a8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   201ac:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   201b0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   201b4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   201b7:	48 89 d6             	mov    rsi,rdx
   201ba:	48 89 c7             	mov    rdi,rax
   201bd:	e8 ee 45 fe ff       	call   47b0 <snd_pcm_hw_params_any@plt>
   201c2:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
   201c5:	83 7d d0 00          	cmp    DWORD PTR [rbp-0x30],0x0
   201c9:	74 23                	je     201ee <InitSound(SoundSystemState&)+0x10a>
   201cb:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   201ce:	89 c1                	mov    ecx,eax
   201d0:	ba 3e 00 00 00       	mov    edx,0x3e
   201d5:	48 8d 05 51 c3 01 00 	lea    rax,[rip+0x1c351]        # 3c52d <NANO_SEC+0x1265>
   201dc:	48 89 c6             	mov    rsi,rax
   201df:	48 8d 05 c2 c3 01 00 	lea    rax,[rip+0x1c3c2]        # 3c5a8 <NANO_SEC+0x12e0>
   201e6:	48 89 c7             	mov    rdi,rax
   201e9:	e8 06 fe ff ff       	call   1fff4 <AlsaLogCall(char const*, char const*, int, int)>
   201ee:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   201f2:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   201f6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   201fa:	48 8b 00             	mov    rax,QWORD PTR [rax]
   201fd:	ba 03 00 00 00       	mov    edx,0x3
   20202:	48 89 ce             	mov    rsi,rcx
   20205:	48 89 c7             	mov    rdi,rax
   20208:	e8 e3 3e fe ff       	call   40f0 <snd_pcm_hw_params_set_access@plt>
   2020d:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
   20210:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
   20214:	74 23                	je     20239 <InitSound(SoundSystemState&)+0x155>
   20216:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
   20219:	89 c1                	mov    ecx,eax
   2021b:	ba 40 00 00 00       	mov    edx,0x40
   20220:	48 8d 05 06 c3 01 00 	lea    rax,[rip+0x1c306]        # 3c52d <NANO_SEC+0x1265>
   20227:	48 89 c6             	mov    rsi,rax
   2022a:	48 8d 05 af c3 01 00 	lea    rax,[rip+0x1c3af]        # 3c5e0 <NANO_SEC+0x1318>
   20231:	48 89 c7             	mov    rdi,rax
   20234:	e8 bb fd ff ff       	call   1fff4 <AlsaLogCall(char const*, char const*, int, int)>
   20239:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2023d:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   20241:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   20245:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20248:	ba 02 00 00 00       	mov    edx,0x2
   2024d:	48 89 ce             	mov    rsi,rcx
   20250:	48 89 c7             	mov    rdi,rax
   20253:	e8 58 3f fe ff       	call   41b0 <snd_pcm_hw_params_set_format@plt>
   20258:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   2025b:	83 7d d8 00          	cmp    DWORD PTR [rbp-0x28],0x0
   2025f:	74 23                	je     20284 <InitSound(SoundSystemState&)+0x1a0>
   20261:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   20264:	89 c1                	mov    ecx,eax
   20266:	ba 41 00 00 00       	mov    edx,0x41
   2026b:	48 8d 05 bb c2 01 00 	lea    rax,[rip+0x1c2bb]        # 3c52d <NANO_SEC+0x1265>
   20272:	48 89 c6             	mov    rsi,rax
   20275:	48 8d 05 bc c3 01 00 	lea    rax,[rip+0x1c3bc]        # 3c638 <NANO_SEC+0x1370>
   2027c:	48 89 c7             	mov    rdi,rax
   2027f:	e8 70 fd ff ff       	call   1fff4 <AlsaLogCall(char const*, char const*, int, int)>
   20284:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   20288:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   2028c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   20290:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20293:	ba 02 00 00 00       	mov    edx,0x2
   20298:	48 89 ce             	mov    rsi,rcx
   2029b:	48 89 c7             	mov    rdi,rax
   2029e:	e8 3d 43 fe ff       	call   45e0 <snd_pcm_hw_params_set_channels@plt>
   202a3:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   202a6:	83 7d dc 00          	cmp    DWORD PTR [rbp-0x24],0x0
   202aa:	74 23                	je     202cf <InitSound(SoundSystemState&)+0x1eb>
   202ac:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   202af:	89 c1                	mov    ecx,eax
   202b1:	ba 42 00 00 00       	mov    edx,0x42
   202b6:	48 8d 05 70 c2 01 00 	lea    rax,[rip+0x1c270]        # 3c52d <NANO_SEC+0x1265>
   202bd:	48 89 c6             	mov    rsi,rax
   202c0:	48 8d 05 c1 c3 01 00 	lea    rax,[rip+0x1c3c1]        # 3c688 <NANO_SEC+0x13c0>
   202c7:	48 89 c7             	mov    rdi,rax
   202ca:	e8 25 fd ff ff       	call   1fff4 <AlsaLogCall(char const*, char const*, int, int)>
   202cf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   202d3:	c7 40 24 80 bb 00 00 	mov    DWORD PTR [rax+0x24],0xbb80
   202da:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   202de:	48 8d 78 24          	lea    rdi,[rax+0x24]
   202e2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   202e6:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
   202ea:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   202ee:	48 8b 00             	mov    rax,QWORD PTR [rax]
   202f1:	48 8d 55 c8          	lea    rdx,[rbp-0x38]
   202f5:	48 89 d1             	mov    rcx,rdx
   202f8:	48 89 fa             	mov    rdx,rdi
   202fb:	48 89 c7             	mov    rdi,rax
   202fe:	e8 0d 41 fe ff       	call   4410 <snd_pcm_hw_params_set_rate_near@plt>
   20303:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   20306:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
   2030a:	74 23                	je     2032f <InitSound(SoundSystemState&)+0x24b>
   2030c:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   2030f:	89 c1                	mov    ecx,eax
   20311:	ba 44 00 00 00       	mov    edx,0x44
   20316:	48 8d 05 10 c2 01 00 	lea    rax,[rip+0x1c210]        # 3c52d <NANO_SEC+0x1265>
   2031d:	48 89 c6             	mov    rsi,rax
   20320:	48 8d 05 a1 c3 01 00 	lea    rax,[rip+0x1c3a1]        # 3c6c8 <NANO_SEC+0x1400>
   20327:	48 89 c7             	mov    rdi,rax
   2032a:	e8 c5 fc ff ff       	call   1fff4 <AlsaLogCall(char const*, char const*, int, int)>
   2032f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   20333:	48 c7 40 10 20 00 00 00 	mov    QWORD PTR [rax+0x10],0x20
   2033b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2033f:	48 8d 78 10          	lea    rdi,[rax+0x10]
   20343:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   20347:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
   2034b:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2034f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20352:	48 8d 55 c8          	lea    rdx,[rbp-0x38]
   20356:	48 89 d1             	mov    rcx,rdx
   20359:	48 89 fa             	mov    rdx,rdi
   2035c:	48 89 c7             	mov    rdi,rax
   2035f:	e8 dc 3f fe ff       	call   4340 <snd_pcm_hw_params_set_period_size_near@plt>
   20364:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   20367:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
   2036b:	74 23                	je     20390 <InitSound(SoundSystemState&)+0x2ac>
   2036d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   20370:	89 c1                	mov    ecx,eax
   20372:	ba 47 00 00 00       	mov    edx,0x47
   20377:	48 8d 05 af c1 01 00 	lea    rax,[rip+0x1c1af]        # 3c52d <NANO_SEC+0x1265>
   2037e:	48 89 c6             	mov    rsi,rax
   20381:	48 8d 05 98 c3 01 00 	lea    rax,[rip+0x1c398]        # 3c720 <NANO_SEC+0x1458>
   20388:	48 89 c7             	mov    rdi,rax
   2038b:	e8 64 fc ff ff       	call   1fff4 <AlsaLogCall(char const*, char const*, int, int)>
   20390:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   20394:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   20398:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2039c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2039f:	48 89 d6             	mov    rsi,rdx
   203a2:	48 89 c7             	mov    rdi,rax
   203a5:	e8 16 40 fe ff       	call   43c0 <snd_pcm_hw_params@plt>
   203aa:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   203ad:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
   203b1:	74 23                	je     203d6 <InitSound(SoundSystemState&)+0x2f2>
   203b3:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   203b6:	89 c1                	mov    ecx,eax
   203b8:	ba 48 00 00 00       	mov    edx,0x48
   203bd:	48 8d 05 69 c1 01 00 	lea    rax,[rip+0x1c169]        # 3c52d <NANO_SEC+0x1265>
   203c4:	48 89 c6             	mov    rsi,rax
   203c7:	48 8d 05 aa c3 01 00 	lea    rax,[rip+0x1c3aa]        # 3c778 <NANO_SEC+0x14b0>
   203ce:	48 89 c7             	mov    rdi,rax
   203d1:	e8 1e fc ff ff       	call   1fff4 <AlsaLogCall(char const*, char const*, int, int)>
   203d6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   203da:	48 8d 50 18          	lea    rdx,[rax+0x18]
   203de:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   203e2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   203e6:	48 89 d6             	mov    rsi,rdx
   203e9:	48 89 c7             	mov    rdi,rax
   203ec:	e8 6f 3d fe ff       	call   4160 <snd_pcm_hw_params_get_buffer_size@plt>
   203f1:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   203f4:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
   203f8:	74 23                	je     2041d <InitSound(SoundSystemState&)+0x339>
   203fa:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   203fd:	89 c1                	mov    ecx,eax
   203ff:	ba 49 00 00 00       	mov    edx,0x49
   20404:	48 8d 05 22 c1 01 00 	lea    rax,[rip+0x1c122]        # 3c52d <NANO_SEC+0x1265>
   2040b:	48 89 c6             	mov    rsi,rax
   2040e:	48 8d 05 93 c3 01 00 	lea    rax,[rip+0x1c393]        # 3c7a8 <NANO_SEC+0x14e0>
   20415:	48 89 c7             	mov    rdi,rax
   20418:	e8 d7 fb ff ff       	call   1fff4 <AlsaLogCall(char const*, char const*, int, int)>
   2041d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   20421:	48 8d 48 10          	lea    rcx,[rax+0x10]
   20425:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   20429:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   2042d:	48 8d 55 c8          	lea    rdx,[rbp-0x38]
   20431:	48 89 ce             	mov    rsi,rcx
   20434:	48 89 c7             	mov    rdi,rax
   20437:	e8 54 3f fe ff       	call   4390 <snd_pcm_hw_params_get_period_size@plt>
   2043c:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   2043f:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
   20443:	74 23                	je     20468 <InitSound(SoundSystemState&)+0x384>
   20445:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   20448:	89 c1                	mov    ecx,eax
   2044a:	ba 4a 00 00 00       	mov    edx,0x4a
   2044f:	48 8d 05 d7 c0 01 00 	lea    rax,[rip+0x1c0d7]        # 3c52d <NANO_SEC+0x1265>
   20456:	48 89 c6             	mov    rsi,rax
   20459:	48 8d 05 98 c3 01 00 	lea    rax,[rip+0x1c398]        # 3c7f8 <NANO_SEC+0x1530>
   20460:	48 89 c7             	mov    rdi,rax
   20463:	e8 8c fb ff ff       	call   1fff4 <AlsaLogCall(char const*, char const*, int, int)>
   20468:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2046c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   20470:	89 c2                	mov    edx,eax
   20472:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   20476:	89 50 30             	mov    DWORD PTR [rax+0x30],edx
   20479:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2047d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   20481:	8d 14 85 00 00 00 00 	lea    edx,[rax*4+0x0]
   20488:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2048c:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   2048f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   20493:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   20496:	89 c0                	mov    eax,eax
   20498:	48 89 c6             	mov    rsi,rax
   2049b:	bf 10 00 00 00       	mov    edi,0x10
   204a0:	e8 2b 3e fe ff       	call   42d0 <aligned_alloc@plt>
   204a5:	48 89 c2             	mov    rdx,rax
   204a8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   204ac:	48 89 50 38          	mov    QWORD PTR [rax+0x38],rdx
   204b0:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   204b4:	8b 50 20             	mov    edx,DWORD PTR [rax+0x20]
   204b7:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   204bb:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
   204bf:	be 00 00 00 00       	mov    esi,0x0
   204c4:	48 89 c7             	mov    rdi,rax
   204c7:	e8 58 ed ff ff       	call   1f224 <MemSet(void*, signed char, unsigned int)>
   204cc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   204d0:	48 8d 48 2c          	lea    rcx,[rax+0x2c]
   204d4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   204d8:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   204dc:	48 8d 55 c8          	lea    rdx,[rbp-0x38]
   204e0:	48 89 ce             	mov    rsi,rcx
   204e3:	48 89 c7             	mov    rdi,rax
   204e6:	e8 05 40 fe ff       	call   44f0 <snd_pcm_hw_params_get_period_time@plt>
   204eb:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   204ee:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
   204f2:	74 23                	je     20517 <InitSound(SoundSystemState&)+0x433>
   204f4:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   204f7:	89 c1                	mov    ecx,eax
   204f9:	ba 50 00 00 00       	mov    edx,0x50
   204fe:	48 8d 05 28 c0 01 00 	lea    rax,[rip+0x1c028]        # 3c52d <NANO_SEC+0x1265>
   20505:	48 89 c6             	mov    rsi,rax
   20508:	48 8d 05 31 c3 01 00 	lea    rax,[rip+0x1c331]        # 3c840 <NANO_SEC+0x1578>
   2050f:	48 89 c7             	mov    rdi,rax
   20512:	e8 dd fa ff ff       	call   1fff4 <AlsaLogCall(char const*, char const*, int, int)>
   20517:	90                   	nop
   20518:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2051c:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   20525:	74 05                	je     2052c <InitSound(SoundSystemState&)+0x448>
   20527:	e8 b4 3f fe ff       	call   44e0 <__stack_chk_fail@plt>
   2052c:	c9                   	leave  
   2052d:	c3                   	ret    

000000000002052e <PushSound(SoundTable&, SoundInstance)>:
   2052e:	55                   	push   rbp
   2052f:	48 89 e5             	mov    rbp,rsp
   20532:	48 83 ec 20          	sub    rsp,0x20
   20536:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2053a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2053e:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   20541:	8d 50 01             	lea    edx,[rax+0x1]
   20544:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20548:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   2054b:	39 c2                	cmp    edx,eax
   2054d:	0f 86 c6 00 00 00    	jbe    20619 <PushSound(SoundTable&, SoundInstance)+0xeb>
   20553:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20557:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   2055a:	8d 50 01             	lea    edx,[rax+0x1]
   2055d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20561:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
   20564:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20568:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   2056b:	8d 14 00             	lea    edx,[rax+rax*1]
   2056e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20572:	89 50 24             	mov    DWORD PTR [rax+0x24],edx
   20575:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20579:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
   2057c:	89 c2                	mov    edx,eax
   2057e:	48 89 d0             	mov    rax,rdx
   20581:	48 01 c0             	add    rax,rax
   20584:	48 01 d0             	add    rax,rdx
   20587:	48 c1 e0 03          	shl    rax,0x3
   2058b:	48 89 c7             	mov    rdi,rax
   2058e:	e8 3d 40 fe ff       	call   45d0 <malloc@plt>
   20593:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   20597:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
   2059e:	eb 51                	jmp    205f1 <PushSound(SoundTable&, SoundInstance)+0xc3>
   205a0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   205a4:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   205a8:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   205ab:	48 89 d0             	mov    rax,rdx
   205ae:	48 01 c0             	add    rax,rax
   205b1:	48 01 d0             	add    rax,rdx
   205b4:	48 c1 e0 03          	shl    rax,0x3
   205b8:	48 8d 34 01          	lea    rsi,[rcx+rax*1]
   205bc:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   205bf:	48 89 d0             	mov    rax,rdx
   205c2:	48 01 c0             	add    rax,rax
   205c5:	48 01 d0             	add    rax,rdx
   205c8:	48 c1 e0 03          	shl    rax,0x3
   205cc:	48 89 c2             	mov    rdx,rax
   205cf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   205d3:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   205d7:	48 8b 06             	mov    rax,QWORD PTR [rsi]
   205da:	48 8b 56 08          	mov    rdx,QWORD PTR [rsi+0x8]
   205de:	48 89 01             	mov    QWORD PTR [rcx],rax
   205e1:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   205e5:	48 8b 46 10          	mov    rax,QWORD PTR [rsi+0x10]
   205e9:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   205ed:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
   205f1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   205f5:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   205f8:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   205fb:	72 a3                	jb     205a0 <PushSound(SoundTable&, SoundInstance)+0x72>
   205fd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20601:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
   20605:	48 89 c7             	mov    rdi,rax
   20608:	e8 23 3f fe ff       	call   4530 <free@plt>
   2060d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20611:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   20615:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   20619:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   2061d:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
   20620:	83 c2 01             	add    edx,0x1
   20623:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   20626:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2062a:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   2062e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20632:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   20635:	8d 48 01             	lea    ecx,[rax+0x1]
   20638:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2063c:	89 4a 20             	mov    DWORD PTR [rdx+0x20],ecx
   2063f:	89 c2                	mov    edx,eax
   20641:	48 89 d0             	mov    rax,rdx
   20644:	48 01 c0             	add    rax,rax
   20647:	48 01 d0             	add    rax,rdx
   2064a:	48 c1 e0 03          	shl    rax,0x3
   2064e:	48 8d 0c 06          	lea    rcx,[rsi+rax*1]
   20652:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
   20656:	48 8b 55 18          	mov    rdx,QWORD PTR [rbp+0x18]
   2065a:	48 89 01             	mov    QWORD PTR [rcx],rax
   2065d:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   20661:	48 8b 45 20          	mov    rax,QWORD PTR [rbp+0x20]
   20665:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   20669:	90                   	nop
   2066a:	c9                   	leave  
   2066b:	c3                   	ret    

000000000002066c <FreeSoundAsset(SoundAsset*)>:
   2066c:	55                   	push   rbp
   2066d:	48 89 e5             	mov    rbp,rsp
   20670:	48 83 ec 10          	sub    rsp,0x10
   20674:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   20678:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2067c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2067f:	48 89 c7             	mov    rdi,rax
   20682:	e8 a9 3e fe ff       	call   4530 <free@plt>
   20687:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2068b:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   20692:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   20696:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
   2069d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   206a1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
   206a8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   206ac:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
   206b3:	90                   	nop
   206b4:	c9                   	leave  
   206b5:	c3                   	ret    

00000000000206b6 <FWide(SoundSystemState&, SoundTable&)>:
   206b6:	55                   	push   rbp
   206b7:	48 89 e5             	mov    rbp,rsp
   206ba:	48 83 ec 30          	sub    rsp,0x30
   206be:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   206c2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   206c6:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0
   206cd:	e9 f3 07 00 00       	jmp    20ec5 <FWide(SoundSystemState&, SoundTable&)+0x80f>
   206d2:	66 0f ef c0          	pxor   xmm0,xmm0
   206d6:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   206db:	66 0f ef c0          	pxor   xmm0,xmm0
   206df:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   206e4:	66 0f ef c0          	pxor   xmm0,xmm0
   206e8:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   206ed:	66 0f ef c0          	pxor   xmm0,xmm0
   206f1:	f3 0f 11 45 f8       	movss  DWORD PTR [rbp-0x8],xmm0
   206f6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   206fd:	e9 4a 06 00 00       	jmp    20d4c <FWide(SoundSystemState&, SoundTable&)+0x696>
   20702:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20706:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   2070a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2070d:	48 89 d0             	mov    rax,rdx
   20710:	48 01 c0             	add    rax,rax
   20713:	48 01 d0             	add    rax,rdx
   20716:	48 c1 e0 03          	shl    rax,0x3
   2071a:	48 01 c8             	add    rax,rcx
   2071d:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20720:	8d 48 02             	lea    ecx,[rax+0x2]
   20723:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20727:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   2072b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2072e:	48 89 d0             	mov    rax,rdx
   20731:	48 01 c0             	add    rax,rax
   20734:	48 01 d0             	add    rax,rdx
   20737:	48 c1 e0 03          	shl    rax,0x3
   2073b:	48 01 f0             	add    rax,rsi
   2073e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20741:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20744:	39 c1                	cmp    ecx,eax
   20746:	0f 82 98 03 00 00    	jb     20ae4 <FWide(SoundSystemState&, SoundTable&)+0x42e>
   2074c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20750:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20754:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20757:	48 89 d0             	mov    rax,rdx
   2075a:	48 01 c0             	add    rax,rax
   2075d:	48 01 d0             	add    rax,rdx
   20760:	48 c1 e0 03          	shl    rax,0x3
   20764:	48 01 c8             	add    rax,rcx
   20767:	0f b6 40 10          	movzx  eax,BYTE PTR [rax+0x10]
   2076b:	84 c0                	test   al,al
   2076d:	74 27                	je     20796 <FWide(SoundSystemState&, SoundTable&)+0xe0>
   2076f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20773:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20777:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2077a:	48 89 d0             	mov    rax,rdx
   2077d:	48 01 c0             	add    rax,rax
   20780:	48 01 d0             	add    rax,rdx
   20783:	48 c1 e0 03          	shl    rax,0x3
   20787:	48 01 c8             	add    rax,rcx
   2078a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
   20791:	e9 b2 05 00 00       	jmp    20d48 <FWide(SoundSystemState&, SoundTable&)+0x692>
   20796:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2079a:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   2079e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   207a1:	48 89 d0             	mov    rax,rdx
   207a4:	48 01 c0             	add    rax,rax
   207a7:	48 01 d0             	add    rax,rdx
   207aa:	48 c1 e0 03          	shl    rax,0x3
   207ae:	48 01 c8             	add    rax,rcx
   207b1:	48 8b 00             	mov    rax,QWORD PTR [rax]
   207b4:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
   207b7:	83 ea 01             	sub    edx,0x1
   207ba:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
   207bd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   207c1:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   207c5:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   207c8:	48 89 d0             	mov    rax,rdx
   207cb:	48 01 c0             	add    rax,rax
   207ce:	48 01 d0             	add    rax,rdx
   207d1:	48 c1 e0 03          	shl    rax,0x3
   207d5:	48 01 c8             	add    rax,rcx
   207d8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   207db:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
   207de:	85 c0                	test   eax,eax
   207e0:	75 26                	jne    20808 <FWide(SoundSystemState&, SoundTable&)+0x152>
   207e2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   207e6:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   207ea:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   207ed:	48 89 d0             	mov    rax,rdx
   207f0:	48 01 c0             	add    rax,rax
   207f3:	48 01 d0             	add    rax,rdx
   207f6:	48 c1 e0 03          	shl    rax,0x3
   207fa:	48 01 c8             	add    rax,rcx
   207fd:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20800:	48 89 c7             	mov    rdi,rax
   20803:	e8 64 fe ff ff       	call   2066c <FreeSoundAsset(SoundAsset*)>
   20808:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2080c:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20810:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20814:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   20817:	8d 50 ff             	lea    edx,[rax-0x1]
   2081a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2081e:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   20821:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20825:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   20828:	89 c2                	mov    edx,eax
   2082a:	48 89 d0             	mov    rax,rdx
   2082d:	48 01 c0             	add    rax,rax
   20830:	48 01 d0             	add    rax,rdx
   20833:	48 c1 e0 03          	shl    rax,0x3
   20837:	48 8d 34 01          	lea    rsi,[rcx+rax*1]
   2083b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2083f:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20843:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20846:	48 89 d0             	mov    rax,rdx
   20849:	48 01 c0             	add    rax,rax
   2084c:	48 01 d0             	add    rax,rdx
   2084f:	48 c1 e0 03          	shl    rax,0x3
   20853:	48 01 c1             	add    rcx,rax
   20856:	48 8b 06             	mov    rax,QWORD PTR [rsi]
   20859:	48 8b 56 08          	mov    rdx,QWORD PTR [rsi+0x8]
   2085d:	48 89 01             	mov    QWORD PTR [rcx],rax
   20860:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   20864:	48 8b 46 10          	mov    rax,QWORD PTR [rsi+0x10]
   20868:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   2086c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20870:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   20873:	85 c0                	test   eax,eax
   20875:	0f 84 cd 04 00 00    	je     20d48 <FWide(SoundSystemState&, SoundTable&)+0x692>
   2087b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2087f:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20883:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20886:	48 89 d0             	mov    rax,rdx
   20889:	48 01 c0             	add    rax,rax
   2088c:	48 01 d0             	add    rax,rdx
   2088f:	48 c1 e0 03          	shl    rax,0x3
   20893:	48 01 c8             	add    rax,rcx
   20896:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20899:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2089c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   208a0:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   208a4:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   208a7:	48 89 d0             	mov    rax,rdx
   208aa:	48 01 c0             	add    rax,rax
   208ad:	48 01 d0             	add    rax,rdx
   208b0:	48 c1 e0 03          	shl    rax,0x3
   208b4:	48 01 f0             	add    rax,rsi
   208b7:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   208ba:	01 c0                	add    eax,eax
   208bc:	89 c0                	mov    eax,eax
   208be:	48 01 c0             	add    rax,rax
   208c1:	48 01 c8             	add    rax,rcx
   208c4:	0f b7 00             	movzx  eax,WORD PTR [rax]
   208c7:	98                   	cwde   
   208c8:	66 0f ef c9          	pxor   xmm1,xmm1
   208cc:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   208d0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   208d4:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   208d8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   208db:	48 89 d0             	mov    rax,rdx
   208de:	48 01 c0             	add    rax,rax
   208e1:	48 01 d0             	add    rax,rdx
   208e4:	48 c1 e0 03          	shl    rax,0x3
   208e8:	48 01 c8             	add    rax,rcx
   208eb:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   208f0:	f3 0f 59 c1          	mulss  xmm0,xmm1
   208f4:	f3 0f 10 4d ec       	movss  xmm1,DWORD PTR [rbp-0x14]
   208f9:	f3 0f 58 c1          	addss  xmm0,xmm1
   208fd:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   20902:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20906:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   2090a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2090d:	48 89 d0             	mov    rax,rdx
   20910:	48 01 c0             	add    rax,rax
   20913:	48 01 d0             	add    rax,rdx
   20916:	48 c1 e0 03          	shl    rax,0x3
   2091a:	48 01 c8             	add    rax,rcx
   2091d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20920:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   20923:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20927:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   2092b:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   2092e:	48 89 d0             	mov    rax,rdx
   20931:	48 01 c0             	add    rax,rax
   20934:	48 01 d0             	add    rax,rdx
   20937:	48 c1 e0 03          	shl    rax,0x3
   2093b:	48 01 f0             	add    rax,rsi
   2093e:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20941:	01 c0                	add    eax,eax
   20943:	83 c0 01             	add    eax,0x1
   20946:	89 c0                	mov    eax,eax
   20948:	48 01 c0             	add    rax,rax
   2094b:	48 01 c8             	add    rax,rcx
   2094e:	0f b7 00             	movzx  eax,WORD PTR [rax]
   20951:	98                   	cwde   
   20952:	66 0f ef c9          	pxor   xmm1,xmm1
   20956:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   2095a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2095e:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20962:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20965:	48 89 d0             	mov    rax,rdx
   20968:	48 01 c0             	add    rax,rax
   2096b:	48 01 d0             	add    rax,rdx
   2096e:	48 c1 e0 03          	shl    rax,0x3
   20972:	48 01 c8             	add    rax,rcx
   20975:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   2097a:	f3 0f 59 c1          	mulss  xmm0,xmm1
   2097e:	f3 0f 10 4d f0       	movss  xmm1,DWORD PTR [rbp-0x10]
   20983:	f3 0f 58 c1          	addss  xmm0,xmm1
   20987:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   2098c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20990:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20994:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20997:	48 89 d0             	mov    rax,rdx
   2099a:	48 01 c0             	add    rax,rax
   2099d:	48 01 d0             	add    rax,rdx
   209a0:	48 c1 e0 03          	shl    rax,0x3
   209a4:	48 01 c8             	add    rax,rcx
   209a7:	48 8b 00             	mov    rax,QWORD PTR [rax]
   209aa:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   209ad:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   209b1:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   209b5:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   209b8:	48 89 d0             	mov    rax,rdx
   209bb:	48 01 c0             	add    rax,rax
   209be:	48 01 d0             	add    rax,rdx
   209c1:	48 c1 e0 03          	shl    rax,0x3
   209c5:	48 01 f0             	add    rax,rsi
   209c8:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   209cb:	01 c0                	add    eax,eax
   209cd:	83 c0 02             	add    eax,0x2
   209d0:	89 c0                	mov    eax,eax
   209d2:	48 01 c0             	add    rax,rax
   209d5:	48 01 c8             	add    rax,rcx
   209d8:	0f b7 00             	movzx  eax,WORD PTR [rax]
   209db:	98                   	cwde   
   209dc:	66 0f ef c9          	pxor   xmm1,xmm1
   209e0:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   209e4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   209e8:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   209ec:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   209ef:	48 89 d0             	mov    rax,rdx
   209f2:	48 01 c0             	add    rax,rax
   209f5:	48 01 d0             	add    rax,rdx
   209f8:	48 c1 e0 03          	shl    rax,0x3
   209fc:	48 01 c8             	add    rax,rcx
   209ff:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   20a04:	f3 0f 59 c1          	mulss  xmm0,xmm1
   20a08:	f3 0f 10 4d f4       	movss  xmm1,DWORD PTR [rbp-0xc]
   20a0d:	f3 0f 58 c1          	addss  xmm0,xmm1
   20a11:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   20a16:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20a1a:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20a1e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20a21:	48 89 d0             	mov    rax,rdx
   20a24:	48 01 c0             	add    rax,rax
   20a27:	48 01 d0             	add    rax,rdx
   20a2a:	48 c1 e0 03          	shl    rax,0x3
   20a2e:	48 01 c8             	add    rax,rcx
   20a31:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20a34:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   20a37:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20a3b:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   20a3f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20a42:	48 89 d0             	mov    rax,rdx
   20a45:	48 01 c0             	add    rax,rax
   20a48:	48 01 d0             	add    rax,rdx
   20a4b:	48 c1 e0 03          	shl    rax,0x3
   20a4f:	48 01 f0             	add    rax,rsi
   20a52:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20a55:	01 c0                	add    eax,eax
   20a57:	83 c0 03             	add    eax,0x3
   20a5a:	89 c0                	mov    eax,eax
   20a5c:	48 01 c0             	add    rax,rax
   20a5f:	48 01 c8             	add    rax,rcx
   20a62:	0f b7 00             	movzx  eax,WORD PTR [rax]
   20a65:	98                   	cwde   
   20a66:	66 0f ef c9          	pxor   xmm1,xmm1
   20a6a:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   20a6e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20a72:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20a76:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20a79:	48 89 d0             	mov    rax,rdx
   20a7c:	48 01 c0             	add    rax,rax
   20a7f:	48 01 d0             	add    rax,rdx
   20a82:	48 c1 e0 03          	shl    rax,0x3
   20a86:	48 01 c8             	add    rax,rcx
   20a89:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   20a8e:	f3 0f 59 c1          	mulss  xmm0,xmm1
   20a92:	f3 0f 10 4d f8       	movss  xmm1,DWORD PTR [rbp-0x8]
   20a97:	f3 0f 58 c1          	addss  xmm0,xmm1
   20a9b:	f3 0f 11 45 f8       	movss  DWORD PTR [rbp-0x8],xmm0
   20aa0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20aa4:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20aa8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20aab:	48 89 d0             	mov    rax,rdx
   20aae:	48 01 c0             	add    rax,rax
   20ab1:	48 01 d0             	add    rax,rdx
   20ab4:	48 c1 e0 03          	shl    rax,0x3
   20ab8:	48 01 c8             	add    rax,rcx
   20abb:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
   20abe:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20ac2:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   20ac6:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20ac9:	48 89 d0             	mov    rax,rdx
   20acc:	48 01 c0             	add    rax,rax
   20acf:	48 01 d0             	add    rax,rdx
   20ad2:	48 c1 e0 03          	shl    rax,0x3
   20ad6:	48 01 f0             	add    rax,rsi
   20ad9:	8d 51 02             	lea    edx,[rcx+0x2]
   20adc:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   20adf:	e9 64 02 00 00       	jmp    20d48 <FWide(SoundSystemState&, SoundTable&)+0x692>
   20ae4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20ae8:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20aec:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20aef:	48 89 d0             	mov    rax,rdx
   20af2:	48 01 c0             	add    rax,rax
   20af5:	48 01 d0             	add    rax,rdx
   20af8:	48 c1 e0 03          	shl    rax,0x3
   20afc:	48 01 c8             	add    rax,rcx
   20aff:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20b02:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   20b05:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20b09:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   20b0d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20b10:	48 89 d0             	mov    rax,rdx
   20b13:	48 01 c0             	add    rax,rax
   20b16:	48 01 d0             	add    rax,rdx
   20b19:	48 c1 e0 03          	shl    rax,0x3
   20b1d:	48 01 f0             	add    rax,rsi
   20b20:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20b23:	01 c0                	add    eax,eax
   20b25:	89 c0                	mov    eax,eax
   20b27:	48 01 c0             	add    rax,rax
   20b2a:	48 01 c8             	add    rax,rcx
   20b2d:	0f b7 00             	movzx  eax,WORD PTR [rax]
   20b30:	98                   	cwde   
   20b31:	66 0f ef c9          	pxor   xmm1,xmm1
   20b35:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   20b39:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20b3d:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20b41:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20b44:	48 89 d0             	mov    rax,rdx
   20b47:	48 01 c0             	add    rax,rax
   20b4a:	48 01 d0             	add    rax,rdx
   20b4d:	48 c1 e0 03          	shl    rax,0x3
   20b51:	48 01 c8             	add    rax,rcx
   20b54:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   20b59:	f3 0f 59 c1          	mulss  xmm0,xmm1
   20b5d:	f3 0f 10 4d ec       	movss  xmm1,DWORD PTR [rbp-0x14]
   20b62:	f3 0f 58 c1          	addss  xmm0,xmm1
   20b66:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   20b6b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20b6f:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20b73:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20b76:	48 89 d0             	mov    rax,rdx
   20b79:	48 01 c0             	add    rax,rax
   20b7c:	48 01 d0             	add    rax,rdx
   20b7f:	48 c1 e0 03          	shl    rax,0x3
   20b83:	48 01 c8             	add    rax,rcx
   20b86:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20b89:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   20b8c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20b90:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   20b94:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20b97:	48 89 d0             	mov    rax,rdx
   20b9a:	48 01 c0             	add    rax,rax
   20b9d:	48 01 d0             	add    rax,rdx
   20ba0:	48 c1 e0 03          	shl    rax,0x3
   20ba4:	48 01 f0             	add    rax,rsi
   20ba7:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20baa:	01 c0                	add    eax,eax
   20bac:	83 c0 01             	add    eax,0x1
   20baf:	89 c0                	mov    eax,eax
   20bb1:	48 01 c0             	add    rax,rax
   20bb4:	48 01 c8             	add    rax,rcx
   20bb7:	0f b7 00             	movzx  eax,WORD PTR [rax]
   20bba:	98                   	cwde   
   20bbb:	66 0f ef c9          	pxor   xmm1,xmm1
   20bbf:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   20bc3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20bc7:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20bcb:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20bce:	48 89 d0             	mov    rax,rdx
   20bd1:	48 01 c0             	add    rax,rax
   20bd4:	48 01 d0             	add    rax,rdx
   20bd7:	48 c1 e0 03          	shl    rax,0x3
   20bdb:	48 01 c8             	add    rax,rcx
   20bde:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   20be3:	f3 0f 59 c1          	mulss  xmm0,xmm1
   20be7:	f3 0f 10 4d f0       	movss  xmm1,DWORD PTR [rbp-0x10]
   20bec:	f3 0f 58 c1          	addss  xmm0,xmm1
   20bf0:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   20bf5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20bf9:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20bfd:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20c00:	48 89 d0             	mov    rax,rdx
   20c03:	48 01 c0             	add    rax,rax
   20c06:	48 01 d0             	add    rax,rdx
   20c09:	48 c1 e0 03          	shl    rax,0x3
   20c0d:	48 01 c8             	add    rax,rcx
   20c10:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20c13:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   20c16:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20c1a:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   20c1e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20c21:	48 89 d0             	mov    rax,rdx
   20c24:	48 01 c0             	add    rax,rax
   20c27:	48 01 d0             	add    rax,rdx
   20c2a:	48 c1 e0 03          	shl    rax,0x3
   20c2e:	48 01 f0             	add    rax,rsi
   20c31:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20c34:	01 c0                	add    eax,eax
   20c36:	83 c0 02             	add    eax,0x2
   20c39:	89 c0                	mov    eax,eax
   20c3b:	48 01 c0             	add    rax,rax
   20c3e:	48 01 c8             	add    rax,rcx
   20c41:	0f b7 00             	movzx  eax,WORD PTR [rax]
   20c44:	98                   	cwde   
   20c45:	66 0f ef c9          	pxor   xmm1,xmm1
   20c49:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   20c4d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20c51:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20c55:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20c58:	48 89 d0             	mov    rax,rdx
   20c5b:	48 01 c0             	add    rax,rax
   20c5e:	48 01 d0             	add    rax,rdx
   20c61:	48 c1 e0 03          	shl    rax,0x3
   20c65:	48 01 c8             	add    rax,rcx
   20c68:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   20c6d:	f3 0f 59 c1          	mulss  xmm0,xmm1
   20c71:	f3 0f 10 4d f4       	movss  xmm1,DWORD PTR [rbp-0xc]
   20c76:	f3 0f 58 c1          	addss  xmm0,xmm1
   20c7a:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   20c7f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20c83:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20c87:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20c8a:	48 89 d0             	mov    rax,rdx
   20c8d:	48 01 c0             	add    rax,rax
   20c90:	48 01 d0             	add    rax,rdx
   20c93:	48 c1 e0 03          	shl    rax,0x3
   20c97:	48 01 c8             	add    rax,rcx
   20c9a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20c9d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   20ca0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20ca4:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   20ca8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20cab:	48 89 d0             	mov    rax,rdx
   20cae:	48 01 c0             	add    rax,rax
   20cb1:	48 01 d0             	add    rax,rdx
   20cb4:	48 c1 e0 03          	shl    rax,0x3
   20cb8:	48 01 f0             	add    rax,rsi
   20cbb:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   20cbe:	01 c0                	add    eax,eax
   20cc0:	83 c0 03             	add    eax,0x3
   20cc3:	89 c0                	mov    eax,eax
   20cc5:	48 01 c0             	add    rax,rax
   20cc8:	48 01 c8             	add    rax,rcx
   20ccb:	0f b7 00             	movzx  eax,WORD PTR [rax]
   20cce:	98                   	cwde   
   20ccf:	66 0f ef c9          	pxor   xmm1,xmm1
   20cd3:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   20cd7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20cdb:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20cdf:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20ce2:	48 89 d0             	mov    rax,rdx
   20ce5:	48 01 c0             	add    rax,rax
   20ce8:	48 01 d0             	add    rax,rdx
   20ceb:	48 c1 e0 03          	shl    rax,0x3
   20cef:	48 01 c8             	add    rax,rcx
   20cf2:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   20cf7:	f3 0f 59 c1          	mulss  xmm0,xmm1
   20cfb:	f3 0f 10 4d f8       	movss  xmm1,DWORD PTR [rbp-0x8]
   20d00:	f3 0f 58 c1          	addss  xmm0,xmm1
   20d04:	f3 0f 11 45 f8       	movss  DWORD PTR [rbp-0x8],xmm0
   20d09:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20d0d:	48 8b 48 18          	mov    rcx,QWORD PTR [rax+0x18]
   20d11:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20d14:	48 89 d0             	mov    rax,rdx
   20d17:	48 01 c0             	add    rax,rax
   20d1a:	48 01 d0             	add    rax,rdx
   20d1d:	48 c1 e0 03          	shl    rax,0x3
   20d21:	48 01 c8             	add    rax,rcx
   20d24:	8b 48 08             	mov    ecx,DWORD PTR [rax+0x8]
   20d27:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20d2b:	48 8b 70 18          	mov    rsi,QWORD PTR [rax+0x18]
   20d2f:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   20d32:	48 89 d0             	mov    rax,rdx
   20d35:	48 01 c0             	add    rax,rax
   20d38:	48 01 d0             	add    rax,rdx
   20d3b:	48 c1 e0 03          	shl    rax,0x3
   20d3f:	48 01 f0             	add    rax,rsi
   20d42:	8d 51 02             	lea    edx,[rcx+0x2]
   20d45:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   20d48:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   20d4c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20d50:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   20d53:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
   20d56:	0f 82 a6 f9 ff ff    	jb     20702 <FWide(SoundSystemState&, SoundTable&)+0x4c>
   20d5c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20d60:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   20d63:	89 c0                	mov    eax,eax
   20d65:	48 85 c0             	test   rax,rax
   20d68:	78 0b                	js     20d75 <FWide(SoundSystemState&, SoundTable&)+0x6bf>
   20d6a:	66 0f ef c0          	pxor   xmm0,xmm0
   20d6e:	f3 48 0f 2a c0       	cvtsi2ss xmm0,rax
   20d73:	eb 19                	jmp    20d8e <FWide(SoundSystemState&, SoundTable&)+0x6d8>
   20d75:	48 89 c2             	mov    rdx,rax
   20d78:	48 d1 ea             	shr    rdx,1
   20d7b:	83 e0 01             	and    eax,0x1
   20d7e:	48 09 c2             	or     rdx,rax
   20d81:	66 0f ef c0          	pxor   xmm0,xmm0
   20d85:	f3 48 0f 2a c2       	cvtsi2ss xmm0,rdx
   20d8a:	f3 0f 58 c0          	addss  xmm0,xmm0
   20d8e:	f3 0f 10 4d ec       	movss  xmm1,DWORD PTR [rbp-0x14]
   20d93:	f3 0f 5e c8          	divss  xmm1,xmm0
   20d97:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   20d9b:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
   20d9f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   20da2:	01 c0                	add    eax,eax
   20da4:	89 c0                	mov    eax,eax
   20da6:	48 01 c0             	add    rax,rax
   20da9:	48 01 d0             	add    rax,rdx
   20dac:	f3 0f 2c d1          	cvttss2si edx,xmm1
   20db0:	66 89 10             	mov    WORD PTR [rax],dx
   20db3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20db7:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   20dba:	89 c0                	mov    eax,eax
   20dbc:	48 85 c0             	test   rax,rax
   20dbf:	78 0b                	js     20dcc <FWide(SoundSystemState&, SoundTable&)+0x716>
   20dc1:	66 0f ef c0          	pxor   xmm0,xmm0
   20dc5:	f3 48 0f 2a c0       	cvtsi2ss xmm0,rax
   20dca:	eb 19                	jmp    20de5 <FWide(SoundSystemState&, SoundTable&)+0x72f>
   20dcc:	48 89 c2             	mov    rdx,rax
   20dcf:	48 d1 ea             	shr    rdx,1
   20dd2:	83 e0 01             	and    eax,0x1
   20dd5:	48 09 c2             	or     rdx,rax
   20dd8:	66 0f ef c0          	pxor   xmm0,xmm0
   20ddc:	f3 48 0f 2a c2       	cvtsi2ss xmm0,rdx
   20de1:	f3 0f 58 c0          	addss  xmm0,xmm0
   20de5:	f3 0f 10 4d f0       	movss  xmm1,DWORD PTR [rbp-0x10]
   20dea:	f3 0f 5e c8          	divss  xmm1,xmm0
   20dee:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   20df2:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
   20df6:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   20df9:	01 c0                	add    eax,eax
   20dfb:	83 c0 01             	add    eax,0x1
   20dfe:	89 c0                	mov    eax,eax
   20e00:	48 01 c0             	add    rax,rax
   20e03:	48 01 d0             	add    rax,rdx
   20e06:	f3 0f 2c d1          	cvttss2si edx,xmm1
   20e0a:	66 89 10             	mov    WORD PTR [rax],dx
   20e0d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20e11:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   20e14:	89 c0                	mov    eax,eax
   20e16:	48 85 c0             	test   rax,rax
   20e19:	78 0b                	js     20e26 <FWide(SoundSystemState&, SoundTable&)+0x770>
   20e1b:	66 0f ef c0          	pxor   xmm0,xmm0
   20e1f:	f3 48 0f 2a c0       	cvtsi2ss xmm0,rax
   20e24:	eb 19                	jmp    20e3f <FWide(SoundSystemState&, SoundTable&)+0x789>
   20e26:	48 89 c2             	mov    rdx,rax
   20e29:	48 d1 ea             	shr    rdx,1
   20e2c:	83 e0 01             	and    eax,0x1
   20e2f:	48 09 c2             	or     rdx,rax
   20e32:	66 0f ef c0          	pxor   xmm0,xmm0
   20e36:	f3 48 0f 2a c2       	cvtsi2ss xmm0,rdx
   20e3b:	f3 0f 58 c0          	addss  xmm0,xmm0
   20e3f:	f3 0f 10 4d f4       	movss  xmm1,DWORD PTR [rbp-0xc]
   20e44:	f3 0f 5e c8          	divss  xmm1,xmm0
   20e48:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   20e4c:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
   20e50:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   20e53:	83 c0 01             	add    eax,0x1
   20e56:	01 c0                	add    eax,eax
   20e58:	89 c0                	mov    eax,eax
   20e5a:	48 01 c0             	add    rax,rax
   20e5d:	48 01 d0             	add    rax,rdx
   20e60:	f3 0f 2c d1          	cvttss2si edx,xmm1
   20e64:	66 89 10             	mov    WORD PTR [rax],dx
   20e67:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   20e6b:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
   20e6e:	89 c0                	mov    eax,eax
   20e70:	48 85 c0             	test   rax,rax
   20e73:	78 0b                	js     20e80 <FWide(SoundSystemState&, SoundTable&)+0x7ca>
   20e75:	66 0f ef c0          	pxor   xmm0,xmm0
   20e79:	f3 48 0f 2a c0       	cvtsi2ss xmm0,rax
   20e7e:	eb 19                	jmp    20e99 <FWide(SoundSystemState&, SoundTable&)+0x7e3>
   20e80:	48 89 c2             	mov    rdx,rax
   20e83:	48 d1 ea             	shr    rdx,1
   20e86:	83 e0 01             	and    eax,0x1
   20e89:	48 09 c2             	or     rdx,rax
   20e8c:	66 0f ef c0          	pxor   xmm0,xmm0
   20e90:	f3 48 0f 2a c2       	cvtsi2ss xmm0,rdx
   20e95:	f3 0f 58 c0          	addss  xmm0,xmm0
   20e99:	f3 0f 10 4d f8       	movss  xmm1,DWORD PTR [rbp-0x8]
   20e9e:	f3 0f 5e c8          	divss  xmm1,xmm0
   20ea2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   20ea6:	48 8b 50 38          	mov    rdx,QWORD PTR [rax+0x38]
   20eaa:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   20ead:	01 c0                	add    eax,eax
   20eaf:	83 c0 03             	add    eax,0x3
   20eb2:	89 c0                	mov    eax,eax
   20eb4:	48 01 c0             	add    rax,rax
   20eb7:	48 01 d0             	add    rax,rdx
   20eba:	f3 0f 2c d1          	cvttss2si edx,xmm1
   20ebe:	66 89 10             	mov    WORD PTR [rax],dx
   20ec1:	83 45 e8 02          	add    DWORD PTR [rbp-0x18],0x2
   20ec5:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   20ec8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   20ecc:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   20ed0:	48 39 c2             	cmp    rdx,rax
   20ed3:	0f 82 f9 f7 ff ff    	jb     206d2 <FWide(SoundSystemState&, SoundTable&)+0x1c>
   20ed9:	90                   	nop
   20eda:	90                   	nop
   20edb:	c9                   	leave  
   20edc:	c3                   	ret    

0000000000020edd <PlaySounds(SoundSystemState&, SoundTable&)>:
   20edd:	55                   	push   rbp
   20ede:	48 89 e5             	mov    rbp,rsp
   20ee1:	48 83 ec 20          	sub    rsp,0x20
   20ee5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   20ee9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   20eed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20ef1:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   20ef5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20ef9:	48 8b 48 38          	mov    rcx,QWORD PTR [rax+0x38]
   20efd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20f01:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20f04:	48 89 ce             	mov    rsi,rcx
   20f07:	48 89 c7             	mov    rdi,rax
   20f0a:	e8 a1 34 fe ff       	call   43b0 <snd_pcm_writei@plt>
   20f0f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   20f12:	83 7d fc f5          	cmp    DWORD PTR [rbp-0x4],0xfffffff5
   20f16:	74 13                	je     20f2b <PlaySounds(SoundSystemState&, SoundTable&)+0x4e>
   20f18:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   20f1c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20f20:	48 89 d6             	mov    rsi,rdx
   20f23:	48 89 c7             	mov    rdi,rax
   20f26:	e8 8b f7 ff ff       	call   206b6 <FWide(SoundSystemState&, SoundTable&)>
   20f2b:	83 7d fc e0          	cmp    DWORD PTR [rbp-0x4],0xffffffe0
   20f2f:	75 3c                	jne    20f6d <PlaySounds(SoundSystemState&, SoundTable&)+0x90>
   20f31:	48 8d 05 51 b9 01 00 	lea    rax,[rip+0x1b951]        # 3c889 <NANO_SEC+0x15c1>
   20f38:	48 89 c6             	mov    rsi,rax
   20f3b:	48 8d 05 fe 95 02 00 	lea    rax,[rip+0x295fe]        # 4a540 <std::cout@@GLIBCXX_3.4>
   20f42:	48 89 c7             	mov    rdi,rax
   20f45:	e8 b6 34 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   20f4a:	48 8b 15 6f 90 02 00 	mov    rdx,QWORD PTR [rip+0x2906f]        # 49fc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   20f51:	48 89 d6             	mov    rsi,rdx
   20f54:	48 89 c7             	mov    rdi,rax
   20f57:	e8 04 35 fe ff       	call   4460 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   20f5c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20f60:	48 8b 00             	mov    rax,QWORD PTR [rax]
   20f63:	48 89 c7             	mov    rdi,rax
   20f66:	e8 85 34 fe ff       	call   43f0 <snd_pcm_prepare@plt>
   20f6b:	eb 60                	jmp    20fcd <PlaySounds(SoundSystemState&, SoundTable&)+0xf0>
   20f6d:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   20f71:	79 0c                	jns    20f7f <PlaySounds(SoundSystemState&, SoundTable&)+0xa2>
   20f73:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   20f76:	89 c7                	mov    edi,eax
   20f78:	e8 a3 33 fe ff       	call   4320 <snd_strerror@plt>
   20f7d:	eb 4e                	jmp    20fcd <PlaySounds(SoundSystemState&, SoundTable&)+0xf0>
   20f7f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20f83:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   20f87:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
   20f8a:	74 41                	je     20fcd <PlaySounds(SoundSystemState&, SoundTable&)+0xf0>
   20f8c:	48 8d 05 ff b8 01 00 	lea    rax,[rip+0x1b8ff]        # 3c892 <NANO_SEC+0x15ca>
   20f93:	48 89 c6             	mov    rsi,rax
   20f96:	48 8d 05 a3 95 02 00 	lea    rax,[rip+0x295a3]        # 4a540 <std::cout@@GLIBCXX_3.4>
   20f9d:	48 89 c7             	mov    rdi,rax
   20fa0:	e8 5b 34 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   20fa5:	48 89 c2             	mov    rdx,rax
   20fa8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20fac:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   20fb0:	48 89 c6             	mov    rsi,rax
   20fb3:	48 89 d7             	mov    rdi,rdx
   20fb6:	e8 f5 30 fe ff       	call   40b0 <std::ostream::operator<<(unsigned long)@plt>
   20fbb:	48 8b 15 fe 8f 02 00 	mov    rdx,QWORD PTR [rip+0x28ffe]        # 49fc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   20fc2:	48 89 d6             	mov    rsi,rdx
   20fc5:	48 89 c7             	mov    rdi,rax
   20fc8:	e8 93 34 fe ff       	call   4460 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   20fcd:	90                   	nop
   20fce:	c9                   	leave  
   20fcf:	c3                   	ret    

0000000000020fd0 <LoadSoundAsset(char const*, SoundAsset*)>:
   20fd0:	55                   	push   rbp
   20fd1:	48 89 e5             	mov    rbp,rsp
   20fd4:	48 83 ec 20          	sub    rsp,0x20
   20fd8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   20fdc:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   20fe0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   20fe4:	48 8d 15 b5 b8 01 00 	lea    rdx,[rip+0x1b8b5]        # 3c8a0 <NANO_SEC+0x15d8>
   20feb:	48 89 d6             	mov    rsi,rdx
   20fee:	48 89 c7             	mov    rdi,rax
   20ff1:	e8 2a 35 fe ff       	call   4520 <fopen@plt>
   20ff6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   20ffa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   20ffe:	ba 02 00 00 00       	mov    edx,0x2
   21003:	be 00 00 00 00       	mov    esi,0x0
   21008:	48 89 c7             	mov    rdi,rax
   2100b:	e8 c0 34 fe ff       	call   44d0 <fseek@plt>
   21010:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21014:	48 89 c7             	mov    rdi,rax
   21017:	e8 14 30 fe ff       	call   4030 <ftell@plt>
   2101c:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2101f:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   21022:	c1 e8 02             	shr    eax,0x2
   21025:	83 c0 01             	add    eax,0x1
   21028:	83 e0 fe             	and    eax,0xfffffffe
   2102b:	89 c2                	mov    edx,eax
   2102d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   21031:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   21034:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   21038:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2103b:	c1 e0 02             	shl    eax,0x2
   2103e:	89 c0                	mov    eax,eax
   21040:	48 89 c6             	mov    rsi,rax
   21043:	bf 10 00 00 00       	mov    edi,0x10
   21048:	e8 83 32 fe ff       	call   42d0 <aligned_alloc@plt>
   2104d:	48 89 c2             	mov    rdx,rax
   21050:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   21054:	48 89 10             	mov    QWORD PTR [rax],rdx
   21057:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2105b:	c7 40 0c 80 bb 00 00 	mov    DWORD PTR [rax+0xc],0xbb80
   21062:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   21066:	c7 40 10 00 00 00 00 	mov    DWORD PTR [rax+0x10],0x0
   2106d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21071:	ba 00 00 00 00       	mov    edx,0x0
   21076:	be 2c 00 00 00       	mov    esi,0x2c
   2107b:	48 89 c7             	mov    rdi,rax
   2107e:	e8 4d 34 fe ff       	call   44d0 <fseek@plt>
   21083:	8b 75 f4             	mov    esi,DWORD PTR [rbp-0xc]
   21086:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2108a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2108d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   21091:	48 89 d1             	mov    rcx,rdx
   21094:	ba 01 00 00 00       	mov    edx,0x1
   21099:	48 89 c7             	mov    rdi,rax
   2109c:	e8 df 35 fe ff       	call   4680 <fread@plt>
   210a1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   210a5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   210a8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   210ac:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   210af:	01 c0                	add    eax,eax
   210b1:	83 e8 02             	sub    eax,0x2
   210b4:	89 c0                	mov    eax,eax
   210b6:	48 01 c0             	add    rax,rax
   210b9:	48 01 d0             	add    rax,rdx
   210bc:	0f b7 00             	movzx  eax,WORD PTR [rax]
   210bf:	98                   	cwde   
   210c0:	66 0f ef c9          	pxor   xmm1,xmm1
   210c4:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   210c8:	f2 0f 10 05 88 b9 01 00 	movsd  xmm0,QWORD PTR [rip+0x1b988]        # 3ca58 <NANO_SEC+0x1790>
   210d0:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   210d4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   210d8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   210db:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   210df:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   210e2:	01 c0                	add    eax,eax
   210e4:	83 e8 01             	sub    eax,0x1
   210e7:	89 c0                	mov    eax,eax
   210e9:	48 01 c0             	add    rax,rax
   210ec:	48 01 d0             	add    rax,rdx
   210ef:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   210f3:	66 89 10             	mov    WORD PTR [rax],dx
   210f6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   210fa:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   210fd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   21101:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   21104:	01 c0                	add    eax,eax
   21106:	83 e8 01             	sub    eax,0x1
   21109:	89 c0                	mov    eax,eax
   2110b:	48 01 c0             	add    rax,rax
   2110e:	48 01 d0             	add    rax,rdx
   21111:	0f b7 00             	movzx  eax,WORD PTR [rax]
   21114:	98                   	cwde   
   21115:	66 0f ef c9          	pxor   xmm1,xmm1
   21119:	f2 0f 2a c8          	cvtsi2sd xmm1,eax
   2111d:	f2 0f 10 05 33 b9 01 00 	movsd  xmm0,QWORD PTR [rip+0x1b933]        # 3ca58 <NANO_SEC+0x1790>
   21125:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   21129:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2112d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   21130:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   21134:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   21137:	01 c0                	add    eax,eax
   21139:	89 c0                	mov    eax,eax
   2113b:	48 01 c0             	add    rax,rax
   2113e:	48 01 d0             	add    rax,rdx
   21141:	f2 0f 2c d0          	cvttsd2si edx,xmm0
   21145:	66 89 10             	mov    WORD PTR [rax],dx
   21148:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2114c:	48 89 c7             	mov    rdi,rax
   2114f:	e8 cc 32 fe ff       	call   4420 <fclose@plt>
   21154:	90                   	nop
   21155:	c9                   	leave  
   21156:	c3                   	ret    

0000000000021157 <MoveCameraAlong(Camera&)>:
   21157:	55                   	push   rbp
   21158:	48 89 e5             	mov    rbp,rsp
   2115b:	48 83 ec 40          	sub    rsp,0x40
   2115f:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   21163:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2116c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   21170:	31 c0                	xor    eax,eax
   21172:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21176:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
   2117a:	88 45 db             	mov    BYTE PTR [rbp-0x25],al
   2117d:	0f b6 45 db          	movzx  eax,BYTE PTR [rbp-0x25]
   21181:	83 e0 01             	and    eax,0x1
   21184:	88 45 dc             	mov    BYTE PTR [rbp-0x24],al
   21187:	0f b6 45 db          	movzx  eax,BYTE PTR [rbp-0x25]
   2118b:	d0 e8                	shr    al,1
   2118d:	83 e0 01             	and    eax,0x1
   21190:	88 45 dd             	mov    BYTE PTR [rbp-0x23],al
   21193:	0f b6 45 db          	movzx  eax,BYTE PTR [rbp-0x25]
   21197:	c0 e8 02             	shr    al,0x2
   2119a:	83 e0 01             	and    eax,0x1
   2119d:	88 45 de             	mov    BYTE PTR [rbp-0x22],al
   211a0:	0f b6 45 db          	movzx  eax,BYTE PTR [rbp-0x25]
   211a4:	c0 e8 03             	shr    al,0x3
   211a7:	83 e0 01             	and    eax,0x1
   211aa:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
   211ad:	0f b6 45 db          	movzx  eax,BYTE PTR [rbp-0x25]
   211b1:	c0 e8 04             	shr    al,0x4
   211b4:	83 e0 01             	and    eax,0x1
   211b7:	88 45 e0             	mov    BYTE PTR [rbp-0x20],al
   211ba:	0f b6 45 db          	movzx  eax,BYTE PTR [rbp-0x25]
   211be:	c0 e8 05             	shr    al,0x5
   211c1:	83 e0 01             	and    eax,0x1
   211c4:	88 45 e1             	mov    BYTE PTR [rbp-0x1f],al
   211c7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   211cb:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   211ce:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   211d2:	f3 0f 10 40 14       	movss  xmm0,DWORD PTR [rax+0x14]
   211d7:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   211db:	0f 28 c8             	movaps xmm1,xmm0
   211de:	66 0f 6e c2          	movd   xmm0,edx
   211e2:	48 89 c7             	mov    rdi,rax
   211e5:	e8 88 42 00 00       	call   25472 <glm::vec<2, float, (glm::qualifier)0>::vec(float, float)>
   211ea:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   211ee:	48 89 c7             	mov    rdi,rax
   211f1:	e8 39 4b 00 00       	call   25d2f <glm::vec<2, float, (glm::qualifier)0> glm::normalize<2, float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&)>
   211f6:	66 48 0f 7e c0       	movq   rax,xmm0
   211fb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   211ff:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   21202:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   21207:	f3 0f 10 0d 51 b8 01 00 	movss  xmm1,DWORD PTR [rip+0x1b851]        # 3ca60 <NANO_SEC+0x1798>
   2120f:	0f 57 c1             	xorps  xmm0,xmm1
   21212:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   21216:	0f 28 c8             	movaps xmm1,xmm0
   21219:	66 0f 6e c2          	movd   xmm0,edx
   2121d:	48 89 c7             	mov    rdi,rax
   21220:	e8 4d 42 00 00       	call   25472 <glm::vec<2, float, (glm::qualifier)0>::vec(float, float)>
   21225:	0f b6 45 dc          	movzx  eax,BYTE PTR [rbp-0x24]
   21229:	2a 45 de             	sub    al,BYTE PTR [rbp-0x22]
   2122c:	88 45 e2             	mov    BYTE PTR [rbp-0x1e],al
   2122f:	0f b6 45 dd          	movzx  eax,BYTE PTR [rbp-0x23]
   21233:	2a 45 df             	sub    al,BYTE PTR [rbp-0x21]
   21236:	88 45 e3             	mov    BYTE PTR [rbp-0x1d],al
   21239:	f3 0f 10 05 2f b8 01 00 	movss  xmm0,DWORD PTR [rip+0x1b82f]        # 3ca70 <NANO_SEC+0x17a8>
   21241:	f3 0f 11 45 e4       	movss  DWORD PTR [rbp-0x1c],xmm0
   21246:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2124a:	f3 0f 10 48 18       	movss  xmm1,DWORD PTR [rax+0x18]
   2124f:	f3 0f 10 55 e8       	movss  xmm2,DWORD PTR [rbp-0x18]
   21254:	0f be 45 e2          	movsx  eax,BYTE PTR [rbp-0x1e]
   21258:	66 0f ef c0          	pxor   xmm0,xmm0
   2125c:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   21260:	f3 0f 59 d0          	mulss  xmm2,xmm0
   21264:	f3 0f 10 05 04 b8 01 00 	movss  xmm0,DWORD PTR [rip+0x1b804]        # 3ca70 <NANO_SEC+0x17a8>
   2126c:	f3 0f 59 d0          	mulss  xmm2,xmm0
   21270:	f3 0f 10 5d f0       	movss  xmm3,DWORD PTR [rbp-0x10]
   21275:	0f be 45 e3          	movsx  eax,BYTE PTR [rbp-0x1d]
   21279:	66 0f ef c0          	pxor   xmm0,xmm0
   2127d:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   21281:	f3 0f 59 d8          	mulss  xmm3,xmm0
   21285:	f3 0f 10 05 e3 b7 01 00 	movss  xmm0,DWORD PTR [rip+0x1b7e3]        # 3ca70 <NANO_SEC+0x17a8>
   2128d:	f3 0f 59 c3          	mulss  xmm0,xmm3
   21291:	f3 0f 58 c2          	addss  xmm0,xmm2
   21295:	f3 0f 58 c1          	addss  xmm0,xmm1
   21299:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2129d:	f3 0f 11 40 18       	movss  DWORD PTR [rax+0x18],xmm0
   212a2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   212a6:	f3 0f 10 48 20       	movss  xmm1,DWORD PTR [rax+0x20]
   212ab:	f3 0f 10 55 ec       	movss  xmm2,DWORD PTR [rbp-0x14]
   212b0:	0f be 45 e2          	movsx  eax,BYTE PTR [rbp-0x1e]
   212b4:	66 0f ef c0          	pxor   xmm0,xmm0
   212b8:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   212bc:	f3 0f 59 d0          	mulss  xmm2,xmm0
   212c0:	f3 0f 10 05 a8 b7 01 00 	movss  xmm0,DWORD PTR [rip+0x1b7a8]        # 3ca70 <NANO_SEC+0x17a8>
   212c8:	f3 0f 59 d0          	mulss  xmm2,xmm0
   212cc:	f3 0f 10 5d f4       	movss  xmm3,DWORD PTR [rbp-0xc]
   212d1:	0f be 45 e3          	movsx  eax,BYTE PTR [rbp-0x1d]
   212d5:	66 0f ef c0          	pxor   xmm0,xmm0
   212d9:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
   212dd:	f3 0f 59 d8          	mulss  xmm3,xmm0
   212e1:	f3 0f 10 05 87 b7 01 00 	movss  xmm0,DWORD PTR [rip+0x1b787]        # 3ca70 <NANO_SEC+0x17a8>
   212e9:	f3 0f 59 c3          	mulss  xmm0,xmm3
   212ed:	f3 0f 58 c2          	addss  xmm0,xmm2
   212f1:	f3 0f 58 c1          	addss  xmm0,xmm1
   212f5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   212f9:	f3 0f 11 40 20       	movss  DWORD PTR [rax+0x20],xmm0
   212fe:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21302:	c6 40 24 00          	mov    BYTE PTR [rax+0x24],0x0
   21306:	90                   	nop
   21307:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2130b:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   21314:	74 05                	je     2131b <MoveCameraAlong(Camera&)+0x1c4>
   21316:	e8 c5 31 fe ff       	call   44e0 <__stack_chk_fail@plt>
   2131b:	c9                   	leave  
   2131c:	c3                   	ret    

000000000002131d <RotateCamera(Camera*, float, float)>:
   2131d:	55                   	push   rbp
   2131e:	48 89 e5             	mov    rbp,rsp
   21321:	53                   	push   rbx
   21322:	48 83 ec 78          	sub    rsp,0x78
   21326:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
   2132a:	f3 0f 11 45 84       	movss  DWORD PTR [rbp-0x7c],xmm0
   2132f:	f3 0f 11 4d 80       	movss  DWORD PTR [rbp-0x80],xmm1
   21334:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2133d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   21341:	31 c0                	xor    eax,eax
   21343:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
   21346:	66 0f 6e c0          	movd   xmm0,eax
   2134a:	e8 a0 3f 00 00       	call   252ef <std::cos(float)>
   2134f:	66 0f 7e c0          	movd   eax,xmm0
   21353:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
   21356:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
   21359:	66 0f 6e c0          	movd   xmm0,eax
   2135d:	e8 f3 3f 00 00       	call   25355 <std::sin(float)>
   21362:	66 0f 7e c0          	movd   eax,xmm0
   21366:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
   21369:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   2136c:	66 0f 6e c0          	movd   xmm0,eax
   21370:	e8 7a 3f 00 00       	call   252ef <std::cos(float)>
   21375:	66 0f 7e c0          	movd   eax,xmm0
   21379:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
   2137c:	8b 45 84             	mov    eax,DWORD PTR [rbp-0x7c]
   2137f:	66 0f 6e c0          	movd   xmm0,eax
   21383:	e8 cd 3f 00 00       	call   25355 <std::sin(float)>
   21388:	66 0f 7e c0          	movd   eax,xmm0
   2138c:	89 45 a8             	mov    DWORD PTR [rbp-0x58],eax
   2138f:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   21393:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   21398:	f3 0f 59 45 9c       	mulss  xmm0,DWORD PTR [rbp-0x64]
   2139d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   213a1:	f3 0f 10 48 14       	movss  xmm1,DWORD PTR [rax+0x14]
   213a6:	f3 0f 59 4d a0       	mulss  xmm1,DWORD PTR [rbp-0x60]
   213ab:	f3 0f 5c c1          	subss  xmm0,xmm1
   213af:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   213b3:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   213b8:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   213bc:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   213c1:	0f 28 c8             	movaps xmm1,xmm0
   213c4:	f3 0f 59 4d a0       	mulss  xmm1,DWORD PTR [rbp-0x60]
   213c9:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   213cd:	f3 0f 10 40 14       	movss  xmm0,DWORD PTR [rax+0x14]
   213d2:	f3 0f 59 45 9c       	mulss  xmm0,DWORD PTR [rbp-0x64]
   213d7:	f3 0f 58 c1          	addss  xmm0,xmm1
   213db:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   213df:	f3 0f 11 40 14       	movss  DWORD PTR [rax+0x14],xmm0
   213e4:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   213e8:	48 83 c0 0c          	add    rax,0xc
   213ec:	48 8b 5d 88          	mov    rbx,QWORD PTR [rbp-0x78]
   213f0:	48 89 c7             	mov    rdi,rax
   213f3:	e8 5c 49 00 00       	call   25d54 <v3<float>::normalize()>
   213f8:	66 48 0f 7e c0       	movq   rax,xmm0
   213fd:	66 48 0f 7e ca       	movq   rdx,xmm1
   21402:	48 89 43 0c          	mov    QWORD PTR [rbx+0xc],rax
   21406:	8b 43 14             	mov    eax,DWORD PTR [rbx+0x14]
   21409:	83 e0 00             	and    eax,0x0
   2140c:	09 d0                	or     eax,edx
   2140e:	89 43 14             	mov    DWORD PTR [rbx+0x14],eax
   21411:	66 0f ef c0          	pxor   xmm0,xmm0
   21415:	f3 0f 11 45 d0       	movss  DWORD PTR [rbp-0x30],xmm0
   2141a:	f3 0f 10 05 22 b6 01 00 	movss  xmm0,DWORD PTR [rip+0x1b622]        # 3ca44 <NANO_SEC+0x177c>
   21422:	f3 0f 11 45 d4       	movss  DWORD PTR [rbp-0x2c],xmm0
   21427:	66 0f ef c0          	pxor   xmm0,xmm0
   2142b:	f3 0f 11 45 d8       	movss  DWORD PTR [rbp-0x28],xmm0
   21430:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
   21434:	66 0f 6e 45 d8       	movd   xmm0,DWORD PTR [rbp-0x28]
   21439:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   2143d:	48 8b 50 0c          	mov    rdx,QWORD PTR [rax+0xc]
   21441:	66 0f 6e 48 14       	movd   xmm1,DWORD PTR [rax+0x14]
   21446:	66 48 0f 6e d1       	movq   xmm2,rcx
   2144b:	66 0f 6f d8          	movdqa xmm3,xmm0
   2144f:	66 48 0f 6e c2       	movq   xmm0,rdx
   21454:	e8 8b 49 00 00       	call   25de4 <v3<float> cross<float>(v3<float>, v3<float>)>
   21459:	66 48 0f 7e c0       	movq   rax,xmm0
   2145e:	66 48 0f 7e ca       	movq   rdx,xmm1
   21463:	48 89 45 dc          	mov    QWORD PTR [rbp-0x24],rax
   21467:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   2146a:	83 e0 00             	and    eax,0x0
   2146d:	09 d0                	or     eax,edx
   2146f:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   21472:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21476:	48 89 c7             	mov    rdi,rax
   21479:	e8 d6 48 00 00       	call   25d54 <v3<float>::normalize()>
   2147e:	66 48 0f 7e c0       	movq   rax,xmm0
   21483:	66 48 0f 7e ca       	movq   rdx,xmm1
   21488:	48 89 45 ac          	mov    QWORD PTR [rbp-0x54],rax
   2148c:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
   2148f:	83 e0 00             	and    eax,0x0
   21492:	09 d0                	or     eax,edx
   21494:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
   21497:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   2149b:	48 8b 50 0c          	mov    rdx,QWORD PTR [rax+0xc]
   2149f:	66 0f 6e 40 14       	movd   xmm0,DWORD PTR [rax+0x14]
   214a4:	48 8b 45 ac          	mov    rax,QWORD PTR [rbp-0x54]
   214a8:	66 0f 6e 4d b4       	movd   xmm1,DWORD PTR [rbp-0x4c]
   214ad:	66 48 0f 6e d2       	movq   xmm2,rdx
   214b2:	66 0f 6f d8          	movdqa xmm3,xmm0
   214b6:	66 48 0f 6e c0       	movq   xmm0,rax
   214bb:	e8 24 49 00 00       	call   25de4 <v3<float> cross<float>(v3<float>, v3<float>)>
   214c0:	66 48 0f 7e c0       	movq   rax,xmm0
   214c5:	66 48 0f 7e ca       	movq   rdx,xmm1
   214ca:	48 89 45 dc          	mov    QWORD PTR [rbp-0x24],rax
   214ce:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   214d1:	83 e0 00             	and    eax,0x0
   214d4:	09 d0                	or     eax,edx
   214d6:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   214d9:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   214dd:	48 89 c7             	mov    rdi,rax
   214e0:	e8 6f 48 00 00       	call   25d54 <v3<float>::normalize()>
   214e5:	66 48 0f 7e c0       	movq   rax,xmm0
   214ea:	66 48 0f 7e ca       	movq   rdx,xmm1
   214ef:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   214f3:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
   214f6:	83 e0 00             	and    eax,0x0
   214f9:	09 d0                	or     eax,edx
   214fb:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
   214fe:	8b 55 a8             	mov    edx,DWORD PTR [rbp-0x58]
   21501:	48 8d 45 b8          	lea    rax,[rbp-0x48]
   21505:	66 0f 6e c2          	movd   xmm0,edx
   21509:	48 89 c7             	mov    rdi,rax
   2150c:	e8 b5 49 00 00       	call   25ec6 <v3<float>::operator*(float)>
   21511:	66 48 0f 7e c0       	movq   rax,xmm0
   21516:	66 48 0f 7e ca       	movq   rdx,xmm1
   2151b:	48 89 45 dc          	mov    QWORD PTR [rbp-0x24],rax
   2151f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   21522:	83 e0 00             	and    eax,0x0
   21525:	09 d0                	or     eax,edx
   21527:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   2152a:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   2152e:	48 8d 50 0c          	lea    rdx,[rax+0xc]
   21532:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
   21535:	66 0f 6e c0          	movd   xmm0,eax
   21539:	48 89 d7             	mov    rdi,rdx
   2153c:	e8 85 49 00 00       	call   25ec6 <v3<float>::operator*(float)>
   21541:	66 48 0f 7e c0       	movq   rax,xmm0
   21546:	66 48 0f 7e ca       	movq   rdx,xmm1
   2154b:	48 89 45 c4          	mov    QWORD PTR [rbp-0x3c],rax
   2154f:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
   21552:	83 e0 00             	and    eax,0x0
   21555:	09 d0                	or     eax,edx
   21557:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
   2155a:	48 8b 5d 88          	mov    rbx,QWORD PTR [rbp-0x78]
   2155e:	48 8b 55 dc          	mov    rdx,QWORD PTR [rbp-0x24]
   21562:	66 0f 6e 4d e4       	movd   xmm1,DWORD PTR [rbp-0x1c]
   21567:	48 8d 45 c4          	lea    rax,[rbp-0x3c]
   2156b:	66 48 0f 6e c2       	movq   xmm0,rdx
   21570:	48 89 c7             	mov    rdi,rax
   21573:	e8 d0 49 00 00       	call   25f48 <v3<float>::operator+(v3<float>)>
   21578:	66 48 0f 7e c0       	movq   rax,xmm0
   2157d:	66 48 0f 7e ca       	movq   rdx,xmm1
   21582:	48 89 43 0c          	mov    QWORD PTR [rbx+0xc],rax
   21586:	8b 43 14             	mov    eax,DWORD PTR [rbx+0x14]
   21589:	83 e0 00             	and    eax,0x0
   2158c:	09 d0                	or     eax,edx
   2158e:	89 43 14             	mov    DWORD PTR [rbx+0x14],eax
   21591:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   21595:	48 83 c0 0c          	add    rax,0xc
   21599:	48 8b 5d 88          	mov    rbx,QWORD PTR [rbp-0x78]
   2159d:	48 89 c7             	mov    rdi,rax
   215a0:	e8 af 47 00 00       	call   25d54 <v3<float>::normalize()>
   215a5:	66 48 0f 7e c0       	movq   rax,xmm0
   215aa:	66 48 0f 7e ca       	movq   rdx,xmm1
   215af:	48 89 43 0c          	mov    QWORD PTR [rbx+0xc],rax
   215b3:	8b 43 14             	mov    eax,DWORD PTR [rbx+0x14]
   215b6:	83 e0 00             	and    eax,0x0
   215b9:	09 d0                	or     eax,edx
   215bb:	89 43 14             	mov    DWORD PTR [rbx+0x14],eax
   215be:	90                   	nop
   215bf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   215c3:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   215cc:	74 05                	je     215d3 <RotateCamera(Camera*, float, float)+0x2b6>
   215ce:	e8 0d 2f fe ff       	call   44e0 <__stack_chk_fail@plt>
   215d3:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   215d7:	c9                   	leave  
   215d8:	c3                   	ret    

00000000000215d9 <LookAt(v3<float>, v3<float>, v3<float>)>:
   215d9:	55                   	push   rbp
   215da:	48 89 e5             	mov    rbp,rsp
   215dd:	48 83 c4 80          	add    rsp,0xffffffffffffff80
   215e1:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   215e5:	66 48 0f 7e c0       	movq   rax,xmm0
   215ea:	66 48 0f 7e ce       	movq   rsi,xmm1
   215ef:	66 0f 6f ca          	movdqa xmm1,xmm2
   215f3:	66 48 0f 7e d9       	movq   rcx,xmm3
   215f8:	66 0f 6f c4          	movdqa xmm0,xmm4
   215fc:	66 48 0f 7e ea       	movq   rdx,xmm5
   21601:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
   21605:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
   21608:	83 e0 00             	and    eax,0x0
   2160b:	09 f0                	or     eax,esi
   2160d:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
   21610:	66 0f d6 4d 98       	movq   QWORD PTR [rbp-0x68],xmm1
   21615:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   21618:	83 e0 00             	and    eax,0x0
   2161b:	09 c8                	or     eax,ecx
   2161d:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
   21620:	66 0f d6 45 88       	movq   QWORD PTR [rbp-0x78],xmm0
   21625:	8b 45 90             	mov    eax,DWORD PTR [rbp-0x70]
   21628:	83 e0 00             	and    eax,0x0
   2162b:	09 d0                	or     eax,edx
   2162d:	89 45 90             	mov    DWORD PTR [rbp-0x70],eax
   21630:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   21639:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2163d:	31 c0                	xor    eax,eax
   2163f:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   21643:	66 0f 6e 4d b0       	movd   xmm1,DWORD PTR [rbp-0x50]
   21648:	48 8d 45 98          	lea    rax,[rbp-0x68]
   2164c:	66 48 0f 6e c2       	movq   xmm0,rdx
   21651:	48 89 c7             	mov    rdi,rax
   21654:	e8 91 49 00 00       	call   25fea <v3<float>::operator-(v3<float>)>
   21659:	66 48 0f 7e c0       	movq   rax,xmm0
   2165e:	66 48 0f 7e ca       	movq   rdx,xmm1
   21663:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   21667:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2166a:	83 e0 00             	and    eax,0x0
   2166d:	09 d0                	or     eax,edx
   2166f:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   21672:	48 8d 45 ec          	lea    rax,[rbp-0x14]
   21676:	48 89 c7             	mov    rdi,rax
   21679:	e8 d6 46 00 00       	call   25d54 <v3<float>::normalize()>
   2167e:	66 48 0f 7e c0       	movq   rax,xmm0
   21683:	66 48 0f 7e ca       	movq   rdx,xmm1
   21688:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   2168c:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   2168f:	83 e0 00             	and    eax,0x0
   21692:	09 d0                	or     eax,edx
   21694:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
   21697:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
   2169b:	66 0f 6e 45 90       	movd   xmm0,DWORD PTR [rbp-0x70]
   216a0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   216a4:	66 0f 6e 4d d0       	movd   xmm1,DWORD PTR [rbp-0x30]
   216a9:	66 48 0f 6e d2       	movq   xmm2,rdx
   216ae:	66 0f 6f d8          	movdqa xmm3,xmm0
   216b2:	66 48 0f 6e c0       	movq   xmm0,rax
   216b7:	e8 28 47 00 00       	call   25de4 <v3<float> cross<float>(v3<float>, v3<float>)>
   216bc:	66 48 0f 7e c0       	movq   rax,xmm0
   216c1:	66 48 0f 7e ca       	movq   rdx,xmm1
   216c6:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   216ca:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   216cd:	83 e0 00             	and    eax,0x0
   216d0:	09 d0                	or     eax,edx
   216d2:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   216d5:	48 8d 45 ec          	lea    rax,[rbp-0x14]
   216d9:	48 89 c7             	mov    rdi,rax
   216dc:	e8 73 46 00 00       	call   25d54 <v3<float>::normalize()>
   216e1:	66 48 0f 7e c0       	movq   rax,xmm0
   216e6:	66 48 0f 7e ca       	movq   rdx,xmm1
   216eb:	48 89 45 d4          	mov    QWORD PTR [rbp-0x2c],rax
   216ef:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   216f2:	83 e0 00             	and    eax,0x0
   216f5:	09 d0                	or     eax,edx
   216f7:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   216fa:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   216fe:	66 0f 6e 45 d0       	movd   xmm0,DWORD PTR [rbp-0x30]
   21703:	48 8b 45 d4          	mov    rax,QWORD PTR [rbp-0x2c]
   21707:	66 0f 6e 4d dc       	movd   xmm1,DWORD PTR [rbp-0x24]
   2170c:	66 48 0f 6e d2       	movq   xmm2,rdx
   21711:	66 0f 6f d8          	movdqa xmm3,xmm0
   21715:	66 48 0f 6e c0       	movq   xmm0,rax
   2171a:	e8 c5 46 00 00       	call   25de4 <v3<float> cross<float>(v3<float>, v3<float>)>
   2171f:	66 48 0f 7e c0       	movq   rax,xmm0
   21724:	66 48 0f 7e ca       	movq   rdx,xmm1
   21729:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2172d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   21730:	83 e0 00             	and    eax,0x0
   21733:	09 d0                	or     eax,edx
   21735:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   21738:	48 8d 45 ec          	lea    rax,[rbp-0x14]
   2173c:	48 89 c7             	mov    rdi,rax
   2173f:	e8 10 46 00 00       	call   25d54 <v3<float>::normalize()>
   21744:	66 48 0f 7e c0       	movq   rax,xmm0
   21749:	66 48 0f 7e ca       	movq   rdx,xmm1
   2174e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   21752:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   21755:	83 e0 00             	and    eax,0x0
   21758:	09 d0                	or     eax,edx
   2175a:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   2175d:	f3 0f 10 45 d4       	movss  xmm0,DWORD PTR [rbp-0x2c]
   21762:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   21766:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   2176a:	f3 0f 10 45 e0       	movss  xmm0,DWORD PTR [rbp-0x20]
   2176f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   21773:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   21778:	f3 0f 10 45 c8       	movss  xmm0,DWORD PTR [rbp-0x38]
   2177d:	f3 0f 10 0d db b2 01 00 	movss  xmm1,DWORD PTR [rip+0x1b2db]        # 3ca60 <NANO_SEC+0x1798>
   21785:	0f 57 c1             	xorps  xmm0,xmm1
   21788:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2178c:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   21791:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   21795:	66 0f ef c0          	pxor   xmm0,xmm0
   21799:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   2179e:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   217a3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   217a7:	f3 0f 11 40 10       	movss  DWORD PTR [rax+0x10],xmm0
   217ac:	f3 0f 10 45 e4       	movss  xmm0,DWORD PTR [rbp-0x1c]
   217b1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   217b5:	f3 0f 11 40 14       	movss  DWORD PTR [rax+0x14],xmm0
   217ba:	f3 0f 10 45 cc       	movss  xmm0,DWORD PTR [rbp-0x34]
   217bf:	f3 0f 10 0d 99 b2 01 00 	movss  xmm1,DWORD PTR [rip+0x1b299]        # 3ca60 <NANO_SEC+0x1798>
   217c7:	0f 57 c1             	xorps  xmm0,xmm1
   217ca:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   217ce:	f3 0f 11 40 18       	movss  DWORD PTR [rax+0x18],xmm0
   217d3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   217d7:	66 0f ef c0          	pxor   xmm0,xmm0
   217db:	f3 0f 11 40 1c       	movss  DWORD PTR [rax+0x1c],xmm0
   217e0:	f3 0f 10 45 dc       	movss  xmm0,DWORD PTR [rbp-0x24]
   217e5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   217e9:	f3 0f 11 40 20       	movss  DWORD PTR [rax+0x20],xmm0
   217ee:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   217f3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   217f7:	f3 0f 11 40 24       	movss  DWORD PTR [rax+0x24],xmm0
   217fc:	f3 0f 10 45 d0       	movss  xmm0,DWORD PTR [rbp-0x30]
   21801:	f3 0f 10 0d 57 b2 01 00 	movss  xmm1,DWORD PTR [rip+0x1b257]        # 3ca60 <NANO_SEC+0x1798>
   21809:	0f 57 c1             	xorps  xmm0,xmm1
   2180c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   21810:	f3 0f 11 40 28       	movss  DWORD PTR [rax+0x28],xmm0
   21815:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   21819:	66 0f ef c0          	pxor   xmm0,xmm0
   2181d:	f3 0f 11 40 2c       	movss  DWORD PTR [rax+0x2c],xmm0
   21822:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   21826:	66 0f 6e 45 b0       	movd   xmm0,DWORD PTR [rbp-0x50]
   2182b:	48 8b 45 d4          	mov    rax,QWORD PTR [rbp-0x2c]
   2182f:	66 0f 6e 4d dc       	movd   xmm1,DWORD PTR [rbp-0x24]
   21834:	66 48 0f 6e d2       	movq   xmm2,rdx
   21839:	66 0f 6f d8          	movdqa xmm3,xmm0
   2183d:	66 48 0f 6e c0       	movq   xmm0,rax
   21842:	e8 45 48 00 00       	call   2608c <float dot<float>(v3<float>, v3<float>)>
   21847:	66 0f 7e c0          	movd   eax,xmm0
   2184b:	f3 0f 10 05 0d b2 01 00 	movss  xmm0,DWORD PTR [rip+0x1b20d]        # 3ca60 <NANO_SEC+0x1798>
   21853:	66 0f 6e f0          	movd   xmm6,eax
   21857:	0f 57 f0             	xorps  xmm6,xmm0
   2185a:	0f 28 c6             	movaps xmm0,xmm6
   2185d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   21861:	f3 0f 11 40 30       	movss  DWORD PTR [rax+0x30],xmm0
   21866:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   2186a:	66 0f 6e 45 b0       	movd   xmm0,DWORD PTR [rbp-0x50]
   2186f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   21873:	66 0f 6e 4d e8       	movd   xmm1,DWORD PTR [rbp-0x18]
   21878:	66 48 0f 6e d2       	movq   xmm2,rdx
   2187d:	66 0f 6f d8          	movdqa xmm3,xmm0
   21881:	66 48 0f 6e c0       	movq   xmm0,rax
   21886:	e8 01 48 00 00       	call   2608c <float dot<float>(v3<float>, v3<float>)>
   2188b:	66 0f 7e c0          	movd   eax,xmm0
   2188f:	f3 0f 10 05 c9 b1 01 00 	movss  xmm0,DWORD PTR [rip+0x1b1c9]        # 3ca60 <NANO_SEC+0x1798>
   21897:	66 0f 6e f8          	movd   xmm7,eax
   2189b:	0f 57 f8             	xorps  xmm7,xmm0
   2189e:	0f 28 c7             	movaps xmm0,xmm7
   218a1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   218a5:	f3 0f 11 40 34       	movss  DWORD PTR [rax+0x34],xmm0
   218aa:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   218ae:	66 0f 6e 45 b0       	movd   xmm0,DWORD PTR [rbp-0x50]
   218b3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   218b7:	66 0f 6e 4d d0       	movd   xmm1,DWORD PTR [rbp-0x30]
   218bc:	66 48 0f 6e d2       	movq   xmm2,rdx
   218c1:	66 0f 6f d8          	movdqa xmm3,xmm0
   218c5:	66 48 0f 6e c0       	movq   xmm0,rax
   218ca:	e8 bd 47 00 00       	call   2608c <float dot<float>(v3<float>, v3<float>)>
   218cf:	66 0f 7e c0          	movd   eax,xmm0
   218d3:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   218d7:	89 42 38             	mov    DWORD PTR [rdx+0x38],eax
   218da:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   218de:	f3 0f 10 05 5e b1 01 00 	movss  xmm0,DWORD PTR [rip+0x1b15e]        # 3ca44 <NANO_SEC+0x177c>
   218e6:	f3 0f 11 40 3c       	movss  DWORD PTR [rax+0x3c],xmm0
   218eb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   218ef:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   218f8:	74 05                	je     218ff <LookAt(v3<float>, v3<float>, v3<float>)+0x326>
   218fa:	e8 e1 2b fe ff       	call   44e0 <__stack_chk_fail@plt>
   218ff:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   21903:	c9                   	leave  
   21904:	c3                   	ret    

0000000000021905 <PerspectiveMatrix_(float, float, float, float)>:
   21905:	55                   	push   rbp
   21906:	48 89 e5             	mov    rbp,rsp
   21909:	48 83 ec 40          	sub    rsp,0x40
   2190d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   21911:	f3 0f 11 45 d4       	movss  DWORD PTR [rbp-0x2c],xmm0
   21916:	f3 0f 11 4d d0       	movss  DWORD PTR [rbp-0x30],xmm1
   2191b:	f3 0f 11 55 cc       	movss  DWORD PTR [rbp-0x34],xmm2
   21920:	f3 0f 11 5d c8       	movss  DWORD PTR [rbp-0x38],xmm3
   21925:	66 0f ef c9          	pxor   xmm1,xmm1
   21929:	f3 0f 5a 4d d4       	cvtss2sd xmm1,DWORD PTR [rbp-0x2c]
   2192e:	f2 0f 10 05 42 b1 01 00 	movsd  xmm0,QWORD PTR [rip+0x1b142]        # 3ca78 <NANO_SEC+0x17b0>
   21936:	f2 0f 59 c8          	mulsd  xmm1,xmm0
   2193a:	66 48 0f 7e c8       	movq   rax,xmm1
   2193f:	66 48 0f 6e c0       	movq   xmm0,rax
   21944:	e8 b7 28 fe ff       	call   4200 <tan@plt>
   21949:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   2194d:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   21952:	f3 0f 10 45 d0       	movss  xmm0,DWORD PTR [rbp-0x30]
   21957:	0f 28 c8             	movaps xmm1,xmm0
   2195a:	f3 0f 59 4d ec       	mulss  xmm1,DWORD PTR [rbp-0x14]
   2195f:	f3 0f 10 05 dd b0 01 00 	movss  xmm0,DWORD PTR [rip+0x1b0dd]        # 3ca44 <NANO_SEC+0x177c>
   21967:	f3 0f 5e c1          	divss  xmm0,xmm1
   2196b:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   21970:	f3 0f 10 05 cc b0 01 00 	movss  xmm0,DWORD PTR [rip+0x1b0cc]        # 3ca44 <NANO_SEC+0x177c>
   21978:	f3 0f 5e 45 ec       	divss  xmm0,DWORD PTR [rbp-0x14]
   2197d:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   21982:	f3 0f 10 45 c8       	movss  xmm0,DWORD PTR [rbp-0x38]
   21987:	f3 0f 58 45 cc       	addss  xmm0,DWORD PTR [rbp-0x34]
   2198c:	f3 0f 10 0d cc b0 01 00 	movss  xmm1,DWORD PTR [rip+0x1b0cc]        # 3ca60 <NANO_SEC+0x1798>
   21994:	0f 57 c1             	xorps  xmm0,xmm1
   21997:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   2199c:	f3 0f 5c 4d cc       	subss  xmm1,DWORD PTR [rbp-0x34]
   219a1:	f3 0f 5e c1          	divss  xmm0,xmm1
   219a5:	f3 0f 11 45 f8       	movss  DWORD PTR [rbp-0x8],xmm0
   219aa:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   219af:	f3 0f 10 05 c9 b0 01 00 	movss  xmm0,DWORD PTR [rip+0x1b0c9]        # 3ca80 <NANO_SEC+0x17b8>
   219b7:	f3 0f 59 c1          	mulss  xmm0,xmm1
   219bb:	f3 0f 59 45 cc       	mulss  xmm0,DWORD PTR [rbp-0x34]
   219c0:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   219c5:	f3 0f 5c 4d cc       	subss  xmm1,DWORD PTR [rbp-0x34]
   219ca:	f3 0f 5e c1          	divss  xmm0,xmm1
   219ce:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   219d3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   219d7:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   219dc:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   219e0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   219e4:	66 0f ef c0          	pxor   xmm0,xmm0
   219e8:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   219ed:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   219f1:	66 0f ef c0          	pxor   xmm0,xmm0
   219f5:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   219fa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   219fe:	66 0f ef c0          	pxor   xmm0,xmm0
   21a02:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   21a07:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21a0b:	66 0f ef c0          	pxor   xmm0,xmm0
   21a0f:	f3 0f 11 40 10       	movss  DWORD PTR [rax+0x10],xmm0
   21a14:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21a18:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   21a1d:	f3 0f 11 40 14       	movss  DWORD PTR [rax+0x14],xmm0
   21a22:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21a26:	66 0f ef c0          	pxor   xmm0,xmm0
   21a2a:	f3 0f 11 40 18       	movss  DWORD PTR [rax+0x18],xmm0
   21a2f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21a33:	66 0f ef c0          	pxor   xmm0,xmm0
   21a37:	f3 0f 11 40 1c       	movss  DWORD PTR [rax+0x1c],xmm0
   21a3c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21a40:	66 0f ef c0          	pxor   xmm0,xmm0
   21a44:	f3 0f 11 40 20       	movss  DWORD PTR [rax+0x20],xmm0
   21a49:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21a4d:	66 0f ef c0          	pxor   xmm0,xmm0
   21a51:	f3 0f 11 40 24       	movss  DWORD PTR [rax+0x24],xmm0
   21a56:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21a5a:	f3 0f 10 45 f8       	movss  xmm0,DWORD PTR [rbp-0x8]
   21a5f:	f3 0f 11 40 28       	movss  DWORD PTR [rax+0x28],xmm0
   21a64:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21a68:	f3 0f 10 05 14 b0 01 00 	movss  xmm0,DWORD PTR [rip+0x1b014]        # 3ca84 <NANO_SEC+0x17bc>
   21a70:	f3 0f 11 40 2c       	movss  DWORD PTR [rax+0x2c],xmm0
   21a75:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21a79:	66 0f ef c0          	pxor   xmm0,xmm0
   21a7d:	f3 0f 11 40 30       	movss  DWORD PTR [rax+0x30],xmm0
   21a82:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21a86:	66 0f ef c0          	pxor   xmm0,xmm0
   21a8a:	f3 0f 11 40 34       	movss  DWORD PTR [rax+0x34],xmm0
   21a8f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21a93:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   21a98:	f3 0f 11 40 38       	movss  DWORD PTR [rax+0x38],xmm0
   21a9d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21aa1:	66 0f ef c0          	pxor   xmm0,xmm0
   21aa5:	f3 0f 11 40 3c       	movss  DWORD PTR [rax+0x3c],xmm0
   21aaa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   21aae:	c9                   	leave  
   21aaf:	c3                   	ret    

0000000000021ab0 <PrintglmMat(glm::mat<4, 4, float, (glm::qualifier)0>)>:
   21ab0:	55                   	push   rbp
   21ab1:	48 89 e5             	mov    rbp,rsp
   21ab4:	48 83 ec 10          	sub    rsp,0x10
   21ab8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   21abf:	eb 62                	jmp    21b23 <PrintglmMat(glm::mat<4, 4, float, (glm::qualifier)0>)+0x73>
   21ac1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   21ac4:	48 c1 e0 02          	shl    rax,0x2
   21ac8:	48 8d 40 10          	lea    rax,[rax+0x10]
   21acc:	48 01 e8             	add    rax,rbp
   21acf:	8b 00                	mov    eax,DWORD PTR [rax]
   21ad1:	66 0f 6e c0          	movd   xmm0,eax
   21ad5:	48 8d 05 64 8a 02 00 	lea    rax,[rip+0x28a64]        # 4a540 <std::cout@@GLIBCXX_3.4>
   21adc:	48 89 c7             	mov    rdi,rax
   21adf:	e8 0c 28 fe ff       	call   42f0 <std::ostream::operator<<(float)@plt>
   21ae4:	48 89 c2             	mov    rdx,rax
   21ae7:	48 8d 05 ee 97 01 00 	lea    rax,[rip+0x197ee]        # 3b2dc <NANO_SEC+0x14>
   21aee:	48 89 c6             	mov    rsi,rax
   21af1:	48 89 d7             	mov    rdi,rdx
   21af4:	e8 07 29 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   21af9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   21afc:	83 c0 01             	add    eax,0x1
   21aff:	83 e0 03             	and    eax,0x3
   21b02:	85 c0                	test   eax,eax
   21b04:	75 19                	jne    21b1f <PrintglmMat(glm::mat<4, 4, float, (glm::qualifier)0>)+0x6f>
   21b06:	48 8b 05 b3 84 02 00 	mov    rax,QWORD PTR [rip+0x284b3]        # 49fc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   21b0d:	48 89 c6             	mov    rsi,rax
   21b10:	48 8d 05 29 8a 02 00 	lea    rax,[rip+0x28a29]        # 4a540 <std::cout@@GLIBCXX_3.4>
   21b17:	48 89 c7             	mov    rdi,rax
   21b1a:	e8 41 29 fe ff       	call   4460 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   21b1f:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   21b23:	83 7d fc 0f          	cmp    DWORD PTR [rbp-0x4],0xf
   21b27:	76 98                	jbe    21ac1 <PrintglmMat(glm::mat<4, 4, float, (glm::qualifier)0>)+0x11>
   21b29:	90                   	nop
   21b2a:	90                   	nop
   21b2b:	c9                   	leave  
   21b2c:	c3                   	ret    

0000000000021b2d <PrintMat4(Mat4<float>)>:
   21b2d:	55                   	push   rbp
   21b2e:	48 89 e5             	mov    rbp,rsp
   21b31:	48 83 ec 10          	sub    rsp,0x10
   21b35:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
   21b3c:	eb 62                	jmp    21ba0 <PrintMat4(Mat4<float>)+0x73>
   21b3e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   21b41:	48 c1 e0 02          	shl    rax,0x2
   21b45:	48 8d 40 10          	lea    rax,[rax+0x10]
   21b49:	48 01 e8             	add    rax,rbp
   21b4c:	8b 00                	mov    eax,DWORD PTR [rax]
   21b4e:	66 0f 6e c0          	movd   xmm0,eax
   21b52:	48 8d 05 e7 89 02 00 	lea    rax,[rip+0x289e7]        # 4a540 <std::cout@@GLIBCXX_3.4>
   21b59:	48 89 c7             	mov    rdi,rax
   21b5c:	e8 8f 27 fe ff       	call   42f0 <std::ostream::operator<<(float)@plt>
   21b61:	48 89 c2             	mov    rdx,rax
   21b64:	48 8d 05 71 97 01 00 	lea    rax,[rip+0x19771]        # 3b2dc <NANO_SEC+0x14>
   21b6b:	48 89 c6             	mov    rsi,rax
   21b6e:	48 89 d7             	mov    rdi,rdx
   21b71:	e8 8a 28 fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   21b76:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   21b79:	83 c0 01             	add    eax,0x1
   21b7c:	83 e0 03             	and    eax,0x3
   21b7f:	85 c0                	test   eax,eax
   21b81:	75 19                	jne    21b9c <PrintMat4(Mat4<float>)+0x6f>
   21b83:	48 8b 05 36 84 02 00 	mov    rax,QWORD PTR [rip+0x28436]        # 49fc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   21b8a:	48 89 c6             	mov    rsi,rax
   21b8d:	48 8d 05 ac 89 02 00 	lea    rax,[rip+0x289ac]        # 4a540 <std::cout@@GLIBCXX_3.4>
   21b94:	48 89 c7             	mov    rdi,rax
   21b97:	e8 c4 28 fe ff       	call   4460 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   21b9c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
   21ba0:	83 7d fc 0f          	cmp    DWORD PTR [rbp-0x4],0xf
   21ba4:	76 98                	jbe    21b3e <PrintMat4(Mat4<float>)+0x11>
   21ba6:	90                   	nop
   21ba7:	90                   	nop
   21ba8:	c9                   	leave  
   21ba9:	c3                   	ret    

0000000000021baa <RendererAllocate(void*, unsigned int)>:
   21baa:	55                   	push   rbp
   21bab:	48 89 e5             	mov    rbp,rsp
   21bae:	48 83 ec 10          	sub    rsp,0x10
   21bb2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   21bb6:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   21bb9:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   21bbc:	48 89 c7             	mov    rdi,rax
   21bbf:	e8 0c 2a fe ff       	call   45d0 <malloc@plt>
   21bc4:	c9                   	leave  
   21bc5:	c3                   	ret    

0000000000021bc6 <RendererAlignedAllocate(void*, unsigned int, unsigned int)>:
   21bc6:	55                   	push   rbp
   21bc7:	48 89 e5             	mov    rbp,rsp
   21bca:	48 83 ec 10          	sub    rsp,0x10
   21bce:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   21bd2:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   21bd5:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
   21bd8:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   21bdb:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   21bde:	48 89 d6             	mov    rsi,rdx
   21be1:	48 89 c7             	mov    rdi,rax
   21be4:	e8 e7 26 fe ff       	call   42d0 <aligned_alloc@plt>
   21be9:	c9                   	leave  
   21bea:	c3                   	ret    

0000000000021beb <RendererFree(void*, void*)>:
   21beb:	55                   	push   rbp
   21bec:	48 89 e5             	mov    rbp,rsp
   21bef:	48 83 ec 10          	sub    rsp,0x10
   21bf3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   21bf7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   21bfb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   21bff:	48 89 c7             	mov    rdi,rax
   21c02:	e8 29 29 fe ff       	call   4530 <free@plt>
   21c07:	90                   	nop
   21c08:	c9                   	leave  
   21c09:	c3                   	ret    

0000000000021c0a <OnResize(void*, unsigned int, unsigned int)>:
   21c0a:	55                   	push   rbp
   21c0b:	48 89 e5             	mov    rbp,rsp
   21c0e:	48 83 ec 20          	sub    rsp,0x20
   21c12:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   21c16:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   21c19:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
   21c1c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   21c20:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   21c24:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21c28:	4c 8b 48 50          	mov    r9,QWORD PTR [rax+0x50]
   21c2c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21c30:	48 8b 00             	mov    rax,QWORD PTR [rax]
   21c33:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
   21c36:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   21c39:	41 89 c8             	mov    r8d,ecx
   21c3c:	89 d1                	mov    ecx,edx
   21c3e:	ba 00 00 00 00       	mov    edx,0x0
   21c43:	be 00 00 00 00       	mov    esi,0x0
   21c48:	48 89 c7             	mov    rdi,rax
   21c4b:	41 ff d1             	call   r9
   21c4e:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   21c51:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21c55:	89 90 34 01 00 00    	mov    DWORD PTR [rax+0x134],edx
   21c5b:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
   21c5e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21c62:	89 90 30 01 00 00    	mov    DWORD PTR [rax+0x130],edx
   21c68:	90                   	nop
   21c69:	c9                   	leave  
   21c6a:	c3                   	ret    

0000000000021c6b <OnClose(void*)>:
   21c6b:	55                   	push   rbp
   21c6c:	48 89 e5             	mov    rbp,rsp
   21c6f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   21c73:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21c77:	c6 80 b0 01 00 00 00 	mov    BYTE PTR [rax+0x1b0],0x0
   21c7e:	90                   	nop
   21c7f:	5d                   	pop    rbp
   21c80:	c3                   	ret    

0000000000021c81 <W(void*)>:
   21c81:	55                   	push   rbp
   21c82:	48 89 e5             	mov    rbp,rsp
   21c85:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   21c89:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21c8d:	0f b6 80 ac 01 00 00 	movzx  eax,BYTE PTR [rax+0x1ac]
   21c94:	83 c8 01             	or     eax,0x1
   21c97:	89 c2                	mov    edx,eax
   21c99:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21c9d:	88 90 ac 01 00 00    	mov    BYTE PTR [rax+0x1ac],dl
   21ca3:	90                   	nop
   21ca4:	5d                   	pop    rbp
   21ca5:	c3                   	ret    

0000000000021ca6 <A(void*)>:
   21ca6:	55                   	push   rbp
   21ca7:	48 89 e5             	mov    rbp,rsp
   21caa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   21cae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21cb2:	0f b6 80 ac 01 00 00 	movzx  eax,BYTE PTR [rax+0x1ac]
   21cb9:	83 c8 02             	or     eax,0x2
   21cbc:	89 c2                	mov    edx,eax
   21cbe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21cc2:	88 90 ac 01 00 00    	mov    BYTE PTR [rax+0x1ac],dl
   21cc8:	90                   	nop
   21cc9:	5d                   	pop    rbp
   21cca:	c3                   	ret    

0000000000021ccb <S(void*)>:
   21ccb:	55                   	push   rbp
   21ccc:	48 89 e5             	mov    rbp,rsp
   21ccf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   21cd3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21cd7:	0f b6 80 ac 01 00 00 	movzx  eax,BYTE PTR [rax+0x1ac]
   21cde:	83 c8 04             	or     eax,0x4
   21ce1:	89 c2                	mov    edx,eax
   21ce3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21ce7:	88 90 ac 01 00 00    	mov    BYTE PTR [rax+0x1ac],dl
   21ced:	90                   	nop
   21cee:	5d                   	pop    rbp
   21cef:	c3                   	ret    

0000000000021cf0 <D(void*)>:
   21cf0:	55                   	push   rbp
   21cf1:	48 89 e5             	mov    rbp,rsp
   21cf4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   21cf8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21cfc:	0f b6 80 ac 01 00 00 	movzx  eax,BYTE PTR [rax+0x1ac]
   21d03:	83 c8 08             	or     eax,0x8
   21d06:	89 c2                	mov    edx,eax
   21d08:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21d0c:	88 90 ac 01 00 00    	mov    BYTE PTR [rax+0x1ac],dl
   21d12:	90                   	nop
   21d13:	5d                   	pop    rbp
   21d14:	c3                   	ret    

0000000000021d15 <Space(void*)>:
   21d15:	55                   	push   rbp
   21d16:	48 89 e5             	mov    rbp,rsp
   21d19:	53                   	push   rbx
   21d1a:	48 83 ec 38          	sub    rsp,0x38
   21d1e:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   21d22:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   21d2b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   21d2f:	31 c0                	xor    eax,eax
   21d31:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21d35:	f3 0f 10 88 8c 01 00 00 	movss  xmm1,DWORD PTR [rax+0x18c]
   21d3d:	f3 0f 10 05 43 ad 01 00 	movss  xmm0,DWORD PTR [rip+0x1ad43]        # 3ca88 <NANO_SEC+0x17c0>
   21d45:	0f 2f c1             	comiss xmm0,xmm1
   21d48:	73 02                	jae    21d4c <Space(void*)+0x37>
   21d4a:	eb 77                	jmp    21dc3 <Space(void*)+0xae>
   21d4c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21d50:	48 8b 90 a0 01 00 00 	mov    rdx,QWORD PTR [rax+0x1a0]
   21d57:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
   21d5b:	8b 80 a8 01 00 00    	mov    eax,DWORD PTR [rax+0x1a8]
   21d61:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   21d64:	66 0f ef c0          	pxor   xmm0,xmm0
   21d68:	f3 0f 11 45 dc       	movss  DWORD PTR [rbp-0x24],xmm0
   21d6d:	f3 0f 10 05 17 ad 01 00 	movss  xmm0,DWORD PTR [rip+0x1ad17]        # 3ca8c <NANO_SEC+0x17c4>
   21d75:	f3 0f 11 45 e0       	movss  DWORD PTR [rbp-0x20],xmm0
   21d7a:	66 0f ef c0          	pxor   xmm0,xmm0
   21d7e:	f3 0f 11 45 e4       	movss  DWORD PTR [rbp-0x1c],xmm0
   21d83:	48 8b 5d c8          	mov    rbx,QWORD PTR [rbp-0x38]
   21d87:	48 8b 55 dc          	mov    rdx,QWORD PTR [rbp-0x24]
   21d8b:	66 0f 6e 4d e4       	movd   xmm1,DWORD PTR [rbp-0x1c]
   21d90:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   21d94:	66 48 0f 6e c2       	movq   xmm0,rdx
   21d99:	48 89 c7             	mov    rdi,rax
   21d9c:	e8 a7 41 00 00       	call   25f48 <v3<float>::operator+(v3<float>)>
   21da1:	66 48 0f 7e c0       	movq   rax,xmm0
   21da6:	66 48 0f 7e ca       	movq   rdx,xmm1
   21dab:	48 89 83 a0 01 00 00 	mov    QWORD PTR [rbx+0x1a0],rax
   21db2:	8b 83 a8 01 00 00    	mov    eax,DWORD PTR [rbx+0x1a8]
   21db8:	83 e0 00             	and    eax,0x0
   21dbb:	09 d0                	or     eax,edx
   21dbd:	89 83 a8 01 00 00    	mov    DWORD PTR [rbx+0x1a8],eax
   21dc3:	90                   	nop
   21dc4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   21dc8:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   21dd1:	74 05                	je     21dd8 <Space(void*)+0xc3>
   21dd3:	e8 08 27 fe ff       	call   44e0 <__stack_chk_fail@plt>
   21dd8:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   21ddc:	c9                   	leave  
   21ddd:	c3                   	ret    

0000000000021dde <Shift(void*)>:
   21dde:	55                   	push   rbp
   21ddf:	48 89 e5             	mov    rbp,rsp
   21de2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   21de6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21dea:	0f b6 80 ac 01 00 00 	movzx  eax,BYTE PTR [rax+0x1ac]
   21df1:	83 c8 20             	or     eax,0x20
   21df4:	89 c2                	mov    edx,eax
   21df6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21dfa:	88 90 ac 01 00 00    	mov    BYTE PTR [rax+0x1ac],dl
   21e00:	90                   	nop
   21e01:	5d                   	pop    rbp
   21e02:	c3                   	ret    

0000000000021e03 <MousePosCallBack(void*, double, double)>:
   21e03:	55                   	push   rbp
   21e04:	48 89 e5             	mov    rbp,rsp
   21e07:	48 83 ec 30          	sub    rsp,0x30
   21e0b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   21e0f:	f2 0f 11 45 e0       	movsd  QWORD PTR [rbp-0x20],xmm0
   21e14:	f2 0f 11 4d d8       	movsd  QWORD PTR [rbp-0x28],xmm1
   21e19:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   21e1d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   21e21:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21e25:	8b 80 34 01 00 00    	mov    eax,DWORD PTR [rax+0x134]
   21e2b:	66 0f ef c9          	pxor   xmm1,xmm1
   21e2f:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   21e33:	f3 0f 10 05 11 ac 01 00 	movss  xmm0,DWORD PTR [rip+0x1ac11]        # 3ca4c <NANO_SEC+0x1784>
   21e3b:	f3 0f 59 c1          	mulss  xmm0,xmm1
   21e3f:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
   21e43:	f2 0f 5c 45 d8       	subsd  xmm0,QWORD PTR [rbp-0x28]
   21e48:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   21e4c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21e50:	8b 80 34 01 00 00    	mov    eax,DWORD PTR [rax+0x134]
   21e56:	66 0f ef d2          	pxor   xmm2,xmm2
   21e5a:	f3 0f 2a d0          	cvtsi2ss xmm2,eax
   21e5e:	f3 0f 10 0d e6 ab 01 00 	movss  xmm1,DWORD PTR [rip+0x1abe6]        # 3ca4c <NANO_SEC+0x1784>
   21e66:	f3 0f 59 ca          	mulss  xmm1,xmm2
   21e6a:	f3 0f 5e c1          	divss  xmm0,xmm1
   21e6e:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   21e73:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21e77:	8b 80 30 01 00 00    	mov    eax,DWORD PTR [rax+0x130]
   21e7d:	66 0f ef c9          	pxor   xmm1,xmm1
   21e81:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
   21e85:	f3 0f 10 05 bf ab 01 00 	movss  xmm0,DWORD PTR [rip+0x1abbf]        # 3ca4c <NANO_SEC+0x1784>
   21e8d:	f3 0f 59 c1          	mulss  xmm0,xmm1
   21e91:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
   21e95:	f2 0f 5c 45 e0       	subsd  xmm0,QWORD PTR [rbp-0x20]
   21e9a:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   21e9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21ea2:	8b 80 30 01 00 00    	mov    eax,DWORD PTR [rax+0x130]
   21ea8:	66 0f ef d2          	pxor   xmm2,xmm2
   21eac:	f3 0f 2a d0          	cvtsi2ss xmm2,eax
   21eb0:	f3 0f 10 0d 94 ab 01 00 	movss  xmm1,DWORD PTR [rip+0x1ab94]        # 3ca4c <NANO_SEC+0x1784>
   21eb8:	f3 0f 59 ca          	mulss  xmm1,xmm2
   21ebc:	f3 0f 5e c1          	divss  xmm0,xmm1
   21ec0:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   21ec5:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   21eca:	f3 0f 10 0d 8e ab 01 00 	movss  xmm1,DWORD PTR [rip+0x1ab8e]        # 3ca60 <NANO_SEC+0x1798>
   21ed2:	0f 57 c1             	xorps  xmm0,xmm1
   21ed5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21ed9:	48 8d 90 88 01 00 00 	lea    rdx,[rax+0x188]
   21ee0:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   21ee3:	0f 28 c8             	movaps xmm1,xmm0
   21ee6:	66 0f 6e c0          	movd   xmm0,eax
   21eea:	48 89 d7             	mov    rdi,rdx
   21eed:	e8 2b f4 ff ff       	call   2131d <RotateCamera(Camera*, float, float)>
   21ef2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21ef6:	48 8b 48 60          	mov    rcx,QWORD PTR [rax+0x60]
   21efa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21efe:	8b 80 34 01 00 00    	mov    eax,DWORD PTR [rax+0x134]
   21f04:	89 c2                	mov    edx,eax
   21f06:	c1 ea 1f             	shr    edx,0x1f
   21f09:	01 d0                	add    eax,edx
   21f0b:	d1 f8                	sar    eax,1
   21f0d:	66 0f ef c0          	pxor   xmm0,xmm0
   21f11:	f2 0f 2a c0          	cvtsi2sd xmm0,eax
   21f15:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21f19:	8b 80 30 01 00 00    	mov    eax,DWORD PTR [rax+0x130]
   21f1f:	89 c2                	mov    edx,eax
   21f21:	c1 ea 1f             	shr    edx,0x1f
   21f24:	01 d0                	add    eax,edx
   21f26:	d1 f8                	sar    eax,1
   21f28:	66 0f ef db          	pxor   xmm3,xmm3
   21f2c:	f2 0f 2a d8          	cvtsi2sd xmm3,eax
   21f30:	66 48 0f 7e da       	movq   rdx,xmm3
   21f35:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   21f39:	48 8b 00             	mov    rax,QWORD PTR [rax]
   21f3c:	66 0f 28 c8          	movapd xmm1,xmm0
   21f40:	66 48 0f 6e c2       	movq   xmm0,rdx
   21f45:	48 89 c7             	mov    rdi,rax
   21f48:	ff d1                	call   rcx
   21f4a:	90                   	nop
   21f4b:	c9                   	leave  
   21f4c:	c3                   	ret    

0000000000021f4d <MakeLinesFromAABB(AABB, Line*, glm::vec<3, float, (glm::qualifier)0>)>:
   21f4d:	55                   	push   rbp
   21f4e:	48 89 e5             	mov    rbp,rsp
   21f51:	53                   	push   rbx
   21f52:	48 83 ec 48          	sub    rsp,0x48
   21f56:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   21f5a:	66 48 0f 7e c0       	movq   rax,xmm0
   21f5f:	0f 28 c1             	movaps xmm0,xmm1
   21f62:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   21f66:	f3 0f 11 45 c0       	movss  DWORD PTR [rbp-0x40],xmm0
   21f6b:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   21f74:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   21f78:	31 c0                	xor    eax,eax
   21f7a:	48 8d 45 1c          	lea    rax,[rbp+0x1c]
   21f7e:	48 8d 75 10          	lea    rsi,[rbp+0x10]
   21f82:	48 89 c7             	mov    rdi,rax
   21f85:	e8 18 35 00 00       	call   254a2 <glm::vec<3, float, (glm::qualifier)0> glm::operator-<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21f8a:	66 48 0f 7e c0       	movq   rax,xmm0
   21f8f:	0f 28 c1             	movaps xmm0,xmm1
   21f92:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   21f96:	f3 0f 11 45 d8       	movss  DWORD PTR [rbp-0x28],xmm0
   21f9b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21f9f:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
   21fa3:	48 89 10             	mov    QWORD PTR [rax],rdx
   21fa6:	8b 55 18             	mov    edx,DWORD PTR [rbp+0x18]
   21fa9:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   21fac:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
   21faf:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21fb3:	ba 00 00 00 00       	mov    edx,0x0
   21fb8:	be 00 00 00 00       	mov    esi,0x0
   21fbd:	66 0f 6e c1          	movd   xmm0,ecx
   21fc1:	48 89 c7             	mov    rdi,rax
   21fc4:	e8 2d 41 00 00       	call   260f6 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, int>(float, int, int)>
   21fc9:	48 8b 5d c8          	mov    rbx,QWORD PTR [rbp-0x38]
   21fcd:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   21fd1:	48 89 c6             	mov    rsi,rax
   21fd4:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   21fd8:	e8 60 41 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   21fdd:	66 48 0f 7e c0       	movq   rax,xmm0
   21fe2:	0f 28 c1             	movaps xmm0,xmm1
   21fe5:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   21fe9:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   21fee:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   21ff2:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   21ff6:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   21ffa:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   21ffd:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   22000:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22004:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   22008:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   2200c:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   2200f:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   22012:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
   22015:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22019:	ba 00 00 00 00       	mov    edx,0x0
   2201e:	be 00 00 00 00       	mov    esi,0x0
   22023:	66 0f 6e c1          	movd   xmm0,ecx
   22027:	48 89 c7             	mov    rdi,rax
   2202a:	e8 c7 40 00 00       	call   260f6 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, int>(float, int, int)>
   2202f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22033:	48 8d 58 30          	lea    rbx,[rax+0x30]
   22037:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   2203b:	48 89 c6             	mov    rsi,rax
   2203e:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   22042:	e8 f6 40 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   22047:	66 48 0f 7e c0       	movq   rax,xmm0
   2204c:	0f 28 c1             	movaps xmm0,xmm1
   2204f:	48 89 03             	mov    QWORD PTR [rbx],rax
   22052:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   22057:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   2205c:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   2205f:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22063:	0f 28 c8             	movaps xmm1,xmm0
   22066:	be 00 00 00 00       	mov    esi,0x0
   2206b:	66 0f 6e c2          	movd   xmm0,edx
   2206f:	48 89 c7             	mov    rdi,rax
   22072:	e8 7b 41 00 00       	call   261f2 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, float>(float, int, float)>
   22077:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2207b:	48 8d 58 30          	lea    rbx,[rax+0x30]
   2207f:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22083:	48 89 c6             	mov    rsi,rax
   22086:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   2208a:	e8 ae 40 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   2208f:	66 48 0f 7e c0       	movq   rax,xmm0
   22094:	0f 28 c1             	movaps xmm0,xmm1
   22097:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   2209b:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   220a0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   220a4:	48 83 c0 30          	add    rax,0x30
   220a8:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   220ac:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   220b0:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   220b3:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   220b6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   220ba:	48 83 c0 30          	add    rax,0x30
   220be:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   220c2:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   220c6:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   220c9:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   220cc:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   220d1:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   220d4:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   220d8:	0f 28 c8             	movaps xmm1,xmm0
   220db:	be 00 00 00 00       	mov    esi,0x0
   220e0:	66 0f 6e c2          	movd   xmm0,edx
   220e4:	48 89 c7             	mov    rdi,rax
   220e7:	e8 06 41 00 00       	call   261f2 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, float>(float, int, float)>
   220ec:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   220f0:	48 8d 58 60          	lea    rbx,[rax+0x60]
   220f4:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   220f8:	48 89 c6             	mov    rsi,rax
   220fb:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   220ff:	e8 39 40 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   22104:	66 48 0f 7e c0       	movq   rax,xmm0
   22109:	0f 28 c1             	movaps xmm0,xmm1
   2210c:	48 89 03             	mov    QWORD PTR [rbx],rax
   2210f:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   22114:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   22117:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   2211b:	66 0f 6e c2          	movd   xmm0,edx
   2211f:	ba 00 00 00 00       	mov    edx,0x0
   22124:	be 00 00 00 00       	mov    esi,0x0
   22129:	48 89 c7             	mov    rdi,rax
   2212c:	e8 07 41 00 00       	call   26238 <glm::vec<3, float, (glm::qualifier)0>::vec<int, int, float>(int, int, float)>
   22131:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22135:	48 8d 58 60          	lea    rbx,[rax+0x60]
   22139:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   2213d:	48 89 c6             	mov    rsi,rax
   22140:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   22144:	e8 f4 3f 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   22149:	66 48 0f 7e c0       	movq   rax,xmm0
   2214e:	0f 28 c1             	movaps xmm0,xmm1
   22151:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   22155:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   2215a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2215e:	48 83 c0 60          	add    rax,0x60
   22162:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   22166:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   2216a:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   2216d:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   22170:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22174:	48 83 c0 60          	add    rax,0x60
   22178:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   2217c:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   22180:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   22183:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   22186:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   22189:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   2218d:	66 0f 6e c2          	movd   xmm0,edx
   22191:	ba 00 00 00 00       	mov    edx,0x0
   22196:	be 00 00 00 00       	mov    esi,0x0
   2219b:	48 89 c7             	mov    rdi,rax
   2219e:	e8 95 40 00 00       	call   26238 <glm::vec<3, float, (glm::qualifier)0>::vec<int, int, float>(int, int, float)>
   221a3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   221a7:	48 8d 98 90 00 00 00 	lea    rbx,[rax+0x90]
   221ae:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   221b2:	48 89 c6             	mov    rsi,rax
   221b5:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   221b9:	e8 7f 3f 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   221be:	66 48 0f 7e c0       	movq   rax,xmm0
   221c3:	0f 28 c1             	movaps xmm0,xmm1
   221c6:	48 89 03             	mov    QWORD PTR [rbx],rax
   221c9:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   221ce:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   221d2:	48 05 90 00 00 00    	add    rax,0x90
   221d8:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
   221dc:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
   221e0:	8b 55 18             	mov    edx,DWORD PTR [rbp+0x18]
   221e3:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   221e6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   221ea:	48 05 90 00 00 00    	add    rax,0x90
   221f0:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   221f4:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   221f8:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   221fb:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   221fe:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22202:	48 05 90 00 00 00    	add    rax,0x90
   22208:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   2220c:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   22210:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   22213:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   22216:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
   22219:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   2221d:	ba 00 00 00 00       	mov    edx,0x0
   22222:	66 0f 6e c1          	movd   xmm0,ecx
   22226:	be 00 00 00 00       	mov    esi,0x0
   2222b:	48 89 c7             	mov    rdi,rax
   2222e:	e8 4d 40 00 00       	call   26280 <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, int>(int, float, int)>
   22233:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22237:	48 8d 98 c0 00 00 00 	lea    rbx,[rax+0xc0]
   2223e:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22242:	48 89 c6             	mov    rsi,rax
   22245:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   22249:	e8 ef 3e 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   2224e:	66 48 0f 7e c0       	movq   rax,xmm0
   22253:	0f 28 c1             	movaps xmm0,xmm1
   22256:	48 89 03             	mov    QWORD PTR [rbx],rax
   22259:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   2225e:	f3 0f 10 45 d4       	movss  xmm0,DWORD PTR [rbp-0x2c]
   22263:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   22266:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   2226a:	be 00 00 00 00       	mov    esi,0x0
   2226f:	0f 28 c8             	movaps xmm1,xmm0
   22272:	66 0f 6e c2          	movd   xmm0,edx
   22276:	48 89 c7             	mov    rdi,rax
   22279:	e8 4a 40 00 00       	call   262c8 <glm::vec<3, float, (glm::qualifier)0>::vec<float, float, int>(float, float, int)>
   2227e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22282:	48 8d 98 c0 00 00 00 	lea    rbx,[rax+0xc0]
   22289:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   2228d:	48 89 c6             	mov    rsi,rax
   22290:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   22294:	e8 a4 3e 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   22299:	66 48 0f 7e c0       	movq   rax,xmm0
   2229e:	0f 28 c1             	movaps xmm0,xmm1
   222a1:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   222a5:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   222aa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   222ae:	48 05 c0 00 00 00    	add    rax,0xc0
   222b4:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   222b8:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   222bc:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   222bf:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   222c2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   222c6:	48 05 c0 00 00 00    	add    rax,0xc0
   222cc:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   222d0:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   222d4:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   222d7:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   222da:	f3 0f 10 45 d4       	movss  xmm0,DWORD PTR [rbp-0x2c]
   222df:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   222e2:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   222e6:	be 00 00 00 00       	mov    esi,0x0
   222eb:	0f 28 c8             	movaps xmm1,xmm0
   222ee:	66 0f 6e c2          	movd   xmm0,edx
   222f2:	48 89 c7             	mov    rdi,rax
   222f5:	e8 ce 3f 00 00       	call   262c8 <glm::vec<3, float, (glm::qualifier)0>::vec<float, float, int>(float, float, int)>
   222fa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   222fe:	48 8d 98 f0 00 00 00 	lea    rbx,[rax+0xf0]
   22305:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22309:	48 89 c6             	mov    rsi,rax
   2230c:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   22310:	e8 28 3e 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   22315:	66 48 0f 7e c0       	movq   rax,xmm0
   2231a:	0f 28 c1             	movaps xmm0,xmm1
   2231d:	48 89 03             	mov    QWORD PTR [rbx],rax
   22320:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   22325:	f3 0f 10 4d d8       	movss  xmm1,DWORD PTR [rbp-0x28]
   2232a:	f3 0f 10 45 d4       	movss  xmm0,DWORD PTR [rbp-0x2c]
   2232f:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   22332:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22336:	0f 28 d1             	movaps xmm2,xmm1
   22339:	0f 28 c8             	movaps xmm1,xmm0
   2233c:	66 0f 6e c2          	movd   xmm0,edx
   22340:	48 89 c7             	mov    rdi,rax
   22343:	e8 0e 32 00 00       	call   25556 <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   22348:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2234c:	48 8d 98 f0 00 00 00 	lea    rbx,[rax+0xf0]
   22353:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22357:	48 89 c6             	mov    rsi,rax
   2235a:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   2235e:	e8 da 3d 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   22363:	66 48 0f 7e c0       	movq   rax,xmm0
   22368:	0f 28 c1             	movaps xmm0,xmm1
   2236b:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   2236f:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   22374:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22378:	48 05 f0 00 00 00    	add    rax,0xf0
   2237e:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   22382:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   22386:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   22389:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   2238c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22390:	48 05 f0 00 00 00    	add    rax,0xf0
   22396:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   2239a:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   2239e:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   223a1:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   223a4:	f3 0f 10 4d d8       	movss  xmm1,DWORD PTR [rbp-0x28]
   223a9:	f3 0f 10 45 d4       	movss  xmm0,DWORD PTR [rbp-0x2c]
   223ae:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   223b1:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   223b5:	0f 28 d1             	movaps xmm2,xmm1
   223b8:	0f 28 c8             	movaps xmm1,xmm0
   223bb:	66 0f 6e c2          	movd   xmm0,edx
   223bf:	48 89 c7             	mov    rdi,rax
   223c2:	e8 8f 31 00 00       	call   25556 <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   223c7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   223cb:	48 8d 98 20 01 00 00 	lea    rbx,[rax+0x120]
   223d2:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   223d6:	48 89 c6             	mov    rsi,rax
   223d9:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   223dd:	e8 5b 3d 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   223e2:	66 48 0f 7e c0       	movq   rax,xmm0
   223e7:	0f 28 c1             	movaps xmm0,xmm1
   223ea:	48 89 03             	mov    QWORD PTR [rbx],rax
   223ed:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   223f2:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   223f7:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   223fa:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   223fe:	0f 28 c8             	movaps xmm1,xmm0
   22401:	66 0f 6e c2          	movd   xmm0,edx
   22405:	be 00 00 00 00       	mov    esi,0x0
   2240a:	48 89 c7             	mov    rdi,rax
   2240d:	e8 fc 3e 00 00       	call   2630e <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, float>(int, float, float)>
   22412:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22416:	48 8d 98 20 01 00 00 	lea    rbx,[rax+0x120]
   2241d:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22421:	48 89 c6             	mov    rsi,rax
   22424:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   22428:	e8 10 3d 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   2242d:	66 48 0f 7e c0       	movq   rax,xmm0
   22432:	0f 28 c1             	movaps xmm0,xmm1
   22435:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   22439:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   2243e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22442:	48 05 20 01 00 00    	add    rax,0x120
   22448:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   2244c:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   22450:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   22453:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   22456:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2245a:	48 05 20 01 00 00    	add    rax,0x120
   22460:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   22464:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   22468:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   2246b:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   2246e:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   22473:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   22476:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   2247a:	0f 28 c8             	movaps xmm1,xmm0
   2247d:	66 0f 6e c2          	movd   xmm0,edx
   22481:	be 00 00 00 00       	mov    esi,0x0
   22486:	48 89 c7             	mov    rdi,rax
   22489:	e8 80 3e 00 00       	call   2630e <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, float>(int, float, float)>
   2248e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22492:	48 8d 98 50 01 00 00 	lea    rbx,[rax+0x150]
   22499:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   2249d:	48 89 c6             	mov    rsi,rax
   224a0:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   224a4:	e8 94 3c 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   224a9:	66 48 0f 7e c0       	movq   rax,xmm0
   224ae:	0f 28 c1             	movaps xmm0,xmm1
   224b1:	48 89 03             	mov    QWORD PTR [rbx],rax
   224b4:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   224b9:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
   224bc:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   224c0:	ba 00 00 00 00       	mov    edx,0x0
   224c5:	66 0f 6e c1          	movd   xmm0,ecx
   224c9:	be 00 00 00 00       	mov    esi,0x0
   224ce:	48 89 c7             	mov    rdi,rax
   224d1:	e8 aa 3d 00 00       	call   26280 <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, int>(int, float, int)>
   224d6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   224da:	48 8d 98 50 01 00 00 	lea    rbx,[rax+0x150]
   224e1:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   224e5:	48 89 c6             	mov    rsi,rax
   224e8:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   224ec:	e8 4c 3c 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   224f1:	66 48 0f 7e c0       	movq   rax,xmm0
   224f6:	0f 28 c1             	movaps xmm0,xmm1
   224f9:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   224fd:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   22502:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22506:	48 05 50 01 00 00    	add    rax,0x150
   2250c:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   22510:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   22514:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   22517:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   2251a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2251e:	48 05 50 01 00 00    	add    rax,0x150
   22524:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   22528:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   2252c:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   2252f:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   22532:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22536:	48 05 80 01 00 00    	add    rax,0x180
   2253c:	48 8b 55 10          	mov    rdx,QWORD PTR [rbp+0x10]
   22540:	48 89 10             	mov    QWORD PTR [rax],rdx
   22543:	8b 55 18             	mov    edx,DWORD PTR [rbp+0x18]
   22546:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   22549:	8b 4d d4             	mov    ecx,DWORD PTR [rbp-0x2c]
   2254c:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22550:	ba 00 00 00 00       	mov    edx,0x0
   22555:	66 0f 6e c1          	movd   xmm0,ecx
   22559:	be 00 00 00 00       	mov    esi,0x0
   2255e:	48 89 c7             	mov    rdi,rax
   22561:	e8 1a 3d 00 00       	call   26280 <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, int>(int, float, int)>
   22566:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2256a:	48 8d 98 80 01 00 00 	lea    rbx,[rax+0x180]
   22571:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22575:	48 89 c6             	mov    rsi,rax
   22578:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   2257c:	e8 bc 3b 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   22581:	66 48 0f 7e c0       	movq   rax,xmm0
   22586:	0f 28 c1             	movaps xmm0,xmm1
   22589:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   2258d:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   22592:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22596:	48 05 80 01 00 00    	add    rax,0x180
   2259c:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   225a0:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   225a4:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   225a7:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   225aa:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   225ae:	48 05 80 01 00 00    	add    rax,0x180
   225b4:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   225b8:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   225bc:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   225bf:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   225c2:	8b 4d d0             	mov    ecx,DWORD PTR [rbp-0x30]
   225c5:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   225c9:	ba 00 00 00 00       	mov    edx,0x0
   225ce:	be 00 00 00 00       	mov    esi,0x0
   225d3:	66 0f 6e c1          	movd   xmm0,ecx
   225d7:	48 89 c7             	mov    rdi,rax
   225da:	e8 17 3b 00 00       	call   260f6 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, int>(float, int, int)>
   225df:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   225e3:	48 8d 98 b0 01 00 00 	lea    rbx,[rax+0x1b0]
   225ea:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   225ee:	48 89 c6             	mov    rsi,rax
   225f1:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   225f5:	e8 43 3b 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   225fa:	66 48 0f 7e c0       	movq   rax,xmm0
   225ff:	0f 28 c1             	movaps xmm0,xmm1
   22602:	48 89 03             	mov    QWORD PTR [rbx],rax
   22605:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   2260a:	f3 0f 10 45 d4       	movss  xmm0,DWORD PTR [rbp-0x2c]
   2260f:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   22612:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22616:	be 00 00 00 00       	mov    esi,0x0
   2261b:	0f 28 c8             	movaps xmm1,xmm0
   2261e:	66 0f 6e c2          	movd   xmm0,edx
   22622:	48 89 c7             	mov    rdi,rax
   22625:	e8 9e 3c 00 00       	call   262c8 <glm::vec<3, float, (glm::qualifier)0>::vec<float, float, int>(float, float, int)>
   2262a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2262e:	48 8d 98 b0 01 00 00 	lea    rbx,[rax+0x1b0]
   22635:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22639:	48 89 c6             	mov    rsi,rax
   2263c:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   22640:	e8 f8 3a 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   22645:	66 48 0f 7e c0       	movq   rax,xmm0
   2264a:	0f 28 c1             	movaps xmm0,xmm1
   2264d:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   22651:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   22656:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2265a:	48 05 b0 01 00 00    	add    rax,0x1b0
   22660:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   22664:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   22668:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   2266b:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   2266e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22672:	48 05 b0 01 00 00    	add    rax,0x1b0
   22678:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   2267c:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   22680:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   22683:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   22686:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   2268b:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   2268e:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22692:	0f 28 c8             	movaps xmm1,xmm0
   22695:	be 00 00 00 00       	mov    esi,0x0
   2269a:	66 0f 6e c2          	movd   xmm0,edx
   2269e:	48 89 c7             	mov    rdi,rax
   226a1:	e8 4c 3b 00 00       	call   261f2 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, float>(float, int, float)>
   226a6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   226aa:	48 8d 98 e0 01 00 00 	lea    rbx,[rax+0x1e0]
   226b1:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   226b5:	48 89 c6             	mov    rsi,rax
   226b8:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   226bc:	e8 7c 3a 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   226c1:	66 48 0f 7e c0       	movq   rax,xmm0
   226c6:	0f 28 c1             	movaps xmm0,xmm1
   226c9:	48 89 03             	mov    QWORD PTR [rbx],rax
   226cc:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   226d1:	f3 0f 10 4d d8       	movss  xmm1,DWORD PTR [rbp-0x28]
   226d6:	f3 0f 10 45 d4       	movss  xmm0,DWORD PTR [rbp-0x2c]
   226db:	8b 55 d0             	mov    edx,DWORD PTR [rbp-0x30]
   226de:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   226e2:	0f 28 d1             	movaps xmm2,xmm1
   226e5:	0f 28 c8             	movaps xmm1,xmm0
   226e8:	66 0f 6e c2          	movd   xmm0,edx
   226ec:	48 89 c7             	mov    rdi,rax
   226ef:	e8 62 2e 00 00       	call   25556 <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   226f4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   226f8:	48 8d 98 e0 01 00 00 	lea    rbx,[rax+0x1e0]
   226ff:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22703:	48 89 c6             	mov    rsi,rax
   22706:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   2270a:	e8 2e 3a 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   2270f:	66 48 0f 7e c0       	movq   rax,xmm0
   22714:	0f 28 c1             	movaps xmm0,xmm1
   22717:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   2271b:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   22720:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22724:	48 05 e0 01 00 00    	add    rax,0x1e0
   2272a:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   2272e:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   22732:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   22735:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   22738:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2273c:	48 05 e0 01 00 00    	add    rax,0x1e0
   22742:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   22746:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   2274a:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   2274d:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   22750:	8b 55 d8             	mov    edx,DWORD PTR [rbp-0x28]
   22753:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   22757:	66 0f 6e c2          	movd   xmm0,edx
   2275b:	ba 00 00 00 00       	mov    edx,0x0
   22760:	be 00 00 00 00       	mov    esi,0x0
   22765:	48 89 c7             	mov    rdi,rax
   22768:	e8 cb 3a 00 00       	call   26238 <glm::vec<3, float, (glm::qualifier)0>::vec<int, int, float>(int, int, float)>
   2276d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22771:	48 8d 98 10 02 00 00 	lea    rbx,[rax+0x210]
   22778:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   2277c:	48 89 c6             	mov    rsi,rax
   2277f:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   22783:	e8 b5 39 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   22788:	66 48 0f 7e c0       	movq   rax,xmm0
   2278d:	0f 28 c1             	movaps xmm0,xmm1
   22790:	48 89 03             	mov    QWORD PTR [rbx],rax
   22793:	f3 0f 11 43 08       	movss  DWORD PTR [rbx+0x8],xmm0
   22798:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   2279d:	8b 55 d4             	mov    edx,DWORD PTR [rbp-0x2c]
   227a0:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   227a4:	0f 28 c8             	movaps xmm1,xmm0
   227a7:	66 0f 6e c2          	movd   xmm0,edx
   227ab:	be 00 00 00 00       	mov    esi,0x0
   227b0:	48 89 c7             	mov    rdi,rax
   227b3:	e8 56 3b 00 00       	call   2630e <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, float>(int, float, float)>
   227b8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   227bc:	48 8d 98 10 02 00 00 	lea    rbx,[rax+0x210]
   227c3:	48 8d 45 dc          	lea    rax,[rbp-0x24]
   227c7:	48 89 c6             	mov    rsi,rax
   227ca:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   227ce:	e8 6a 39 00 00       	call   2613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>
   227d3:	66 48 0f 7e c0       	movq   rax,xmm0
   227d8:	0f 28 c1             	movaps xmm0,xmm1
   227db:	48 89 43 18          	mov    QWORD PTR [rbx+0x18],rax
   227df:	f3 0f 11 43 20       	movss  DWORD PTR [rbx+0x20],xmm0
   227e4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   227e8:	48 05 10 02 00 00    	add    rax,0x210
   227ee:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   227f2:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   227f6:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   227f9:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   227fc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   22800:	48 05 10 02 00 00    	add    rax,0x210
   22806:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   2280a:	48 89 50 24          	mov    QWORD PTR [rax+0x24],rdx
   2280e:	8b 55 c0             	mov    edx,DWORD PTR [rbp-0x40]
   22811:	89 50 2c             	mov    DWORD PTR [rax+0x2c],edx
   22814:	90                   	nop
   22815:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   22819:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   22822:	74 05                	je     22829 <MakeLinesFromAABB(AABB, Line*, glm::vec<3, float, (glm::qualifier)0>)+0x8dc>
   22824:	e8 b7 1c fe ff       	call   44e0 <__stack_chk_fail@plt>
   22829:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2282d:	c9                   	leave  
   2282e:	c3                   	ret    

000000000002282f <LoadSponza(RendererInterface*, Renderer*, Scene&)>:
   2282f:	55                   	push   rbp
   22830:	48 89 e5             	mov    rbp,rsp
   22833:	41 57                	push   r15
   22835:	41 56                	push   r14
   22837:	41 55                	push   r13
   22839:	41 54                	push   r12
   2283b:	53                   	push   rbx
   2283c:	48 81 ec a8 01 00 00 	sub    rsp,0x1a8
   22843:	48 89 bd 58 fe ff ff 	mov    QWORD PTR [rbp-0x1a8],rdi
   2284a:	48 89 b5 50 fe ff ff 	mov    QWORD PTR [rbp-0x1b0],rsi
   22851:	48 89 95 48 fe ff ff 	mov    QWORD PTR [rbp-0x1b8],rdx
   22858:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   22861:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   22865:	31 c0                	xor    eax,eax
   22867:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   2286e:	48 89 c7             	mov    rdi,rax
   22871:	e8 b2 a9 00 00       	call   2d228 <objl::Loader::Loader()>
   22876:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   2287d:	48 89 c7             	mov    rdi,rax
   22880:	e8 eb 1e fe ff       	call   4770 <std::allocator<char>::allocator()@plt>
   22885:	48 8d 95 00 ff ff ff 	lea    rdx,[rbp-0x100]
   2288c:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   22890:	48 8d 0d 0b a0 01 00 	lea    rcx,[rip+0x1a00b]        # 3c8a2 <NANO_SEC+0x15da>
   22897:	48 89 ce             	mov    rsi,rcx
   2289a:	48 89 c7             	mov    rdi,rax
   2289d:	e8 b8 31 00 00       	call   25a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   228a2:	48 8d 55 a0          	lea    rdx,[rbp-0x60]
   228a6:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   228ad:	48 89 d6             	mov    rsi,rdx
   228b0:	48 89 c7             	mov    rdi,rax
   228b3:	e8 14 aa 00 00       	call   2d2cc <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   228b8:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   228bc:	48 89 c7             	mov    rdi,rax
   228bf:	e8 9c 19 fe ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   228c4:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   228cb:	48 89 c7             	mov    rdi,rax
   228ce:	e8 bd 1b fe ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   228d3:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
   228da:	48 89 c7             	mov    rdi,rax
   228dd:	e8 f0 2c 00 00       	call   255d2 <std::vector<Tex, std::allocator<Tex> >::vector()>
   228e2:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
   228e9:	48 89 c7             	mov    rdi,rax
   228ec:	e8 35 2d 00 00       	call   25626 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   228f1:	c7 85 78 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x188],0x0
   228fb:	c7 85 74 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x18c],0x0
   22905:	e9 c3 0c 00 00       	jmp    235cd <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xd9e>
   2290a:	48 89 e0             	mov    rax,rsp
   2290d:	48 89 c3             	mov    rbx,rax
   22910:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22916:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   2291d:	48 89 d6             	mov    rsi,rdx
   22920:	48 89 c7             	mov    rdi,rax
   22923:	e8 1c 3c 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22928:	48 83 c0 20          	add    rax,0x20
   2292c:	48 89 c7             	mov    rdi,rax
   2292f:	e8 34 3c 00 00       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   22934:	48 89 85 80 fe ff ff 	mov    QWORD PTR [rbp-0x180],rax
   2293b:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22941:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22948:	48 89 d6             	mov    rsi,rdx
   2294b:	48 89 c7             	mov    rdi,rax
   2294e:	e8 f1 3b 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22953:	48 83 c0 38          	add    rax,0x38
   22957:	48 89 c7             	mov    rdi,rax
   2295a:	e8 2d 3c 00 00       	call   2658c <std::vector<unsigned int, std::allocator<unsigned int> >::data()>
   2295f:	48 89 85 88 fe ff ff 	mov    QWORD PTR [rbp-0x178],rax
   22966:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   2296c:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22973:	48 89 d6             	mov    rsi,rdx
   22976:	48 89 c7             	mov    rdi,rax
   22979:	e8 c6 3b 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   2297e:	48 83 c0 38          	add    rax,0x38
   22982:	48 89 c7             	mov    rdi,rax
   22985:	e8 26 3c 00 00       	call   265b0 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   2298a:	48 89 85 90 fe ff ff 	mov    QWORD PTR [rbp-0x170],rax
   22991:	48 8b 95 80 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x180]
   22998:	48 89 d0             	mov    rax,rdx
   2299b:	48 c1 e0 02          	shl    rax,0x2
   2299f:	48 01 c2             	add    rdx,rax
   229a2:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
   229a9:	48 01 d0             	add    rax,rdx
   229ac:	c1 e0 02             	shl    eax,0x2
   229af:	01 85 78 fe ff ff    	add    DWORD PTR [rbp-0x188],eax
   229b5:	48 8b 8d 80 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x180]
   229bc:	48 89 c8             	mov    rax,rcx
   229bf:	48 83 e8 01          	sub    rax,0x1
   229c3:	48 89 85 98 fe ff ff 	mov    QWORD PTR [rbp-0x168],rax
   229ca:	49 89 cc             	mov    r12,rcx
   229cd:	41 bd 00 00 00 00    	mov    r13d,0x0
   229d3:	49 69 d5 a0 00 00 00 	imul   rdx,r13,0xa0
   229da:	49 6b c4 00          	imul   rax,r12,0x0
   229de:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   229e2:	b8 a0 00 00 00       	mov    eax,0xa0
   229e7:	49 f7 e4             	mul    r12
   229ea:	48 01 d6             	add    rsi,rdx
   229ed:	48 89 f2             	mov    rdx,rsi
   229f0:	48 89 c8             	mov    rax,rcx
   229f3:	48 c1 e0 02          	shl    rax,0x2
   229f7:	48 01 c8             	add    rax,rcx
   229fa:	48 c1 e0 02          	shl    rax,0x2
   229fe:	49 89 ce             	mov    r14,rcx
   22a01:	41 bf 00 00 00 00    	mov    r15d,0x0
   22a07:	49 69 d7 a0 00 00 00 	imul   rdx,r15,0xa0
   22a0e:	49 6b c6 00          	imul   rax,r14,0x0
   22a12:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   22a16:	b8 a0 00 00 00       	mov    eax,0xa0
   22a1b:	49 f7 e6             	mul    r14
   22a1e:	48 01 d6             	add    rsi,rdx
   22a21:	48 89 f2             	mov    rdx,rsi
   22a24:	48 89 c8             	mov    rax,rcx
   22a27:	48 c1 e0 02          	shl    rax,0x2
   22a2b:	48 01 c8             	add    rax,rcx
   22a2e:	48 c1 e0 02          	shl    rax,0x2
   22a32:	48 89 c2             	mov    rdx,rax
   22a35:	b8 10 00 00 00       	mov    eax,0x10
   22a3a:	48 83 e8 01          	sub    rax,0x1
   22a3e:	48 01 d0             	add    rax,rdx
   22a41:	be 10 00 00 00       	mov    esi,0x10
   22a46:	ba 00 00 00 00       	mov    edx,0x0
   22a4b:	48 f7 f6             	div    rsi
   22a4e:	48 6b c0 10          	imul   rax,rax,0x10
   22a52:	48 29 c4             	sub    rsp,rax
   22a55:	48 89 e0             	mov    rax,rsp
   22a58:	48 83 c0 03          	add    rax,0x3
   22a5c:	48 c1 e8 02          	shr    rax,0x2
   22a60:	48 c1 e0 02          	shl    rax,0x2
   22a64:	48 89 85 a0 fe ff ff 	mov    QWORD PTR [rbp-0x160],rax
   22a6b:	48 89 c8             	mov    rax,rcx
   22a6e:	48 83 e8 01          	sub    rax,0x1
   22a72:	eb 04                	jmp    22a78 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0x249>
   22a74:	48 83 e8 01          	sub    rax,0x1
   22a78:	48 85 c0             	test   rax,rax
   22a7b:	79 f7                	jns    22a74 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0x245>
   22a7d:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22a83:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22a8a:	48 89 d6             	mov    rsi,rdx
   22a8d:	48 89 c7             	mov    rdi,rax
   22a90:	e8 af 3a 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22a95:	48 83 c0 20          	add    rax,0x20
   22a99:	be 00 00 00 00       	mov    esi,0x0
   22a9e:	48 89 c7             	mov    rdi,rax
   22aa1:	e8 2e 3b 00 00       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22aa6:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   22aaa:	66 0f ef c9          	pxor   xmm1,xmm1
   22aae:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   22ab2:	f2 0f 10 05 d6 9f 01 00 	movsd  xmm0,QWORD PTR [rip+0x19fd6]        # 3ca90 <NANO_SEC+0x17c8>
   22aba:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   22abe:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   22ac2:	f3 0f 11 85 a8 fe ff ff 	movss  DWORD PTR [rbp-0x158],xmm0
   22aca:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22ad0:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22ad7:	48 89 d6             	mov    rsi,rdx
   22ada:	48 89 c7             	mov    rdi,rax
   22add:	e8 62 3a 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22ae2:	48 83 c0 20          	add    rax,0x20
   22ae6:	be 00 00 00 00       	mov    esi,0x0
   22aeb:	48 89 c7             	mov    rdi,rax
   22aee:	e8 e1 3a 00 00       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22af3:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   22af8:	66 0f ef c9          	pxor   xmm1,xmm1
   22afc:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   22b00:	f2 0f 10 05 88 9f 01 00 	movsd  xmm0,QWORD PTR [rip+0x19f88]        # 3ca90 <NANO_SEC+0x17c8>
   22b08:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   22b0c:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   22b10:	f3 0f 11 85 ac fe ff ff 	movss  DWORD PTR [rbp-0x154],xmm0
   22b18:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22b1e:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22b25:	48 89 d6             	mov    rsi,rdx
   22b28:	48 89 c7             	mov    rdi,rax
   22b2b:	e8 14 3a 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22b30:	48 83 c0 20          	add    rax,0x20
   22b34:	be 00 00 00 00       	mov    esi,0x0
   22b39:	48 89 c7             	mov    rdi,rax
   22b3c:	e8 93 3a 00 00       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22b41:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   22b46:	66 0f ef c9          	pxor   xmm1,xmm1
   22b4a:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   22b4e:	f2 0f 10 05 3a 9f 01 00 	movsd  xmm0,QWORD PTR [rip+0x19f3a]        # 3ca90 <NANO_SEC+0x17c8>
   22b56:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   22b5a:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   22b5e:	f3 0f 11 85 b0 fe ff ff 	movss  DWORD PTR [rbp-0x150],xmm0
   22b66:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22b6c:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22b73:	48 89 d6             	mov    rsi,rdx
   22b76:	48 89 c7             	mov    rdi,rax
   22b79:	e8 c6 39 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22b7e:	48 83 c0 20          	add    rax,0x20
   22b82:	be 00 00 00 00       	mov    esi,0x0
   22b87:	48 89 c7             	mov    rdi,rax
   22b8a:	e8 45 3a 00 00       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22b8f:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   22b93:	66 0f ef c9          	pxor   xmm1,xmm1
   22b97:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   22b9b:	f2 0f 10 05 ed 9e 01 00 	movsd  xmm0,QWORD PTR [rip+0x19eed]        # 3ca90 <NANO_SEC+0x17c8>
   22ba3:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   22ba7:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   22bab:	f3 0f 11 85 b4 fe ff ff 	movss  DWORD PTR [rbp-0x14c],xmm0
   22bb3:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22bb9:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22bc0:	48 89 d6             	mov    rsi,rdx
   22bc3:	48 89 c7             	mov    rdi,rax
   22bc6:	e8 79 39 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22bcb:	48 83 c0 20          	add    rax,0x20
   22bcf:	be 00 00 00 00       	mov    esi,0x0
   22bd4:	48 89 c7             	mov    rdi,rax
   22bd7:	e8 f8 39 00 00       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22bdc:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   22be1:	66 0f ef c9          	pxor   xmm1,xmm1
   22be5:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   22be9:	f2 0f 10 05 9f 9e 01 00 	movsd  xmm0,QWORD PTR [rip+0x19e9f]        # 3ca90 <NANO_SEC+0x17c8>
   22bf1:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   22bf5:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   22bf9:	f3 0f 11 85 b8 fe ff ff 	movss  DWORD PTR [rbp-0x148],xmm0
   22c01:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22c07:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22c0e:	48 89 d6             	mov    rsi,rdx
   22c11:	48 89 c7             	mov    rdi,rax
   22c14:	e8 2b 39 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22c19:	48 83 c0 20          	add    rax,0x20
   22c1d:	be 00 00 00 00       	mov    esi,0x0
   22c22:	48 89 c7             	mov    rdi,rax
   22c25:	e8 aa 39 00 00       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22c2a:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   22c2f:	66 0f ef c9          	pxor   xmm1,xmm1
   22c33:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   22c37:	f2 0f 10 05 51 9e 01 00 	movsd  xmm0,QWORD PTR [rip+0x19e51]        # 3ca90 <NANO_SEC+0x17c8>
   22c3f:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   22c43:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   22c47:	f3 0f 11 85 bc fe ff ff 	movss  DWORD PTR [rbp-0x144],xmm0
   22c4f:	c7 85 70 fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x190],0x0
   22c59:	e9 ec 03 00 00       	jmp    2304a <LoadSponza(RendererInterface*, Renderer*, Scene&)+0x81b>
   22c5e:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22c64:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22c6b:	48 89 d6             	mov    rsi,rdx
   22c6e:	48 89 c7             	mov    rdi,rax
   22c71:	e8 ce 38 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22c76:	48 8d 50 20          	lea    rdx,[rax+0x20]
   22c7a:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
   22c80:	48 89 c6             	mov    rsi,rax
   22c83:	48 89 d7             	mov    rdi,rdx
   22c86:	e8 49 39 00 00       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22c8b:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   22c8f:	66 0f ef c9          	pxor   xmm1,xmm1
   22c93:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   22c97:	f2 0f 10 05 f1 9d 01 00 	movsd  xmm0,QWORD PTR [rip+0x19df1]        # 3ca90 <NANO_SEC+0x17c8>
   22c9f:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   22ca3:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   22ca7:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   22cae:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22cb4:	48 89 d0             	mov    rax,rdx
   22cb7:	48 c1 e0 02          	shl    rax,0x2
   22cbb:	48 01 d0             	add    rax,rdx
   22cbe:	48 c1 e0 02          	shl    rax,0x2
   22cc2:	48 01 c8             	add    rax,rcx
   22cc5:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   22cc9:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22ccf:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22cd6:	48 89 d6             	mov    rsi,rdx
   22cd9:	48 89 c7             	mov    rdi,rax
   22cdc:	e8 63 38 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22ce1:	48 8d 50 20          	lea    rdx,[rax+0x20]
   22ce5:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
   22ceb:	48 89 c6             	mov    rsi,rax
   22cee:	48 89 d7             	mov    rdi,rdx
   22cf1:	e8 de 38 00 00       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22cf6:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   22cfb:	66 0f ef c9          	pxor   xmm1,xmm1
   22cff:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   22d03:	f2 0f 10 05 85 9d 01 00 	movsd  xmm0,QWORD PTR [rip+0x19d85]        # 3ca90 <NANO_SEC+0x17c8>
   22d0b:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   22d0f:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   22d13:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   22d1a:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22d20:	48 89 d0             	mov    rax,rdx
   22d23:	48 c1 e0 02          	shl    rax,0x2
   22d27:	48 01 d0             	add    rax,rdx
   22d2a:	48 c1 e0 02          	shl    rax,0x2
   22d2e:	48 01 c8             	add    rax,rcx
   22d31:	48 83 c0 04          	add    rax,0x4
   22d35:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   22d39:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22d3f:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22d46:	48 89 d6             	mov    rsi,rdx
   22d49:	48 89 c7             	mov    rdi,rax
   22d4c:	e8 f3 37 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22d51:	48 8d 50 20          	lea    rdx,[rax+0x20]
   22d55:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
   22d5b:	48 89 c6             	mov    rsi,rax
   22d5e:	48 89 d7             	mov    rdi,rdx
   22d61:	e8 6e 38 00 00       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22d66:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   22d6b:	66 0f ef c9          	pxor   xmm1,xmm1
   22d6f:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   22d73:	f2 0f 10 05 15 9d 01 00 	movsd  xmm0,QWORD PTR [rip+0x19d15]        # 3ca90 <NANO_SEC+0x17c8>
   22d7b:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   22d7f:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   22d83:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   22d8a:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22d90:	48 89 d0             	mov    rax,rdx
   22d93:	48 c1 e0 02          	shl    rax,0x2
   22d97:	48 01 d0             	add    rax,rdx
   22d9a:	48 c1 e0 02          	shl    rax,0x2
   22d9e:	48 01 c8             	add    rax,rcx
   22da1:	48 83 c0 08          	add    rax,0x8
   22da5:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   22da9:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22daf:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22db6:	48 89 d6             	mov    rsi,rdx
   22db9:	48 89 c7             	mov    rdi,rax
   22dbc:	e8 83 37 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22dc1:	48 8d 50 20          	lea    rdx,[rax+0x20]
   22dc5:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
   22dcb:	48 89 c6             	mov    rsi,rax
   22dce:	48 89 d7             	mov    rdi,rdx
   22dd1:	e8 fe 37 00 00       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22dd6:	f3 0f 10 40 18       	movss  xmm0,DWORD PTR [rax+0x18]
   22ddb:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   22de2:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22de8:	48 89 d0             	mov    rax,rdx
   22deb:	48 c1 e0 02          	shl    rax,0x2
   22def:	48 01 d0             	add    rax,rdx
   22df2:	48 c1 e0 02          	shl    rax,0x2
   22df6:	48 01 c8             	add    rax,rcx
   22df9:	48 83 c0 0c          	add    rax,0xc
   22dfd:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   22e01:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   22e07:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   22e0e:	48 89 d6             	mov    rsi,rdx
   22e11:	48 89 c7             	mov    rdi,rax
   22e14:	e8 2b 37 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   22e19:	48 8d 50 20          	lea    rdx,[rax+0x20]
   22e1d:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
   22e23:	48 89 c6             	mov    rsi,rax
   22e26:	48 89 d7             	mov    rdi,rdx
   22e29:	e8 a6 37 00 00       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   22e2e:	f3 0f 10 40 1c       	movss  xmm0,DWORD PTR [rax+0x1c]
   22e33:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   22e3a:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22e40:	48 89 d0             	mov    rax,rdx
   22e43:	48 c1 e0 02          	shl    rax,0x2
   22e47:	48 01 d0             	add    rax,rdx
   22e4a:	48 c1 e0 02          	shl    rax,0x2
   22e4e:	48 01 c8             	add    rax,rcx
   22e51:	48 83 c0 10          	add    rax,0x10
   22e55:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   22e59:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   22e60:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22e66:	48 89 d0             	mov    rax,rdx
   22e69:	48 c1 e0 02          	shl    rax,0x2
   22e6d:	48 01 d0             	add    rax,rdx
   22e70:	48 c1 e0 02          	shl    rax,0x2
   22e74:	48 01 c8             	add    rax,rcx
   22e77:	48 83 c0 08          	add    rax,0x8
   22e7b:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   22e7f:	8b 85 b0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x150]
   22e85:	0f 28 c8             	movaps xmm1,xmm0
   22e88:	66 0f 6e c0          	movd   xmm0,eax
   22e8c:	e8 63 37 00 00       	call   265f4 <float min<float>(float, float)>
   22e91:	f3 0f 11 85 40 fe ff ff 	movss  DWORD PTR [rbp-0x1c0],xmm0
   22e99:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   22ea0:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22ea6:	48 89 d0             	mov    rax,rdx
   22ea9:	48 c1 e0 02          	shl    rax,0x2
   22ead:	48 01 d0             	add    rax,rdx
   22eb0:	48 c1 e0 02          	shl    rax,0x2
   22eb4:	48 01 c8             	add    rax,rcx
   22eb7:	48 83 c0 04          	add    rax,0x4
   22ebb:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   22ebf:	8b 85 ac fe ff ff    	mov    eax,DWORD PTR [rbp-0x154]
   22ec5:	0f 28 c8             	movaps xmm1,xmm0
   22ec8:	66 0f 6e c0          	movd   xmm0,eax
   22ecc:	e8 23 37 00 00       	call   265f4 <float min<float>(float, float)>
   22ed1:	f3 0f 11 85 3c fe ff ff 	movss  DWORD PTR [rbp-0x1c4],xmm0
   22ed9:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   22ee0:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22ee6:	48 89 d0             	mov    rax,rdx
   22ee9:	48 c1 e0 02          	shl    rax,0x2
   22eed:	48 01 d0             	add    rax,rdx
   22ef0:	48 c1 e0 02          	shl    rax,0x2
   22ef4:	48 01 c8             	add    rax,rcx
   22ef7:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   22efb:	8b 85 a8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x158]
   22f01:	0f 28 c8             	movaps xmm1,xmm0
   22f04:	66 0f 6e c0          	movd   xmm0,eax
   22f08:	e8 e7 36 00 00       	call   265f4 <float min<float>(float, float)>
   22f0d:	66 0f 7e c0          	movd   eax,xmm0
   22f11:	48 8d 95 00 ff ff ff 	lea    rdx,[rbp-0x100]
   22f18:	f3 0f 10 95 40 fe ff ff 	movss  xmm2,DWORD PTR [rbp-0x1c0]
   22f20:	f3 0f 10 8d 3c fe ff ff 	movss  xmm1,DWORD PTR [rbp-0x1c4]
   22f28:	66 0f 6e c0          	movd   xmm0,eax
   22f2c:	48 89 d7             	mov    rdi,rdx
   22f2f:	e8 22 26 00 00       	call   25556 <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   22f34:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
   22f3b:	48 89 85 a8 fe ff ff 	mov    QWORD PTR [rbp-0x158],rax
   22f42:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   22f48:	89 85 b0 fe ff ff    	mov    DWORD PTR [rbp-0x150],eax
   22f4e:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   22f55:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22f5b:	48 89 d0             	mov    rax,rdx
   22f5e:	48 c1 e0 02          	shl    rax,0x2
   22f62:	48 01 d0             	add    rax,rdx
   22f65:	48 c1 e0 02          	shl    rax,0x2
   22f69:	48 01 c8             	add    rax,rcx
   22f6c:	48 83 c0 08          	add    rax,0x8
   22f70:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   22f74:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   22f7a:	0f 28 c8             	movaps xmm1,xmm0
   22f7d:	66 0f 6e c0          	movd   xmm0,eax
   22f81:	e8 95 36 00 00       	call   2661b <float max<float>(float, float)>
   22f86:	f3 0f 11 85 40 fe ff ff 	movss  DWORD PTR [rbp-0x1c0],xmm0
   22f8e:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   22f95:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22f9b:	48 89 d0             	mov    rax,rdx
   22f9e:	48 c1 e0 02          	shl    rax,0x2
   22fa2:	48 01 d0             	add    rax,rdx
   22fa5:	48 c1 e0 02          	shl    rax,0x2
   22fa9:	48 01 c8             	add    rax,rcx
   22fac:	48 83 c0 04          	add    rax,0x4
   22fb0:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   22fb4:	8b 85 b8 fe ff ff    	mov    eax,DWORD PTR [rbp-0x148]
   22fba:	0f 28 c8             	movaps xmm1,xmm0
   22fbd:	66 0f 6e c0          	movd   xmm0,eax
   22fc1:	e8 55 36 00 00       	call   2661b <float max<float>(float, float)>
   22fc6:	f3 0f 11 85 3c fe ff ff 	movss  DWORD PTR [rbp-0x1c4],xmm0
   22fce:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   22fd5:	8b 95 70 fe ff ff    	mov    edx,DWORD PTR [rbp-0x190]
   22fdb:	48 89 d0             	mov    rax,rdx
   22fde:	48 c1 e0 02          	shl    rax,0x2
   22fe2:	48 01 d0             	add    rax,rdx
   22fe5:	48 c1 e0 02          	shl    rax,0x2
   22fe9:	48 01 c8             	add    rax,rcx
   22fec:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   22ff0:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [rbp-0x14c]
   22ff6:	0f 28 c8             	movaps xmm1,xmm0
   22ff9:	66 0f 6e c0          	movd   xmm0,eax
   22ffd:	e8 19 36 00 00       	call   2661b <float max<float>(float, float)>
   23002:	66 0f 7e c0          	movd   eax,xmm0
   23006:	48 8d 95 00 ff ff ff 	lea    rdx,[rbp-0x100]
   2300d:	f3 0f 10 95 40 fe ff ff 	movss  xmm2,DWORD PTR [rbp-0x1c0]
   23015:	f3 0f 10 8d 3c fe ff ff 	movss  xmm1,DWORD PTR [rbp-0x1c4]
   2301d:	66 0f 6e c0          	movd   xmm0,eax
   23021:	48 89 d7             	mov    rdi,rdx
   23024:	e8 2d 25 00 00       	call   25556 <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   23029:	48 8b 85 00 ff ff ff 	mov    rax,QWORD PTR [rbp-0x100]
   23030:	48 89 85 b4 fe ff ff 	mov    QWORD PTR [rbp-0x14c],rax
   23037:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2303d:	89 85 bc fe ff ff    	mov    DWORD PTR [rbp-0x144],eax
   23043:	83 85 70 fe ff ff 01 	add    DWORD PTR [rbp-0x190],0x1
   2304a:	8b 85 70 fe ff ff    	mov    eax,DWORD PTR [rbp-0x190]
   23050:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
   23057:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   2305d:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   23064:	48 89 d6             	mov    rsi,rdx
   23067:	48 89 c7             	mov    rdi,rax
   2306a:	e8 d5 34 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   2306f:	48 83 c0 20          	add    rax,0x20
   23073:	48 89 c7             	mov    rdi,rax
   23076:	e8 ed 34 00 00       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2307b:	48 39 85 40 fe ff ff 	cmp    QWORD PTR [rbp-0x1c0],rax
   23082:	0f 92 c0             	setb   al
   23085:	84 c0                	test   al,al
   23087:	0f 85 d1 fb ff ff    	jne    22c5e <LoadSponza(RendererInterface*, Renderer*, Scene&)+0x42f>
   2308d:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
   23094:	48 8d 50 48          	lea    rdx,[rax+0x48]
   23098:	48 8b 85 a8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x158]
   2309f:	48 89 85 00 ff ff ff 	mov    QWORD PTR [rbp-0x100],rax
   230a6:	8b 85 b0 fe ff ff    	mov    eax,DWORD PTR [rbp-0x150]
   230ac:	89 85 08 ff ff ff    	mov    DWORD PTR [rbp-0xf8],eax
   230b2:	48 8b 85 b4 fe ff ff 	mov    rax,QWORD PTR [rbp-0x14c]
   230b9:	48 89 85 0c ff ff ff 	mov    QWORD PTR [rbp-0xf4],rax
   230c0:	8b 85 bc fe ff ff    	mov    eax,DWORD PTR [rbp-0x144]
   230c6:	89 85 14 ff ff ff    	mov    DWORD PTR [rbp-0xec],eax
   230cc:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   230d3:	48 89 c6             	mov    rsi,rax
   230d6:	48 89 d7             	mov    rdi,rdx
   230d9:	e8 64 35 00 00       	call   26642 <std::vector<AABB, std::allocator<AABB> >::push_back(AABB&&)>
   230de:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
   230e5:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
   230ec:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
   230f3:	4c 8b 90 00 01 00 00 	mov    r10,QWORD PTR [rax+0x100]
   230fa:	48 8b 85 90 fe ff ff 	mov    rax,QWORD PTR [rbp-0x170]
   23101:	8d 0c 85 00 00 00 00 	lea    ecx,[rax*4+0x0]
   23108:	48 8b 85 80 fe ff ff 	mov    rax,QWORD PTR [rbp-0x180]
   2310f:	89 c2                	mov    edx,eax
   23111:	89 d0                	mov    eax,edx
   23113:	c1 e0 02             	shl    eax,0x2
   23116:	01 d0                	add    eax,edx
   23118:	c1 e0 02             	shl    eax,0x2
   2311b:	89 c7                	mov    edi,eax
   2311d:	48 8b 95 88 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x178]
   23124:	48 8b b5 a0 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x160]
   2312b:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
   23132:	41 b9 00 00 00 00    	mov    r9d,0x0
   23138:	41 89 c8             	mov    r8d,ecx
   2313b:	48 89 d1             	mov    rcx,rdx
   2313e:	89 fa                	mov    edx,edi
   23140:	48 89 c7             	mov    rdi,rax
   23143:	41 ff d2             	call   r10
   23146:	89 85 00 ff ff ff    	mov    DWORD PTR [rbp-0x100],eax
   2314c:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   23153:	48 89 c6             	mov    rsi,rax
   23156:	48 8b bd 40 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1c0]
   2315d:	e8 12 35 00 00       	call   26674 <std::vector<Mesh, std::allocator<Mesh> >::push_back(Mesh&&)>
   23162:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
   23169:	48 8d 50 30          	lea    rdx,[rax+0x30]
   2316d:	66 0f ef c0          	pxor   xmm0,xmm0
   23171:	f3 0f 11 85 00 ff ff ff 	movss  DWORD PTR [rbp-0x100],xmm0
   23179:	66 0f ef c0          	pxor   xmm0,xmm0
   2317d:	f3 0f 11 85 04 ff ff ff 	movss  DWORD PTR [rbp-0xfc],xmm0
   23185:	66 0f ef c0          	pxor   xmm0,xmm0
   23189:	f3 0f 11 85 08 ff ff ff 	movss  DWORD PTR [rbp-0xf8],xmm0
   23191:	66 0f ef c0          	pxor   xmm0,xmm0
   23195:	f3 0f 11 85 0c ff ff ff 	movss  DWORD PTR [rbp-0xf4],xmm0
   2319d:	66 0f ef c0          	pxor   xmm0,xmm0
   231a1:	f3 0f 11 85 10 ff ff ff 	movss  DWORD PTR [rbp-0xf0],xmm0
   231a9:	66 0f ef c0          	pxor   xmm0,xmm0
   231ad:	f3 0f 11 85 14 ff ff ff 	movss  DWORD PTR [rbp-0xec],xmm0
   231b5:	f3 0f 10 05 87 98 01 00 	movss  xmm0,DWORD PTR [rip+0x19887]        # 3ca44 <NANO_SEC+0x177c>
   231bd:	f3 0f 11 85 18 ff ff ff 	movss  DWORD PTR [rbp-0xe8],xmm0
   231c5:	f3 0f 10 05 77 98 01 00 	movss  xmm0,DWORD PTR [rip+0x19877]        # 3ca44 <NANO_SEC+0x177c>
   231cd:	f3 0f 11 85 1c ff ff ff 	movss  DWORD PTR [rbp-0xe4],xmm0
   231d5:	f3 0f 10 05 67 98 01 00 	movss  xmm0,DWORD PTR [rip+0x19867]        # 3ca44 <NANO_SEC+0x177c>
   231dd:	f3 0f 11 85 20 ff ff ff 	movss  DWORD PTR [rbp-0xe0],xmm0
   231e5:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   231ec:	48 89 c6             	mov    rsi,rax
   231ef:	48 89 d7             	mov    rdi,rdx
   231f2:	e8 af 34 00 00       	call   266a6 <std::vector<Transform, std::allocator<Transform> >::push_back(Transform&&)>
   231f7:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   231fd:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   23204:	48 89 d6             	mov    rsi,rdx
   23207:	48 89 c7             	mov    rdi,rax
   2320a:	e8 35 33 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   2320f:	48 05 c8 00 00 00    	add    rax,0xc8
   23215:	48 89 c6             	mov    rsi,rax
   23218:	48 8d 05 21 73 02 00 	lea    rax,[rip+0x27321]        # 4a540 <std::cout@@GLIBCXX_3.4>
   2321f:	48 89 c7             	mov    rdi,rax
   23222:	e8 b9 11 fe ff       	call   43e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   23227:	48 8b 15 92 6d 02 00 	mov    rdx,QWORD PTR [rip+0x26d92]        # 49fc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   2322e:	48 89 d6             	mov    rsi,rdx
   23231:	48 89 c7             	mov    rdi,rax
   23234:	e8 27 12 fe ff       	call   4460 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   23239:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   2323f:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   23246:	48 89 d6             	mov    rsi,rdx
   23249:	48 89 c7             	mov    rdi,rax
   2324c:	e8 f3 32 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   23251:	48 05 c8 00 00 00    	add    rax,0xc8
   23257:	48 8d 15 21 7f 01 00 	lea    rdx,[rip+0x17f21]        # 3b17f <stbi__depth_scale_table+0x587>
   2325e:	48 89 d6             	mov    rsi,rdx
   23261:	48 89 c7             	mov    rdi,rax
   23264:	e8 6e 34 00 00       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   23269:	84 c0                	test   al,al
   2326b:	74 2f                	je     2329c <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xa6d>
   2326d:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
   23274:	48 8d 50 18          	lea    rdx,[rax+0x18]
   23278:	c7 85 00 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x100],0x0
   23282:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   23289:	48 89 c6             	mov    rsi,rax
   2328c:	48 89 d7             	mov    rdi,rdx
   2328f:	e8 6e 34 00 00       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   23294:	48 89 dc             	mov    rsp,rbx
   23297:	e9 2a 03 00 00       	jmp    235c6 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xd97>
   2329c:	c6 85 63 fe ff ff 00 	mov    BYTE PTR [rbp-0x19d],0x0
   232a3:	c7 85 7c fe ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x184],0x0
   232ad:	e9 9d 00 00 00       	jmp    2334f <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xb20>
   232b2:	8b 95 7c fe ff ff    	mov    edx,DWORD PTR [rbp-0x184]
   232b8:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
   232bf:	48 89 d6             	mov    rsi,rdx
   232c2:	48 89 c7             	mov    rdi,rax
   232c5:	e8 8e 34 00 00       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   232ca:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
   232d1:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   232d7:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   232de:	48 89 d6             	mov    rsi,rdx
   232e1:	48 89 c7             	mov    rdi,rax
   232e4:	e8 5b 32 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   232e9:	48 05 c8 00 00 00    	add    rax,0xc8
   232ef:	48 8b b5 40 fe ff ff 	mov    rsi,QWORD PTR [rbp-0x1c0]
   232f6:	48 89 c7             	mov    rdi,rax
   232f9:	e8 7a 34 00 00       	call   26778 <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   232fe:	84 c0                	test   al,al
   23300:	74 46                	je     23348 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xb19>
   23302:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
   23309:	48 83 c0 18          	add    rax,0x18
   2330d:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
   23314:	8b 95 7c fe ff ff    	mov    edx,DWORD PTR [rbp-0x184]
   2331a:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
   23321:	48 89 d6             	mov    rsi,rdx
   23324:	48 89 c7             	mov    rdi,rax
   23327:	e8 d0 34 00 00       	call   267fc <std::vector<Tex, std::allocator<Tex> >::operator[](unsigned long)>
   2332c:	48 83 c0 10          	add    rax,0x10
   23330:	48 89 c6             	mov    rsi,rax
   23333:	48 8b bd 40 fe ff ff 	mov    rdi,QWORD PTR [rbp-0x1c0]
   2333a:	e8 e7 34 00 00       	call   26826 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)>
   2333f:	c6 85 63 fe ff ff 01 	mov    BYTE PTR [rbp-0x19d],0x1
   23346:	eb 35                	jmp    2337d <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xb4e>
   23348:	83 85 7c fe ff ff 01 	add    DWORD PTR [rbp-0x184],0x1
   2334f:	8b 85 7c fe ff ff    	mov    eax,DWORD PTR [rbp-0x184]
   23355:	48 89 85 40 fe ff ff 	mov    QWORD PTR [rbp-0x1c0],rax
   2335c:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
   23363:	48 89 c7             	mov    rdi,rax
   23366:	e8 c9 33 00 00       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2336b:	48 39 85 40 fe ff ff 	cmp    QWORD PTR [rbp-0x1c0],rax
   23372:	0f 92 c0             	setb   al
   23375:	84 c0                	test   al,al
   23377:	0f 85 35 ff ff ff    	jne    232b2 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xa83>
   2337d:	0f b6 85 63 fe ff ff 	movzx  eax,BYTE PTR [rbp-0x19d]
   23384:	83 f0 01             	xor    eax,0x1
   23387:	84 c0                	test   al,al
   23389:	0f 84 34 02 00 00    	je     235c3 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xd94>
   2338f:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   23395:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   2339c:	48 89 d6             	mov    rsi,rdx
   2339f:	48 89 c7             	mov    rdi,rax
   233a2:	e8 9d 31 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   233a7:	48 8d 90 c8 00 00 00 	lea    rdx,[rax+0xc8]
   233ae:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
   233b5:	48 89 d6             	mov    rsi,rdx
   233b8:	48 89 c7             	mov    rdi,rax
   233bb:	e8 e2 34 00 00       	call   268a2 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   233c0:	8b 95 74 fe ff ff    	mov    edx,DWORD PTR [rbp-0x18c]
   233c6:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   233cd:	48 89 d6             	mov    rsi,rdx
   233d0:	48 89 c7             	mov    rdi,rax
   233d3:	e8 6c 31 00 00       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   233d8:	48 8d 90 c8 00 00 00 	lea    rdx,[rax+0xc8]
   233df:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   233e3:	48 8d 0d d1 94 01 00 	lea    rcx,[rip+0x194d1]        # 3c8bb <NANO_SEC+0x15f3>
   233ea:	48 89 ce             	mov    rsi,rcx
   233ed:	48 89 c7             	mov    rdi,rax
   233f0:	e8 28 35 00 00       	call   2691d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   233f5:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   233f9:	48 89 c7             	mov    rdi,rax
   233fc:	e8 1f 0e fe ff       	call   4220 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data()@plt>
   23401:	48 89 c7             	mov    rdi,rax
   23404:	48 8d 8d 6c fe ff ff 	lea    rcx,[rbp-0x194]
   2340b:	48 8d 95 68 fe ff ff 	lea    rdx,[rbp-0x198]
   23412:	48 8d 85 64 fe ff ff 	lea    rax,[rbp-0x19c]
   23419:	41 b8 04 00 00 00    	mov    r8d,0x4
   2341f:	48 89 c6             	mov    rsi,rax
   23422:	e8 04 24 fe ff       	call   582b <stbi_load>
   23427:	48 89 85 08 ff ff ff 	mov    QWORD PTR [rbp-0xf8],rax
   2342e:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
   23435:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
   2343c:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   23443:	48 89 c7             	mov    rdi,rax
   23446:	ff d2                	call   rdx
   23448:	c7 45 90 01 28 00 00 	mov    DWORD PTR [rbp-0x70],0x2801
   2344f:	c7 45 94 00 28 00 00 	mov    DWORD PTR [rbp-0x6c],0x2800
   23456:	c7 45 98 03 27 00 00 	mov    DWORD PTR [rbp-0x68],0x2703
   2345d:	c7 45 9c 01 26 00 00 	mov    DWORD PTR [rbp-0x64],0x2601
   23464:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
   2346b:	4c 8b 80 e8 00 00 00 	mov    r8,QWORD PTR [rax+0xe8]
   23472:	48 8d 55 98          	lea    rdx,[rbp-0x68]
   23476:	48 8d 75 90          	lea    rsi,[rbp-0x70]
   2347a:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   23481:	b9 02 00 00 00       	mov    ecx,0x2
   23486:	48 89 c7             	mov    rdi,rax
   23489:	41 ff d0             	call   r8
   2348c:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
   23493:	4c 8b 90 d0 00 00 00 	mov    r10,QWORD PTR [rax+0xd0]
   2349a:	8b 85 68 fe ff ff    	mov    eax,DWORD PTR [rbp-0x198]
   234a0:	89 c1                	mov    ecx,eax
   234a2:	8b 85 64 fe ff ff    	mov    eax,DWORD PTR [rbp-0x19c]
   234a8:	89 c2                	mov    edx,eax
   234aa:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   234b1:	48 83 ec 08          	sub    rsp,0x8
   234b5:	6a 01                	push   0x1
   234b7:	41 89 c9             	mov    r9d,ecx
   234ba:	41 89 d0             	mov    r8d,edx
   234bd:	b9 05 00 00 00       	mov    ecx,0x5
   234c2:	ba 58 80 00 00       	mov    edx,0x8058
   234c7:	be 00 00 00 00       	mov    esi,0x0
   234cc:	48 89 c7             	mov    rdi,rax
   234cf:	41 ff d2             	call   r10
   234d2:	48 83 c4 10          	add    rsp,0x10
   234d6:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
   234dd:	4c 8b 90 d8 00 00 00 	mov    r10,QWORD PTR [rax+0xd8]
   234e4:	8b 85 68 fe ff ff    	mov    eax,DWORD PTR [rbp-0x198]
   234ea:	89 c6                	mov    esi,eax
   234ec:	8b 85 64 fe ff ff    	mov    eax,DWORD PTR [rbp-0x19c]
   234f2:	89 c1                	mov    ecx,eax
   234f4:	48 8b 95 08 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xf8]
   234fb:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   23502:	48 83 ec 08          	sub    rsp,0x8
   23506:	6a 01                	push   0x1
   23508:	56                   	push   rsi
   23509:	51                   	push   rcx
   2350a:	41 b9 00 00 00 00    	mov    r9d,0x0
   23510:	41 b8 01 14 00 00    	mov    r8d,0x1401
   23516:	b9 08 19 00 00       	mov    ecx,0x1908
   2351b:	be 00 00 00 00       	mov    esi,0x0
   23520:	48 89 c7             	mov    rdi,rax
   23523:	41 ff d2             	call   r10
   23526:	48 83 c4 20          	add    rsp,0x20
   2352a:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
   23531:	48 8b 90 e0 00 00 00 	mov    rdx,QWORD PTR [rax+0xe0]
   23538:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   2353f:	48 89 c7             	mov    rdi,rax
   23542:	ff d2                	call   rdx
   23544:	48 8b 85 08 ff ff ff 	mov    rax,QWORD PTR [rbp-0xf8]
   2354b:	48 89 c7             	mov    rdi,rax
   2354e:	e8 08 19 fe ff       	call   4e5b <stbi_image_free>
   23553:	48 8b 85 58 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1a8]
   2355a:	48 8b 88 f0 00 00 00 	mov    rcx,QWORD PTR [rax+0xf0]
   23561:	48 8d 95 00 ff ff ff 	lea    rdx,[rbp-0x100]
   23568:	48 8b 85 50 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b0]
   2356f:	48 89 d6             	mov    rsi,rdx
   23572:	48 89 c7             	mov    rdi,rax
   23575:	ff d1                	call   rcx
   23577:	89 85 10 ff ff ff    	mov    DWORD PTR [rbp-0xf0],eax
   2357d:	48 8d 95 00 ff ff ff 	lea    rdx,[rbp-0x100]
   23584:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
   2358b:	48 89 d6             	mov    rsi,rdx
   2358e:	48 89 c7             	mov    rdi,rax
   23591:	e8 ac 34 00 00       	call   26a42 <std::vector<Tex, std::allocator<Tex> >::push_back(Tex const&)>
   23596:	48 8b 85 48 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1b8]
   2359d:	48 83 c0 18          	add    rax,0x18
   235a1:	48 8d 95 00 ff ff ff 	lea    rdx,[rbp-0x100]
   235a8:	48 83 c2 10          	add    rdx,0x10
   235ac:	48 89 d6             	mov    rsi,rdx
   235af:	48 89 c7             	mov    rdi,rax
   235b2:	e8 6f 32 00 00       	call   26826 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)>
   235b7:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   235bb:	48 89 c7             	mov    rdi,rax
   235be:	e8 9d 0c fe ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   235c3:	48 89 dc             	mov    rsp,rbx
   235c6:	83 85 74 fe ff ff 01 	add    DWORD PTR [rbp-0x18c],0x1
   235cd:	8b 9d 74 fe ff ff    	mov    ebx,DWORD PTR [rbp-0x18c]
   235d3:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   235da:	48 89 c7             	mov    rdi,rax
   235dd:	e8 2e 2f 00 00       	call   26510 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::size() const>
   235e2:	48 39 c3             	cmp    rbx,rax
   235e5:	0f 92 c0             	setb   al
   235e8:	84 c0                	test   al,al
   235ea:	0f 85 1a f3 ff ff    	jne    2290a <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xdb>
   235f0:	48 8d 05 d3 92 01 00 	lea    rax,[rip+0x192d3]        # 3c8ca <NANO_SEC+0x1602>
   235f7:	48 89 c6             	mov    rsi,rax
   235fa:	48 8d 05 3f 6f 02 00 	lea    rax,[rip+0x26f3f]        # 4a540 <std::cout@@GLIBCXX_3.4>
   23601:	48 89 c7             	mov    rdi,rax
   23604:	e8 f7 0d fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   23609:	48 89 c2             	mov    rdx,rax
   2360c:	8b 85 78 fe ff ff    	mov    eax,DWORD PTR [rbp-0x188]
   23612:	89 c6                	mov    esi,eax
   23614:	48 89 d7             	mov    rdi,rdx
   23617:	e8 d4 0f fe ff       	call   45f0 <std::ostream::operator<<(unsigned int)@plt>
   2361c:	48 89 c2             	mov    rdx,rax
   2361f:	48 8d 05 b6 7c 01 00 	lea    rax,[rip+0x17cb6]        # 3b2dc <NANO_SEC+0x14>
   23626:	48 89 c6             	mov    rsi,rax
   23629:	48 89 d7             	mov    rdi,rdx
   2362c:	e8 cf 0d fe ff       	call   4400 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
   23631:	48 89 c3             	mov    rbx,rax
   23634:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
   2363b:	48 89 c7             	mov    rdi,rax
   2363e:	e8 7b 34 00 00       	call   26abe <std::vector<Tex, std::allocator<Tex> >::size() const>
   23643:	48 89 c6             	mov    rsi,rax
   23646:	48 89 df             	mov    rdi,rbx
   23649:	e8 62 0a fe ff       	call   40b0 <std::ostream::operator<<(unsigned long)@plt>
   2364e:	48 8b 15 6b 69 02 00 	mov    rdx,QWORD PTR [rip+0x2696b]        # 49fc0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
   23655:	48 89 d6             	mov    rsi,rdx
   23658:	48 89 c7             	mov    rdi,rax
   2365b:	e8 00 0e fe ff       	call   4460 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
   23660:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
   23667:	48 89 c7             	mov    rdi,rax
   2366a:	e8 5d 2e 00 00       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2366f:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
   23676:	48 89 c7             	mov    rdi,rax
   23679:	e8 78 2d 00 00       	call   263f6 <std::vector<Tex, std::allocator<Tex> >::~vector()>
   2367e:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   23685:	48 89 c7             	mov    rdi,rax
   23688:	e8 e7 9b 00 00       	call   2d274 <objl::Loader::~Loader()>
   2368d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   23691:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2369a:	0f 84 83 00 00 00    	je     23723 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xef4>
   236a0:	eb 7c                	jmp    2371e <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xeef>
   236a2:	48 89 c3             	mov    rbx,rax
   236a5:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   236a9:	48 89 c7             	mov    rdi,rax
   236ac:	e8 af 0b fe ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   236b1:	eb 03                	jmp    236b6 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xe87>
   236b3:	48 89 c3             	mov    rbx,rax
   236b6:	48 8d 85 00 ff ff ff 	lea    rax,[rbp-0x100]
   236bd:	48 89 c7             	mov    rdi,rax
   236c0:	e8 cb 0d fe ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   236c5:	eb 3d                	jmp    23704 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xed5>
   236c7:	49 89 c4             	mov    r12,rax
   236ca:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   236ce:	48 89 c7             	mov    rdi,rax
   236d1:	e8 8a 0b fe ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   236d6:	4c 89 e0             	mov    rax,r12
   236d9:	eb 00                	jmp    236db <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xeac>
   236db:	48 89 dc             	mov    rsp,rbx
   236de:	48 89 c3             	mov    rbx,rax
   236e1:	eb 03                	jmp    236e6 <LoadSponza(RendererInterface*, Renderer*, Scene&)+0xeb7>
   236e3:	48 89 c3             	mov    rbx,rax
   236e6:	48 8d 85 e0 fe ff ff 	lea    rax,[rbp-0x120]
   236ed:	48 89 c7             	mov    rdi,rax
   236f0:	e8 d7 2d 00 00       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   236f5:	48 8d 85 c0 fe ff ff 	lea    rax,[rbp-0x140]
   236fc:	48 89 c7             	mov    rdi,rax
   236ff:	e8 f2 2c 00 00       	call   263f6 <std::vector<Tex, std::allocator<Tex> >::~vector()>
   23704:	48 8d 85 30 ff ff ff 	lea    rax,[rbp-0xd0]
   2370b:	48 89 c7             	mov    rdi,rax
   2370e:	e8 61 9b 00 00       	call   2d274 <objl::Loader::~Loader()>
   23713:	48 89 d8             	mov    rax,rbx
   23716:	48 89 c7             	mov    rdi,rax
   23719:	e8 42 10 fe ff       	call   4760 <_Unwind_Resume@plt>
   2371e:	e8 bd 0d fe ff       	call   44e0 <__stack_chk_fail@plt>
   23723:	48 8d 65 d8          	lea    rsp,[rbp-0x28]
   23727:	5b                   	pop    rbx
   23728:	41 5c                	pop    r12
   2372a:	41 5d                	pop    r13
   2372c:	41 5e                	pop    r14
   2372e:	41 5f                	pop    r15
   23730:	5d                   	pop    rbp
   23731:	c3                   	ret    

0000000000023732 <ExtractPlanesFromMat(Mat4<float>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)>:
   23732:	55                   	push   rbp
   23733:	48 89 e5             	mov    rbp,rsp
   23736:	48 83 ec 60          	sub    rsp,0x60
   2373a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2373e:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   23742:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   23746:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   2374a:	4c 89 45 b8          	mov    QWORD PTR [rbp-0x48],r8
   2374e:	4c 89 4d b0          	mov    QWORD PTR [rbp-0x50],r9
   23752:	c7 45 e8 04 00 00 00 	mov    DWORD PTR [rbp-0x18],0x4
   23759:	eb 67                	jmp    237c2 <ExtractPlanesFromMat(Mat4<float>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x90>
   2375b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2375e:	89 c6                	mov    esi,eax
   23760:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   23764:	e8 19 34 00 00       	call   26b82 <Mat4<float>::operator[](unsigned int)>
   23769:	be 03 00 00 00       	mov    esi,0x3
   2376e:	48 89 c7             	mov    rdi,rax
   23771:	e8 2a 34 00 00       	call   26ba0 <v4<float>::operator[](unsigned int)>
   23776:	f3 0f 10 20          	movss  xmm4,DWORD PTR [rax]
   2377a:	f3 0f 11 65 ac       	movss  DWORD PTR [rbp-0x54],xmm4
   2377f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   23782:	89 c6                	mov    esi,eax
   23784:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   23788:	e8 f5 33 00 00       	call   26b82 <Mat4<float>::operator[](unsigned int)>
   2378d:	be 00 00 00 00       	mov    esi,0x0
   23792:	48 89 c7             	mov    rdi,rax
   23795:	e8 06 34 00 00       	call   26ba0 <v4<float>::operator[](unsigned int)>
   2379a:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2379e:	f3 0f 58 45 ac       	addss  xmm0,DWORD PTR [rbp-0x54]
   237a3:	f3 0f 11 45 ac       	movss  DWORD PTR [rbp-0x54],xmm0
   237a8:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
   237ab:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   237af:	89 d6                	mov    esi,edx
   237b1:	48 89 c7             	mov    rdi,rax
   237b4:	e8 45 33 00 00       	call   26afe <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   237b9:	f3 0f 10 45 ac       	movss  xmm0,DWORD PTR [rbp-0x54]
   237be:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   237c2:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   237c5:	8d 50 ff             	lea    edx,[rax-0x1]
   237c8:	89 55 e8             	mov    DWORD PTR [rbp-0x18],edx
   237cb:	85 c0                	test   eax,eax
   237cd:	0f 95 c0             	setne  al
   237d0:	84 c0                	test   al,al
   237d2:	75 87                	jne    2375b <ExtractPlanesFromMat(Mat4<float>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x29>
   237d4:	c7 45 ec 04 00 00 00 	mov    DWORD PTR [rbp-0x14],0x4
   237db:	eb 6b                	jmp    23848 <ExtractPlanesFromMat(Mat4<float>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x116>
   237dd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   237e0:	89 c6                	mov    esi,eax
   237e2:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   237e6:	e8 97 33 00 00       	call   26b82 <Mat4<float>::operator[](unsigned int)>
   237eb:	be 03 00 00 00       	mov    esi,0x3
   237f0:	48 89 c7             	mov    rdi,rax
   237f3:	e8 a8 33 00 00       	call   26ba0 <v4<float>::operator[](unsigned int)>
   237f8:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   237fc:	f3 0f 11 4d ac       	movss  DWORD PTR [rbp-0x54],xmm1
   23801:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   23804:	89 c6                	mov    esi,eax
   23806:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   2380a:	e8 73 33 00 00       	call   26b82 <Mat4<float>::operator[](unsigned int)>
   2380f:	be 00 00 00 00       	mov    esi,0x0
   23814:	48 89 c7             	mov    rdi,rax
   23817:	e8 84 33 00 00       	call   26ba0 <v4<float>::operator[](unsigned int)>
   2381c:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   23820:	f3 0f 10 4d ac       	movss  xmm1,DWORD PTR [rbp-0x54]
   23825:	f3 0f 5c c8          	subss  xmm1,xmm0
   23829:	f3 0f 11 4d ac       	movss  DWORD PTR [rbp-0x54],xmm1
   2382e:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
   23831:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   23835:	89 d6                	mov    esi,edx
   23837:	48 89 c7             	mov    rdi,rax
   2383a:	e8 bf 32 00 00       	call   26afe <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   2383f:	f3 0f 10 4d ac       	movss  xmm1,DWORD PTR [rbp-0x54]
   23844:	f3 0f 11 08          	movss  DWORD PTR [rax],xmm1
   23848:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   2384b:	8d 50 ff             	lea    edx,[rax-0x1]
   2384e:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   23851:	85 c0                	test   eax,eax
   23853:	0f 95 c0             	setne  al
   23856:	84 c0                	test   al,al
   23858:	75 83                	jne    237dd <ExtractPlanesFromMat(Mat4<float>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0xab>
   2385a:	c7 45 f0 04 00 00 00 	mov    DWORD PTR [rbp-0x10],0x4
   23861:	eb 67                	jmp    238ca <ExtractPlanesFromMat(Mat4<float>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x198>
   23863:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   23866:	89 c6                	mov    esi,eax
   23868:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   2386c:	e8 11 33 00 00       	call   26b82 <Mat4<float>::operator[](unsigned int)>
   23871:	be 03 00 00 00       	mov    esi,0x3
   23876:	48 89 c7             	mov    rdi,rax
   23879:	e8 22 33 00 00       	call   26ba0 <v4<float>::operator[](unsigned int)>
   2387e:	f3 0f 10 28          	movss  xmm5,DWORD PTR [rax]
   23882:	f3 0f 11 6d ac       	movss  DWORD PTR [rbp-0x54],xmm5
   23887:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   2388a:	89 c6                	mov    esi,eax
   2388c:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   23890:	e8 ed 32 00 00       	call   26b82 <Mat4<float>::operator[](unsigned int)>
   23895:	be 01 00 00 00       	mov    esi,0x1
   2389a:	48 89 c7             	mov    rdi,rax
   2389d:	e8 fe 32 00 00       	call   26ba0 <v4<float>::operator[](unsigned int)>
   238a2:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   238a6:	f3 0f 58 45 ac       	addss  xmm0,DWORD PTR [rbp-0x54]
   238ab:	f3 0f 11 45 ac       	movss  DWORD PTR [rbp-0x54],xmm0
   238b0:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   238b3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   238b7:	89 d6                	mov    esi,edx
   238b9:	48 89 c7             	mov    rdi,rax
   238bc:	e8 3d 32 00 00       	call   26afe <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   238c1:	f3 0f 10 45 ac       	movss  xmm0,DWORD PTR [rbp-0x54]
   238c6:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   238ca:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   238cd:	8d 50 ff             	lea    edx,[rax-0x1]
   238d0:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
   238d3:	85 c0                	test   eax,eax
   238d5:	0f 95 c0             	setne  al
   238d8:	84 c0                	test   al,al
   238da:	75 87                	jne    23863 <ExtractPlanesFromMat(Mat4<float>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x131>
   238dc:	c7 45 f4 04 00 00 00 	mov    DWORD PTR [rbp-0xc],0x4
   238e3:	eb 6b                	jmp    23950 <ExtractPlanesFromMat(Mat4<float>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x21e>
   238e5:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   238e8:	89 c6                	mov    esi,eax
   238ea:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   238ee:	e8 8f 32 00 00       	call   26b82 <Mat4<float>::operator[](unsigned int)>
   238f3:	be 03 00 00 00       	mov    esi,0x3
   238f8:	48 89 c7             	mov    rdi,rax
   238fb:	e8 a0 32 00 00       	call   26ba0 <v4<float>::operator[](unsigned int)>
   23900:	f3 0f 10 10          	movss  xmm2,DWORD PTR [rax]
   23904:	f3 0f 11 55 ac       	movss  DWORD PTR [rbp-0x54],xmm2
   23909:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2390c:	89 c6                	mov    esi,eax
   2390e:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   23912:	e8 6b 32 00 00       	call   26b82 <Mat4<float>::operator[](unsigned int)>
   23917:	be 01 00 00 00       	mov    esi,0x1
   2391c:	48 89 c7             	mov    rdi,rax
   2391f:	e8 7c 32 00 00       	call   26ba0 <v4<float>::operator[](unsigned int)>
   23924:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   23928:	f3 0f 10 55 ac       	movss  xmm2,DWORD PTR [rbp-0x54]
   2392d:	f3 0f 5c d0          	subss  xmm2,xmm0
   23931:	f3 0f 11 55 ac       	movss  DWORD PTR [rbp-0x54],xmm2
   23936:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   23939:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2393d:	89 d6                	mov    esi,edx
   2393f:	48 89 c7             	mov    rdi,rax
   23942:	e8 b7 31 00 00       	call   26afe <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   23947:	f3 0f 10 55 ac       	movss  xmm2,DWORD PTR [rbp-0x54]
   2394c:	f3 0f 11 10          	movss  DWORD PTR [rax],xmm2
   23950:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   23953:	8d 50 ff             	lea    edx,[rax-0x1]
   23956:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
   23959:	85 c0                	test   eax,eax
   2395b:	0f 95 c0             	setne  al
   2395e:	84 c0                	test   al,al
   23960:	75 83                	jne    238e5 <ExtractPlanesFromMat(Mat4<float>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x1b3>
   23962:	c7 45 f8 04 00 00 00 	mov    DWORD PTR [rbp-0x8],0x4
   23969:	eb 67                	jmp    239d2 <ExtractPlanesFromMat(Mat4<float>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x2a0>
   2396b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2396e:	89 c6                	mov    esi,eax
   23970:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   23974:	e8 09 32 00 00       	call   26b82 <Mat4<float>::operator[](unsigned int)>
   23979:	be 03 00 00 00       	mov    esi,0x3
   2397e:	48 89 c7             	mov    rdi,rax
   23981:	e8 1a 32 00 00       	call   26ba0 <v4<float>::operator[](unsigned int)>
   23986:	f3 0f 10 30          	movss  xmm6,DWORD PTR [rax]
   2398a:	f3 0f 11 75 ac       	movss  DWORD PTR [rbp-0x54],xmm6
   2398f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   23992:	89 c6                	mov    esi,eax
   23994:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   23998:	e8 e5 31 00 00       	call   26b82 <Mat4<float>::operator[](unsigned int)>
   2399d:	be 02 00 00 00       	mov    esi,0x2
   239a2:	48 89 c7             	mov    rdi,rax
   239a5:	e8 f6 31 00 00       	call   26ba0 <v4<float>::operator[](unsigned int)>
   239aa:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   239ae:	f3 0f 58 45 ac       	addss  xmm0,DWORD PTR [rbp-0x54]
   239b3:	f3 0f 11 45 ac       	movss  DWORD PTR [rbp-0x54],xmm0
   239b8:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   239bb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   239bf:	89 d6                	mov    esi,edx
   239c1:	48 89 c7             	mov    rdi,rax
   239c4:	e8 35 31 00 00       	call   26afe <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   239c9:	f3 0f 10 45 ac       	movss  xmm0,DWORD PTR [rbp-0x54]
   239ce:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   239d2:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   239d5:	8d 50 ff             	lea    edx,[rax-0x1]
   239d8:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
   239db:	85 c0                	test   eax,eax
   239dd:	0f 95 c0             	setne  al
   239e0:	84 c0                	test   al,al
   239e2:	75 87                	jne    2396b <ExtractPlanesFromMat(Mat4<float>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x239>
   239e4:	c7 45 fc 04 00 00 00 	mov    DWORD PTR [rbp-0x4],0x4
   239eb:	eb 6b                	jmp    23a58 <ExtractPlanesFromMat(Mat4<float>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x326>
   239ed:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   239f0:	89 c6                	mov    esi,eax
   239f2:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   239f6:	e8 87 31 00 00       	call   26b82 <Mat4<float>::operator[](unsigned int)>
   239fb:	be 03 00 00 00       	mov    esi,0x3
   23a00:	48 89 c7             	mov    rdi,rax
   23a03:	e8 98 31 00 00       	call   26ba0 <v4<float>::operator[](unsigned int)>
   23a08:	f3 0f 10 18          	movss  xmm3,DWORD PTR [rax]
   23a0c:	f3 0f 11 5d ac       	movss  DWORD PTR [rbp-0x54],xmm3
   23a11:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   23a14:	89 c6                	mov    esi,eax
   23a16:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
   23a1a:	e8 63 31 00 00       	call   26b82 <Mat4<float>::operator[](unsigned int)>
   23a1f:	be 02 00 00 00       	mov    esi,0x2
   23a24:	48 89 c7             	mov    rdi,rax
   23a27:	e8 74 31 00 00       	call   26ba0 <v4<float>::operator[](unsigned int)>
   23a2c:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   23a30:	f3 0f 10 5d ac       	movss  xmm3,DWORD PTR [rbp-0x54]
   23a35:	f3 0f 5c d8          	subss  xmm3,xmm0
   23a39:	f3 0f 11 5d ac       	movss  DWORD PTR [rbp-0x54],xmm3
   23a3e:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
   23a41:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   23a45:	89 d6                	mov    esi,edx
   23a47:	48 89 c7             	mov    rdi,rax
   23a4a:	e8 af 30 00 00       	call   26afe <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>
   23a4f:	f3 0f 10 5d ac       	movss  xmm3,DWORD PTR [rbp-0x54]
   23a54:	f3 0f 11 18          	movss  DWORD PTR [rax],xmm3
   23a58:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   23a5b:	8d 50 ff             	lea    edx,[rax-0x1]
   23a5e:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
   23a61:	85 c0                	test   eax,eax
   23a63:	0f 95 c0             	setne  al
   23a66:	84 c0                	test   al,al
   23a68:	75 83                	jne    239ed <ExtractPlanesFromMat(Mat4<float>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)+0x2bb>
   23a6a:	90                   	nop
   23a6b:	90                   	nop
   23a6c:	c9                   	leave  
   23a6d:	c3                   	ret    

0000000000023a6e <AABBFrustumIntersect(glm::vec<4, float, (glm::qualifier)0> (&) [6], AABB&)>:
   23a6e:	55                   	push   rbp
   23a6f:	48 89 e5             	mov    rbp,rsp
   23a72:	48 83 ec 40          	sub    rsp,0x40
   23a76:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   23a7a:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   23a7e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   23a87:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   23a8b:	31 c0                	xor    eax,eax
   23a8d:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [rbp-0x28],0x0
   23a94:	e9 4c 03 00 00       	jmp    23de5 <AABBFrustumIntersect(glm::vec<4, float, (glm::qualifier)0> (&) [6], AABB&)+0x377>
   23a99:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [rbp-0x24],0x0
   23aa0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23aa4:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   23aa9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23aad:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   23ab2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23ab6:	8b 10                	mov    edx,DWORD PTR [rax]
   23ab8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23abc:	f3 0f 10 1d 80 8f 01 00 	movss  xmm3,DWORD PTR [rip+0x18f80]        # 3ca44 <NANO_SEC+0x177c>
   23ac4:	0f 28 d1             	movaps xmm2,xmm1
   23ac7:	0f 28 c8             	movaps xmm1,xmm0
   23aca:	66 0f 6e c2          	movd   xmm0,edx
   23ace:	48 89 c7             	mov    rdi,rax
   23ad1:	e8 ea 30 00 00       	call   26bc0 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   23ad6:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   23ad9:	48 c1 e0 04          	shl    rax,0x4
   23add:	48 89 c2             	mov    rdx,rax
   23ae0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   23ae4:	48 01 c2             	add    rdx,rax
   23ae7:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23aeb:	48 89 c6             	mov    rsi,rax
   23aee:	48 89 d7             	mov    rdi,rdx
   23af1:	e8 20 31 00 00       	call   26c16 <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   23af6:	66 0f ef c9          	pxor   xmm1,xmm1
   23afa:	0f 2f c8             	comiss xmm1,xmm0
   23afd:	0f 97 c0             	seta   al
   23b00:	0f b6 c0             	movzx  eax,al
   23b03:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   23b06:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23b0a:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   23b0f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23b13:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   23b18:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23b1c:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   23b1f:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23b23:	f3 0f 10 1d 19 8f 01 00 	movss  xmm3,DWORD PTR [rip+0x18f19]        # 3ca44 <NANO_SEC+0x177c>
   23b2b:	0f 28 d1             	movaps xmm2,xmm1
   23b2e:	0f 28 c8             	movaps xmm1,xmm0
   23b31:	66 0f 6e c2          	movd   xmm0,edx
   23b35:	48 89 c7             	mov    rdi,rax
   23b38:	e8 83 30 00 00       	call   26bc0 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   23b3d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   23b40:	48 c1 e0 04          	shl    rax,0x4
   23b44:	48 89 c2             	mov    rdx,rax
   23b47:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   23b4b:	48 01 c2             	add    rdx,rax
   23b4e:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23b52:	48 89 c6             	mov    rsi,rax
   23b55:	48 89 d7             	mov    rdi,rdx
   23b58:	e8 b9 30 00 00       	call   26c16 <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   23b5d:	66 0f ef c9          	pxor   xmm1,xmm1
   23b61:	0f 2f c8             	comiss xmm1,xmm0
   23b64:	0f 97 c0             	seta   al
   23b67:	0f b6 c0             	movzx  eax,al
   23b6a:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   23b6d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23b71:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   23b76:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23b7a:	f3 0f 10 40 10       	movss  xmm0,DWORD PTR [rax+0x10]
   23b7f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23b83:	8b 10                	mov    edx,DWORD PTR [rax]
   23b85:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23b89:	f3 0f 10 1d b3 8e 01 00 	movss  xmm3,DWORD PTR [rip+0x18eb3]        # 3ca44 <NANO_SEC+0x177c>
   23b91:	0f 28 d1             	movaps xmm2,xmm1
   23b94:	0f 28 c8             	movaps xmm1,xmm0
   23b97:	66 0f 6e c2          	movd   xmm0,edx
   23b9b:	48 89 c7             	mov    rdi,rax
   23b9e:	e8 1d 30 00 00       	call   26bc0 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   23ba3:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   23ba6:	48 c1 e0 04          	shl    rax,0x4
   23baa:	48 89 c2             	mov    rdx,rax
   23bad:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   23bb1:	48 01 c2             	add    rdx,rax
   23bb4:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23bb8:	48 89 c6             	mov    rsi,rax
   23bbb:	48 89 d7             	mov    rdi,rdx
   23bbe:	e8 53 30 00 00       	call   26c16 <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   23bc3:	66 0f ef c9          	pxor   xmm1,xmm1
   23bc7:	0f 2f c8             	comiss xmm1,xmm0
   23bca:	0f 97 c0             	seta   al
   23bcd:	0f b6 c0             	movzx  eax,al
   23bd0:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   23bd3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23bd7:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   23bdc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23be0:	f3 0f 10 40 10       	movss  xmm0,DWORD PTR [rax+0x10]
   23be5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23be9:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   23bec:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23bf0:	f3 0f 10 1d 4c 8e 01 00 	movss  xmm3,DWORD PTR [rip+0x18e4c]        # 3ca44 <NANO_SEC+0x177c>
   23bf8:	0f 28 d1             	movaps xmm2,xmm1
   23bfb:	0f 28 c8             	movaps xmm1,xmm0
   23bfe:	66 0f 6e c2          	movd   xmm0,edx
   23c02:	48 89 c7             	mov    rdi,rax
   23c05:	e8 b6 2f 00 00       	call   26bc0 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   23c0a:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   23c0d:	48 c1 e0 04          	shl    rax,0x4
   23c11:	48 89 c2             	mov    rdx,rax
   23c14:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   23c18:	48 01 c2             	add    rdx,rax
   23c1b:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23c1f:	48 89 c6             	mov    rsi,rax
   23c22:	48 89 d7             	mov    rdi,rdx
   23c25:	e8 ec 2f 00 00       	call   26c16 <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   23c2a:	66 0f ef c9          	pxor   xmm1,xmm1
   23c2e:	0f 2f c8             	comiss xmm1,xmm0
   23c31:	0f 97 c0             	seta   al
   23c34:	0f b6 c0             	movzx  eax,al
   23c37:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   23c3a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23c3e:	f3 0f 10 48 14       	movss  xmm1,DWORD PTR [rax+0x14]
   23c43:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23c47:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   23c4c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23c50:	8b 10                	mov    edx,DWORD PTR [rax]
   23c52:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23c56:	f3 0f 10 1d e6 8d 01 00 	movss  xmm3,DWORD PTR [rip+0x18de6]        # 3ca44 <NANO_SEC+0x177c>
   23c5e:	0f 28 d1             	movaps xmm2,xmm1
   23c61:	0f 28 c8             	movaps xmm1,xmm0
   23c64:	66 0f 6e c2          	movd   xmm0,edx
   23c68:	48 89 c7             	mov    rdi,rax
   23c6b:	e8 50 2f 00 00       	call   26bc0 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   23c70:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   23c73:	48 c1 e0 04          	shl    rax,0x4
   23c77:	48 89 c2             	mov    rdx,rax
   23c7a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   23c7e:	48 01 c2             	add    rdx,rax
   23c81:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23c85:	48 89 c6             	mov    rsi,rax
   23c88:	48 89 d7             	mov    rdi,rdx
   23c8b:	e8 86 2f 00 00       	call   26c16 <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   23c90:	66 0f ef c9          	pxor   xmm1,xmm1
   23c94:	0f 2f c8             	comiss xmm1,xmm0
   23c97:	0f 97 c0             	seta   al
   23c9a:	0f b6 c0             	movzx  eax,al
   23c9d:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   23ca0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23ca4:	f3 0f 10 48 14       	movss  xmm1,DWORD PTR [rax+0x14]
   23ca9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23cad:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   23cb2:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23cb6:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   23cb9:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23cbd:	f3 0f 10 1d 7f 8d 01 00 	movss  xmm3,DWORD PTR [rip+0x18d7f]        # 3ca44 <NANO_SEC+0x177c>
   23cc5:	0f 28 d1             	movaps xmm2,xmm1
   23cc8:	0f 28 c8             	movaps xmm1,xmm0
   23ccb:	66 0f 6e c2          	movd   xmm0,edx
   23ccf:	48 89 c7             	mov    rdi,rax
   23cd2:	e8 e9 2e 00 00       	call   26bc0 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   23cd7:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   23cda:	48 c1 e0 04          	shl    rax,0x4
   23cde:	48 89 c2             	mov    rdx,rax
   23ce1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   23ce5:	48 01 c2             	add    rdx,rax
   23ce8:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23cec:	48 89 c6             	mov    rsi,rax
   23cef:	48 89 d7             	mov    rdi,rdx
   23cf2:	e8 1f 2f 00 00       	call   26c16 <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   23cf7:	66 0f ef c9          	pxor   xmm1,xmm1
   23cfb:	0f 2f c8             	comiss xmm1,xmm0
   23cfe:	0f 97 c0             	seta   al
   23d01:	0f b6 c0             	movzx  eax,al
   23d04:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   23d07:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23d0b:	f3 0f 10 48 14       	movss  xmm1,DWORD PTR [rax+0x14]
   23d10:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23d14:	f3 0f 10 40 10       	movss  xmm0,DWORD PTR [rax+0x10]
   23d19:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23d1d:	8b 10                	mov    edx,DWORD PTR [rax]
   23d1f:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23d23:	f3 0f 10 1d 19 8d 01 00 	movss  xmm3,DWORD PTR [rip+0x18d19]        # 3ca44 <NANO_SEC+0x177c>
   23d2b:	0f 28 d1             	movaps xmm2,xmm1
   23d2e:	0f 28 c8             	movaps xmm1,xmm0
   23d31:	66 0f 6e c2          	movd   xmm0,edx
   23d35:	48 89 c7             	mov    rdi,rax
   23d38:	e8 83 2e 00 00       	call   26bc0 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   23d3d:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   23d40:	48 c1 e0 04          	shl    rax,0x4
   23d44:	48 89 c2             	mov    rdx,rax
   23d47:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   23d4b:	48 01 c2             	add    rdx,rax
   23d4e:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23d52:	48 89 c6             	mov    rsi,rax
   23d55:	48 89 d7             	mov    rdi,rdx
   23d58:	e8 b9 2e 00 00       	call   26c16 <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   23d5d:	66 0f ef c9          	pxor   xmm1,xmm1
   23d61:	0f 2f c8             	comiss xmm1,xmm0
   23d64:	0f 97 c0             	seta   al
   23d67:	0f b6 c0             	movzx  eax,al
   23d6a:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   23d6d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23d71:	f3 0f 10 48 14       	movss  xmm1,DWORD PTR [rax+0x14]
   23d76:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23d7a:	f3 0f 10 40 10       	movss  xmm0,DWORD PTR [rax+0x10]
   23d7f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   23d83:	8b 50 0c             	mov    edx,DWORD PTR [rax+0xc]
   23d86:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23d8a:	f3 0f 10 1d b2 8c 01 00 	movss  xmm3,DWORD PTR [rip+0x18cb2]        # 3ca44 <NANO_SEC+0x177c>
   23d92:	0f 28 d1             	movaps xmm2,xmm1
   23d95:	0f 28 c8             	movaps xmm1,xmm0
   23d98:	66 0f 6e c2          	movd   xmm0,edx
   23d9c:	48 89 c7             	mov    rdi,rax
   23d9f:	e8 1c 2e 00 00       	call   26bc0 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   23da4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   23da7:	48 c1 e0 04          	shl    rax,0x4
   23dab:	48 89 c2             	mov    rdx,rax
   23dae:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   23db2:	48 01 c2             	add    rdx,rax
   23db5:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   23db9:	48 89 c6             	mov    rsi,rax
   23dbc:	48 89 d7             	mov    rdi,rdx
   23dbf:	e8 52 2e 00 00       	call   26c16 <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   23dc4:	66 0f ef c9          	pxor   xmm1,xmm1
   23dc8:	0f 2f c8             	comiss xmm1,xmm0
   23dcb:	0f 97 c0             	seta   al
   23dce:	0f b6 c0             	movzx  eax,al
   23dd1:	01 45 dc             	add    DWORD PTR [rbp-0x24],eax
   23dd4:	83 7d dc 08          	cmp    DWORD PTR [rbp-0x24],0x8
   23dd8:	75 07                	jne    23de1 <AABBFrustumIntersect(glm::vec<4, float, (glm::qualifier)0> (&) [6], AABB&)+0x373>
   23dda:	b8 00 00 00 00       	mov    eax,0x0
   23ddf:	eb 13                	jmp    23df4 <AABBFrustumIntersect(glm::vec<4, float, (glm::qualifier)0> (&) [6], AABB&)+0x386>
   23de1:	83 45 d8 01          	add    DWORD PTR [rbp-0x28],0x1
   23de5:	83 7d d8 05          	cmp    DWORD PTR [rbp-0x28],0x5
   23de9:	0f 86 aa fc ff ff    	jbe    23a99 <AABBFrustumIntersect(glm::vec<4, float, (glm::qualifier)0> (&) [6], AABB&)+0x2b>
   23def:	b8 01 00 00 00       	mov    eax,0x1
   23df4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   23df8:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   23e01:	74 05                	je     23e08 <AABBFrustumIntersect(glm::vec<4, float, (glm::qualifier)0> (&) [6], AABB&)+0x39a>
   23e03:	e8 d8 06 fe ff       	call   44e0 <__stack_chk_fail@plt>
   23e08:	c9                   	leave  
   23e09:	c3                   	ret    

0000000000023e0a <main>:
   23e0a:	55                   	push   rbp
   23e0b:	48 89 e5             	mov    rbp,rsp
   23e0e:	41 57                	push   r15
   23e10:	41 56                	push   r14
   23e12:	41 55                	push   r13
   23e14:	41 54                	push   r12
   23e16:	53                   	push   rbx
   23e17:	48 81 ec 38 06 00 00 	sub    rsp,0x638
   23e1e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   23e27:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   23e2b:	31 c0                	xor    eax,eax
   23e2d:	48 89 e0             	mov    rax,rsp
   23e30:	48 89 85 a8 f9 ff ff 	mov    QWORD PTR [rbp-0x658],rax
   23e37:	48 c7 85 40 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x4c0],0x0
   23e42:	48 c7 85 48 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x4b8],0x0
   23e4d:	48 c7 85 50 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x4b0],0x0
   23e58:	48 c7 85 58 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x4a8],0x0
   23e63:	48 c7 85 60 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x4a0],0x0
   23e6e:	48 c7 85 70 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x490],0x0
   23e79:	48 c7 85 78 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x488],0x0
   23e84:	48 c7 85 80 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x480],0x0
   23e8f:	48 c7 85 88 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x478],0x0
   23e9a:	48 c7 85 90 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x470],0x0
   23ea5:	48 c7 85 98 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x468],0x0
   23eb0:	48 c7 85 a0 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x460],0x0
   23ebb:	48 c7 85 a8 fb ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x458],0x0
   23ec6:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   23ecd:	48 89 c7             	mov    rdi,rax
   23ed0:	e8 0f c2 ff ff       	call   200e4 <InitSound(SoundSystemState&)>
   23ed5:	48 8d 85 00 fb ff ff 	lea    rax,[rbp-0x500]
   23edc:	48 89 c6             	mov    rsi,rax
   23edf:	48 8d 05 f3 89 01 00 	lea    rax,[rip+0x189f3]        # 3c8d9 <NANO_SEC+0x1611>
   23ee6:	48 89 c7             	mov    rdi,rax
   23ee9:	e8 e2 d0 ff ff       	call   20fd0 <LoadSoundAsset(char const*, SoundAsset*)>
   23eee:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   23ef5:	48 89 c7             	mov    rdi,rax
   23ef8:	e8 bb 17 00 00       	call   256b8 <CommonData::CommonData()>
   23efd:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   23f04:	48 8d 50 08          	lea    rdx,[rax+0x8]
   23f08:	48 8d 05 e3 89 01 00 	lea    rax,[rip+0x189e3]        # 3c8f2 <NANO_SEC+0x162a>
   23f0f:	48 89 c6             	mov    rsi,rax
   23f12:	48 89 d7             	mov    rdi,rdx
   23f15:	e8 84 b3 ff ff       	call   1f29e <LoadRendererInterface(RendererInterface&, char const*)>
   23f1a:	48 8b 85 20 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1e0]
   23f21:	ff d0                	call   rax
   23f23:	89 85 68 fa ff ff    	mov    DWORD PTR [rbp-0x598],eax
   23f29:	8b 85 68 fa ff ff    	mov    eax,DWORD PTR [rbp-0x598]
   23f2f:	48 83 e8 01          	sub    rax,0x1
   23f33:	48 89 85 70 fa ff ff 	mov    QWORD PTR [rbp-0x590],rax
   23f3a:	8b 85 68 fa ff ff    	mov    eax,DWORD PTR [rbp-0x598]
   23f40:	89 c0                	mov    eax,eax
   23f42:	48 89 85 20 fa ff ff 	mov    QWORD PTR [rbp-0x5e0],rax
   23f49:	48 c7 85 28 fa ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x5d8],0x0
   23f54:	8b 85 68 fa ff ff    	mov    eax,DWORD PTR [rbp-0x598]
   23f5a:	89 c0                	mov    eax,eax
   23f5c:	48 89 85 10 fa ff ff 	mov    QWORD PTR [rbp-0x5f0],rax
   23f63:	48 c7 85 18 fa ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x5e8],0x0
   23f6e:	8b 95 68 fa ff ff    	mov    edx,DWORD PTR [rbp-0x598]
   23f74:	b8 10 00 00 00       	mov    eax,0x10
   23f79:	48 83 e8 01          	sub    rax,0x1
   23f7d:	48 01 d0             	add    rax,rdx
   23f80:	bb 10 00 00 00       	mov    ebx,0x10
   23f85:	ba 00 00 00 00       	mov    edx,0x0
   23f8a:	48 f7 f3             	div    rbx
   23f8d:	48 6b c0 10          	imul   rax,rax,0x10
   23f91:	48 29 c4             	sub    rsp,rax
   23f94:	48 89 e0             	mov    rax,rsp
   23f97:	48 83 c0 00          	add    rax,0x0
   23f9b:	48 89 85 78 fa ff ff 	mov    QWORD PTR [rbp-0x588],rax
   23fa2:	48 8b 95 78 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x588]
   23fa9:	8b 85 68 fa ff ff    	mov    eax,DWORD PTR [rbp-0x598]
   23faf:	48 83 e8 01          	sub    rax,0x1
   23fb3:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   23fb6:	48 83 c2 01          	add    rdx,0x1
   23fba:	48 83 e8 01          	sub    rax,0x1
   23fbe:	eb 0b                	jmp    23fcb <main+0x1c1>
   23fc0:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   23fc3:	48 83 c2 01          	add    rdx,0x1
   23fc7:	48 83 e8 01          	sub    rax,0x1
   23fcb:	48 85 c0             	test   rax,rax
   23fce:	79 f0                	jns    23fc0 <main+0x1b6>
   23fd0:	f3 0f 10 05 ac 8a 01 00 	movss  xmm0,DWORD PTR [rip+0x18aac]        # 3ca84 <NANO_SEC+0x17bc>
   23fd8:	f3 0f 11 45 98       	movss  DWORD PTR [rbp-0x68],xmm0
   23fdd:	66 0f ef c0          	pxor   xmm0,xmm0
   23fe1:	f3 0f 11 45 9c       	movss  DWORD PTR [rbp-0x64],xmm0
   23fe6:	66 0f ef c0          	pxor   xmm0,xmm0
   23fea:	f3 0f 11 45 a0       	movss  DWORD PTR [rbp-0x60],xmm0
   23fef:	f3 0f 10 05 4d 8a 01 00 	movss  xmm0,DWORD PTR [rip+0x18a4d]        # 3ca44 <NANO_SEC+0x177c>
   23ff7:	f3 0f 11 45 a4       	movss  DWORD PTR [rbp-0x5c],xmm0
   23ffc:	66 0f ef c0          	pxor   xmm0,xmm0
   24000:	f3 0f 11 45 a8       	movss  DWORD PTR [rbp-0x58],xmm0
   24005:	66 0f ef c0          	pxor   xmm0,xmm0
   24009:	f3 0f 11 45 ac       	movss  DWORD PTR [rbp-0x54],xmm0
   2400e:	66 0f ef c0          	pxor   xmm0,xmm0
   24012:	f3 0f 11 45 b0       	movss  DWORD PTR [rbp-0x50],xmm0
   24017:	66 0f ef c0          	pxor   xmm0,xmm0
   2401b:	f3 0f 11 45 b4       	movss  DWORD PTR [rbp-0x4c],xmm0
   24020:	66 0f ef c0          	pxor   xmm0,xmm0
   24024:	f3 0f 11 45 b8       	movss  DWORD PTR [rbp-0x48],xmm0
   24029:	c6 45 bc 00          	mov    BYTE PTR [rbp-0x44],0x0
   2402d:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   24034:	48 89 85 88 fd ff ff 	mov    QWORD PTR [rbp-0x278],rax
   2403b:	48 8d 05 3f dc ff ff 	lea    rax,[rip+0xffffffffffffdc3f]        # 21c81 <W(void*)>
   24042:	48 89 85 80 fd ff ff 	mov    QWORD PTR [rbp-0x280],rax
   24049:	c7 85 90 fd ff ff 57 00 00 00 	mov    DWORD PTR [rbp-0x270],0x57
   24053:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   2405a:	48 89 85 a0 fd ff ff 	mov    QWORD PTR [rbp-0x260],rax
   24061:	48 8d 05 3e dc ff ff 	lea    rax,[rip+0xffffffffffffdc3e]        # 21ca6 <A(void*)>
   24068:	48 89 85 98 fd ff ff 	mov    QWORD PTR [rbp-0x268],rax
   2406f:	c7 85 a8 fd ff ff 41 00 00 00 	mov    DWORD PTR [rbp-0x258],0x41
   24079:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   24080:	48 89 85 b8 fd ff ff 	mov    QWORD PTR [rbp-0x248],rax
   24087:	48 8d 05 3d dc ff ff 	lea    rax,[rip+0xffffffffffffdc3d]        # 21ccb <S(void*)>
   2408e:	48 89 85 b0 fd ff ff 	mov    QWORD PTR [rbp-0x250],rax
   24095:	c7 85 c0 fd ff ff 53 00 00 00 	mov    DWORD PTR [rbp-0x240],0x53
   2409f:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   240a6:	48 89 85 d0 fd ff ff 	mov    QWORD PTR [rbp-0x230],rax
   240ad:	48 8d 05 3c dc ff ff 	lea    rax,[rip+0xffffffffffffdc3c]        # 21cf0 <D(void*)>
   240b4:	48 89 85 c8 fd ff ff 	mov    QWORD PTR [rbp-0x238],rax
   240bb:	c7 85 d8 fd ff ff 44 00 00 00 	mov    DWORD PTR [rbp-0x228],0x44
   240c5:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   240cc:	48 89 85 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],rax
   240d3:	48 8d 05 3b dc ff ff 	lea    rax,[rip+0xffffffffffffdc3b]        # 21d15 <Space(void*)>
   240da:	48 89 85 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rax
   240e1:	c7 85 f0 fd ff ff 20 00 00 00 	mov    DWORD PTR [rbp-0x210],0x20
   240eb:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   240f2:	48 89 85 00 fe ff ff 	mov    QWORD PTR [rbp-0x200],rax
   240f9:	48 8d 05 de dc ff ff 	lea    rax,[rip+0xffffffffffffdcde]        # 21dde <Shift(void*)>
   24100:	48 89 85 f8 fd ff ff 	mov    QWORD PTR [rbp-0x208],rax
   24107:	c7 85 08 fe ff ff 54 01 00 00 	mov    DWORD PTR [rbp-0x1f8],0x154
   24111:	c6 45 c0 01          	mov    BYTE PTR [rbp-0x40],0x1
   24115:	c7 85 44 ff ff ff 38 04 00 00 	mov    DWORD PTR [rbp-0xbc],0x438
   2411f:	c7 85 40 ff ff ff 80 07 00 00 	mov    DWORD PTR [rbp-0xc0],0x780
   24129:	48 8d 05 d0 87 01 00 	lea    rax,[rip+0x187d0]        # 3c900 <NANO_SEC+0x1638>
   24130:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
   24137:	48 8d 05 6c da ff ff 	lea    rax,[rip+0xffffffffffffda6c]        # 21baa <RendererAllocate(void*, unsigned int)>
   2413e:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
   24145:	48 8d 05 7a da ff ff 	lea    rax,[rip+0xffffffffffffda7a]        # 21bc6 <RendererAlignedAllocate(void*, unsigned int, unsigned int)>
   2414c:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
   24153:	48 8d 05 91 da ff ff 	lea    rax,[rip+0xffffffffffffda91]        # 21beb <RendererFree(void*, void*)>
   2415a:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   2415e:	48 8d 05 06 db ff ff 	lea    rax,[rip+0xffffffffffffdb06]        # 21c6b <OnClose(void*)>
   24165:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
   24169:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   24170:	48 89 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rax
   24177:	48 8d 05 85 dc ff ff 	lea    rax,[rip+0xffffffffffffdc85]        # 21e03 <MousePosCallBack(void*, double, double)>
   2417e:	48 89 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rax
   24185:	48 8d 05 7e da ff ff 	lea    rax,[rip+0xffffffffffffda7e]        # 21c0a <OnResize(void*, unsigned int, unsigned int)>
   2418c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   24190:	48 8d 85 80 fd ff ff 	lea    rax,[rbp-0x280]
   24197:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
   2419e:	c7 85 58 ff ff ff 06 00 00 00 	mov    DWORD PTR [rbp-0xa8],0x6
   241a8:	48 8b 8d 38 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x1c8]
   241af:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   241b6:	48 8d 90 30 01 00 00 	lea    rdx,[rax+0x130]
   241bd:	48 8b 85 78 fa ff ff 	mov    rax,QWORD PTR [rbp-0x588]
   241c4:	48 89 d6             	mov    rsi,rdx
   241c7:	48 89 c7             	mov    rdi,rax
   241ca:	ff d1                	call   rcx
   241cc:	48 89 85 80 fa ff ff 	mov    QWORD PTR [rbp-0x580],rax
   241d3:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   241da:	48 89 85 10 fe ff ff 	mov    QWORD PTR [rbp-0x1f0],rax
   241e1:	48 8b 85 30 fe ff ff 	mov    rax,QWORD PTR [rbp-0x1d0]
   241e8:	ff d0                	call   rax
   241ea:	89 85 6c fa ff ff    	mov    DWORD PTR [rbp-0x594],eax
   241f0:	8b 85 6c fa ff ff    	mov    eax,DWORD PTR [rbp-0x594]
   241f6:	01 c0                	add    eax,eax
   241f8:	89 c0                	mov    eax,eax
   241fa:	48 83 e8 01          	sub    rax,0x1
   241fe:	48 89 85 88 fa ff ff 	mov    QWORD PTR [rbp-0x578],rax
   24205:	8b 85 6c fa ff ff    	mov    eax,DWORD PTR [rbp-0x594]
   2420b:	01 c0                	add    eax,eax
   2420d:	89 c0                	mov    eax,eax
   2420f:	48 89 85 00 fa ff ff 	mov    QWORD PTR [rbp-0x600],rax
   24216:	48 c7 85 08 fa ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x5f8],0x0
   24221:	8b 85 6c fa ff ff    	mov    eax,DWORD PTR [rbp-0x594]
   24227:	01 c0                	add    eax,eax
   24229:	89 c0                	mov    eax,eax
   2422b:	48 89 85 f0 f9 ff ff 	mov    QWORD PTR [rbp-0x610],rax
   24232:	48 c7 85 f8 f9 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x608],0x0
   2423d:	8b 85 6c fa ff ff    	mov    eax,DWORD PTR [rbp-0x594]
   24243:	01 c0                	add    eax,eax
   24245:	89 c2                	mov    edx,eax
   24247:	b8 10 00 00 00       	mov    eax,0x10
   2424c:	48 83 e8 01          	sub    rax,0x1
   24250:	48 01 d0             	add    rax,rdx
   24253:	bb 10 00 00 00       	mov    ebx,0x10
   24258:	ba 00 00 00 00       	mov    edx,0x0
   2425d:	48 f7 f3             	div    rbx
   24260:	48 6b c0 10          	imul   rax,rax,0x10
   24264:	48 29 c4             	sub    rsp,rax
   24267:	48 89 e0             	mov    rax,rsp
   2426a:	48 83 c0 00          	add    rax,0x0
   2426e:	48 89 85 90 fa ff ff 	mov    QWORD PTR [rbp-0x570],rax
   24275:	48 8b 95 90 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x570]
   2427c:	8b 85 6c fa ff ff    	mov    eax,DWORD PTR [rbp-0x594]
   24282:	01 c0                	add    eax,eax
   24284:	89 c0                	mov    eax,eax
   24286:	48 83 e8 01          	sub    rax,0x1
   2428a:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   2428d:	48 83 c2 01          	add    rdx,0x1
   24291:	48 83 e8 01          	sub    rax,0x1
   24295:	eb 0b                	jmp    242a2 <main+0x498>
   24297:	c6 02 00             	mov    BYTE PTR [rdx],0x0
   2429a:	48 83 c2 01          	add    rdx,0x1
   2429e:	48 83 e8 01          	sub    rax,0x1
   242a2:	48 85 c0             	test   rax,rax
   242a5:	79 f0                	jns    24297 <main+0x48d>
   242a7:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
   242ae:	48 8b 95 80 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x580]
   242b5:	48 8b 85 90 fa ff ff 	mov    rax,QWORD PTR [rbp-0x570]
   242bc:	48 89 d6             	mov    rsi,rdx
   242bf:	48 89 c7             	mov    rdi,rax
   242c2:	ff d1                	call   rcx
   242c4:	48 89 85 98 fa ff ff 	mov    QWORD PTR [rbp-0x568],rax
   242cb:	48 8b 8d 88 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x178]
   242d2:	8b 95 6c fa ff ff    	mov    edx,DWORD PTR [rbp-0x594]
   242d8:	48 8b 85 90 fa ff ff 	mov    rax,QWORD PTR [rbp-0x570]
   242df:	48 01 c2             	add    rdx,rax
   242e2:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   242e9:	48 89 c6             	mov    rsi,rax
   242ec:	48 89 d7             	mov    rdi,rdx
   242ef:	ff d1                	call   rcx
   242f1:	48 89 85 a0 fa ff ff 	mov    QWORD PTR [rbp-0x560],rax
   242f8:	48 8d 85 b0 fb ff ff 	lea    rax,[rbp-0x450]
   242ff:	48 89 c7             	mov    rdi,rax
   24302:	e8 21 15 00 00       	call   25828 <Scene::Scene()>
   24307:	48 8d 95 b0 fb ff ff 	lea    rdx,[rbp-0x450]
   2430e:	48 8b 8d 80 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x580]
   24315:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   2431c:	48 83 c0 08          	add    rax,0x8
   24320:	48 89 ce             	mov    rsi,rcx
   24323:	48 89 c7             	mov    rdi,rax
   24326:	e8 04 e5 ff ff       	call   2282f <LoadSponza(RendererInterface*, Renderer*, Scene&)>
   2432b:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
   24332:	48 8b 95 98 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x568]
   24339:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   24340:	48 89 d6             	mov    rsi,rdx
   24343:	48 89 c7             	mov    rdi,rax
   24346:	ff d1                	call   rcx
   24348:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
   2434f:	48 8b 85 98 fa ff ff 	mov    rax,QWORD PTR [rbp-0x568]
   24356:	48 89 c7             	mov    rdi,rax
   24359:	ff d2                	call   rdx
   2435b:	48 89 85 a8 fa ff ff 	mov    QWORD PTR [rbp-0x558],rax
   24362:	48 8b 85 a8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x558]
   24369:	ba c0 00 00 00       	mov    edx,0xc0
   2436e:	be 00 00 00 00       	mov    esi,0x0
   24373:	48 89 c7             	mov    rdi,rax
   24376:	e8 a9 ae ff ff       	call   1f224 <MemSet(void*, signed char, unsigned int)>
   2437b:	f3 0f 10 05 c1 86 01 00 	movss  xmm0,DWORD PTR [rip+0x186c1]        # 3ca44 <NANO_SEC+0x177c>
   24383:	f3 0f 11 85 20 fb ff ff 	movss  DWORD PTR [rbp-0x4e0],xmm0
   2438b:	48 8d 95 20 fb ff ff 	lea    rdx,[rbp-0x4e0]
   24392:	48 8d 85 a0 fc ff ff 	lea    rax,[rbp-0x360]
   24399:	48 89 d6             	mov    rsi,rdx
   2439c:	48 89 c7             	mov    rdi,rax
   2439f:	e8 a0 2d 00 00       	call   27144 <glm::mat<4, 4, float, (glm::qualifier)0>::mat(float const&)>
   243a4:	48 8b 8d a8 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x558]
   243ab:	48 8b 85 a0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x360]
   243b2:	48 8b 95 a8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x358]
   243b9:	48 89 01             	mov    QWORD PTR [rcx],rax
   243bc:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   243c0:	48 8b 85 b0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x350]
   243c7:	48 8b 95 b8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x348]
   243ce:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   243d2:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
   243d6:	48 8b 85 c0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x340]
   243dd:	48 8b 95 c8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x338]
   243e4:	48 89 41 20          	mov    QWORD PTR [rcx+0x20],rax
   243e8:	48 89 51 28          	mov    QWORD PTR [rcx+0x28],rdx
   243ec:	48 8b 85 d0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x330]
   243f3:	48 8b 95 d8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x328]
   243fa:	48 89 41 30          	mov    QWORD PTR [rcx+0x30],rax
   243fe:	48 89 51 38          	mov    QWORD PTR [rcx+0x38],rdx
   24402:	48 8b 95 b0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x150]
   24409:	48 8b 85 98 fa ff ff 	mov    rax,QWORD PTR [rbp-0x568]
   24410:	48 89 c7             	mov    rdi,rax
   24413:	ff d2                	call   rdx
   24415:	48 8b 95 b8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x148]
   2441c:	48 8b 85 98 fa ff ff 	mov    rax,QWORD PTR [rbp-0x568]
   24423:	48 89 c7             	mov    rdi,rax
   24426:	ff d2                	call   rdx
   24428:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   2442f:	48 8b 95 98 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x568]
   24436:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   2443d:	48 89 d6             	mov    rsi,rdx
   24440:	48 89 c7             	mov    rdi,rax
   24443:	ff d1                	call   rcx
   24445:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
   2444c:	48 8b 95 a0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x560]
   24453:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   2445a:	48 89 d6             	mov    rsi,rdx
   2445d:	48 89 c7             	mov    rdi,rax
   24460:	ff d1                	call   rcx
   24462:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
   24469:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   24470:	48 89 c7             	mov    rdi,rax
   24473:	ff d2                	call   rdx
   24475:	48 89 85 b0 fa ff ff 	mov    QWORD PTR [rbp-0x550],rax
   2447c:	48 8b 85 b0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x550]
   24483:	ba c0 00 00 00       	mov    edx,0xc0
   24488:	be 00 00 00 00       	mov    esi,0x0
   2448d:	48 89 c7             	mov    rdi,rax
   24490:	e8 8f ad ff ff       	call   1f224 <MemSet(void*, signed char, unsigned int)>
   24495:	f3 0f 10 05 a7 85 01 00 	movss  xmm0,DWORD PTR [rip+0x185a7]        # 3ca44 <NANO_SEC+0x177c>
   2449d:	f3 0f 11 85 20 fb ff ff 	movss  DWORD PTR [rbp-0x4e0],xmm0
   244a5:	48 8d 95 20 fb ff ff 	lea    rdx,[rbp-0x4e0]
   244ac:	48 8d 85 e0 fc ff ff 	lea    rax,[rbp-0x320]
   244b3:	48 89 d6             	mov    rsi,rdx
   244b6:	48 89 c7             	mov    rdi,rax
   244b9:	e8 86 2c 00 00       	call   27144 <glm::mat<4, 4, float, (glm::qualifier)0>::mat(float const&)>
   244be:	48 8b 8d b0 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x550]
   244c5:	48 8b 85 e0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x320]
   244cc:	48 8b 95 e8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x318]
   244d3:	48 89 01             	mov    QWORD PTR [rcx],rax
   244d6:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   244da:	48 8b 85 f0 fc ff ff 	mov    rax,QWORD PTR [rbp-0x310]
   244e1:	48 8b 95 f8 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x308]
   244e8:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   244ec:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
   244f0:	48 8b 85 00 fd ff ff 	mov    rax,QWORD PTR [rbp-0x300]
   244f7:	48 8b 95 08 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2f8]
   244fe:	48 89 41 20          	mov    QWORD PTR [rcx+0x20],rax
   24502:	48 89 51 28          	mov    QWORD PTR [rcx+0x28],rdx
   24506:	48 8b 85 10 fd ff ff 	mov    rax,QWORD PTR [rbp-0x2f0]
   2450d:	48 8b 95 18 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x2e8]
   24514:	48 89 41 30          	mov    QWORD PTR [rcx+0x30],rax
   24518:	48 89 51 38          	mov    QWORD PTR [rcx+0x38],rdx
   2451c:	48 8b 95 b0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x150]
   24523:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   2452a:	48 89 c7             	mov    rdi,rax
   2452d:	ff d2                	call   rdx
   2452f:	48 8b 95 b8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x148]
   24536:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   2453d:	48 89 c7             	mov    rdi,rax
   24540:	ff d2                	call   rdx
   24542:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   24549:	48 8b 95 a0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x560]
   24550:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   24557:	48 89 d6             	mov    rsi,rdx
   2455a:	48 89 c7             	mov    rdi,rax
   2455d:	ff d1                	call   rcx
   2455f:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
   24566:	48 8b 95 98 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x568]
   2456d:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   24574:	48 89 d6             	mov    rsi,rdx
   24577:	48 89 c7             	mov    rdi,rax
   2457a:	ff d1                	call   rcx
   2457c:	48 8b 95 c8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x138]
   24583:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   2458a:	48 89 c7             	mov    rdi,rax
   2458d:	ff d2                	call   rdx
   2458f:	48 8b 85 98 fa ff ff 	mov    rax,QWORD PTR [rbp-0x568]
   24596:	48 89 85 50 fc ff ff 	mov    QWORD PTR [rbp-0x3b0],rax
   2459d:	48 8b 85 a0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x560]
   245a4:	48 89 85 58 fc ff ff 	mov    QWORD PTR [rbp-0x3a8],rax
   245ab:	c6 85 57 fa ff ff 01 	mov    BYTE PTR [rbp-0x5a9],0x1
   245b2:	c7 85 64 fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x59c],0x0
   245bc:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   245c3:	f3 0f 10 1d cd 84 01 00 	movss  xmm3,DWORD PTR [rip+0x184cd]        # 3ca98 <NANO_SEC+0x17d0>
   245cb:	f3 0f 10 15 c9 84 01 00 	movss  xmm2,DWORD PTR [rip+0x184c9]        # 3ca9c <NANO_SEC+0x17d4>
   245d3:	f3 0f 10 0d c5 84 01 00 	movss  xmm1,DWORD PTR [rip+0x184c5]        # 3caa0 <NANO_SEC+0x17d8>
   245db:	8b 05 c3 84 01 00    	mov    eax,DWORD PTR [rip+0x184c3]        # 3caa4 <NANO_SEC+0x17dc>
   245e1:	66 0f 6e c0          	movd   xmm0,eax
   245e5:	48 89 d7             	mov    rdi,rdx
   245e8:	e8 18 d3 ff ff       	call   21905 <PerspectiveMatrix_(float, float, float, float)>
   245ed:	c7 85 60 fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x5a0],0x0
   245f7:	eb 5f                	jmp    24658 <main+0x84e>
   245f9:	48 8d 85 00 fb ff ff 	lea    rax,[rbp-0x500]
   24600:	48 89 85 20 fb ff ff 	mov    QWORD PTR [rbp-0x4e0],rax
   24607:	c7 85 28 fb ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x4d8],0x0
   24611:	c6 85 30 fb ff ff 01 	mov    BYTE PTR [rbp-0x4d0],0x1
   24618:	f3 0f 10 05 6c 84 01 00 	movss  xmm0,DWORD PTR [rip+0x1846c]        # 3ca8c <NANO_SEC+0x17c4>
   24620:	f3 0f 11 85 2c fb ff ff 	movss  DWORD PTR [rbp-0x4d4],xmm0
   24628:	48 8d 85 40 fb ff ff 	lea    rax,[rbp-0x4c0]
   2462f:	48 83 ec 08          	sub    rsp,0x8
   24633:	ff b5 30 fb ff ff    	push   QWORD PTR [rbp-0x4d0]
   24639:	ff b5 28 fb ff ff    	push   QWORD PTR [rbp-0x4d8]
   2463f:	ff b5 20 fb ff ff    	push   QWORD PTR [rbp-0x4e0]
   24645:	48 89 c7             	mov    rdi,rax
   24648:	e8 e1 be ff ff       	call   2052e <PushSound(SoundTable&, SoundInstance)>
   2464d:	48 83 c4 20          	add    rsp,0x20
   24651:	83 85 60 fa ff ff 01 	add    DWORD PTR [rbp-0x5a0],0x1
   24658:	83 bd 60 fa ff ff 00 	cmp    DWORD PTR [rbp-0x5a0],0x0
   2465f:	74 98                	je     245f9 <main+0x7ef>
   24661:	48 8d 85 b0 fb ff ff 	lea    rax,[rbp-0x450]
   24668:	48 83 c0 48          	add    rax,0x48
   2466c:	48 89 c7             	mov    rdi,rax
   2466f:	e8 7a 2b 00 00       	call   271ee <std::vector<AABB, std::allocator<AABB> >::size() const>
   24674:	48 89 c2             	mov    rdx,rax
   24677:	48 89 d0             	mov    rax,rdx
   2467a:	48 01 c0             	add    rax,rax
   2467d:	48 01 d0             	add    rax,rdx
   24680:	48 c1 e0 02          	shl    rax,0x2
   24684:	48 89 c6             	mov    rsi,rax
   24687:	48 89 f0             	mov    rax,rsi
   2468a:	48 83 e8 01          	sub    rax,0x1
   2468e:	48 89 85 b8 fa ff ff 	mov    QWORD PTR [rbp-0x548],rax
   24695:	49 89 f4             	mov    r12,rsi
   24698:	41 bd 00 00 00 00    	mov    r13d,0x0
   2469e:	49 69 d5 80 01 00 00 	imul   rdx,r13,0x180
   246a5:	49 6b c4 00          	imul   rax,r12,0x0
   246a9:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   246ad:	b8 80 01 00 00       	mov    eax,0x180
   246b2:	49 f7 e4             	mul    r12
   246b5:	48 01 d1             	add    rcx,rdx
   246b8:	48 89 ca             	mov    rdx,rcx
   246bb:	48 89 f0             	mov    rax,rsi
   246be:	48 01 c0             	add    rax,rax
   246c1:	48 01 f0             	add    rax,rsi
   246c4:	48 c1 e0 04          	shl    rax,0x4
   246c8:	49 89 f6             	mov    r14,rsi
   246cb:	41 bf 00 00 00 00    	mov    r15d,0x0
   246d1:	49 69 d7 80 01 00 00 	imul   rdx,r15,0x180
   246d8:	49 6b c6 00          	imul   rax,r14,0x0
   246dc:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   246e0:	b8 80 01 00 00       	mov    eax,0x180
   246e5:	49 f7 e6             	mul    r14
   246e8:	48 01 d1             	add    rcx,rdx
   246eb:	48 89 ca             	mov    rdx,rcx
   246ee:	48 89 f0             	mov    rax,rsi
   246f1:	48 01 c0             	add    rax,rax
   246f4:	48 01 f0             	add    rax,rsi
   246f7:	48 c1 e0 04          	shl    rax,0x4
   246fb:	48 89 c2             	mov    rdx,rax
   246fe:	b8 10 00 00 00       	mov    eax,0x10
   24703:	48 83 e8 01          	sub    rax,0x1
   24707:	48 01 d0             	add    rax,rdx
   2470a:	bb 10 00 00 00       	mov    ebx,0x10
   2470f:	ba 00 00 00 00       	mov    edx,0x0
   24714:	48 f7 f3             	div    rbx
   24717:	48 6b c0 10          	imul   rax,rax,0x10
   2471b:	48 29 c4             	sub    rsp,rax
   2471e:	48 89 e0             	mov    rax,rsp
   24721:	48 83 c0 03          	add    rax,0x3
   24725:	48 c1 e8 02          	shr    rax,0x2
   24729:	48 c1 e0 02          	shl    rax,0x2
   2472d:	48 89 85 c0 fa ff ff 	mov    QWORD PTR [rbp-0x540],rax
   24734:	48 89 f0             	mov    rax,rsi
   24737:	48 83 e8 01          	sub    rax,0x1
   2473b:	eb 04                	jmp    24741 <main+0x937>
   2473d:	48 83 e8 01          	sub    rax,0x1
   24741:	48 85 c0             	test   rax,rax
   24744:	79 f7                	jns    2473d <main+0x933>
   24746:	b8 05 00 00 00       	mov    eax,0x5
   2474b:	eb 04                	jmp    24751 <main+0x947>
   2474d:	48 83 e8 01          	sub    rax,0x1
   24751:	48 85 c0             	test   rax,rax
   24754:	79 f7                	jns    2474d <main+0x943>
   24756:	48 8d 85 b0 fb ff ff 	lea    rax,[rbp-0x450]
   2475d:	48 83 c0 18          	add    rax,0x18
   24761:	48 89 c7             	mov    rdi,rax
   24764:	e8 47 1e 00 00       	call   265b0 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   24769:	48 89 c2             	mov    rdx,rax
   2476c:	48 83 ea 01          	sub    rdx,0x1
   24770:	48 89 95 c8 fa ff ff 	mov    QWORD PTR [rbp-0x538],rdx
   24777:	48 89 85 e0 f9 ff ff 	mov    QWORD PTR [rbp-0x620],rax
   2477e:	48 c7 85 e8 f9 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x618],0x0
   24789:	48 89 85 d0 f9 ff ff 	mov    QWORD PTR [rbp-0x630],rax
   24790:	48 c7 85 d8 f9 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x628],0x0
   2479b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   247a3:	b8 10 00 00 00       	mov    eax,0x10
   247a8:	48 83 e8 01          	sub    rax,0x1
   247ac:	48 01 d0             	add    rax,rdx
   247af:	bb 10 00 00 00       	mov    ebx,0x10
   247b4:	ba 00 00 00 00       	mov    edx,0x0
   247b9:	48 f7 f3             	div    rbx
   247bc:	48 6b c0 10          	imul   rax,rax,0x10
   247c0:	48 29 c4             	sub    rsp,rax
   247c3:	48 89 e0             	mov    rax,rsp
   247c6:	48 83 c0 03          	add    rax,0x3
   247ca:	48 c1 e8 02          	shr    rax,0x2
   247ce:	48 c1 e0 02          	shl    rax,0x2
   247d2:	48 89 85 d0 fa ff ff 	mov    QWORD PTR [rbp-0x530],rax
   247d9:	48 8d 85 b0 fb ff ff 	lea    rax,[rbp-0x450]
   247e0:	48 89 c7             	mov    rdi,rax
   247e3:	e8 3a 2a 00 00       	call   27222 <std::vector<Mesh, std::allocator<Mesh> >::size() const>
   247e8:	48 89 c2             	mov    rdx,rax
   247eb:	48 83 ea 01          	sub    rdx,0x1
   247ef:	48 89 95 d8 fa ff ff 	mov    QWORD PTR [rbp-0x528],rdx
   247f6:	48 89 85 c0 f9 ff ff 	mov    QWORD PTR [rbp-0x640],rax
   247fd:	48 c7 85 c8 f9 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x638],0x0
   24808:	48 89 85 b0 f9 ff ff 	mov    QWORD PTR [rbp-0x650],rax
   2480f:	48 c7 85 b8 f9 ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x648],0x0
   2481a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   24822:	b8 10 00 00 00       	mov    eax,0x10
   24827:	48 83 e8 01          	sub    rax,0x1
   2482b:	48 01 d0             	add    rax,rdx
   2482e:	bb 10 00 00 00       	mov    ebx,0x10
   24833:	ba 00 00 00 00       	mov    edx,0x0
   24838:	48 f7 f3             	div    rbx
   2483b:	48 6b c0 10          	imul   rax,rax,0x10
   2483f:	48 29 c4             	sub    rsp,rax
   24842:	48 89 e0             	mov    rax,rsp
   24845:	48 83 c0 03          	add    rax,0x3
   24849:	48 c1 e8 02          	shr    rax,0x2
   2484d:	48 c1 e0 02          	shl    rax,0x2
   24851:	48 89 85 e0 fa ff ff 	mov    QWORD PTR [rbp-0x520],rax
   24858:	48 8d 85 b0 fb ff ff 	lea    rax,[rbp-0x450]
   2485f:	48 83 c0 30          	add    rax,0x30
   24863:	48 89 c7             	mov    rdi,rax
   24866:	e8 db 29 00 00       	call   27246 <std::vector<Transform, std::allocator<Transform> >::size() const>
   2486b:	48 89 c1             	mov    rcx,rax
   2486e:	48 89 c8             	mov    rax,rcx
   24871:	48 83 e8 01          	sub    rax,0x1
   24875:	48 89 85 e8 fa ff ff 	mov    QWORD PTR [rbp-0x518],rax
   2487c:	48 89 8d 40 fa ff ff 	mov    QWORD PTR [rbp-0x5c0],rcx
   24883:	48 c7 85 48 fa ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x5b8],0x0
   2488e:	4c 8b 95 40 fa ff ff 	mov    r10,QWORD PTR [rbp-0x5c0]
   24895:	4c 8b 9d 48 fa ff ff 	mov    r11,QWORD PTR [rbp-0x5b8]
   2489c:	49 69 d3 20 01 00 00 	imul   rdx,r11,0x120
   248a3:	49 6b c2 00          	imul   rax,r10,0x0
   248a7:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   248ab:	b8 20 01 00 00       	mov    eax,0x120
   248b0:	49 f7 e2             	mul    r10
   248b3:	48 01 d6             	add    rsi,rdx
   248b6:	48 89 f2             	mov    rdx,rsi
   248b9:	48 89 c8             	mov    rax,rcx
   248bc:	48 c1 e0 03          	shl    rax,0x3
   248c0:	48 01 c8             	add    rax,rcx
   248c3:	48 c1 e0 02          	shl    rax,0x2
   248c7:	48 89 8d 30 fa ff ff 	mov    QWORD PTR [rbp-0x5d0],rcx
   248ce:	48 c7 85 38 fa ff ff 00 00 00 00 	mov    QWORD PTR [rbp-0x5c8],0x0
   248d9:	4c 8b 9d 30 fa ff ff 	mov    r11,QWORD PTR [rbp-0x5d0]
   248e0:	4c 8b a5 38 fa ff ff 	mov    r12,QWORD PTR [rbp-0x5c8]
   248e7:	49 69 d4 20 01 00 00 	imul   rdx,r12,0x120
   248ee:	49 6b c3 00          	imul   rax,r11,0x0
   248f2:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
   248f6:	b8 20 01 00 00       	mov    eax,0x120
   248fb:	49 f7 e3             	mul    r11
   248fe:	48 01 d6             	add    rsi,rdx
   24901:	48 89 f2             	mov    rdx,rsi
   24904:	48 89 c8             	mov    rax,rcx
   24907:	48 c1 e0 03          	shl    rax,0x3
   2490b:	48 01 c8             	add    rax,rcx
   2490e:	48 c1 e0 02          	shl    rax,0x2
   24912:	48 89 c2             	mov    rdx,rax
   24915:	b8 10 00 00 00       	mov    eax,0x10
   2491a:	48 83 e8 01          	sub    rax,0x1
   2491e:	48 01 d0             	add    rax,rdx
   24921:	bb 10 00 00 00       	mov    ebx,0x10
   24926:	ba 00 00 00 00       	mov    edx,0x0
   2492b:	48 f7 f3             	div    rbx
   2492e:	48 6b c0 10          	imul   rax,rax,0x10
   24932:	48 29 c4             	sub    rsp,rax
   24935:	48 89 e0             	mov    rax,rsp
   24938:	48 83 c0 03          	add    rax,0x3
   2493c:	48 c1 e8 02          	shr    rax,0x2
   24940:	48 c1 e0 02          	shl    rax,0x2
   24944:	48 89 85 f0 fa ff ff 	mov    QWORD PTR [rbp-0x510],rax
   2494b:	48 89 c8             	mov    rax,rcx
   2494e:	48 83 e8 01          	sub    rax,0x1
   24952:	eb 04                	jmp    24958 <main+0xb4e>
   24954:	48 83 e8 01          	sub    rax,0x1
   24958:	48 85 c0             	test   rax,rax
   2495b:	79 f7                	jns    24954 <main+0xb4a>
   2495d:	e9 f0 06 00 00       	jmp    25052 <main+0x1248>
   24962:	48 8b 95 80 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x180]
   24969:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   24970:	48 89 c7             	mov    rdi,rax
   24973:	ff d2                	call   rdx
   24975:	84 c0                	test   al,al
   24977:	0f 84 45 05 00 00    	je     24ec2 <main+0x10b8>
   2497d:	f3 0f 10 45 98       	movss  xmm0,DWORD PTR [rbp-0x68]
   24982:	f3 0f 11 85 14 fc ff ff 	movss  DWORD PTR [rbp-0x3ec],xmm0
   2498a:	f3 0f 10 45 9c       	movss  xmm0,DWORD PTR [rbp-0x64]
   2498f:	f3 0f 11 85 18 fc ff ff 	movss  DWORD PTR [rbp-0x3e8],xmm0
   24997:	f3 0f 10 45 a0       	movss  xmm0,DWORD PTR [rbp-0x60]
   2499c:	f3 0f 11 85 1c fc ff ff 	movss  DWORD PTR [rbp-0x3e4],xmm0
   249a4:	f3 0f 10 45 a4       	movss  xmm0,DWORD PTR [rbp-0x5c]
   249a9:	f3 0f 11 85 20 fc ff ff 	movss  DWORD PTR [rbp-0x3e0],xmm0
   249b1:	f3 0f 10 45 a8       	movss  xmm0,DWORD PTR [rbp-0x58]
   249b6:	f3 0f 11 85 24 fc ff ff 	movss  DWORD PTR [rbp-0x3dc],xmm0
   249be:	f3 0f 10 45 ac       	movss  xmm0,DWORD PTR [rbp-0x54]
   249c3:	f3 0f 11 85 28 fc ff ff 	movss  DWORD PTR [rbp-0x3d8],xmm0
   249cb:	66 0f ef c0          	pxor   xmm0,xmm0
   249cf:	f3 0f 11 85 2c fc ff ff 	movss  DWORD PTR [rbp-0x3d4],xmm0
   249d7:	f3 0f 10 05 65 80 01 00 	movss  xmm0,DWORD PTR [rip+0x18065]        # 3ca44 <NANO_SEC+0x177c>
   249df:	f3 0f 11 85 30 fc ff ff 	movss  DWORD PTR [rbp-0x3d0],xmm0
   249e7:	66 0f ef c0          	pxor   xmm0,xmm0
   249eb:	f3 0f 11 85 34 fc ff ff 	movss  DWORD PTR [rbp-0x3cc],xmm0
   249f3:	48 8b 95 20 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3e0]
   249fa:	66 0f 6e 8d 28 fc ff ff 	movd   xmm1,DWORD PTR [rbp-0x3d8]
   24a02:	48 8d 85 14 fc ff ff 	lea    rax,[rbp-0x3ec]
   24a09:	66 48 0f 6e c2       	movq   xmm0,rdx
   24a0e:	48 89 c7             	mov    rdi,rax
   24a11:	e8 32 15 00 00       	call   25f48 <v3<float>::operator+(v3<float>)>
   24a16:	66 48 0f 7e c0       	movq   rax,xmm0
   24a1b:	66 48 0f 7e ca       	movq   rdx,xmm1
   24a20:	48 89 85 38 fc ff ff 	mov    QWORD PTR [rbp-0x3c8],rax
   24a27:	8b 85 40 fc ff ff    	mov    eax,DWORD PTR [rbp-0x3c0]
   24a2d:	83 e0 00             	and    eax,0x0
   24a30:	09 d0                	or     eax,edx
   24a32:	89 85 40 fc ff ff    	mov    DWORD PTR [rbp-0x3c0],eax
   24a38:	48 8d 85 a0 fc ff ff 	lea    rax,[rbp-0x360]
   24a3f:	48 8b b5 2c fc ff ff 	mov    rsi,QWORD PTR [rbp-0x3d4]
   24a46:	66 0f 6e 95 34 fc ff ff 	movd   xmm2,DWORD PTR [rbp-0x3cc]
   24a4e:	48 8b 8d 38 fc ff ff 	mov    rcx,QWORD PTR [rbp-0x3c8]
   24a55:	66 0f 6e 85 40 fc ff ff 	movd   xmm0,DWORD PTR [rbp-0x3c0]
   24a5d:	48 8b 95 14 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3ec]
   24a64:	66 0f 6e 8d 1c fc ff ff 	movd   xmm1,DWORD PTR [rbp-0x3e4]
   24a6c:	66 48 0f 6e e6       	movq   xmm4,rsi
   24a71:	66 0f 6f ea          	movdqa xmm5,xmm2
   24a75:	66 48 0f 6e d1       	movq   xmm2,rcx
   24a7a:	66 0f 6f d8          	movdqa xmm3,xmm0
   24a7e:	66 48 0f 6e c2       	movq   xmm0,rdx
   24a83:	48 89 c7             	mov    rdi,rax
   24a86:	e8 4e cb ff ff       	call   215d9 <LookAt(v3<float>, v3<float>, v3<float>)>
   24a8b:	48 8d 85 e0 fc ff ff 	lea    rax,[rbp-0x320]
   24a92:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   24a99:	ff b5 d8 fc ff ff    	push   QWORD PTR [rbp-0x328]
   24a9f:	ff b5 d0 fc ff ff    	push   QWORD PTR [rbp-0x330]
   24aa5:	ff b5 c8 fc ff ff    	push   QWORD PTR [rbp-0x338]
   24aab:	ff b5 c0 fc ff ff    	push   QWORD PTR [rbp-0x340]
   24ab1:	ff b5 b8 fc ff ff    	push   QWORD PTR [rbp-0x348]
   24ab7:	ff b5 b0 fc ff ff    	push   QWORD PTR [rbp-0x350]
   24abd:	ff b5 a8 fc ff ff    	push   QWORD PTR [rbp-0x358]
   24ac3:	ff b5 a0 fc ff ff    	push   QWORD PTR [rbp-0x360]
   24ac9:	48 89 d6             	mov    rsi,rdx
   24acc:	48 89 c7             	mov    rdi,rax
   24acf:	e8 a6 27 00 00       	call   2727a <Mat4<float>::operator*(Mat4<float>)>
   24ad4:	48 83 c4 40          	add    rsp,0x40
   24ad8:	48 8b 8d 98 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x168]
   24adf:	0f be 85 57 fa ff ff 	movsx  eax,BYTE PTR [rbp-0x5a9]
   24ae6:	48 98                	cdqe   
   24ae8:	48 8b 94 c5 50 fc ff ff 	mov    rdx,QWORD PTR [rbp+rax*8-0x3b0]
   24af0:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   24af7:	48 89 d6             	mov    rsi,rdx
   24afa:	48 89 c7             	mov    rdi,rax
   24afd:	ff d1                	call   rcx
   24aff:	48 8b 95 a8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x158]
   24b06:	0f be 85 57 fa ff ff 	movsx  eax,BYTE PTR [rbp-0x5a9]
   24b0d:	48 98                	cdqe   
   24b0f:	48 8b 84 c5 50 fc ff ff 	mov    rax,QWORD PTR [rbp+rax*8-0x3b0]
   24b17:	48 89 c7             	mov    rdi,rax
   24b1a:	ff d2                	call   rdx
   24b1c:	48 89 85 f8 fa ff ff 	mov    QWORD PTR [rbp-0x508],rax
   24b23:	48 8b 85 f8 fa ff ff 	mov    rax,QWORD PTR [rbp-0x508]
   24b2a:	48 8d 8d e0 fc ff ff 	lea    rcx,[rbp-0x320]
   24b31:	ba 40 00 00 00       	mov    edx,0x40
   24b36:	48 89 ce             	mov    rsi,rcx
   24b39:	48 89 c7             	mov    rdi,rax
   24b3c:	e8 2f f8 fd ff       	call   4370 <memcpy@plt>
   24b41:	48 8b 95 b0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x150]
   24b48:	0f be 85 57 fa ff ff 	movsx  eax,BYTE PTR [rbp-0x5a9]
   24b4f:	48 98                	cdqe   
   24b51:	48 8b 84 c5 50 fc ff ff 	mov    rax,QWORD PTR [rbp+rax*8-0x3b0]
   24b59:	48 89 c7             	mov    rdi,rax
   24b5c:	ff d2                	call   rdx
   24b5e:	48 8d bd 20 fd ff ff 	lea    rdi,[rbp-0x2e0]
   24b65:	48 83 c7 50          	add    rdi,0x50
   24b69:	48 8d b5 20 fd ff ff 	lea    rsi,[rbp-0x2e0]
   24b70:	48 83 c6 40          	add    rsi,0x40
   24b74:	48 8d 8d 20 fd ff ff 	lea    rcx,[rbp-0x2e0]
   24b7b:	48 83 c1 30          	add    rcx,0x30
   24b7f:	48 8d 95 20 fd ff ff 	lea    rdx,[rbp-0x2e0]
   24b86:	48 83 c2 20          	add    rdx,0x20
   24b8a:	48 8d 85 20 fd ff ff 	lea    rax,[rbp-0x2e0]
   24b91:	48 83 c0 10          	add    rax,0x10
   24b95:	4c 8d 95 20 fd ff ff 	lea    r10,[rbp-0x2e0]
   24b9c:	ff b5 18 fd ff ff    	push   QWORD PTR [rbp-0x2e8]
   24ba2:	ff b5 10 fd ff ff    	push   QWORD PTR [rbp-0x2f0]
   24ba8:	ff b5 08 fd ff ff    	push   QWORD PTR [rbp-0x2f8]
   24bae:	ff b5 00 fd ff ff    	push   QWORD PTR [rbp-0x300]
   24bb4:	ff b5 f8 fc ff ff    	push   QWORD PTR [rbp-0x308]
   24bba:	ff b5 f0 fc ff ff    	push   QWORD PTR [rbp-0x310]
   24bc0:	ff b5 e8 fc ff ff    	push   QWORD PTR [rbp-0x318]
   24bc6:	ff b5 e0 fc ff ff    	push   QWORD PTR [rbp-0x320]
   24bcc:	49 89 f9             	mov    r9,rdi
   24bcf:	49 89 f0             	mov    r8,rsi
   24bd2:	48 89 c6             	mov    rsi,rax
   24bd5:	4c 89 d7             	mov    rdi,r10
   24bd8:	e8 55 eb ff ff       	call   23732 <ExtractPlanesFromMat(Mat4<float>, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*, glm::vec<4, float, (glm::qualifier)0>*)>
   24bdd:	48 83 c4 40          	add    rsp,0x40
   24be1:	c7 85 5c fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x5a4],0x0
   24beb:	c7 85 58 fa ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x5a8],0x0
   24bf5:	e9 aa 01 00 00       	jmp    24da4 <main+0xf9a>
   24bfa:	8b 85 58 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a8]
   24c00:	48 8d 95 b0 fb ff ff 	lea    rdx,[rbp-0x450]
   24c07:	48 83 c2 48          	add    rdx,0x48
   24c0b:	48 89 c6             	mov    rsi,rax
   24c0e:	48 89 d7             	mov    rdi,rdx
   24c11:	e8 24 2c 00 00       	call   2783a <std::vector<AABB, std::allocator<AABB> >::operator[](unsigned long)>
   24c16:	48 89 c2             	mov    rdx,rax
   24c19:	48 8d 85 20 fd ff ff 	lea    rax,[rbp-0x2e0]
   24c20:	48 89 d6             	mov    rsi,rdx
   24c23:	48 89 c7             	mov    rdi,rax
   24c26:	e8 43 ee ff ff       	call   23a6e <AABBFrustumIntersect(glm::vec<4, float, (glm::qualifier)0> (&) [6], AABB&)>
   24c2b:	84 c0                	test   al,al
   24c2d:	0f 84 6a 01 00 00    	je     24d9d <main+0xf93>
   24c33:	8b 85 58 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a8]
   24c39:	48 8d 95 b0 fb ff ff 	lea    rdx,[rbp-0x450]
   24c40:	48 83 c2 18          	add    rdx,0x18
   24c44:	48 89 c6             	mov    rsi,rax
   24c47:	48 89 d7             	mov    rdi,rdx
   24c4a:	e8 15 2c 00 00       	call   27864 <std::vector<unsigned int, std::allocator<unsigned int> >::operator[](unsigned long)>
   24c4f:	8b 08                	mov    ecx,DWORD PTR [rax]
   24c51:	48 8b 85 d0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x530]
   24c58:	8b 95 5c fa ff ff    	mov    edx,DWORD PTR [rbp-0x5a4]
   24c5e:	89 0c 90             	mov    DWORD PTR [rax+rdx*4],ecx
   24c61:	8b 95 58 fa ff ff    	mov    edx,DWORD PTR [rbp-0x5a8]
   24c67:	48 8d 85 b0 fb ff ff 	lea    rax,[rbp-0x450]
   24c6e:	48 89 d6             	mov    rsi,rdx
   24c71:	48 89 c7             	mov    rdi,rax
   24c74:	e8 0b 2c 00 00       	call   27884 <std::vector<Mesh, std::allocator<Mesh> >::operator[](unsigned long)>
   24c79:	48 8b 95 e0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x520]
   24c80:	8b 8d 5c fa ff ff    	mov    ecx,DWORD PTR [rbp-0x5a4]
   24c86:	8b 00                	mov    eax,DWORD PTR [rax]
   24c88:	89 04 8a             	mov    DWORD PTR [rdx+rcx*4],eax
   24c8b:	8b 85 58 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a8]
   24c91:	48 8d 95 b0 fb ff ff 	lea    rdx,[rbp-0x450]
   24c98:	48 83 c2 30          	add    rdx,0x30
   24c9c:	48 89 c6             	mov    rsi,rax
   24c9f:	48 89 d7             	mov    rdi,rdx
   24ca2:	e8 fd 2b 00 00       	call   278a4 <std::vector<Transform, std::allocator<Transform> >::operator[](unsigned long)>
   24ca7:	48 89 c2             	mov    rdx,rax
   24caa:	48 8b b5 f0 fa ff ff 	mov    rsi,QWORD PTR [rbp-0x510]
   24cb1:	8b 8d 5c fa ff ff    	mov    ecx,DWORD PTR [rbp-0x5a4]
   24cb7:	48 89 c8             	mov    rax,rcx
   24cba:	48 c1 e0 03          	shl    rax,0x3
   24cbe:	48 01 c8             	add    rax,rcx
   24cc1:	48 c1 e0 02          	shl    rax,0x2
   24cc5:	48 01 f0             	add    rax,rsi
   24cc8:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
   24ccb:	48 8b 5a 08          	mov    rbx,QWORD PTR [rdx+0x8]
   24ccf:	48 89 08             	mov    QWORD PTR [rax],rcx
   24cd2:	48 89 58 08          	mov    QWORD PTR [rax+0x8],rbx
   24cd6:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
   24cda:	48 8b 5a 18          	mov    rbx,QWORD PTR [rdx+0x18]
   24cde:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
   24ce2:	48 89 58 18          	mov    QWORD PTR [rax+0x18],rbx
   24ce6:	8b 52 20             	mov    edx,DWORD PTR [rdx+0x20]
   24ce9:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   24cec:	48 8d 85 20 fb ff ff 	lea    rax,[rbp-0x4e0]
   24cf3:	b9 00 00 00 00       	mov    ecx,0x0
   24cf8:	ba 00 00 00 00       	mov    edx,0x0
   24cfd:	be 01 00 00 00       	mov    esi,0x1
   24d02:	48 89 c7             	mov    rdi,rax
   24d05:	e8 38 09 00 00       	call   25642 <glm::vec<3, float, (glm::qualifier)0>::vec<int, int, int>(int, int, int)>
   24d0a:	8b 95 5c fa ff ff    	mov    edx,DWORD PTR [rbp-0x5a4]
   24d10:	89 d0                	mov    eax,edx
   24d12:	01 c0                	add    eax,eax
   24d14:	01 d0                	add    eax,edx
   24d16:	c1 e0 02             	shl    eax,0x2
   24d19:	89 c2                	mov    edx,eax
   24d1b:	48 89 d0             	mov    rax,rdx
   24d1e:	48 01 c0             	add    rax,rax
   24d21:	48 01 d0             	add    rax,rdx
   24d24:	48 c1 e0 04          	shl    rax,0x4
   24d28:	48 89 c2             	mov    rdx,rax
   24d2b:	48 8b 85 c0 fa ff ff 	mov    rax,QWORD PTR [rbp-0x540]
   24d32:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
   24d36:	8b 85 58 fa ff ff    	mov    eax,DWORD PTR [rbp-0x5a8]
   24d3c:	48 8d 95 b0 fb ff ff 	lea    rdx,[rbp-0x450]
   24d43:	48 83 c2 48          	add    rdx,0x48
   24d47:	48 89 c6             	mov    rsi,rax
   24d4a:	48 89 d7             	mov    rdi,rdx
   24d4d:	e8 e8 2a 00 00       	call   2783a <std::vector<AABB, std::allocator<AABB> >::operator[](unsigned long)>
   24d52:	48 89 c1             	mov    rcx,rax
   24d55:	48 8b bd 20 fb ff ff 	mov    rdi,QWORD PTR [rbp-0x4e0]
   24d5c:	f3 0f 10 8d 28 fb ff ff 	movss  xmm1,DWORD PTR [rbp-0x4d8]
   24d64:	48 83 ec 08          	sub    rsp,0x8
   24d68:	48 83 ec 18          	sub    rsp,0x18
   24d6c:	48 89 e6             	mov    rsi,rsp
   24d6f:	48 8b 01             	mov    rax,QWORD PTR [rcx]
   24d72:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
   24d76:	48 89 06             	mov    QWORD PTR [rsi],rax
   24d79:	48 89 56 08          	mov    QWORD PTR [rsi+0x8],rdx
   24d7d:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
   24d81:	48 89 46 10          	mov    QWORD PTR [rsi+0x10],rax
   24d85:	66 48 0f 6e c7       	movq   xmm0,rdi
   24d8a:	48 89 df             	mov    rdi,rbx
   24d8d:	e8 bb d1 ff ff       	call   21f4d <MakeLinesFromAABB(AABB, Line*, glm::vec<3, float, (glm::qualifier)0>)>
   24d92:	48 83 c4 20          	add    rsp,0x20
   24d96:	83 85 5c fa ff ff 01 	add    DWORD PTR [rbp-0x5a4],0x1
   24d9d:	83 85 58 fa ff ff 01 	add    DWORD PTR [rbp-0x5a8],0x1
   24da4:	8b 9d 58 fa ff ff    	mov    ebx,DWORD PTR [rbp-0x5a8]
   24daa:	48 8d 85 b0 fb ff ff 	lea    rax,[rbp-0x450]
   24db1:	48 83 c0 48          	add    rax,0x48
   24db5:	48 89 c7             	mov    rdi,rax
   24db8:	e8 31 24 00 00       	call   271ee <std::vector<AABB, std::allocator<AABB> >::size() const>
   24dbd:	48 39 c3             	cmp    rbx,rax
   24dc0:	0f 92 c0             	setb   al
   24dc3:	84 c0                	test   al,al
   24dc5:	0f 85 2f fe ff ff    	jne    24bfa <main+0xdf0>
   24dcb:	4c 8b 8d 30 ff ff ff 	mov    r9,QWORD PTR [rbp-0xd0]
   24dd2:	0f be 85 57 fa ff ff 	movsx  eax,BYTE PTR [rbp-0x5a9]
   24dd9:	48 98                	cdqe   
   24ddb:	48 8b 84 c5 50 fc ff ff 	mov    rax,QWORD PTR [rbp+rax*8-0x3b0]
   24de3:	8b bd 5c fa ff ff    	mov    edi,DWORD PTR [rbp-0x5a4]
   24de9:	48 8b 8d f0 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x510]
   24df0:	48 8b 95 d0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x530]
   24df7:	48 8b b5 e0 fa ff ff 	mov    rsi,QWORD PTR [rbp-0x520]
   24dfe:	41 89 f8             	mov    r8d,edi
   24e01:	48 89 c7             	mov    rdi,rax
   24e04:	41 ff d1             	call   r9
   24e07:	4c 8b 85 28 ff ff ff 	mov    r8,QWORD PTR [rbp-0xd8]
   24e0e:	8b 95 5c fa ff ff    	mov    edx,DWORD PTR [rbp-0x5a4]
   24e14:	89 d0                	mov    eax,edx
   24e16:	01 c0                	add    eax,eax
   24e18:	01 d0                	add    eax,edx
   24e1a:	c1 e0 02             	shl    eax,0x2
   24e1d:	89 c2                	mov    edx,eax
   24e1f:	0f be 85 57 fa ff ff 	movsx  eax,BYTE PTR [rbp-0x5a9]
   24e26:	48 98                	cdqe   
   24e28:	48 8b 84 c5 50 fc ff ff 	mov    rax,QWORD PTR [rbp+rax*8-0x3b0]
   24e30:	48 8b 8d c0 fa ff ff 	mov    rcx,QWORD PTR [rbp-0x540]
   24e37:	48 89 ce             	mov    rsi,rcx
   24e3a:	48 89 c7             	mov    rdi,rax
   24e3d:	41 ff d0             	call   r8
   24e40:	48 8b 95 b8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x148]
   24e47:	0f be 85 57 fa ff ff 	movsx  eax,BYTE PTR [rbp-0x5a9]
   24e4e:	48 98                	cdqe   
   24e50:	48 8b 84 c5 50 fc ff ff 	mov    rax,QWORD PTR [rbp+rax*8-0x3b0]
   24e58:	48 89 c7             	mov    rdi,rax
   24e5b:	ff d2                	call   rdx
   24e5d:	48 8b 8d a0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x160]
   24e64:	0f be 85 57 fa ff ff 	movsx  eax,BYTE PTR [rbp-0x5a9]
   24e6b:	48 98                	cdqe   
   24e6d:	48 8b 94 c5 50 fc ff ff 	mov    rdx,QWORD PTR [rbp+rax*8-0x3b0]
   24e75:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   24e7c:	48 89 d6             	mov    rsi,rdx
   24e7f:	48 89 c7             	mov    rdi,rax
   24e82:	ff d1                	call   rcx
   24e84:	48 8b 8d c0 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x140]
   24e8b:	0f be 85 57 fa ff ff 	movsx  eax,BYTE PTR [rbp-0x5a9]
   24e92:	48 98                	cdqe   
   24e94:	48 8b 94 c5 50 fc ff ff 	mov    rdx,QWORD PTR [rbp+rax*8-0x3b0]
   24e9c:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   24ea3:	48 89 d6             	mov    rsi,rdx
   24ea6:	48 89 c7             	mov    rdi,rax
   24ea9:	ff d1                	call   rcx
   24eab:	0f b6 85 57 fa ff ff 	movzx  eax,BYTE PTR [rbp-0x5a9]
   24eb2:	83 c0 01             	add    eax,0x1
   24eb5:	88 85 57 fa ff ff    	mov    BYTE PTR [rbp-0x5a9],al
   24ebb:	80 a5 57 fa ff ff 01 	and    BYTE PTR [rbp-0x5a9],0x1
   24ec2:	48 8d 95 40 fb ff ff 	lea    rdx,[rbp-0x4c0]
   24ec9:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   24ed0:	48 89 d6             	mov    rsi,rdx
   24ed3:	48 89 c7             	mov    rdi,rax
   24ed6:	e8 02 c0 ff ff       	call   20edd <PlaySounds(SoundSystemState&, SoundTable&)>
   24edb:	48 8b 95 68 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x198]
   24ee2:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   24ee9:	48 89 c7             	mov    rdi,rax
   24eec:	ff d2                	call   rdx
   24eee:	66 0f ef c0          	pxor   xmm0,xmm0
   24ef2:	f3 0f 11 85 44 fc ff ff 	movss  DWORD PTR [rbp-0x3bc],xmm0
   24efa:	f3 0f 10 05 a6 7b 01 00 	movss  xmm0,DWORD PTR [rip+0x17ba6]        # 3caa8 <NANO_SEC+0x17e0>
   24f02:	f3 0f 11 85 48 fc ff ff 	movss  DWORD PTR [rbp-0x3b8],xmm0
   24f0a:	66 0f ef c0          	pxor   xmm0,xmm0
   24f0e:	f3 0f 11 85 4c fc ff ff 	movss  DWORD PTR [rbp-0x3b4],xmm0
   24f16:	48 8b 95 44 fc ff ff 	mov    rdx,QWORD PTR [rbp-0x3bc]
   24f1d:	66 0f 6e 8d 4c fc ff ff 	movd   xmm1,DWORD PTR [rbp-0x3b4]
   24f25:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   24f2c:	48 05 a0 01 00 00    	add    rax,0x1a0
   24f32:	66 48 0f 6e c2       	movq   xmm0,rdx
   24f37:	48 89 c7             	mov    rdi,rax
   24f3a:	e8 09 10 00 00       	call   25f48 <v3<float>::operator+(v3<float>)>
   24f3f:	66 48 0f 7e c0       	movq   rax,xmm0
   24f44:	66 48 0f 7e ca       	movq   rdx,xmm1
   24f49:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   24f4d:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
   24f50:	83 e0 00             	and    eax,0x0
   24f53:	09 d0                	or     eax,edx
   24f55:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
   24f58:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   24f5c:	66 0f 6e 4d b8       	movd   xmm1,DWORD PTR [rbp-0x48]
   24f61:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   24f68:	48 05 88 01 00 00    	add    rax,0x188
   24f6e:	66 48 0f 6e c2       	movq   xmm0,rdx
   24f73:	48 89 c7             	mov    rdi,rax
   24f76:	e8 cd 0f 00 00       	call   25f48 <v3<float>::operator+(v3<float>)>
   24f7b:	66 48 0f 7e c0       	movq   rax,xmm0
   24f80:	66 48 0f 7e ca       	movq   rdx,xmm1
   24f85:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   24f89:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
   24f8c:	83 e0 00             	and    eax,0x0
   24f8f:	09 d0                	or     eax,edx
   24f91:	89 45 a0             	mov    DWORD PTR [rbp-0x60],eax
   24f94:	f3 0f 10 4d 9c       	movss  xmm1,DWORD PTR [rbp-0x64]
   24f99:	f3 0f 10 05 e7 7a 01 00 	movss  xmm0,DWORD PTR [rip+0x17ae7]        # 3ca88 <NANO_SEC+0x17c0>
   24fa1:	0f 2f c1             	comiss xmm0,xmm1
   24fa4:	76 54                	jbe    24ffa <main+0x11f0>
   24fa6:	66 0f ef c0          	pxor   xmm0,xmm0
   24faa:	f3 0f 11 45 b4       	movss  DWORD PTR [rbp-0x4c],xmm0
   24faf:	f3 0f 10 45 b0       	movss  xmm0,DWORD PTR [rbp-0x50]
   24fb4:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
   24fb8:	f2 0f 10 0d f0 7a 01 00 	movsd  xmm1,QWORD PTR [rip+0x17af0]        # 3cab0 <NANO_SEC+0x17e8>
   24fc0:	f2 0f 5e c1          	divsd  xmm0,xmm1
   24fc4:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   24fc8:	f3 0f 11 45 b0       	movss  DWORD PTR [rbp-0x50],xmm0
   24fcd:	f3 0f 10 45 b8       	movss  xmm0,DWORD PTR [rbp-0x48]
   24fd2:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
   24fd6:	f2 0f 10 0d d2 7a 01 00 	movsd  xmm1,QWORD PTR [rip+0x17ad2]        # 3cab0 <NANO_SEC+0x17e8>
   24fde:	f2 0f 5e c1          	divsd  xmm0,xmm1
   24fe2:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   24fe6:	f3 0f 11 45 b8       	movss  DWORD PTR [rbp-0x48],xmm0
   24feb:	f3 0f 10 05 95 7a 01 00 	movss  xmm0,DWORD PTR [rip+0x17a95]        # 3ca88 <NANO_SEC+0x17c0>
   24ff3:	f3 0f 11 45 9c       	movss  DWORD PTR [rbp-0x64],xmm0
   24ff8:	eb 3c                	jmp    25036 <main+0x122c>
   24ffa:	f3 0f 10 45 b0       	movss  xmm0,DWORD PTR [rbp-0x50]
   24fff:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
   25003:	f2 0f 10 0d ad 7a 01 00 	movsd  xmm1,QWORD PTR [rip+0x17aad]        # 3cab8 <NANO_SEC+0x17f0>
   2500b:	f2 0f 5e c1          	divsd  xmm0,xmm1
   2500f:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   25013:	f3 0f 11 45 b0       	movss  DWORD PTR [rbp-0x50],xmm0
   25018:	f3 0f 10 45 b8       	movss  xmm0,DWORD PTR [rbp-0x48]
   2501d:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
   25021:	f2 0f 10 0d 8f 7a 01 00 	movsd  xmm1,QWORD PTR [rip+0x17a8f]        # 3cab8 <NANO_SEC+0x17f0>
   25029:	f2 0f 5e c1          	divsd  xmm0,xmm1
   2502d:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   25031:	f3 0f 11 45 b8       	movss  DWORD PTR [rbp-0x48],xmm0
   25036:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   2503d:	48 05 88 01 00 00    	add    rax,0x188
   25043:	48 89 c7             	mov    rdi,rax
   25046:	e8 0c c1 ff ff       	call   21157 <MoveCameraAlong(Camera&)>
   2504b:	83 85 64 fa ff ff 01 	add    DWORD PTR [rbp-0x59c],0x1
   25052:	0f b6 45 c0          	movzx  eax,BYTE PTR [rbp-0x40]
   25056:	84 c0                	test   al,al
   25058:	0f 85 04 f9 ff ff    	jne    24962 <main+0xb58>
   2505e:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
   25065:	48 8b 95 a0 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x560]
   2506c:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   25073:	48 89 d6             	mov    rsi,rdx
   25076:	48 89 c7             	mov    rdi,rax
   25079:	ff d1                	call   rcx
   2507b:	48 8b 8d 90 fe ff ff 	mov    rcx,QWORD PTR [rbp-0x170]
   25082:	48 8b 95 98 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x568]
   25089:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   25090:	48 89 d6             	mov    rsi,rdx
   25093:	48 89 c7             	mov    rdi,rax
   25096:	ff d1                	call   rcx
   25098:	48 8b 95 40 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x1c0]
   2509f:	48 8b 85 80 fa ff ff 	mov    rax,QWORD PTR [rbp-0x580]
   250a6:	48 89 c7             	mov    rdi,rax
   250a9:	ff d2                	call   rdx
   250ab:	48 8d 85 10 fe ff ff 	lea    rax,[rbp-0x1f0]
   250b2:	48 83 c0 08          	add    rax,0x8
   250b6:	48 89 c7             	mov    rdi,rax
   250b9:	e8 c8 ae ff ff       	call   1ff86 <UnloadRendererInterface(RendererInterface&)>
   250be:	48 8b 85 70 fb ff ff 	mov    rax,QWORD PTR [rbp-0x490]
   250c5:	48 89 c7             	mov    rdi,rax
   250c8:	e8 e3 f4 fd ff       	call   45b0 <snd_pcm_drain@plt>
   250cd:	48 8b 85 70 fb ff ff 	mov    rax,QWORD PTR [rbp-0x490]
   250d4:	48 89 c7             	mov    rdi,rax
   250d7:	e8 a4 f4 fd ff       	call   4580 <snd_pcm_close@plt>
   250dc:	48 8b 85 a8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x458]
   250e3:	48 89 c7             	mov    rdi,rax
   250e6:	e8 45 f4 fd ff       	call   4530 <free@plt>
   250eb:	bb 00 00 00 00       	mov    ebx,0x0
   250f0:	48 8d 85 b0 fb ff ff 	lea    rax,[rbp-0x450]
   250f7:	48 89 c7             	mov    rdi,rax
   250fa:	e8 75 07 00 00       	call   25874 <Scene::~Scene()>
   250ff:	48 8b a5 a8 f9 ff ff 	mov    rsp,QWORD PTR [rbp-0x658]
   25106:	89 d8                	mov    eax,ebx
   25108:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   2510c:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   25115:	74 24                	je     2513b <main+0x1331>
   25117:	eb 1d                	jmp    25136 <main+0x132c>
   25119:	48 89 c3             	mov    rbx,rax
   2511c:	48 8d 85 b0 fb ff ff 	lea    rax,[rbp-0x450]
   25123:	48 89 c7             	mov    rdi,rax
   25126:	e8 49 07 00 00       	call   25874 <Scene::~Scene()>
   2512b:	48 89 d8             	mov    rax,rbx
   2512e:	48 89 c7             	mov    rdi,rax
   25131:	e8 2a f6 fd ff       	call   4760 <_Unwind_Resume@plt>
   25136:	e8 a5 f3 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2513b:	48 8d 65 d8          	lea    rsp,[rbp-0x28]
   2513f:	5b                   	pop    rbx
   25140:	41 5c                	pop    r12
   25142:	41 5d                	pop    r13
   25144:	41 5e                	pop    r14
   25146:	41 5f                	pop    r15
   25148:	5d                   	pop    rbp
   25149:	c3                   	ret    

000000000002514a <__static_initialization_and_destruction_0(int, int)>:
   2514a:	55                   	push   rbp
   2514b:	48 89 e5             	mov    rbp,rsp
   2514e:	48 83 ec 10          	sub    rsp,0x10
   25152:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   25155:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   25158:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
   2515c:	75 3b                	jne    25199 <__static_initialization_and_destruction_0(int, int)+0x4f>
   2515e:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
   25165:	75 32                	jne    25199 <__static_initialization_and_destruction_0(int, int)+0x4f>
   25167:	48 8d 05 12 56 02 00 	lea    rax,[rip+0x25612]        # 4a780 <std::__ioinit>
   2516e:	48 89 c7             	mov    rdi,rax
   25171:	e8 1a f5 fd ff       	call   4690 <std::ios_base::Init::Init()@plt>
   25176:	48 8d 05 ab 52 02 00 	lea    rax,[rip+0x252ab]        # 4a428 <__dso_handle>
   2517d:	48 89 c2             	mov    rdx,rax
   25180:	48 8d 05 f9 55 02 00 	lea    rax,[rip+0x255f9]        # 4a780 <std::__ioinit>
   25187:	48 89 c6             	mov    rsi,rax
   2518a:	48 8b 05 67 4e 02 00 	mov    rax,QWORD PTR [rip+0x24e67]        # 49ff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
   25191:	48 89 c7             	mov    rdi,rax
   25194:	e8 37 f2 fd ff       	call   43d0 <__cxa_atexit@plt>
   25199:	90                   	nop
   2519a:	c9                   	leave  
   2519b:	c3                   	ret    

000000000002519c <_GLOBAL__sub_I_stbi_failure_reason>:
   2519c:	55                   	push   rbp
   2519d:	48 89 e5             	mov    rbp,rsp
   251a0:	be ff ff 00 00       	mov    esi,0xffff
   251a5:	bf 01 00 00 00       	mov    edi,0x1
   251aa:	e8 9b ff ff ff       	call   2514a <__static_initialization_and_destruction_0(int, int)>
   251af:	5d                   	pop    rbp
   251b0:	c3                   	ret    

00000000000251b1 <operator new(unsigned long, void*)>:
   251b1:	55                   	push   rbp
   251b2:	48 89 e5             	mov    rbp,rsp
   251b5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   251b9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   251bd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   251c1:	5d                   	pop    rbp
   251c2:	c3                   	ret    

00000000000251c3 <operator delete(void*, void*)>:
   251c3:	55                   	push   rbp
   251c4:	48 89 e5             	mov    rbp,rsp
   251c7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   251cb:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   251cf:	90                   	nop
   251d0:	5d                   	pop    rbp
   251d1:	c3                   	ret    

00000000000251d2 <std::char_traits<char>::lt(char const&, char const&)>:
   251d2:	55                   	push   rbp
   251d3:	48 89 e5             	mov    rbp,rsp
   251d6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   251da:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   251de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   251e2:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   251e5:	89 c2                	mov    edx,eax
   251e7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   251eb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   251ee:	38 c2                	cmp    dl,al
   251f0:	0f 92 c0             	setb   al
   251f3:	5d                   	pop    rbp
   251f4:	c3                   	ret    

00000000000251f5 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>:
   251f5:	55                   	push   rbp
   251f6:	48 89 e5             	mov    rbp,rsp
   251f9:	48 83 ec 30          	sub    rsp,0x30
   251fd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   25201:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   25205:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   25209:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
   2520e:	75 0a                	jne    2521a <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0x25>
   25210:	b8 00 00 00 00       	mov    eax,0x0
   25215:	e9 99 00 00 00       	jmp    252b3 <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0xbe>
   2521a:	b8 00 00 00 00       	mov    eax,0x0
   2521f:	84 c0                	test   al,al
   25221:	74 78                	je     2529b <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0xa6>
   25223:	48 c7 45 f8 00 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
   2522b:	eb 5d                	jmp    2528a <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0x95>
   2522d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   25231:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25235:	48 01 c2             	add    rdx,rax
   25238:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2523c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25240:	48 01 c8             	add    rax,rcx
   25243:	48 89 d6             	mov    rsi,rdx
   25246:	48 89 c7             	mov    rdi,rax
   25249:	e8 84 ff ff ff       	call   251d2 <std::char_traits<char>::lt(char const&, char const&)>
   2524e:	84 c0                	test   al,al
   25250:	74 07                	je     25259 <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0x64>
   25252:	b8 ff ff ff ff       	mov    eax,0xffffffff
   25257:	eb 5a                	jmp    252b3 <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0xbe>
   25259:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2525d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25261:	48 01 c2             	add    rdx,rax
   25264:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   25268:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2526c:	48 01 c8             	add    rax,rcx
   2526f:	48 89 d6             	mov    rsi,rdx
   25272:	48 89 c7             	mov    rdi,rax
   25275:	e8 58 ff ff ff       	call   251d2 <std::char_traits<char>::lt(char const&, char const&)>
   2527a:	84 c0                	test   al,al
   2527c:	74 07                	je     25285 <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0x90>
   2527e:	b8 01 00 00 00       	mov    eax,0x1
   25283:	eb 2e                	jmp    252b3 <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0xbe>
   25285:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
   2528a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2528e:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
   25292:	72 99                	jb     2522d <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0x38>
   25294:	b8 00 00 00 00       	mov    eax,0x0
   25299:	eb 18                	jmp    252b3 <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0xbe>
   2529b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   2529f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   252a3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   252a7:	48 89 ce             	mov    rsi,rcx
   252aa:	48 89 c7             	mov    rdi,rax
   252ad:	e8 de ee fd ff       	call   4190 <memcmp@plt>
   252b2:	90                   	nop
   252b3:	c9                   	leave  
   252b4:	c3                   	ret    

00000000000252b5 <std::char_traits<char>::length(char const*)>:
   252b5:	55                   	push   rbp
   252b6:	48 89 e5             	mov    rbp,rsp
   252b9:	48 83 ec 20          	sub    rsp,0x20
   252bd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   252c1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   252c5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   252c9:	b8 00 00 00 00       	mov    eax,0x0
   252ce:	84 c0                	test   al,al
   252d0:	74 0e                	je     252e0 <std::char_traits<char>::length(char const*)+0x2b>
   252d2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   252d6:	48 89 c7             	mov    rdi,rax
   252d9:	e8 02 06 00 00       	call   258e0 <__gnu_cxx::char_traits<char>::length(char const*)>
   252de:	eb 0d                	jmp    252ed <std::char_traits<char>::length(char const*)+0x38>
   252e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   252e4:	48 89 c7             	mov    rdi,rax
   252e7:	e8 94 ee fd ff       	call   4180 <strlen@plt>
   252ec:	90                   	nop
   252ed:	c9                   	leave  
   252ee:	c3                   	ret    

00000000000252ef <std::cos(float)>:
   252ef:	55                   	push   rbp
   252f0:	48 89 e5             	mov    rbp,rsp
   252f3:	48 83 ec 10          	sub    rsp,0x10
   252f7:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   252fc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   252ff:	66 0f 6e c0          	movd   xmm0,eax
   25303:	e8 d8 ef fd ff       	call   42e0 <cosf@plt>
   25308:	c9                   	leave  
   25309:	c3                   	ret    

000000000002530a <std::ldexp(float, int)>:
   2530a:	55                   	push   rbp
   2530b:	48 89 e5             	mov    rbp,rsp
   2530e:	48 83 ec 10          	sub    rsp,0x10
   25312:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   25317:	89 7d f8             	mov    DWORD PTR [rbp-0x8],edi
   2531a:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
   2531d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   25320:	89 d7                	mov    edi,edx
   25322:	66 0f 6e c0          	movd   xmm0,eax
   25326:	e8 d5 f2 fd ff       	call   4600 <ldexpf@plt>
   2532b:	c9                   	leave  
   2532c:	c3                   	ret    

000000000002532d <std::pow(float, float)>:
   2532d:	55                   	push   rbp
   2532e:	48 89 e5             	mov    rbp,rsp
   25331:	48 83 ec 10          	sub    rsp,0x10
   25335:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   2533a:	f3 0f 11 4d f8       	movss  DWORD PTR [rbp-0x8],xmm1
   2533f:	f3 0f 10 45 f8       	movss  xmm0,DWORD PTR [rbp-0x8]
   25344:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   25347:	0f 28 c8             	movaps xmm1,xmm0
   2534a:	66 0f 6e c0          	movd   xmm0,eax
   2534e:	e8 5d f3 fd ff       	call   46b0 <powf@plt>
   25353:	c9                   	leave  
   25354:	c3                   	ret    

0000000000025355 <std::sin(float)>:
   25355:	55                   	push   rbp
   25356:	48 89 e5             	mov    rbp,rsp
   25359:	48 83 ec 10          	sub    rsp,0x10
   2535d:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   25362:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   25365:	66 0f 6e c0          	movd   xmm0,eax
   25369:	e8 12 f0 fd ff       	call   4380 <sinf@plt>
   2536e:	c9                   	leave  
   2536f:	c3                   	ret    

0000000000025370 <std::sqrt(float)>:
   25370:	55                   	push   rbp
   25371:	48 89 e5             	mov    rbp,rsp
   25374:	48 83 ec 10          	sub    rsp,0x10
   25378:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   2537d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   25380:	66 0f 6e c0          	movd   xmm0,eax
   25384:	e8 17 f4 fd ff       	call   47a0 <sqrtf@plt>
   25389:	c9                   	leave  
   2538a:	c3                   	ret    

000000000002538b <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::zero()>:
   2538b:	55                   	push   rbp
   2538c:	48 89 e5             	mov    rbp,rsp
   2538f:	48 83 ec 20          	sub    rsp,0x20
   25393:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2539c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   253a0:	31 c0                	xor    eax,eax
   253a2:	e8 4e 00 00 00       	call   253f5 <std::chrono::duration_values<long>::zero()>
   253a7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   253ab:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   253af:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   253b3:	48 89 d6             	mov    rsi,rdx
   253b6:	48 89 c7             	mov    rdi,rax
   253b9:	e8 1a 00 00 00       	call   253d8 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&)>
   253be:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   253c2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   253c6:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   253cf:	74 05                	je     253d6 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::zero()+0x4b>
   253d1:	e8 0a f1 fd ff       	call   44e0 <__stack_chk_fail@plt>
   253d6:	c9                   	leave  
   253d7:	c3                   	ret    

00000000000253d8 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&)>:
   253d8:	55                   	push   rbp
   253d9:	48 89 e5             	mov    rbp,rsp
   253dc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   253e0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   253e4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   253e8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   253eb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   253ef:	48 89 10             	mov    QWORD PTR [rax],rdx
   253f2:	90                   	nop
   253f3:	5d                   	pop    rbp
   253f4:	c3                   	ret    

00000000000253f5 <std::chrono::duration_values<long>::zero()>:
   253f5:	55                   	push   rbp
   253f6:	48 89 e5             	mov    rbp,rsp
   253f9:	b8 00 00 00 00       	mov    eax,0x0
   253fe:	5d                   	pop    rbp
   253ff:	c3                   	ret    

0000000000025400 <std::filesystem::__cxx11::path::_List::~_List()>:
   25400:	55                   	push   rbp
   25401:	48 89 e5             	mov    rbp,rsp
   25404:	48 83 ec 10          	sub    rsp,0x10
   25408:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2540c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25410:	48 89 c7             	mov    rdi,rax
   25413:	e8 4e 05 00 00       	call   25966 <std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::~unique_ptr()>
   25418:	90                   	nop
   25419:	c9                   	leave  
   2541a:	c3                   	ret    
   2541b:	90                   	nop

000000000002541c <std::filesystem::__cxx11::path::~path()>:
   2541c:	55                   	push   rbp
   2541d:	48 89 e5             	mov    rbp,rsp
   25420:	48 83 ec 10          	sub    rsp,0x10
   25424:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25428:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2542c:	48 83 c0 20          	add    rax,0x20
   25430:	48 89 c7             	mov    rdi,rax
   25433:	e8 c8 ff ff ff       	call   25400 <std::filesystem::__cxx11::path::_List::~_List()>
   25438:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2543c:	48 89 c7             	mov    rdi,rax
   2543f:	e8 1c ee fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   25444:	90                   	nop
   25445:	c9                   	leave  
   25446:	c3                   	ret    

0000000000025447 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>:
   25447:	55                   	push   rbp
   25448:	48 89 e5             	mov    rbp,rsp
   2544b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2544f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   25453:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   25457:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2545a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2545e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   25461:	48 39 c2             	cmp    rdx,rax
   25464:	73 06                	jae    2546c <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x25>
   25466:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2546a:	eb 04                	jmp    25470 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)+0x29>
   2546c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25470:	5d                   	pop    rbp
   25471:	c3                   	ret    

0000000000025472 <glm::vec<2, float, (glm::qualifier)0>::vec(float, float)>:
   25472:	55                   	push   rbp
   25473:	48 89 e5             	mov    rbp,rsp
   25476:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2547a:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   2547f:	f3 0f 11 4d f0       	movss  DWORD PTR [rbp-0x10],xmm1
   25484:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25488:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2548d:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   25491:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25495:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   2549a:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   2549f:	90                   	nop
   254a0:	5d                   	pop    rbp
   254a1:	c3                   	ret    

00000000000254a2 <glm::vec<3, float, (glm::qualifier)0> glm::operator-<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>:
   254a2:	55                   	push   rbp
   254a3:	48 89 e5             	mov    rbp,rsp
   254a6:	48 83 ec 40          	sub    rsp,0x40
   254aa:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   254ae:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   254b2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   254bb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   254bf:	31 c0                	xor    eax,eax
   254c1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   254c5:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   254ca:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   254ce:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   254d3:	0f 28 d0             	movaps xmm2,xmm0
   254d6:	f3 0f 5c d1          	subss  xmm2,xmm1
   254da:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   254de:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   254e3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   254e7:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   254ec:	0f 28 d8             	movaps xmm3,xmm0
   254ef:	f3 0f 5c d9          	subss  xmm3,xmm1
   254f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   254f7:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   254fb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   254ff:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   25503:	f3 0f 5c c1          	subss  xmm0,xmm1
   25507:	66 0f 7e c2          	movd   edx,xmm0
   2550b:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2550f:	0f 28 cb             	movaps xmm1,xmm3
   25512:	66 0f 6e c2          	movd   xmm0,edx
   25516:	48 89 c7             	mov    rdi,rax
   25519:	e8 38 00 00 00       	call   25556 <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   2551e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   25522:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   25526:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   25529:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2552c:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   25530:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   25535:	48 89 c2             	mov    rdx,rax
   25538:	0f 28 c8             	movaps xmm1,xmm0
   2553b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2553f:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   25548:	74 05                	je     2554f <glm::vec<3, float, (glm::qualifier)0> glm::operator-<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)+0xad>
   2554a:	e8 91 ef fd ff       	call   44e0 <__stack_chk_fail@plt>
   2554f:	66 48 0f 6e c2       	movq   xmm0,rdx
   25554:	c9                   	leave  
   25555:	c3                   	ret    

0000000000025556 <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>:
   25556:	55                   	push   rbp
   25557:	48 89 e5             	mov    rbp,rsp
   2555a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2555e:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   25563:	f3 0f 11 4d f0       	movss  DWORD PTR [rbp-0x10],xmm1
   25568:	f3 0f 11 55 ec       	movss  DWORD PTR [rbp-0x14],xmm2
   2556d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25571:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   25576:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   2557a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2557e:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   25583:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   25588:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2558c:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   25591:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   25596:	90                   	nop
   25597:	5d                   	pop    rbp
   25598:	c3                   	ret    
   25599:	90                   	nop

000000000002559a <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_impl::~_Vector_impl()>:
   2559a:	55                   	push   rbp
   2559b:	48 89 e5             	mov    rbp,rsp
   2559e:	48 83 ec 10          	sub    rsp,0x10
   255a2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   255a6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   255aa:	48 89 c7             	mov    rdi,rax
   255ad:	e8 ca 0d 00 00       	call   2637c <std::allocator<Tex>::~allocator()>
   255b2:	90                   	nop
   255b3:	c9                   	leave  
   255b4:	c3                   	ret    
   255b5:	90                   	nop

00000000000255b6 <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_base()>:
   255b6:	55                   	push   rbp
   255b7:	48 89 e5             	mov    rbp,rsp
   255ba:	48 83 ec 10          	sub    rsp,0x10
   255be:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   255c2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   255c6:	48 89 c7             	mov    rdi,rax
   255c9:	e8 86 0d 00 00       	call   26354 <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_impl::_Vector_impl()>
   255ce:	90                   	nop
   255cf:	c9                   	leave  
   255d0:	c3                   	ret    
   255d1:	90                   	nop

00000000000255d2 <std::vector<Tex, std::allocator<Tex> >::vector()>:
   255d2:	55                   	push   rbp
   255d3:	48 89 e5             	mov    rbp,rsp
   255d6:	48 83 ec 10          	sub    rsp,0x10
   255da:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   255de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   255e2:	48 89 c7             	mov    rdi,rax
   255e5:	e8 cc ff ff ff       	call   255b6 <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_base()>
   255ea:	90                   	nop
   255eb:	c9                   	leave  
   255ec:	c3                   	ret    
   255ed:	90                   	nop

00000000000255ee <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl::~_Vector_impl()>:
   255ee:	55                   	push   rbp
   255ef:	48 89 e5             	mov    rbp,rsp
   255f2:	48 83 ec 10          	sub    rsp,0x10
   255f6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   255fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   255fe:	48 89 c7             	mov    rdi,rax
   25601:	e8 5c 0e 00 00       	call   26462 <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~allocator()>
   25606:	90                   	nop
   25607:	c9                   	leave  
   25608:	c3                   	ret    
   25609:	90                   	nop

000000000002560a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_base()>:
   2560a:	55                   	push   rbp
   2560b:	48 89 e5             	mov    rbp,rsp
   2560e:	48 83 ec 10          	sub    rsp,0x10
   25612:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25616:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2561a:	48 89 c7             	mov    rdi,rax
   2561d:	e8 18 0e 00 00       	call   2643a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl::_Vector_impl()>
   25622:	90                   	nop
   25623:	c9                   	leave  
   25624:	c3                   	ret    
   25625:	90                   	nop

0000000000025626 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>:
   25626:	55                   	push   rbp
   25627:	48 89 e5             	mov    rbp,rsp
   2562a:	48 83 ec 10          	sub    rsp,0x10
   2562e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25632:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25636:	48 89 c7             	mov    rdi,rax
   25639:	e8 cc ff ff ff       	call   2560a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_base()>
   2563e:	90                   	nop
   2563f:	c9                   	leave  
   25640:	c3                   	ret    
   25641:	90                   	nop

0000000000025642 <glm::vec<3, float, (glm::qualifier)0>::vec<int, int, int>(int, int, int)>:
   25642:	55                   	push   rbp
   25643:	48 89 e5             	mov    rbp,rsp
   25646:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2564a:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   2564d:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
   25650:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
   25653:	66 0f ef c0          	pxor   xmm0,xmm0
   25657:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   2565c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25660:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   25664:	66 0f ef c0          	pxor   xmm0,xmm0
   25668:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   2566d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25671:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   25676:	66 0f ef c0          	pxor   xmm0,xmm0
   2567a:	f3 0f 2a 45 ec       	cvtsi2ss xmm0,DWORD PTR [rbp-0x14]
   2567f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25683:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   25688:	90                   	nop
   25689:	5d                   	pop    rbp
   2568a:	c3                   	ret    
   2568b:	90                   	nop

000000000002568c <RendererInterface::RendererInterface()>:
   2568c:	55                   	push   rbp
   2568d:	48 89 e5             	mov    rbp,rsp
   25690:	48 83 ec 10          	sub    rsp,0x10
   25694:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25698:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2569c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   256a3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   256a7:	48 05 20 01 00 00    	add    rax,0x120
   256ad:	48 89 c7             	mov    rdi,rax
   256b0:	e8 87 15 00 00       	call   26c3c <std::chrono::time_point<std::filesystem::__file_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::time_point()>
   256b5:	90                   	nop
   256b6:	c9                   	leave  
   256b7:	c3                   	ret    

00000000000256b8 <CommonData::CommonData()>:
   256b8:	55                   	push   rbp
   256b9:	48 89 e5             	mov    rbp,rsp
   256bc:	48 83 ec 10          	sub    rsp,0x10
   256c0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   256c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   256c8:	48 83 c0 08          	add    rax,0x8
   256cc:	48 89 c7             	mov    rdi,rax
   256cf:	e8 b8 ff ff ff       	call   2568c <RendererInterface::RendererInterface()>
   256d4:	90                   	nop
   256d5:	c9                   	leave  
   256d6:	c3                   	ret    
   256d7:	90                   	nop

00000000000256d8 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_impl::~_Vector_impl()>:
   256d8:	55                   	push   rbp
   256d9:	48 89 e5             	mov    rbp,rsp
   256dc:	48 83 ec 10          	sub    rsp,0x10
   256e0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   256e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   256e8:	48 89 c7             	mov    rdi,rax
   256eb:	e8 94 15 00 00       	call   26c84 <std::allocator<Mesh>::~allocator()>
   256f0:	90                   	nop
   256f1:	c9                   	leave  
   256f2:	c3                   	ret    
   256f3:	90                   	nop

00000000000256f4 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_base()>:
   256f4:	55                   	push   rbp
   256f5:	48 89 e5             	mov    rbp,rsp
   256f8:	48 83 ec 10          	sub    rsp,0x10
   256fc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25700:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25704:	48 89 c7             	mov    rdi,rax
   25707:	e8 50 15 00 00       	call   26c5c <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_impl::_Vector_impl()>
   2570c:	90                   	nop
   2570d:	c9                   	leave  
   2570e:	c3                   	ret    
   2570f:	90                   	nop

0000000000025710 <std::vector<Mesh, std::allocator<Mesh> >::vector()>:
   25710:	55                   	push   rbp
   25711:	48 89 e5             	mov    rbp,rsp
   25714:	48 83 ec 10          	sub    rsp,0x10
   25718:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2571c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25720:	48 89 c7             	mov    rdi,rax
   25723:	e8 cc ff ff ff       	call   256f4 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_base()>
   25728:	90                   	nop
   25729:	c9                   	leave  
   2572a:	c3                   	ret    
   2572b:	90                   	nop

000000000002572c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::~_Vector_impl()>:
   2572c:	55                   	push   rbp
   2572d:	48 89 e5             	mov    rbp,rsp
   25730:	48 83 ec 10          	sub    rsp,0x10
   25734:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25738:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2573c:	48 89 c7             	mov    rdi,rax
   2573f:	e8 16 16 00 00       	call   26d5a <std::allocator<unsigned int>::~allocator()>
   25744:	90                   	nop
   25745:	c9                   	leave  
   25746:	c3                   	ret    
   25747:	90                   	nop

0000000000025748 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base()>:
   25748:	55                   	push   rbp
   25749:	48 89 e5             	mov    rbp,rsp
   2574c:	48 83 ec 10          	sub    rsp,0x10
   25750:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25754:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25758:	48 89 c7             	mov    rdi,rax
   2575b:	e8 d2 15 00 00       	call   26d32 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl()>
   25760:	90                   	nop
   25761:	c9                   	leave  
   25762:	c3                   	ret    
   25763:	90                   	nop

0000000000025764 <std::vector<unsigned int, std::allocator<unsigned int> >::vector()>:
   25764:	55                   	push   rbp
   25765:	48 89 e5             	mov    rbp,rsp
   25768:	48 83 ec 10          	sub    rsp,0x10
   2576c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25770:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25774:	48 89 c7             	mov    rdi,rax
   25777:	e8 cc ff ff ff       	call   25748 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base()>
   2577c:	90                   	nop
   2577d:	c9                   	leave  
   2577e:	c3                   	ret    
   2577f:	90                   	nop

0000000000025780 <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_impl::~_Vector_impl()>:
   25780:	55                   	push   rbp
   25781:	48 89 e5             	mov    rbp,rsp
   25784:	48 83 ec 10          	sub    rsp,0x10
   25788:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2578c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25790:	48 89 c7             	mov    rdi,rax
   25793:	e8 98 16 00 00       	call   26e30 <std::allocator<Transform>::~allocator()>
   25798:	90                   	nop
   25799:	c9                   	leave  
   2579a:	c3                   	ret    
   2579b:	90                   	nop

000000000002579c <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_base()>:
   2579c:	55                   	push   rbp
   2579d:	48 89 e5             	mov    rbp,rsp
   257a0:	48 83 ec 10          	sub    rsp,0x10
   257a4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   257a8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   257ac:	48 89 c7             	mov    rdi,rax
   257af:	e8 54 16 00 00       	call   26e08 <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_impl::_Vector_impl()>
   257b4:	90                   	nop
   257b5:	c9                   	leave  
   257b6:	c3                   	ret    
   257b7:	90                   	nop

00000000000257b8 <std::vector<Transform, std::allocator<Transform> >::vector()>:
   257b8:	55                   	push   rbp
   257b9:	48 89 e5             	mov    rbp,rsp
   257bc:	48 83 ec 10          	sub    rsp,0x10
   257c0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   257c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   257c8:	48 89 c7             	mov    rdi,rax
   257cb:	e8 cc ff ff ff       	call   2579c <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_base()>
   257d0:	90                   	nop
   257d1:	c9                   	leave  
   257d2:	c3                   	ret    
   257d3:	90                   	nop

00000000000257d4 <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_impl::~_Vector_impl()>:
   257d4:	55                   	push   rbp
   257d5:	48 89 e5             	mov    rbp,rsp
   257d8:	48 83 ec 10          	sub    rsp,0x10
   257dc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   257e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   257e4:	48 89 c7             	mov    rdi,rax
   257e7:	e8 2a 17 00 00       	call   26f16 <std::allocator<AABB>::~allocator()>
   257ec:	90                   	nop
   257ed:	c9                   	leave  
   257ee:	c3                   	ret    
   257ef:	90                   	nop

00000000000257f0 <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_base()>:
   257f0:	55                   	push   rbp
   257f1:	48 89 e5             	mov    rbp,rsp
   257f4:	48 83 ec 10          	sub    rsp,0x10
   257f8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   257fc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25800:	48 89 c7             	mov    rdi,rax
   25803:	e8 e6 16 00 00       	call   26eee <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_impl::_Vector_impl()>
   25808:	90                   	nop
   25809:	c9                   	leave  
   2580a:	c3                   	ret    
   2580b:	90                   	nop

000000000002580c <std::vector<AABB, std::allocator<AABB> >::vector()>:
   2580c:	55                   	push   rbp
   2580d:	48 89 e5             	mov    rbp,rsp
   25810:	48 83 ec 10          	sub    rsp,0x10
   25814:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25818:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2581c:	48 89 c7             	mov    rdi,rax
   2581f:	e8 cc ff ff ff       	call   257f0 <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_base()>
   25824:	90                   	nop
   25825:	c9                   	leave  
   25826:	c3                   	ret    
   25827:	90                   	nop

0000000000025828 <Scene::Scene()>:
   25828:	55                   	push   rbp
   25829:	48 89 e5             	mov    rbp,rsp
   2582c:	48 83 ec 10          	sub    rsp,0x10
   25830:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25834:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25838:	48 89 c7             	mov    rdi,rax
   2583b:	e8 d0 fe ff ff       	call   25710 <std::vector<Mesh, std::allocator<Mesh> >::vector()>
   25840:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25844:	48 83 c0 18          	add    rax,0x18
   25848:	48 89 c7             	mov    rdi,rax
   2584b:	e8 14 ff ff ff       	call   25764 <std::vector<unsigned int, std::allocator<unsigned int> >::vector()>
   25850:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25854:	48 83 c0 30          	add    rax,0x30
   25858:	48 89 c7             	mov    rdi,rax
   2585b:	e8 58 ff ff ff       	call   257b8 <std::vector<Transform, std::allocator<Transform> >::vector()>
   25860:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25864:	48 83 c0 48          	add    rax,0x48
   25868:	48 89 c7             	mov    rdi,rax
   2586b:	e8 9c ff ff ff       	call   2580c <std::vector<AABB, std::allocator<AABB> >::vector()>
   25870:	90                   	nop
   25871:	c9                   	leave  
   25872:	c3                   	ret    
   25873:	90                   	nop

0000000000025874 <Scene::~Scene()>:
   25874:	55                   	push   rbp
   25875:	48 89 e5             	mov    rbp,rsp
   25878:	48 83 ec 10          	sub    rsp,0x10
   2587c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25880:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25884:	48 83 c0 48          	add    rax,0x48
   25888:	48 89 c7             	mov    rdi,rax
   2588b:	e8 00 17 00 00       	call   26f90 <std::vector<AABB, std::allocator<AABB> >::~vector()>
   25890:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25894:	48 83 c0 30          	add    rax,0x30
   25898:	48 89 c7             	mov    rdi,rax
   2589b:	e8 0a 16 00 00       	call   26eaa <std::vector<Transform, std::allocator<Transform> >::~vector()>
   258a0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   258a4:	48 83 c0 18          	add    rax,0x18
   258a8:	48 89 c7             	mov    rdi,rax
   258ab:	e8 14 15 00 00       	call   26dc4 <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   258b0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   258b4:	48 89 c7             	mov    rdi,rax
   258b7:	e8 32 14 00 00       	call   26cee <std::vector<Mesh, std::allocator<Mesh> >::~vector()>
   258bc:	90                   	nop
   258bd:	c9                   	leave  
   258be:	c3                   	ret    

00000000000258bf <__gnu_cxx::char_traits<char>::eq(char const&, char const&)>:
   258bf:	55                   	push   rbp
   258c0:	48 89 e5             	mov    rbp,rsp
   258c3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   258c7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   258cb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   258cf:	0f b6 10             	movzx  edx,BYTE PTR [rax]
   258d2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   258d6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   258d9:	38 c2                	cmp    dl,al
   258db:	0f 94 c0             	sete   al
   258de:	5d                   	pop    rbp
   258df:	c3                   	ret    

00000000000258e0 <__gnu_cxx::char_traits<char>::length(char const*)>:
   258e0:	55                   	push   rbp
   258e1:	48 89 e5             	mov    rbp,rsp
   258e4:	48 83 ec 30          	sub    rsp,0x30
   258e8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   258ec:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   258f5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   258f9:	31 c0                	xor    eax,eax
   258fb:	48 c7 45 f0 00 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
   25903:	eb 05                	jmp    2590a <__gnu_cxx::char_traits<char>::length(char const*)+0x2a>
   25905:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
   2590a:	c6 45 ef 00          	mov    BYTE PTR [rbp-0x11],0x0
   2590e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   25912:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   25916:	48 01 c2             	add    rdx,rax
   25919:	48 8d 45 ef          	lea    rax,[rbp-0x11]
   2591d:	48 89 c6             	mov    rsi,rax
   25920:	48 89 d7             	mov    rdi,rdx
   25923:	e8 97 ff ff ff       	call   258bf <__gnu_cxx::char_traits<char>::eq(char const&, char const&)>
   25928:	83 f0 01             	xor    eax,0x1
   2592b:	84 c0                	test   al,al
   2592d:	75 d6                	jne    25905 <__gnu_cxx::char_traits<char>::length(char const*)+0x25>
   2592f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   25933:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   25937:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   25940:	74 05                	je     25947 <__gnu_cxx::char_traits<char>::length(char const*)+0x67>
   25942:	e8 99 eb fd ff       	call   44e0 <__stack_chk_fail@plt>
   25947:	c9                   	leave  
   25948:	c3                   	ret    
   25949:	90                   	nop

000000000002594a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>:
   2594a:	55                   	push   rbp
   2594b:	48 89 e5             	mov    rbp,rsp
   2594e:	48 83 ec 10          	sub    rsp,0x10
   25952:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25956:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2595a:	48 89 c7             	mov    rdi,rax
   2595d:	e8 1e e7 fd ff       	call   4080 <std::allocator<char>::~allocator()@plt>
   25962:	90                   	nop
   25963:	c9                   	leave  
   25964:	c3                   	ret    
   25965:	90                   	nop

0000000000025966 <std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::~unique_ptr()>:
   25966:	55                   	push   rbp
   25967:	48 89 e5             	mov    rbp,rsp
   2596a:	53                   	push   rbx
   2596b:	48 83 ec 28          	sub    rsp,0x28
   2596f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   25973:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25977:	48 89 c7             	mov    rdi,rax
   2597a:	e8 7d 1f 00 00       	call   278fc <std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_ptr()>
   2597f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   25983:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   25987:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2598a:	48 85 c0             	test   rax,rax
   2598d:	74 29                	je     259b8 <std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::~unique_ptr()+0x52>
   2598f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25993:	48 89 c7             	mov    rdi,rax
   25996:	e8 7b 1f 00 00       	call   27916 <std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::get_deleter()>
   2599b:	48 89 c3             	mov    rbx,rax
   2599e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   259a2:	48 89 c7             	mov    rdi,rax
   259a5:	e8 86 1f 00 00       	call   27930 <std::remove_reference<std::filesystem::__cxx11::path::_List::_Impl*&>::type&& std::move<std::filesystem::__cxx11::path::_List::_Impl*&>(std::filesystem::__cxx11::path::_List::_Impl*&)>
   259aa:	48 8b 00             	mov    rax,QWORD PTR [rax]
   259ad:	48 89 c6             	mov    rsi,rax
   259b0:	48 89 df             	mov    rdi,rbx
   259b3:	e8 18 e7 fd ff       	call   40d0 <std::filesystem::__cxx11::path::_List::_Impl_deleter::operator()(std::filesystem::__cxx11::path::_List::_Impl*) const@plt>
   259b8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   259bc:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   259c3:	90                   	nop
   259c4:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   259c8:	c9                   	leave  
   259c9:	c3                   	ret    

00000000000259ca <std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
   259ca:	55                   	push   rbp
   259cb:	48 89 e5             	mov    rbp,rsp
   259ce:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   259d2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   259d6:	5d                   	pop    rbp
   259d7:	c3                   	ret    

00000000000259d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::basic_string_view<char, std::char_traits<char> >, void>(std::basic_string_view<char, std::char_traits<char> > const&, std::allocator<char> const&)>:
   259d8:	55                   	push   rbp
   259d9:	48 89 e5             	mov    rbp,rsp
   259dc:	53                   	push   rbx
   259dd:	48 83 ec 48          	sub    rsp,0x48
   259e1:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   259e5:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   259e9:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   259ed:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   259f6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   259fa:	31 c0                	xor    eax,eax
   259fc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   25a00:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   25a03:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   25a07:	48 89 d7             	mov    rdi,rdx
   25a0a:	48 89 c6             	mov    rsi,rax
   25a0d:	e8 4e ec fd ff       	call   4660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_to_string_view(std::basic_string_view<char, std::char_traits<char> >)@plt>
   25a12:	48 89 c1             	mov    rcx,rax
   25a15:	48 89 d3             	mov    rbx,rdx
   25a18:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   25a1c:	48 89 ce             	mov    rsi,rcx
   25a1f:	48 89 c7             	mov    rdi,rax
   25a22:	e8 09 e7 fd ff       	call   4130 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<char, std::char_traits<char> >)@plt>
   25a27:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
   25a2b:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   25a2f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   25a33:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   25a37:	48 89 c7             	mov    rdi,rax
   25a3a:	e8 91 ed fd ff       	call   47d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper, std::allocator<char> const&)@plt>
   25a3f:	90                   	nop
   25a40:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   25a44:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   25a4d:	74 05                	je     25a54 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::basic_string_view<char, std::char_traits<char> >, void>(std::basic_string_view<char, std::char_traits<char> > const&, std::allocator<char> const&)+0x7c>
   25a4f:	e8 8c ea fd ff       	call   44e0 <__stack_chk_fail@plt>
   25a54:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   25a58:	c9                   	leave  
   25a59:	c3                   	ret    

0000000000025a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>:
   25a5a:	55                   	push   rbp
   25a5b:	48 89 e5             	mov    rbp,rsp
   25a5e:	53                   	push   rbx
   25a5f:	48 83 ec 28          	sub    rsp,0x28
   25a63:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   25a67:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   25a6b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   25a6f:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   25a73:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   25a77:	48 89 c7             	mov    rdi,rax
   25a7a:	e8 d1 e8 fd ff       	call   4350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>
   25a7f:	48 89 c1             	mov    rcx,rax
   25a82:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25a86:	48 89 c2             	mov    rdx,rax
   25a89:	48 89 ce             	mov    rsi,rcx
   25a8c:	48 89 df             	mov    rdi,rbx
   25a8f:	e8 ec e9 fd ff       	call   4480 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)@plt>
   25a94:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   25a99:	74 15                	je     25ab0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)+0x56>
   25a9b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   25a9f:	48 89 c7             	mov    rdi,rax
   25aa2:	e8 0e f8 ff ff       	call   252b5 <std::char_traits<char>::length(char const*)>
   25aa7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   25aab:	48 01 d0             	add    rax,rdx
   25aae:	eb 08                	jmp    25ab8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)+0x5e>
   25ab0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   25ab4:	48 83 e8 01          	sub    rax,0x1
   25ab8:	48 8b 75 e0          	mov    rsi,QWORD PTR [rbp-0x20]
   25abc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   25ac0:	48 89 c2             	mov    rdx,rax
   25ac3:	48 89 cf             	mov    rdi,rcx
   25ac6:	e8 03 1e 00 00       	call   278ce <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)>
   25acb:	eb 1a                	jmp    25ae7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)+0x8d>
   25acd:	48 89 c3             	mov    rbx,rax
   25ad0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   25ad4:	48 89 c7             	mov    rdi,rax
   25ad7:	e8 6e fe ff ff       	call   2594a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>
   25adc:	48 89 d8             	mov    rax,rbx
   25adf:	48 89 c7             	mov    rdi,rax
   25ae2:	e8 79 ec fd ff       	call   4760 <_Unwind_Resume@plt>
   25ae7:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   25aeb:	c9                   	leave  
   25aec:	c3                   	ret    

0000000000025aed <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
   25aed:	55                   	push   rbp
   25aee:	48 89 e5             	mov    rbp,rsp
   25af1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25af5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25af9:	5d                   	pop    rbp
   25afa:	c3                   	ret    
   25afb:	90                   	nop

0000000000025afc <std::basic_string_view<char, std::char_traits<char> >::basic_string_view(char const*)>:
   25afc:	55                   	push   rbp
   25afd:	48 89 e5             	mov    rbp,rsp
   25b00:	48 83 ec 10          	sub    rsp,0x10
   25b04:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25b08:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   25b0c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   25b10:	48 89 c7             	mov    rdi,rax
   25b13:	e8 9d f7 ff ff       	call   252b5 <std::char_traits<char>::length(char const*)>
   25b18:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   25b1c:	48 89 02             	mov    QWORD PTR [rdx],rax
   25b1f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25b23:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   25b27:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   25b2b:	90                   	nop
   25b2c:	c9                   	leave  
   25b2d:	c3                   	ret    

0000000000025b2e <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>:
   25b2e:	55                   	push   rbp
   25b2f:	48 89 e5             	mov    rbp,rsp
   25b32:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25b36:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   25b3a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25b3e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   25b41:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   25b45:	48 8b 00             	mov    rax,QWORD PTR [rax]
   25b48:	48 39 c2             	cmp    rdx,rax
   25b4b:	73 06                	jae    25b53 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)+0x25>
   25b4d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   25b51:	eb 04                	jmp    25b57 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)+0x29>
   25b53:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25b57:	5d                   	pop    rbp
   25b58:	c3                   	ret    

0000000000025b59 <glm::vec<2, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, float)>:
   25b59:	55                   	push   rbp
   25b5a:	48 89 e5             	mov    rbp,rsp
   25b5d:	48 83 ec 20          	sub    rsp,0x20
   25b61:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   25b65:	f3 0f 11 45 e4       	movss  DWORD PTR [rbp-0x1c],xmm0
   25b6a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   25b73:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   25b77:	31 c0                	xor    eax,eax
   25b79:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   25b7d:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   25b82:	0f 28 c8             	movaps xmm1,xmm0
   25b85:	f3 0f 59 4d e4       	mulss  xmm1,DWORD PTR [rbp-0x1c]
   25b8a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   25b8e:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   25b92:	f3 0f 59 45 e4       	mulss  xmm0,DWORD PTR [rbp-0x1c]
   25b97:	66 0f 7e c2          	movd   edx,xmm0
   25b9b:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   25b9f:	66 0f 6e c2          	movd   xmm0,edx
   25ba3:	48 89 c7             	mov    rdi,rax
   25ba6:	e8 c7 f8 ff ff       	call   25472 <glm::vec<2, float, (glm::qualifier)0>::vec(float, float)>
   25bab:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   25baf:	48 89 c2             	mov    rdx,rax
   25bb2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25bb6:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   25bbf:	74 05                	je     25bc6 <glm::vec<2, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, float)+0x6d>
   25bc1:	e8 1a e9 fd ff       	call   44e0 <__stack_chk_fail@plt>
   25bc6:	66 48 0f 6e c2       	movq   xmm0,rdx
   25bcb:	c9                   	leave  
   25bcc:	c3                   	ret    

0000000000025bcd <auto std::filesystem::__cxx11::__detail::__effective_range<char const*>(char const* const&)>:
   25bcd:	55                   	push   rbp
   25bce:	48 89 e5             	mov    rbp,rsp
   25bd1:	48 83 ec 30          	sub    rsp,0x30
   25bd5:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   25bd9:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   25be2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   25be6:	31 c0                	xor    eax,eax
   25be8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25bec:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   25bef:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   25bf3:	48 89 d6             	mov    rsi,rdx
   25bf6:	48 89 c7             	mov    rdi,rax
   25bf9:	e8 fe fe ff ff       	call   25afc <std::basic_string_view<char, std::char_traits<char> >::basic_string_view(char const*)>
   25bfe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   25c02:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   25c06:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   25c0a:	64 48 2b 0c 25 28 00 00 00 	sub    rcx,QWORD PTR fs:0x28
   25c13:	74 05                	je     25c1a <auto std::filesystem::__cxx11::__detail::__effective_range<char const*>(char const* const&)+0x4d>
   25c15:	e8 c6 e8 fd ff       	call   44e0 <__stack_chk_fail@plt>
   25c1a:	c9                   	leave  
   25c1b:	c3                   	ret    

0000000000025c1c <auto std::filesystem::__cxx11::path::_S_convert<std::basic_string_view<char, std::char_traits<char> > >(std::basic_string_view<char, std::char_traits<char> > const&)>:
   25c1c:	55                   	push   rbp
   25c1d:	48 89 e5             	mov    rbp,rsp
   25c20:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25c24:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25c28:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   25c2c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   25c2f:	5d                   	pop    rbp
   25c30:	c3                   	ret    
   25c31:	90                   	nop

0000000000025c32 <std::filesystem::__cxx11::path::path<char const*, std::filesystem::__cxx11::path>(char const* const&, std::filesystem::__cxx11::path::format)>:
   25c32:	55                   	push   rbp
   25c33:	48 89 e5             	mov    rbp,rsp
   25c36:	53                   	push   rbx
   25c37:	48 83 ec 68          	sub    rsp,0x68
   25c3b:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   25c3f:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   25c43:	89 d0                	mov    eax,edx
   25c45:	88 45 9c             	mov    BYTE PTR [rbp-0x64],al
   25c48:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   25c51:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   25c55:	31 c0                	xor    eax,eax
   25c57:	48 8b 5d a8          	mov    rbx,QWORD PTR [rbp-0x58]
   25c5b:	48 8d 45 bf          	lea    rax,[rbp-0x41]
   25c5f:	48 89 c7             	mov    rdi,rax
   25c62:	e8 09 eb fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   25c67:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   25c6b:	48 89 c7             	mov    rdi,rax
   25c6e:	e8 5a ff ff ff       	call   25bcd <auto std::filesystem::__cxx11::__detail::__effective_range<char const*>(char const* const&)>
   25c73:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   25c77:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   25c7b:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   25c7f:	48 89 c7             	mov    rdi,rax
   25c82:	e8 95 ff ff ff       	call   25c1c <auto std::filesystem::__cxx11::path::_S_convert<std::basic_string_view<char, std::char_traits<char> > >(std::basic_string_view<char, std::char_traits<char> > const&)>
   25c87:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   25c8b:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   25c8f:	48 8d 55 bf          	lea    rdx,[rbp-0x41]
   25c93:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   25c97:	48 89 c6             	mov    rsi,rax
   25c9a:	48 89 df             	mov    rdi,rbx
   25c9d:	e8 36 fd ff ff       	call   259d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::basic_string_view<char, std::char_traits<char> >, void>(std::basic_string_view<char, std::char_traits<char> > const&, std::allocator<char> const&)>
   25ca2:	48 8d 45 bf          	lea    rax,[rbp-0x41]
   25ca6:	48 89 c7             	mov    rdi,rax
   25ca9:	e8 e2 e7 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   25cae:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   25cb2:	48 83 c0 20          	add    rax,0x20
   25cb6:	48 89 c7             	mov    rdi,rax
   25cb9:	e8 22 e4 fd ff       	call   40e0 <std::filesystem::__cxx11::path::_List::_List()@plt>
   25cbe:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   25cc2:	48 89 c7             	mov    rdi,rax
   25cc5:	e8 66 e6 fd ff       	call   4330 <std::filesystem::__cxx11::path::_M_split_cmpts()@plt>
   25cca:	eb 49                	jmp    25d15 <std::filesystem::__cxx11::path::path<char const*, std::filesystem::__cxx11::path>(char const* const&, std::filesystem::__cxx11::path::format)+0xe3>
   25ccc:	48 89 c3             	mov    rbx,rax
   25ccf:	48 8d 45 bf          	lea    rax,[rbp-0x41]
   25cd3:	48 89 c7             	mov    rdi,rax
   25cd6:	e8 b5 e7 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   25cdb:	48 89 d8             	mov    rax,rbx
   25cde:	48 89 c7             	mov    rdi,rax
   25ce1:	e8 7a ea fd ff       	call   4760 <_Unwind_Resume@plt>
   25ce6:	48 89 c3             	mov    rbx,rax
   25ce9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   25ced:	48 83 c0 20          	add    rax,0x20
   25cf1:	48 89 c7             	mov    rdi,rax
   25cf4:	e8 07 f7 ff ff       	call   25400 <std::filesystem::__cxx11::path::_List::~_List()>
   25cf9:	eb 03                	jmp    25cfe <std::filesystem::__cxx11::path::path<char const*, std::filesystem::__cxx11::path>(char const* const&, std::filesystem::__cxx11::path::format)+0xcc>
   25cfb:	48 89 c3             	mov    rbx,rax
   25cfe:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   25d02:	48 89 c7             	mov    rdi,rax
   25d05:	e8 56 e5 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   25d0a:	48 89 d8             	mov    rax,rbx
   25d0d:	48 89 c7             	mov    rdi,rax
   25d10:	e8 4b ea fd ff       	call   4760 <_Unwind_Resume@plt>
   25d15:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   25d19:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   25d22:	74 05                	je     25d29 <std::filesystem::__cxx11::path::path<char const*, std::filesystem::__cxx11::path>(char const* const&, std::filesystem::__cxx11::path::format)+0xf7>
   25d24:	e8 b7 e7 fd ff       	call   44e0 <__stack_chk_fail@plt>
   25d29:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   25d2d:	c9                   	leave  
   25d2e:	c3                   	ret    

0000000000025d2f <glm::vec<2, float, (glm::qualifier)0> glm::normalize<2, float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&)>:
   25d2f:	55                   	push   rbp
   25d30:	48 89 e5             	mov    rbp,rsp
   25d33:	48 83 ec 10          	sub    rsp,0x10
   25d37:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   25d3b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25d3f:	48 89 c7             	mov    rdi,rax
   25d42:	e8 5d 1c 00 00       	call   279a4 <glm::detail::compute_normalize<2, float, (glm::qualifier)0, false>::call(glm::vec<2, float, (glm::qualifier)0> const&)>
   25d47:	66 48 0f 7e c0       	movq   rax,xmm0
   25d4c:	66 48 0f 6e c0       	movq   xmm0,rax
   25d51:	c9                   	leave  
   25d52:	c3                   	ret    
   25d53:	90                   	nop

0000000000025d54 <v3<float>::normalize()>:
   25d54:	55                   	push   rbp
   25d55:	48 89 e5             	mov    rbp,rsp
   25d58:	48 83 ec 40          	sub    rsp,0x40
   25d5c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   25d60:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   25d69:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   25d6d:	31 c0                	xor    eax,eax
   25d6f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25d73:	48 89 c7             	mov    rdi,rax
   25d76:	e8 75 1c 00 00       	call   279f0 <v3<float>::len()>
   25d7b:	66 0f 7e c0          	movd   eax,xmm0
   25d7f:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   25d82:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25d86:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   25d8a:	f3 0f 5e 45 e8       	divss  xmm0,DWORD PTR [rbp-0x18]
   25d8f:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   25d94:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25d98:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   25d9d:	f3 0f 5e 45 e8       	divss  xmm0,DWORD PTR [rbp-0x18]
   25da2:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   25da7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25dab:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   25db0:	f3 0f 5e 45 e8       	divss  xmm0,DWORD PTR [rbp-0x18]
   25db5:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   25dba:	48 8b 55 ec          	mov    rdx,QWORD PTR [rbp-0x14]
   25dbe:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   25dc1:	48 89 c1             	mov    rcx,rax
   25dc4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25dc8:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   25dd1:	74 05                	je     25dd8 <v3<float>::normalize()+0x84>
   25dd3:	e8 08 e7 fd ff       	call   44e0 <__stack_chk_fail@plt>
   25dd8:	66 48 0f 6e c2       	movq   xmm0,rdx
   25ddd:	66 48 0f 6e c9       	movq   xmm1,rcx
   25de2:	c9                   	leave  
   25de3:	c3                   	ret    

0000000000025de4 <v3<float> cross<float>(v3<float>, v3<float>)>:
   25de4:	55                   	push   rbp
   25de5:	48 89 e5             	mov    rbp,rsp
   25de8:	48 83 ec 50          	sub    rsp,0x50
   25dec:	66 48 0f 7e c0       	movq   rax,xmm0
   25df1:	66 48 0f 7e c9       	movq   rcx,xmm1
   25df6:	66 0f 6f c2          	movdqa xmm0,xmm2
   25dfa:	66 48 0f 7e da       	movq   rdx,xmm3
   25dff:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   25e03:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   25e06:	83 e0 00             	and    eax,0x0
   25e09:	09 c8                	or     eax,ecx
   25e0b:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   25e0e:	66 0f d6 45 c0       	movq   QWORD PTR [rbp-0x40],xmm0
   25e13:	8b 45 c8             	mov    eax,DWORD PTR [rbp-0x38]
   25e16:	83 e0 00             	and    eax,0x0
   25e19:	09 d0                	or     eax,edx
   25e1b:	89 45 c8             	mov    DWORD PTR [rbp-0x38],eax
   25e1e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   25e27:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   25e2b:	31 c0                	xor    eax,eax
   25e2d:	f3 0f 10 4d d4       	movss  xmm1,DWORD PTR [rbp-0x2c]
   25e32:	f3 0f 10 45 c8       	movss  xmm0,DWORD PTR [rbp-0x38]
   25e37:	f3 0f 59 c1          	mulss  xmm0,xmm1
   25e3b:	f3 0f 10 55 d8       	movss  xmm2,DWORD PTR [rbp-0x28]
   25e40:	f3 0f 10 4d c4       	movss  xmm1,DWORD PTR [rbp-0x3c]
   25e45:	f3 0f 59 ca          	mulss  xmm1,xmm2
   25e49:	f3 0f 5c c1          	subss  xmm0,xmm1
   25e4d:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   25e52:	f3 0f 10 4d d8       	movss  xmm1,DWORD PTR [rbp-0x28]
   25e57:	f3 0f 10 45 c0       	movss  xmm0,DWORD PTR [rbp-0x40]
   25e5c:	f3 0f 59 c1          	mulss  xmm0,xmm1
   25e60:	f3 0f 10 55 d0       	movss  xmm2,DWORD PTR [rbp-0x30]
   25e65:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   25e6a:	f3 0f 59 ca          	mulss  xmm1,xmm2
   25e6e:	f3 0f 5c c1          	subss  xmm0,xmm1
   25e72:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   25e77:	f3 0f 10 4d d0       	movss  xmm1,DWORD PTR [rbp-0x30]
   25e7c:	f3 0f 10 45 c4       	movss  xmm0,DWORD PTR [rbp-0x3c]
   25e81:	f3 0f 59 c1          	mulss  xmm0,xmm1
   25e85:	f3 0f 10 55 d4       	movss  xmm2,DWORD PTR [rbp-0x2c]
   25e8a:	f3 0f 10 4d c0       	movss  xmm1,DWORD PTR [rbp-0x40]
   25e8f:	f3 0f 59 ca          	mulss  xmm1,xmm2
   25e93:	f3 0f 5c c1          	subss  xmm0,xmm1
   25e97:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   25e9c:	48 8b 55 ec          	mov    rdx,QWORD PTR [rbp-0x14]
   25ea0:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   25ea3:	48 89 c1             	mov    rcx,rax
   25ea6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25eaa:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   25eb3:	74 05                	je     25eba <v3<float> cross<float>(v3<float>, v3<float>)+0xd6>
   25eb5:	e8 26 e6 fd ff       	call   44e0 <__stack_chk_fail@plt>
   25eba:	66 48 0f 6e c2       	movq   xmm0,rdx
   25ebf:	66 48 0f 6e c9       	movq   xmm1,rcx
   25ec4:	c9                   	leave  
   25ec5:	c3                   	ret    

0000000000025ec6 <v3<float>::operator*(float)>:
   25ec6:	55                   	push   rbp
   25ec7:	48 89 e5             	mov    rbp,rsp
   25eca:	48 83 ec 40          	sub    rsp,0x40
   25ece:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   25ed2:	f3 0f 11 45 d4       	movss  DWORD PTR [rbp-0x2c],xmm0
   25ed7:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   25ee0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   25ee4:	31 c0                	xor    eax,eax
   25ee6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25eea:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   25eee:	f3 0f 59 45 d4       	mulss  xmm0,DWORD PTR [rbp-0x2c]
   25ef3:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   25ef8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25efc:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   25f01:	f3 0f 59 45 d4       	mulss  xmm0,DWORD PTR [rbp-0x2c]
   25f06:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   25f0b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25f0f:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   25f14:	f3 0f 59 45 d4       	mulss  xmm0,DWORD PTR [rbp-0x2c]
   25f19:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   25f1e:	48 8b 55 ec          	mov    rdx,QWORD PTR [rbp-0x14]
   25f22:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   25f25:	48 89 c1             	mov    rcx,rax
   25f28:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25f2c:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   25f35:	74 05                	je     25f3c <v3<float>::operator*(float)+0x76>
   25f37:	e8 a4 e5 fd ff       	call   44e0 <__stack_chk_fail@plt>
   25f3c:	66 48 0f 6e c2       	movq   xmm0,rdx
   25f41:	66 48 0f 6e c9       	movq   xmm1,rcx
   25f46:	c9                   	leave  
   25f47:	c3                   	ret    

0000000000025f48 <v3<float>::operator+(v3<float>)>:
   25f48:	55                   	push   rbp
   25f49:	48 89 e5             	mov    rbp,rsp
   25f4c:	48 83 ec 50          	sub    rsp,0x50
   25f50:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   25f54:	66 48 0f 7e c0       	movq   rax,xmm0
   25f59:	66 48 0f 7e ca       	movq   rdx,xmm1
   25f5e:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   25f62:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   25f65:	83 e0 00             	and    eax,0x0
   25f68:	09 d0                	or     eax,edx
   25f6a:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
   25f6d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   25f76:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   25f7a:	31 c0                	xor    eax,eax
   25f7c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25f80:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   25f84:	f3 0f 10 45 c8       	movss  xmm0,DWORD PTR [rbp-0x38]
   25f89:	f3 0f 58 c1          	addss  xmm0,xmm1
   25f8d:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   25f92:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25f96:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   25f9b:	f3 0f 10 45 cc       	movss  xmm0,DWORD PTR [rbp-0x34]
   25fa0:	f3 0f 58 c1          	addss  xmm0,xmm1
   25fa4:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   25fa9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   25fad:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   25fb2:	f3 0f 10 45 d0       	movss  xmm0,DWORD PTR [rbp-0x30]
   25fb7:	f3 0f 58 c1          	addss  xmm0,xmm1
   25fbb:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   25fc0:	48 8b 55 ec          	mov    rdx,QWORD PTR [rbp-0x14]
   25fc4:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   25fc7:	48 89 c1             	mov    rcx,rax
   25fca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   25fce:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   25fd7:	74 05                	je     25fde <v3<float>::operator+(v3<float>)+0x96>
   25fd9:	e8 02 e5 fd ff       	call   44e0 <__stack_chk_fail@plt>
   25fde:	66 48 0f 6e c2       	movq   xmm0,rdx
   25fe3:	66 48 0f 6e c9       	movq   xmm1,rcx
   25fe8:	c9                   	leave  
   25fe9:	c3                   	ret    

0000000000025fea <v3<float>::operator-(v3<float>)>:
   25fea:	55                   	push   rbp
   25feb:	48 89 e5             	mov    rbp,rsp
   25fee:	48 83 ec 50          	sub    rsp,0x50
   25ff2:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   25ff6:	66 48 0f 7e c0       	movq   rax,xmm0
   25ffb:	66 48 0f 7e ca       	movq   rdx,xmm1
   26000:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   26004:	8b 45 d0             	mov    eax,DWORD PTR [rbp-0x30]
   26007:	83 e0 00             	and    eax,0x0
   2600a:	09 d0                	or     eax,edx
   2600c:	89 45 d0             	mov    DWORD PTR [rbp-0x30],eax
   2600f:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   26018:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2601c:	31 c0                	xor    eax,eax
   2601e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   26022:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   26026:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   2602b:	f3 0f 5c c1          	subss  xmm0,xmm1
   2602f:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   26034:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   26038:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2603d:	f3 0f 10 4d cc       	movss  xmm1,DWORD PTR [rbp-0x34]
   26042:	f3 0f 5c c1          	subss  xmm0,xmm1
   26046:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   2604b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2604f:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   26054:	f3 0f 10 4d d0       	movss  xmm1,DWORD PTR [rbp-0x30]
   26059:	f3 0f 5c c1          	subss  xmm0,xmm1
   2605d:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   26062:	48 8b 55 ec          	mov    rdx,QWORD PTR [rbp-0x14]
   26066:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   26069:	48 89 c1             	mov    rcx,rax
   2606c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26070:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   26079:	74 05                	je     26080 <v3<float>::operator-(v3<float>)+0x96>
   2607b:	e8 60 e4 fd ff       	call   44e0 <__stack_chk_fail@plt>
   26080:	66 48 0f 6e c2       	movq   xmm0,rdx
   26085:	66 48 0f 6e c9       	movq   xmm1,rcx
   2608a:	c9                   	leave  
   2608b:	c3                   	ret    

000000000002608c <float dot<float>(v3<float>, v3<float>)>:
   2608c:	55                   	push   rbp
   2608d:	48 89 e5             	mov    rbp,rsp
   26090:	66 48 0f 7e c0       	movq   rax,xmm0
   26095:	66 48 0f 7e c9       	movq   rcx,xmm1
   2609a:	66 0f 6f c2          	movdqa xmm0,xmm2
   2609e:	66 48 0f 7e da       	movq   rdx,xmm3
   260a3:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   260a7:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   260aa:	83 e0 00             	and    eax,0x0
   260ad:	09 c8                	or     eax,ecx
   260af:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   260b2:	66 0f d6 45 e0       	movq   QWORD PTR [rbp-0x20],xmm0
   260b7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   260ba:	83 e0 00             	and    eax,0x0
   260bd:	09 d0                	or     eax,edx
   260bf:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
   260c2:	f3 0f 10 4d f0       	movss  xmm1,DWORD PTR [rbp-0x10]
   260c7:	f3 0f 10 45 e0       	movss  xmm0,DWORD PTR [rbp-0x20]
   260cc:	f3 0f 59 c8          	mulss  xmm1,xmm0
   260d0:	f3 0f 10 55 f4       	movss  xmm2,DWORD PTR [rbp-0xc]
   260d5:	f3 0f 10 45 e4       	movss  xmm0,DWORD PTR [rbp-0x1c]
   260da:	f3 0f 59 c2          	mulss  xmm0,xmm2
   260de:	f3 0f 58 c8          	addss  xmm1,xmm0
   260e2:	f3 0f 10 55 f8       	movss  xmm2,DWORD PTR [rbp-0x8]
   260e7:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   260ec:	f3 0f 59 c2          	mulss  xmm0,xmm2
   260f0:	f3 0f 58 c1          	addss  xmm0,xmm1
   260f4:	5d                   	pop    rbp
   260f5:	c3                   	ret    

00000000000260f6 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, int>(float, int, int)>:
   260f6:	55                   	push   rbp
   260f7:	48 89 e5             	mov    rbp,rsp
   260fa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   260fe:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   26103:	89 75 f0             	mov    DWORD PTR [rbp-0x10],esi
   26106:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   26109:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2610d:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   26112:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   26116:	66 0f ef c0          	pxor   xmm0,xmm0
   2611a:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   2611f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26123:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   26128:	66 0f ef c0          	pxor   xmm0,xmm0
   2612c:	f3 0f 2a 45 ec       	cvtsi2ss xmm0,DWORD PTR [rbp-0x14]
   26131:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26135:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   2613a:	90                   	nop
   2613b:	5d                   	pop    rbp
   2613c:	c3                   	ret    

000000000002613d <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)>:
   2613d:	55                   	push   rbp
   2613e:	48 89 e5             	mov    rbp,rsp
   26141:	48 83 ec 40          	sub    rsp,0x40
   26145:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   26149:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2614d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   26156:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2615a:	31 c0                	xor    eax,eax
   2615c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   26160:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   26165:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   26169:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   2616e:	0f 28 d1             	movaps xmm2,xmm1
   26171:	f3 0f 58 d0          	addss  xmm2,xmm0
   26175:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   26179:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2617e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   26182:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   26187:	0f 28 d9             	movaps xmm3,xmm1
   2618a:	f3 0f 58 d8          	addss  xmm3,xmm0
   2618e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   26192:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   26196:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2619a:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2619e:	f3 0f 58 c8          	addss  xmm1,xmm0
   261a2:	66 0f 7e ca          	movd   edx,xmm1
   261a6:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   261aa:	0f 28 cb             	movaps xmm1,xmm3
   261ad:	66 0f 6e c2          	movd   xmm0,edx
   261b1:	48 89 c7             	mov    rdi,rax
   261b4:	e8 9d f3 ff ff       	call   25556 <glm::vec<3, float, (glm::qualifier)0>::vec(float, float, float)>
   261b9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   261bd:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   261c1:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   261c4:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   261c7:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   261cb:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   261d0:	48 89 c2             	mov    rdx,rax
   261d3:	0f 28 c8             	movaps xmm1,xmm0
   261d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   261da:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   261e3:	74 05                	je     261ea <glm::vec<3, float, (glm::qualifier)0> glm::operator+<float, (glm::qualifier)0>(glm::vec<3, float, (glm::qualifier)0> const&, glm::vec<3, float, (glm::qualifier)0> const&)+0xad>
   261e5:	e8 f6 e2 fd ff       	call   44e0 <__stack_chk_fail@plt>
   261ea:	66 48 0f 6e c2       	movq   xmm0,rdx
   261ef:	c9                   	leave  
   261f0:	c3                   	ret    
   261f1:	90                   	nop

00000000000261f2 <glm::vec<3, float, (glm::qualifier)0>::vec<float, int, float>(float, int, float)>:
   261f2:	55                   	push   rbp
   261f3:	48 89 e5             	mov    rbp,rsp
   261f6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   261fa:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   261ff:	89 75 f0             	mov    DWORD PTR [rbp-0x10],esi
   26202:	f3 0f 11 4d ec       	movss  DWORD PTR [rbp-0x14],xmm1
   26207:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2620b:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   26210:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   26214:	66 0f ef c0          	pxor   xmm0,xmm0
   26218:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   2621d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26221:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   26226:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2622a:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   2622f:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   26234:	90                   	nop
   26235:	5d                   	pop    rbp
   26236:	c3                   	ret    
   26237:	90                   	nop

0000000000026238 <glm::vec<3, float, (glm::qualifier)0>::vec<int, int, float>(int, int, float)>:
   26238:	55                   	push   rbp
   26239:	48 89 e5             	mov    rbp,rsp
   2623c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26240:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   26243:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
   26246:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   2624b:	66 0f ef c0          	pxor   xmm0,xmm0
   2624f:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   26254:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26258:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   2625c:	66 0f ef c0          	pxor   xmm0,xmm0
   26260:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   26265:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26269:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   2626e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26272:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   26277:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   2627c:	90                   	nop
   2627d:	5d                   	pop    rbp
   2627e:	c3                   	ret    
   2627f:	90                   	nop

0000000000026280 <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, int>(int, float, int)>:
   26280:	55                   	push   rbp
   26281:	48 89 e5             	mov    rbp,rsp
   26284:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26288:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   2628b:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   26290:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   26293:	66 0f ef c0          	pxor   xmm0,xmm0
   26297:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   2629c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   262a0:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   262a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   262a8:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   262ad:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   262b2:	66 0f ef c0          	pxor   xmm0,xmm0
   262b6:	f3 0f 2a 45 ec       	cvtsi2ss xmm0,DWORD PTR [rbp-0x14]
   262bb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   262bf:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   262c4:	90                   	nop
   262c5:	5d                   	pop    rbp
   262c6:	c3                   	ret    
   262c7:	90                   	nop

00000000000262c8 <glm::vec<3, float, (glm::qualifier)0>::vec<float, float, int>(float, float, int)>:
   262c8:	55                   	push   rbp
   262c9:	48 89 e5             	mov    rbp,rsp
   262cc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   262d0:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   262d5:	f3 0f 11 4d f0       	movss  DWORD PTR [rbp-0x10],xmm1
   262da:	89 75 ec             	mov    DWORD PTR [rbp-0x14],esi
   262dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   262e1:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   262e6:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   262ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   262ee:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   262f3:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   262f8:	66 0f ef c0          	pxor   xmm0,xmm0
   262fc:	f3 0f 2a 45 ec       	cvtsi2ss xmm0,DWORD PTR [rbp-0x14]
   26301:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26305:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   2630a:	90                   	nop
   2630b:	5d                   	pop    rbp
   2630c:	c3                   	ret    
   2630d:	90                   	nop

000000000002630e <glm::vec<3, float, (glm::qualifier)0>::vec<int, float, float>(int, float, float)>:
   2630e:	55                   	push   rbp
   2630f:	48 89 e5             	mov    rbp,rsp
   26312:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26316:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   26319:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   2631e:	f3 0f 11 4d ec       	movss  DWORD PTR [rbp-0x14],xmm1
   26323:	66 0f ef c0          	pxor   xmm0,xmm0
   26327:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   2632c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26330:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   26334:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26338:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   2633d:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   26342:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26346:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   2634b:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   26350:	90                   	nop
   26351:	5d                   	pop    rbp
   26352:	c3                   	ret    
   26353:	90                   	nop

0000000000026354 <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_impl::_Vector_impl()>:
   26354:	55                   	push   rbp
   26355:	48 89 e5             	mov    rbp,rsp
   26358:	48 83 ec 10          	sub    rsp,0x10
   2635c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26360:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26364:	48 89 c7             	mov    rdi,rax
   26367:	e8 e8 16 00 00       	call   27a54 <std::allocator<Tex>::allocator()>
   2636c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26370:	48 89 c7             	mov    rdi,rax
   26373:	e8 f8 16 00 00       	call   27a70 <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_impl_data::_Vector_impl_data()>
   26378:	90                   	nop
   26379:	c9                   	leave  
   2637a:	c3                   	ret    
   2637b:	90                   	nop

000000000002637c <std::allocator<Tex>::~allocator()>:
   2637c:	55                   	push   rbp
   2637d:	48 89 e5             	mov    rbp,rsp
   26380:	48 83 ec 10          	sub    rsp,0x10
   26384:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26388:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2638c:	48 89 c7             	mov    rdi,rax
   2638f:	e8 0a 17 00 00       	call   27a9e <__gnu_cxx::new_allocator<Tex>::~new_allocator()>
   26394:	90                   	nop
   26395:	c9                   	leave  
   26396:	c3                   	ret    
   26397:	90                   	nop

0000000000026398 <std::_Vector_base<Tex, std::allocator<Tex> >::~_Vector_base()>:
   26398:	55                   	push   rbp
   26399:	48 89 e5             	mov    rbp,rsp
   2639c:	48 83 ec 10          	sub    rsp,0x10
   263a0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   263a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   263a8:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   263ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   263b0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   263b3:	48 89 d0             	mov    rax,rdx
   263b6:	48 29 c8             	sub    rax,rcx
   263b9:	48 c1 f8 03          	sar    rax,0x3
   263bd:	48 89 c2             	mov    rdx,rax
   263c0:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   263ca:	48 0f af c2          	imul   rax,rdx
   263ce:	48 89 c2             	mov    rdx,rax
   263d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   263d5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   263d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   263dc:	48 89 ce             	mov    rsi,rcx
   263df:	48 89 c7             	mov    rdi,rax
   263e2:	e8 c3 16 00 00       	call   27aaa <std::_Vector_base<Tex, std::allocator<Tex> >::_M_deallocate(Tex*, unsigned long)>
   263e7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   263eb:	48 89 c7             	mov    rdi,rax
   263ee:	e8 a7 f1 ff ff       	call   2559a <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_impl::~_Vector_impl()>
   263f3:	90                   	nop
   263f4:	c9                   	leave  
   263f5:	c3                   	ret    

00000000000263f6 <std::vector<Tex, std::allocator<Tex> >::~vector()>:
   263f6:	55                   	push   rbp
   263f7:	48 89 e5             	mov    rbp,rsp
   263fa:	48 83 ec 10          	sub    rsp,0x10
   263fe:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26402:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26406:	48 89 c7             	mov    rdi,rax
   26409:	e8 d2 16 00 00       	call   27ae0 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_get_Tp_allocator()>
   2640e:	48 89 c2             	mov    rdx,rax
   26411:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26415:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   26419:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2641d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26420:	48 89 ce             	mov    rsi,rcx
   26423:	48 89 c7             	mov    rdi,rax
   26426:	e8 c3 16 00 00       	call   27aee <void std::_Destroy<Tex*, Tex>(Tex*, Tex*, std::allocator<Tex>&)>
   2642b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2642f:	48 89 c7             	mov    rdi,rax
   26432:	e8 61 ff ff ff       	call   26398 <std::_Vector_base<Tex, std::allocator<Tex> >::~_Vector_base()>
   26437:	90                   	nop
   26438:	c9                   	leave  
   26439:	c3                   	ret    

000000000002643a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl::_Vector_impl()>:
   2643a:	55                   	push   rbp
   2643b:	48 89 e5             	mov    rbp,rsp
   2643e:	48 83 ec 10          	sub    rsp,0x10
   26442:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26446:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2644a:	48 89 c7             	mov    rdi,rax
   2644d:	e8 c6 16 00 00       	call   27b18 <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocator()>
   26452:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26456:	48 89 c7             	mov    rdi,rax
   26459:	e8 d6 16 00 00       	call   27b34 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl_data::_Vector_impl_data()>
   2645e:	90                   	nop
   2645f:	c9                   	leave  
   26460:	c3                   	ret    
   26461:	90                   	nop

0000000000026462 <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~allocator()>:
   26462:	55                   	push   rbp
   26463:	48 89 e5             	mov    rbp,rsp
   26466:	48 83 ec 10          	sub    rsp,0x10
   2646a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2646e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26472:	48 89 c7             	mov    rdi,rax
   26475:	e8 e8 16 00 00       	call   27b62 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~new_allocator()>
   2647a:	90                   	nop
   2647b:	c9                   	leave  
   2647c:	c3                   	ret    
   2647d:	90                   	nop

000000000002647e <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~_Vector_base()>:
   2647e:	55                   	push   rbp
   2647f:	48 89 e5             	mov    rbp,rsp
   26482:	48 83 ec 10          	sub    rsp,0x10
   26486:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2648a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2648e:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   26492:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26496:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26499:	48 89 d0             	mov    rax,rdx
   2649c:	48 29 c8             	sub    rax,rcx
   2649f:	48 c1 f8 05          	sar    rax,0x5
   264a3:	48 89 c2             	mov    rdx,rax
   264a6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   264aa:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   264ad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   264b1:	48 89 ce             	mov    rsi,rcx
   264b4:	48 89 c7             	mov    rdi,rax
   264b7:	e8 b2 16 00 00       	call   27b6e <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
   264bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   264c0:	48 89 c7             	mov    rdi,rax
   264c3:	e8 26 f1 ff ff       	call   255ee <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl::~_Vector_impl()>
   264c8:	90                   	nop
   264c9:	c9                   	leave  
   264ca:	c3                   	ret    
   264cb:	90                   	nop

00000000000264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>:
   264cc:	55                   	push   rbp
   264cd:	48 89 e5             	mov    rbp,rsp
   264d0:	48 83 ec 10          	sub    rsp,0x10
   264d4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   264d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   264dc:	48 89 c7             	mov    rdi,rax
   264df:	e8 c0 16 00 00       	call   27ba4 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
   264e4:	48 89 c2             	mov    rdx,rax
   264e7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   264eb:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   264ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   264f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
   264f6:	48 89 ce             	mov    rsi,rcx
   264f9:	48 89 c7             	mov    rdi,rax
   264fc:	e8 b1 16 00 00       	call   27bb2 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   26501:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26505:	48 89 c7             	mov    rdi,rax
   26508:	e8 71 ff ff ff       	call   2647e <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~_Vector_base()>
   2650d:	90                   	nop
   2650e:	c9                   	leave  
   2650f:	c3                   	ret    

0000000000026510 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::size() const>:
   26510:	55                   	push   rbp
   26511:	48 89 e5             	mov    rbp,rsp
   26514:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26518:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2651c:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26520:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26524:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26527:	48 89 d0             	mov    rax,rdx
   2652a:	48 29 c8             	sub    rax,rcx
   2652d:	48 c1 f8 03          	sar    rax,0x3
   26531:	48 89 c2             	mov    rdx,rax
   26534:	48 b8 a5 4f fa a4 4f fa a4 4f 	movabs rax,0x4fa4fa4fa4fa4fa5
   2653e:	48 0f af c2          	imul   rax,rdx
   26542:	5d                   	pop    rbp
   26543:	c3                   	ret    

0000000000026544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>:
   26544:	55                   	push   rbp
   26545:	48 89 e5             	mov    rbp,rsp
   26548:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2654c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26550:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26554:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   26557:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2655b:	48 69 c0 68 01 00 00 	imul   rax,rax,0x168
   26562:	48 01 d0             	add    rax,rdx
   26565:	5d                   	pop    rbp
   26566:	c3                   	ret    
   26567:	90                   	nop

0000000000026568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>:
   26568:	55                   	push   rbp
   26569:	48 89 e5             	mov    rbp,rsp
   2656c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26570:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26574:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26578:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2657c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2657f:	48 89 d0             	mov    rax,rdx
   26582:	48 29 c8             	sub    rax,rcx
   26585:	48 c1 f8 05          	sar    rax,0x5
   26589:	5d                   	pop    rbp
   2658a:	c3                   	ret    
   2658b:	90                   	nop

000000000002658c <std::vector<unsigned int, std::allocator<unsigned int> >::data()>:
   2658c:	55                   	push   rbp
   2658d:	48 89 e5             	mov    rbp,rsp
   26590:	48 83 ec 10          	sub    rsp,0x10
   26594:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26598:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2659c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2659f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   265a3:	48 89 d6             	mov    rsi,rdx
   265a6:	48 89 c7             	mov    rdi,rax
   265a9:	e8 2e 16 00 00       	call   27bdc <unsigned int* std::vector<unsigned int, std::allocator<unsigned int> >::_M_data_ptr<unsigned int>(unsigned int*) const>
   265ae:	c9                   	leave  
   265af:	c3                   	ret    

00000000000265b0 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>:
   265b0:	55                   	push   rbp
   265b1:	48 89 e5             	mov    rbp,rsp
   265b4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   265b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   265bc:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   265c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   265c4:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   265c7:	48 89 d0             	mov    rax,rdx
   265ca:	48 29 c8             	sub    rax,rcx
   265cd:	48 c1 f8 02          	sar    rax,0x2
   265d1:	5d                   	pop    rbp
   265d2:	c3                   	ret    
   265d3:	90                   	nop

00000000000265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>:
   265d4:	55                   	push   rbp
   265d5:	48 89 e5             	mov    rbp,rsp
   265d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   265dc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   265e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   265e4:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   265e7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   265eb:	48 c1 e0 05          	shl    rax,0x5
   265ef:	48 01 d0             	add    rax,rdx
   265f2:	5d                   	pop    rbp
   265f3:	c3                   	ret    

00000000000265f4 <float min<float>(float, float)>:
   265f4:	55                   	push   rbp
   265f5:	48 89 e5             	mov    rbp,rsp
   265f8:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   265fd:	f3 0f 11 4d f8       	movss  DWORD PTR [rbp-0x8],xmm1
   26602:	f3 0f 10 45 f8       	movss  xmm0,DWORD PTR [rbp-0x8]
   26607:	0f 2f 45 fc          	comiss xmm0,DWORD PTR [rbp-0x4]
   2660b:	76 07                	jbe    26614 <float min<float>(float, float)+0x20>
   2660d:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   26612:	eb 05                	jmp    26619 <float min<float>(float, float)+0x25>
   26614:	f3 0f 10 45 f8       	movss  xmm0,DWORD PTR [rbp-0x8]
   26619:	5d                   	pop    rbp
   2661a:	c3                   	ret    

000000000002661b <float max<float>(float, float)>:
   2661b:	55                   	push   rbp
   2661c:	48 89 e5             	mov    rbp,rsp
   2661f:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   26624:	f3 0f 11 4d f8       	movss  DWORD PTR [rbp-0x8],xmm1
   26629:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   2662e:	0f 2f 45 f8          	comiss xmm0,DWORD PTR [rbp-0x8]
   26632:	76 07                	jbe    2663b <float max<float>(float, float)+0x20>
   26634:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   26639:	eb 05                	jmp    26640 <float max<float>(float, float)+0x25>
   2663b:	f3 0f 10 45 f8       	movss  xmm0,DWORD PTR [rbp-0x8]
   26640:	5d                   	pop    rbp
   26641:	c3                   	ret    

0000000000026642 <std::vector<AABB, std::allocator<AABB> >::push_back(AABB&&)>:
   26642:	55                   	push   rbp
   26643:	48 89 e5             	mov    rbp,rsp
   26646:	48 83 ec 10          	sub    rsp,0x10
   2664a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2664e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26652:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   26656:	48 89 c7             	mov    rdi,rax
   26659:	e8 90 15 00 00       	call   27bee <std::remove_reference<AABB&>::type&& std::move<AABB&>(AABB&)>
   2665e:	48 89 c2             	mov    rdx,rax
   26661:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26665:	48 89 d6             	mov    rsi,rdx
   26668:	48 89 c7             	mov    rdi,rax
   2666b:	e8 8c 15 00 00       	call   27bfc <AABB& std::vector<AABB, std::allocator<AABB> >::emplace_back<AABB>(AABB&&)>
   26670:	90                   	nop
   26671:	c9                   	leave  
   26672:	c3                   	ret    
   26673:	90                   	nop

0000000000026674 <std::vector<Mesh, std::allocator<Mesh> >::push_back(Mesh&&)>:
   26674:	55                   	push   rbp
   26675:	48 89 e5             	mov    rbp,rsp
   26678:	48 83 ec 10          	sub    rsp,0x10
   2667c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26680:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26684:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   26688:	48 89 c7             	mov    rdi,rax
   2668b:	e8 10 16 00 00       	call   27ca0 <std::remove_reference<Mesh&>::type&& std::move<Mesh&>(Mesh&)>
   26690:	48 89 c2             	mov    rdx,rax
   26693:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26697:	48 89 d6             	mov    rsi,rdx
   2669a:	48 89 c7             	mov    rdi,rax
   2669d:	e8 0c 16 00 00       	call   27cae <Mesh& std::vector<Mesh, std::allocator<Mesh> >::emplace_back<Mesh>(Mesh&&)>
   266a2:	90                   	nop
   266a3:	c9                   	leave  
   266a4:	c3                   	ret    
   266a5:	90                   	nop

00000000000266a6 <std::vector<Transform, std::allocator<Transform> >::push_back(Transform&&)>:
   266a6:	55                   	push   rbp
   266a7:	48 89 e5             	mov    rbp,rsp
   266aa:	48 83 ec 10          	sub    rsp,0x10
   266ae:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   266b2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   266b6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   266ba:	48 89 c7             	mov    rdi,rax
   266bd:	e8 90 16 00 00       	call   27d52 <std::remove_reference<Transform&>::type&& std::move<Transform&>(Transform&)>
   266c2:	48 89 c2             	mov    rdx,rax
   266c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   266c9:	48 89 d6             	mov    rsi,rdx
   266cc:	48 89 c7             	mov    rdi,rax
   266cf:	e8 8c 16 00 00       	call   27d60 <Transform& std::vector<Transform, std::allocator<Transform> >::emplace_back<Transform>(Transform&&)>
   266d4:	90                   	nop
   266d5:	c9                   	leave  
   266d6:	c3                   	ret    

00000000000266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>:
   266d7:	55                   	push   rbp
   266d8:	48 89 e5             	mov    rbp,rsp
   266db:	48 83 ec 10          	sub    rsp,0x10
   266df:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   266e3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   266e7:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   266eb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   266ef:	48 89 d6             	mov    rsi,rdx
   266f2:	48 89 c7             	mov    rdi,rax
   266f5:	e8 06 da fd ff       	call   4100 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
   266fa:	85 c0                	test   eax,eax
   266fc:	0f 94 c0             	sete   al
   266ff:	c9                   	leave  
   26700:	c3                   	ret    
   26701:	90                   	nop

0000000000026702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>:
   26702:	55                   	push   rbp
   26703:	48 89 e5             	mov    rbp,rsp
   26706:	48 83 ec 10          	sub    rsp,0x10
   2670a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2670e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26712:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   26716:	48 89 c7             	mov    rdi,rax
   26719:	e8 e6 16 00 00       	call   27e04 <std::remove_reference<unsigned int&>::type&& std::move<unsigned int&>(unsigned int&)>
   2671e:	48 89 c2             	mov    rdx,rax
   26721:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26725:	48 89 d6             	mov    rsi,rdx
   26728:	48 89 c7             	mov    rdi,rax
   2672b:	e8 e2 16 00 00       	call   27e12 <unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&)>
   26730:	90                   	nop
   26731:	c9                   	leave  
   26732:	c3                   	ret    
   26733:	90                   	nop

0000000000026734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>:
   26734:	55                   	push   rbp
   26735:	48 89 e5             	mov    rbp,rsp
   26738:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2673c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26740:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26744:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26748:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2674b:	48 89 d0             	mov    rax,rdx
   2674e:	48 29 c8             	sub    rax,rcx
   26751:	48 c1 f8 05          	sar    rax,0x5
   26755:	5d                   	pop    rbp
   26756:	c3                   	ret    
   26757:	90                   	nop

0000000000026758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>:
   26758:	55                   	push   rbp
   26759:	48 89 e5             	mov    rbp,rsp
   2675c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26760:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26764:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26768:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2676b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2676f:	48 c1 e0 05          	shl    rax,0x5
   26773:	48 01 d0             	add    rax,rdx
   26776:	5d                   	pop    rbp
   26777:	c3                   	ret    

0000000000026778 <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   26778:	55                   	push   rbp
   26779:	48 89 e5             	mov    rbp,rsp
   2677c:	41 54                	push   r12
   2677e:	53                   	push   rbx
   2677f:	48 83 ec 10          	sub    rsp,0x10
   26783:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   26787:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2678b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2678f:	48 89 c7             	mov    rdi,rax
   26792:	e8 19 db fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   26797:	48 89 c3             	mov    rbx,rax
   2679a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2679e:	48 89 c7             	mov    rdi,rax
   267a1:	e8 0a db fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   267a6:	48 39 c3             	cmp    rbx,rax
   267a9:	75 43                	jne    267ee <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x76>
   267ab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   267af:	48 89 c7             	mov    rdi,rax
   267b2:	e8 f9 da fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   267b7:	49 89 c4             	mov    r12,rax
   267ba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   267be:	48 89 c7             	mov    rdi,rax
   267c1:	e8 da dd fd ff       	call   45a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const@plt>
   267c6:	48 89 c3             	mov    rbx,rax
   267c9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   267cd:	48 89 c7             	mov    rdi,rax
   267d0:	e8 cb dd fd ff       	call   45a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const@plt>
   267d5:	4c 89 e2             	mov    rdx,r12
   267d8:	48 89 de             	mov    rsi,rbx
   267db:	48 89 c7             	mov    rdi,rax
   267de:	e8 12 ea ff ff       	call   251f5 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
   267e3:	85 c0                	test   eax,eax
   267e5:	75 07                	jne    267ee <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x76>
   267e7:	b8 01 00 00 00       	mov    eax,0x1
   267ec:	eb 05                	jmp    267f3 <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7b>
   267ee:	b8 00 00 00 00       	mov    eax,0x0
   267f3:	48 83 c4 10          	add    rsp,0x10
   267f7:	5b                   	pop    rbx
   267f8:	41 5c                	pop    r12
   267fa:	5d                   	pop    rbp
   267fb:	c3                   	ret    

00000000000267fc <std::vector<Tex, std::allocator<Tex> >::operator[](unsigned long)>:
   267fc:	55                   	push   rbp
   267fd:	48 89 e5             	mov    rbp,rsp
   26800:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26804:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26808:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2680c:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2680f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   26813:	48 89 d0             	mov    rax,rdx
   26816:	48 01 c0             	add    rax,rax
   26819:	48 01 d0             	add    rax,rdx
   2681c:	48 c1 e0 03          	shl    rax,0x3
   26820:	48 01 c8             	add    rax,rcx
   26823:	5d                   	pop    rbp
   26824:	c3                   	ret    
   26825:	90                   	nop

0000000000026826 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)>:
   26826:	55                   	push   rbp
   26827:	48 89 e5             	mov    rbp,rsp
   2682a:	48 83 ec 10          	sub    rsp,0x10
   2682e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26832:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26836:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2683a:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   2683e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26842:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   26846:	48 39 c2             	cmp    rdx,rax
   26849:	74 31                	je     2687c <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)+0x56>
   2684b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2684f:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   26853:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26857:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2685b:	48 89 ce             	mov    rsi,rcx
   2685e:	48 89 c7             	mov    rdi,rax
   26861:	e8 50 16 00 00       	call   27eb6 <void std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int, unsigned int const&>(std::allocator<unsigned int>&, unsigned int*, unsigned int const&)>
   26866:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2686a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   2686e:	48 8d 50 04          	lea    rdx,[rax+0x4]
   26872:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26876:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   2687a:	eb 22                	jmp    2689e <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)+0x78>
   2687c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26880:	48 89 c7             	mov    rdi,rax
   26883:	e8 68 16 00 00       	call   27ef0 <std::vector<unsigned int, std::allocator<unsigned int> >::end()>
   26888:	48 89 c1             	mov    rcx,rax
   2688b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2688f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26893:	48 89 ce             	mov    rsi,rcx
   26896:	48 89 c7             	mov    rdi,rax
   26899:	e8 9e 16 00 00       	call   27f3c <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)>
   2689e:	90                   	nop
   2689f:	c9                   	leave  
   268a0:	c3                   	ret    
   268a1:	90                   	nop

00000000000268a2 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   268a2:	55                   	push   rbp
   268a3:	48 89 e5             	mov    rbp,rsp
   268a6:	48 83 ec 10          	sub    rsp,0x10
   268aa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   268ae:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   268b2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   268b6:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   268ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   268be:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   268c2:	48 39 c2             	cmp    rdx,rax
   268c5:	74 31                	je     268f8 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x56>
   268c7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   268cb:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   268cf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   268d3:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   268d7:	48 89 ce             	mov    rsi,rcx
   268da:	48 89 c7             	mov    rdi,rax
   268dd:	e8 0f 18 00 00       	call   280f1 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   268e2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   268e6:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   268ea:	48 8d 50 20          	lea    rdx,[rax+0x20]
   268ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   268f2:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   268f6:	eb 22                	jmp    2691a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x78>
   268f8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   268fc:	48 89 c7             	mov    rdi,rax
   268ff:	e8 26 18 00 00       	call   2812a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::end()>
   26904:	48 89 c1             	mov    rcx,rax
   26907:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2690b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2690f:	48 89 ce             	mov    rsi,rcx
   26912:	48 89 c7             	mov    rdi,rax
   26915:	e8 5c 18 00 00       	call   28176 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2691a:	90                   	nop
   2691b:	c9                   	leave  
   2691c:	c3                   	ret    

000000000002691d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   2691d:	55                   	push   rbp
   2691e:	48 89 e5             	mov    rbp,rsp
   26921:	53                   	push   rbx
   26922:	48 83 ec 48          	sub    rsp,0x48
   26926:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   2692a:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   2692e:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   26932:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2693b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2693f:	31 c0                	xor    eax,eax
   26941:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   26945:	48 89 c7             	mov    rdi,rax
   26948:	e8 68 e9 ff ff       	call   252b5 <std::char_traits<char>::length(char const*)>
   2694d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   26951:	48 8d 45 de          	lea    rax,[rbp-0x22]
   26955:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   26959:	48 89 d6             	mov    rsi,rdx
   2695c:	48 89 c7             	mov    rdi,rax
   2695f:	e8 bc d7 fd ff       	call   4120 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const@plt>
   26964:	48 8d 45 df          	lea    rax,[rbp-0x21]
   26968:	48 8d 55 de          	lea    rdx,[rbp-0x22]
   2696c:	48 89 d6             	mov    rsi,rdx
   2696f:	48 89 c7             	mov    rdi,rax
   26972:	e8 c7 0f 00 00       	call   2793e <__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy(std::allocator<char> const&)>
   26977:	48 8d 55 df          	lea    rdx,[rbp-0x21]
   2697b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2697f:	48 89 d6             	mov    rsi,rdx
   26982:	48 89 c7             	mov    rdi,rax
   26985:	e8 b6 dd fd ff       	call   4740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)@plt>
   2698a:	48 8d 45 df          	lea    rax,[rbp-0x21]
   2698e:	48 89 c7             	mov    rdi,rax
   26991:	e8 fa da fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   26996:	48 8d 45 de          	lea    rax,[rbp-0x22]
   2699a:	48 89 c7             	mov    rdi,rax
   2699d:	e8 ee da fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   269a2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   269a6:	48 89 c7             	mov    rdi,rax
   269a9:	e8 02 d9 fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   269ae:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   269b2:	48 01 c2             	add    rdx,rax
   269b5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   269b9:	48 89 d6             	mov    rsi,rdx
   269bc:	48 89 c7             	mov    rdi,rax
   269bf:	e8 fc dc fd ff       	call   46c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)@plt>
   269c4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   269c8:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   269cc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   269d0:	48 89 ce             	mov    rsi,rcx
   269d3:	48 89 c7             	mov    rdi,rax
   269d6:	e8 95 d6 fd ff       	call   4070 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)@plt>
   269db:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   269df:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   269e3:	48 89 d6             	mov    rsi,rdx
   269e6:	48 89 c7             	mov    rdi,rax
   269e9:	e8 02 de fd ff       	call   47f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   269ee:	eb 34                	jmp    26a24 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x107>
   269f0:	48 89 c3             	mov    rbx,rax
   269f3:	48 8d 45 de          	lea    rax,[rbp-0x22]
   269f7:	48 89 c7             	mov    rdi,rax
   269fa:	e8 91 da fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   269ff:	48 89 d8             	mov    rax,rbx
   26a02:	48 89 c7             	mov    rdi,rax
   26a05:	e8 56 dd fd ff       	call   4760 <_Unwind_Resume@plt>
   26a0a:	48 89 c3             	mov    rbx,rax
   26a0d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   26a11:	48 89 c7             	mov    rdi,rax
   26a14:	e8 47 d8 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   26a19:	48 89 d8             	mov    rax,rbx
   26a1c:	48 89 c7             	mov    rdi,rax
   26a1f:	e8 3c dd fd ff       	call   4760 <_Unwind_Resume@plt>
   26a24:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   26a28:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   26a31:	74 05                	je     26a38 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11b>
   26a33:	e8 a8 da fd ff       	call   44e0 <__stack_chk_fail@plt>
   26a38:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   26a3c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   26a40:	c9                   	leave  
   26a41:	c3                   	ret    

0000000000026a42 <std::vector<Tex, std::allocator<Tex> >::push_back(Tex const&)>:
   26a42:	55                   	push   rbp
   26a43:	48 89 e5             	mov    rbp,rsp
   26a46:	48 83 ec 10          	sub    rsp,0x10
   26a4a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26a4e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26a52:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a56:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26a5a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a5e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   26a62:	48 39 c2             	cmp    rdx,rax
   26a65:	74 31                	je     26a98 <std::vector<Tex, std::allocator<Tex> >::push_back(Tex const&)+0x56>
   26a67:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a6b:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   26a6f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a73:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   26a77:	48 89 ce             	mov    rsi,rcx
   26a7a:	48 89 c7             	mov    rdi,rax
   26a7d:	e8 33 19 00 00       	call   283b5 <void std::allocator_traits<std::allocator<Tex> >::construct<Tex, Tex const&>(std::allocator<Tex>&, Tex*, Tex const&)>
   26a82:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a86:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   26a8a:	48 8d 50 18          	lea    rdx,[rax+0x18]
   26a8e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a92:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   26a96:	eb 22                	jmp    26aba <std::vector<Tex, std::allocator<Tex> >::push_back(Tex const&)+0x78>
   26a98:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26a9c:	48 89 c7             	mov    rdi,rax
   26a9f:	e8 4a 19 00 00       	call   283ee <std::vector<Tex, std::allocator<Tex> >::end()>
   26aa4:	48 89 c1             	mov    rcx,rax
   26aa7:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   26aab:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26aaf:	48 89 ce             	mov    rsi,rcx
   26ab2:	48 89 c7             	mov    rdi,rax
   26ab5:	e8 80 19 00 00       	call   2843a <void std::vector<Tex, std::allocator<Tex> >::_M_realloc_insert<Tex const&>(__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >, Tex const&)>
   26aba:	90                   	nop
   26abb:	c9                   	leave  
   26abc:	c3                   	ret    
   26abd:	90                   	nop

0000000000026abe <std::vector<Tex, std::allocator<Tex> >::size() const>:
   26abe:	55                   	push   rbp
   26abf:	48 89 e5             	mov    rbp,rsp
   26ac2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26ac6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26aca:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   26ace:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26ad2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26ad5:	48 89 d0             	mov    rax,rdx
   26ad8:	48 29 c8             	sub    rax,rcx
   26adb:	48 c1 f8 03          	sar    rax,0x3
   26adf:	48 89 c2             	mov    rdx,rax
   26ae2:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   26aec:	48 0f af c2          	imul   rax,rdx
   26af0:	5d                   	pop    rbp
   26af1:	c3                   	ret    

0000000000026af2 <glm::vec<4, float, (glm::qualifier)0>::length()>:
   26af2:	55                   	push   rbp
   26af3:	48 89 e5             	mov    rbp,rsp
   26af6:	b8 04 00 00 00       	mov    eax,0x4
   26afb:	5d                   	pop    rbp
   26afc:	c3                   	ret    
   26afd:	90                   	nop

0000000000026afe <glm::vec<4, float, (glm::qualifier)0>::operator[](int)>:
   26afe:	55                   	push   rbp
   26aff:	48 89 e5             	mov    rbp,rsp
   26b02:	48 83 ec 10          	sub    rsp,0x10
   26b06:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26b0a:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   26b0d:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
   26b11:	78 0a                	js     26b1d <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x1f>
   26b13:	e8 da ff ff ff       	call   26af2 <glm::vec<4, float, (glm::qualifier)0>::length()>
   26b18:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
   26b1b:	7c 28                	jl     26b45 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x47>
   26b1d:	48 8d 05 ec 5d 01 00 	lea    rax,[rip+0x15dec]        # 3c910 <NANO_SEC+0x1648>
   26b24:	48 89 c1             	mov    rcx,rax
   26b27:	ba df 01 00 00       	mov    edx,0x1df
   26b2c:	48 8d 05 85 5e 01 00 	lea    rax,[rip+0x15e85]        # 3c9b8 <NANO_SEC+0x16f0>
   26b33:	48 89 c6             	mov    rsi,rax
   26b36:	48 8d 05 a1 5e 01 00 	lea    rax,[rip+0x15ea1]        # 3c9de <NANO_SEC+0x1716>
   26b3d:	48 89 c7             	mov    rdi,rax
   26b40:	e8 3b d7 fd ff       	call   4280 <__assert_fail@plt>
   26b45:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
   26b49:	74 2c                	je     26b77 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x79>
   26b4b:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
   26b4f:	7f 0c                	jg     26b5d <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x5f>
   26b51:	83 7d f4 01          	cmp    DWORD PTR [rbp-0xc],0x1
   26b55:	74 0c                	je     26b63 <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x65>
   26b57:	83 7d f4 02          	cmp    DWORD PTR [rbp-0xc],0x2
   26b5b:	74 10                	je     26b6d <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x6f>
   26b5d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26b61:	eb 1c                	jmp    26b7f <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x81>
   26b63:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26b67:	48 83 c0 04          	add    rax,0x4
   26b6b:	eb 12                	jmp    26b7f <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x81>
   26b6d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26b71:	48 83 c0 08          	add    rax,0x8
   26b75:	eb 08                	jmp    26b7f <glm::vec<4, float, (glm::qualifier)0>::operator[](int)+0x81>
   26b77:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26b7b:	48 83 c0 0c          	add    rax,0xc
   26b7f:	c9                   	leave  
   26b80:	c3                   	ret    
   26b81:	90                   	nop

0000000000026b82 <Mat4<float>::operator[](unsigned int)>:
   26b82:	55                   	push   rbp
   26b83:	48 89 e5             	mov    rbp,rsp
   26b86:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26b8a:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   26b8d:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   26b90:	48 c1 e0 04          	shl    rax,0x4
   26b94:	48 89 c2             	mov    rdx,rax
   26b97:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26b9b:	48 01 d0             	add    rax,rdx
   26b9e:	5d                   	pop    rbp
   26b9f:	c3                   	ret    

0000000000026ba0 <v4<float>::operator[](unsigned int)>:
   26ba0:	55                   	push   rbp
   26ba1:	48 89 e5             	mov    rbp,rsp
   26ba4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26ba8:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   26bab:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   26bae:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   26bb6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26bba:	48 01 d0             	add    rax,rdx
   26bbd:	5d                   	pop    rbp
   26bbe:	c3                   	ret    
   26bbf:	90                   	nop

0000000000026bc0 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>:
   26bc0:	55                   	push   rbp
   26bc1:	48 89 e5             	mov    rbp,rsp
   26bc4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26bc8:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   26bcd:	f3 0f 11 4d f0       	movss  DWORD PTR [rbp-0x10],xmm1
   26bd2:	f3 0f 11 55 ec       	movss  DWORD PTR [rbp-0x14],xmm2
   26bd7:	f3 0f 11 5d e8       	movss  DWORD PTR [rbp-0x18],xmm3
   26bdc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26be0:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   26be5:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   26be9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26bed:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   26bf2:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   26bf7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26bfb:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   26c00:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   26c05:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26c09:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   26c0e:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   26c13:	90                   	nop
   26c14:	5d                   	pop    rbp
   26c15:	c3                   	ret    

0000000000026c16 <float glm::dot<4, float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>:
   26c16:	55                   	push   rbp
   26c17:	48 89 e5             	mov    rbp,rsp
   26c1a:	48 83 ec 10          	sub    rsp,0x10
   26c1e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26c22:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   26c26:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   26c2a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26c2e:	48 89 d6             	mov    rsi,rdx
   26c31:	48 89 c7             	mov    rdi,rax
   26c34:	e8 52 1a 00 00       	call   2868b <glm::detail::compute_dot<glm::vec<4, float, (glm::qualifier)0>, float, false>::call(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   26c39:	c9                   	leave  
   26c3a:	c3                   	ret    
   26c3b:	90                   	nop

0000000000026c3c <std::chrono::time_point<std::filesystem::__file_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::time_point()>:
   26c3c:	55                   	push   rbp
   26c3d:	48 89 e5             	mov    rbp,rsp
   26c40:	53                   	push   rbx
   26c41:	48 83 ec 18          	sub    rsp,0x18
   26c45:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   26c49:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   26c4d:	e8 39 e7 ff ff       	call   2538b <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::zero()>
   26c52:	48 89 03             	mov    QWORD PTR [rbx],rax
   26c55:	90                   	nop
   26c56:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   26c5a:	c9                   	leave  
   26c5b:	c3                   	ret    

0000000000026c5c <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_impl::_Vector_impl()>:
   26c5c:	55                   	push   rbp
   26c5d:	48 89 e5             	mov    rbp,rsp
   26c60:	48 83 ec 10          	sub    rsp,0x10
   26c64:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26c68:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26c6c:	48 89 c7             	mov    rdi,rax
   26c6f:	e8 6e 1a 00 00       	call   286e2 <std::allocator<Mesh>::allocator()>
   26c74:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26c78:	48 89 c7             	mov    rdi,rax
   26c7b:	e8 7e 1a 00 00       	call   286fe <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_impl_data::_Vector_impl_data()>
   26c80:	90                   	nop
   26c81:	c9                   	leave  
   26c82:	c3                   	ret    
   26c83:	90                   	nop

0000000000026c84 <std::allocator<Mesh>::~allocator()>:
   26c84:	55                   	push   rbp
   26c85:	48 89 e5             	mov    rbp,rsp
   26c88:	48 83 ec 10          	sub    rsp,0x10
   26c8c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26c90:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26c94:	48 89 c7             	mov    rdi,rax
   26c97:	e8 90 1a 00 00       	call   2872c <__gnu_cxx::new_allocator<Mesh>::~new_allocator()>
   26c9c:	90                   	nop
   26c9d:	c9                   	leave  
   26c9e:	c3                   	ret    
   26c9f:	90                   	nop

0000000000026ca0 <std::_Vector_base<Mesh, std::allocator<Mesh> >::~_Vector_base()>:
   26ca0:	55                   	push   rbp
   26ca1:	48 89 e5             	mov    rbp,rsp
   26ca4:	48 83 ec 10          	sub    rsp,0x10
   26ca8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26cac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26cb0:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   26cb4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26cb8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26cbb:	48 89 d0             	mov    rax,rdx
   26cbe:	48 29 c8             	sub    rax,rcx
   26cc1:	48 c1 f8 02          	sar    rax,0x2
   26cc5:	48 89 c2             	mov    rdx,rax
   26cc8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26ccc:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26ccf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26cd3:	48 89 ce             	mov    rsi,rcx
   26cd6:	48 89 c7             	mov    rdi,rax
   26cd9:	e8 5a 1a 00 00       	call   28738 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_deallocate(Mesh*, unsigned long)>
   26cde:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26ce2:	48 89 c7             	mov    rdi,rax
   26ce5:	e8 ee e9 ff ff       	call   256d8 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_impl::~_Vector_impl()>
   26cea:	90                   	nop
   26ceb:	c9                   	leave  
   26cec:	c3                   	ret    
   26ced:	90                   	nop

0000000000026cee <std::vector<Mesh, std::allocator<Mesh> >::~vector()>:
   26cee:	55                   	push   rbp
   26cef:	48 89 e5             	mov    rbp,rsp
   26cf2:	48 83 ec 10          	sub    rsp,0x10
   26cf6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26cfa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26cfe:	48 89 c7             	mov    rdi,rax
   26d01:	e8 68 1a 00 00       	call   2876e <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_get_Tp_allocator()>
   26d06:	48 89 c2             	mov    rdx,rax
   26d09:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26d0d:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   26d11:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26d15:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26d18:	48 89 ce             	mov    rsi,rcx
   26d1b:	48 89 c7             	mov    rdi,rax
   26d1e:	e8 59 1a 00 00       	call   2877c <void std::_Destroy<Mesh*, Mesh>(Mesh*, Mesh*, std::allocator<Mesh>&)>
   26d23:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26d27:	48 89 c7             	mov    rdi,rax
   26d2a:	e8 71 ff ff ff       	call   26ca0 <std::_Vector_base<Mesh, std::allocator<Mesh> >::~_Vector_base()>
   26d2f:	90                   	nop
   26d30:	c9                   	leave  
   26d31:	c3                   	ret    

0000000000026d32 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl()>:
   26d32:	55                   	push   rbp
   26d33:	48 89 e5             	mov    rbp,rsp
   26d36:	48 83 ec 10          	sub    rsp,0x10
   26d3a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26d3e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26d42:	48 89 c7             	mov    rdi,rax
   26d45:	e8 5c 1a 00 00       	call   287a6 <std::allocator<unsigned int>::allocator()>
   26d4a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26d4e:	48 89 c7             	mov    rdi,rax
   26d51:	e8 6c 1a 00 00       	call   287c2 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_Vector_impl_data()>
   26d56:	90                   	nop
   26d57:	c9                   	leave  
   26d58:	c3                   	ret    
   26d59:	90                   	nop

0000000000026d5a <std::allocator<unsigned int>::~allocator()>:
   26d5a:	55                   	push   rbp
   26d5b:	48 89 e5             	mov    rbp,rsp
   26d5e:	48 83 ec 10          	sub    rsp,0x10
   26d62:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26d66:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26d6a:	48 89 c7             	mov    rdi,rax
   26d6d:	e8 7e 1a 00 00       	call   287f0 <__gnu_cxx::new_allocator<unsigned int>::~new_allocator()>
   26d72:	90                   	nop
   26d73:	c9                   	leave  
   26d74:	c3                   	ret    
   26d75:	90                   	nop

0000000000026d76 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::~_Vector_base()>:
   26d76:	55                   	push   rbp
   26d77:	48 89 e5             	mov    rbp,rsp
   26d7a:	48 83 ec 10          	sub    rsp,0x10
   26d7e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26d82:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26d86:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   26d8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26d8e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26d91:	48 89 d0             	mov    rax,rdx
   26d94:	48 29 c8             	sub    rax,rcx
   26d97:	48 c1 f8 02          	sar    rax,0x2
   26d9b:	48 89 c2             	mov    rdx,rax
   26d9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26da2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26da5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26da9:	48 89 ce             	mov    rsi,rcx
   26dac:	48 89 c7             	mov    rdi,rax
   26daf:	e8 48 1a 00 00       	call   287fc <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)>
   26db4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26db8:	48 89 c7             	mov    rdi,rax
   26dbb:	e8 6c e9 ff ff       	call   2572c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::~_Vector_impl()>
   26dc0:	90                   	nop
   26dc1:	c9                   	leave  
   26dc2:	c3                   	ret    
   26dc3:	90                   	nop

0000000000026dc4 <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>:
   26dc4:	55                   	push   rbp
   26dc5:	48 89 e5             	mov    rbp,rsp
   26dc8:	48 83 ec 10          	sub    rsp,0x10
   26dcc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26dd0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26dd4:	48 89 c7             	mov    rdi,rax
   26dd7:	e8 56 1a 00 00       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   26ddc:	48 89 c2             	mov    rdx,rax
   26ddf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26de3:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   26de7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26deb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26dee:	48 89 ce             	mov    rsi,rcx
   26df1:	48 89 c7             	mov    rdi,rax
   26df4:	e8 47 1a 00 00       	call   28840 <void std::_Destroy<unsigned int*, unsigned int>(unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   26df9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26dfd:	48 89 c7             	mov    rdi,rax
   26e00:	e8 71 ff ff ff       	call   26d76 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::~_Vector_base()>
   26e05:	90                   	nop
   26e06:	c9                   	leave  
   26e07:	c3                   	ret    

0000000000026e08 <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_impl::_Vector_impl()>:
   26e08:	55                   	push   rbp
   26e09:	48 89 e5             	mov    rbp,rsp
   26e0c:	48 83 ec 10          	sub    rsp,0x10
   26e10:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26e14:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26e18:	48 89 c7             	mov    rdi,rax
   26e1b:	e8 4a 1a 00 00       	call   2886a <std::allocator<Transform>::allocator()>
   26e20:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26e24:	48 89 c7             	mov    rdi,rax
   26e27:	e8 5a 1a 00 00       	call   28886 <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_impl_data::_Vector_impl_data()>
   26e2c:	90                   	nop
   26e2d:	c9                   	leave  
   26e2e:	c3                   	ret    
   26e2f:	90                   	nop

0000000000026e30 <std::allocator<Transform>::~allocator()>:
   26e30:	55                   	push   rbp
   26e31:	48 89 e5             	mov    rbp,rsp
   26e34:	48 83 ec 10          	sub    rsp,0x10
   26e38:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26e3c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26e40:	48 89 c7             	mov    rdi,rax
   26e43:	e8 6c 1a 00 00       	call   288b4 <__gnu_cxx::new_allocator<Transform>::~new_allocator()>
   26e48:	90                   	nop
   26e49:	c9                   	leave  
   26e4a:	c3                   	ret    
   26e4b:	90                   	nop

0000000000026e4c <std::_Vector_base<Transform, std::allocator<Transform> >::~_Vector_base()>:
   26e4c:	55                   	push   rbp
   26e4d:	48 89 e5             	mov    rbp,rsp
   26e50:	48 83 ec 10          	sub    rsp,0x10
   26e54:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26e58:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26e5c:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   26e60:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26e64:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26e67:	48 89 d0             	mov    rax,rdx
   26e6a:	48 29 c8             	sub    rax,rcx
   26e6d:	48 c1 f8 02          	sar    rax,0x2
   26e71:	48 89 c2             	mov    rdx,rax
   26e74:	48 b8 39 8e e3 38 8e e3 38 8e 	movabs rax,0x8e38e38e38e38e39
   26e7e:	48 0f af c2          	imul   rax,rdx
   26e82:	48 89 c2             	mov    rdx,rax
   26e85:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26e89:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26e8c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26e90:	48 89 ce             	mov    rsi,rcx
   26e93:	48 89 c7             	mov    rdi,rax
   26e96:	e8 25 1a 00 00       	call   288c0 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_deallocate(Transform*, unsigned long)>
   26e9b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26e9f:	48 89 c7             	mov    rdi,rax
   26ea2:	e8 d9 e8 ff ff       	call   25780 <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_impl::~_Vector_impl()>
   26ea7:	90                   	nop
   26ea8:	c9                   	leave  
   26ea9:	c3                   	ret    

0000000000026eaa <std::vector<Transform, std::allocator<Transform> >::~vector()>:
   26eaa:	55                   	push   rbp
   26eab:	48 89 e5             	mov    rbp,rsp
   26eae:	48 83 ec 10          	sub    rsp,0x10
   26eb2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26eb6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26eba:	48 89 c7             	mov    rdi,rax
   26ebd:	e8 34 1a 00 00       	call   288f6 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_get_Tp_allocator()>
   26ec2:	48 89 c2             	mov    rdx,rax
   26ec5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26ec9:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   26ecd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26ed1:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26ed4:	48 89 ce             	mov    rsi,rcx
   26ed7:	48 89 c7             	mov    rdi,rax
   26eda:	e8 25 1a 00 00       	call   28904 <void std::_Destroy<Transform*, Transform>(Transform*, Transform*, std::allocator<Transform>&)>
   26edf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26ee3:	48 89 c7             	mov    rdi,rax
   26ee6:	e8 61 ff ff ff       	call   26e4c <std::_Vector_base<Transform, std::allocator<Transform> >::~_Vector_base()>
   26eeb:	90                   	nop
   26eec:	c9                   	leave  
   26eed:	c3                   	ret    

0000000000026eee <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_impl::_Vector_impl()>:
   26eee:	55                   	push   rbp
   26eef:	48 89 e5             	mov    rbp,rsp
   26ef2:	48 83 ec 10          	sub    rsp,0x10
   26ef6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26efa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26efe:	48 89 c7             	mov    rdi,rax
   26f01:	e8 28 1a 00 00       	call   2892e <std::allocator<AABB>::allocator()>
   26f06:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26f0a:	48 89 c7             	mov    rdi,rax
   26f0d:	e8 38 1a 00 00       	call   2894a <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_impl_data::_Vector_impl_data()>
   26f12:	90                   	nop
   26f13:	c9                   	leave  
   26f14:	c3                   	ret    
   26f15:	90                   	nop

0000000000026f16 <std::allocator<AABB>::~allocator()>:
   26f16:	55                   	push   rbp
   26f17:	48 89 e5             	mov    rbp,rsp
   26f1a:	48 83 ec 10          	sub    rsp,0x10
   26f1e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26f22:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26f26:	48 89 c7             	mov    rdi,rax
   26f29:	e8 4a 1a 00 00       	call   28978 <__gnu_cxx::new_allocator<AABB>::~new_allocator()>
   26f2e:	90                   	nop
   26f2f:	c9                   	leave  
   26f30:	c3                   	ret    
   26f31:	90                   	nop

0000000000026f32 <std::_Vector_base<AABB, std::allocator<AABB> >::~_Vector_base()>:
   26f32:	55                   	push   rbp
   26f33:	48 89 e5             	mov    rbp,rsp
   26f36:	48 83 ec 10          	sub    rsp,0x10
   26f3a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26f3e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26f42:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   26f46:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26f4a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26f4d:	48 89 d0             	mov    rax,rdx
   26f50:	48 29 c8             	sub    rax,rcx
   26f53:	48 c1 f8 03          	sar    rax,0x3
   26f57:	48 89 c2             	mov    rdx,rax
   26f5a:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   26f64:	48 0f af c2          	imul   rax,rdx
   26f68:	48 89 c2             	mov    rdx,rax
   26f6b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26f6f:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   26f72:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26f76:	48 89 ce             	mov    rsi,rcx
   26f79:	48 89 c7             	mov    rdi,rax
   26f7c:	e8 03 1a 00 00       	call   28984 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_deallocate(AABB*, unsigned long)>
   26f81:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26f85:	48 89 c7             	mov    rdi,rax
   26f88:	e8 47 e8 ff ff       	call   257d4 <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_impl::~_Vector_impl()>
   26f8d:	90                   	nop
   26f8e:	c9                   	leave  
   26f8f:	c3                   	ret    

0000000000026f90 <std::vector<AABB, std::allocator<AABB> >::~vector()>:
   26f90:	55                   	push   rbp
   26f91:	48 89 e5             	mov    rbp,rsp
   26f94:	48 83 ec 10          	sub    rsp,0x10
   26f98:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26f9c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26fa0:	48 89 c7             	mov    rdi,rax
   26fa3:	e8 12 1a 00 00       	call   289ba <std::_Vector_base<AABB, std::allocator<AABB> >::_M_get_Tp_allocator()>
   26fa8:	48 89 c2             	mov    rdx,rax
   26fab:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26faf:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   26fb3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26fb7:	48 8b 00             	mov    rax,QWORD PTR [rax]
   26fba:	48 89 ce             	mov    rsi,rcx
   26fbd:	48 89 c7             	mov    rdi,rax
   26fc0:	e8 03 1a 00 00       	call   289c8 <void std::_Destroy<AABB*, AABB>(AABB*, AABB*, std::allocator<AABB>&)>
   26fc5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26fc9:	48 89 c7             	mov    rdi,rax
   26fcc:	e8 61 ff ff ff       	call   26f32 <std::_Vector_base<AABB, std::allocator<AABB> >::~_Vector_base()>
   26fd1:	90                   	nop
   26fd2:	c9                   	leave  
   26fd3:	c3                   	ret    

0000000000026fd4 <glm::vec<4, float, (glm::qualifier)0>::vec<float, int, int, int>(float, int, int, int)>:
   26fd4:	55                   	push   rbp
   26fd5:	48 89 e5             	mov    rbp,rsp
   26fd8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   26fdc:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   26fe1:	89 75 f0             	mov    DWORD PTR [rbp-0x10],esi
   26fe4:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   26fe7:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
   26fea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   26fee:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   26ff3:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   26ff7:	66 0f ef c0          	pxor   xmm0,xmm0
   26ffb:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   27000:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27004:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   27009:	66 0f ef c0          	pxor   xmm0,xmm0
   2700d:	f3 0f 2a 45 ec       	cvtsi2ss xmm0,DWORD PTR [rbp-0x14]
   27012:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27016:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   2701b:	66 0f ef c0          	pxor   xmm0,xmm0
   2701f:	f3 0f 2a 45 e8       	cvtsi2ss xmm0,DWORD PTR [rbp-0x18]
   27024:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27028:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   2702d:	90                   	nop
   2702e:	5d                   	pop    rbp
   2702f:	c3                   	ret    

0000000000027030 <glm::vec<4, float, (glm::qualifier)0>::vec<int, float, int, int>(int, float, int, int)>:
   27030:	55                   	push   rbp
   27031:	48 89 e5             	mov    rbp,rsp
   27034:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27038:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   2703b:	f3 0f 11 45 f0       	movss  DWORD PTR [rbp-0x10],xmm0
   27040:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   27043:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
   27046:	66 0f ef c0          	pxor   xmm0,xmm0
   2704a:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   2704f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27053:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   27057:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2705b:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   27060:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   27065:	66 0f ef c0          	pxor   xmm0,xmm0
   27069:	f3 0f 2a 45 ec       	cvtsi2ss xmm0,DWORD PTR [rbp-0x14]
   2706e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27072:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   27077:	66 0f ef c0          	pxor   xmm0,xmm0
   2707b:	f3 0f 2a 45 e8       	cvtsi2ss xmm0,DWORD PTR [rbp-0x18]
   27080:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27084:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   27089:	90                   	nop
   2708a:	5d                   	pop    rbp
   2708b:	c3                   	ret    

000000000002708c <glm::vec<4, float, (glm::qualifier)0>::vec<int, int, float, int>(int, int, float, int)>:
   2708c:	55                   	push   rbp
   2708d:	48 89 e5             	mov    rbp,rsp
   27090:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27094:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   27097:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
   2709a:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   2709f:	89 4d e8             	mov    DWORD PTR [rbp-0x18],ecx
   270a2:	66 0f ef c0          	pxor   xmm0,xmm0
   270a6:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   270ab:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   270af:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   270b3:	66 0f ef c0          	pxor   xmm0,xmm0
   270b7:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   270bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   270c0:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   270c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   270c9:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   270ce:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   270d3:	66 0f ef c0          	pxor   xmm0,xmm0
   270d7:	f3 0f 2a 45 e8       	cvtsi2ss xmm0,DWORD PTR [rbp-0x18]
   270dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   270e0:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   270e5:	90                   	nop
   270e6:	5d                   	pop    rbp
   270e7:	c3                   	ret    

00000000000270e8 <glm::vec<4, float, (glm::qualifier)0>::vec<int, int, int, float>(int, int, int, float)>:
   270e8:	55                   	push   rbp
   270e9:	48 89 e5             	mov    rbp,rsp
   270ec:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   270f0:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
   270f3:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
   270f6:	89 4d ec             	mov    DWORD PTR [rbp-0x14],ecx
   270f9:	f3 0f 11 45 e8       	movss  DWORD PTR [rbp-0x18],xmm0
   270fe:	66 0f ef c0          	pxor   xmm0,xmm0
   27102:	f3 0f 2a 45 f4       	cvtsi2ss xmm0,DWORD PTR [rbp-0xc]
   27107:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2710b:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   2710f:	66 0f ef c0          	pxor   xmm0,xmm0
   27113:	f3 0f 2a 45 f0       	cvtsi2ss xmm0,DWORD PTR [rbp-0x10]
   27118:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2711c:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   27121:	66 0f ef c0          	pxor   xmm0,xmm0
   27125:	f3 0f 2a 45 ec       	cvtsi2ss xmm0,DWORD PTR [rbp-0x14]
   2712a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2712e:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   27133:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27137:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   2713c:	f3 0f 11 40 0c       	movss  DWORD PTR [rax+0xc],xmm0
   27141:	90                   	nop
   27142:	5d                   	pop    rbp
   27143:	c3                   	ret    

0000000000027144 <glm::mat<4, 4, float, (glm::qualifier)0>::mat(float const&)>:
   27144:	55                   	push   rbp
   27145:	48 89 e5             	mov    rbp,rsp
   27148:	48 83 ec 10          	sub    rsp,0x10
   2714c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27150:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27154:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27158:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2715c:	8b 3a                	mov    edi,DWORD PTR [rdx]
   2715e:	b9 00 00 00 00       	mov    ecx,0x0
   27163:	ba 00 00 00 00       	mov    edx,0x0
   27168:	be 00 00 00 00       	mov    esi,0x0
   2716d:	66 0f 6e c7          	movd   xmm0,edi
   27171:	48 89 c7             	mov    rdi,rax
   27174:	e8 5b fe ff ff       	call   26fd4 <glm::vec<4, float, (glm::qualifier)0>::vec<float, int, int, int>(float, int, int, int)>
   27179:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2717d:	48 8d 78 10          	lea    rdi,[rax+0x10]
   27181:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   27185:	8b 00                	mov    eax,DWORD PTR [rax]
   27187:	b9 00 00 00 00       	mov    ecx,0x0
   2718c:	ba 00 00 00 00       	mov    edx,0x0
   27191:	66 0f 6e c0          	movd   xmm0,eax
   27195:	be 00 00 00 00       	mov    esi,0x0
   2719a:	e8 91 fe ff ff       	call   27030 <glm::vec<4, float, (glm::qualifier)0>::vec<int, float, int, int>(int, float, int, int)>
   2719f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   271a3:	48 8d 78 20          	lea    rdi,[rax+0x20]
   271a7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   271ab:	8b 00                	mov    eax,DWORD PTR [rax]
   271ad:	b9 00 00 00 00       	mov    ecx,0x0
   271b2:	66 0f 6e c0          	movd   xmm0,eax
   271b6:	ba 00 00 00 00       	mov    edx,0x0
   271bb:	be 00 00 00 00       	mov    esi,0x0
   271c0:	e8 c7 fe ff ff       	call   2708c <glm::vec<4, float, (glm::qualifier)0>::vec<int, int, float, int>(int, int, float, int)>
   271c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   271c9:	48 8d 78 30          	lea    rdi,[rax+0x30]
   271cd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   271d1:	8b 00                	mov    eax,DWORD PTR [rax]
   271d3:	66 0f 6e c0          	movd   xmm0,eax
   271d7:	b9 00 00 00 00       	mov    ecx,0x0
   271dc:	ba 00 00 00 00       	mov    edx,0x0
   271e1:	be 00 00 00 00       	mov    esi,0x0
   271e6:	e8 fd fe ff ff       	call   270e8 <glm::vec<4, float, (glm::qualifier)0>::vec<int, int, int, float>(int, int, int, float)>
   271eb:	90                   	nop
   271ec:	c9                   	leave  
   271ed:	c3                   	ret    

00000000000271ee <std::vector<AABB, std::allocator<AABB> >::size() const>:
   271ee:	55                   	push   rbp
   271ef:	48 89 e5             	mov    rbp,rsp
   271f2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   271f6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   271fa:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   271fe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27202:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   27205:	48 89 d0             	mov    rax,rdx
   27208:	48 29 c8             	sub    rax,rcx
   2720b:	48 c1 f8 03          	sar    rax,0x3
   2720f:	48 89 c2             	mov    rdx,rax
   27212:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   2721c:	48 0f af c2          	imul   rax,rdx
   27220:	5d                   	pop    rbp
   27221:	c3                   	ret    

0000000000027222 <std::vector<Mesh, std::allocator<Mesh> >::size() const>:
   27222:	55                   	push   rbp
   27223:	48 89 e5             	mov    rbp,rsp
   27226:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2722a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2722e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   27232:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27236:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   27239:	48 89 d0             	mov    rax,rdx
   2723c:	48 29 c8             	sub    rax,rcx
   2723f:	48 c1 f8 02          	sar    rax,0x2
   27243:	5d                   	pop    rbp
   27244:	c3                   	ret    
   27245:	90                   	nop

0000000000027246 <std::vector<Transform, std::allocator<Transform> >::size() const>:
   27246:	55                   	push   rbp
   27247:	48 89 e5             	mov    rbp,rsp
   2724a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2724e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27252:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   27256:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2725a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2725d:	48 89 d0             	mov    rax,rdx
   27260:	48 29 c8             	sub    rax,rcx
   27263:	48 c1 f8 02          	sar    rax,0x2
   27267:	48 89 c2             	mov    rdx,rax
   2726a:	48 b8 39 8e e3 38 8e e3 38 8e 	movabs rax,0x8e38e38e38e38e39
   27274:	48 0f af c2          	imul   rax,rdx
   27278:	5d                   	pop    rbp
   27279:	c3                   	ret    

000000000002727a <Mat4<float>::operator*(Mat4<float>)>:
   2727a:	55                   	push   rbp
   2727b:	48 89 e5             	mov    rbp,rsp
   2727e:	41 57                	push   r15
   27280:	41 56                	push   r14
   27282:	41 55                	push   r13
   27284:	41 54                	push   r12
   27286:	53                   	push   rbx
   27287:	48 83 ec 68          	sub    rsp,0x68
   2728b:	48 89 7d 88          	mov    QWORD PTR [rbp-0x78],rdi
   2728f:	48 89 75 80          	mov    QWORD PTR [rbp-0x80],rsi
   27293:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2729c:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   272a0:	31 c0                	xor    eax,eax
   272a2:	8b 45 1c             	mov    eax,DWORD PTR [rbp+0x1c]
   272a5:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   272a9:	48 83 c2 30          	add    rdx,0x30
   272ad:	66 0f 6e c0          	movd   xmm0,eax
   272b1:	48 89 d7             	mov    rdi,rdx
   272b4:	e8 39 17 00 00       	call   289f2 <v4<float>::operator*(float)>
   272b9:	66 48 0f 7e c0       	movq   rax,xmm0
   272be:	66 0f 6f c1          	movdqa xmm0,xmm1
   272c2:	49 89 c4             	mov    r12,rax
   272c5:	49 89 d5             	mov    r13,rdx
   272c8:	66 49 0f 7e c5       	movq   r13,xmm0
   272cd:	8b 45 18             	mov    eax,DWORD PTR [rbp+0x18]
   272d0:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   272d4:	48 83 c2 20          	add    rdx,0x20
   272d8:	66 0f 6e c0          	movd   xmm0,eax
   272dc:	48 89 d7             	mov    rdi,rdx
   272df:	e8 0e 17 00 00       	call   289f2 <v4<float>::operator*(float)>
   272e4:	66 48 0f 7e c0       	movq   rax,xmm0
   272e9:	66 0f 6f c1          	movdqa xmm0,xmm1
   272ed:	49 89 c6             	mov    r14,rax
   272f0:	49 89 d7             	mov    r15,rdx
   272f3:	66 49 0f 7e c7       	movq   r15,xmm0
   272f8:	8b 45 14             	mov    eax,DWORD PTR [rbp+0x14]
   272fb:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   272ff:	48 83 c2 10          	add    rdx,0x10
   27303:	66 0f 6e c0          	movd   xmm0,eax
   27307:	48 89 d7             	mov    rdi,rdx
   2730a:	e8 e3 16 00 00       	call   289f2 <v4<float>::operator*(float)>
   2730f:	66 48 0f 7e c0       	movq   rax,xmm0
   27314:	66 0f 6f c1          	movdqa xmm0,xmm1
   27318:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
   2731f:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
   27326:	66 0f d6 85 78 ff ff ff 	movq   QWORD PTR [rbp-0x88],xmm0
   2732e:	8b 55 10             	mov    edx,DWORD PTR [rbp+0x10]
   27331:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   27335:	66 0f 6e c2          	movd   xmm0,edx
   27339:	48 89 c7             	mov    rdi,rax
   2733c:	e8 b1 16 00 00       	call   289f2 <v4<float>::operator*(float)>
   27341:	66 48 0f 7e c0       	movq   rax,xmm0
   27346:	66 0f 6f c1          	movdqa xmm0,xmm1
   2734a:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   2734e:	66 0f d6 45 98       	movq   QWORD PTR [rbp-0x68],xmm0
   27353:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
   2735a:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   27361:	48 89 c1             	mov    rcx,rax
   27364:	48 89 d3             	mov    rbx,rdx
   27367:	48 8d 45 90          	lea    rax,[rbp-0x70]
   2736b:	66 48 0f 6e c1       	movq   xmm0,rcx
   27370:	66 48 0f 6e ca       	movq   xmm1,rdx
   27375:	48 89 c7             	mov    rdi,rax
   27378:	e8 2d 17 00 00       	call   28aaa <v4<float>::operator+(v4<float>)>
   2737d:	66 48 0f 7e c0       	movq   rax,xmm0
   27382:	66 0f 6f c1          	movdqa xmm0,xmm1
   27386:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   2738a:	66 0f d6 45 a8       	movq   QWORD PTR [rbp-0x58],xmm0
   2738f:	4c 89 f1             	mov    rcx,r14
   27392:	4c 89 fb             	mov    rbx,r15
   27395:	4c 89 f0             	mov    rax,r14
   27398:	4c 89 fa             	mov    rdx,r15
   2739b:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2739f:	66 48 0f 6e c1       	movq   xmm0,rcx
   273a4:	66 48 0f 6e ca       	movq   xmm1,rdx
   273a9:	48 89 c7             	mov    rdi,rax
   273ac:	e8 f9 16 00 00       	call   28aaa <v4<float>::operator+(v4<float>)>
   273b1:	66 48 0f 7e c0       	movq   rax,xmm0
   273b6:	66 0f 6f c1          	movdqa xmm0,xmm1
   273ba:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   273be:	66 0f d6 45 b8       	movq   QWORD PTR [rbp-0x48],xmm0
   273c3:	48 8b 5d 88          	mov    rbx,QWORD PTR [rbp-0x78]
   273c7:	4c 89 e6             	mov    rsi,r12
   273ca:	4c 89 ef             	mov    rdi,r13
   273cd:	4c 89 e0             	mov    rax,r12
   273d0:	4c 89 ea             	mov    rdx,r13
   273d3:	48 89 f1             	mov    rcx,rsi
   273d6:	48 8d 45 b0          	lea    rax,[rbp-0x50]
   273da:	66 48 0f 6e c1       	movq   xmm0,rcx
   273df:	66 48 0f 6e ca       	movq   xmm1,rdx
   273e4:	48 89 c7             	mov    rdi,rax
   273e7:	e8 be 16 00 00       	call   28aaa <v4<float>::operator+(v4<float>)>
   273ec:	66 48 0f 7e c0       	movq   rax,xmm0
   273f1:	66 0f 6f c1          	movdqa xmm0,xmm1
   273f5:	48 89 03             	mov    QWORD PTR [rbx],rax
   273f8:	66 0f d6 43 08       	movq   QWORD PTR [rbx+0x8],xmm0
   273fd:	8b 45 2c             	mov    eax,DWORD PTR [rbp+0x2c]
   27400:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   27404:	48 83 c2 30          	add    rdx,0x30
   27408:	66 0f 6e c0          	movd   xmm0,eax
   2740c:	48 89 d7             	mov    rdi,rdx
   2740f:	e8 de 15 00 00       	call   289f2 <v4<float>::operator*(float)>
   27414:	66 48 0f 7e c0       	movq   rax,xmm0
   27419:	66 0f 6f c1          	movdqa xmm0,xmm1
   2741d:	49 89 c4             	mov    r12,rax
   27420:	49 89 d5             	mov    r13,rdx
   27423:	66 49 0f 7e c5       	movq   r13,xmm0
   27428:	8b 45 28             	mov    eax,DWORD PTR [rbp+0x28]
   2742b:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   2742f:	48 83 c2 20          	add    rdx,0x20
   27433:	66 0f 6e c0          	movd   xmm0,eax
   27437:	48 89 d7             	mov    rdi,rdx
   2743a:	e8 b3 15 00 00       	call   289f2 <v4<float>::operator*(float)>
   2743f:	66 48 0f 7e c0       	movq   rax,xmm0
   27444:	66 0f 6f c1          	movdqa xmm0,xmm1
   27448:	49 89 c6             	mov    r14,rax
   2744b:	49 89 d7             	mov    r15,rdx
   2744e:	66 49 0f 7e c7       	movq   r15,xmm0
   27453:	8b 45 24             	mov    eax,DWORD PTR [rbp+0x24]
   27456:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   2745a:	48 83 c2 10          	add    rdx,0x10
   2745e:	66 0f 6e c0          	movd   xmm0,eax
   27462:	48 89 d7             	mov    rdi,rdx
   27465:	e8 88 15 00 00       	call   289f2 <v4<float>::operator*(float)>
   2746a:	66 48 0f 7e c0       	movq   rax,xmm0
   2746f:	66 0f 6f c1          	movdqa xmm0,xmm1
   27473:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
   2747a:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
   27481:	66 0f d6 85 78 ff ff ff 	movq   QWORD PTR [rbp-0x88],xmm0
   27489:	8b 55 20             	mov    edx,DWORD PTR [rbp+0x20]
   2748c:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   27490:	66 0f 6e c2          	movd   xmm0,edx
   27494:	48 89 c7             	mov    rdi,rax
   27497:	e8 56 15 00 00       	call   289f2 <v4<float>::operator*(float)>
   2749c:	66 48 0f 7e c0       	movq   rax,xmm0
   274a1:	66 0f 6f c1          	movdqa xmm0,xmm1
   274a5:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   274a9:	66 0f d6 45 98       	movq   QWORD PTR [rbp-0x68],xmm0
   274ae:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
   274b5:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   274bc:	48 89 c1             	mov    rcx,rax
   274bf:	48 89 d3             	mov    rbx,rdx
   274c2:	48 8d 45 90          	lea    rax,[rbp-0x70]
   274c6:	66 48 0f 6e c1       	movq   xmm0,rcx
   274cb:	66 48 0f 6e ca       	movq   xmm1,rdx
   274d0:	48 89 c7             	mov    rdi,rax
   274d3:	e8 d2 15 00 00       	call   28aaa <v4<float>::operator+(v4<float>)>
   274d8:	66 48 0f 7e c0       	movq   rax,xmm0
   274dd:	66 0f 6f c1          	movdqa xmm0,xmm1
   274e1:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   274e5:	66 0f d6 45 a8       	movq   QWORD PTR [rbp-0x58],xmm0
   274ea:	4c 89 f1             	mov    rcx,r14
   274ed:	4c 89 fb             	mov    rbx,r15
   274f0:	4c 89 f0             	mov    rax,r14
   274f3:	4c 89 fa             	mov    rdx,r15
   274f6:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   274fa:	66 48 0f 6e c1       	movq   xmm0,rcx
   274ff:	66 48 0f 6e ca       	movq   xmm1,rdx
   27504:	48 89 c7             	mov    rdi,rax
   27507:	e8 9e 15 00 00       	call   28aaa <v4<float>::operator+(v4<float>)>
   2750c:	66 48 0f 7e c0       	movq   rax,xmm0
   27511:	66 0f 6f c1          	movdqa xmm0,xmm1
   27515:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   27519:	66 0f d6 45 b8       	movq   QWORD PTR [rbp-0x48],xmm0
   2751e:	48 8b 5d 88          	mov    rbx,QWORD PTR [rbp-0x78]
   27522:	4c 89 e6             	mov    rsi,r12
   27525:	4c 89 ef             	mov    rdi,r13
   27528:	4c 89 e0             	mov    rax,r12
   2752b:	4c 89 ea             	mov    rdx,r13
   2752e:	48 89 f1             	mov    rcx,rsi
   27531:	48 8d 45 b0          	lea    rax,[rbp-0x50]
   27535:	66 48 0f 6e c1       	movq   xmm0,rcx
   2753a:	66 48 0f 6e ca       	movq   xmm1,rdx
   2753f:	48 89 c7             	mov    rdi,rax
   27542:	e8 63 15 00 00       	call   28aaa <v4<float>::operator+(v4<float>)>
   27547:	66 48 0f 7e c0       	movq   rax,xmm0
   2754c:	66 0f 6f c1          	movdqa xmm0,xmm1
   27550:	48 89 43 10          	mov    QWORD PTR [rbx+0x10],rax
   27554:	66 0f d6 43 18       	movq   QWORD PTR [rbx+0x18],xmm0
   27559:	8b 45 3c             	mov    eax,DWORD PTR [rbp+0x3c]
   2755c:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   27560:	48 83 c2 30          	add    rdx,0x30
   27564:	66 0f 6e c0          	movd   xmm0,eax
   27568:	48 89 d7             	mov    rdi,rdx
   2756b:	e8 82 14 00 00       	call   289f2 <v4<float>::operator*(float)>
   27570:	66 48 0f 7e c0       	movq   rax,xmm0
   27575:	66 0f 6f c1          	movdqa xmm0,xmm1
   27579:	49 89 c4             	mov    r12,rax
   2757c:	49 89 d5             	mov    r13,rdx
   2757f:	66 49 0f 7e c5       	movq   r13,xmm0
   27584:	8b 45 38             	mov    eax,DWORD PTR [rbp+0x38]
   27587:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   2758b:	48 83 c2 20          	add    rdx,0x20
   2758f:	66 0f 6e c0          	movd   xmm0,eax
   27593:	48 89 d7             	mov    rdi,rdx
   27596:	e8 57 14 00 00       	call   289f2 <v4<float>::operator*(float)>
   2759b:	66 48 0f 7e c0       	movq   rax,xmm0
   275a0:	66 0f 6f c1          	movdqa xmm0,xmm1
   275a4:	49 89 c6             	mov    r14,rax
   275a7:	49 89 d7             	mov    r15,rdx
   275aa:	66 49 0f 7e c7       	movq   r15,xmm0
   275af:	8b 45 34             	mov    eax,DWORD PTR [rbp+0x34]
   275b2:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   275b6:	48 83 c2 10          	add    rdx,0x10
   275ba:	66 0f 6e c0          	movd   xmm0,eax
   275be:	48 89 d7             	mov    rdi,rdx
   275c1:	e8 2c 14 00 00       	call   289f2 <v4<float>::operator*(float)>
   275c6:	66 48 0f 7e c0       	movq   rax,xmm0
   275cb:	66 0f 6f c1          	movdqa xmm0,xmm1
   275cf:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
   275d6:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
   275dd:	66 0f d6 85 78 ff ff ff 	movq   QWORD PTR [rbp-0x88],xmm0
   275e5:	8b 55 30             	mov    edx,DWORD PTR [rbp+0x30]
   275e8:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   275ec:	66 0f 6e c2          	movd   xmm0,edx
   275f0:	48 89 c7             	mov    rdi,rax
   275f3:	e8 fa 13 00 00       	call   289f2 <v4<float>::operator*(float)>
   275f8:	66 48 0f 7e c0       	movq   rax,xmm0
   275fd:	66 0f 6f c1          	movdqa xmm0,xmm1
   27601:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   27605:	66 0f d6 45 98       	movq   QWORD PTR [rbp-0x68],xmm0
   2760a:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
   27611:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   27618:	48 89 c1             	mov    rcx,rax
   2761b:	48 89 d3             	mov    rbx,rdx
   2761e:	48 8d 45 90          	lea    rax,[rbp-0x70]
   27622:	66 48 0f 6e c1       	movq   xmm0,rcx
   27627:	66 48 0f 6e ca       	movq   xmm1,rdx
   2762c:	48 89 c7             	mov    rdi,rax
   2762f:	e8 76 14 00 00       	call   28aaa <v4<float>::operator+(v4<float>)>
   27634:	66 48 0f 7e c0       	movq   rax,xmm0
   27639:	66 0f 6f c1          	movdqa xmm0,xmm1
   2763d:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   27641:	66 0f d6 45 a8       	movq   QWORD PTR [rbp-0x58],xmm0
   27646:	4c 89 f1             	mov    rcx,r14
   27649:	4c 89 fb             	mov    rbx,r15
   2764c:	4c 89 f0             	mov    rax,r14
   2764f:	4c 89 fa             	mov    rdx,r15
   27652:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   27656:	66 48 0f 6e c1       	movq   xmm0,rcx
   2765b:	66 48 0f 6e ca       	movq   xmm1,rdx
   27660:	48 89 c7             	mov    rdi,rax
   27663:	e8 42 14 00 00       	call   28aaa <v4<float>::operator+(v4<float>)>
   27668:	66 48 0f 7e c0       	movq   rax,xmm0
   2766d:	66 0f 6f c1          	movdqa xmm0,xmm1
   27671:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   27675:	66 0f d6 45 b8       	movq   QWORD PTR [rbp-0x48],xmm0
   2767a:	48 8b 5d 88          	mov    rbx,QWORD PTR [rbp-0x78]
   2767e:	4c 89 e6             	mov    rsi,r12
   27681:	4c 89 ef             	mov    rdi,r13
   27684:	4c 89 e0             	mov    rax,r12
   27687:	4c 89 ea             	mov    rdx,r13
   2768a:	48 89 f1             	mov    rcx,rsi
   2768d:	48 8d 45 b0          	lea    rax,[rbp-0x50]
   27691:	66 48 0f 6e c1       	movq   xmm0,rcx
   27696:	66 48 0f 6e ca       	movq   xmm1,rdx
   2769b:	48 89 c7             	mov    rdi,rax
   2769e:	e8 07 14 00 00       	call   28aaa <v4<float>::operator+(v4<float>)>
   276a3:	66 48 0f 7e c0       	movq   rax,xmm0
   276a8:	66 0f 6f c1          	movdqa xmm0,xmm1
   276ac:	48 89 43 20          	mov    QWORD PTR [rbx+0x20],rax
   276b0:	66 0f d6 43 28       	movq   QWORD PTR [rbx+0x28],xmm0
   276b5:	8b 45 4c             	mov    eax,DWORD PTR [rbp+0x4c]
   276b8:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   276bc:	48 83 c2 30          	add    rdx,0x30
   276c0:	66 0f 6e c0          	movd   xmm0,eax
   276c4:	48 89 d7             	mov    rdi,rdx
   276c7:	e8 26 13 00 00       	call   289f2 <v4<float>::operator*(float)>
   276cc:	66 48 0f 7e c0       	movq   rax,xmm0
   276d1:	66 0f 6f c1          	movdqa xmm0,xmm1
   276d5:	49 89 c4             	mov    r12,rax
   276d8:	49 89 d5             	mov    r13,rdx
   276db:	66 49 0f 7e c5       	movq   r13,xmm0
   276e0:	8b 45 48             	mov    eax,DWORD PTR [rbp+0x48]
   276e3:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   276e7:	48 83 c2 20          	add    rdx,0x20
   276eb:	66 0f 6e c0          	movd   xmm0,eax
   276ef:	48 89 d7             	mov    rdi,rdx
   276f2:	e8 fb 12 00 00       	call   289f2 <v4<float>::operator*(float)>
   276f7:	66 48 0f 7e c0       	movq   rax,xmm0
   276fc:	66 0f 6f c1          	movdqa xmm0,xmm1
   27700:	49 89 c6             	mov    r14,rax
   27703:	49 89 d7             	mov    r15,rdx
   27706:	66 49 0f 7e c7       	movq   r15,xmm0
   2770b:	8b 45 44             	mov    eax,DWORD PTR [rbp+0x44]
   2770e:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
   27712:	48 83 c2 10          	add    rdx,0x10
   27716:	66 0f 6e c0          	movd   xmm0,eax
   2771a:	48 89 d7             	mov    rdi,rdx
   2771d:	e8 d0 12 00 00       	call   289f2 <v4<float>::operator*(float)>
   27722:	66 48 0f 7e c0       	movq   rax,xmm0
   27727:	66 0f 6f c1          	movdqa xmm0,xmm1
   2772b:	48 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rax
   27732:	48 89 95 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdx
   27739:	66 0f d6 85 78 ff ff ff 	movq   QWORD PTR [rbp-0x88],xmm0
   27741:	8b 55 40             	mov    edx,DWORD PTR [rbp+0x40]
   27744:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
   27748:	66 0f 6e c2          	movd   xmm0,edx
   2774c:	48 89 c7             	mov    rdi,rax
   2774f:	e8 9e 12 00 00       	call   289f2 <v4<float>::operator*(float)>
   27754:	66 48 0f 7e c0       	movq   rax,xmm0
   27759:	66 0f 6f c1          	movdqa xmm0,xmm1
   2775d:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   27761:	66 0f d6 45 98       	movq   QWORD PTR [rbp-0x68],xmm0
   27766:	48 8b 85 70 ff ff ff 	mov    rax,QWORD PTR [rbp-0x90]
   2776d:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
   27774:	48 89 c1             	mov    rcx,rax
   27777:	48 89 d3             	mov    rbx,rdx
   2777a:	48 8d 45 90          	lea    rax,[rbp-0x70]
   2777e:	66 48 0f 6e c1       	movq   xmm0,rcx
   27783:	66 48 0f 6e ca       	movq   xmm1,rdx
   27788:	48 89 c7             	mov    rdi,rax
   2778b:	e8 1a 13 00 00       	call   28aaa <v4<float>::operator+(v4<float>)>
   27790:	66 48 0f 7e c0       	movq   rax,xmm0
   27795:	66 0f 6f c1          	movdqa xmm0,xmm1
   27799:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   2779d:	66 0f d6 45 a8       	movq   QWORD PTR [rbp-0x58],xmm0
   277a2:	4c 89 f1             	mov    rcx,r14
   277a5:	4c 89 fb             	mov    rbx,r15
   277a8:	4c 89 f0             	mov    rax,r14
   277ab:	4c 89 fa             	mov    rdx,r15
   277ae:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   277b2:	66 48 0f 6e c1       	movq   xmm0,rcx
   277b7:	66 48 0f 6e ca       	movq   xmm1,rdx
   277bc:	48 89 c7             	mov    rdi,rax
   277bf:	e8 e6 12 00 00       	call   28aaa <v4<float>::operator+(v4<float>)>
   277c4:	66 48 0f 7e c0       	movq   rax,xmm0
   277c9:	66 0f 6f c1          	movdqa xmm0,xmm1
   277cd:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   277d1:	66 0f d6 45 b8       	movq   QWORD PTR [rbp-0x48],xmm0
   277d6:	48 8b 5d 88          	mov    rbx,QWORD PTR [rbp-0x78]
   277da:	4c 89 e6             	mov    rsi,r12
   277dd:	4c 89 ef             	mov    rdi,r13
   277e0:	4c 89 e0             	mov    rax,r12
   277e3:	4c 89 ea             	mov    rdx,r13
   277e6:	48 89 f1             	mov    rcx,rsi
   277e9:	48 8d 45 b0          	lea    rax,[rbp-0x50]
   277ed:	66 48 0f 6e c1       	movq   xmm0,rcx
   277f2:	66 48 0f 6e ca       	movq   xmm1,rdx
   277f7:	48 89 c7             	mov    rdi,rax
   277fa:	e8 ab 12 00 00       	call   28aaa <v4<float>::operator+(v4<float>)>
   277ff:	66 48 0f 7e c0       	movq   rax,xmm0
   27804:	66 0f 6f c1          	movdqa xmm0,xmm1
   27808:	48 89 43 30          	mov    QWORD PTR [rbx+0x30],rax
   2780c:	66 0f d6 43 38       	movq   QWORD PTR [rbx+0x38],xmm0
   27811:	90                   	nop
   27812:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   27816:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2781f:	74 05                	je     27826 <Mat4<float>::operator*(Mat4<float>)+0x5ac>
   27821:	e8 ba cc fd ff       	call   44e0 <__stack_chk_fail@plt>
   27826:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
   2782a:	48 83 c4 68          	add    rsp,0x68
   2782e:	5b                   	pop    rbx
   2782f:	41 5c                	pop    r12
   27831:	41 5d                	pop    r13
   27833:	41 5e                	pop    r14
   27835:	41 5f                	pop    r15
   27837:	5d                   	pop    rbp
   27838:	c3                   	ret    
   27839:	90                   	nop

000000000002783a <std::vector<AABB, std::allocator<AABB> >::operator[](unsigned long)>:
   2783a:	55                   	push   rbp
   2783b:	48 89 e5             	mov    rbp,rsp
   2783e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27842:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27846:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2784a:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2784d:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   27851:	48 89 d0             	mov    rax,rdx
   27854:	48 01 c0             	add    rax,rax
   27857:	48 01 d0             	add    rax,rdx
   2785a:	48 c1 e0 03          	shl    rax,0x3
   2785e:	48 01 c8             	add    rax,rcx
   27861:	5d                   	pop    rbp
   27862:	c3                   	ret    
   27863:	90                   	nop

0000000000027864 <std::vector<unsigned int, std::allocator<unsigned int> >::operator[](unsigned long)>:
   27864:	55                   	push   rbp
   27865:	48 89 e5             	mov    rbp,rsp
   27868:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2786c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27870:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27874:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   27877:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2787b:	48 c1 e0 02          	shl    rax,0x2
   2787f:	48 01 d0             	add    rax,rdx
   27882:	5d                   	pop    rbp
   27883:	c3                   	ret    

0000000000027884 <std::vector<Mesh, std::allocator<Mesh> >::operator[](unsigned long)>:
   27884:	55                   	push   rbp
   27885:	48 89 e5             	mov    rbp,rsp
   27888:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2788c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27890:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27894:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   27897:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2789b:	48 c1 e0 02          	shl    rax,0x2
   2789f:	48 01 d0             	add    rax,rdx
   278a2:	5d                   	pop    rbp
   278a3:	c3                   	ret    

00000000000278a4 <std::vector<Transform, std::allocator<Transform> >::operator[](unsigned long)>:
   278a4:	55                   	push   rbp
   278a5:	48 89 e5             	mov    rbp,rsp
   278a8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   278ac:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   278b0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   278b4:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   278b7:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   278bb:	48 89 d0             	mov    rax,rdx
   278be:	48 c1 e0 03          	shl    rax,0x3
   278c2:	48 01 d0             	add    rax,rdx
   278c5:	48 c1 e0 02          	shl    rax,0x2
   278c9:	48 01 c8             	add    rax,rcx
   278cc:	5d                   	pop    rbp
   278cd:	c3                   	ret    

00000000000278ce <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)>:
   278ce:	55                   	push   rbp
   278cf:	48 89 e5             	mov    rbp,rsp
   278d2:	48 83 ec 20          	sub    rsp,0x20
   278d6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   278da:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   278de:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   278e2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   278e6:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   278ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   278ee:	48 89 ce             	mov    rsi,rcx
   278f1:	48 89 c7             	mov    rdi,rax
   278f4:	e8 8b 12 00 00       	call   28b84 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type)>
   278f9:	90                   	nop
   278fa:	c9                   	leave  
   278fb:	c3                   	ret    

00000000000278fc <std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_ptr()>:
   278fc:	55                   	push   rbp
   278fd:	48 89 e5             	mov    rbp,rsp
   27900:	48 83 ec 10          	sub    rsp,0x10
   27904:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27908:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2790c:	48 89 c7             	mov    rdi,rax
   2790f:	e8 c1 12 00 00       	call   28bd5 <std::tuple_element<0ul, std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> >::type& std::get<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>
   27914:	c9                   	leave  
   27915:	c3                   	ret    

0000000000027916 <std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::get_deleter()>:
   27916:	55                   	push   rbp
   27917:	48 89 e5             	mov    rbp,rsp
   2791a:	48 83 ec 10          	sub    rsp,0x10
   2791e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27922:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27926:	48 89 c7             	mov    rdi,rax
   27929:	e8 5c 00 00 00       	call   2798a <std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_deleter()>
   2792e:	c9                   	leave  
   2792f:	c3                   	ret    

0000000000027930 <std::remove_reference<std::filesystem::__cxx11::path::_List::_Impl*&>::type&& std::move<std::filesystem::__cxx11::path::_List::_Impl*&>(std::filesystem::__cxx11::path::_List::_Impl*&)>:
   27930:	55                   	push   rbp
   27931:	48 89 e5             	mov    rbp,rsp
   27934:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27938:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2793c:	5d                   	pop    rbp
   2793d:	c3                   	ret    

000000000002793e <__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy(std::allocator<char> const&)>:
   2793e:	55                   	push   rbp
   2793f:	48 89 e5             	mov    rbp,rsp
   27942:	48 83 ec 20          	sub    rsp,0x20
   27946:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2794a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2794e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   27957:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2795b:	31 c0                	xor    eax,eax
   2795d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27961:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   27965:	48 89 d6             	mov    rsi,rdx
   27968:	48 89 c7             	mov    rdi,rax
   2796b:	e8 99 12 00 00       	call   28c09 <std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction(std::allocator<char> const&)>
   27970:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27974:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2797d:	74 05                	je     27984 <__gnu_cxx::__alloc_traits<std::allocator<char>, char>::_S_select_on_copy(std::allocator<char> const&)+0x46>
   2797f:	e8 5c cb fd ff       	call   44e0 <__stack_chk_fail@plt>
   27984:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27988:	c9                   	leave  
   27989:	c3                   	ret    

000000000002798a <std::__uniq_ptr_impl<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_deleter()>:
   2798a:	55                   	push   rbp
   2798b:	48 89 e5             	mov    rbp,rsp
   2798e:	48 83 ec 10          	sub    rsp,0x10
   27992:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27996:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2799a:	48 89 c7             	mov    rdi,rax
   2799d:	e8 90 12 00 00       	call   28c32 <std::tuple_element<1ul, std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> >::type& std::get<1ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>
   279a2:	c9                   	leave  
   279a3:	c3                   	ret    

00000000000279a4 <glm::detail::compute_normalize<2, float, (glm::qualifier)0, false>::call(glm::vec<2, float, (glm::qualifier)0> const&)>:
   279a4:	55                   	push   rbp
   279a5:	48 89 e5             	mov    rbp,rsp
   279a8:	48 83 ec 10          	sub    rsp,0x10
   279ac:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   279b0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   279b4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   279b8:	48 89 d6             	mov    rsi,rdx
   279bb:	48 89 c7             	mov    rdi,rax
   279be:	e8 51 13 00 00       	call   28d14 <float glm::dot<2, float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, glm::vec<2, float, (glm::qualifier)0> const&)>
   279c3:	66 0f 7e c0          	movd   eax,xmm0
   279c7:	66 0f 6e c0          	movd   xmm0,eax
   279cb:	e8 69 13 00 00       	call   28d39 <float glm::inversesqrt<float>(float)>
   279d0:	66 0f 7e c0          	movd   eax,xmm0
   279d4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   279d8:	66 0f 6e c0          	movd   xmm0,eax
   279dc:	48 89 d7             	mov    rdi,rdx
   279df:	e8 75 e1 ff ff       	call   25b59 <glm::vec<2, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, float)>
   279e4:	66 48 0f 7e c0       	movq   rax,xmm0
   279e9:	66 48 0f 6e c0       	movq   xmm0,rax
   279ee:	c9                   	leave  
   279ef:	c3                   	ret    

00000000000279f0 <v3<float>::len()>:
   279f0:	55                   	push   rbp
   279f1:	48 89 e5             	mov    rbp,rsp
   279f4:	48 83 ec 10          	sub    rsp,0x10
   279f8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   279fc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a00:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   27a04:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a08:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   27a0c:	f3 0f 59 c8          	mulss  xmm1,xmm0
   27a10:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a14:	f3 0f 10 50 04       	movss  xmm2,DWORD PTR [rax+0x4]
   27a19:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a1d:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   27a22:	f3 0f 59 c2          	mulss  xmm0,xmm2
   27a26:	f3 0f 58 c8          	addss  xmm1,xmm0
   27a2a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a2e:	f3 0f 10 50 08       	movss  xmm2,DWORD PTR [rax+0x8]
   27a33:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a37:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   27a3c:	f3 0f 59 c2          	mulss  xmm0,xmm2
   27a40:	f3 0f 58 c8          	addss  xmm1,xmm0
   27a44:	66 0f 7e c8          	movd   eax,xmm1
   27a48:	66 0f 6e c0          	movd   xmm0,eax
   27a4c:	e8 1f d9 ff ff       	call   25370 <std::sqrt(float)>
   27a51:	c9                   	leave  
   27a52:	c3                   	ret    
   27a53:	90                   	nop

0000000000027a54 <std::allocator<Tex>::allocator()>:
   27a54:	55                   	push   rbp
   27a55:	48 89 e5             	mov    rbp,rsp
   27a58:	48 83 ec 10          	sub    rsp,0x10
   27a5c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27a60:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a64:	48 89 c7             	mov    rdi,rax
   27a67:	e8 f8 12 00 00       	call   28d64 <__gnu_cxx::new_allocator<Tex>::new_allocator()>
   27a6c:	90                   	nop
   27a6d:	c9                   	leave  
   27a6e:	c3                   	ret    
   27a6f:	90                   	nop

0000000000027a70 <std::_Vector_base<Tex, std::allocator<Tex> >::_Vector_impl_data::_Vector_impl_data()>:
   27a70:	55                   	push   rbp
   27a71:	48 89 e5             	mov    rbp,rsp
   27a74:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27a78:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a7c:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   27a83:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a87:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   27a8f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27a93:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   27a9b:	90                   	nop
   27a9c:	5d                   	pop    rbp
   27a9d:	c3                   	ret    

0000000000027a9e <__gnu_cxx::new_allocator<Tex>::~new_allocator()>:
   27a9e:	55                   	push   rbp
   27a9f:	48 89 e5             	mov    rbp,rsp
   27aa2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27aa6:	90                   	nop
   27aa7:	5d                   	pop    rbp
   27aa8:	c3                   	ret    
   27aa9:	90                   	nop

0000000000027aaa <std::_Vector_base<Tex, std::allocator<Tex> >::_M_deallocate(Tex*, unsigned long)>:
   27aaa:	55                   	push   rbp
   27aab:	48 89 e5             	mov    rbp,rsp
   27aae:	48 83 ec 20          	sub    rsp,0x20
   27ab2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27ab6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27aba:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   27abe:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   27ac3:	74 17                	je     27adc <std::_Vector_base<Tex, std::allocator<Tex> >::_M_deallocate(Tex*, unsigned long)+0x32>
   27ac5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27ac9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   27acd:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   27ad1:	48 89 ce             	mov    rsi,rcx
   27ad4:	48 89 c7             	mov    rdi,rax
   27ad7:	e8 93 12 00 00       	call   28d6f <std::allocator_traits<std::allocator<Tex> >::deallocate(std::allocator<Tex>&, Tex*, unsigned long)>
   27adc:	90                   	nop
   27add:	c9                   	leave  
   27ade:	c3                   	ret    
   27adf:	90                   	nop

0000000000027ae0 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_get_Tp_allocator()>:
   27ae0:	55                   	push   rbp
   27ae1:	48 89 e5             	mov    rbp,rsp
   27ae4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27ae8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27aec:	5d                   	pop    rbp
   27aed:	c3                   	ret    

0000000000027aee <void std::_Destroy<Tex*, Tex>(Tex*, Tex*, std::allocator<Tex>&)>:
   27aee:	55                   	push   rbp
   27aef:	48 89 e5             	mov    rbp,rsp
   27af2:	48 83 ec 20          	sub    rsp,0x20
   27af6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27afa:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27afe:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   27b02:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   27b06:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27b0a:	48 89 d6             	mov    rsi,rdx
   27b0d:	48 89 c7             	mov    rdi,rax
   27b10:	e8 88 12 00 00       	call   28d9d <void std::_Destroy<Tex*>(Tex*, Tex*)>
   27b15:	90                   	nop
   27b16:	c9                   	leave  
   27b17:	c3                   	ret    

0000000000027b18 <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocator()>:
   27b18:	55                   	push   rbp
   27b19:	48 89 e5             	mov    rbp,rsp
   27b1c:	48 83 ec 10          	sub    rsp,0x10
   27b20:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27b24:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27b28:	48 89 c7             	mov    rdi,rax
   27b2b:	e8 94 12 00 00       	call   28dc4 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::new_allocator()>
   27b30:	90                   	nop
   27b31:	c9                   	leave  
   27b32:	c3                   	ret    
   27b33:	90                   	nop

0000000000027b34 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl_data::_Vector_impl_data()>:
   27b34:	55                   	push   rbp
   27b35:	48 89 e5             	mov    rbp,rsp
   27b38:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27b3c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27b40:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   27b47:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27b4b:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   27b53:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27b57:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   27b5f:	90                   	nop
   27b60:	5d                   	pop    rbp
   27b61:	c3                   	ret    

0000000000027b62 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~new_allocator()>:
   27b62:	55                   	push   rbp
   27b63:	48 89 e5             	mov    rbp,rsp
   27b66:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27b6a:	90                   	nop
   27b6b:	5d                   	pop    rbp
   27b6c:	c3                   	ret    
   27b6d:	90                   	nop

0000000000027b6e <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>:
   27b6e:	55                   	push   rbp
   27b6f:	48 89 e5             	mov    rbp,rsp
   27b72:	48 83 ec 20          	sub    rsp,0x20
   27b76:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27b7a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27b7e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   27b82:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   27b87:	74 17                	je     27ba0 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)+0x32>
   27b89:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27b8d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   27b91:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   27b95:	48 89 ce             	mov    rsi,rcx
   27b98:	48 89 c7             	mov    rdi,rax
   27b9b:	e8 2f 12 00 00       	call   28dcf <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::deallocate(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
   27ba0:	90                   	nop
   27ba1:	c9                   	leave  
   27ba2:	c3                   	ret    
   27ba3:	90                   	nop

0000000000027ba4 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>:
   27ba4:	55                   	push   rbp
   27ba5:	48 89 e5             	mov    rbp,rsp
   27ba8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27bac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27bb0:	5d                   	pop    rbp
   27bb1:	c3                   	ret    

0000000000027bb2 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>:
   27bb2:	55                   	push   rbp
   27bb3:	48 89 e5             	mov    rbp,rsp
   27bb6:	48 83 ec 20          	sub    rsp,0x20
   27bba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27bbe:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27bc2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   27bc6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   27bca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27bce:	48 89 d6             	mov    rsi,rdx
   27bd1:	48 89 c7             	mov    rdi,rax
   27bd4:	e8 24 12 00 00       	call   28dfd <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   27bd9:	90                   	nop
   27bda:	c9                   	leave  
   27bdb:	c3                   	ret    

0000000000027bdc <unsigned int* std::vector<unsigned int, std::allocator<unsigned int> >::_M_data_ptr<unsigned int>(unsigned int*) const>:
   27bdc:	55                   	push   rbp
   27bdd:	48 89 e5             	mov    rbp,rsp
   27be0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27be4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27be8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   27bec:	5d                   	pop    rbp
   27bed:	c3                   	ret    

0000000000027bee <std::remove_reference<AABB&>::type&& std::move<AABB&>(AABB&)>:
   27bee:	55                   	push   rbp
   27bef:	48 89 e5             	mov    rbp,rsp
   27bf2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27bf6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27bfa:	5d                   	pop    rbp
   27bfb:	c3                   	ret    

0000000000027bfc <AABB& std::vector<AABB, std::allocator<AABB> >::emplace_back<AABB>(AABB&&)>:
   27bfc:	55                   	push   rbp
   27bfd:	48 89 e5             	mov    rbp,rsp
   27c00:	53                   	push   rbx
   27c01:	48 83 ec 18          	sub    rsp,0x18
   27c05:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27c09:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   27c0d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c11:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   27c15:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c19:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   27c1d:	48 39 c2             	cmp    rdx,rax
   27c20:	74 3c                	je     27c5e <AABB& std::vector<AABB, std::allocator<AABB> >::emplace_back<AABB>(AABB&&)+0x62>
   27c22:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27c26:	48 89 c7             	mov    rdi,rax
   27c29:	e8 f5 11 00 00       	call   28e23 <AABB&& std::forward<AABB>(std::remove_reference<AABB>::type&)>
   27c2e:	48 89 c2             	mov    rdx,rax
   27c31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c35:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   27c39:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c3d:	48 89 ce             	mov    rsi,rcx
   27c40:	48 89 c7             	mov    rdi,rax
   27c43:	e8 e9 11 00 00       	call   28e31 <void std::allocator_traits<std::allocator<AABB> >::construct<AABB, AABB>(std::allocator<AABB>&, AABB*, AABB&&)>
   27c48:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c4c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   27c50:	48 8d 50 18          	lea    rdx,[rax+0x18]
   27c54:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c58:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   27c5c:	eb 30                	jmp    27c8e <AABB& std::vector<AABB, std::allocator<AABB> >::emplace_back<AABB>(AABB&&)+0x92>
   27c5e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27c62:	48 89 c7             	mov    rdi,rax
   27c65:	e8 b9 11 00 00       	call   28e23 <AABB&& std::forward<AABB>(std::remove_reference<AABB>::type&)>
   27c6a:	48 89 c3             	mov    rbx,rax
   27c6d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c71:	48 89 c7             	mov    rdi,rax
   27c74:	e8 f1 11 00 00       	call   28e6a <std::vector<AABB, std::allocator<AABB> >::end()>
   27c79:	48 89 c1             	mov    rcx,rax
   27c7c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c80:	48 89 da             	mov    rdx,rbx
   27c83:	48 89 ce             	mov    rsi,rcx
   27c86:	48 89 c7             	mov    rdi,rax
   27c89:	e8 28 12 00 00       	call   28eb6 <void std::vector<AABB, std::allocator<AABB> >::_M_realloc_insert<AABB>(__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >, AABB&&)>
   27c8e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27c92:	48 89 c7             	mov    rdi,rax
   27c95:	e8 f6 13 00 00       	call   29090 <std::vector<AABB, std::allocator<AABB> >::back()>
   27c9a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   27c9e:	c9                   	leave  
   27c9f:	c3                   	ret    

0000000000027ca0 <std::remove_reference<Mesh&>::type&& std::move<Mesh&>(Mesh&)>:
   27ca0:	55                   	push   rbp
   27ca1:	48 89 e5             	mov    rbp,rsp
   27ca4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27ca8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27cac:	5d                   	pop    rbp
   27cad:	c3                   	ret    

0000000000027cae <Mesh& std::vector<Mesh, std::allocator<Mesh> >::emplace_back<Mesh>(Mesh&&)>:
   27cae:	55                   	push   rbp
   27caf:	48 89 e5             	mov    rbp,rsp
   27cb2:	53                   	push   rbx
   27cb3:	48 83 ec 18          	sub    rsp,0x18
   27cb7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27cbb:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   27cbf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27cc3:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   27cc7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27ccb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   27ccf:	48 39 c2             	cmp    rdx,rax
   27cd2:	74 3c                	je     27d10 <Mesh& std::vector<Mesh, std::allocator<Mesh> >::emplace_back<Mesh>(Mesh&&)+0x62>
   27cd4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27cd8:	48 89 c7             	mov    rdi,rax
   27cdb:	e8 12 14 00 00       	call   290f2 <Mesh&& std::forward<Mesh>(std::remove_reference<Mesh>::type&)>
   27ce0:	48 89 c2             	mov    rdx,rax
   27ce3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27ce7:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   27ceb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27cef:	48 89 ce             	mov    rsi,rcx
   27cf2:	48 89 c7             	mov    rdi,rax
   27cf5:	e8 06 14 00 00       	call   29100 <void std::allocator_traits<std::allocator<Mesh> >::construct<Mesh, Mesh>(std::allocator<Mesh>&, Mesh*, Mesh&&)>
   27cfa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27cfe:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   27d02:	48 8d 50 04          	lea    rdx,[rax+0x4]
   27d06:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d0a:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   27d0e:	eb 30                	jmp    27d40 <Mesh& std::vector<Mesh, std::allocator<Mesh> >::emplace_back<Mesh>(Mesh&&)+0x92>
   27d10:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27d14:	48 89 c7             	mov    rdi,rax
   27d17:	e8 d6 13 00 00       	call   290f2 <Mesh&& std::forward<Mesh>(std::remove_reference<Mesh>::type&)>
   27d1c:	48 89 c3             	mov    rbx,rax
   27d1f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d23:	48 89 c7             	mov    rdi,rax
   27d26:	e8 0f 14 00 00       	call   2913a <std::vector<Mesh, std::allocator<Mesh> >::end()>
   27d2b:	48 89 c1             	mov    rcx,rax
   27d2e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d32:	48 89 da             	mov    rdx,rbx
   27d35:	48 89 ce             	mov    rsi,rcx
   27d38:	48 89 c7             	mov    rdi,rax
   27d3b:	e8 46 14 00 00       	call   29186 <void std::vector<Mesh, std::allocator<Mesh> >::_M_realloc_insert<Mesh>(__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >, Mesh&&)>
   27d40:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d44:	48 89 c7             	mov    rdi,rax
   27d47:	e8 f0 15 00 00       	call   2933c <std::vector<Mesh, std::allocator<Mesh> >::back()>
   27d4c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   27d50:	c9                   	leave  
   27d51:	c3                   	ret    

0000000000027d52 <std::remove_reference<Transform&>::type&& std::move<Transform&>(Transform&)>:
   27d52:	55                   	push   rbp
   27d53:	48 89 e5             	mov    rbp,rsp
   27d56:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27d5a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27d5e:	5d                   	pop    rbp
   27d5f:	c3                   	ret    

0000000000027d60 <Transform& std::vector<Transform, std::allocator<Transform> >::emplace_back<Transform>(Transform&&)>:
   27d60:	55                   	push   rbp
   27d61:	48 89 e5             	mov    rbp,rsp
   27d64:	53                   	push   rbx
   27d65:	48 83 ec 18          	sub    rsp,0x18
   27d69:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27d6d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   27d71:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d75:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   27d79:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d7d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   27d81:	48 39 c2             	cmp    rdx,rax
   27d84:	74 3c                	je     27dc2 <Transform& std::vector<Transform, std::allocator<Transform> >::emplace_back<Transform>(Transform&&)+0x62>
   27d86:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27d8a:	48 89 c7             	mov    rdi,rax
   27d8d:	e8 0c 16 00 00       	call   2939e <Transform&& std::forward<Transform>(std::remove_reference<Transform>::type&)>
   27d92:	48 89 c2             	mov    rdx,rax
   27d95:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27d99:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   27d9d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27da1:	48 89 ce             	mov    rsi,rcx
   27da4:	48 89 c7             	mov    rdi,rax
   27da7:	e8 00 16 00 00       	call   293ac <void std::allocator_traits<std::allocator<Transform> >::construct<Transform, Transform>(std::allocator<Transform>&, Transform*, Transform&&)>
   27dac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27db0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   27db4:	48 8d 50 24          	lea    rdx,[rax+0x24]
   27db8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27dbc:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   27dc0:	eb 30                	jmp    27df2 <Transform& std::vector<Transform, std::allocator<Transform> >::emplace_back<Transform>(Transform&&)+0x92>
   27dc2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27dc6:	48 89 c7             	mov    rdi,rax
   27dc9:	e8 d0 15 00 00       	call   2939e <Transform&& std::forward<Transform>(std::remove_reference<Transform>::type&)>
   27dce:	48 89 c3             	mov    rbx,rax
   27dd1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27dd5:	48 89 c7             	mov    rdi,rax
   27dd8:	e8 09 16 00 00       	call   293e6 <std::vector<Transform, std::allocator<Transform> >::end()>
   27ddd:	48 89 c1             	mov    rcx,rax
   27de0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27de4:	48 89 da             	mov    rdx,rbx
   27de7:	48 89 ce             	mov    rsi,rcx
   27dea:	48 89 c7             	mov    rdi,rax
   27ded:	e8 40 16 00 00       	call   29432 <void std::vector<Transform, std::allocator<Transform> >::_M_realloc_insert<Transform>(__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >, Transform&&)>
   27df2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27df6:	48 89 c7             	mov    rdi,rax
   27df9:	e8 10 18 00 00       	call   2960e <std::vector<Transform, std::allocator<Transform> >::back()>
   27dfe:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   27e02:	c9                   	leave  
   27e03:	c3                   	ret    

0000000000027e04 <std::remove_reference<unsigned int&>::type&& std::move<unsigned int&>(unsigned int&)>:
   27e04:	55                   	push   rbp
   27e05:	48 89 e5             	mov    rbp,rsp
   27e08:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27e0c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27e10:	5d                   	pop    rbp
   27e11:	c3                   	ret    

0000000000027e12 <unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&)>:
   27e12:	55                   	push   rbp
   27e13:	48 89 e5             	mov    rbp,rsp
   27e16:	53                   	push   rbx
   27e17:	48 83 ec 18          	sub    rsp,0x18
   27e1b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27e1f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   27e23:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e27:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   27e2b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e2f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   27e33:	48 39 c2             	cmp    rdx,rax
   27e36:	74 3c                	je     27e74 <unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&)+0x62>
   27e38:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27e3c:	48 89 c7             	mov    rdi,rax
   27e3f:	e8 2c 18 00 00       	call   29670 <unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&)>
   27e44:	48 89 c2             	mov    rdx,rax
   27e47:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e4b:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   27e4f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e53:	48 89 ce             	mov    rsi,rcx
   27e56:	48 89 c7             	mov    rdi,rax
   27e59:	e8 20 18 00 00       	call   2967e <void std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int, unsigned int>(std::allocator<unsigned int>&, unsigned int*, unsigned int&&)>
   27e5e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e62:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   27e66:	48 8d 50 04          	lea    rdx,[rax+0x4]
   27e6a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e6e:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   27e72:	eb 30                	jmp    27ea4 <unsigned int& std::vector<unsigned int, std::allocator<unsigned int> >::emplace_back<unsigned int>(unsigned int&&)+0x92>
   27e74:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   27e78:	48 89 c7             	mov    rdi,rax
   27e7b:	e8 f0 17 00 00       	call   29670 <unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&)>
   27e80:	48 89 c3             	mov    rbx,rax
   27e83:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e87:	48 89 c7             	mov    rdi,rax
   27e8a:	e8 61 00 00 00       	call   27ef0 <std::vector<unsigned int, std::allocator<unsigned int> >::end()>
   27e8f:	48 89 c1             	mov    rcx,rax
   27e92:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27e96:	48 89 da             	mov    rdx,rbx
   27e99:	48 89 ce             	mov    rsi,rcx
   27e9c:	48 89 c7             	mov    rdi,rax
   27e9f:	e8 14 18 00 00       	call   296b8 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int&&)>
   27ea4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27ea8:	48 89 c7             	mov    rdi,rax
   27eab:	e8 be 19 00 00       	call   2986e <std::vector<unsigned int, std::allocator<unsigned int> >::back()>
   27eb0:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   27eb4:	c9                   	leave  
   27eb5:	c3                   	ret    

0000000000027eb6 <void std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int, unsigned int const&>(std::allocator<unsigned int>&, unsigned int*, unsigned int const&)>:
   27eb6:	55                   	push   rbp
   27eb7:	48 89 e5             	mov    rbp,rsp
   27eba:	48 83 ec 20          	sub    rsp,0x20
   27ebe:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   27ec2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   27ec6:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   27eca:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27ece:	48 89 c7             	mov    rdi,rax
   27ed1:	e8 fa 19 00 00       	call   298d0 <unsigned int const& std::forward<unsigned int const&>(std::remove_reference<unsigned int const&>::type&)>
   27ed6:	48 89 c2             	mov    rdx,rax
   27ed9:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   27edd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   27ee1:	48 89 ce             	mov    rsi,rcx
   27ee4:	48 89 c7             	mov    rdi,rax
   27ee7:	e8 f2 19 00 00       	call   298de <void __gnu_cxx::new_allocator<unsigned int>::construct<unsigned int, unsigned int const&>(unsigned int*, unsigned int const&)>
   27eec:	90                   	nop
   27eed:	c9                   	leave  
   27eee:	c3                   	ret    
   27eef:	90                   	nop

0000000000027ef0 <std::vector<unsigned int, std::allocator<unsigned int> >::end()>:
   27ef0:	55                   	push   rbp
   27ef1:	48 89 e5             	mov    rbp,rsp
   27ef4:	48 83 ec 20          	sub    rsp,0x20
   27ef8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   27efc:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   27f05:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   27f09:	31 c0                	xor    eax,eax
   27f0b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   27f0f:	48 8d 50 08          	lea    rdx,[rax+0x8]
   27f13:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   27f17:	48 89 d6             	mov    rsi,rdx
   27f1a:	48 89 c7             	mov    rdi,rax
   27f1d:	e8 fa 19 00 00       	call   2991c <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int* const&)>
   27f22:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   27f26:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   27f2a:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   27f33:	74 05                	je     27f3a <std::vector<unsigned int, std::allocator<unsigned int> >::end()+0x4a>
   27f35:	e8 a6 c5 fd ff       	call   44e0 <__stack_chk_fail@plt>
   27f3a:	c9                   	leave  
   27f3b:	c3                   	ret    

0000000000027f3c <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)>:
   27f3c:	55                   	push   rbp
   27f3d:	48 89 e5             	mov    rbp,rsp
   27f40:	53                   	push   rbx
   27f41:	48 83 ec 68          	sub    rsp,0x68
   27f45:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   27f49:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   27f4d:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   27f51:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   27f5a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   27f5e:	31 c0                	xor    eax,eax
   27f60:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   27f64:	48 8d 15 90 4a 01 00 	lea    rdx,[rip+0x14a90]        # 3c9fb <NANO_SEC+0x1733>
   27f6b:	be 01 00 00 00       	mov    esi,0x1
   27f70:	48 89 c7             	mov    rdi,rax
   27f73:	e8 c2 19 00 00       	call   2993a <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const>
   27f78:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   27f7c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   27f80:	48 8b 00             	mov    rax,QWORD PTR [rax]
   27f83:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   27f87:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   27f8b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   27f8f:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   27f93:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   27f97:	48 89 c7             	mov    rdi,rax
   27f9a:	e8 87 1a 00 00       	call   29a26 <std::vector<unsigned int, std::allocator<unsigned int> >::begin()>
   27f9f:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   27fa3:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   27fa7:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   27fab:	48 89 d6             	mov    rsi,rdx
   27fae:	48 89 c7             	mov    rdi,rax
   27fb1:	e8 b8 1a 00 00       	call   29a6e <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type __gnu_cxx::operator-<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > const&, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > const&)>
   27fb6:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   27fba:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   27fbe:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   27fc2:	48 89 d6             	mov    rsi,rdx
   27fc5:	48 89 c7             	mov    rdi,rax
   27fc8:	e8 e1 1a 00 00       	call   29aae <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long)>
   27fcd:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   27fd1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27fd5:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   27fd9:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   27fdd:	48 89 c7             	mov    rdi,rax
   27fe0:	e8 eb 18 00 00       	call   298d0 <unsigned int const& std::forward<unsigned int const&>(std::remove_reference<unsigned int const&>::type&)>
   27fe5:	48 89 c2             	mov    rdx,rax
   27fe8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   27fec:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   27ff4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   27ff8:	48 01 c1             	add    rcx,rax
   27ffb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   27fff:	48 89 ce             	mov    rsi,rcx
   28002:	48 89 c7             	mov    rdi,rax
   28005:	e8 ac fe ff ff       	call   27eb6 <void std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int, unsigned int const&>(std::allocator<unsigned int>&, unsigned int*, unsigned int const&)>
   2800a:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   28012:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28016:	48 89 c7             	mov    rdi,rax
   28019:	e8 14 08 00 00       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   2801e:	48 89 c3             	mov    rbx,rax
   28021:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   28025:	48 89 c7             	mov    rdi,rax
   28028:	e8 e7 1a 00 00       	call   29b14 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   2802d:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   28030:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   28034:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28038:	48 89 d9             	mov    rcx,rbx
   2803b:	48 89 c7             	mov    rdi,rax
   2803e:	e8 9e 1a 00 00       	call   29ae1 <std::vector<unsigned int, std::allocator<unsigned int> >::_S_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   28043:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28047:	48 83 45 e0 04       	add    QWORD PTR [rbp-0x20],0x4
   2804c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28050:	48 89 c7             	mov    rdi,rax
   28053:	e8 da 07 00 00       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   28058:	48 89 c3             	mov    rbx,rax
   2805b:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2805f:	48 89 c7             	mov    rdi,rax
   28062:	e8 ad 1a 00 00       	call   29b14 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   28067:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2806a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2806e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   28072:	48 89 d9             	mov    rcx,rbx
   28075:	48 89 c7             	mov    rdi,rax
   28078:	e8 64 1a 00 00       	call   29ae1 <std::vector<unsigned int, std::allocator<unsigned int> >::_S_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   2807d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28081:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28085:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   28089:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   2808d:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   28091:	48 c1 fa 02          	sar    rdx,0x2
   28095:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   28099:	48 89 ce             	mov    rsi,rcx
   2809c:	48 89 c7             	mov    rdi,rax
   2809f:	e8 58 07 00 00       	call   287fc <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)>
   280a4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   280a8:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   280ac:	48 89 10             	mov    QWORD PTR [rax],rdx
   280af:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   280b3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   280b7:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   280bb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   280bf:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   280c7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   280cb:	48 01 c2             	add    rdx,rax
   280ce:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   280d2:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   280d6:	90                   	nop
   280d7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   280db:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   280e4:	74 05                	je     280eb <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)+0x1af>
   280e6:	e8 f5 c3 fd ff       	call   44e0 <__stack_chk_fail@plt>
   280eb:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   280ef:	c9                   	leave  
   280f0:	c3                   	ret    

00000000000280f1 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   280f1:	55                   	push   rbp
   280f2:	48 89 e5             	mov    rbp,rsp
   280f5:	48 83 ec 20          	sub    rsp,0x20
   280f9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   280fd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28101:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   28105:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   28109:	48 89 c7             	mov    rdi,rax
   2810c:	e8 11 1a 00 00       	call   29b22 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::type&)>
   28111:	48 89 c2             	mov    rdx,rax
   28114:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   28118:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2811c:	48 89 ce             	mov    rsi,rcx
   2811f:	48 89 c7             	mov    rdi,rax
   28122:	e8 09 1a 00 00       	call   29b30 <void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   28127:	90                   	nop
   28128:	c9                   	leave  
   28129:	c3                   	ret    

000000000002812a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::end()>:
   2812a:	55                   	push   rbp
   2812b:	48 89 e5             	mov    rbp,rsp
   2812e:	48 83 ec 20          	sub    rsp,0x20
   28132:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   28136:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2813f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   28143:	31 c0                	xor    eax,eax
   28145:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   28149:	48 8d 50 08          	lea    rdx,[rax+0x8]
   2814d:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   28151:	48 89 d6             	mov    rsi,rdx
   28154:	48 89 c7             	mov    rdi,rax
   28157:	e8 42 1a 00 00       	call   29b9e <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::__normal_iterator(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* const&)>
   2815c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   28160:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   28164:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2816d:	74 05                	je     28174 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::end()+0x4a>
   2816f:	e8 6c c3 fd ff       	call   44e0 <__stack_chk_fail@plt>
   28174:	c9                   	leave  
   28175:	c3                   	ret    

0000000000028176 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   28176:	55                   	push   rbp
   28177:	48 89 e5             	mov    rbp,rsp
   2817a:	53                   	push   rbx
   2817b:	48 83 ec 68          	sub    rsp,0x68
   2817f:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   28183:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   28187:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   2818b:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28194:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   28198:	31 c0                	xor    eax,eax
   2819a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2819e:	48 8d 15 56 48 01 00 	lea    rdx,[rip+0x14856]        # 3c9fb <NANO_SEC+0x1733>
   281a5:	be 01 00 00 00       	mov    esi,0x1
   281aa:	48 89 c7             	mov    rdi,rax
   281ad:	e8 0a 1a 00 00       	call   29bbc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const>
   281b2:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   281b6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   281ba:	48 8b 00             	mov    rax,QWORD PTR [rax]
   281bd:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   281c1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   281c5:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   281c9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   281cd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   281d1:	48 89 c7             	mov    rdi,rax
   281d4:	e8 cf 1a 00 00       	call   29ca8 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::begin()>
   281d9:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   281dd:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   281e1:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   281e5:	48 89 d6             	mov    rsi,rdx
   281e8:	48 89 c7             	mov    rdi,rax
   281eb:	e8 00 1b 00 00       	call   29cf0 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::difference_type __gnu_cxx::operator-<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)>
   281f0:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   281f4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   281f8:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   281fc:	48 89 d6             	mov    rsi,rdx
   281ff:	48 89 c7             	mov    rdi,rax
   28202:	e8 29 1b 00 00       	call   29d30 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)>
   28207:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2820b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2820f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28213:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   28217:	48 89 c7             	mov    rdi,rax
   2821a:	e8 03 19 00 00       	call   29b22 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::type&)>
   2821f:	48 89 c2             	mov    rdx,rax
   28222:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   28226:	48 c1 e0 05          	shl    rax,0x5
   2822a:	48 89 c1             	mov    rcx,rax
   2822d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   28231:	48 01 c1             	add    rcx,rax
   28234:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28238:	48 89 ce             	mov    rsi,rcx
   2823b:	48 89 c7             	mov    rdi,rax
   2823e:	e8 ae fe ff ff       	call   280f1 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   28243:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   2824b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2824f:	48 89 c7             	mov    rdi,rax
   28252:	e8 4d f9 ff ff       	call   27ba4 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
   28257:	48 89 c3             	mov    rbx,rax
   2825a:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2825e:	48 89 c7             	mov    rdi,rax
   28261:	e8 30 1b 00 00       	call   29d96 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::base() const>
   28266:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   28269:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   2826d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28271:	48 89 d9             	mov    rcx,rbx
   28274:	48 89 c7             	mov    rdi,rax
   28277:	e8 e7 1a 00 00       	call   29d63 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_relocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   2827c:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28280:	48 83 45 e0 20       	add    QWORD PTR [rbp-0x20],0x20
   28285:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28289:	48 89 c7             	mov    rdi,rax
   2828c:	e8 13 f9 ff ff       	call   27ba4 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
   28291:	48 89 c3             	mov    rbx,rax
   28294:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   28298:	48 89 c7             	mov    rdi,rax
   2829b:	e8 f6 1a 00 00       	call   29d96 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::base() const>
   282a0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   282a3:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   282a7:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   282ab:	48 89 d9             	mov    rcx,rbx
   282ae:	48 89 c7             	mov    rdi,rax
   282b1:	e8 ad 1a 00 00       	call   29d63 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_relocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   282b6:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   282ba:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   282be:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   282c2:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   282c6:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   282ca:	48 c1 fa 05          	sar    rdx,0x5
   282ce:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   282d2:	48 89 ce             	mov    rsi,rcx
   282d5:	48 89 c7             	mov    rdi,rax
   282d8:	e8 91 f8 ff ff       	call   27b6e <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
   282dd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   282e1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   282e5:	48 89 10             	mov    QWORD PTR [rax],rdx
   282e8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   282ec:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   282f0:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   282f4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   282f8:	48 c1 e0 05          	shl    rax,0x5
   282fc:	48 89 c2             	mov    rdx,rax
   282ff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   28303:	48 01 c2             	add    rdx,rax
   28306:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2830a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   2830e:	90                   	nop
   2830f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   28313:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2831c:	0f 84 8d 00 00 00    	je     283af <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x239>
   28322:	e9 83 00 00 00       	jmp    283aa <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x234>
   28327:	48 89 c7             	mov    rdi,rax
   2832a:	e8 11 be fd ff       	call   4140 <__cxa_begin_catch@plt>
   2832f:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   28334:	75 23                	jne    28359 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1e3>
   28336:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2833a:	48 c1 e0 05          	shl    rax,0x5
   2833e:	48 89 c2             	mov    rdx,rax
   28341:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   28345:	48 01 c2             	add    rdx,rax
   28348:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2834c:	48 89 d6             	mov    rsi,rdx
   2834f:	48 89 c7             	mov    rdi,rax
   28352:	e8 4d 1a 00 00       	call   29da4 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   28357:	eb 22                	jmp    2837b <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x205>
   28359:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2835d:	48 89 c7             	mov    rdi,rax
   28360:	e8 3f f8 ff ff       	call   27ba4 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
   28365:	48 89 c2             	mov    rdx,rax
   28368:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2836c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   28370:	48 89 ce             	mov    rsi,rcx
   28373:	48 89 c7             	mov    rdi,rax
   28376:	e8 37 f8 ff ff       	call   27bb2 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   2837b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2837f:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   28383:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   28387:	48 89 ce             	mov    rsi,rcx
   2838a:	48 89 c7             	mov    rdi,rax
   2838d:	e8 dc f7 ff ff       	call   27b6e <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
   28392:	e8 b9 c2 fd ff       	call   4650 <__cxa_rethrow@plt>
   28397:	48 89 c3             	mov    rbx,rax
   2839a:	e8 71 c3 fd ff       	call   4710 <__cxa_end_catch@plt>
   2839f:	48 89 d8             	mov    rax,rbx
   283a2:	48 89 c7             	mov    rdi,rax
   283a5:	e8 b6 c3 fd ff       	call   4760 <_Unwind_Resume@plt>
   283aa:	e8 31 c1 fd ff       	call   44e0 <__stack_chk_fail@plt>
   283af:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   283b3:	c9                   	leave  
   283b4:	c3                   	ret    

00000000000283b5 <void std::allocator_traits<std::allocator<Tex> >::construct<Tex, Tex const&>(std::allocator<Tex>&, Tex*, Tex const&)>:
   283b5:	55                   	push   rbp
   283b6:	48 89 e5             	mov    rbp,rsp
   283b9:	48 83 ec 20          	sub    rsp,0x20
   283bd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   283c1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   283c5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   283c9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   283cd:	48 89 c7             	mov    rdi,rax
   283d0:	e8 f5 19 00 00       	call   29dca <Tex const& std::forward<Tex const&>(std::remove_reference<Tex const&>::type&)>
   283d5:	48 89 c2             	mov    rdx,rax
   283d8:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   283dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   283e0:	48 89 ce             	mov    rsi,rcx
   283e3:	48 89 c7             	mov    rdi,rax
   283e6:	e8 ed 19 00 00       	call   29dd8 <void __gnu_cxx::new_allocator<Tex>::construct<Tex, Tex const&>(Tex*, Tex const&)>
   283eb:	90                   	nop
   283ec:	c9                   	leave  
   283ed:	c3                   	ret    

00000000000283ee <std::vector<Tex, std::allocator<Tex> >::end()>:
   283ee:	55                   	push   rbp
   283ef:	48 89 e5             	mov    rbp,rsp
   283f2:	48 83 ec 20          	sub    rsp,0x20
   283f6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   283fa:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28403:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   28407:	31 c0                	xor    eax,eax
   28409:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2840d:	48 8d 50 08          	lea    rdx,[rax+0x8]
   28411:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   28415:	48 89 d6             	mov    rsi,rdx
   28418:	48 89 c7             	mov    rdi,rax
   2841b:	e8 0e 1a 00 00       	call   29e2e <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::__normal_iterator(Tex* const&)>
   28420:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   28424:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   28428:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   28431:	74 05                	je     28438 <std::vector<Tex, std::allocator<Tex> >::end()+0x4a>
   28433:	e8 a8 c0 fd ff       	call   44e0 <__stack_chk_fail@plt>
   28438:	c9                   	leave  
   28439:	c3                   	ret    

000000000002843a <void std::vector<Tex, std::allocator<Tex> >::_M_realloc_insert<Tex const&>(__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >, Tex const&)>:
   2843a:	55                   	push   rbp
   2843b:	48 89 e5             	mov    rbp,rsp
   2843e:	53                   	push   rbx
   2843f:	48 83 ec 68          	sub    rsp,0x68
   28443:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   28447:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   2844b:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   2844f:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28458:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2845c:	31 c0                	xor    eax,eax
   2845e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28462:	48 8d 15 92 45 01 00 	lea    rdx,[rip+0x14592]        # 3c9fb <NANO_SEC+0x1733>
   28469:	be 01 00 00 00       	mov    esi,0x1
   2846e:	48 89 c7             	mov    rdi,rax
   28471:	e8 d6 19 00 00       	call   29e4c <std::vector<Tex, std::allocator<Tex> >::_M_check_len(unsigned long, char const*) const>
   28476:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   2847a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2847e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28481:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   28485:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28489:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   2848d:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   28491:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28495:	48 89 c7             	mov    rdi,rax
   28498:	e8 9b 1a 00 00       	call   29f38 <std::vector<Tex, std::allocator<Tex> >::begin()>
   2849d:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   284a1:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   284a5:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   284a9:	48 89 d6             	mov    rsi,rdx
   284ac:	48 89 c7             	mov    rdi,rax
   284af:	e8 cc 1a 00 00       	call   29f80 <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::difference_type __gnu_cxx::operator-<Tex*, std::vector<Tex, std::allocator<Tex> > >(__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > > const&, __gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > > const&)>
   284b4:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   284b8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   284bc:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   284c0:	48 89 d6             	mov    rsi,rdx
   284c3:	48 89 c7             	mov    rdi,rax
   284c6:	e8 05 1b 00 00       	call   29fd0 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_allocate(unsigned long)>
   284cb:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   284cf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   284d3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   284d7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   284db:	48 89 c7             	mov    rdi,rax
   284de:	e8 e7 18 00 00       	call   29dca <Tex const& std::forward<Tex const&>(std::remove_reference<Tex const&>::type&)>
   284e3:	48 89 c6             	mov    rsi,rax
   284e6:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   284ea:	48 89 d0             	mov    rax,rdx
   284ed:	48 01 c0             	add    rax,rax
   284f0:	48 01 d0             	add    rax,rdx
   284f3:	48 c1 e0 03          	shl    rax,0x3
   284f7:	48 89 c2             	mov    rdx,rax
   284fa:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   284fe:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   28502:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28506:	48 89 f2             	mov    rdx,rsi
   28509:	48 89 ce             	mov    rsi,rcx
   2850c:	48 89 c7             	mov    rdi,rax
   2850f:	e8 a1 fe ff ff       	call   283b5 <void std::allocator_traits<std::allocator<Tex> >::construct<Tex, Tex const&>(std::allocator<Tex>&, Tex*, Tex const&)>
   28514:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   2851c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28520:	48 89 c7             	mov    rdi,rax
   28523:	e8 b8 f5 ff ff       	call   27ae0 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_get_Tp_allocator()>
   28528:	48 89 c3             	mov    rbx,rax
   2852b:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2852f:	48 89 c7             	mov    rdi,rax
   28532:	e8 ff 1a 00 00       	call   2a036 <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::base() const>
   28537:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   2853a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   2853e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28542:	48 89 d9             	mov    rcx,rbx
   28545:	48 89 c7             	mov    rdi,rax
   28548:	e8 b6 1a 00 00       	call   2a003 <std::vector<Tex, std::allocator<Tex> >::_S_relocate(Tex*, Tex*, Tex*, std::allocator<Tex>&)>
   2854d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28551:	48 83 45 e0 18       	add    QWORD PTR [rbp-0x20],0x18
   28556:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2855a:	48 89 c7             	mov    rdi,rax
   2855d:	e8 7e f5 ff ff       	call   27ae0 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_get_Tp_allocator()>
   28562:	48 89 c3             	mov    rbx,rax
   28565:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   28569:	48 89 c7             	mov    rdi,rax
   2856c:	e8 c5 1a 00 00       	call   2a036 <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::base() const>
   28571:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28574:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   28578:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   2857c:	48 89 d9             	mov    rcx,rbx
   2857f:	48 89 c7             	mov    rdi,rax
   28582:	e8 7c 1a 00 00       	call   2a003 <std::vector<Tex, std::allocator<Tex> >::_S_relocate(Tex*, Tex*, Tex*, std::allocator<Tex>&)>
   28587:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2858b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2858f:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   28593:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   28597:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   2859b:	48 89 d1             	mov    rcx,rdx
   2859e:	48 c1 f9 03          	sar    rcx,0x3
   285a2:	48 ba ab aa aa aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaab
   285ac:	48 0f af d1          	imul   rdx,rcx
   285b0:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   285b4:	48 89 ce             	mov    rsi,rcx
   285b7:	48 89 c7             	mov    rdi,rax
   285ba:	e8 eb f4 ff ff       	call   27aaa <std::_Vector_base<Tex, std::allocator<Tex> >::_M_deallocate(Tex*, unsigned long)>
   285bf:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   285c3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   285c7:	48 89 10             	mov    QWORD PTR [rax],rdx
   285ca:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   285ce:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   285d2:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   285d6:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   285da:	48 89 d0             	mov    rax,rdx
   285dd:	48 01 c0             	add    rax,rax
   285e0:	48 01 d0             	add    rax,rdx
   285e3:	48 c1 e0 03          	shl    rax,0x3
   285e7:	48 89 c2             	mov    rdx,rax
   285ea:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   285ee:	48 01 c2             	add    rdx,rax
   285f1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   285f5:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   285f9:	90                   	nop
   285fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   285fe:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   28607:	74 05                	je     2860e <void std::vector<Tex, std::allocator<Tex> >::_M_realloc_insert<Tex const&>(__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >, Tex const&)+0x1d4>
   28609:	e8 d2 be fd ff       	call   44e0 <__stack_chk_fail@plt>
   2860e:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   28612:	c9                   	leave  
   28613:	c3                   	ret    

0000000000028614 <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>:
   28614:	55                   	push   rbp
   28615:	48 89 e5             	mov    rbp,rsp
   28618:	53                   	push   rbx
   28619:	48 83 ec 38          	sub    rsp,0x38
   2861d:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   28621:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   28625:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2862e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   28632:	31 c0                	xor    eax,eax
   28634:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28638:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   2863c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2863f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   28643:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   28647:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
   2864b:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   2864f:	48 89 d6             	mov    rsi,rdx
   28652:	48 89 c7             	mov    rdi,rax
   28655:	e8 ea 19 00 00       	call   2a044 <glm::vec<4, float, (glm::qualifier)0>& glm::vec<4, float, (glm::qualifier)0>::operator*=<float>(glm::vec<4, float, (glm::qualifier)0> const&)>
   2865a:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   2865e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28661:	48 89 c1             	mov    rcx,rax
   28664:	48 89 d3             	mov    rbx,rdx
   28667:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2866b:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   28674:	74 05                	je     2867b <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)+0x67>
   28676:	e8 65 be fd ff       	call   44e0 <__stack_chk_fail@plt>
   2867b:	66 48 0f 6e c1       	movq   xmm0,rcx
   28680:	66 48 0f 6e ca       	movq   xmm1,rdx
   28685:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   28689:	c9                   	leave  
   2868a:	c3                   	ret    

000000000002868b <glm::detail::compute_dot<glm::vec<4, float, (glm::qualifier)0>, float, false>::call(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>:
   2868b:	55                   	push   rbp
   2868c:	48 89 e5             	mov    rbp,rsp
   2868f:	48 83 ec 20          	sub    rsp,0x20
   28693:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   28697:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2869b:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2869f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   286a3:	48 89 d6             	mov    rsi,rdx
   286a6:	48 89 c7             	mov    rdi,rax
   286a9:	e8 66 ff ff ff       	call   28614 <glm::vec<4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   286ae:	66 48 0f 7e c0       	movq   rax,xmm0
   286b3:	66 0f 6f c1          	movdqa xmm0,xmm1
   286b7:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   286bb:	66 0f d6 45 f8       	movq   QWORD PTR [rbp-0x8],xmm0
   286c0:	f3 0f 10 4d f0       	movss  xmm1,DWORD PTR [rbp-0x10]
   286c5:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   286ca:	f3 0f 58 c8          	addss  xmm1,xmm0
   286ce:	f3 0f 10 55 f8       	movss  xmm2,DWORD PTR [rbp-0x8]
   286d3:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   286d8:	f3 0f 58 c2          	addss  xmm0,xmm2
   286dc:	f3 0f 58 c1          	addss  xmm0,xmm1
   286e0:	c9                   	leave  
   286e1:	c3                   	ret    

00000000000286e2 <std::allocator<Mesh>::allocator()>:
   286e2:	55                   	push   rbp
   286e3:	48 89 e5             	mov    rbp,rsp
   286e6:	48 83 ec 10          	sub    rsp,0x10
   286ea:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   286ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   286f2:	48 89 c7             	mov    rdi,rax
   286f5:	e8 be 19 00 00       	call   2a0b8 <__gnu_cxx::new_allocator<Mesh>::new_allocator()>
   286fa:	90                   	nop
   286fb:	c9                   	leave  
   286fc:	c3                   	ret    
   286fd:	90                   	nop

00000000000286fe <std::_Vector_base<Mesh, std::allocator<Mesh> >::_Vector_impl_data::_Vector_impl_data()>:
   286fe:	55                   	push   rbp
   286ff:	48 89 e5             	mov    rbp,rsp
   28702:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28706:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2870a:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   28711:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28715:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   2871d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28721:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   28729:	90                   	nop
   2872a:	5d                   	pop    rbp
   2872b:	c3                   	ret    

000000000002872c <__gnu_cxx::new_allocator<Mesh>::~new_allocator()>:
   2872c:	55                   	push   rbp
   2872d:	48 89 e5             	mov    rbp,rsp
   28730:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28734:	90                   	nop
   28735:	5d                   	pop    rbp
   28736:	c3                   	ret    
   28737:	90                   	nop

0000000000028738 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_deallocate(Mesh*, unsigned long)>:
   28738:	55                   	push   rbp
   28739:	48 89 e5             	mov    rbp,rsp
   2873c:	48 83 ec 20          	sub    rsp,0x20
   28740:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28744:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28748:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2874c:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   28751:	74 17                	je     2876a <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_deallocate(Mesh*, unsigned long)+0x32>
   28753:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28757:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2875b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2875f:	48 89 ce             	mov    rsi,rcx
   28762:	48 89 c7             	mov    rdi,rax
   28765:	e8 59 19 00 00       	call   2a0c3 <std::allocator_traits<std::allocator<Mesh> >::deallocate(std::allocator<Mesh>&, Mesh*, unsigned long)>
   2876a:	90                   	nop
   2876b:	c9                   	leave  
   2876c:	c3                   	ret    
   2876d:	90                   	nop

000000000002876e <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_get_Tp_allocator()>:
   2876e:	55                   	push   rbp
   2876f:	48 89 e5             	mov    rbp,rsp
   28772:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28776:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2877a:	5d                   	pop    rbp
   2877b:	c3                   	ret    

000000000002877c <void std::_Destroy<Mesh*, Mesh>(Mesh*, Mesh*, std::allocator<Mesh>&)>:
   2877c:	55                   	push   rbp
   2877d:	48 89 e5             	mov    rbp,rsp
   28780:	48 83 ec 20          	sub    rsp,0x20
   28784:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28788:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2878c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   28790:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   28794:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28798:	48 89 d6             	mov    rsi,rdx
   2879b:	48 89 c7             	mov    rdi,rax
   2879e:	e8 4e 19 00 00       	call   2a0f1 <void std::_Destroy<Mesh*>(Mesh*, Mesh*)>
   287a3:	90                   	nop
   287a4:	c9                   	leave  
   287a5:	c3                   	ret    

00000000000287a6 <std::allocator<unsigned int>::allocator()>:
   287a6:	55                   	push   rbp
   287a7:	48 89 e5             	mov    rbp,rsp
   287aa:	48 83 ec 10          	sub    rsp,0x10
   287ae:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   287b2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   287b6:	48 89 c7             	mov    rdi,rax
   287b9:	e8 5a 19 00 00       	call   2a118 <__gnu_cxx::new_allocator<unsigned int>::new_allocator()>
   287be:	90                   	nop
   287bf:	c9                   	leave  
   287c0:	c3                   	ret    
   287c1:	90                   	nop

00000000000287c2 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_Vector_impl_data()>:
   287c2:	55                   	push   rbp
   287c3:	48 89 e5             	mov    rbp,rsp
   287c6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   287ca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   287ce:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   287d5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   287d9:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   287e1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   287e5:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   287ed:	90                   	nop
   287ee:	5d                   	pop    rbp
   287ef:	c3                   	ret    

00000000000287f0 <__gnu_cxx::new_allocator<unsigned int>::~new_allocator()>:
   287f0:	55                   	push   rbp
   287f1:	48 89 e5             	mov    rbp,rsp
   287f4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   287f8:	90                   	nop
   287f9:	5d                   	pop    rbp
   287fa:	c3                   	ret    
   287fb:	90                   	nop

00000000000287fc <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)>:
   287fc:	55                   	push   rbp
   287fd:	48 89 e5             	mov    rbp,rsp
   28800:	48 83 ec 20          	sub    rsp,0x20
   28804:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28808:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2880c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   28810:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   28815:	74 17                	je     2882e <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)+0x32>
   28817:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2881b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2881f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   28823:	48 89 ce             	mov    rsi,rcx
   28826:	48 89 c7             	mov    rdi,rax
   28829:	e8 f5 18 00 00       	call   2a123 <std::allocator_traits<std::allocator<unsigned int> >::deallocate(std::allocator<unsigned int>&, unsigned int*, unsigned long)>
   2882e:	90                   	nop
   2882f:	c9                   	leave  
   28830:	c3                   	ret    
   28831:	90                   	nop

0000000000028832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>:
   28832:	55                   	push   rbp
   28833:	48 89 e5             	mov    rbp,rsp
   28836:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2883a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2883e:	5d                   	pop    rbp
   2883f:	c3                   	ret    

0000000000028840 <void std::_Destroy<unsigned int*, unsigned int>(unsigned int*, unsigned int*, std::allocator<unsigned int>&)>:
   28840:	55                   	push   rbp
   28841:	48 89 e5             	mov    rbp,rsp
   28844:	48 83 ec 20          	sub    rsp,0x20
   28848:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2884c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28850:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   28854:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   28858:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2885c:	48 89 d6             	mov    rsi,rdx
   2885f:	48 89 c7             	mov    rdi,rax
   28862:	e8 ea 18 00 00       	call   2a151 <void std::_Destroy<unsigned int*>(unsigned int*, unsigned int*)>
   28867:	90                   	nop
   28868:	c9                   	leave  
   28869:	c3                   	ret    

000000000002886a <std::allocator<Transform>::allocator()>:
   2886a:	55                   	push   rbp
   2886b:	48 89 e5             	mov    rbp,rsp
   2886e:	48 83 ec 10          	sub    rsp,0x10
   28872:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28876:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2887a:	48 89 c7             	mov    rdi,rax
   2887d:	e8 f6 18 00 00       	call   2a178 <__gnu_cxx::new_allocator<Transform>::new_allocator()>
   28882:	90                   	nop
   28883:	c9                   	leave  
   28884:	c3                   	ret    
   28885:	90                   	nop

0000000000028886 <std::_Vector_base<Transform, std::allocator<Transform> >::_Vector_impl_data::_Vector_impl_data()>:
   28886:	55                   	push   rbp
   28887:	48 89 e5             	mov    rbp,rsp
   2888a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2888e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28892:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   28899:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2889d:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   288a5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   288a9:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   288b1:	90                   	nop
   288b2:	5d                   	pop    rbp
   288b3:	c3                   	ret    

00000000000288b4 <__gnu_cxx::new_allocator<Transform>::~new_allocator()>:
   288b4:	55                   	push   rbp
   288b5:	48 89 e5             	mov    rbp,rsp
   288b8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   288bc:	90                   	nop
   288bd:	5d                   	pop    rbp
   288be:	c3                   	ret    
   288bf:	90                   	nop

00000000000288c0 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_deallocate(Transform*, unsigned long)>:
   288c0:	55                   	push   rbp
   288c1:	48 89 e5             	mov    rbp,rsp
   288c4:	48 83 ec 20          	sub    rsp,0x20
   288c8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   288cc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   288d0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   288d4:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   288d9:	74 17                	je     288f2 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_deallocate(Transform*, unsigned long)+0x32>
   288db:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   288df:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   288e3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   288e7:	48 89 ce             	mov    rsi,rcx
   288ea:	48 89 c7             	mov    rdi,rax
   288ed:	e8 91 18 00 00       	call   2a183 <std::allocator_traits<std::allocator<Transform> >::deallocate(std::allocator<Transform>&, Transform*, unsigned long)>
   288f2:	90                   	nop
   288f3:	c9                   	leave  
   288f4:	c3                   	ret    
   288f5:	90                   	nop

00000000000288f6 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_get_Tp_allocator()>:
   288f6:	55                   	push   rbp
   288f7:	48 89 e5             	mov    rbp,rsp
   288fa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   288fe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28902:	5d                   	pop    rbp
   28903:	c3                   	ret    

0000000000028904 <void std::_Destroy<Transform*, Transform>(Transform*, Transform*, std::allocator<Transform>&)>:
   28904:	55                   	push   rbp
   28905:	48 89 e5             	mov    rbp,rsp
   28908:	48 83 ec 20          	sub    rsp,0x20
   2890c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28910:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28914:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   28918:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2891c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28920:	48 89 d6             	mov    rsi,rdx
   28923:	48 89 c7             	mov    rdi,rax
   28926:	e8 86 18 00 00       	call   2a1b1 <void std::_Destroy<Transform*>(Transform*, Transform*)>
   2892b:	90                   	nop
   2892c:	c9                   	leave  
   2892d:	c3                   	ret    

000000000002892e <std::allocator<AABB>::allocator()>:
   2892e:	55                   	push   rbp
   2892f:	48 89 e5             	mov    rbp,rsp
   28932:	48 83 ec 10          	sub    rsp,0x10
   28936:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2893a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2893e:	48 89 c7             	mov    rdi,rax
   28941:	e8 92 18 00 00       	call   2a1d8 <__gnu_cxx::new_allocator<AABB>::new_allocator()>
   28946:	90                   	nop
   28947:	c9                   	leave  
   28948:	c3                   	ret    
   28949:	90                   	nop

000000000002894a <std::_Vector_base<AABB, std::allocator<AABB> >::_Vector_impl_data::_Vector_impl_data()>:
   2894a:	55                   	push   rbp
   2894b:	48 89 e5             	mov    rbp,rsp
   2894e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28952:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28956:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   2895d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28961:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   28969:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2896d:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   28975:	90                   	nop
   28976:	5d                   	pop    rbp
   28977:	c3                   	ret    

0000000000028978 <__gnu_cxx::new_allocator<AABB>::~new_allocator()>:
   28978:	55                   	push   rbp
   28979:	48 89 e5             	mov    rbp,rsp
   2897c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28980:	90                   	nop
   28981:	5d                   	pop    rbp
   28982:	c3                   	ret    
   28983:	90                   	nop

0000000000028984 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_deallocate(AABB*, unsigned long)>:
   28984:	55                   	push   rbp
   28985:	48 89 e5             	mov    rbp,rsp
   28988:	48 83 ec 20          	sub    rsp,0x20
   2898c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28990:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28994:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   28998:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   2899d:	74 17                	je     289b6 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_deallocate(AABB*, unsigned long)+0x32>
   2899f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   289a3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   289a7:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   289ab:	48 89 ce             	mov    rsi,rcx
   289ae:	48 89 c7             	mov    rdi,rax
   289b1:	e8 2d 18 00 00       	call   2a1e3 <std::allocator_traits<std::allocator<AABB> >::deallocate(std::allocator<AABB>&, AABB*, unsigned long)>
   289b6:	90                   	nop
   289b7:	c9                   	leave  
   289b8:	c3                   	ret    
   289b9:	90                   	nop

00000000000289ba <std::_Vector_base<AABB, std::allocator<AABB> >::_M_get_Tp_allocator()>:
   289ba:	55                   	push   rbp
   289bb:	48 89 e5             	mov    rbp,rsp
   289be:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   289c2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   289c6:	5d                   	pop    rbp
   289c7:	c3                   	ret    

00000000000289c8 <void std::_Destroy<AABB*, AABB>(AABB*, AABB*, std::allocator<AABB>&)>:
   289c8:	55                   	push   rbp
   289c9:	48 89 e5             	mov    rbp,rsp
   289cc:	48 83 ec 20          	sub    rsp,0x20
   289d0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   289d4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   289d8:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   289dc:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   289e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   289e4:	48 89 d6             	mov    rsi,rdx
   289e7:	48 89 c7             	mov    rdi,rax
   289ea:	e8 22 18 00 00       	call   2a211 <void std::_Destroy<AABB*>(AABB*, AABB*)>
   289ef:	90                   	nop
   289f0:	c9                   	leave  
   289f1:	c3                   	ret    

00000000000289f2 <v4<float>::operator*(float)>:
   289f2:	55                   	push   rbp
   289f3:	48 89 e5             	mov    rbp,rsp
   289f6:	53                   	push   rbx
   289f7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   289fb:	f3 0f 11 45 e4       	movss  DWORD PTR [rbp-0x1c],xmm0
   28a00:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   28a04:	f3 0f 10 01          	movss  xmm0,DWORD PTR [rcx]
   28a08:	f3 0f 59 45 e4       	mulss  xmm0,DWORD PTR [rbp-0x1c]
   28a0d:	66 0f 7e c6          	movd   esi,xmm0
   28a11:	48 89 c7             	mov    rdi,rax
   28a14:	48 b9 00 00 00 00 ff ff ff ff 	movabs rcx,0xffffffff00000000
   28a1e:	48 21 f9             	and    rcx,rdi
   28a21:	48 09 f1             	or     rcx,rsi
   28a24:	48 89 c8             	mov    rax,rcx
   28a27:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   28a2b:	f3 0f 10 41 04       	movss  xmm0,DWORD PTR [rcx+0x4]
   28a30:	f3 0f 59 45 e4       	mulss  xmm0,DWORD PTR [rbp-0x1c]
   28a35:	66 0f 7e c1          	movd   ecx,xmm0
   28a39:	48 c1 e1 20          	shl    rcx,0x20
   28a3d:	48 89 c6             	mov    rsi,rax
   28a40:	89 f6                	mov    esi,esi
   28a42:	48 09 f1             	or     rcx,rsi
   28a45:	48 89 c8             	mov    rax,rcx
   28a48:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   28a4c:	f3 0f 10 41 08       	movss  xmm0,DWORD PTR [rcx+0x8]
   28a51:	f3 0f 59 45 e4       	mulss  xmm0,DWORD PTR [rbp-0x1c]
   28a56:	66 0f 7e c6          	movd   esi,xmm0
   28a5a:	48 89 d7             	mov    rdi,rdx
   28a5d:	48 b9 00 00 00 00 ff ff ff ff 	movabs rcx,0xffffffff00000000
   28a67:	48 21 f9             	and    rcx,rdi
   28a6a:	48 09 f1             	or     rcx,rsi
   28a6d:	48 89 ca             	mov    rdx,rcx
   28a70:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   28a74:	f3 0f 10 41 0c       	movss  xmm0,DWORD PTR [rcx+0xc]
   28a79:	f3 0f 59 45 e4       	mulss  xmm0,DWORD PTR [rbp-0x1c]
   28a7e:	66 0f 7e c1          	movd   ecx,xmm0
   28a82:	48 c1 e1 20          	shl    rcx,0x20
   28a86:	48 89 d6             	mov    rsi,rdx
   28a89:	89 f6                	mov    esi,esi
   28a8b:	48 09 f1             	or     rcx,rsi
   28a8e:	48 89 ca             	mov    rdx,rcx
   28a91:	48 89 c1             	mov    rcx,rax
   28a94:	48 89 d3             	mov    rbx,rdx
   28a97:	48 89 d0             	mov    rax,rdx
   28a9a:	66 48 0f 6e c1       	movq   xmm0,rcx
   28a9f:	66 48 0f 6e c8       	movq   xmm1,rax
   28aa4:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   28aa8:	c9                   	leave  
   28aa9:	c3                   	ret    

0000000000028aaa <v4<float>::operator+(v4<float>)>:
   28aaa:	55                   	push   rbp
   28aab:	48 89 e5             	mov    rbp,rsp
   28aae:	53                   	push   rbx
   28aaf:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   28ab3:	66 48 0f 7e c1       	movq   rcx,xmm0
   28ab8:	66 0f 6f c1          	movdqa xmm0,xmm1
   28abc:	66 48 0f 7e c3       	movq   rbx,xmm0
   28ac1:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   28ac5:	48 89 5d d8          	mov    QWORD PTR [rbp-0x28],rbx
   28ac9:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   28acd:	f3 0f 10 09          	movss  xmm1,DWORD PTR [rcx]
   28ad1:	f3 0f 10 45 d0       	movss  xmm0,DWORD PTR [rbp-0x30]
   28ad6:	f3 0f 58 c1          	addss  xmm0,xmm1
   28ada:	66 0f 7e c6          	movd   esi,xmm0
   28ade:	48 89 c7             	mov    rdi,rax
   28ae1:	48 b9 00 00 00 00 ff ff ff ff 	movabs rcx,0xffffffff00000000
   28aeb:	48 21 f9             	and    rcx,rdi
   28aee:	48 09 f1             	or     rcx,rsi
   28af1:	48 89 c8             	mov    rax,rcx
   28af4:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   28af8:	f3 0f 10 49 04       	movss  xmm1,DWORD PTR [rcx+0x4]
   28afd:	f3 0f 10 45 d4       	movss  xmm0,DWORD PTR [rbp-0x2c]
   28b02:	f3 0f 58 c1          	addss  xmm0,xmm1
   28b06:	66 0f 7e c1          	movd   ecx,xmm0
   28b0a:	48 c1 e1 20          	shl    rcx,0x20
   28b0e:	48 89 c6             	mov    rsi,rax
   28b11:	89 f6                	mov    esi,esi
   28b13:	48 09 f1             	or     rcx,rsi
   28b16:	48 89 c8             	mov    rax,rcx
   28b19:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   28b1d:	f3 0f 10 49 08       	movss  xmm1,DWORD PTR [rcx+0x8]
   28b22:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   28b27:	f3 0f 58 c1          	addss  xmm0,xmm1
   28b2b:	66 0f 7e c6          	movd   esi,xmm0
   28b2f:	48 89 d7             	mov    rdi,rdx
   28b32:	48 b9 00 00 00 00 ff ff ff ff 	movabs rcx,0xffffffff00000000
   28b3c:	48 21 f9             	and    rcx,rdi
   28b3f:	48 09 f1             	or     rcx,rsi
   28b42:	48 89 ca             	mov    rdx,rcx
   28b45:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   28b49:	f3 0f 10 49 0c       	movss  xmm1,DWORD PTR [rcx+0xc]
   28b4e:	f3 0f 10 45 dc       	movss  xmm0,DWORD PTR [rbp-0x24]
   28b53:	f3 0f 58 c1          	addss  xmm0,xmm1
   28b57:	66 0f 7e c1          	movd   ecx,xmm0
   28b5b:	48 c1 e1 20          	shl    rcx,0x20
   28b5f:	48 89 d6             	mov    rsi,rdx
   28b62:	89 f6                	mov    esi,esi
   28b64:	48 09 f1             	or     rcx,rsi
   28b67:	48 89 ca             	mov    rdx,rcx
   28b6a:	48 89 c1             	mov    rcx,rax
   28b6d:	48 89 d3             	mov    rbx,rdx
   28b70:	48 89 d0             	mov    rax,rdx
   28b73:	66 48 0f 6e c1       	movq   xmm0,rcx
   28b78:	66 48 0f 6e c8       	movq   xmm1,rax
   28b7d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   28b81:	c9                   	leave  
   28b82:	c3                   	ret    
   28b83:	90                   	nop

0000000000028b84 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type)>:
   28b84:	55                   	push   rbp
   28b85:	48 89 e5             	mov    rbp,rsp
   28b88:	48 83 ec 30          	sub    rsp,0x30
   28b8c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   28b90:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   28b94:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   28b98:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28ba1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   28ba5:	31 c0                	xor    eax,eax
   28ba7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   28bab:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   28baf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   28bb3:	48 89 ce             	mov    rsi,rcx
   28bb6:	48 89 c7             	mov    rdi,rax
   28bb9:	e8 aa 16 00 00       	call   2a268 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
   28bbe:	90                   	nop
   28bbf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28bc3:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   28bcc:	74 05                	je     28bd3 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type)+0x4f>
   28bce:	e8 0d b9 fd ff       	call   44e0 <__stack_chk_fail@plt>
   28bd3:	c9                   	leave  
   28bd4:	c3                   	ret    

0000000000028bd5 <std::tuple_element<0ul, std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> >::type& std::get<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>:
   28bd5:	55                   	push   rbp
   28bd6:	48 89 e5             	mov    rbp,rsp
   28bd9:	48 83 ec 10          	sub    rsp,0x10
   28bdd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28be1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28be5:	48 89 c7             	mov    rdi,rax
   28be8:	e8 b4 17 00 00       	call   2a3a1 <std::filesystem::__cxx11::path::_List::_Impl*& std::__get_helper<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>
   28bed:	c9                   	leave  
   28bee:	c3                   	ret    

0000000000028bef <std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head(std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>:
   28bef:	55                   	push   rbp
   28bf0:	48 89 e5             	mov    rbp,rsp
   28bf3:	48 83 ec 10          	sub    rsp,0x10
   28bf7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28bfb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28bff:	48 89 c7             	mov    rdi,rax
   28c02:	e8 b4 17 00 00       	call   2a3bb <std::_Head_base<0ul, std::filesystem::__cxx11::path::_List::_Impl*, false>::_M_head(std::_Head_base<0ul, std::filesystem::__cxx11::path::_List::_Impl*, false>&)>
   28c07:	c9                   	leave  
   28c08:	c3                   	ret    

0000000000028c09 <std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction(std::allocator<char> const&)>:
   28c09:	55                   	push   rbp
   28c0a:	48 89 e5             	mov    rbp,rsp
   28c0d:	48 83 ec 10          	sub    rsp,0x10
   28c11:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28c15:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28c19:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   28c1d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28c21:	48 89 d6             	mov    rsi,rdx
   28c24:	48 89 c7             	mov    rdi,rax
   28c27:	e8 e4 b5 fd ff       	call   4210 <std::allocator<char>::allocator(std::allocator<char> const&)@plt>
   28c2c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28c30:	c9                   	leave  
   28c31:	c3                   	ret    

0000000000028c32 <std::tuple_element<1ul, std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter> >::type& std::get<1ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::tuple<std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>:
   28c32:	55                   	push   rbp
   28c33:	48 89 e5             	mov    rbp,rsp
   28c36:	48 83 ec 10          	sub    rsp,0x10
   28c3a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28c3e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28c42:	48 89 c7             	mov    rdi,rax
   28c45:	e8 99 17 00 00       	call   2a3e3 <std::filesystem::__cxx11::path::_List::_Impl_deleter& std::__get_helper<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>
   28c4a:	c9                   	leave  
   28c4b:	c3                   	ret    

0000000000028c4c <glm::detail::compute_vec4_mul<float, (glm::qualifier)0, false>::call(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>:
   28c4c:	55                   	push   rbp
   28c4d:	48 89 e5             	mov    rbp,rsp
   28c50:	53                   	push   rbx
   28c51:	48 83 ec 38          	sub    rsp,0x38
   28c55:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   28c59:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   28c5d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28c66:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   28c6a:	31 c0                	xor    eax,eax
   28c6c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28c70:	f3 0f 10 48 0c       	movss  xmm1,DWORD PTR [rax+0xc]
   28c75:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28c79:	f3 0f 10 40 0c       	movss  xmm0,DWORD PTR [rax+0xc]
   28c7e:	0f 28 d9             	movaps xmm3,xmm1
   28c81:	f3 0f 59 d8          	mulss  xmm3,xmm0
   28c85:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28c89:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   28c8e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28c92:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   28c97:	0f 28 d1             	movaps xmm2,xmm1
   28c9a:	f3 0f 59 d0          	mulss  xmm2,xmm0
   28c9e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28ca2:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   28ca7:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28cab:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   28cb0:	0f 28 e1             	movaps xmm4,xmm1
   28cb3:	f3 0f 59 e0          	mulss  xmm4,xmm0
   28cb7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   28cbb:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   28cbf:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28cc3:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   28cc7:	f3 0f 59 c8          	mulss  xmm1,xmm0
   28ccb:	66 0f 7e ca          	movd   edx,xmm1
   28ccf:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   28cd3:	0f 28 cc             	movaps xmm1,xmm4
   28cd6:	66 0f 6e c2          	movd   xmm0,edx
   28cda:	48 89 c7             	mov    rdi,rax
   28cdd:	e8 de de ff ff       	call   26bc0 <glm::vec<4, float, (glm::qualifier)0>::vec(float, float, float, float)>
   28ce2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   28ce6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   28cea:	48 89 c1             	mov    rcx,rax
   28ced:	48 89 d3             	mov    rbx,rdx
   28cf0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   28cf4:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   28cfd:	74 05                	je     28d04 <glm::detail::compute_vec4_mul<float, (glm::qualifier)0, false>::call(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)+0xb8>
   28cff:	e8 dc b7 fd ff       	call   44e0 <__stack_chk_fail@plt>
   28d04:	66 48 0f 6e c1       	movq   xmm0,rcx
   28d09:	66 48 0f 6e ca       	movq   xmm1,rdx
   28d0e:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   28d12:	c9                   	leave  
   28d13:	c3                   	ret    

0000000000028d14 <float glm::dot<2, float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, glm::vec<2, float, (glm::qualifier)0> const&)>:
   28d14:	55                   	push   rbp
   28d15:	48 89 e5             	mov    rbp,rsp
   28d18:	48 83 ec 10          	sub    rsp,0x10
   28d1c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28d20:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28d24:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   28d28:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28d2c:	48 89 d6             	mov    rsi,rdx
   28d2f:	48 89 c7             	mov    rdi,rax
   28d32:	e8 4b 17 00 00       	call   2a482 <glm::detail::compute_dot<glm::vec<2, float, (glm::qualifier)0>, float, false>::call(glm::vec<2, float, (glm::qualifier)0> const&, glm::vec<2, float, (glm::qualifier)0> const&)>
   28d37:	c9                   	leave  
   28d38:	c3                   	ret    

0000000000028d39 <float glm::inversesqrt<float>(float)>:
   28d39:	55                   	push   rbp
   28d3a:	48 89 e5             	mov    rbp,rsp
   28d3d:	48 83 ec 10          	sub    rsp,0x10
   28d41:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   28d46:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   28d49:	66 0f 6e c0          	movd   xmm0,eax
   28d4d:	e8 1e c6 ff ff       	call   25370 <std::sqrt(float)>
   28d52:	f3 0f 10 0d ea 3c 01 00 	movss  xmm1,DWORD PTR [rip+0x13cea]        # 3ca44 <NANO_SEC+0x177c>
   28d5a:	f3 0f 5e c8          	divss  xmm1,xmm0
   28d5e:	0f 28 c1             	movaps xmm0,xmm1
   28d61:	c9                   	leave  
   28d62:	c3                   	ret    
   28d63:	90                   	nop

0000000000028d64 <__gnu_cxx::new_allocator<Tex>::new_allocator()>:
   28d64:	55                   	push   rbp
   28d65:	48 89 e5             	mov    rbp,rsp
   28d68:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28d6c:	90                   	nop
   28d6d:	5d                   	pop    rbp
   28d6e:	c3                   	ret    

0000000000028d6f <std::allocator_traits<std::allocator<Tex> >::deallocate(std::allocator<Tex>&, Tex*, unsigned long)>:
   28d6f:	55                   	push   rbp
   28d70:	48 89 e5             	mov    rbp,rsp
   28d73:	48 83 ec 20          	sub    rsp,0x20
   28d77:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28d7b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28d7f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   28d83:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   28d87:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   28d8b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28d8f:	48 89 ce             	mov    rsi,rcx
   28d92:	48 89 c7             	mov    rdi,rax
   28d95:	e8 24 17 00 00       	call   2a4be <__gnu_cxx::new_allocator<Tex>::deallocate(Tex*, unsigned long)>
   28d9a:	90                   	nop
   28d9b:	c9                   	leave  
   28d9c:	c3                   	ret    

0000000000028d9d <void std::_Destroy<Tex*>(Tex*, Tex*)>:
   28d9d:	55                   	push   rbp
   28d9e:	48 89 e5             	mov    rbp,rsp
   28da1:	48 83 ec 10          	sub    rsp,0x10
   28da5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28da9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28dad:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   28db1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28db5:	48 89 d6             	mov    rsi,rdx
   28db8:	48 89 c7             	mov    rdi,rax
   28dbb:	e8 37 17 00 00       	call   2a4f7 <void std::_Destroy_aux<true>::__destroy<Tex*>(Tex*, Tex*)>
   28dc0:	90                   	nop
   28dc1:	c9                   	leave  
   28dc2:	c3                   	ret    
   28dc3:	90                   	nop

0000000000028dc4 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::new_allocator()>:
   28dc4:	55                   	push   rbp
   28dc5:	48 89 e5             	mov    rbp,rsp
   28dc8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28dcc:	90                   	nop
   28dcd:	5d                   	pop    rbp
   28dce:	c3                   	ret    

0000000000028dcf <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::deallocate(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>:
   28dcf:	55                   	push   rbp
   28dd0:	48 89 e5             	mov    rbp,rsp
   28dd3:	48 83 ec 20          	sub    rsp,0x20
   28dd7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28ddb:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28ddf:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   28de3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   28de7:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   28deb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28def:	48 89 ce             	mov    rsi,rcx
   28df2:	48 89 c7             	mov    rdi,rax
   28df5:	e8 0c 17 00 00       	call   2a506 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
   28dfa:	90                   	nop
   28dfb:	c9                   	leave  
   28dfc:	c3                   	ret    

0000000000028dfd <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
   28dfd:	55                   	push   rbp
   28dfe:	48 89 e5             	mov    rbp,rsp
   28e01:	48 83 ec 10          	sub    rsp,0x10
   28e05:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28e09:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28e0d:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   28e11:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28e15:	48 89 d6             	mov    rsi,rdx
   28e18:	48 89 c7             	mov    rdi,rax
   28e1b:	e8 16 17 00 00       	call   2a536 <void std::_Destroy_aux<false>::__destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   28e20:	90                   	nop
   28e21:	c9                   	leave  
   28e22:	c3                   	ret    

0000000000028e23 <AABB&& std::forward<AABB>(std::remove_reference<AABB>::type&)>:
   28e23:	55                   	push   rbp
   28e24:	48 89 e5             	mov    rbp,rsp
   28e27:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28e2b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28e2f:	5d                   	pop    rbp
   28e30:	c3                   	ret    

0000000000028e31 <void std::allocator_traits<std::allocator<AABB> >::construct<AABB, AABB>(std::allocator<AABB>&, AABB*, AABB&&)>:
   28e31:	55                   	push   rbp
   28e32:	48 89 e5             	mov    rbp,rsp
   28e35:	48 83 ec 20          	sub    rsp,0x20
   28e39:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   28e3d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   28e41:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   28e45:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   28e49:	48 89 c7             	mov    rdi,rax
   28e4c:	e8 d2 ff ff ff       	call   28e23 <AABB&& std::forward<AABB>(std::remove_reference<AABB>::type&)>
   28e51:	48 89 c2             	mov    rdx,rax
   28e54:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   28e58:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   28e5c:	48 89 ce             	mov    rsi,rcx
   28e5f:	48 89 c7             	mov    rdi,rax
   28e62:	e8 09 17 00 00       	call   2a570 <void __gnu_cxx::new_allocator<AABB>::construct<AABB, AABB>(AABB*, AABB&&)>
   28e67:	90                   	nop
   28e68:	c9                   	leave  
   28e69:	c3                   	ret    

0000000000028e6a <std::vector<AABB, std::allocator<AABB> >::end()>:
   28e6a:	55                   	push   rbp
   28e6b:	48 89 e5             	mov    rbp,rsp
   28e6e:	48 83 ec 20          	sub    rsp,0x20
   28e72:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   28e76:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28e7f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   28e83:	31 c0                	xor    eax,eax
   28e85:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   28e89:	48 8d 50 08          	lea    rdx,[rax+0x8]
   28e8d:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   28e91:	48 89 d6             	mov    rsi,rdx
   28e94:	48 89 c7             	mov    rdi,rax
   28e97:	e8 2a 17 00 00       	call   2a5c6 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::__normal_iterator(AABB* const&)>
   28e9c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   28ea0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   28ea4:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   28ead:	74 05                	je     28eb4 <std::vector<AABB, std::allocator<AABB> >::end()+0x4a>
   28eaf:	e8 2c b6 fd ff       	call   44e0 <__stack_chk_fail@plt>
   28eb4:	c9                   	leave  
   28eb5:	c3                   	ret    

0000000000028eb6 <void std::vector<AABB, std::allocator<AABB> >::_M_realloc_insert<AABB>(__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >, AABB&&)>:
   28eb6:	55                   	push   rbp
   28eb7:	48 89 e5             	mov    rbp,rsp
   28eba:	53                   	push   rbx
   28ebb:	48 83 ec 68          	sub    rsp,0x68
   28ebf:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   28ec3:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   28ec7:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   28ecb:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   28ed4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   28ed8:	31 c0                	xor    eax,eax
   28eda:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28ede:	48 8d 15 16 3b 01 00 	lea    rdx,[rip+0x13b16]        # 3c9fb <NANO_SEC+0x1733>
   28ee5:	be 01 00 00 00       	mov    esi,0x1
   28eea:	48 89 c7             	mov    rdi,rax
   28eed:	e8 f2 16 00 00       	call   2a5e4 <std::vector<AABB, std::allocator<AABB> >::_M_check_len(unsigned long, char const*) const>
   28ef2:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   28ef6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28efa:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28efd:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   28f01:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28f05:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   28f09:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   28f0d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28f11:	48 89 c7             	mov    rdi,rax
   28f14:	e8 b7 17 00 00       	call   2a6d0 <std::vector<AABB, std::allocator<AABB> >::begin()>
   28f19:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   28f1d:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   28f21:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   28f25:	48 89 d6             	mov    rsi,rdx
   28f28:	48 89 c7             	mov    rdi,rax
   28f2b:	e8 e8 17 00 00       	call   2a718 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::difference_type __gnu_cxx::operator-<AABB*, std::vector<AABB, std::allocator<AABB> > >(__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > > const&, __gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > > const&)>
   28f30:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   28f34:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28f38:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   28f3c:	48 89 d6             	mov    rsi,rdx
   28f3f:	48 89 c7             	mov    rdi,rax
   28f42:	e8 21 18 00 00       	call   2a768 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_allocate(unsigned long)>
   28f47:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   28f4b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   28f4f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28f53:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   28f57:	48 89 c7             	mov    rdi,rax
   28f5a:	e8 c4 fe ff ff       	call   28e23 <AABB&& std::forward<AABB>(std::remove_reference<AABB>::type&)>
   28f5f:	48 89 c6             	mov    rsi,rax
   28f62:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   28f66:	48 89 d0             	mov    rax,rdx
   28f69:	48 01 c0             	add    rax,rax
   28f6c:	48 01 d0             	add    rax,rdx
   28f6f:	48 c1 e0 03          	shl    rax,0x3
   28f73:	48 89 c2             	mov    rdx,rax
   28f76:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   28f7a:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   28f7e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28f82:	48 89 f2             	mov    rdx,rsi
   28f85:	48 89 ce             	mov    rsi,rcx
   28f88:	48 89 c7             	mov    rdi,rax
   28f8b:	e8 a1 fe ff ff       	call   28e31 <void std::allocator_traits<std::allocator<AABB> >::construct<AABB, AABB>(std::allocator<AABB>&, AABB*, AABB&&)>
   28f90:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   28f98:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28f9c:	48 89 c7             	mov    rdi,rax
   28f9f:	e8 16 fa ff ff       	call   289ba <std::_Vector_base<AABB, std::allocator<AABB> >::_M_get_Tp_allocator()>
   28fa4:	48 89 c3             	mov    rbx,rax
   28fa7:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   28fab:	48 89 c7             	mov    rdi,rax
   28fae:	e8 1b 18 00 00       	call   2a7ce <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::base() const>
   28fb3:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   28fb6:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   28fba:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   28fbe:	48 89 d9             	mov    rcx,rbx
   28fc1:	48 89 c7             	mov    rdi,rax
   28fc4:	e8 d2 17 00 00       	call   2a79b <std::vector<AABB, std::allocator<AABB> >::_S_relocate(AABB*, AABB*, AABB*, std::allocator<AABB>&)>
   28fc9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   28fcd:	48 83 45 e0 18       	add    QWORD PTR [rbp-0x20],0x18
   28fd2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   28fd6:	48 89 c7             	mov    rdi,rax
   28fd9:	e8 dc f9 ff ff       	call   289ba <std::_Vector_base<AABB, std::allocator<AABB> >::_M_get_Tp_allocator()>
   28fde:	48 89 c3             	mov    rbx,rax
   28fe1:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   28fe5:	48 89 c7             	mov    rdi,rax
   28fe8:	e8 e1 17 00 00       	call   2a7ce <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::base() const>
   28fed:	48 8b 00             	mov    rax,QWORD PTR [rax]
   28ff0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   28ff4:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   28ff8:	48 89 d9             	mov    rcx,rbx
   28ffb:	48 89 c7             	mov    rdi,rax
   28ffe:	e8 98 17 00 00       	call   2a79b <std::vector<AABB, std::allocator<AABB> >::_S_relocate(AABB*, AABB*, AABB*, std::allocator<AABB>&)>
   29003:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29007:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2900b:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   2900f:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   29013:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   29017:	48 89 d1             	mov    rcx,rdx
   2901a:	48 c1 f9 03          	sar    rcx,0x3
   2901e:	48 ba ab aa aa aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaab
   29028:	48 0f af d1          	imul   rdx,rcx
   2902c:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   29030:	48 89 ce             	mov    rsi,rcx
   29033:	48 89 c7             	mov    rdi,rax
   29036:	e8 49 f9 ff ff       	call   28984 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_deallocate(AABB*, unsigned long)>
   2903b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2903f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   29043:	48 89 10             	mov    QWORD PTR [rax],rdx
   29046:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2904a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2904e:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   29052:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   29056:	48 89 d0             	mov    rax,rdx
   29059:	48 01 c0             	add    rax,rax
   2905c:	48 01 d0             	add    rax,rdx
   2905f:	48 c1 e0 03          	shl    rax,0x3
   29063:	48 89 c2             	mov    rdx,rax
   29066:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2906a:	48 01 c2             	add    rdx,rax
   2906d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29071:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   29075:	90                   	nop
   29076:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2907a:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   29083:	74 05                	je     2908a <void std::vector<AABB, std::allocator<AABB> >::_M_realloc_insert<AABB>(__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >, AABB&&)+0x1d4>
   29085:	e8 56 b4 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2908a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2908e:	c9                   	leave  
   2908f:	c3                   	ret    

0000000000029090 <std::vector<AABB, std::allocator<AABB> >::back()>:
   29090:	55                   	push   rbp
   29091:	48 89 e5             	mov    rbp,rsp
   29094:	48 83 ec 30          	sub    rsp,0x30
   29098:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2909c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   290a5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   290a9:	31 c0                	xor    eax,eax
   290ab:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   290af:	48 89 c7             	mov    rdi,rax
   290b2:	e8 b3 fd ff ff       	call   28e6a <std::vector<AABB, std::allocator<AABB> >::end()>
   290b7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   290bb:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   290bf:	be 01 00 00 00       	mov    esi,0x1
   290c4:	48 89 c7             	mov    rdi,rax
   290c7:	e8 10 17 00 00       	call   2a7dc <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::operator-(long) const>
   290cc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   290d0:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   290d4:	48 89 c7             	mov    rdi,rax
   290d7:	e8 6e 17 00 00       	call   2a84a <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::operator*() const>
   290dc:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   290e0:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   290e9:	74 05                	je     290f0 <std::vector<AABB, std::allocator<AABB> >::back()+0x60>
   290eb:	e8 f0 b3 fd ff       	call   44e0 <__stack_chk_fail@plt>
   290f0:	c9                   	leave  
   290f1:	c3                   	ret    

00000000000290f2 <Mesh&& std::forward<Mesh>(std::remove_reference<Mesh>::type&)>:
   290f2:	55                   	push   rbp
   290f3:	48 89 e5             	mov    rbp,rsp
   290f6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   290fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   290fe:	5d                   	pop    rbp
   290ff:	c3                   	ret    

0000000000029100 <void std::allocator_traits<std::allocator<Mesh> >::construct<Mesh, Mesh>(std::allocator<Mesh>&, Mesh*, Mesh&&)>:
   29100:	55                   	push   rbp
   29101:	48 89 e5             	mov    rbp,rsp
   29104:	48 83 ec 20          	sub    rsp,0x20
   29108:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2910c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29110:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   29114:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29118:	48 89 c7             	mov    rdi,rax
   2911b:	e8 d2 ff ff ff       	call   290f2 <Mesh&& std::forward<Mesh>(std::remove_reference<Mesh>::type&)>
   29120:	48 89 c2             	mov    rdx,rax
   29123:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   29127:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2912b:	48 89 ce             	mov    rsi,rcx
   2912e:	48 89 c7             	mov    rdi,rax
   29131:	e8 26 17 00 00       	call   2a85c <void __gnu_cxx::new_allocator<Mesh>::construct<Mesh, Mesh>(Mesh*, Mesh&&)>
   29136:	90                   	nop
   29137:	c9                   	leave  
   29138:	c3                   	ret    
   29139:	90                   	nop

000000000002913a <std::vector<Mesh, std::allocator<Mesh> >::end()>:
   2913a:	55                   	push   rbp
   2913b:	48 89 e5             	mov    rbp,rsp
   2913e:	48 83 ec 20          	sub    rsp,0x20
   29142:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29146:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2914f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   29153:	31 c0                	xor    eax,eax
   29155:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29159:	48 8d 50 08          	lea    rdx,[rax+0x8]
   2915d:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   29161:	48 89 d6             	mov    rsi,rdx
   29164:	48 89 c7             	mov    rdi,rax
   29167:	e8 30 17 00 00       	call   2a89c <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::__normal_iterator(Mesh* const&)>
   2916c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   29170:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   29174:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2917d:	74 05                	je     29184 <std::vector<Mesh, std::allocator<Mesh> >::end()+0x4a>
   2917f:	e8 5c b3 fd ff       	call   44e0 <__stack_chk_fail@plt>
   29184:	c9                   	leave  
   29185:	c3                   	ret    

0000000000029186 <void std::vector<Mesh, std::allocator<Mesh> >::_M_realloc_insert<Mesh>(__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >, Mesh&&)>:
   29186:	55                   	push   rbp
   29187:	48 89 e5             	mov    rbp,rsp
   2918a:	53                   	push   rbx
   2918b:	48 83 ec 68          	sub    rsp,0x68
   2918f:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   29193:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   29197:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   2919b:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   291a4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   291a8:	31 c0                	xor    eax,eax
   291aa:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   291ae:	48 8d 15 46 38 01 00 	lea    rdx,[rip+0x13846]        # 3c9fb <NANO_SEC+0x1733>
   291b5:	be 01 00 00 00       	mov    esi,0x1
   291ba:	48 89 c7             	mov    rdi,rax
   291bd:	e8 f8 16 00 00       	call   2a8ba <std::vector<Mesh, std::allocator<Mesh> >::_M_check_len(unsigned long, char const*) const>
   291c2:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   291c6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   291ca:	48 8b 00             	mov    rax,QWORD PTR [rax]
   291cd:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   291d1:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   291d5:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   291d9:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   291dd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   291e1:	48 89 c7             	mov    rdi,rax
   291e4:	e8 bd 17 00 00       	call   2a9a6 <std::vector<Mesh, std::allocator<Mesh> >::begin()>
   291e9:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   291ed:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   291f1:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   291f5:	48 89 d6             	mov    rsi,rdx
   291f8:	48 89 c7             	mov    rdi,rax
   291fb:	e8 ee 17 00 00       	call   2a9ee <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::difference_type __gnu_cxx::operator-<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >(__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > > const&, __gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > > const&)>
   29200:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   29204:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29208:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   2920c:	48 89 d6             	mov    rsi,rdx
   2920f:	48 89 c7             	mov    rdi,rax
   29212:	e8 17 18 00 00       	call   2aa2e <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_allocate(unsigned long)>
   29217:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2921b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2921f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29223:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   29227:	48 89 c7             	mov    rdi,rax
   2922a:	e8 c3 fe ff ff       	call   290f2 <Mesh&& std::forward<Mesh>(std::remove_reference<Mesh>::type&)>
   2922f:	48 89 c2             	mov    rdx,rax
   29232:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   29236:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   2923e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29242:	48 01 c1             	add    rcx,rax
   29245:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29249:	48 89 ce             	mov    rsi,rcx
   2924c:	48 89 c7             	mov    rdi,rax
   2924f:	e8 ac fe ff ff       	call   29100 <void std::allocator_traits<std::allocator<Mesh> >::construct<Mesh, Mesh>(std::allocator<Mesh>&, Mesh*, Mesh&&)>
   29254:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   2925c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29260:	48 89 c7             	mov    rdi,rax
   29263:	e8 06 f5 ff ff       	call   2876e <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_get_Tp_allocator()>
   29268:	48 89 c3             	mov    rbx,rax
   2926b:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2926f:	48 89 c7             	mov    rdi,rax
   29272:	e8 1d 18 00 00       	call   2aa94 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::base() const>
   29277:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   2927a:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   2927e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   29282:	48 89 d9             	mov    rcx,rbx
   29285:	48 89 c7             	mov    rdi,rax
   29288:	e8 d4 17 00 00       	call   2aa61 <std::vector<Mesh, std::allocator<Mesh> >::_S_relocate(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)>
   2928d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29291:	48 83 45 e0 04       	add    QWORD PTR [rbp-0x20],0x4
   29296:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2929a:	48 89 c7             	mov    rdi,rax
   2929d:	e8 cc f4 ff ff       	call   2876e <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_get_Tp_allocator()>
   292a2:	48 89 c3             	mov    rbx,rax
   292a5:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   292a9:	48 89 c7             	mov    rdi,rax
   292ac:	e8 e3 17 00 00       	call   2aa94 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::base() const>
   292b1:	48 8b 00             	mov    rax,QWORD PTR [rax]
   292b4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   292b8:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   292bc:	48 89 d9             	mov    rcx,rbx
   292bf:	48 89 c7             	mov    rdi,rax
   292c2:	e8 9a 17 00 00       	call   2aa61 <std::vector<Mesh, std::allocator<Mesh> >::_S_relocate(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)>
   292c7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   292cb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   292cf:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   292d3:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   292d7:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   292db:	48 c1 fa 02          	sar    rdx,0x2
   292df:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   292e3:	48 89 ce             	mov    rsi,rcx
   292e6:	48 89 c7             	mov    rdi,rax
   292e9:	e8 4a f4 ff ff       	call   28738 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_deallocate(Mesh*, unsigned long)>
   292ee:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   292f2:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   292f6:	48 89 10             	mov    QWORD PTR [rax],rdx
   292f9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   292fd:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   29301:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   29305:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   29309:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   29311:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29315:	48 01 c2             	add    rdx,rax
   29318:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2931c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   29320:	90                   	nop
   29321:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29325:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2932e:	74 05                	je     29335 <void std::vector<Mesh, std::allocator<Mesh> >::_M_realloc_insert<Mesh>(__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >, Mesh&&)+0x1af>
   29330:	e8 ab b1 fd ff       	call   44e0 <__stack_chk_fail@plt>
   29335:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29339:	c9                   	leave  
   2933a:	c3                   	ret    
   2933b:	90                   	nop

000000000002933c <std::vector<Mesh, std::allocator<Mesh> >::back()>:
   2933c:	55                   	push   rbp
   2933d:	48 89 e5             	mov    rbp,rsp
   29340:	48 83 ec 30          	sub    rsp,0x30
   29344:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   29348:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29351:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   29355:	31 c0                	xor    eax,eax
   29357:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2935b:	48 89 c7             	mov    rdi,rax
   2935e:	e8 d7 fd ff ff       	call   2913a <std::vector<Mesh, std::allocator<Mesh> >::end()>
   29363:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   29367:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2936b:	be 01 00 00 00       	mov    esi,0x1
   29370:	48 89 c7             	mov    rdi,rax
   29373:	e8 2a 17 00 00       	call   2aaa2 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::operator-(long) const>
   29378:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2937c:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   29380:	48 89 c7             	mov    rdi,rax
   29383:	e8 80 17 00 00       	call   2ab08 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::operator*() const>
   29388:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2938c:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   29395:	74 05                	je     2939c <std::vector<Mesh, std::allocator<Mesh> >::back()+0x60>
   29397:	e8 44 b1 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2939c:	c9                   	leave  
   2939d:	c3                   	ret    

000000000002939e <Transform&& std::forward<Transform>(std::remove_reference<Transform>::type&)>:
   2939e:	55                   	push   rbp
   2939f:	48 89 e5             	mov    rbp,rsp
   293a2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   293a6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   293aa:	5d                   	pop    rbp
   293ab:	c3                   	ret    

00000000000293ac <void std::allocator_traits<std::allocator<Transform> >::construct<Transform, Transform>(std::allocator<Transform>&, Transform*, Transform&&)>:
   293ac:	55                   	push   rbp
   293ad:	48 89 e5             	mov    rbp,rsp
   293b0:	48 83 ec 20          	sub    rsp,0x20
   293b4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   293b8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   293bc:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   293c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   293c4:	48 89 c7             	mov    rdi,rax
   293c7:	e8 d2 ff ff ff       	call   2939e <Transform&& std::forward<Transform>(std::remove_reference<Transform>::type&)>
   293cc:	48 89 c2             	mov    rdx,rax
   293cf:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   293d3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   293d7:	48 89 ce             	mov    rsi,rcx
   293da:	48 89 c7             	mov    rdi,rax
   293dd:	e8 38 17 00 00       	call   2ab1a <void __gnu_cxx::new_allocator<Transform>::construct<Transform, Transform>(Transform*, Transform&&)>
   293e2:	90                   	nop
   293e3:	c9                   	leave  
   293e4:	c3                   	ret    
   293e5:	90                   	nop

00000000000293e6 <std::vector<Transform, std::allocator<Transform> >::end()>:
   293e6:	55                   	push   rbp
   293e7:	48 89 e5             	mov    rbp,rsp
   293ea:	48 83 ec 20          	sub    rsp,0x20
   293ee:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   293f2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   293fb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   293ff:	31 c0                	xor    eax,eax
   29401:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29405:	48 8d 50 08          	lea    rdx,[rax+0x8]
   29409:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2940d:	48 89 d6             	mov    rsi,rdx
   29410:	48 89 c7             	mov    rdi,rax
   29413:	e8 62 17 00 00       	call   2ab7a <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::__normal_iterator(Transform* const&)>
   29418:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2941c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   29420:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   29429:	74 05                	je     29430 <std::vector<Transform, std::allocator<Transform> >::end()+0x4a>
   2942b:	e8 b0 b0 fd ff       	call   44e0 <__stack_chk_fail@plt>
   29430:	c9                   	leave  
   29431:	c3                   	ret    

0000000000029432 <void std::vector<Transform, std::allocator<Transform> >::_M_realloc_insert<Transform>(__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >, Transform&&)>:
   29432:	55                   	push   rbp
   29433:	48 89 e5             	mov    rbp,rsp
   29436:	53                   	push   rbx
   29437:	48 83 ec 68          	sub    rsp,0x68
   2943b:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   2943f:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   29443:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   29447:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29450:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   29454:	31 c0                	xor    eax,eax
   29456:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2945a:	48 8d 15 9a 35 01 00 	lea    rdx,[rip+0x1359a]        # 3c9fb <NANO_SEC+0x1733>
   29461:	be 01 00 00 00       	mov    esi,0x1
   29466:	48 89 c7             	mov    rdi,rax
   29469:	e8 2a 17 00 00       	call   2ab98 <std::vector<Transform, std::allocator<Transform> >::_M_check_len(unsigned long, char const*) const>
   2946e:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   29472:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29476:	48 8b 00             	mov    rax,QWORD PTR [rax]
   29479:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   2947d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29481:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   29485:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   29489:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2948d:	48 89 c7             	mov    rdi,rax
   29490:	e8 ef 17 00 00       	call   2ac84 <std::vector<Transform, std::allocator<Transform> >::begin()>
   29495:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   29499:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   2949d:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   294a1:	48 89 d6             	mov    rsi,rdx
   294a4:	48 89 c7             	mov    rdi,rax
   294a7:	e8 20 18 00 00       	call   2accc <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::difference_type __gnu_cxx::operator-<Transform*, std::vector<Transform, std::allocator<Transform> > >(__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > > const&, __gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > > const&)>
   294ac:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   294b0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   294b4:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   294b8:	48 89 d6             	mov    rsi,rdx
   294bb:	48 89 c7             	mov    rdi,rax
   294be:	e8 59 18 00 00       	call   2ad1c <std::_Vector_base<Transform, std::allocator<Transform> >::_M_allocate(unsigned long)>
   294c3:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   294c7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   294cb:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   294cf:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   294d3:	48 89 c7             	mov    rdi,rax
   294d6:	e8 c3 fe ff ff       	call   2939e <Transform&& std::forward<Transform>(std::remove_reference<Transform>::type&)>
   294db:	48 89 c6             	mov    rsi,rax
   294de:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   294e2:	48 89 d0             	mov    rax,rdx
   294e5:	48 c1 e0 03          	shl    rax,0x3
   294e9:	48 01 d0             	add    rax,rdx
   294ec:	48 c1 e0 02          	shl    rax,0x2
   294f0:	48 89 c2             	mov    rdx,rax
   294f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   294f7:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   294fb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   294ff:	48 89 f2             	mov    rdx,rsi
   29502:	48 89 ce             	mov    rsi,rcx
   29505:	48 89 c7             	mov    rdi,rax
   29508:	e8 9f fe ff ff       	call   293ac <void std::allocator_traits<std::allocator<Transform> >::construct<Transform, Transform>(std::allocator<Transform>&, Transform*, Transform&&)>
   2950d:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   29515:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29519:	48 89 c7             	mov    rdi,rax
   2951c:	e8 d5 f3 ff ff       	call   288f6 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_get_Tp_allocator()>
   29521:	48 89 c3             	mov    rbx,rax
   29524:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   29528:	48 89 c7             	mov    rdi,rax
   2952b:	e8 52 18 00 00       	call   2ad82 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::base() const>
   29530:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   29533:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   29537:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2953b:	48 89 d9             	mov    rcx,rbx
   2953e:	48 89 c7             	mov    rdi,rax
   29541:	e8 09 18 00 00       	call   2ad4f <std::vector<Transform, std::allocator<Transform> >::_S_relocate(Transform*, Transform*, Transform*, std::allocator<Transform>&)>
   29546:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2954a:	48 83 45 e0 24       	add    QWORD PTR [rbp-0x20],0x24
   2954f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29553:	48 89 c7             	mov    rdi,rax
   29556:	e8 9b f3 ff ff       	call   288f6 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_get_Tp_allocator()>
   2955b:	48 89 c3             	mov    rbx,rax
   2955e:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   29562:	48 89 c7             	mov    rdi,rax
   29565:	e8 18 18 00 00       	call   2ad82 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::base() const>
   2956a:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2956d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   29571:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   29575:	48 89 d9             	mov    rcx,rbx
   29578:	48 89 c7             	mov    rdi,rax
   2957b:	e8 cf 17 00 00       	call   2ad4f <std::vector<Transform, std::allocator<Transform> >::_S_relocate(Transform*, Transform*, Transform*, std::allocator<Transform>&)>
   29580:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29584:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29588:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   2958c:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   29590:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   29594:	48 89 d1             	mov    rcx,rdx
   29597:	48 c1 f9 02          	sar    rcx,0x2
   2959b:	48 ba 39 8e e3 38 8e e3 38 8e 	movabs rdx,0x8e38e38e38e38e39
   295a5:	48 0f af d1          	imul   rdx,rcx
   295a9:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   295ad:	48 89 ce             	mov    rsi,rcx
   295b0:	48 89 c7             	mov    rdi,rax
   295b3:	e8 08 f3 ff ff       	call   288c0 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_deallocate(Transform*, unsigned long)>
   295b8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   295bc:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   295c0:	48 89 10             	mov    QWORD PTR [rax],rdx
   295c3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   295c7:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   295cb:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   295cf:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   295d3:	48 89 d0             	mov    rax,rdx
   295d6:	48 c1 e0 03          	shl    rax,0x3
   295da:	48 01 d0             	add    rax,rdx
   295dd:	48 c1 e0 02          	shl    rax,0x2
   295e1:	48 89 c2             	mov    rdx,rax
   295e4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   295e8:	48 01 c2             	add    rdx,rax
   295eb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   295ef:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   295f3:	90                   	nop
   295f4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   295f8:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   29601:	74 05                	je     29608 <void std::vector<Transform, std::allocator<Transform> >::_M_realloc_insert<Transform>(__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >, Transform&&)+0x1d6>
   29603:	e8 d8 ae fd ff       	call   44e0 <__stack_chk_fail@plt>
   29608:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2960c:	c9                   	leave  
   2960d:	c3                   	ret    

000000000002960e <std::vector<Transform, std::allocator<Transform> >::back()>:
   2960e:	55                   	push   rbp
   2960f:	48 89 e5             	mov    rbp,rsp
   29612:	48 83 ec 30          	sub    rsp,0x30
   29616:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2961a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29623:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   29627:	31 c0                	xor    eax,eax
   29629:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2962d:	48 89 c7             	mov    rdi,rax
   29630:	e8 b1 fd ff ff       	call   293e6 <std::vector<Transform, std::allocator<Transform> >::end()>
   29635:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   29639:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2963d:	be 01 00 00 00       	mov    esi,0x1
   29642:	48 89 c7             	mov    rdi,rax
   29645:	e8 46 17 00 00       	call   2ad90 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::operator-(long) const>
   2964a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2964e:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   29652:	48 89 c7             	mov    rdi,rax
   29655:	e8 a6 17 00 00       	call   2ae00 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::operator*() const>
   2965a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2965e:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   29667:	74 05                	je     2966e <std::vector<Transform, std::allocator<Transform> >::back()+0x60>
   29669:	e8 72 ae fd ff       	call   44e0 <__stack_chk_fail@plt>
   2966e:	c9                   	leave  
   2966f:	c3                   	ret    

0000000000029670 <unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&)>:
   29670:	55                   	push   rbp
   29671:	48 89 e5             	mov    rbp,rsp
   29674:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29678:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2967c:	5d                   	pop    rbp
   2967d:	c3                   	ret    

000000000002967e <void std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int, unsigned int>(std::allocator<unsigned int>&, unsigned int*, unsigned int&&)>:
   2967e:	55                   	push   rbp
   2967f:	48 89 e5             	mov    rbp,rsp
   29682:	48 83 ec 20          	sub    rsp,0x20
   29686:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2968a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2968e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   29692:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29696:	48 89 c7             	mov    rdi,rax
   29699:	e8 d2 ff ff ff       	call   29670 <unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&)>
   2969e:	48 89 c2             	mov    rdx,rax
   296a1:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   296a5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   296a9:	48 89 ce             	mov    rsi,rcx
   296ac:	48 89 c7             	mov    rdi,rax
   296af:	e8 5e 17 00 00       	call   2ae12 <void __gnu_cxx::new_allocator<unsigned int>::construct<unsigned int, unsigned int>(unsigned int*, unsigned int&&)>
   296b4:	90                   	nop
   296b5:	c9                   	leave  
   296b6:	c3                   	ret    
   296b7:	90                   	nop

00000000000296b8 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int&&)>:
   296b8:	55                   	push   rbp
   296b9:	48 89 e5             	mov    rbp,rsp
   296bc:	53                   	push   rbx
   296bd:	48 83 ec 68          	sub    rsp,0x68
   296c1:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   296c5:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   296c9:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   296cd:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   296d6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   296da:	31 c0                	xor    eax,eax
   296dc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   296e0:	48 8d 15 14 33 01 00 	lea    rdx,[rip+0x13314]        # 3c9fb <NANO_SEC+0x1733>
   296e7:	be 01 00 00 00       	mov    esi,0x1
   296ec:	48 89 c7             	mov    rdi,rax
   296ef:	e8 46 02 00 00       	call   2993a <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const>
   296f4:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   296f8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   296fc:	48 8b 00             	mov    rax,QWORD PTR [rax]
   296ff:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   29703:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29707:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   2970b:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   2970f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29713:	48 89 c7             	mov    rdi,rax
   29716:	e8 0b 03 00 00       	call   29a26 <std::vector<unsigned int, std::allocator<unsigned int> >::begin()>
   2971b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   2971f:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   29723:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   29727:	48 89 d6             	mov    rsi,rdx
   2972a:	48 89 c7             	mov    rdi,rax
   2972d:	e8 3c 03 00 00       	call   29a6e <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type __gnu_cxx::operator-<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > const&, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > const&)>
   29732:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   29736:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2973a:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   2973e:	48 89 d6             	mov    rsi,rdx
   29741:	48 89 c7             	mov    rdi,rax
   29744:	e8 65 03 00 00       	call   29aae <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long)>
   29749:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2974d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29751:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29755:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   29759:	48 89 c7             	mov    rdi,rax
   2975c:	e8 0f ff ff ff       	call   29670 <unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&)>
   29761:	48 89 c2             	mov    rdx,rax
   29764:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   29768:	48 8d 0c 85 00 00 00 00 	lea    rcx,[rax*4+0x0]
   29770:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29774:	48 01 c1             	add    rcx,rax
   29777:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2977b:	48 89 ce             	mov    rsi,rcx
   2977e:	48 89 c7             	mov    rdi,rax
   29781:	e8 f8 fe ff ff       	call   2967e <void std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int, unsigned int>(std::allocator<unsigned int>&, unsigned int*, unsigned int&&)>
   29786:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   2978e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29792:	48 89 c7             	mov    rdi,rax
   29795:	e8 98 f0 ff ff       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   2979a:	48 89 c3             	mov    rbx,rax
   2979d:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   297a1:	48 89 c7             	mov    rdi,rax
   297a4:	e8 6b 03 00 00       	call   29b14 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   297a9:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   297ac:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   297b0:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   297b4:	48 89 d9             	mov    rcx,rbx
   297b7:	48 89 c7             	mov    rdi,rax
   297ba:	e8 22 03 00 00       	call   29ae1 <std::vector<unsigned int, std::allocator<unsigned int> >::_S_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   297bf:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   297c3:	48 83 45 e0 04       	add    QWORD PTR [rbp-0x20],0x4
   297c8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   297cc:	48 89 c7             	mov    rdi,rax
   297cf:	e8 5e f0 ff ff       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   297d4:	48 89 c3             	mov    rbx,rax
   297d7:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   297db:	48 89 c7             	mov    rdi,rax
   297de:	e8 31 03 00 00       	call   29b14 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   297e3:	48 8b 00             	mov    rax,QWORD PTR [rax]
   297e6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   297ea:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   297ee:	48 89 d9             	mov    rcx,rbx
   297f1:	48 89 c7             	mov    rdi,rax
   297f4:	e8 e8 02 00 00       	call   29ae1 <std::vector<unsigned int, std::allocator<unsigned int> >::_S_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   297f9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   297fd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29801:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   29805:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   29809:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   2980d:	48 c1 fa 02          	sar    rdx,0x2
   29811:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   29815:	48 89 ce             	mov    rsi,rcx
   29818:	48 89 c7             	mov    rdi,rax
   2981b:	e8 dc ef ff ff       	call   287fc <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)>
   29820:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   29824:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   29828:	48 89 10             	mov    QWORD PTR [rax],rdx
   2982b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2982f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   29833:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   29837:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2983b:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   29843:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29847:	48 01 c2             	add    rdx,rax
   2984a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   2984e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   29852:	90                   	nop
   29853:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29857:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   29860:	74 05                	je     29867 <void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int&&)+0x1af>
   29862:	e8 79 ac fd ff       	call   44e0 <__stack_chk_fail@plt>
   29867:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2986b:	c9                   	leave  
   2986c:	c3                   	ret    
   2986d:	90                   	nop

000000000002986e <std::vector<unsigned int, std::allocator<unsigned int> >::back()>:
   2986e:	55                   	push   rbp
   2986f:	48 89 e5             	mov    rbp,rsp
   29872:	48 83 ec 30          	sub    rsp,0x30
   29876:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2987a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29883:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   29887:	31 c0                	xor    eax,eax
   29889:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2988d:	48 89 c7             	mov    rdi,rax
   29890:	e8 5b e6 ff ff       	call   27ef0 <std::vector<unsigned int, std::allocator<unsigned int> >::end()>
   29895:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   29899:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2989d:	be 01 00 00 00       	mov    esi,0x1
   298a2:	48 89 c7             	mov    rdi,rax
   298a5:	e8 a6 15 00 00       	call   2ae50 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator-(long) const>
   298aa:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   298ae:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   298b2:	48 89 c7             	mov    rdi,rax
   298b5:	e8 fc 15 00 00       	call   2aeb6 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator*() const>
   298ba:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   298be:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   298c7:	74 05                	je     298ce <std::vector<unsigned int, std::allocator<unsigned int> >::back()+0x60>
   298c9:	e8 12 ac fd ff       	call   44e0 <__stack_chk_fail@plt>
   298ce:	c9                   	leave  
   298cf:	c3                   	ret    

00000000000298d0 <unsigned int const& std::forward<unsigned int const&>(std::remove_reference<unsigned int const&>::type&)>:
   298d0:	55                   	push   rbp
   298d1:	48 89 e5             	mov    rbp,rsp
   298d4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   298d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   298dc:	5d                   	pop    rbp
   298dd:	c3                   	ret    

00000000000298de <void __gnu_cxx::new_allocator<unsigned int>::construct<unsigned int, unsigned int const&>(unsigned int*, unsigned int const&)>:
   298de:	55                   	push   rbp
   298df:	48 89 e5             	mov    rbp,rsp
   298e2:	53                   	push   rbx
   298e3:	48 83 ec 28          	sub    rsp,0x28
   298e7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   298eb:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   298ef:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   298f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   298f7:	48 89 c7             	mov    rdi,rax
   298fa:	e8 d1 ff ff ff       	call   298d0 <unsigned int const& std::forward<unsigned int const&>(std::remove_reference<unsigned int const&>::type&)>
   298ff:	8b 18                	mov    ebx,DWORD PTR [rax]
   29901:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29905:	48 89 c6             	mov    rsi,rax
   29908:	bf 04 00 00 00       	mov    edi,0x4
   2990d:	e8 9f b8 ff ff       	call   251b1 <operator new(unsigned long, void*)>
   29912:	89 18                	mov    DWORD PTR [rax],ebx
   29914:	90                   	nop
   29915:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29919:	c9                   	leave  
   2991a:	c3                   	ret    
   2991b:	90                   	nop

000000000002991c <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int* const&)>:
   2991c:	55                   	push   rbp
   2991d:	48 89 e5             	mov    rbp,rsp
   29920:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29924:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29928:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2992c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2992f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29933:	48 89 10             	mov    QWORD PTR [rax],rdx
   29936:	90                   	nop
   29937:	5d                   	pop    rbp
   29938:	c3                   	ret    
   29939:	90                   	nop

000000000002993a <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const>:
   2993a:	55                   	push   rbp
   2993b:	48 89 e5             	mov    rbp,rsp
   2993e:	53                   	push   rbx
   2993f:	48 83 ec 48          	sub    rsp,0x48
   29943:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   29947:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   2994b:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   2994f:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29958:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2995c:	31 c0                	xor    eax,eax
   2995e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29962:	48 89 c7             	mov    rdi,rax
   29965:	e8 5e 15 00 00       	call   2aec8 <std::vector<unsigned int, std::allocator<unsigned int> >::max_size() const>
   2996a:	48 89 c3             	mov    rbx,rax
   2996d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29971:	48 89 c7             	mov    rdi,rax
   29974:	e8 37 cc ff ff       	call   265b0 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   29979:	48 29 c3             	sub    rbx,rax
   2997c:	48 89 da             	mov    rdx,rbx
   2997f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   29983:	48 39 c2             	cmp    rdx,rax
   29986:	0f 92 c0             	setb   al
   29989:	84 c0                	test   al,al
   2998b:	74 0c                	je     29999 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const+0x5f>
   2998d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   29991:	48 89 c7             	mov    rdi,rax
   29994:	e8 37 a8 fd ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   29999:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2999d:	48 89 c7             	mov    rdi,rax
   299a0:	e8 0b cc ff ff       	call   265b0 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   299a5:	48 89 c3             	mov    rbx,rax
   299a8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   299ac:	48 89 c7             	mov    rdi,rax
   299af:	e8 fc cb ff ff       	call   265b0 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   299b4:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   299b8:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   299bc:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   299c0:	48 89 d6             	mov    rsi,rdx
   299c3:	48 89 c7             	mov    rdi,rax
   299c6:	e8 63 c1 ff ff       	call   25b2e <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   299cb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   299ce:	48 01 d8             	add    rax,rbx
   299d1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   299d5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   299d9:	48 89 c7             	mov    rdi,rax
   299dc:	e8 cf cb ff ff       	call   265b0 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   299e1:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   299e5:	72 12                	jb     299f9 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const+0xbf>
   299e7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   299eb:	48 89 c7             	mov    rdi,rax
   299ee:	e8 d5 14 00 00       	call   2aec8 <std::vector<unsigned int, std::allocator<unsigned int> >::max_size() const>
   299f3:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   299f7:	76 0e                	jbe    29a07 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const+0xcd>
   299f9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   299fd:	48 89 c7             	mov    rdi,rax
   29a00:	e8 c3 14 00 00       	call   2aec8 <std::vector<unsigned int, std::allocator<unsigned int> >::max_size() const>
   29a05:	eb 04                	jmp    29a0b <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const+0xd1>
   29a07:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29a0b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   29a0f:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   29a18:	74 05                	je     29a1f <std::vector<unsigned int, std::allocator<unsigned int> >::_M_check_len(unsigned long, char const*) const+0xe5>
   29a1a:	e8 c1 aa fd ff       	call   44e0 <__stack_chk_fail@plt>
   29a1f:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29a23:	c9                   	leave  
   29a24:	c3                   	ret    
   29a25:	90                   	nop

0000000000029a26 <std::vector<unsigned int, std::allocator<unsigned int> >::begin()>:
   29a26:	55                   	push   rbp
   29a27:	48 89 e5             	mov    rbp,rsp
   29a2a:	48 83 ec 20          	sub    rsp,0x20
   29a2e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29a32:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29a3b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   29a3f:	31 c0                	xor    eax,eax
   29a41:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   29a45:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   29a49:	48 89 d6             	mov    rsi,rdx
   29a4c:	48 89 c7             	mov    rdi,rax
   29a4f:	e8 c8 fe ff ff       	call   2991c <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int* const&)>
   29a54:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   29a58:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   29a5c:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   29a65:	74 05                	je     29a6c <std::vector<unsigned int, std::allocator<unsigned int> >::begin()+0x46>
   29a67:	e8 74 aa fd ff       	call   44e0 <__stack_chk_fail@plt>
   29a6c:	c9                   	leave  
   29a6d:	c3                   	ret    

0000000000029a6e <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::difference_type __gnu_cxx::operator-<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > const&, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > const&)>:
   29a6e:	55                   	push   rbp
   29a6f:	48 89 e5             	mov    rbp,rsp
   29a72:	53                   	push   rbx
   29a73:	48 83 ec 18          	sub    rsp,0x18
   29a77:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29a7b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   29a7f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29a83:	48 89 c7             	mov    rdi,rax
   29a86:	e8 89 00 00 00       	call   29b14 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   29a8b:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   29a8e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29a92:	48 89 c7             	mov    rdi,rax
   29a95:	e8 7a 00 00 00       	call   29b14 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   29a9a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   29a9d:	48 89 d8             	mov    rax,rbx
   29aa0:	48 29 d0             	sub    rax,rdx
   29aa3:	48 c1 f8 02          	sar    rax,0x2
   29aa7:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29aab:	c9                   	leave  
   29aac:	c3                   	ret    
   29aad:	90                   	nop

0000000000029aae <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long)>:
   29aae:	55                   	push   rbp
   29aaf:	48 89 e5             	mov    rbp,rsp
   29ab2:	48 83 ec 10          	sub    rsp,0x10
   29ab6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29aba:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29abe:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   29ac3:	74 15                	je     29ada <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long)+0x2c>
   29ac5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29ac9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   29acd:	48 89 d6             	mov    rsi,rdx
   29ad0:	48 89 c7             	mov    rdi,rax
   29ad3:	e8 12 14 00 00       	call   2aeea <std::allocator_traits<std::allocator<unsigned int> >::allocate(std::allocator<unsigned int>&, unsigned long)>
   29ad8:	eb 05                	jmp    29adf <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long)+0x31>
   29ada:	b8 00 00 00 00       	mov    eax,0x0
   29adf:	c9                   	leave  
   29ae0:	c3                   	ret    

0000000000029ae1 <std::vector<unsigned int, std::allocator<unsigned int> >::_S_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>:
   29ae1:	55                   	push   rbp
   29ae2:	48 89 e5             	mov    rbp,rsp
   29ae5:	48 83 ec 20          	sub    rsp,0x20
   29ae9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29aed:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29af1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   29af5:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   29af9:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   29afd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   29b01:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   29b05:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29b09:	48 89 c7             	mov    rdi,rax
   29b0c:	e8 03 14 00 00       	call   2af14 <std::vector<unsigned int, std::allocator<unsigned int> >::_S_do_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&, std::integral_constant<bool, true>)>
   29b11:	c9                   	leave  
   29b12:	c3                   	ret    
   29b13:	90                   	nop

0000000000029b14 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>:
   29b14:	55                   	push   rbp
   29b15:	48 89 e5             	mov    rbp,rsp
   29b18:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29b1c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29b20:	5d                   	pop    rbp
   29b21:	c3                   	ret    

0000000000029b22 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::type&)>:
   29b22:	55                   	push   rbp
   29b23:	48 89 e5             	mov    rbp,rsp
   29b26:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29b2a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29b2e:	5d                   	pop    rbp
   29b2f:	c3                   	ret    

0000000000029b30 <void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   29b30:	55                   	push   rbp
   29b31:	48 89 e5             	mov    rbp,rsp
   29b34:	41 55                	push   r13
   29b36:	41 54                	push   r12
   29b38:	53                   	push   rbx
   29b39:	48 83 ec 28          	sub    rsp,0x28
   29b3d:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   29b41:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   29b45:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   29b49:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29b4d:	48 89 c7             	mov    rdi,rax
   29b50:	e8 cd ff ff ff       	call   29b22 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>::type&)>
   29b55:	49 89 c5             	mov    r13,rax
   29b58:	48 8b 5d d0          	mov    rbx,QWORD PTR [rbp-0x30]
   29b5c:	48 89 de             	mov    rsi,rbx
   29b5f:	bf 20 00 00 00       	mov    edi,0x20
   29b64:	e8 48 b6 ff ff       	call   251b1 <operator new(unsigned long, void*)>
   29b69:	49 89 c4             	mov    r12,rax
   29b6c:	4c 89 ee             	mov    rsi,r13
   29b6f:	4c 89 e7             	mov    rdi,r12
   29b72:	e8 f9 a5 fd ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   29b77:	eb 19                	jmp    29b92 <void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x62>
   29b79:	49 89 c5             	mov    r13,rax
   29b7c:	48 89 de             	mov    rsi,rbx
   29b7f:	4c 89 e7             	mov    rdi,r12
   29b82:	e8 3c b6 ff ff       	call   251c3 <operator delete(void*, void*)>
   29b87:	4c 89 e8             	mov    rax,r13
   29b8a:	48 89 c7             	mov    rdi,rax
   29b8d:	e8 ce ab fd ff       	call   4760 <_Unwind_Resume@plt>
   29b92:	48 83 c4 28          	add    rsp,0x28
   29b96:	5b                   	pop    rbx
   29b97:	41 5c                	pop    r12
   29b99:	41 5d                	pop    r13
   29b9b:	5d                   	pop    rbp
   29b9c:	c3                   	ret    
   29b9d:	90                   	nop

0000000000029b9e <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::__normal_iterator(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* const&)>:
   29b9e:	55                   	push   rbp
   29b9f:	48 89 e5             	mov    rbp,rsp
   29ba2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29ba6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29baa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   29bae:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   29bb1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29bb5:	48 89 10             	mov    QWORD PTR [rax],rdx
   29bb8:	90                   	nop
   29bb9:	5d                   	pop    rbp
   29bba:	c3                   	ret    
   29bbb:	90                   	nop

0000000000029bbc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const>:
   29bbc:	55                   	push   rbp
   29bbd:	48 89 e5             	mov    rbp,rsp
   29bc0:	53                   	push   rbx
   29bc1:	48 83 ec 48          	sub    rsp,0x48
   29bc5:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   29bc9:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   29bcd:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   29bd1:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29bda:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   29bde:	31 c0                	xor    eax,eax
   29be0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29be4:	48 89 c7             	mov    rdi,rax
   29be7:	e8 5a 13 00 00       	call   2af46 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::max_size() const>
   29bec:	48 89 c3             	mov    rbx,rax
   29bef:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29bf3:	48 89 c7             	mov    rdi,rax
   29bf6:	e8 39 cb ff ff       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   29bfb:	48 29 c3             	sub    rbx,rax
   29bfe:	48 89 da             	mov    rdx,rbx
   29c01:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   29c05:	48 39 c2             	cmp    rdx,rax
   29c08:	0f 92 c0             	setb   al
   29c0b:	84 c0                	test   al,al
   29c0d:	74 0c                	je     29c1b <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const+0x5f>
   29c0f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   29c13:	48 89 c7             	mov    rdi,rax
   29c16:	e8 b5 a5 fd ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   29c1b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29c1f:	48 89 c7             	mov    rdi,rax
   29c22:	e8 0d cb ff ff       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   29c27:	48 89 c3             	mov    rbx,rax
   29c2a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29c2e:	48 89 c7             	mov    rdi,rax
   29c31:	e8 fe ca ff ff       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   29c36:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   29c3a:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   29c3e:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   29c42:	48 89 d6             	mov    rsi,rdx
   29c45:	48 89 c7             	mov    rdi,rax
   29c48:	e8 e1 be ff ff       	call   25b2e <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   29c4d:	48 8b 00             	mov    rax,QWORD PTR [rax]
   29c50:	48 01 d8             	add    rax,rbx
   29c53:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29c57:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29c5b:	48 89 c7             	mov    rdi,rax
   29c5e:	e8 d1 ca ff ff       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   29c63:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   29c67:	72 12                	jb     29c7b <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const+0xbf>
   29c69:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29c6d:	48 89 c7             	mov    rdi,rax
   29c70:	e8 d1 12 00 00       	call   2af46 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::max_size() const>
   29c75:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   29c79:	76 0e                	jbe    29c89 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const+0xcd>
   29c7b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29c7f:	48 89 c7             	mov    rdi,rax
   29c82:	e8 bf 12 00 00       	call   2af46 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::max_size() const>
   29c87:	eb 04                	jmp    29c8d <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const+0xd1>
   29c89:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29c8d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   29c91:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   29c9a:	74 05                	je     29ca1 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const+0xe5>
   29c9c:	e8 3f a8 fd ff       	call   44e0 <__stack_chk_fail@plt>
   29ca1:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29ca5:	c9                   	leave  
   29ca6:	c3                   	ret    
   29ca7:	90                   	nop

0000000000029ca8 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::begin()>:
   29ca8:	55                   	push   rbp
   29ca9:	48 89 e5             	mov    rbp,rsp
   29cac:	48 83 ec 20          	sub    rsp,0x20
   29cb0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29cb4:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29cbd:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   29cc1:	31 c0                	xor    eax,eax
   29cc3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   29cc7:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   29ccb:	48 89 d6             	mov    rsi,rdx
   29cce:	48 89 c7             	mov    rdi,rax
   29cd1:	e8 c8 fe ff ff       	call   29b9e <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::__normal_iterator(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* const&)>
   29cd6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   29cda:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   29cde:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   29ce7:	74 05                	je     29cee <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::begin()+0x46>
   29ce9:	e8 f2 a7 fd ff       	call   44e0 <__stack_chk_fail@plt>
   29cee:	c9                   	leave  
   29cef:	c3                   	ret    

0000000000029cf0 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::difference_type __gnu_cxx::operator-<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)>:
   29cf0:	55                   	push   rbp
   29cf1:	48 89 e5             	mov    rbp,rsp
   29cf4:	53                   	push   rbx
   29cf5:	48 83 ec 18          	sub    rsp,0x18
   29cf9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29cfd:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   29d01:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29d05:	48 89 c7             	mov    rdi,rax
   29d08:	e8 89 00 00 00       	call   29d96 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::base() const>
   29d0d:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   29d10:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29d14:	48 89 c7             	mov    rdi,rax
   29d17:	e8 7a 00 00 00       	call   29d96 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::base() const>
   29d1c:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   29d1f:	48 89 d8             	mov    rax,rbx
   29d22:	48 29 d0             	sub    rax,rdx
   29d25:	48 c1 f8 05          	sar    rax,0x5
   29d29:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29d2d:	c9                   	leave  
   29d2e:	c3                   	ret    
   29d2f:	90                   	nop

0000000000029d30 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)>:
   29d30:	55                   	push   rbp
   29d31:	48 89 e5             	mov    rbp,rsp
   29d34:	48 83 ec 10          	sub    rsp,0x10
   29d38:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29d3c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29d40:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   29d45:	74 15                	je     29d5c <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)+0x2c>
   29d47:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29d4b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   29d4f:	48 89 d6             	mov    rsi,rdx
   29d52:	48 89 c7             	mov    rdi,rax
   29d55:	e8 0e 12 00 00       	call   2af68 <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::allocate(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, unsigned long)>
   29d5a:	eb 05                	jmp    29d61 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)+0x31>
   29d5c:	b8 00 00 00 00       	mov    eax,0x0
   29d61:	c9                   	leave  
   29d62:	c3                   	ret    

0000000000029d63 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_relocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>:
   29d63:	55                   	push   rbp
   29d64:	48 89 e5             	mov    rbp,rsp
   29d67:	48 83 ec 20          	sub    rsp,0x20
   29d6b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29d6f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29d73:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   29d77:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   29d7b:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   29d7f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   29d83:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   29d87:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29d8b:	48 89 c7             	mov    rdi,rax
   29d8e:	e8 ff 11 00 00       	call   2af92 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_do_relocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::integral_constant<bool, true>)>
   29d93:	c9                   	leave  
   29d94:	c3                   	ret    
   29d95:	90                   	nop

0000000000029d96 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::base() const>:
   29d96:	55                   	push   rbp
   29d97:	48 89 e5             	mov    rbp,rsp
   29d9a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29d9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29da2:	5d                   	pop    rbp
   29da3:	c3                   	ret    

0000000000029da4 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
   29da4:	55                   	push   rbp
   29da5:	48 89 e5             	mov    rbp,rsp
   29da8:	48 83 ec 10          	sub    rsp,0x10
   29dac:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29db0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29db4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   29db8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29dbc:	48 89 d6             	mov    rsi,rdx
   29dbf:	48 89 c7             	mov    rdi,rax
   29dc2:	e8 fd 11 00 00       	call   2afc4 <void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   29dc7:	90                   	nop
   29dc8:	c9                   	leave  
   29dc9:	c3                   	ret    

0000000000029dca <Tex const& std::forward<Tex const&>(std::remove_reference<Tex const&>::type&)>:
   29dca:	55                   	push   rbp
   29dcb:	48 89 e5             	mov    rbp,rsp
   29dce:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29dd2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29dd6:	5d                   	pop    rbp
   29dd7:	c3                   	ret    

0000000000029dd8 <void __gnu_cxx::new_allocator<Tex>::construct<Tex, Tex const&>(Tex*, Tex const&)>:
   29dd8:	55                   	push   rbp
   29dd9:	48 89 e5             	mov    rbp,rsp
   29ddc:	53                   	push   rbx
   29ddd:	48 83 ec 28          	sub    rsp,0x28
   29de1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29de5:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   29de9:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   29ded:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   29df1:	48 89 c7             	mov    rdi,rax
   29df4:	e8 d1 ff ff ff       	call   29dca <Tex const& std::forward<Tex const&>(std::remove_reference<Tex const&>::type&)>
   29df9:	48 89 c3             	mov    rbx,rax
   29dfc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29e00:	48 89 c6             	mov    rsi,rax
   29e03:	bf 18 00 00 00       	mov    edi,0x18
   29e08:	e8 a4 b3 ff ff       	call   251b1 <operator new(unsigned long, void*)>
   29e0d:	48 89 c1             	mov    rcx,rax
   29e10:	48 8b 03             	mov    rax,QWORD PTR [rbx]
   29e13:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
   29e17:	48 89 01             	mov    QWORD PTR [rcx],rax
   29e1a:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   29e1e:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
   29e22:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   29e26:	90                   	nop
   29e27:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29e2b:	c9                   	leave  
   29e2c:	c3                   	ret    
   29e2d:	90                   	nop

0000000000029e2e <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::__normal_iterator(Tex* const&)>:
   29e2e:	55                   	push   rbp
   29e2f:	48 89 e5             	mov    rbp,rsp
   29e32:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29e36:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29e3a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   29e3e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   29e41:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29e45:	48 89 10             	mov    QWORD PTR [rax],rdx
   29e48:	90                   	nop
   29e49:	5d                   	pop    rbp
   29e4a:	c3                   	ret    
   29e4b:	90                   	nop

0000000000029e4c <std::vector<Tex, std::allocator<Tex> >::_M_check_len(unsigned long, char const*) const>:
   29e4c:	55                   	push   rbp
   29e4d:	48 89 e5             	mov    rbp,rsp
   29e50:	53                   	push   rbx
   29e51:	48 83 ec 48          	sub    rsp,0x48
   29e55:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   29e59:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   29e5d:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   29e61:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29e6a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   29e6e:	31 c0                	xor    eax,eax
   29e70:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29e74:	48 89 c7             	mov    rdi,rax
   29e77:	e8 68 11 00 00       	call   2afe4 <std::vector<Tex, std::allocator<Tex> >::max_size() const>
   29e7c:	48 89 c3             	mov    rbx,rax
   29e7f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29e83:	48 89 c7             	mov    rdi,rax
   29e86:	e8 33 cc ff ff       	call   26abe <std::vector<Tex, std::allocator<Tex> >::size() const>
   29e8b:	48 29 c3             	sub    rbx,rax
   29e8e:	48 89 da             	mov    rdx,rbx
   29e91:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   29e95:	48 39 c2             	cmp    rdx,rax
   29e98:	0f 92 c0             	setb   al
   29e9b:	84 c0                	test   al,al
   29e9d:	74 0c                	je     29eab <std::vector<Tex, std::allocator<Tex> >::_M_check_len(unsigned long, char const*) const+0x5f>
   29e9f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   29ea3:	48 89 c7             	mov    rdi,rax
   29ea6:	e8 25 a3 fd ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   29eab:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29eaf:	48 89 c7             	mov    rdi,rax
   29eb2:	e8 07 cc ff ff       	call   26abe <std::vector<Tex, std::allocator<Tex> >::size() const>
   29eb7:	48 89 c3             	mov    rbx,rax
   29eba:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29ebe:	48 89 c7             	mov    rdi,rax
   29ec1:	e8 f8 cb ff ff       	call   26abe <std::vector<Tex, std::allocator<Tex> >::size() const>
   29ec6:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   29eca:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   29ece:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   29ed2:	48 89 d6             	mov    rsi,rdx
   29ed5:	48 89 c7             	mov    rdi,rax
   29ed8:	e8 51 bc ff ff       	call   25b2e <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   29edd:	48 8b 00             	mov    rax,QWORD PTR [rax]
   29ee0:	48 01 d8             	add    rax,rbx
   29ee3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   29ee7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29eeb:	48 89 c7             	mov    rdi,rax
   29eee:	e8 cb cb ff ff       	call   26abe <std::vector<Tex, std::allocator<Tex> >::size() const>
   29ef3:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   29ef7:	72 12                	jb     29f0b <std::vector<Tex, std::allocator<Tex> >::_M_check_len(unsigned long, char const*) const+0xbf>
   29ef9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29efd:	48 89 c7             	mov    rdi,rax
   29f00:	e8 df 10 00 00       	call   2afe4 <std::vector<Tex, std::allocator<Tex> >::max_size() const>
   29f05:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   29f09:	76 0e                	jbe    29f19 <std::vector<Tex, std::allocator<Tex> >::_M_check_len(unsigned long, char const*) const+0xcd>
   29f0b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   29f0f:	48 89 c7             	mov    rdi,rax
   29f12:	e8 cd 10 00 00       	call   2afe4 <std::vector<Tex, std::allocator<Tex> >::max_size() const>
   29f17:	eb 04                	jmp    29f1d <std::vector<Tex, std::allocator<Tex> >::_M_check_len(unsigned long, char const*) const+0xd1>
   29f19:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29f1d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   29f21:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   29f2a:	74 05                	je     29f31 <std::vector<Tex, std::allocator<Tex> >::_M_check_len(unsigned long, char const*) const+0xe5>
   29f2c:	e8 af a5 fd ff       	call   44e0 <__stack_chk_fail@plt>
   29f31:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29f35:	c9                   	leave  
   29f36:	c3                   	ret    
   29f37:	90                   	nop

0000000000029f38 <std::vector<Tex, std::allocator<Tex> >::begin()>:
   29f38:	55                   	push   rbp
   29f39:	48 89 e5             	mov    rbp,rsp
   29f3c:	48 83 ec 20          	sub    rsp,0x20
   29f40:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29f44:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   29f4d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   29f51:	31 c0                	xor    eax,eax
   29f53:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   29f57:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   29f5b:	48 89 d6             	mov    rsi,rdx
   29f5e:	48 89 c7             	mov    rdi,rax
   29f61:	e8 c8 fe ff ff       	call   29e2e <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::__normal_iterator(Tex* const&)>
   29f66:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   29f6a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   29f6e:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   29f77:	74 05                	je     29f7e <std::vector<Tex, std::allocator<Tex> >::begin()+0x46>
   29f79:	e8 62 a5 fd ff       	call   44e0 <__stack_chk_fail@plt>
   29f7e:	c9                   	leave  
   29f7f:	c3                   	ret    

0000000000029f80 <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::difference_type __gnu_cxx::operator-<Tex*, std::vector<Tex, std::allocator<Tex> > >(__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > > const&, __gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > > const&)>:
   29f80:	55                   	push   rbp
   29f81:	48 89 e5             	mov    rbp,rsp
   29f84:	53                   	push   rbx
   29f85:	48 83 ec 18          	sub    rsp,0x18
   29f89:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   29f8d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   29f91:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   29f95:	48 89 c7             	mov    rdi,rax
   29f98:	e8 99 00 00 00       	call   2a036 <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::base() const>
   29f9d:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   29fa0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   29fa4:	48 89 c7             	mov    rdi,rax
   29fa7:	e8 8a 00 00 00       	call   2a036 <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::base() const>
   29fac:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   29faf:	48 89 d8             	mov    rax,rbx
   29fb2:	48 29 d0             	sub    rax,rdx
   29fb5:	48 c1 f8 03          	sar    rax,0x3
   29fb9:	48 89 c2             	mov    rdx,rax
   29fbc:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   29fc6:	48 0f af c2          	imul   rax,rdx
   29fca:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   29fce:	c9                   	leave  
   29fcf:	c3                   	ret    

0000000000029fd0 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_allocate(unsigned long)>:
   29fd0:	55                   	push   rbp
   29fd1:	48 89 e5             	mov    rbp,rsp
   29fd4:	48 83 ec 10          	sub    rsp,0x10
   29fd8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   29fdc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   29fe0:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   29fe5:	74 15                	je     29ffc <std::_Vector_base<Tex, std::allocator<Tex> >::_M_allocate(unsigned long)+0x2c>
   29fe7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   29feb:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   29fef:	48 89 d6             	mov    rsi,rdx
   29ff2:	48 89 c7             	mov    rdi,rax
   29ff5:	e8 0c 10 00 00       	call   2b006 <std::allocator_traits<std::allocator<Tex> >::allocate(std::allocator<Tex>&, unsigned long)>
   29ffa:	eb 05                	jmp    2a001 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_allocate(unsigned long)+0x31>
   29ffc:	b8 00 00 00 00       	mov    eax,0x0
   2a001:	c9                   	leave  
   2a002:	c3                   	ret    

000000000002a003 <std::vector<Tex, std::allocator<Tex> >::_S_relocate(Tex*, Tex*, Tex*, std::allocator<Tex>&)>:
   2a003:	55                   	push   rbp
   2a004:	48 89 e5             	mov    rbp,rsp
   2a007:	48 83 ec 20          	sub    rsp,0x20
   2a00b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a00f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a013:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a017:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2a01b:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2a01f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a023:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2a027:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a02b:	48 89 c7             	mov    rdi,rax
   2a02e:	e8 fd 0f 00 00       	call   2b030 <std::vector<Tex, std::allocator<Tex> >::_S_do_relocate(Tex*, Tex*, Tex*, std::allocator<Tex>&, std::integral_constant<bool, true>)>
   2a033:	c9                   	leave  
   2a034:	c3                   	ret    
   2a035:	90                   	nop

000000000002a036 <__gnu_cxx::__normal_iterator<Tex*, std::vector<Tex, std::allocator<Tex> > >::base() const>:
   2a036:	55                   	push   rbp
   2a037:	48 89 e5             	mov    rbp,rsp
   2a03a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a03e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a042:	5d                   	pop    rbp
   2a043:	c3                   	ret    

000000000002a044 <glm::vec<4, float, (glm::qualifier)0>& glm::vec<4, float, (glm::qualifier)0>::operator*=<float>(glm::vec<4, float, (glm::qualifier)0> const&)>:
   2a044:	55                   	push   rbp
   2a045:	48 89 e5             	mov    rbp,rsp
   2a048:	48 83 ec 30          	sub    rsp,0x30
   2a04c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2a050:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2a054:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a05d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2a061:	31 c0                	xor    eax,eax
   2a063:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2a067:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   2a06b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2a06e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2a072:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a076:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   2a07a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a07e:	48 89 d6             	mov    rsi,rdx
   2a081:	48 89 c7             	mov    rdi,rax
   2a084:	e8 c3 eb ff ff       	call   28c4c <glm::detail::compute_vec4_mul<float, (glm::qualifier)0, false>::call(glm::vec<4, float, (glm::qualifier)0> const&, glm::vec<4, float, (glm::qualifier)0> const&)>
   2a089:	66 48 0f 7e c2       	movq   rdx,xmm0
   2a08e:	66 0f 6f c1          	movdqa xmm0,xmm1
   2a092:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a096:	48 89 10             	mov    QWORD PTR [rax],rdx
   2a099:	66 0f d6 40 08       	movq   QWORD PTR [rax+0x8],xmm0
   2a09e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a0a2:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2a0a6:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2a0af:	74 05                	je     2a0b6 <glm::vec<4, float, (glm::qualifier)0>& glm::vec<4, float, (glm::qualifier)0>::operator*=<float>(glm::vec<4, float, (glm::qualifier)0> const&)+0x72>
   2a0b1:	e8 2a a4 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2a0b6:	c9                   	leave  
   2a0b7:	c3                   	ret    

000000000002a0b8 <__gnu_cxx::new_allocator<Mesh>::new_allocator()>:
   2a0b8:	55                   	push   rbp
   2a0b9:	48 89 e5             	mov    rbp,rsp
   2a0bc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a0c0:	90                   	nop
   2a0c1:	5d                   	pop    rbp
   2a0c2:	c3                   	ret    

000000000002a0c3 <std::allocator_traits<std::allocator<Mesh> >::deallocate(std::allocator<Mesh>&, Mesh*, unsigned long)>:
   2a0c3:	55                   	push   rbp
   2a0c4:	48 89 e5             	mov    rbp,rsp
   2a0c7:	48 83 ec 20          	sub    rsp,0x20
   2a0cb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a0cf:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a0d3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a0d7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a0db:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2a0df:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a0e3:	48 89 ce             	mov    rsi,rcx
   2a0e6:	48 89 c7             	mov    rdi,rax
   2a0e9:	e8 74 0f 00 00       	call   2b062 <__gnu_cxx::new_allocator<Mesh>::deallocate(Mesh*, unsigned long)>
   2a0ee:	90                   	nop
   2a0ef:	c9                   	leave  
   2a0f0:	c3                   	ret    

000000000002a0f1 <void std::_Destroy<Mesh*>(Mesh*, Mesh*)>:
   2a0f1:	55                   	push   rbp
   2a0f2:	48 89 e5             	mov    rbp,rsp
   2a0f5:	48 83 ec 10          	sub    rsp,0x10
   2a0f9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a0fd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a101:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2a105:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a109:	48 89 d6             	mov    rsi,rdx
   2a10c:	48 89 c7             	mov    rdi,rax
   2a10f:	e8 7f 0f 00 00       	call   2b093 <void std::_Destroy_aux<true>::__destroy<Mesh*>(Mesh*, Mesh*)>
   2a114:	90                   	nop
   2a115:	c9                   	leave  
   2a116:	c3                   	ret    
   2a117:	90                   	nop

000000000002a118 <__gnu_cxx::new_allocator<unsigned int>::new_allocator()>:
   2a118:	55                   	push   rbp
   2a119:	48 89 e5             	mov    rbp,rsp
   2a11c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a120:	90                   	nop
   2a121:	5d                   	pop    rbp
   2a122:	c3                   	ret    

000000000002a123 <std::allocator_traits<std::allocator<unsigned int> >::deallocate(std::allocator<unsigned int>&, unsigned int*, unsigned long)>:
   2a123:	55                   	push   rbp
   2a124:	48 89 e5             	mov    rbp,rsp
   2a127:	48 83 ec 20          	sub    rsp,0x20
   2a12b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a12f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a133:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a137:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a13b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2a13f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a143:	48 89 ce             	mov    rsi,rcx
   2a146:	48 89 c7             	mov    rdi,rax
   2a149:	e8 54 0f 00 00       	call   2b0a2 <__gnu_cxx::new_allocator<unsigned int>::deallocate(unsigned int*, unsigned long)>
   2a14e:	90                   	nop
   2a14f:	c9                   	leave  
   2a150:	c3                   	ret    

000000000002a151 <void std::_Destroy<unsigned int*>(unsigned int*, unsigned int*)>:
   2a151:	55                   	push   rbp
   2a152:	48 89 e5             	mov    rbp,rsp
   2a155:	48 83 ec 10          	sub    rsp,0x10
   2a159:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a15d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a161:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2a165:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a169:	48 89 d6             	mov    rsi,rdx
   2a16c:	48 89 c7             	mov    rdi,rax
   2a16f:	e8 5f 0f 00 00       	call   2b0d3 <void std::_Destroy_aux<true>::__destroy<unsigned int*>(unsigned int*, unsigned int*)>
   2a174:	90                   	nop
   2a175:	c9                   	leave  
   2a176:	c3                   	ret    
   2a177:	90                   	nop

000000000002a178 <__gnu_cxx::new_allocator<Transform>::new_allocator()>:
   2a178:	55                   	push   rbp
   2a179:	48 89 e5             	mov    rbp,rsp
   2a17c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a180:	90                   	nop
   2a181:	5d                   	pop    rbp
   2a182:	c3                   	ret    

000000000002a183 <std::allocator_traits<std::allocator<Transform> >::deallocate(std::allocator<Transform>&, Transform*, unsigned long)>:
   2a183:	55                   	push   rbp
   2a184:	48 89 e5             	mov    rbp,rsp
   2a187:	48 83 ec 20          	sub    rsp,0x20
   2a18b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a18f:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a193:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a197:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a19b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2a19f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a1a3:	48 89 ce             	mov    rsi,rcx
   2a1a6:	48 89 c7             	mov    rdi,rax
   2a1a9:	e8 34 0f 00 00       	call   2b0e2 <__gnu_cxx::new_allocator<Transform>::deallocate(Transform*, unsigned long)>
   2a1ae:	90                   	nop
   2a1af:	c9                   	leave  
   2a1b0:	c3                   	ret    

000000000002a1b1 <void std::_Destroy<Transform*>(Transform*, Transform*)>:
   2a1b1:	55                   	push   rbp
   2a1b2:	48 89 e5             	mov    rbp,rsp
   2a1b5:	48 83 ec 10          	sub    rsp,0x10
   2a1b9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a1bd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a1c1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2a1c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a1c9:	48 89 d6             	mov    rsi,rdx
   2a1cc:	48 89 c7             	mov    rdi,rax
   2a1cf:	e8 48 0f 00 00       	call   2b11c <void std::_Destroy_aux<true>::__destroy<Transform*>(Transform*, Transform*)>
   2a1d4:	90                   	nop
   2a1d5:	c9                   	leave  
   2a1d6:	c3                   	ret    
   2a1d7:	90                   	nop

000000000002a1d8 <__gnu_cxx::new_allocator<AABB>::new_allocator()>:
   2a1d8:	55                   	push   rbp
   2a1d9:	48 89 e5             	mov    rbp,rsp
   2a1dc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a1e0:	90                   	nop
   2a1e1:	5d                   	pop    rbp
   2a1e2:	c3                   	ret    

000000000002a1e3 <std::allocator_traits<std::allocator<AABB> >::deallocate(std::allocator<AABB>&, AABB*, unsigned long)>:
   2a1e3:	55                   	push   rbp
   2a1e4:	48 89 e5             	mov    rbp,rsp
   2a1e7:	48 83 ec 20          	sub    rsp,0x20
   2a1eb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a1ef:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a1f3:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a1f7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a1fb:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2a1ff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a203:	48 89 ce             	mov    rsi,rcx
   2a206:	48 89 c7             	mov    rdi,rax
   2a209:	e8 1e 0f 00 00       	call   2b12c <__gnu_cxx::new_allocator<AABB>::deallocate(AABB*, unsigned long)>
   2a20e:	90                   	nop
   2a20f:	c9                   	leave  
   2a210:	c3                   	ret    

000000000002a211 <void std::_Destroy<AABB*>(AABB*, AABB*)>:
   2a211:	55                   	push   rbp
   2a212:	48 89 e5             	mov    rbp,rsp
   2a215:	48 83 ec 10          	sub    rsp,0x10
   2a219:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a21d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a221:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2a225:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a229:	48 89 d6             	mov    rsi,rdx
   2a22c:	48 89 c7             	mov    rdi,rax
   2a22f:	e8 31 0f 00 00       	call   2b165 <void std::_Destroy_aux<true>::__destroy<AABB*>(AABB*, AABB*)>
   2a234:	90                   	nop
   2a235:	c9                   	leave  
   2a236:	c3                   	ret    

000000000002a237 <std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)>:
   2a237:	55                   	push   rbp
   2a238:	48 89 e5             	mov    rbp,rsp
   2a23b:	48 83 ec 10          	sub    rsp,0x10
   2a23f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a243:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a247:	48 8d 45 f8          	lea    rax,[rbp-0x8]
   2a24b:	48 89 c7             	mov    rdi,rax
   2a24e:	e8 33 0f 00 00       	call   2b186 <std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&)>
   2a253:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a257:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2a25b:	48 89 d6             	mov    rsi,rdx
   2a25e:	48 89 c7             	mov    rdi,rax
   2a261:	e8 2a 0f 00 00       	call   2b190 <std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag)>
   2a266:	c9                   	leave  
   2a267:	c3                   	ret    

000000000002a268 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
   2a268:	55                   	push   rbp
   2a269:	48 89 e5             	mov    rbp,rsp
   2a26c:	53                   	push   rbx
   2a26d:	48 83 ec 38          	sub    rsp,0x38
   2a271:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2a275:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2a279:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   2a27d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a286:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2a28a:	31 c0                	xor    eax,eax
   2a28c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2a290:	48 89 c7             	mov    rdi,rax
   2a293:	e8 dc 0e 00 00       	call   2b174 <bool __gnu_cxx::__is_null_pointer<char const>(char const*)>
   2a298:	84 c0                	test   al,al
   2a29a:	74 11                	je     2a2ad <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x45>
   2a29c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2a2a0:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
   2a2a4:	74 07                	je     2a2ad <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x45>
   2a2a6:	b8 01 00 00 00       	mov    eax,0x1
   2a2ab:	eb 05                	jmp    2a2b2 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x4a>
   2a2ad:	b8 00 00 00 00       	mov    eax,0x0
   2a2b2:	84 c0                	test   al,al
   2a2b4:	74 0f                	je     2a2c5 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x5d>
   2a2b6:	48 8d 05 5b 27 01 00 	lea    rax,[rip+0x1275b]        # 3ca18 <NANO_SEC+0x1750>
   2a2bd:	48 89 c7             	mov    rdi,rax
   2a2c0:	e8 fb 9f fd ff       	call   42c0 <std::__throw_logic_error(char const*)@plt>
   2a2c5:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   2a2c9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2a2cd:	48 89 d6             	mov    rsi,rdx
   2a2d0:	48 89 c7             	mov    rdi,rax
   2a2d3:	e8 5f ff ff ff       	call   2a237 <std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)>
   2a2d8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2a2dc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a2e0:	48 83 f8 0f          	cmp    rax,0xf
   2a2e4:	76 3d                	jbe    2a323 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0xbb>
   2a2e6:	48 8d 4d e0          	lea    rcx,[rbp-0x20]
   2a2ea:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a2ee:	ba 00 00 00 00       	mov    edx,0x0
   2a2f3:	48 89 ce             	mov    rsi,rcx
   2a2f6:	48 89 c7             	mov    rdi,rax
   2a2f9:	e8 82 a4 fd ff       	call   4780 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
   2a2fe:	48 89 c2             	mov    rdx,rax
   2a301:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a305:	48 89 d6             	mov    rsi,rdx
   2a308:	48 89 c7             	mov    rdi,rax
   2a30b:	e8 90 a0 fd ff       	call   43a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@plt>
   2a310:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2a314:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a318:	48 89 d6             	mov    rsi,rdx
   2a31b:	48 89 c7             	mov    rdi,rax
   2a31e:	e8 dd a4 fd ff       	call   4800 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@plt>
   2a323:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a327:	48 89 c7             	mov    rdi,rax
   2a32a:	e8 71 a1 fd ff       	call   44a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@plt>
   2a32f:	48 89 c1             	mov    rcx,rax
   2a332:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   2a336:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2a33a:	48 89 c6             	mov    rsi,rax
   2a33d:	48 89 cf             	mov    rdi,rcx
   2a340:	e8 7b a1 fd ff       	call   44c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@plt>
   2a345:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2a349:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a34d:	48 89 d6             	mov    rsi,rdx
   2a350:	48 89 c7             	mov    rdi,rax
   2a353:	e8 48 9f fd ff       	call   42a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@plt>
   2a358:	90                   	nop
   2a359:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2a35d:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2a366:	74 33                	je     2a39b <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x133>
   2a368:	eb 2c                	jmp    2a396 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x12e>
   2a36a:	48 89 c7             	mov    rdi,rax
   2a36d:	e8 ce 9d fd ff       	call   4140 <__cxa_begin_catch@plt>
   2a372:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a376:	48 89 c7             	mov    rdi,rax
   2a379:	e8 e2 a1 fd ff       	call   4560 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()@plt>
   2a37e:	e8 cd a2 fd ff       	call   4650 <__cxa_rethrow@plt>
   2a383:	48 89 c3             	mov    rbx,rax
   2a386:	e8 85 a3 fd ff       	call   4710 <__cxa_end_catch@plt>
   2a38b:	48 89 d8             	mov    rax,rbx
   2a38e:	48 89 c7             	mov    rdi,rax
   2a391:	e8 ca a3 fd ff       	call   4760 <_Unwind_Resume@plt>
   2a396:	e8 45 a1 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2a39b:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2a39f:	c9                   	leave  
   2a3a0:	c3                   	ret    

000000000002a3a1 <std::filesystem::__cxx11::path::_List::_Impl*& std::__get_helper<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>:
   2a3a1:	55                   	push   rbp
   2a3a2:	48 89 e5             	mov    rbp,rsp
   2a3a5:	48 83 ec 10          	sub    rsp,0x10
   2a3a9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a3ad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a3b1:	48 89 c7             	mov    rdi,rax
   2a3b4:	e8 36 e8 ff ff       	call   28bef <std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head(std::_Tuple_impl<0ul, std::filesystem::__cxx11::path::_List::_Impl*, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>
   2a3b9:	c9                   	leave  
   2a3ba:	c3                   	ret    

000000000002a3bb <std::_Head_base<0ul, std::filesystem::__cxx11::path::_List::_Impl*, false>::_M_head(std::_Head_base<0ul, std::filesystem::__cxx11::path::_List::_Impl*, false>&)>:
   2a3bb:	55                   	push   rbp
   2a3bc:	48 89 e5             	mov    rbp,rsp
   2a3bf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a3c3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a3c7:	5d                   	pop    rbp
   2a3c8:	c3                   	ret    

000000000002a3c9 <std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head(std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>:
   2a3c9:	55                   	push   rbp
   2a3ca:	48 89 e5             	mov    rbp,rsp
   2a3cd:	48 83 ec 10          	sub    rsp,0x10
   2a3d1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a3d5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a3d9:	48 89 c7             	mov    rdi,rax
   2a3dc:	e8 c5 0d 00 00       	call   2b1a6 <std::_Head_base<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>::_M_head(std::_Head_base<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>&)>
   2a3e1:	c9                   	leave  
   2a3e2:	c3                   	ret    

000000000002a3e3 <std::filesystem::__cxx11::path::_List::_Impl_deleter& std::__get_helper<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>(std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>:
   2a3e3:	55                   	push   rbp
   2a3e4:	48 89 e5             	mov    rbp,rsp
   2a3e7:	48 83 ec 10          	sub    rsp,0x10
   2a3eb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a3ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a3f3:	48 89 c7             	mov    rdi,rax
   2a3f6:	e8 ce ff ff ff       	call   2a3c9 <std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>::_M_head(std::_Tuple_impl<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter>&)>
   2a3fb:	c9                   	leave  
   2a3fc:	c3                   	ret    

000000000002a3fd <glm::vec<2, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, glm::vec<2, float, (glm::qualifier)0> const&)>:
   2a3fd:	55                   	push   rbp
   2a3fe:	48 89 e5             	mov    rbp,rsp
   2a401:	48 83 ec 20          	sub    rsp,0x20
   2a405:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a409:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2a40d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a416:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2a41a:	31 c0                	xor    eax,eax
   2a41c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2a420:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2a425:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a429:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2a42e:	0f 28 d1             	movaps xmm2,xmm1
   2a431:	f3 0f 59 d0          	mulss  xmm2,xmm0
   2a435:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2a439:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2a43d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a441:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2a445:	f3 0f 59 c8          	mulss  xmm1,xmm0
   2a449:	66 0f 7e ca          	movd   edx,xmm1
   2a44d:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2a451:	0f 28 ca             	movaps xmm1,xmm2
   2a454:	66 0f 6e c2          	movd   xmm0,edx
   2a458:	48 89 c7             	mov    rdi,rax
   2a45b:	e8 12 b0 ff ff       	call   25472 <glm::vec<2, float, (glm::qualifier)0>::vec(float, float)>
   2a460:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a464:	48 89 c2             	mov    rdx,rax
   2a467:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a46b:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2a474:	74 05                	je     2a47b <glm::vec<2, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, glm::vec<2, float, (glm::qualifier)0> const&)+0x7e>
   2a476:	e8 65 a0 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2a47b:	66 48 0f 6e c2       	movq   xmm0,rdx
   2a480:	c9                   	leave  
   2a481:	c3                   	ret    

000000000002a482 <glm::detail::compute_dot<glm::vec<2, float, (glm::qualifier)0>, float, false>::call(glm::vec<2, float, (glm::qualifier)0> const&, glm::vec<2, float, (glm::qualifier)0> const&)>:
   2a482:	55                   	push   rbp
   2a483:	48 89 e5             	mov    rbp,rsp
   2a486:	48 83 ec 20          	sub    rsp,0x20
   2a48a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a48e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2a492:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2a496:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2a49a:	48 89 d6             	mov    rsi,rdx
   2a49d:	48 89 c7             	mov    rdi,rax
   2a4a0:	e8 58 ff ff ff       	call   2a3fd <glm::vec<2, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::vec<2, float, (glm::qualifier)0> const&, glm::vec<2, float, (glm::qualifier)0> const&)>
   2a4a5:	66 48 0f 7e c0       	movq   rax,xmm0
   2a4aa:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2a4ae:	f3 0f 10 4d f8       	movss  xmm1,DWORD PTR [rbp-0x8]
   2a4b3:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   2a4b8:	f3 0f 58 c1          	addss  xmm0,xmm1
   2a4bc:	c9                   	leave  
   2a4bd:	c3                   	ret    

000000000002a4be <__gnu_cxx::new_allocator<Tex>::deallocate(Tex*, unsigned long)>:
   2a4be:	55                   	push   rbp
   2a4bf:	48 89 e5             	mov    rbp,rsp
   2a4c2:	48 83 ec 20          	sub    rsp,0x20
   2a4c6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a4ca:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a4ce:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a4d2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a4d6:	48 89 d0             	mov    rax,rdx
   2a4d9:	48 01 c0             	add    rax,rax
   2a4dc:	48 01 d0             	add    rax,rdx
   2a4df:	48 c1 e0 03          	shl    rax,0x3
   2a4e3:	48 89 c2             	mov    rdx,rax
   2a4e6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a4ea:	48 89 d6             	mov    rsi,rdx
   2a4ed:	48 89 c7             	mov    rdi,rax
   2a4f0:	e8 4b 9f fd ff       	call   4440 <operator delete(void*, unsigned long)@plt>
   2a4f5:	c9                   	leave  
   2a4f6:	c3                   	ret    

000000000002a4f7 <void std::_Destroy_aux<true>::__destroy<Tex*>(Tex*, Tex*)>:
   2a4f7:	55                   	push   rbp
   2a4f8:	48 89 e5             	mov    rbp,rsp
   2a4fb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a4ff:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a503:	90                   	nop
   2a504:	5d                   	pop    rbp
   2a505:	c3                   	ret    

000000000002a506 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>:
   2a506:	55                   	push   rbp
   2a507:	48 89 e5             	mov    rbp,rsp
   2a50a:	48 83 ec 20          	sub    rsp,0x20
   2a50e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a512:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a516:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a51a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2a51e:	48 c1 e0 05          	shl    rax,0x5
   2a522:	48 89 c2             	mov    rdx,rax
   2a525:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a529:	48 89 d6             	mov    rsi,rdx
   2a52c:	48 89 c7             	mov    rdi,rax
   2a52f:	e8 0c 9f fd ff       	call   4440 <operator delete(void*, unsigned long)@plt>
   2a534:	c9                   	leave  
   2a535:	c3                   	ret    

000000000002a536 <void std::_Destroy_aux<false>::__destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
   2a536:	55                   	push   rbp
   2a537:	48 89 e5             	mov    rbp,rsp
   2a53a:	48 83 ec 10          	sub    rsp,0x10
   2a53e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a542:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a546:	eb 19                	jmp    2a561 <void std::_Destroy_aux<false>::__destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)+0x2b>
   2a548:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a54c:	48 89 c7             	mov    rdi,rax
   2a54f:	e8 99 b5 ff ff       	call   25aed <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2a554:	48 89 c7             	mov    rdi,rax
   2a557:	e8 58 0c 00 00       	call   2b1b4 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   2a55c:	48 83 45 f8 20       	add    QWORD PTR [rbp-0x8],0x20
   2a561:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a565:	48 3b 45 f0          	cmp    rax,QWORD PTR [rbp-0x10]
   2a569:	75 dd                	jne    2a548 <void std::_Destroy_aux<false>::__destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)+0x12>
   2a56b:	90                   	nop
   2a56c:	90                   	nop
   2a56d:	c9                   	leave  
   2a56e:	c3                   	ret    
   2a56f:	90                   	nop

000000000002a570 <void __gnu_cxx::new_allocator<AABB>::construct<AABB, AABB>(AABB*, AABB&&)>:
   2a570:	55                   	push   rbp
   2a571:	48 89 e5             	mov    rbp,rsp
   2a574:	53                   	push   rbx
   2a575:	48 83 ec 28          	sub    rsp,0x28
   2a579:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a57d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2a581:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2a585:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a589:	48 89 c7             	mov    rdi,rax
   2a58c:	e8 92 e8 ff ff       	call   28e23 <AABB&& std::forward<AABB>(std::remove_reference<AABB>::type&)>
   2a591:	48 89 c3             	mov    rbx,rax
   2a594:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a598:	48 89 c6             	mov    rsi,rax
   2a59b:	bf 18 00 00 00       	mov    edi,0x18
   2a5a0:	e8 0c ac ff ff       	call   251b1 <operator new(unsigned long, void*)>
   2a5a5:	48 89 c1             	mov    rcx,rax
   2a5a8:	48 8b 03             	mov    rax,QWORD PTR [rbx]
   2a5ab:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
   2a5af:	48 89 01             	mov    QWORD PTR [rcx],rax
   2a5b2:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   2a5b6:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
   2a5ba:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   2a5be:	90                   	nop
   2a5bf:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2a5c3:	c9                   	leave  
   2a5c4:	c3                   	ret    
   2a5c5:	90                   	nop

000000000002a5c6 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::__normal_iterator(AABB* const&)>:
   2a5c6:	55                   	push   rbp
   2a5c7:	48 89 e5             	mov    rbp,rsp
   2a5ca:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a5ce:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a5d2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a5d6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2a5d9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a5dd:	48 89 10             	mov    QWORD PTR [rax],rdx
   2a5e0:	90                   	nop
   2a5e1:	5d                   	pop    rbp
   2a5e2:	c3                   	ret    
   2a5e3:	90                   	nop

000000000002a5e4 <std::vector<AABB, std::allocator<AABB> >::_M_check_len(unsigned long, char const*) const>:
   2a5e4:	55                   	push   rbp
   2a5e5:	48 89 e5             	mov    rbp,rsp
   2a5e8:	53                   	push   rbx
   2a5e9:	48 83 ec 48          	sub    rsp,0x48
   2a5ed:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   2a5f1:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   2a5f5:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   2a5f9:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a602:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2a606:	31 c0                	xor    eax,eax
   2a608:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a60c:	48 89 c7             	mov    rdi,rax
   2a60f:	e8 bc 0b 00 00       	call   2b1d0 <std::vector<AABB, std::allocator<AABB> >::max_size() const>
   2a614:	48 89 c3             	mov    rbx,rax
   2a617:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a61b:	48 89 c7             	mov    rdi,rax
   2a61e:	e8 cb cb ff ff       	call   271ee <std::vector<AABB, std::allocator<AABB> >::size() const>
   2a623:	48 29 c3             	sub    rbx,rax
   2a626:	48 89 da             	mov    rdx,rbx
   2a629:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2a62d:	48 39 c2             	cmp    rdx,rax
   2a630:	0f 92 c0             	setb   al
   2a633:	84 c0                	test   al,al
   2a635:	74 0c                	je     2a643 <std::vector<AABB, std::allocator<AABB> >::_M_check_len(unsigned long, char const*) const+0x5f>
   2a637:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2a63b:	48 89 c7             	mov    rdi,rax
   2a63e:	e8 8d 9b fd ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   2a643:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a647:	48 89 c7             	mov    rdi,rax
   2a64a:	e8 9f cb ff ff       	call   271ee <std::vector<AABB, std::allocator<AABB> >::size() const>
   2a64f:	48 89 c3             	mov    rbx,rax
   2a652:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a656:	48 89 c7             	mov    rdi,rax
   2a659:	e8 90 cb ff ff       	call   271ee <std::vector<AABB, std::allocator<AABB> >::size() const>
   2a65e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2a662:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2a666:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   2a66a:	48 89 d6             	mov    rsi,rdx
   2a66d:	48 89 c7             	mov    rdi,rax
   2a670:	e8 b9 b4 ff ff       	call   25b2e <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   2a675:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2a678:	48 01 d8             	add    rax,rbx
   2a67b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2a67f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a683:	48 89 c7             	mov    rdi,rax
   2a686:	e8 63 cb ff ff       	call   271ee <std::vector<AABB, std::allocator<AABB> >::size() const>
   2a68b:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   2a68f:	72 12                	jb     2a6a3 <std::vector<AABB, std::allocator<AABB> >::_M_check_len(unsigned long, char const*) const+0xbf>
   2a691:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a695:	48 89 c7             	mov    rdi,rax
   2a698:	e8 33 0b 00 00       	call   2b1d0 <std::vector<AABB, std::allocator<AABB> >::max_size() const>
   2a69d:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   2a6a1:	76 0e                	jbe    2a6b1 <std::vector<AABB, std::allocator<AABB> >::_M_check_len(unsigned long, char const*) const+0xcd>
   2a6a3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a6a7:	48 89 c7             	mov    rdi,rax
   2a6aa:	e8 21 0b 00 00       	call   2b1d0 <std::vector<AABB, std::allocator<AABB> >::max_size() const>
   2a6af:	eb 04                	jmp    2a6b5 <std::vector<AABB, std::allocator<AABB> >::_M_check_len(unsigned long, char const*) const+0xd1>
   2a6b1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a6b5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a6b9:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2a6c2:	74 05                	je     2a6c9 <std::vector<AABB, std::allocator<AABB> >::_M_check_len(unsigned long, char const*) const+0xe5>
   2a6c4:	e8 17 9e fd ff       	call   44e0 <__stack_chk_fail@plt>
   2a6c9:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2a6cd:	c9                   	leave  
   2a6ce:	c3                   	ret    
   2a6cf:	90                   	nop

000000000002a6d0 <std::vector<AABB, std::allocator<AABB> >::begin()>:
   2a6d0:	55                   	push   rbp
   2a6d1:	48 89 e5             	mov    rbp,rsp
   2a6d4:	48 83 ec 20          	sub    rsp,0x20
   2a6d8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a6dc:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a6e5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2a6e9:	31 c0                	xor    eax,eax
   2a6eb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a6ef:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2a6f3:	48 89 d6             	mov    rsi,rdx
   2a6f6:	48 89 c7             	mov    rdi,rax
   2a6f9:	e8 c8 fe ff ff       	call   2a5c6 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::__normal_iterator(AABB* const&)>
   2a6fe:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a702:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2a706:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2a70f:	74 05                	je     2a716 <std::vector<AABB, std::allocator<AABB> >::begin()+0x46>
   2a711:	e8 ca 9d fd ff       	call   44e0 <__stack_chk_fail@plt>
   2a716:	c9                   	leave  
   2a717:	c3                   	ret    

000000000002a718 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::difference_type __gnu_cxx::operator-<AABB*, std::vector<AABB, std::allocator<AABB> > >(__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > > const&, __gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > > const&)>:
   2a718:	55                   	push   rbp
   2a719:	48 89 e5             	mov    rbp,rsp
   2a71c:	53                   	push   rbx
   2a71d:	48 83 ec 18          	sub    rsp,0x18
   2a721:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a725:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2a729:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2a72d:	48 89 c7             	mov    rdi,rax
   2a730:	e8 99 00 00 00       	call   2a7ce <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::base() const>
   2a735:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   2a738:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a73c:	48 89 c7             	mov    rdi,rax
   2a73f:	e8 8a 00 00 00       	call   2a7ce <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::base() const>
   2a744:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2a747:	48 89 d8             	mov    rax,rbx
   2a74a:	48 29 d0             	sub    rax,rdx
   2a74d:	48 c1 f8 03          	sar    rax,0x3
   2a751:	48 89 c2             	mov    rdx,rax
   2a754:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   2a75e:	48 0f af c2          	imul   rax,rdx
   2a762:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2a766:	c9                   	leave  
   2a767:	c3                   	ret    

000000000002a768 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_allocate(unsigned long)>:
   2a768:	55                   	push   rbp
   2a769:	48 89 e5             	mov    rbp,rsp
   2a76c:	48 83 ec 10          	sub    rsp,0x10
   2a770:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a774:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a778:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   2a77d:	74 15                	je     2a794 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_allocate(unsigned long)+0x2c>
   2a77f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a783:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2a787:	48 89 d6             	mov    rsi,rdx
   2a78a:	48 89 c7             	mov    rdi,rax
   2a78d:	e8 60 0a 00 00       	call   2b1f2 <std::allocator_traits<std::allocator<AABB> >::allocate(std::allocator<AABB>&, unsigned long)>
   2a792:	eb 05                	jmp    2a799 <std::_Vector_base<AABB, std::allocator<AABB> >::_M_allocate(unsigned long)+0x31>
   2a794:	b8 00 00 00 00       	mov    eax,0x0
   2a799:	c9                   	leave  
   2a79a:	c3                   	ret    

000000000002a79b <std::vector<AABB, std::allocator<AABB> >::_S_relocate(AABB*, AABB*, AABB*, std::allocator<AABB>&)>:
   2a79b:	55                   	push   rbp
   2a79c:	48 89 e5             	mov    rbp,rsp
   2a79f:	48 83 ec 20          	sub    rsp,0x20
   2a7a3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a7a7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a7ab:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2a7af:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2a7b3:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2a7b7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a7bb:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2a7bf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a7c3:	48 89 c7             	mov    rdi,rax
   2a7c6:	e8 51 0a 00 00       	call   2b21c <std::vector<AABB, std::allocator<AABB> >::_S_do_relocate(AABB*, AABB*, AABB*, std::allocator<AABB>&, std::integral_constant<bool, true>)>
   2a7cb:	c9                   	leave  
   2a7cc:	c3                   	ret    
   2a7cd:	90                   	nop

000000000002a7ce <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::base() const>:
   2a7ce:	55                   	push   rbp
   2a7cf:	48 89 e5             	mov    rbp,rsp
   2a7d2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a7d6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a7da:	5d                   	pop    rbp
   2a7db:	c3                   	ret    

000000000002a7dc <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::operator-(long) const>:
   2a7dc:	55                   	push   rbp
   2a7dd:	48 89 e5             	mov    rbp,rsp
   2a7e0:	48 83 ec 30          	sub    rsp,0x30
   2a7e4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2a7e8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2a7ec:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a7f5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2a7f9:	31 c0                	xor    eax,eax
   2a7fb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a7ff:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2a802:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   2a806:	48 89 d0             	mov    rax,rdx
   2a809:	48 01 c0             	add    rax,rax
   2a80c:	48 01 d0             	add    rax,rdx
   2a80f:	48 c1 e0 03          	shl    rax,0x3
   2a813:	48 f7 d8             	neg    rax
   2a816:	48 01 c8             	add    rax,rcx
   2a819:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2a81d:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   2a821:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2a825:	48 89 d6             	mov    rsi,rdx
   2a828:	48 89 c7             	mov    rdi,rax
   2a82b:	e8 96 fd ff ff       	call   2a5c6 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::__normal_iterator(AABB* const&)>
   2a830:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a834:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2a838:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2a841:	74 05                	je     2a848 <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::operator-(long) const+0x6c>
   2a843:	e8 98 9c fd ff       	call   44e0 <__stack_chk_fail@plt>
   2a848:	c9                   	leave  
   2a849:	c3                   	ret    

000000000002a84a <__gnu_cxx::__normal_iterator<AABB*, std::vector<AABB, std::allocator<AABB> > >::operator*() const>:
   2a84a:	55                   	push   rbp
   2a84b:	48 89 e5             	mov    rbp,rsp
   2a84e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a852:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a856:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2a859:	5d                   	pop    rbp
   2a85a:	c3                   	ret    
   2a85b:	90                   	nop

000000000002a85c <void __gnu_cxx::new_allocator<Mesh>::construct<Mesh, Mesh>(Mesh*, Mesh&&)>:
   2a85c:	55                   	push   rbp
   2a85d:	48 89 e5             	mov    rbp,rsp
   2a860:	53                   	push   rbx
   2a861:	48 83 ec 28          	sub    rsp,0x28
   2a865:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a869:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2a86d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2a871:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2a875:	48 89 c7             	mov    rdi,rax
   2a878:	e8 75 e8 ff ff       	call   290f2 <Mesh&& std::forward<Mesh>(std::remove_reference<Mesh>::type&)>
   2a87d:	48 89 c3             	mov    rbx,rax
   2a880:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a884:	48 89 c6             	mov    rsi,rax
   2a887:	bf 04 00 00 00       	mov    edi,0x4
   2a88c:	e8 20 a9 ff ff       	call   251b1 <operator new(unsigned long, void*)>
   2a891:	8b 13                	mov    edx,DWORD PTR [rbx]
   2a893:	89 10                	mov    DWORD PTR [rax],edx
   2a895:	90                   	nop
   2a896:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2a89a:	c9                   	leave  
   2a89b:	c3                   	ret    

000000000002a89c <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::__normal_iterator(Mesh* const&)>:
   2a89c:	55                   	push   rbp
   2a89d:	48 89 e5             	mov    rbp,rsp
   2a8a0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2a8a4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2a8a8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a8ac:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2a8af:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2a8b3:	48 89 10             	mov    QWORD PTR [rax],rdx
   2a8b6:	90                   	nop
   2a8b7:	5d                   	pop    rbp
   2a8b8:	c3                   	ret    
   2a8b9:	90                   	nop

000000000002a8ba <std::vector<Mesh, std::allocator<Mesh> >::_M_check_len(unsigned long, char const*) const>:
   2a8ba:	55                   	push   rbp
   2a8bb:	48 89 e5             	mov    rbp,rsp
   2a8be:	53                   	push   rbx
   2a8bf:	48 83 ec 48          	sub    rsp,0x48
   2a8c3:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   2a8c7:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   2a8cb:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   2a8cf:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a8d8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2a8dc:	31 c0                	xor    eax,eax
   2a8de:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a8e2:	48 89 c7             	mov    rdi,rax
   2a8e5:	e8 64 09 00 00       	call   2b24e <std::vector<Mesh, std::allocator<Mesh> >::max_size() const>
   2a8ea:	48 89 c3             	mov    rbx,rax
   2a8ed:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a8f1:	48 89 c7             	mov    rdi,rax
   2a8f4:	e8 29 c9 ff ff       	call   27222 <std::vector<Mesh, std::allocator<Mesh> >::size() const>
   2a8f9:	48 29 c3             	sub    rbx,rax
   2a8fc:	48 89 da             	mov    rdx,rbx
   2a8ff:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2a903:	48 39 c2             	cmp    rdx,rax
   2a906:	0f 92 c0             	setb   al
   2a909:	84 c0                	test   al,al
   2a90b:	74 0c                	je     2a919 <std::vector<Mesh, std::allocator<Mesh> >::_M_check_len(unsigned long, char const*) const+0x5f>
   2a90d:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2a911:	48 89 c7             	mov    rdi,rax
   2a914:	e8 b7 98 fd ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   2a919:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a91d:	48 89 c7             	mov    rdi,rax
   2a920:	e8 fd c8 ff ff       	call   27222 <std::vector<Mesh, std::allocator<Mesh> >::size() const>
   2a925:	48 89 c3             	mov    rbx,rax
   2a928:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a92c:	48 89 c7             	mov    rdi,rax
   2a92f:	e8 ee c8 ff ff       	call   27222 <std::vector<Mesh, std::allocator<Mesh> >::size() const>
   2a934:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2a938:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2a93c:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   2a940:	48 89 d6             	mov    rsi,rdx
   2a943:	48 89 c7             	mov    rdi,rax
   2a946:	e8 e3 b1 ff ff       	call   25b2e <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   2a94b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2a94e:	48 01 d8             	add    rax,rbx
   2a951:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2a955:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a959:	48 89 c7             	mov    rdi,rax
   2a95c:	e8 c1 c8 ff ff       	call   27222 <std::vector<Mesh, std::allocator<Mesh> >::size() const>
   2a961:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   2a965:	72 12                	jb     2a979 <std::vector<Mesh, std::allocator<Mesh> >::_M_check_len(unsigned long, char const*) const+0xbf>
   2a967:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a96b:	48 89 c7             	mov    rdi,rax
   2a96e:	e8 db 08 00 00       	call   2b24e <std::vector<Mesh, std::allocator<Mesh> >::max_size() const>
   2a973:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   2a977:	76 0e                	jbe    2a987 <std::vector<Mesh, std::allocator<Mesh> >::_M_check_len(unsigned long, char const*) const+0xcd>
   2a979:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2a97d:	48 89 c7             	mov    rdi,rax
   2a980:	e8 c9 08 00 00       	call   2b24e <std::vector<Mesh, std::allocator<Mesh> >::max_size() const>
   2a985:	eb 04                	jmp    2a98b <std::vector<Mesh, std::allocator<Mesh> >::_M_check_len(unsigned long, char const*) const+0xd1>
   2a987:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2a98b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a98f:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2a998:	74 05                	je     2a99f <std::vector<Mesh, std::allocator<Mesh> >::_M_check_len(unsigned long, char const*) const+0xe5>
   2a99a:	e8 41 9b fd ff       	call   44e0 <__stack_chk_fail@plt>
   2a99f:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2a9a3:	c9                   	leave  
   2a9a4:	c3                   	ret    
   2a9a5:	90                   	nop

000000000002a9a6 <std::vector<Mesh, std::allocator<Mesh> >::begin()>:
   2a9a6:	55                   	push   rbp
   2a9a7:	48 89 e5             	mov    rbp,rsp
   2a9aa:	48 83 ec 20          	sub    rsp,0x20
   2a9ae:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a9b2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2a9bb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2a9bf:	31 c0                	xor    eax,eax
   2a9c1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2a9c5:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2a9c9:	48 89 d6             	mov    rsi,rdx
   2a9cc:	48 89 c7             	mov    rdi,rax
   2a9cf:	e8 c8 fe ff ff       	call   2a89c <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::__normal_iterator(Mesh* const&)>
   2a9d4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2a9d8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2a9dc:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2a9e5:	74 05                	je     2a9ec <std::vector<Mesh, std::allocator<Mesh> >::begin()+0x46>
   2a9e7:	e8 f4 9a fd ff       	call   44e0 <__stack_chk_fail@plt>
   2a9ec:	c9                   	leave  
   2a9ed:	c3                   	ret    

000000000002a9ee <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::difference_type __gnu_cxx::operator-<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >(__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > > const&, __gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > > const&)>:
   2a9ee:	55                   	push   rbp
   2a9ef:	48 89 e5             	mov    rbp,rsp
   2a9f2:	53                   	push   rbx
   2a9f3:	48 83 ec 18          	sub    rsp,0x18
   2a9f7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2a9fb:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2a9ff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2aa03:	48 89 c7             	mov    rdi,rax
   2aa06:	e8 89 00 00 00       	call   2aa94 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::base() const>
   2aa0b:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   2aa0e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2aa12:	48 89 c7             	mov    rdi,rax
   2aa15:	e8 7a 00 00 00       	call   2aa94 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::base() const>
   2aa1a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2aa1d:	48 89 d8             	mov    rax,rbx
   2aa20:	48 29 d0             	sub    rax,rdx
   2aa23:	48 c1 f8 02          	sar    rax,0x2
   2aa27:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2aa2b:	c9                   	leave  
   2aa2c:	c3                   	ret    
   2aa2d:	90                   	nop

000000000002aa2e <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_allocate(unsigned long)>:
   2aa2e:	55                   	push   rbp
   2aa2f:	48 89 e5             	mov    rbp,rsp
   2aa32:	48 83 ec 10          	sub    rsp,0x10
   2aa36:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2aa3a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2aa3e:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   2aa43:	74 15                	je     2aa5a <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_allocate(unsigned long)+0x2c>
   2aa45:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2aa49:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2aa4d:	48 89 d6             	mov    rsi,rdx
   2aa50:	48 89 c7             	mov    rdi,rax
   2aa53:	e8 18 08 00 00       	call   2b270 <std::allocator_traits<std::allocator<Mesh> >::allocate(std::allocator<Mesh>&, unsigned long)>
   2aa58:	eb 05                	jmp    2aa5f <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_allocate(unsigned long)+0x31>
   2aa5a:	b8 00 00 00 00       	mov    eax,0x0
   2aa5f:	c9                   	leave  
   2aa60:	c3                   	ret    

000000000002aa61 <std::vector<Mesh, std::allocator<Mesh> >::_S_relocate(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)>:
   2aa61:	55                   	push   rbp
   2aa62:	48 89 e5             	mov    rbp,rsp
   2aa65:	48 83 ec 20          	sub    rsp,0x20
   2aa69:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2aa6d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2aa71:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2aa75:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2aa79:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2aa7d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2aa81:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2aa85:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2aa89:	48 89 c7             	mov    rdi,rax
   2aa8c:	e8 09 08 00 00       	call   2b29a <std::vector<Mesh, std::allocator<Mesh> >::_S_do_relocate(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&, std::integral_constant<bool, true>)>
   2aa91:	c9                   	leave  
   2aa92:	c3                   	ret    
   2aa93:	90                   	nop

000000000002aa94 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::base() const>:
   2aa94:	55                   	push   rbp
   2aa95:	48 89 e5             	mov    rbp,rsp
   2aa98:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2aa9c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2aaa0:	5d                   	pop    rbp
   2aaa1:	c3                   	ret    

000000000002aaa2 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::operator-(long) const>:
   2aaa2:	55                   	push   rbp
   2aaa3:	48 89 e5             	mov    rbp,rsp
   2aaa6:	48 83 ec 30          	sub    rsp,0x30
   2aaaa:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2aaae:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2aab2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2aabb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2aabf:	31 c0                	xor    eax,eax
   2aac1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2aac5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2aac8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2aacc:	48 c1 e0 02          	shl    rax,0x2
   2aad0:	48 f7 d8             	neg    rax
   2aad3:	48 01 d0             	add    rax,rdx
   2aad6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2aada:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   2aade:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2aae2:	48 89 d6             	mov    rsi,rdx
   2aae5:	48 89 c7             	mov    rdi,rax
   2aae8:	e8 af fd ff ff       	call   2a89c <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::__normal_iterator(Mesh* const&)>
   2aaed:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2aaf1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2aaf5:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2aafe:	74 05                	je     2ab05 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::operator-(long) const+0x63>
   2ab00:	e8 db 99 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2ab05:	c9                   	leave  
   2ab06:	c3                   	ret    
   2ab07:	90                   	nop

000000000002ab08 <__gnu_cxx::__normal_iterator<Mesh*, std::vector<Mesh, std::allocator<Mesh> > >::operator*() const>:
   2ab08:	55                   	push   rbp
   2ab09:	48 89 e5             	mov    rbp,rsp
   2ab0c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ab10:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ab14:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2ab17:	5d                   	pop    rbp
   2ab18:	c3                   	ret    
   2ab19:	90                   	nop

000000000002ab1a <void __gnu_cxx::new_allocator<Transform>::construct<Transform, Transform>(Transform*, Transform&&)>:
   2ab1a:	55                   	push   rbp
   2ab1b:	48 89 e5             	mov    rbp,rsp
   2ab1e:	53                   	push   rbx
   2ab1f:	48 83 ec 28          	sub    rsp,0x28
   2ab23:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2ab27:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2ab2b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2ab2f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2ab33:	48 89 c7             	mov    rdi,rax
   2ab36:	e8 63 e8 ff ff       	call   2939e <Transform&& std::forward<Transform>(std::remove_reference<Transform>::type&)>
   2ab3b:	48 89 c3             	mov    rbx,rax
   2ab3e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2ab42:	48 89 c6             	mov    rsi,rax
   2ab45:	bf 24 00 00 00       	mov    edi,0x24
   2ab4a:	e8 62 a6 ff ff       	call   251b1 <operator new(unsigned long, void*)>
   2ab4f:	48 8b 33             	mov    rsi,QWORD PTR [rbx]
   2ab52:	48 8b 7b 08          	mov    rdi,QWORD PTR [rbx+0x8]
   2ab56:	48 89 30             	mov    QWORD PTR [rax],rsi
   2ab59:	48 89 78 08          	mov    QWORD PTR [rax+0x8],rdi
   2ab5d:	48 8b 73 10          	mov    rsi,QWORD PTR [rbx+0x10]
   2ab61:	48 8b 7b 18          	mov    rdi,QWORD PTR [rbx+0x18]
   2ab65:	48 89 70 10          	mov    QWORD PTR [rax+0x10],rsi
   2ab69:	48 89 78 18          	mov    QWORD PTR [rax+0x18],rdi
   2ab6d:	8b 53 20             	mov    edx,DWORD PTR [rbx+0x20]
   2ab70:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
   2ab73:	90                   	nop
   2ab74:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2ab78:	c9                   	leave  
   2ab79:	c3                   	ret    

000000000002ab7a <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::__normal_iterator(Transform* const&)>:
   2ab7a:	55                   	push   rbp
   2ab7b:	48 89 e5             	mov    rbp,rsp
   2ab7e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ab82:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2ab86:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2ab8a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2ab8d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ab91:	48 89 10             	mov    QWORD PTR [rax],rdx
   2ab94:	90                   	nop
   2ab95:	5d                   	pop    rbp
   2ab96:	c3                   	ret    
   2ab97:	90                   	nop

000000000002ab98 <std::vector<Transform, std::allocator<Transform> >::_M_check_len(unsigned long, char const*) const>:
   2ab98:	55                   	push   rbp
   2ab99:	48 89 e5             	mov    rbp,rsp
   2ab9c:	53                   	push   rbx
   2ab9d:	48 83 ec 48          	sub    rsp,0x48
   2aba1:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   2aba5:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   2aba9:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   2abad:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2abb6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2abba:	31 c0                	xor    eax,eax
   2abbc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2abc0:	48 89 c7             	mov    rdi,rax
   2abc3:	e8 04 07 00 00       	call   2b2cc <std::vector<Transform, std::allocator<Transform> >::max_size() const>
   2abc8:	48 89 c3             	mov    rbx,rax
   2abcb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2abcf:	48 89 c7             	mov    rdi,rax
   2abd2:	e8 6f c6 ff ff       	call   27246 <std::vector<Transform, std::allocator<Transform> >::size() const>
   2abd7:	48 29 c3             	sub    rbx,rax
   2abda:	48 89 da             	mov    rdx,rbx
   2abdd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2abe1:	48 39 c2             	cmp    rdx,rax
   2abe4:	0f 92 c0             	setb   al
   2abe7:	84 c0                	test   al,al
   2abe9:	74 0c                	je     2abf7 <std::vector<Transform, std::allocator<Transform> >::_M_check_len(unsigned long, char const*) const+0x5f>
   2abeb:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   2abef:	48 89 c7             	mov    rdi,rax
   2abf2:	e8 d9 95 fd ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   2abf7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2abfb:	48 89 c7             	mov    rdi,rax
   2abfe:	e8 43 c6 ff ff       	call   27246 <std::vector<Transform, std::allocator<Transform> >::size() const>
   2ac03:	48 89 c3             	mov    rbx,rax
   2ac06:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2ac0a:	48 89 c7             	mov    rdi,rax
   2ac0d:	e8 34 c6 ff ff       	call   27246 <std::vector<Transform, std::allocator<Transform> >::size() const>
   2ac12:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2ac16:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2ac1a:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   2ac1e:	48 89 d6             	mov    rsi,rdx
   2ac21:	48 89 c7             	mov    rdi,rax
   2ac24:	e8 05 af ff ff       	call   25b2e <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   2ac29:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2ac2c:	48 01 d8             	add    rax,rbx
   2ac2f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2ac33:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2ac37:	48 89 c7             	mov    rdi,rax
   2ac3a:	e8 07 c6 ff ff       	call   27246 <std::vector<Transform, std::allocator<Transform> >::size() const>
   2ac3f:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   2ac43:	72 12                	jb     2ac57 <std::vector<Transform, std::allocator<Transform> >::_M_check_len(unsigned long, char const*) const+0xbf>
   2ac45:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2ac49:	48 89 c7             	mov    rdi,rax
   2ac4c:	e8 7b 06 00 00       	call   2b2cc <std::vector<Transform, std::allocator<Transform> >::max_size() const>
   2ac51:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   2ac55:	76 0e                	jbe    2ac65 <std::vector<Transform, std::allocator<Transform> >::_M_check_len(unsigned long, char const*) const+0xcd>
   2ac57:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2ac5b:	48 89 c7             	mov    rdi,rax
   2ac5e:	e8 69 06 00 00       	call   2b2cc <std::vector<Transform, std::allocator<Transform> >::max_size() const>
   2ac63:	eb 04                	jmp    2ac69 <std::vector<Transform, std::allocator<Transform> >::_M_check_len(unsigned long, char const*) const+0xd1>
   2ac65:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2ac69:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2ac6d:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2ac76:	74 05                	je     2ac7d <std::vector<Transform, std::allocator<Transform> >::_M_check_len(unsigned long, char const*) const+0xe5>
   2ac78:	e8 63 98 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2ac7d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2ac81:	c9                   	leave  
   2ac82:	c3                   	ret    
   2ac83:	90                   	nop

000000000002ac84 <std::vector<Transform, std::allocator<Transform> >::begin()>:
   2ac84:	55                   	push   rbp
   2ac85:	48 89 e5             	mov    rbp,rsp
   2ac88:	48 83 ec 20          	sub    rsp,0x20
   2ac8c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2ac90:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2ac99:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2ac9d:	31 c0                	xor    eax,eax
   2ac9f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2aca3:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2aca7:	48 89 d6             	mov    rsi,rdx
   2acaa:	48 89 c7             	mov    rdi,rax
   2acad:	e8 c8 fe ff ff       	call   2ab7a <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::__normal_iterator(Transform* const&)>
   2acb2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2acb6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2acba:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2acc3:	74 05                	je     2acca <std::vector<Transform, std::allocator<Transform> >::begin()+0x46>
   2acc5:	e8 16 98 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2acca:	c9                   	leave  
   2accb:	c3                   	ret    

000000000002accc <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::difference_type __gnu_cxx::operator-<Transform*, std::vector<Transform, std::allocator<Transform> > >(__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > > const&, __gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > > const&)>:
   2accc:	55                   	push   rbp
   2accd:	48 89 e5             	mov    rbp,rsp
   2acd0:	53                   	push   rbx
   2acd1:	48 83 ec 18          	sub    rsp,0x18
   2acd5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2acd9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2acdd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2ace1:	48 89 c7             	mov    rdi,rax
   2ace4:	e8 99 00 00 00       	call   2ad82 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::base() const>
   2ace9:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   2acec:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2acf0:	48 89 c7             	mov    rdi,rax
   2acf3:	e8 8a 00 00 00       	call   2ad82 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::base() const>
   2acf8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2acfb:	48 89 d8             	mov    rax,rbx
   2acfe:	48 29 d0             	sub    rax,rdx
   2ad01:	48 c1 f8 02          	sar    rax,0x2
   2ad05:	48 89 c2             	mov    rdx,rax
   2ad08:	48 b8 39 8e e3 38 8e e3 38 8e 	movabs rax,0x8e38e38e38e38e39
   2ad12:	48 0f af c2          	imul   rax,rdx
   2ad16:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2ad1a:	c9                   	leave  
   2ad1b:	c3                   	ret    

000000000002ad1c <std::_Vector_base<Transform, std::allocator<Transform> >::_M_allocate(unsigned long)>:
   2ad1c:	55                   	push   rbp
   2ad1d:	48 89 e5             	mov    rbp,rsp
   2ad20:	48 83 ec 10          	sub    rsp,0x10
   2ad24:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ad28:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2ad2c:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   2ad31:	74 15                	je     2ad48 <std::_Vector_base<Transform, std::allocator<Transform> >::_M_allocate(unsigned long)+0x2c>
   2ad33:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ad37:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2ad3b:	48 89 d6             	mov    rsi,rdx
   2ad3e:	48 89 c7             	mov    rdi,rax
   2ad41:	e8 a8 05 00 00       	call   2b2ee <std::allocator_traits<std::allocator<Transform> >::allocate(std::allocator<Transform>&, unsigned long)>
   2ad46:	eb 05                	jmp    2ad4d <std::_Vector_base<Transform, std::allocator<Transform> >::_M_allocate(unsigned long)+0x31>
   2ad48:	b8 00 00 00 00       	mov    eax,0x0
   2ad4d:	c9                   	leave  
   2ad4e:	c3                   	ret    

000000000002ad4f <std::vector<Transform, std::allocator<Transform> >::_S_relocate(Transform*, Transform*, Transform*, std::allocator<Transform>&)>:
   2ad4f:	55                   	push   rbp
   2ad50:	48 89 e5             	mov    rbp,rsp
   2ad53:	48 83 ec 20          	sub    rsp,0x20
   2ad57:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ad5b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2ad5f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2ad63:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2ad67:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2ad6b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2ad6f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2ad73:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ad77:	48 89 c7             	mov    rdi,rax
   2ad7a:	e8 99 05 00 00       	call   2b318 <std::vector<Transform, std::allocator<Transform> >::_S_do_relocate(Transform*, Transform*, Transform*, std::allocator<Transform>&, std::integral_constant<bool, true>)>
   2ad7f:	c9                   	leave  
   2ad80:	c3                   	ret    
   2ad81:	90                   	nop

000000000002ad82 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::base() const>:
   2ad82:	55                   	push   rbp
   2ad83:	48 89 e5             	mov    rbp,rsp
   2ad86:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ad8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ad8e:	5d                   	pop    rbp
   2ad8f:	c3                   	ret    

000000000002ad90 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::operator-(long) const>:
   2ad90:	55                   	push   rbp
   2ad91:	48 89 e5             	mov    rbp,rsp
   2ad94:	48 83 ec 30          	sub    rsp,0x30
   2ad98:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2ad9c:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2ada0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2ada9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2adad:	31 c0                	xor    eax,eax
   2adaf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2adb3:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   2adb6:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   2adba:	48 89 d0             	mov    rax,rdx
   2adbd:	48 c1 e0 03          	shl    rax,0x3
   2adc1:	48 01 d0             	add    rax,rdx
   2adc4:	48 c1 e0 02          	shl    rax,0x2
   2adc8:	48 f7 d8             	neg    rax
   2adcb:	48 01 c8             	add    rax,rcx
   2adce:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2add2:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   2add6:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2adda:	48 89 d6             	mov    rsi,rdx
   2addd:	48 89 c7             	mov    rdi,rax
   2ade0:	e8 95 fd ff ff       	call   2ab7a <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::__normal_iterator(Transform* const&)>
   2ade5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2ade9:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2aded:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2adf6:	74 05                	je     2adfd <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::operator-(long) const+0x6d>
   2adf8:	e8 e3 96 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2adfd:	c9                   	leave  
   2adfe:	c3                   	ret    
   2adff:	90                   	nop

000000000002ae00 <__gnu_cxx::__normal_iterator<Transform*, std::vector<Transform, std::allocator<Transform> > >::operator*() const>:
   2ae00:	55                   	push   rbp
   2ae01:	48 89 e5             	mov    rbp,rsp
   2ae04:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ae08:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ae0c:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2ae0f:	5d                   	pop    rbp
   2ae10:	c3                   	ret    
   2ae11:	90                   	nop

000000000002ae12 <void __gnu_cxx::new_allocator<unsigned int>::construct<unsigned int, unsigned int>(unsigned int*, unsigned int&&)>:
   2ae12:	55                   	push   rbp
   2ae13:	48 89 e5             	mov    rbp,rsp
   2ae16:	53                   	push   rbx
   2ae17:	48 83 ec 28          	sub    rsp,0x28
   2ae1b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2ae1f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2ae23:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2ae27:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2ae2b:	48 89 c7             	mov    rdi,rax
   2ae2e:	e8 3d e8 ff ff       	call   29670 <unsigned int&& std::forward<unsigned int>(std::remove_reference<unsigned int>::type&)>
   2ae33:	8b 18                	mov    ebx,DWORD PTR [rax]
   2ae35:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2ae39:	48 89 c6             	mov    rsi,rax
   2ae3c:	bf 04 00 00 00       	mov    edi,0x4
   2ae41:	e8 6b a3 ff ff       	call   251b1 <operator new(unsigned long, void*)>
   2ae46:	89 18                	mov    DWORD PTR [rax],ebx
   2ae48:	90                   	nop
   2ae49:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2ae4d:	c9                   	leave  
   2ae4e:	c3                   	ret    
   2ae4f:	90                   	nop

000000000002ae50 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator-(long) const>:
   2ae50:	55                   	push   rbp
   2ae51:	48 89 e5             	mov    rbp,rsp
   2ae54:	48 83 ec 30          	sub    rsp,0x30
   2ae58:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2ae5c:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2ae60:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2ae69:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2ae6d:	31 c0                	xor    eax,eax
   2ae6f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2ae73:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2ae76:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2ae7a:	48 c1 e0 02          	shl    rax,0x2
   2ae7e:	48 f7 d8             	neg    rax
   2ae81:	48 01 d0             	add    rax,rdx
   2ae84:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2ae88:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   2ae8c:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2ae90:	48 89 d6             	mov    rsi,rdx
   2ae93:	48 89 c7             	mov    rdi,rax
   2ae96:	e8 81 ea ff ff       	call   2991c <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int* const&)>
   2ae9b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2ae9f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2aea3:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2aeac:	74 05                	je     2aeb3 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator-(long) const+0x63>
   2aeae:	e8 2d 96 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2aeb3:	c9                   	leave  
   2aeb4:	c3                   	ret    
   2aeb5:	90                   	nop

000000000002aeb6 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator*() const>:
   2aeb6:	55                   	push   rbp
   2aeb7:	48 89 e5             	mov    rbp,rsp
   2aeba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2aebe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2aec2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2aec5:	5d                   	pop    rbp
   2aec6:	c3                   	ret    
   2aec7:	90                   	nop

000000000002aec8 <std::vector<unsigned int, std::allocator<unsigned int> >::max_size() const>:
   2aec8:	55                   	push   rbp
   2aec9:	48 89 e5             	mov    rbp,rsp
   2aecc:	48 83 ec 10          	sub    rsp,0x10
   2aed0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2aed4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2aed8:	48 89 c7             	mov    rdi,rax
   2aedb:	e8 d0 04 00 00       	call   2b3b0 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator() const>
   2aee0:	48 89 c7             	mov    rdi,rax
   2aee3:	e8 62 04 00 00       	call   2b34a <std::vector<unsigned int, std::allocator<unsigned int> >::_S_max_size(std::allocator<unsigned int> const&)>
   2aee8:	c9                   	leave  
   2aee9:	c3                   	ret    

000000000002aeea <std::allocator_traits<std::allocator<unsigned int> >::allocate(std::allocator<unsigned int>&, unsigned long)>:
   2aeea:	55                   	push   rbp
   2aeeb:	48 89 e5             	mov    rbp,rsp
   2aeee:	48 83 ec 10          	sub    rsp,0x10
   2aef2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2aef6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2aefa:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2aefe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2af02:	ba 00 00 00 00       	mov    edx,0x0
   2af07:	48 89 ce             	mov    rsi,rcx
   2af0a:	48 89 c7             	mov    rdi,rax
   2af0d:	e8 c0 04 00 00       	call   2b3d2 <__gnu_cxx::new_allocator<unsigned int>::allocate(unsigned long, void const*)>
   2af12:	c9                   	leave  
   2af13:	c3                   	ret    

000000000002af14 <std::vector<unsigned int, std::allocator<unsigned int> >::_S_do_relocate(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&, std::integral_constant<bool, true>)>:
   2af14:	55                   	push   rbp
   2af15:	48 89 e5             	mov    rbp,rsp
   2af18:	48 83 ec 20          	sub    rsp,0x20
   2af1c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2af20:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2af24:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2af28:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2af2c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2af30:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2af34:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2af38:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2af3c:	48 89 c7             	mov    rdi,rax
   2af3f:	e8 ef 04 00 00       	call   2b433 <unsigned int* std::__relocate_a<unsigned int*, unsigned int*, std::allocator<unsigned int> >(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   2af44:	c9                   	leave  
   2af45:	c3                   	ret    

000000000002af46 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::max_size() const>:
   2af46:	55                   	push   rbp
   2af47:	48 89 e5             	mov    rbp,rsp
   2af4a:	48 83 ec 10          	sub    rsp,0x10
   2af4e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2af52:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2af56:	48 89 c7             	mov    rdi,rax
   2af59:	e8 9e 05 00 00       	call   2b4fc <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator() const>
   2af5e:	48 89 c7             	mov    rdi,rax
   2af61:	e8 30 05 00 00       	call   2b496 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_max_size(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>
   2af66:	c9                   	leave  
   2af67:	c3                   	ret    

000000000002af68 <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::allocate(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, unsigned long)>:
   2af68:	55                   	push   rbp
   2af69:	48 89 e5             	mov    rbp,rsp
   2af6c:	48 83 ec 10          	sub    rsp,0x10
   2af70:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2af74:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2af78:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2af7c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2af80:	ba 00 00 00 00       	mov    edx,0x0
   2af85:	48 89 ce             	mov    rsi,rcx
   2af88:	48 89 c7             	mov    rdi,rax
   2af8b:	e8 8e 05 00 00       	call   2b51e <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocate(unsigned long, void const*)>
   2af90:	c9                   	leave  
   2af91:	c3                   	ret    

000000000002af92 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_do_relocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::integral_constant<bool, true>)>:
   2af92:	55                   	push   rbp
   2af93:	48 89 e5             	mov    rbp,rsp
   2af96:	48 83 ec 20          	sub    rsp,0x20
   2af9a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2af9e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2afa2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2afa6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2afaa:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2afae:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2afb2:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2afb6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2afba:	48 89 c7             	mov    rdi,rax
   2afbd:	e8 bd 05 00 00       	call   2b57f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__relocate_a<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   2afc2:	c9                   	leave  
   2afc3:	c3                   	ret    

000000000002afc4 <void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
   2afc4:	55                   	push   rbp
   2afc5:	48 89 e5             	mov    rbp,rsp
   2afc8:	48 83 ec 10          	sub    rsp,0x10
   2afcc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2afd0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2afd4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2afd8:	48 89 c7             	mov    rdi,rax
   2afdb:	e8 80 92 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2afe0:	90                   	nop
   2afe1:	c9                   	leave  
   2afe2:	c3                   	ret    
   2afe3:	90                   	nop

000000000002afe4 <std::vector<Tex, std::allocator<Tex> >::max_size() const>:
   2afe4:	55                   	push   rbp
   2afe5:	48 89 e5             	mov    rbp,rsp
   2afe8:	48 83 ec 10          	sub    rsp,0x10
   2afec:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2aff0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2aff4:	48 89 c7             	mov    rdi,rax
   2aff7:	e8 4c 06 00 00       	call   2b648 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_get_Tp_allocator() const>
   2affc:	48 89 c7             	mov    rdi,rax
   2afff:	e8 de 05 00 00       	call   2b5e2 <std::vector<Tex, std::allocator<Tex> >::_S_max_size(std::allocator<Tex> const&)>
   2b004:	c9                   	leave  
   2b005:	c3                   	ret    

000000000002b006 <std::allocator_traits<std::allocator<Tex> >::allocate(std::allocator<Tex>&, unsigned long)>:
   2b006:	55                   	push   rbp
   2b007:	48 89 e5             	mov    rbp,rsp
   2b00a:	48 83 ec 10          	sub    rsp,0x10
   2b00e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b012:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b016:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2b01a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b01e:	ba 00 00 00 00       	mov    edx,0x0
   2b023:	48 89 ce             	mov    rsi,rcx
   2b026:	48 89 c7             	mov    rdi,rax
   2b029:	e8 3c 06 00 00       	call   2b66a <__gnu_cxx::new_allocator<Tex>::allocate(unsigned long, void const*)>
   2b02e:	c9                   	leave  
   2b02f:	c3                   	ret    

000000000002b030 <std::vector<Tex, std::allocator<Tex> >::_S_do_relocate(Tex*, Tex*, Tex*, std::allocator<Tex>&, std::integral_constant<bool, true>)>:
   2b030:	55                   	push   rbp
   2b031:	48 89 e5             	mov    rbp,rsp
   2b034:	48 83 ec 20          	sub    rsp,0x20
   2b038:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b03c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b040:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b044:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2b048:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2b04c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2b050:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2b054:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b058:	48 89 c7             	mov    rdi,rax
   2b05b:	e8 74 06 00 00       	call   2b6d4 <Tex* std::__relocate_a<Tex*, Tex*, std::allocator<Tex> >(Tex*, Tex*, Tex*, std::allocator<Tex>&)>
   2b060:	c9                   	leave  
   2b061:	c3                   	ret    

000000000002b062 <__gnu_cxx::new_allocator<Mesh>::deallocate(Mesh*, unsigned long)>:
   2b062:	55                   	push   rbp
   2b063:	48 89 e5             	mov    rbp,rsp
   2b066:	48 83 ec 20          	sub    rsp,0x20
   2b06a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b06e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b072:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b076:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2b07a:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2b082:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b086:	48 89 d6             	mov    rsi,rdx
   2b089:	48 89 c7             	mov    rdi,rax
   2b08c:	e8 af 93 fd ff       	call   4440 <operator delete(void*, unsigned long)@plt>
   2b091:	c9                   	leave  
   2b092:	c3                   	ret    

000000000002b093 <void std::_Destroy_aux<true>::__destroy<Mesh*>(Mesh*, Mesh*)>:
   2b093:	55                   	push   rbp
   2b094:	48 89 e5             	mov    rbp,rsp
   2b097:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b09b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b09f:	90                   	nop
   2b0a0:	5d                   	pop    rbp
   2b0a1:	c3                   	ret    

000000000002b0a2 <__gnu_cxx::new_allocator<unsigned int>::deallocate(unsigned int*, unsigned long)>:
   2b0a2:	55                   	push   rbp
   2b0a3:	48 89 e5             	mov    rbp,rsp
   2b0a6:	48 83 ec 20          	sub    rsp,0x20
   2b0aa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b0ae:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b0b2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b0b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2b0ba:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2b0c2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b0c6:	48 89 d6             	mov    rsi,rdx
   2b0c9:	48 89 c7             	mov    rdi,rax
   2b0cc:	e8 6f 93 fd ff       	call   4440 <operator delete(void*, unsigned long)@plt>
   2b0d1:	c9                   	leave  
   2b0d2:	c3                   	ret    

000000000002b0d3 <void std::_Destroy_aux<true>::__destroy<unsigned int*>(unsigned int*, unsigned int*)>:
   2b0d3:	55                   	push   rbp
   2b0d4:	48 89 e5             	mov    rbp,rsp
   2b0d7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b0db:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b0df:	90                   	nop
   2b0e0:	5d                   	pop    rbp
   2b0e1:	c3                   	ret    

000000000002b0e2 <__gnu_cxx::new_allocator<Transform>::deallocate(Transform*, unsigned long)>:
   2b0e2:	55                   	push   rbp
   2b0e3:	48 89 e5             	mov    rbp,rsp
   2b0e6:	48 83 ec 20          	sub    rsp,0x20
   2b0ea:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b0ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b0f2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b0f6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2b0fa:	48 89 d0             	mov    rax,rdx
   2b0fd:	48 c1 e0 03          	shl    rax,0x3
   2b101:	48 01 d0             	add    rax,rdx
   2b104:	48 c1 e0 02          	shl    rax,0x2
   2b108:	48 89 c2             	mov    rdx,rax
   2b10b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b10f:	48 89 d6             	mov    rsi,rdx
   2b112:	48 89 c7             	mov    rdi,rax
   2b115:	e8 26 93 fd ff       	call   4440 <operator delete(void*, unsigned long)@plt>
   2b11a:	c9                   	leave  
   2b11b:	c3                   	ret    

000000000002b11c <void std::_Destroy_aux<true>::__destroy<Transform*>(Transform*, Transform*)>:
   2b11c:	55                   	push   rbp
   2b11d:	48 89 e5             	mov    rbp,rsp
   2b120:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b124:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b128:	90                   	nop
   2b129:	5d                   	pop    rbp
   2b12a:	c3                   	ret    
   2b12b:	90                   	nop

000000000002b12c <__gnu_cxx::new_allocator<AABB>::deallocate(AABB*, unsigned long)>:
   2b12c:	55                   	push   rbp
   2b12d:	48 89 e5             	mov    rbp,rsp
   2b130:	48 83 ec 20          	sub    rsp,0x20
   2b134:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b138:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b13c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b140:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2b144:	48 89 d0             	mov    rax,rdx
   2b147:	48 01 c0             	add    rax,rax
   2b14a:	48 01 d0             	add    rax,rdx
   2b14d:	48 c1 e0 03          	shl    rax,0x3
   2b151:	48 89 c2             	mov    rdx,rax
   2b154:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b158:	48 89 d6             	mov    rsi,rdx
   2b15b:	48 89 c7             	mov    rdi,rax
   2b15e:	e8 dd 92 fd ff       	call   4440 <operator delete(void*, unsigned long)@plt>
   2b163:	c9                   	leave  
   2b164:	c3                   	ret    

000000000002b165 <void std::_Destroy_aux<true>::__destroy<AABB*>(AABB*, AABB*)>:
   2b165:	55                   	push   rbp
   2b166:	48 89 e5             	mov    rbp,rsp
   2b169:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b16d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b171:	90                   	nop
   2b172:	5d                   	pop    rbp
   2b173:	c3                   	ret    

000000000002b174 <bool __gnu_cxx::__is_null_pointer<char const>(char const*)>:
   2b174:	55                   	push   rbp
   2b175:	48 89 e5             	mov    rbp,rsp
   2b178:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b17c:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2b181:	0f 94 c0             	sete   al
   2b184:	5d                   	pop    rbp
   2b185:	c3                   	ret    

000000000002b186 <std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&)>:
   2b186:	55                   	push   rbp
   2b187:	48 89 e5             	mov    rbp,rsp
   2b18a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b18e:	5d                   	pop    rbp
   2b18f:	c3                   	ret    

000000000002b190 <std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag)>:
   2b190:	55                   	push   rbp
   2b191:	48 89 e5             	mov    rbp,rsp
   2b194:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b198:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b19c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b1a0:	48 2b 45 f8          	sub    rax,QWORD PTR [rbp-0x8]
   2b1a4:	5d                   	pop    rbp
   2b1a5:	c3                   	ret    

000000000002b1a6 <std::_Head_base<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>::_M_head(std::_Head_base<1ul, std::filesystem::__cxx11::path::_List::_Impl_deleter, true>&)>:
   2b1a6:	55                   	push   rbp
   2b1a7:	48 89 e5             	mov    rbp,rsp
   2b1aa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b1ae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b1b2:	5d                   	pop    rbp
   2b1b3:	c3                   	ret    

000000000002b1b4 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
   2b1b4:	55                   	push   rbp
   2b1b5:	48 89 e5             	mov    rbp,rsp
   2b1b8:	48 83 ec 10          	sub    rsp,0x10
   2b1bc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b1c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b1c4:	48 89 c7             	mov    rdi,rax
   2b1c7:	e8 94 90 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2b1cc:	90                   	nop
   2b1cd:	c9                   	leave  
   2b1ce:	c3                   	ret    
   2b1cf:	90                   	nop

000000000002b1d0 <std::vector<AABB, std::allocator<AABB> >::max_size() const>:
   2b1d0:	55                   	push   rbp
   2b1d1:	48 89 e5             	mov    rbp,rsp
   2b1d4:	48 83 ec 10          	sub    rsp,0x10
   2b1d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b1dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b1e0:	48 89 c7             	mov    rdi,rax
   2b1e3:	e8 b4 05 00 00       	call   2b79c <std::_Vector_base<AABB, std::allocator<AABB> >::_M_get_Tp_allocator() const>
   2b1e8:	48 89 c7             	mov    rdi,rax
   2b1eb:	e8 47 05 00 00       	call   2b737 <std::vector<AABB, std::allocator<AABB> >::_S_max_size(std::allocator<AABB> const&)>
   2b1f0:	c9                   	leave  
   2b1f1:	c3                   	ret    

000000000002b1f2 <std::allocator_traits<std::allocator<AABB> >::allocate(std::allocator<AABB>&, unsigned long)>:
   2b1f2:	55                   	push   rbp
   2b1f3:	48 89 e5             	mov    rbp,rsp
   2b1f6:	48 83 ec 10          	sub    rsp,0x10
   2b1fa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b1fe:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b202:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2b206:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b20a:	ba 00 00 00 00       	mov    edx,0x0
   2b20f:	48 89 ce             	mov    rsi,rcx
   2b212:	48 89 c7             	mov    rdi,rax
   2b215:	e8 a4 05 00 00       	call   2b7be <__gnu_cxx::new_allocator<AABB>::allocate(unsigned long, void const*)>
   2b21a:	c9                   	leave  
   2b21b:	c3                   	ret    

000000000002b21c <std::vector<AABB, std::allocator<AABB> >::_S_do_relocate(AABB*, AABB*, AABB*, std::allocator<AABB>&, std::integral_constant<bool, true>)>:
   2b21c:	55                   	push   rbp
   2b21d:	48 89 e5             	mov    rbp,rsp
   2b220:	48 83 ec 20          	sub    rsp,0x20
   2b224:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b228:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b22c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b230:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2b234:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2b238:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2b23c:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2b240:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b244:	48 89 c7             	mov    rdi,rax
   2b247:	e8 dc 05 00 00       	call   2b828 <AABB* std::__relocate_a<AABB*, AABB*, std::allocator<AABB> >(AABB*, AABB*, AABB*, std::allocator<AABB>&)>
   2b24c:	c9                   	leave  
   2b24d:	c3                   	ret    

000000000002b24e <std::vector<Mesh, std::allocator<Mesh> >::max_size() const>:
   2b24e:	55                   	push   rbp
   2b24f:	48 89 e5             	mov    rbp,rsp
   2b252:	48 83 ec 10          	sub    rsp,0x10
   2b256:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b25a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b25e:	48 89 c7             	mov    rdi,rax
   2b261:	e8 8a 06 00 00       	call   2b8f0 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_get_Tp_allocator() const>
   2b266:	48 89 c7             	mov    rdi,rax
   2b269:	e8 1d 06 00 00       	call   2b88b <std::vector<Mesh, std::allocator<Mesh> >::_S_max_size(std::allocator<Mesh> const&)>
   2b26e:	c9                   	leave  
   2b26f:	c3                   	ret    

000000000002b270 <std::allocator_traits<std::allocator<Mesh> >::allocate(std::allocator<Mesh>&, unsigned long)>:
   2b270:	55                   	push   rbp
   2b271:	48 89 e5             	mov    rbp,rsp
   2b274:	48 83 ec 10          	sub    rsp,0x10
   2b278:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b27c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b280:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2b284:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b288:	ba 00 00 00 00       	mov    edx,0x0
   2b28d:	48 89 ce             	mov    rsi,rcx
   2b290:	48 89 c7             	mov    rdi,rax
   2b293:	e8 7a 06 00 00       	call   2b912 <__gnu_cxx::new_allocator<Mesh>::allocate(unsigned long, void const*)>
   2b298:	c9                   	leave  
   2b299:	c3                   	ret    

000000000002b29a <std::vector<Mesh, std::allocator<Mesh> >::_S_do_relocate(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&, std::integral_constant<bool, true>)>:
   2b29a:	55                   	push   rbp
   2b29b:	48 89 e5             	mov    rbp,rsp
   2b29e:	48 83 ec 20          	sub    rsp,0x20
   2b2a2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b2a6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b2aa:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b2ae:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2b2b2:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2b2b6:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2b2ba:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2b2be:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b2c2:	48 89 c7             	mov    rdi,rax
   2b2c5:	e8 a9 06 00 00       	call   2b973 <Mesh* std::__relocate_a<Mesh*, Mesh*, std::allocator<Mesh> >(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)>
   2b2ca:	c9                   	leave  
   2b2cb:	c3                   	ret    

000000000002b2cc <std::vector<Transform, std::allocator<Transform> >::max_size() const>:
   2b2cc:	55                   	push   rbp
   2b2cd:	48 89 e5             	mov    rbp,rsp
   2b2d0:	48 83 ec 10          	sub    rsp,0x10
   2b2d4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b2d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b2dc:	48 89 c7             	mov    rdi,rax
   2b2df:	e8 58 07 00 00       	call   2ba3c <std::_Vector_base<Transform, std::allocator<Transform> >::_M_get_Tp_allocator() const>
   2b2e4:	48 89 c7             	mov    rdi,rax
   2b2e7:	e8 ea 06 00 00       	call   2b9d6 <std::vector<Transform, std::allocator<Transform> >::_S_max_size(std::allocator<Transform> const&)>
   2b2ec:	c9                   	leave  
   2b2ed:	c3                   	ret    

000000000002b2ee <std::allocator_traits<std::allocator<Transform> >::allocate(std::allocator<Transform>&, unsigned long)>:
   2b2ee:	55                   	push   rbp
   2b2ef:	48 89 e5             	mov    rbp,rsp
   2b2f2:	48 83 ec 10          	sub    rsp,0x10
   2b2f6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b2fa:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b2fe:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2b302:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b306:	ba 00 00 00 00       	mov    edx,0x0
   2b30b:	48 89 ce             	mov    rsi,rcx
   2b30e:	48 89 c7             	mov    rdi,rax
   2b311:	e8 48 07 00 00       	call   2ba5e <__gnu_cxx::new_allocator<Transform>::allocate(unsigned long, void const*)>
   2b316:	c9                   	leave  
   2b317:	c3                   	ret    

000000000002b318 <std::vector<Transform, std::allocator<Transform> >::_S_do_relocate(Transform*, Transform*, Transform*, std::allocator<Transform>&, std::integral_constant<bool, true>)>:
   2b318:	55                   	push   rbp
   2b319:	48 89 e5             	mov    rbp,rsp
   2b31c:	48 83 ec 20          	sub    rsp,0x20
   2b320:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b324:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b328:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b32c:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   2b330:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   2b334:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   2b338:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   2b33c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b340:	48 89 c7             	mov    rdi,rax
   2b343:	e8 81 07 00 00       	call   2bac9 <Transform* std::__relocate_a<Transform*, Transform*, std::allocator<Transform> >(Transform*, Transform*, Transform*, std::allocator<Transform>&)>
   2b348:	c9                   	leave  
   2b349:	c3                   	ret    

000000000002b34a <std::vector<unsigned int, std::allocator<unsigned int> >::_S_max_size(std::allocator<unsigned int> const&)>:
   2b34a:	55                   	push   rbp
   2b34b:	48 89 e5             	mov    rbp,rsp
   2b34e:	48 83 ec 30          	sub    rsp,0x30
   2b352:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2b356:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2b35f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2b363:	31 c0                	xor    eax,eax
   2b365:	48 b8 ff ff ff ff ff ff ff 1f 	movabs rax,0x1fffffffffffffff
   2b36f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2b373:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b377:	48 89 c7             	mov    rdi,rax
   2b37a:	e8 ad 07 00 00       	call   2bb2c <std::allocator_traits<std::allocator<unsigned int> >::max_size(std::allocator<unsigned int> const&)>
   2b37f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2b383:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   2b387:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2b38b:	48 89 d6             	mov    rsi,rdx
   2b38e:	48 89 c7             	mov    rdi,rax
   2b391:	e8 b1 a0 ff ff       	call   25447 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   2b396:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2b399:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2b39d:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2b3a6:	74 05                	je     2b3ad <std::vector<unsigned int, std::allocator<unsigned int> >::_S_max_size(std::allocator<unsigned int> const&)+0x63>
   2b3a8:	e8 33 91 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2b3ad:	c9                   	leave  
   2b3ae:	c3                   	ret    
   2b3af:	90                   	nop

000000000002b3b0 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator() const>:
   2b3b0:	55                   	push   rbp
   2b3b1:	48 89 e5             	mov    rbp,rsp
   2b3b4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b3b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b3bc:	5d                   	pop    rbp
   2b3bd:	c3                   	ret    

000000000002b3be <__gnu_cxx::new_allocator<unsigned int>::_M_max_size() const>:
   2b3be:	55                   	push   rbp
   2b3bf:	48 89 e5             	mov    rbp,rsp
   2b3c2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b3c6:	48 b8 ff ff ff ff ff ff ff 1f 	movabs rax,0x1fffffffffffffff
   2b3d0:	5d                   	pop    rbp
   2b3d1:	c3                   	ret    

000000000002b3d2 <__gnu_cxx::new_allocator<unsigned int>::allocate(unsigned long, void const*)>:
   2b3d2:	55                   	push   rbp
   2b3d3:	48 89 e5             	mov    rbp,rsp
   2b3d6:	48 83 ec 20          	sub    rsp,0x20
   2b3da:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b3de:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b3e2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b3e6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b3ea:	48 89 c7             	mov    rdi,rax
   2b3ed:	e8 cc ff ff ff       	call   2b3be <__gnu_cxx::new_allocator<unsigned int>::_M_max_size() const>
   2b3f2:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b3f6:	0f 97 c0             	seta   al
   2b3f9:	0f b6 c0             	movzx  eax,al
   2b3fc:	48 85 c0             	test   rax,rax
   2b3ff:	0f 95 c0             	setne  al
   2b402:	84 c0                	test   al,al
   2b404:	74 1a                	je     2b420 <__gnu_cxx::new_allocator<unsigned int>::allocate(unsigned long, void const*)+0x4e>
   2b406:	48 b8 ff ff ff ff ff ff ff 3f 	movabs rax,0x3fffffffffffffff
   2b410:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b414:	76 05                	jbe    2b41b <__gnu_cxx::new_allocator<unsigned int>::allocate(unsigned long, void const*)+0x49>
   2b416:	e8 f5 8e fd ff       	call   4310 <std::__throw_bad_array_new_length()@plt>
   2b41b:	e8 f0 8c fd ff       	call   4110 <std::__throw_bad_alloc()@plt>
   2b420:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b424:	48 c1 e0 02          	shl    rax,0x2
   2b428:	48 89 c7             	mov    rdi,rax
   2b42b:	e8 00 90 fd ff       	call   4430 <operator new(unsigned long)@plt>
   2b430:	90                   	nop
   2b431:	c9                   	leave  
   2b432:	c3                   	ret    

000000000002b433 <unsigned int* std::__relocate_a<unsigned int*, unsigned int*, std::allocator<unsigned int> >(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>:
   2b433:	55                   	push   rbp
   2b434:	48 89 e5             	mov    rbp,rsp
   2b437:	41 54                	push   r12
   2b439:	53                   	push   rbx
   2b43a:	48 83 ec 20          	sub    rsp,0x20
   2b43e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2b442:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2b446:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2b44a:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2b44e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b452:	48 89 c7             	mov    rdi,rax
   2b455:	e8 ec 06 00 00       	call   2bb46 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>
   2b45a:	49 89 c4             	mov    r12,rax
   2b45d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2b461:	48 89 c7             	mov    rdi,rax
   2b464:	e8 dd 06 00 00       	call   2bb46 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>
   2b469:	48 89 c3             	mov    rbx,rax
   2b46c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2b470:	48 89 c7             	mov    rdi,rax
   2b473:	e8 ce 06 00 00       	call   2bb46 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>
   2b478:	48 89 c7             	mov    rdi,rax
   2b47b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2b47f:	48 89 c1             	mov    rcx,rax
   2b482:	4c 89 e2             	mov    rdx,r12
   2b485:	48 89 de             	mov    rsi,rbx
   2b488:	e8 c7 06 00 00       	call   2bb54 <std::enable_if<std::__is_bitwise_relocatable<unsigned int, void>::value, unsigned int*>::type std::__relocate_a_1<unsigned int, unsigned int>(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   2b48d:	48 83 c4 20          	add    rsp,0x20
   2b491:	5b                   	pop    rbx
   2b492:	41 5c                	pop    r12
   2b494:	5d                   	pop    rbp
   2b495:	c3                   	ret    

000000000002b496 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_max_size(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
   2b496:	55                   	push   rbp
   2b497:	48 89 e5             	mov    rbp,rsp
   2b49a:	48 83 ec 30          	sub    rsp,0x30
   2b49e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2b4a2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2b4ab:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2b4af:	31 c0                	xor    eax,eax
   2b4b1:	48 b8 ff ff ff ff ff ff ff 03 	movabs rax,0x3ffffffffffffff
   2b4bb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2b4bf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b4c3:	48 89 c7             	mov    rdi,rax
   2b4c6:	e8 ec 06 00 00       	call   2bbb7 <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::max_size(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>
   2b4cb:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2b4cf:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   2b4d3:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2b4d7:	48 89 d6             	mov    rsi,rdx
   2b4da:	48 89 c7             	mov    rdi,rax
   2b4dd:	e8 65 9f ff ff       	call   25447 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   2b4e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2b4e5:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2b4e9:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2b4f2:	74 05                	je     2b4f9 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_max_size(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)+0x63>
   2b4f4:	e8 e7 8f fd ff       	call   44e0 <__stack_chk_fail@plt>
   2b4f9:	c9                   	leave  
   2b4fa:	c3                   	ret    
   2b4fb:	90                   	nop

000000000002b4fc <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator() const>:
   2b4fc:	55                   	push   rbp
   2b4fd:	48 89 e5             	mov    rbp,rsp
   2b500:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b504:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b508:	5d                   	pop    rbp
   2b509:	c3                   	ret    

000000000002b50a <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_max_size() const>:
   2b50a:	55                   	push   rbp
   2b50b:	48 89 e5             	mov    rbp,rsp
   2b50e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b512:	48 b8 ff ff ff ff ff ff ff 03 	movabs rax,0x3ffffffffffffff
   2b51c:	5d                   	pop    rbp
   2b51d:	c3                   	ret    

000000000002b51e <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocate(unsigned long, void const*)>:
   2b51e:	55                   	push   rbp
   2b51f:	48 89 e5             	mov    rbp,rsp
   2b522:	48 83 ec 20          	sub    rsp,0x20
   2b526:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b52a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b52e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b532:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b536:	48 89 c7             	mov    rdi,rax
   2b539:	e8 cc ff ff ff       	call   2b50a <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_max_size() const>
   2b53e:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b542:	0f 97 c0             	seta   al
   2b545:	0f b6 c0             	movzx  eax,al
   2b548:	48 85 c0             	test   rax,rax
   2b54b:	0f 95 c0             	setne  al
   2b54e:	84 c0                	test   al,al
   2b550:	74 1a                	je     2b56c <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocate(unsigned long, void const*)+0x4e>
   2b552:	48 b8 ff ff ff ff ff ff ff 07 	movabs rax,0x7ffffffffffffff
   2b55c:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b560:	76 05                	jbe    2b567 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocate(unsigned long, void const*)+0x49>
   2b562:	e8 a9 8d fd ff       	call   4310 <std::__throw_bad_array_new_length()@plt>
   2b567:	e8 a4 8b fd ff       	call   4110 <std::__throw_bad_alloc()@plt>
   2b56c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b570:	48 c1 e0 05          	shl    rax,0x5
   2b574:	48 89 c7             	mov    rdi,rax
   2b577:	e8 b4 8e fd ff       	call   4430 <operator new(unsigned long)@plt>
   2b57c:	90                   	nop
   2b57d:	c9                   	leave  
   2b57e:	c3                   	ret    

000000000002b57f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__relocate_a<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>:
   2b57f:	55                   	push   rbp
   2b580:	48 89 e5             	mov    rbp,rsp
   2b583:	41 54                	push   r12
   2b585:	53                   	push   rbx
   2b586:	48 83 ec 20          	sub    rsp,0x20
   2b58a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2b58e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2b592:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2b596:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2b59a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b59e:	48 89 c7             	mov    rdi,rax
   2b5a1:	e8 2b 06 00 00       	call   2bbd1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__niter_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   2b5a6:	49 89 c4             	mov    r12,rax
   2b5a9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2b5ad:	48 89 c7             	mov    rdi,rax
   2b5b0:	e8 1c 06 00 00       	call   2bbd1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__niter_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   2b5b5:	48 89 c3             	mov    rbx,rax
   2b5b8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2b5bc:	48 89 c7             	mov    rdi,rax
   2b5bf:	e8 0d 06 00 00       	call   2bbd1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__niter_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   2b5c4:	48 89 c7             	mov    rdi,rax
   2b5c7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2b5cb:	48 89 c1             	mov    rcx,rax
   2b5ce:	4c 89 e2             	mov    rdx,r12
   2b5d1:	48 89 de             	mov    rsi,rbx
   2b5d4:	e8 06 06 00 00       	call   2bbdf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__relocate_a_1<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   2b5d9:	48 83 c4 20          	add    rsp,0x20
   2b5dd:	5b                   	pop    rbx
   2b5de:	41 5c                	pop    r12
   2b5e0:	5d                   	pop    rbp
   2b5e1:	c3                   	ret    

000000000002b5e2 <std::vector<Tex, std::allocator<Tex> >::_S_max_size(std::allocator<Tex> const&)>:
   2b5e2:	55                   	push   rbp
   2b5e3:	48 89 e5             	mov    rbp,rsp
   2b5e6:	48 83 ec 30          	sub    rsp,0x30
   2b5ea:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2b5ee:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2b5f7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2b5fb:	31 c0                	xor    eax,eax
   2b5fd:	48 b8 55 55 55 55 55 55 55 05 	movabs rax,0x555555555555555
   2b607:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2b60b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b60f:	48 89 c7             	mov    rdi,rax
   2b612:	e8 39 06 00 00       	call   2bc50 <std::allocator_traits<std::allocator<Tex> >::max_size(std::allocator<Tex> const&)>
   2b617:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2b61b:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   2b61f:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2b623:	48 89 d6             	mov    rsi,rdx
   2b626:	48 89 c7             	mov    rdi,rax
   2b629:	e8 19 9e ff ff       	call   25447 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   2b62e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2b631:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2b635:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2b63e:	74 05                	je     2b645 <std::vector<Tex, std::allocator<Tex> >::_S_max_size(std::allocator<Tex> const&)+0x63>
   2b640:	e8 9b 8e fd ff       	call   44e0 <__stack_chk_fail@plt>
   2b645:	c9                   	leave  
   2b646:	c3                   	ret    
   2b647:	90                   	nop

000000000002b648 <std::_Vector_base<Tex, std::allocator<Tex> >::_M_get_Tp_allocator() const>:
   2b648:	55                   	push   rbp
   2b649:	48 89 e5             	mov    rbp,rsp
   2b64c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b650:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b654:	5d                   	pop    rbp
   2b655:	c3                   	ret    

000000000002b656 <__gnu_cxx::new_allocator<Tex>::_M_max_size() const>:
   2b656:	55                   	push   rbp
   2b657:	48 89 e5             	mov    rbp,rsp
   2b65a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b65e:	48 b8 55 55 55 55 55 55 55 05 	movabs rax,0x555555555555555
   2b668:	5d                   	pop    rbp
   2b669:	c3                   	ret    

000000000002b66a <__gnu_cxx::new_allocator<Tex>::allocate(unsigned long, void const*)>:
   2b66a:	55                   	push   rbp
   2b66b:	48 89 e5             	mov    rbp,rsp
   2b66e:	48 83 ec 20          	sub    rsp,0x20
   2b672:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b676:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b67a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b67e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b682:	48 89 c7             	mov    rdi,rax
   2b685:	e8 cc ff ff ff       	call   2b656 <__gnu_cxx::new_allocator<Tex>::_M_max_size() const>
   2b68a:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b68e:	0f 97 c0             	seta   al
   2b691:	0f b6 c0             	movzx  eax,al
   2b694:	48 85 c0             	test   rax,rax
   2b697:	0f 95 c0             	setne  al
   2b69a:	84 c0                	test   al,al
   2b69c:	74 1a                	je     2b6b8 <__gnu_cxx::new_allocator<Tex>::allocate(unsigned long, void const*)+0x4e>
   2b69e:	48 b8 aa aa aa aa aa aa aa 0a 	movabs rax,0xaaaaaaaaaaaaaaa
   2b6a8:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b6ac:	76 05                	jbe    2b6b3 <__gnu_cxx::new_allocator<Tex>::allocate(unsigned long, void const*)+0x49>
   2b6ae:	e8 5d 8c fd ff       	call   4310 <std::__throw_bad_array_new_length()@plt>
   2b6b3:	e8 58 8a fd ff       	call   4110 <std::__throw_bad_alloc()@plt>
   2b6b8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2b6bc:	48 89 d0             	mov    rax,rdx
   2b6bf:	48 01 c0             	add    rax,rax
   2b6c2:	48 01 d0             	add    rax,rdx
   2b6c5:	48 c1 e0 03          	shl    rax,0x3
   2b6c9:	48 89 c7             	mov    rdi,rax
   2b6cc:	e8 5f 8d fd ff       	call   4430 <operator new(unsigned long)@plt>
   2b6d1:	90                   	nop
   2b6d2:	c9                   	leave  
   2b6d3:	c3                   	ret    

000000000002b6d4 <Tex* std::__relocate_a<Tex*, Tex*, std::allocator<Tex> >(Tex*, Tex*, Tex*, std::allocator<Tex>&)>:
   2b6d4:	55                   	push   rbp
   2b6d5:	48 89 e5             	mov    rbp,rsp
   2b6d8:	41 54                	push   r12
   2b6da:	53                   	push   rbx
   2b6db:	48 83 ec 20          	sub    rsp,0x20
   2b6df:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2b6e3:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2b6e7:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2b6eb:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2b6ef:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b6f3:	48 89 c7             	mov    rdi,rax
   2b6f6:	e8 6f 05 00 00       	call   2bc6a <Tex* std::__niter_base<Tex*>(Tex*)>
   2b6fb:	49 89 c4             	mov    r12,rax
   2b6fe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2b702:	48 89 c7             	mov    rdi,rax
   2b705:	e8 60 05 00 00       	call   2bc6a <Tex* std::__niter_base<Tex*>(Tex*)>
   2b70a:	48 89 c3             	mov    rbx,rax
   2b70d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2b711:	48 89 c7             	mov    rdi,rax
   2b714:	e8 51 05 00 00       	call   2bc6a <Tex* std::__niter_base<Tex*>(Tex*)>
   2b719:	48 89 c7             	mov    rdi,rax
   2b71c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2b720:	48 89 c1             	mov    rcx,rax
   2b723:	4c 89 e2             	mov    rdx,r12
   2b726:	48 89 de             	mov    rsi,rbx
   2b729:	e8 4a 05 00 00       	call   2bc78 <std::enable_if<std::__is_bitwise_relocatable<Tex, void>::value, Tex*>::type std::__relocate_a_1<Tex, Tex>(Tex*, Tex*, Tex*, std::allocator<Tex>&)>
   2b72e:	48 83 c4 20          	add    rsp,0x20
   2b732:	5b                   	pop    rbx
   2b733:	41 5c                	pop    r12
   2b735:	5d                   	pop    rbp
   2b736:	c3                   	ret    

000000000002b737 <std::vector<AABB, std::allocator<AABB> >::_S_max_size(std::allocator<AABB> const&)>:
   2b737:	55                   	push   rbp
   2b738:	48 89 e5             	mov    rbp,rsp
   2b73b:	48 83 ec 30          	sub    rsp,0x30
   2b73f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2b743:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2b74c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2b750:	31 c0                	xor    eax,eax
   2b752:	48 b8 55 55 55 55 55 55 55 05 	movabs rax,0x555555555555555
   2b75c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2b760:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b764:	48 89 c7             	mov    rdi,rax
   2b767:	e8 90 05 00 00       	call   2bcfc <std::allocator_traits<std::allocator<AABB> >::max_size(std::allocator<AABB> const&)>
   2b76c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2b770:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   2b774:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2b778:	48 89 d6             	mov    rsi,rdx
   2b77b:	48 89 c7             	mov    rdi,rax
   2b77e:	e8 c4 9c ff ff       	call   25447 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   2b783:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2b786:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2b78a:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2b793:	74 05                	je     2b79a <std::vector<AABB, std::allocator<AABB> >::_S_max_size(std::allocator<AABB> const&)+0x63>
   2b795:	e8 46 8d fd ff       	call   44e0 <__stack_chk_fail@plt>
   2b79a:	c9                   	leave  
   2b79b:	c3                   	ret    

000000000002b79c <std::_Vector_base<AABB, std::allocator<AABB> >::_M_get_Tp_allocator() const>:
   2b79c:	55                   	push   rbp
   2b79d:	48 89 e5             	mov    rbp,rsp
   2b7a0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b7a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b7a8:	5d                   	pop    rbp
   2b7a9:	c3                   	ret    

000000000002b7aa <__gnu_cxx::new_allocator<AABB>::_M_max_size() const>:
   2b7aa:	55                   	push   rbp
   2b7ab:	48 89 e5             	mov    rbp,rsp
   2b7ae:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b7b2:	48 b8 55 55 55 55 55 55 55 05 	movabs rax,0x555555555555555
   2b7bc:	5d                   	pop    rbp
   2b7bd:	c3                   	ret    

000000000002b7be <__gnu_cxx::new_allocator<AABB>::allocate(unsigned long, void const*)>:
   2b7be:	55                   	push   rbp
   2b7bf:	48 89 e5             	mov    rbp,rsp
   2b7c2:	48 83 ec 20          	sub    rsp,0x20
   2b7c6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b7ca:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b7ce:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b7d2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b7d6:	48 89 c7             	mov    rdi,rax
   2b7d9:	e8 cc ff ff ff       	call   2b7aa <__gnu_cxx::new_allocator<AABB>::_M_max_size() const>
   2b7de:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b7e2:	0f 97 c0             	seta   al
   2b7e5:	0f b6 c0             	movzx  eax,al
   2b7e8:	48 85 c0             	test   rax,rax
   2b7eb:	0f 95 c0             	setne  al
   2b7ee:	84 c0                	test   al,al
   2b7f0:	74 1a                	je     2b80c <__gnu_cxx::new_allocator<AABB>::allocate(unsigned long, void const*)+0x4e>
   2b7f2:	48 b8 aa aa aa aa aa aa aa 0a 	movabs rax,0xaaaaaaaaaaaaaaa
   2b7fc:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b800:	76 05                	jbe    2b807 <__gnu_cxx::new_allocator<AABB>::allocate(unsigned long, void const*)+0x49>
   2b802:	e8 09 8b fd ff       	call   4310 <std::__throw_bad_array_new_length()@plt>
   2b807:	e8 04 89 fd ff       	call   4110 <std::__throw_bad_alloc()@plt>
   2b80c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2b810:	48 89 d0             	mov    rax,rdx
   2b813:	48 01 c0             	add    rax,rax
   2b816:	48 01 d0             	add    rax,rdx
   2b819:	48 c1 e0 03          	shl    rax,0x3
   2b81d:	48 89 c7             	mov    rdi,rax
   2b820:	e8 0b 8c fd ff       	call   4430 <operator new(unsigned long)@plt>
   2b825:	90                   	nop
   2b826:	c9                   	leave  
   2b827:	c3                   	ret    

000000000002b828 <AABB* std::__relocate_a<AABB*, AABB*, std::allocator<AABB> >(AABB*, AABB*, AABB*, std::allocator<AABB>&)>:
   2b828:	55                   	push   rbp
   2b829:	48 89 e5             	mov    rbp,rsp
   2b82c:	41 54                	push   r12
   2b82e:	53                   	push   rbx
   2b82f:	48 83 ec 20          	sub    rsp,0x20
   2b833:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2b837:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2b83b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2b83f:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2b843:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b847:	48 89 c7             	mov    rdi,rax
   2b84a:	e8 c7 04 00 00       	call   2bd16 <AABB* std::__niter_base<AABB*>(AABB*)>
   2b84f:	49 89 c4             	mov    r12,rax
   2b852:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2b856:	48 89 c7             	mov    rdi,rax
   2b859:	e8 b8 04 00 00       	call   2bd16 <AABB* std::__niter_base<AABB*>(AABB*)>
   2b85e:	48 89 c3             	mov    rbx,rax
   2b861:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2b865:	48 89 c7             	mov    rdi,rax
   2b868:	e8 a9 04 00 00       	call   2bd16 <AABB* std::__niter_base<AABB*>(AABB*)>
   2b86d:	48 89 c7             	mov    rdi,rax
   2b870:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2b874:	48 89 c1             	mov    rcx,rax
   2b877:	4c 89 e2             	mov    rdx,r12
   2b87a:	48 89 de             	mov    rsi,rbx
   2b87d:	e8 a2 04 00 00       	call   2bd24 <std::enable_if<std::__is_bitwise_relocatable<AABB, void>::value, AABB*>::type std::__relocate_a_1<AABB, AABB>(AABB*, AABB*, AABB*, std::allocator<AABB>&)>
   2b882:	48 83 c4 20          	add    rsp,0x20
   2b886:	5b                   	pop    rbx
   2b887:	41 5c                	pop    r12
   2b889:	5d                   	pop    rbp
   2b88a:	c3                   	ret    

000000000002b88b <std::vector<Mesh, std::allocator<Mesh> >::_S_max_size(std::allocator<Mesh> const&)>:
   2b88b:	55                   	push   rbp
   2b88c:	48 89 e5             	mov    rbp,rsp
   2b88f:	48 83 ec 30          	sub    rsp,0x30
   2b893:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2b897:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2b8a0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2b8a4:	31 c0                	xor    eax,eax
   2b8a6:	48 b8 ff ff ff ff ff ff ff 1f 	movabs rax,0x1fffffffffffffff
   2b8b0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2b8b4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b8b8:	48 89 c7             	mov    rdi,rax
   2b8bb:	e8 e8 04 00 00       	call   2bda8 <std::allocator_traits<std::allocator<Mesh> >::max_size(std::allocator<Mesh> const&)>
   2b8c0:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2b8c4:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   2b8c8:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2b8cc:	48 89 d6             	mov    rsi,rdx
   2b8cf:	48 89 c7             	mov    rdi,rax
   2b8d2:	e8 70 9b ff ff       	call   25447 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   2b8d7:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2b8da:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2b8de:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2b8e7:	74 05                	je     2b8ee <std::vector<Mesh, std::allocator<Mesh> >::_S_max_size(std::allocator<Mesh> const&)+0x63>
   2b8e9:	e8 f2 8b fd ff       	call   44e0 <__stack_chk_fail@plt>
   2b8ee:	c9                   	leave  
   2b8ef:	c3                   	ret    

000000000002b8f0 <std::_Vector_base<Mesh, std::allocator<Mesh> >::_M_get_Tp_allocator() const>:
   2b8f0:	55                   	push   rbp
   2b8f1:	48 89 e5             	mov    rbp,rsp
   2b8f4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b8f8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b8fc:	5d                   	pop    rbp
   2b8fd:	c3                   	ret    

000000000002b8fe <__gnu_cxx::new_allocator<Mesh>::_M_max_size() const>:
   2b8fe:	55                   	push   rbp
   2b8ff:	48 89 e5             	mov    rbp,rsp
   2b902:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b906:	48 b8 ff ff ff ff ff ff ff 1f 	movabs rax,0x1fffffffffffffff
   2b910:	5d                   	pop    rbp
   2b911:	c3                   	ret    

000000000002b912 <__gnu_cxx::new_allocator<Mesh>::allocate(unsigned long, void const*)>:
   2b912:	55                   	push   rbp
   2b913:	48 89 e5             	mov    rbp,rsp
   2b916:	48 83 ec 20          	sub    rsp,0x20
   2b91a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2b91e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2b922:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2b926:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2b92a:	48 89 c7             	mov    rdi,rax
   2b92d:	e8 cc ff ff ff       	call   2b8fe <__gnu_cxx::new_allocator<Mesh>::_M_max_size() const>
   2b932:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b936:	0f 97 c0             	seta   al
   2b939:	0f b6 c0             	movzx  eax,al
   2b93c:	48 85 c0             	test   rax,rax
   2b93f:	0f 95 c0             	setne  al
   2b942:	84 c0                	test   al,al
   2b944:	74 1a                	je     2b960 <__gnu_cxx::new_allocator<Mesh>::allocate(unsigned long, void const*)+0x4e>
   2b946:	48 b8 ff ff ff ff ff ff ff 3f 	movabs rax,0x3fffffffffffffff
   2b950:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2b954:	76 05                	jbe    2b95b <__gnu_cxx::new_allocator<Mesh>::allocate(unsigned long, void const*)+0x49>
   2b956:	e8 b5 89 fd ff       	call   4310 <std::__throw_bad_array_new_length()@plt>
   2b95b:	e8 b0 87 fd ff       	call   4110 <std::__throw_bad_alloc()@plt>
   2b960:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2b964:	48 c1 e0 02          	shl    rax,0x2
   2b968:	48 89 c7             	mov    rdi,rax
   2b96b:	e8 c0 8a fd ff       	call   4430 <operator new(unsigned long)@plt>
   2b970:	90                   	nop
   2b971:	c9                   	leave  
   2b972:	c3                   	ret    

000000000002b973 <Mesh* std::__relocate_a<Mesh*, Mesh*, std::allocator<Mesh> >(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)>:
   2b973:	55                   	push   rbp
   2b974:	48 89 e5             	mov    rbp,rsp
   2b977:	41 54                	push   r12
   2b979:	53                   	push   rbx
   2b97a:	48 83 ec 20          	sub    rsp,0x20
   2b97e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2b982:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2b986:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2b98a:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2b98e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2b992:	48 89 c7             	mov    rdi,rax
   2b995:	e8 28 04 00 00       	call   2bdc2 <Mesh* std::__niter_base<Mesh*>(Mesh*)>
   2b99a:	49 89 c4             	mov    r12,rax
   2b99d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2b9a1:	48 89 c7             	mov    rdi,rax
   2b9a4:	e8 19 04 00 00       	call   2bdc2 <Mesh* std::__niter_base<Mesh*>(Mesh*)>
   2b9a9:	48 89 c3             	mov    rbx,rax
   2b9ac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2b9b0:	48 89 c7             	mov    rdi,rax
   2b9b3:	e8 0a 04 00 00       	call   2bdc2 <Mesh* std::__niter_base<Mesh*>(Mesh*)>
   2b9b8:	48 89 c7             	mov    rdi,rax
   2b9bb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2b9bf:	48 89 c1             	mov    rcx,rax
   2b9c2:	4c 89 e2             	mov    rdx,r12
   2b9c5:	48 89 de             	mov    rsi,rbx
   2b9c8:	e8 03 04 00 00       	call   2bdd0 <std::enable_if<std::__is_bitwise_relocatable<Mesh, void>::value, Mesh*>::type std::__relocate_a_1<Mesh, Mesh>(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)>
   2b9cd:	48 83 c4 20          	add    rsp,0x20
   2b9d1:	5b                   	pop    rbx
   2b9d2:	41 5c                	pop    r12
   2b9d4:	5d                   	pop    rbp
   2b9d5:	c3                   	ret    

000000000002b9d6 <std::vector<Transform, std::allocator<Transform> >::_S_max_size(std::allocator<Transform> const&)>:
   2b9d6:	55                   	push   rbp
   2b9d7:	48 89 e5             	mov    rbp,rsp
   2b9da:	48 83 ec 30          	sub    rsp,0x30
   2b9de:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2b9e2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2b9eb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2b9ef:	31 c0                	xor    eax,eax
   2b9f1:	48 b8 8e e3 38 8e e3 38 8e 03 	movabs rax,0x38e38e38e38e38e
   2b9fb:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2b9ff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2ba03:	48 89 c7             	mov    rdi,rax
   2ba06:	e8 28 04 00 00       	call   2be33 <std::allocator_traits<std::allocator<Transform> >::max_size(std::allocator<Transform> const&)>
   2ba0b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2ba0f:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   2ba13:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   2ba17:	48 89 d6             	mov    rsi,rdx
   2ba1a:	48 89 c7             	mov    rdi,rax
   2ba1d:	e8 25 9a ff ff       	call   25447 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   2ba22:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2ba25:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2ba29:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2ba32:	74 05                	je     2ba39 <std::vector<Transform, std::allocator<Transform> >::_S_max_size(std::allocator<Transform> const&)+0x63>
   2ba34:	e8 a7 8a fd ff       	call   44e0 <__stack_chk_fail@plt>
   2ba39:	c9                   	leave  
   2ba3a:	c3                   	ret    
   2ba3b:	90                   	nop

000000000002ba3c <std::_Vector_base<Transform, std::allocator<Transform> >::_M_get_Tp_allocator() const>:
   2ba3c:	55                   	push   rbp
   2ba3d:	48 89 e5             	mov    rbp,rsp
   2ba40:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ba44:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ba48:	5d                   	pop    rbp
   2ba49:	c3                   	ret    

000000000002ba4a <__gnu_cxx::new_allocator<Transform>::_M_max_size() const>:
   2ba4a:	55                   	push   rbp
   2ba4b:	48 89 e5             	mov    rbp,rsp
   2ba4e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ba52:	48 b8 8e e3 38 8e e3 38 8e 03 	movabs rax,0x38e38e38e38e38e
   2ba5c:	5d                   	pop    rbp
   2ba5d:	c3                   	ret    

000000000002ba5e <__gnu_cxx::new_allocator<Transform>::allocate(unsigned long, void const*)>:
   2ba5e:	55                   	push   rbp
   2ba5f:	48 89 e5             	mov    rbp,rsp
   2ba62:	48 83 ec 20          	sub    rsp,0x20
   2ba66:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2ba6a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2ba6e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2ba72:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2ba76:	48 89 c7             	mov    rdi,rax
   2ba79:	e8 cc ff ff ff       	call   2ba4a <__gnu_cxx::new_allocator<Transform>::_M_max_size() const>
   2ba7e:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2ba82:	0f 97 c0             	seta   al
   2ba85:	0f b6 c0             	movzx  eax,al
   2ba88:	48 85 c0             	test   rax,rax
   2ba8b:	0f 95 c0             	setne  al
   2ba8e:	84 c0                	test   al,al
   2ba90:	74 1a                	je     2baac <__gnu_cxx::new_allocator<Transform>::allocate(unsigned long, void const*)+0x4e>
   2ba92:	48 b8 1c c7 71 1c c7 71 1c 07 	movabs rax,0x71c71c71c71c71c
   2ba9c:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   2baa0:	76 05                	jbe    2baa7 <__gnu_cxx::new_allocator<Transform>::allocate(unsigned long, void const*)+0x49>
   2baa2:	e8 69 88 fd ff       	call   4310 <std::__throw_bad_array_new_length()@plt>
   2baa7:	e8 64 86 fd ff       	call   4110 <std::__throw_bad_alloc()@plt>
   2baac:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   2bab0:	48 89 d0             	mov    rax,rdx
   2bab3:	48 c1 e0 03          	shl    rax,0x3
   2bab7:	48 01 d0             	add    rax,rdx
   2baba:	48 c1 e0 02          	shl    rax,0x2
   2babe:	48 89 c7             	mov    rdi,rax
   2bac1:	e8 6a 89 fd ff       	call   4430 <operator new(unsigned long)@plt>
   2bac6:	90                   	nop
   2bac7:	c9                   	leave  
   2bac8:	c3                   	ret    

000000000002bac9 <Transform* std::__relocate_a<Transform*, Transform*, std::allocator<Transform> >(Transform*, Transform*, Transform*, std::allocator<Transform>&)>:
   2bac9:	55                   	push   rbp
   2baca:	48 89 e5             	mov    rbp,rsp
   2bacd:	41 54                	push   r12
   2bacf:	53                   	push   rbx
   2bad0:	48 83 ec 20          	sub    rsp,0x20
   2bad4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2bad8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2badc:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2bae0:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2bae4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bae8:	48 89 c7             	mov    rdi,rax
   2baeb:	e8 5d 03 00 00       	call   2be4d <Transform* std::__niter_base<Transform*>(Transform*)>
   2baf0:	49 89 c4             	mov    r12,rax
   2baf3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2baf7:	48 89 c7             	mov    rdi,rax
   2bafa:	e8 4e 03 00 00       	call   2be4d <Transform* std::__niter_base<Transform*>(Transform*)>
   2baff:	48 89 c3             	mov    rbx,rax
   2bb02:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2bb06:	48 89 c7             	mov    rdi,rax
   2bb09:	e8 3f 03 00 00       	call   2be4d <Transform* std::__niter_base<Transform*>(Transform*)>
   2bb0e:	48 89 c7             	mov    rdi,rax
   2bb11:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2bb15:	48 89 c1             	mov    rcx,rax
   2bb18:	4c 89 e2             	mov    rdx,r12
   2bb1b:	48 89 de             	mov    rsi,rbx
   2bb1e:	e8 38 03 00 00       	call   2be5b <std::enable_if<std::__is_bitwise_relocatable<Transform, void>::value, Transform*>::type std::__relocate_a_1<Transform, Transform>(Transform*, Transform*, Transform*, std::allocator<Transform>&)>
   2bb23:	48 83 c4 20          	add    rsp,0x20
   2bb27:	5b                   	pop    rbx
   2bb28:	41 5c                	pop    r12
   2bb2a:	5d                   	pop    rbp
   2bb2b:	c3                   	ret    

000000000002bb2c <std::allocator_traits<std::allocator<unsigned int> >::max_size(std::allocator<unsigned int> const&)>:
   2bb2c:	55                   	push   rbp
   2bb2d:	48 89 e5             	mov    rbp,rsp
   2bb30:	48 83 ec 10          	sub    rsp,0x10
   2bb34:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bb38:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bb3c:	48 89 c7             	mov    rdi,rax
   2bb3f:	e8 9e 03 00 00       	call   2bee2 <__gnu_cxx::new_allocator<unsigned int>::max_size() const>
   2bb44:	c9                   	leave  
   2bb45:	c3                   	ret    

000000000002bb46 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>:
   2bb46:	55                   	push   rbp
   2bb47:	48 89 e5             	mov    rbp,rsp
   2bb4a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bb4e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bb52:	5d                   	pop    rbp
   2bb53:	c3                   	ret    

000000000002bb54 <std::enable_if<std::__is_bitwise_relocatable<unsigned int, void>::value, unsigned int*>::type std::__relocate_a_1<unsigned int, unsigned int>(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>:
   2bb54:	55                   	push   rbp
   2bb55:	48 89 e5             	mov    rbp,rsp
   2bb58:	48 83 ec 30          	sub    rsp,0x30
   2bb5c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2bb60:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2bb64:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2bb68:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2bb6c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2bb70:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   2bb74:	48 c1 f8 02          	sar    rax,0x2
   2bb78:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2bb7c:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2bb81:	7e 1f                	jle    2bba2 <std::enable_if<std::__is_bitwise_relocatable<unsigned int, void>::value, unsigned int*>::type std::__relocate_a_1<unsigned int, unsigned int>(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)+0x4e>
   2bb83:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bb87:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2bb8f:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2bb93:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bb97:	48 89 ce             	mov    rsi,rcx
   2bb9a:	48 89 c7             	mov    rdi,rax
   2bb9d:	e8 5e 8b fd ff       	call   4700 <memmove@plt>
   2bba2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bba6:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2bbae:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bbb2:	48 01 d0             	add    rax,rdx
   2bbb5:	c9                   	leave  
   2bbb6:	c3                   	ret    

000000000002bbb7 <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::max_size(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
   2bbb7:	55                   	push   rbp
   2bbb8:	48 89 e5             	mov    rbp,rsp
   2bbbb:	48 83 ec 10          	sub    rsp,0x10
   2bbbf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bbc3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bbc7:	48 89 c7             	mov    rdi,rax
   2bbca:	e8 2d 03 00 00       	call   2befc <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::max_size() const>
   2bbcf:	c9                   	leave  
   2bbd0:	c3                   	ret    

000000000002bbd1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__niter_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
   2bbd1:	55                   	push   rbp
   2bbd2:	48 89 e5             	mov    rbp,rsp
   2bbd5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bbd9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bbdd:	5d                   	pop    rbp
   2bbde:	c3                   	ret    

000000000002bbdf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__relocate_a_1<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>:
   2bbdf:	55                   	push   rbp
   2bbe0:	48 89 e5             	mov    rbp,rsp
   2bbe3:	53                   	push   rbx
   2bbe4:	48 83 ec 38          	sub    rsp,0x38
   2bbe8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2bbec:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2bbf0:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   2bbf4:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   2bbf8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2bbfc:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2bc00:	eb 3a                	jmp    2bc3c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__relocate_a_1<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)+0x5d>
   2bc02:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bc06:	48 89 c7             	mov    rdi,rax
   2bc09:	e8 df 9e ff ff       	call   25aed <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2bc0e:	48 89 c3             	mov    rbx,rax
   2bc11:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2bc15:	48 89 c7             	mov    rdi,rax
   2bc18:	e8 d0 9e ff ff       	call   25aed <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2bc1d:	48 89 c1             	mov    rcx,rax
   2bc20:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2bc24:	48 89 c2             	mov    rdx,rax
   2bc27:	48 89 de             	mov    rsi,rbx
   2bc2a:	48 89 cf             	mov    rdi,rcx
   2bc2d:	e8 e4 02 00 00       	call   2bf16 <void std::__relocate_object_a<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   2bc32:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
   2bc37:	48 83 45 e8 20       	add    QWORD PTR [rbp-0x18],0x20
   2bc3c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bc40:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
   2bc44:	75 bc                	jne    2bc02 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__relocate_a_1<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)+0x23>
   2bc46:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2bc4a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2bc4e:	c9                   	leave  
   2bc4f:	c3                   	ret    

000000000002bc50 <std::allocator_traits<std::allocator<Tex> >::max_size(std::allocator<Tex> const&)>:
   2bc50:	55                   	push   rbp
   2bc51:	48 89 e5             	mov    rbp,rsp
   2bc54:	48 83 ec 10          	sub    rsp,0x10
   2bc58:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bc5c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bc60:	48 89 c7             	mov    rdi,rax
   2bc63:	e8 06 03 00 00       	call   2bf6e <__gnu_cxx::new_allocator<Tex>::max_size() const>
   2bc68:	c9                   	leave  
   2bc69:	c3                   	ret    

000000000002bc6a <Tex* std::__niter_base<Tex*>(Tex*)>:
   2bc6a:	55                   	push   rbp
   2bc6b:	48 89 e5             	mov    rbp,rsp
   2bc6e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bc72:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bc76:	5d                   	pop    rbp
   2bc77:	c3                   	ret    

000000000002bc78 <std::enable_if<std::__is_bitwise_relocatable<Tex, void>::value, Tex*>::type std::__relocate_a_1<Tex, Tex>(Tex*, Tex*, Tex*, std::allocator<Tex>&)>:
   2bc78:	55                   	push   rbp
   2bc79:	48 89 e5             	mov    rbp,rsp
   2bc7c:	48 83 ec 30          	sub    rsp,0x30
   2bc80:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2bc84:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2bc88:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2bc8c:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2bc90:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2bc94:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   2bc98:	48 c1 f8 03          	sar    rax,0x3
   2bc9c:	48 89 c2             	mov    rdx,rax
   2bc9f:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   2bca9:	48 0f af c2          	imul   rax,rdx
   2bcad:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2bcb1:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2bcb6:	7e 27                	jle    2bcdf <std::enable_if<std::__is_bitwise_relocatable<Tex, void>::value, Tex*>::type std::__relocate_a_1<Tex, Tex>(Tex*, Tex*, Tex*, std::allocator<Tex>&)+0x67>
   2bcb8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2bcbc:	48 89 d0             	mov    rax,rdx
   2bcbf:	48 01 c0             	add    rax,rax
   2bcc2:	48 01 d0             	add    rax,rdx
   2bcc5:	48 c1 e0 03          	shl    rax,0x3
   2bcc9:	48 89 c2             	mov    rdx,rax
   2bccc:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2bcd0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bcd4:	48 89 ce             	mov    rsi,rcx
   2bcd7:	48 89 c7             	mov    rdi,rax
   2bcda:	e8 21 8a fd ff       	call   4700 <memmove@plt>
   2bcdf:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2bce3:	48 89 d0             	mov    rax,rdx
   2bce6:	48 01 c0             	add    rax,rax
   2bce9:	48 01 d0             	add    rax,rdx
   2bcec:	48 c1 e0 03          	shl    rax,0x3
   2bcf0:	48 89 c2             	mov    rdx,rax
   2bcf3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bcf7:	48 01 d0             	add    rax,rdx
   2bcfa:	c9                   	leave  
   2bcfb:	c3                   	ret    

000000000002bcfc <std::allocator_traits<std::allocator<AABB> >::max_size(std::allocator<AABB> const&)>:
   2bcfc:	55                   	push   rbp
   2bcfd:	48 89 e5             	mov    rbp,rsp
   2bd00:	48 83 ec 10          	sub    rsp,0x10
   2bd04:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bd08:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bd0c:	48 89 c7             	mov    rdi,rax
   2bd0f:	e8 74 02 00 00       	call   2bf88 <__gnu_cxx::new_allocator<AABB>::max_size() const>
   2bd14:	c9                   	leave  
   2bd15:	c3                   	ret    

000000000002bd16 <AABB* std::__niter_base<AABB*>(AABB*)>:
   2bd16:	55                   	push   rbp
   2bd17:	48 89 e5             	mov    rbp,rsp
   2bd1a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bd1e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bd22:	5d                   	pop    rbp
   2bd23:	c3                   	ret    

000000000002bd24 <std::enable_if<std::__is_bitwise_relocatable<AABB, void>::value, AABB*>::type std::__relocate_a_1<AABB, AABB>(AABB*, AABB*, AABB*, std::allocator<AABB>&)>:
   2bd24:	55                   	push   rbp
   2bd25:	48 89 e5             	mov    rbp,rsp
   2bd28:	48 83 ec 30          	sub    rsp,0x30
   2bd2c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2bd30:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2bd34:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2bd38:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2bd3c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2bd40:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   2bd44:	48 c1 f8 03          	sar    rax,0x3
   2bd48:	48 89 c2             	mov    rdx,rax
   2bd4b:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   2bd55:	48 0f af c2          	imul   rax,rdx
   2bd59:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2bd5d:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2bd62:	7e 27                	jle    2bd8b <std::enable_if<std::__is_bitwise_relocatable<AABB, void>::value, AABB*>::type std::__relocate_a_1<AABB, AABB>(AABB*, AABB*, AABB*, std::allocator<AABB>&)+0x67>
   2bd64:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2bd68:	48 89 d0             	mov    rax,rdx
   2bd6b:	48 01 c0             	add    rax,rax
   2bd6e:	48 01 d0             	add    rax,rdx
   2bd71:	48 c1 e0 03          	shl    rax,0x3
   2bd75:	48 89 c2             	mov    rdx,rax
   2bd78:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2bd7c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bd80:	48 89 ce             	mov    rsi,rcx
   2bd83:	48 89 c7             	mov    rdi,rax
   2bd86:	e8 75 89 fd ff       	call   4700 <memmove@plt>
   2bd8b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2bd8f:	48 89 d0             	mov    rax,rdx
   2bd92:	48 01 c0             	add    rax,rax
   2bd95:	48 01 d0             	add    rax,rdx
   2bd98:	48 c1 e0 03          	shl    rax,0x3
   2bd9c:	48 89 c2             	mov    rdx,rax
   2bd9f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bda3:	48 01 d0             	add    rax,rdx
   2bda6:	c9                   	leave  
   2bda7:	c3                   	ret    

000000000002bda8 <std::allocator_traits<std::allocator<Mesh> >::max_size(std::allocator<Mesh> const&)>:
   2bda8:	55                   	push   rbp
   2bda9:	48 89 e5             	mov    rbp,rsp
   2bdac:	48 83 ec 10          	sub    rsp,0x10
   2bdb0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bdb4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bdb8:	48 89 c7             	mov    rdi,rax
   2bdbb:	e8 e2 01 00 00       	call   2bfa2 <__gnu_cxx::new_allocator<Mesh>::max_size() const>
   2bdc0:	c9                   	leave  
   2bdc1:	c3                   	ret    

000000000002bdc2 <Mesh* std::__niter_base<Mesh*>(Mesh*)>:
   2bdc2:	55                   	push   rbp
   2bdc3:	48 89 e5             	mov    rbp,rsp
   2bdc6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bdca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bdce:	5d                   	pop    rbp
   2bdcf:	c3                   	ret    

000000000002bdd0 <std::enable_if<std::__is_bitwise_relocatable<Mesh, void>::value, Mesh*>::type std::__relocate_a_1<Mesh, Mesh>(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)>:
   2bdd0:	55                   	push   rbp
   2bdd1:	48 89 e5             	mov    rbp,rsp
   2bdd4:	48 83 ec 30          	sub    rsp,0x30
   2bdd8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2bddc:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2bde0:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2bde4:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2bde8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2bdec:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   2bdf0:	48 c1 f8 02          	sar    rax,0x2
   2bdf4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2bdf8:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2bdfd:	7e 1f                	jle    2be1e <std::enable_if<std::__is_bitwise_relocatable<Mesh, void>::value, Mesh*>::type std::__relocate_a_1<Mesh, Mesh>(Mesh*, Mesh*, Mesh*, std::allocator<Mesh>&)+0x4e>
   2bdff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2be03:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2be0b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2be0f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2be13:	48 89 ce             	mov    rsi,rcx
   2be16:	48 89 c7             	mov    rdi,rax
   2be19:	e8 e2 88 fd ff       	call   4700 <memmove@plt>
   2be1e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2be22:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   2be2a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2be2e:	48 01 d0             	add    rax,rdx
   2be31:	c9                   	leave  
   2be32:	c3                   	ret    

000000000002be33 <std::allocator_traits<std::allocator<Transform> >::max_size(std::allocator<Transform> const&)>:
   2be33:	55                   	push   rbp
   2be34:	48 89 e5             	mov    rbp,rsp
   2be37:	48 83 ec 10          	sub    rsp,0x10
   2be3b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2be3f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2be43:	48 89 c7             	mov    rdi,rax
   2be46:	e8 71 01 00 00       	call   2bfbc <__gnu_cxx::new_allocator<Transform>::max_size() const>
   2be4b:	c9                   	leave  
   2be4c:	c3                   	ret    

000000000002be4d <Transform* std::__niter_base<Transform*>(Transform*)>:
   2be4d:	55                   	push   rbp
   2be4e:	48 89 e5             	mov    rbp,rsp
   2be51:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2be55:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2be59:	5d                   	pop    rbp
   2be5a:	c3                   	ret    

000000000002be5b <std::enable_if<std::__is_bitwise_relocatable<Transform, void>::value, Transform*>::type std::__relocate_a_1<Transform, Transform>(Transform*, Transform*, Transform*, std::allocator<Transform>&)>:
   2be5b:	55                   	push   rbp
   2be5c:	48 89 e5             	mov    rbp,rsp
   2be5f:	48 83 ec 30          	sub    rsp,0x30
   2be63:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2be67:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2be6b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2be6f:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   2be73:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2be77:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   2be7b:	48 c1 f8 02          	sar    rax,0x2
   2be7f:	48 89 c2             	mov    rdx,rax
   2be82:	48 b8 39 8e e3 38 8e e3 38 8e 	movabs rax,0x8e38e38e38e38e39
   2be8c:	48 0f af c2          	imul   rax,rdx
   2be90:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2be94:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   2be99:	7e 28                	jle    2bec3 <std::enable_if<std::__is_bitwise_relocatable<Transform, void>::value, Transform*>::type std::__relocate_a_1<Transform, Transform>(Transform*, Transform*, Transform*, std::allocator<Transform>&)+0x68>
   2be9b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2be9f:	48 89 d0             	mov    rax,rdx
   2bea2:	48 c1 e0 03          	shl    rax,0x3
   2bea6:	48 01 d0             	add    rax,rdx
   2bea9:	48 c1 e0 02          	shl    rax,0x2
   2bead:	48 89 c2             	mov    rdx,rax
   2beb0:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   2beb4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2beb8:	48 89 ce             	mov    rsi,rcx
   2bebb:	48 89 c7             	mov    rdi,rax
   2bebe:	e8 3d 88 fd ff       	call   4700 <memmove@plt>
   2bec3:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2bec7:	48 89 d0             	mov    rax,rdx
   2beca:	48 c1 e0 03          	shl    rax,0x3
   2bece:	48 01 d0             	add    rax,rdx
   2bed1:	48 c1 e0 02          	shl    rax,0x2
   2bed5:	48 89 c2             	mov    rdx,rax
   2bed8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2bedc:	48 01 d0             	add    rax,rdx
   2bedf:	c9                   	leave  
   2bee0:	c3                   	ret    
   2bee1:	90                   	nop

000000000002bee2 <__gnu_cxx::new_allocator<unsigned int>::max_size() const>:
   2bee2:	55                   	push   rbp
   2bee3:	48 89 e5             	mov    rbp,rsp
   2bee6:	48 83 ec 10          	sub    rsp,0x10
   2beea:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2beee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bef2:	48 89 c7             	mov    rdi,rax
   2bef5:	e8 c4 f4 ff ff       	call   2b3be <__gnu_cxx::new_allocator<unsigned int>::_M_max_size() const>
   2befa:	c9                   	leave  
   2befb:	c3                   	ret    

000000000002befc <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::max_size() const>:
   2befc:	55                   	push   rbp
   2befd:	48 89 e5             	mov    rbp,rsp
   2bf00:	48 83 ec 10          	sub    rsp,0x10
   2bf04:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bf08:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bf0c:	48 89 c7             	mov    rdi,rax
   2bf0f:	e8 f6 f5 ff ff       	call   2b50a <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::_M_max_size() const>
   2bf14:	c9                   	leave  
   2bf15:	c3                   	ret    

000000000002bf16 <void std::__relocate_object_a<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>:
   2bf16:	55                   	push   rbp
   2bf17:	48 89 e5             	mov    rbp,rsp
   2bf1a:	48 83 ec 20          	sub    rsp,0x20
   2bf1e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bf22:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2bf26:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2bf2a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2bf2e:	48 89 c7             	mov    rdi,rax
   2bf31:	e8 94 9a ff ff       	call   259ca <std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2bf36:	48 89 c2             	mov    rdx,rax
   2bf39:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   2bf3d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2bf41:	48 89 ce             	mov    rsi,rcx
   2bf44:	48 89 c7             	mov    rdi,rax
   2bf47:	e8 8a 00 00 00       	call   2bfd6 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   2bf4c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2bf50:	48 89 c7             	mov    rdi,rax
   2bf53:	e8 95 9b ff ff       	call   25aed <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2bf58:	48 89 c2             	mov    rdx,rax
   2bf5b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2bf5f:	48 89 d6             	mov    rsi,rdx
   2bf62:	48 89 c7             	mov    rdi,rax
   2bf65:	e8 3a de ff ff       	call   29da4 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   2bf6a:	90                   	nop
   2bf6b:	c9                   	leave  
   2bf6c:	c3                   	ret    
   2bf6d:	90                   	nop

000000000002bf6e <__gnu_cxx::new_allocator<Tex>::max_size() const>:
   2bf6e:	55                   	push   rbp
   2bf6f:	48 89 e5             	mov    rbp,rsp
   2bf72:	48 83 ec 10          	sub    rsp,0x10
   2bf76:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bf7a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bf7e:	48 89 c7             	mov    rdi,rax
   2bf81:	e8 d0 f6 ff ff       	call   2b656 <__gnu_cxx::new_allocator<Tex>::_M_max_size() const>
   2bf86:	c9                   	leave  
   2bf87:	c3                   	ret    

000000000002bf88 <__gnu_cxx::new_allocator<AABB>::max_size() const>:
   2bf88:	55                   	push   rbp
   2bf89:	48 89 e5             	mov    rbp,rsp
   2bf8c:	48 83 ec 10          	sub    rsp,0x10
   2bf90:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bf94:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bf98:	48 89 c7             	mov    rdi,rax
   2bf9b:	e8 0a f8 ff ff       	call   2b7aa <__gnu_cxx::new_allocator<AABB>::_M_max_size() const>
   2bfa0:	c9                   	leave  
   2bfa1:	c3                   	ret    

000000000002bfa2 <__gnu_cxx::new_allocator<Mesh>::max_size() const>:
   2bfa2:	55                   	push   rbp
   2bfa3:	48 89 e5             	mov    rbp,rsp
   2bfa6:	48 83 ec 10          	sub    rsp,0x10
   2bfaa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bfae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bfb2:	48 89 c7             	mov    rdi,rax
   2bfb5:	e8 44 f9 ff ff       	call   2b8fe <__gnu_cxx::new_allocator<Mesh>::_M_max_size() const>
   2bfba:	c9                   	leave  
   2bfbb:	c3                   	ret    

000000000002bfbc <__gnu_cxx::new_allocator<Transform>::max_size() const>:
   2bfbc:	55                   	push   rbp
   2bfbd:	48 89 e5             	mov    rbp,rsp
   2bfc0:	48 83 ec 10          	sub    rsp,0x10
   2bfc4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bfc8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2bfcc:	48 89 c7             	mov    rdi,rax
   2bfcf:	e8 76 fa ff ff       	call   2ba4a <__gnu_cxx::new_allocator<Transform>::_M_max_size() const>
   2bfd4:	c9                   	leave  
   2bfd5:	c3                   	ret    

000000000002bfd6 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
   2bfd6:	55                   	push   rbp
   2bfd7:	48 89 e5             	mov    rbp,rsp
   2bfda:	48 83 ec 20          	sub    rsp,0x20
   2bfde:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2bfe2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2bfe6:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   2bfea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2bfee:	48 89 c7             	mov    rdi,rax
   2bff1:	e8 19 00 00 00       	call   2c00f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type&)>
   2bff6:	48 89 c2             	mov    rdx,rax
   2bff9:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   2bffd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c001:	48 89 ce             	mov    rsi,rcx
   2c004:	48 89 c7             	mov    rdi,rax
   2c007:	e8 12 00 00 00       	call   2c01e <void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   2c00c:	90                   	nop
   2c00d:	c9                   	leave  
   2c00e:	c3                   	ret    

000000000002c00f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type&)>:
   2c00f:	55                   	push   rbp
   2c010:	48 89 e5             	mov    rbp,rsp
   2c013:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c017:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c01b:	5d                   	pop    rbp
   2c01c:	c3                   	ret    
   2c01d:	90                   	nop

000000000002c01e <void __gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
   2c01e:	55                   	push   rbp
   2c01f:	48 89 e5             	mov    rbp,rsp
   2c022:	53                   	push   rbx
   2c023:	48 83 ec 28          	sub    rsp,0x28
   2c027:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2c02b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2c02f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2c033:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c037:	48 89 c7             	mov    rdi,rax
   2c03a:	e8 d0 ff ff ff       	call   2c00f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type&)>
   2c03f:	48 89 c3             	mov    rbx,rax
   2c042:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c046:	48 89 c6             	mov    rsi,rax
   2c049:	bf 20 00 00 00       	mov    edi,0x20
   2c04e:	e8 5e 91 ff ff       	call   251b1 <operator new(unsigned long, void*)>
   2c053:	48 89 de             	mov    rsi,rbx
   2c056:	48 89 c7             	mov    rdi,rax
   2c059:	e8 e2 81 fd ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2c05e:	90                   	nop
   2c05f:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2c063:	c9                   	leave  
   2c064:	c3                   	ret    
   2c065:	90                   	nop

000000000002c066 <objl::Vector2::Vector2()>:
   2c066:	55                   	push   rbp
   2c067:	48 89 e5             	mov    rbp,rsp
   2c06a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c06e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c072:	66 0f ef c0          	pxor   xmm0,xmm0
   2c076:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   2c07a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c07e:	66 0f ef c0          	pxor   xmm0,xmm0
   2c082:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   2c087:	90                   	nop
   2c088:	5d                   	pop    rbp
   2c089:	c3                   	ret    

000000000002c08a <objl::Vector2::Vector2(float, float)>:
   2c08a:	55                   	push   rbp
   2c08b:	48 89 e5             	mov    rbp,rsp
   2c08e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c092:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   2c097:	f3 0f 11 4d f0       	movss  DWORD PTR [rbp-0x10],xmm1
   2c09c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c0a0:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2c0a5:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   2c0a9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c0ad:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   2c0b2:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   2c0b7:	90                   	nop
   2c0b8:	5d                   	pop    rbp
   2c0b9:	c3                   	ret    

000000000002c0ba <objl::Vector2::operator==(objl::Vector2 const&) const>:
   2c0ba:	55                   	push   rbp
   2c0bb:	48 89 e5             	mov    rbp,rsp
   2c0be:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c0c2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2c0c6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c0ca:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c0ce:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c0d2:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c0d6:	0f 2e c1             	ucomiss xmm0,xmm1
   2c0d9:	7a 28                	jp     2c103 <objl::Vector2::operator==(objl::Vector2 const&) const+0x49>
   2c0db:	0f 2e c1             	ucomiss xmm0,xmm1
   2c0de:	75 23                	jne    2c103 <objl::Vector2::operator==(objl::Vector2 const&) const+0x49>
   2c0e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c0e4:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c0e9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c0ed:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c0f2:	0f 2e c1             	ucomiss xmm0,xmm1
   2c0f5:	7a 0c                	jp     2c103 <objl::Vector2::operator==(objl::Vector2 const&) const+0x49>
   2c0f7:	0f 2e c1             	ucomiss xmm0,xmm1
   2c0fa:	75 07                	jne    2c103 <objl::Vector2::operator==(objl::Vector2 const&) const+0x49>
   2c0fc:	b8 01 00 00 00       	mov    eax,0x1
   2c101:	eb 05                	jmp    2c108 <objl::Vector2::operator==(objl::Vector2 const&) const+0x4e>
   2c103:	b8 00 00 00 00       	mov    eax,0x0
   2c108:	5d                   	pop    rbp
   2c109:	c3                   	ret    

000000000002c10a <objl::Vector2::operator!=(objl::Vector2 const&) const>:
   2c10a:	55                   	push   rbp
   2c10b:	48 89 e5             	mov    rbp,rsp
   2c10e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c112:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2c116:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c11a:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c11e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c122:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c126:	0f 2e c1             	ucomiss xmm0,xmm1
   2c129:	7a 21                	jp     2c14c <objl::Vector2::operator!=(objl::Vector2 const&) const+0x42>
   2c12b:	0f 2e c1             	ucomiss xmm0,xmm1
   2c12e:	75 1c                	jne    2c14c <objl::Vector2::operator!=(objl::Vector2 const&) const+0x42>
   2c130:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c134:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c139:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c13d:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c142:	0f 2e c1             	ucomiss xmm0,xmm1
   2c145:	7a 05                	jp     2c14c <objl::Vector2::operator!=(objl::Vector2 const&) const+0x42>
   2c147:	0f 2e c1             	ucomiss xmm0,xmm1
   2c14a:	74 07                	je     2c153 <objl::Vector2::operator!=(objl::Vector2 const&) const+0x49>
   2c14c:	b8 01 00 00 00       	mov    eax,0x1
   2c151:	eb 05                	jmp    2c158 <objl::Vector2::operator!=(objl::Vector2 const&) const+0x4e>
   2c153:	b8 00 00 00 00       	mov    eax,0x0
   2c158:	5d                   	pop    rbp
   2c159:	c3                   	ret    

000000000002c15a <objl::Vector2::operator+(objl::Vector2 const&) const>:
   2c15a:	55                   	push   rbp
   2c15b:	48 89 e5             	mov    rbp,rsp
   2c15e:	48 83 ec 20          	sub    rsp,0x20
   2c162:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2c166:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2c16a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c173:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c177:	31 c0                	xor    eax,eax
   2c179:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c17d:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c182:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c186:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c18b:	0f 28 d1             	movaps xmm2,xmm1
   2c18e:	f3 0f 58 d0          	addss  xmm2,xmm0
   2c192:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c196:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c19a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c19e:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c1a2:	f3 0f 58 c8          	addss  xmm1,xmm0
   2c1a6:	66 0f 7e ca          	movd   edx,xmm1
   2c1aa:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2c1ae:	0f 28 ca             	movaps xmm1,xmm2
   2c1b1:	66 0f 6e c2          	movd   xmm0,edx
   2c1b5:	48 89 c7             	mov    rdi,rax
   2c1b8:	e8 cd fe ff ff       	call   2c08a <objl::Vector2::Vector2(float, float)>
   2c1bd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c1c1:	48 89 c2             	mov    rdx,rax
   2c1c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c1c8:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2c1d1:	74 05                	je     2c1d8 <objl::Vector2::operator+(objl::Vector2 const&) const+0x7e>
   2c1d3:	e8 08 83 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2c1d8:	66 48 0f 6e c2       	movq   xmm0,rdx
   2c1dd:	c9                   	leave  
   2c1de:	c3                   	ret    
   2c1df:	90                   	nop

000000000002c1e0 <objl::Vector2::operator-(objl::Vector2 const&) const>:
   2c1e0:	55                   	push   rbp
   2c1e1:	48 89 e5             	mov    rbp,rsp
   2c1e4:	48 83 ec 20          	sub    rsp,0x20
   2c1e8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2c1ec:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2c1f0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c1f9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c1fd:	31 c0                	xor    eax,eax
   2c1ff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c203:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c208:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c20c:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c211:	0f 28 d0             	movaps xmm2,xmm0
   2c214:	f3 0f 5c d1          	subss  xmm2,xmm1
   2c218:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c21c:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c220:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c224:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c228:	f3 0f 5c c1          	subss  xmm0,xmm1
   2c22c:	66 0f 7e c2          	movd   edx,xmm0
   2c230:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2c234:	0f 28 ca             	movaps xmm1,xmm2
   2c237:	66 0f 6e c2          	movd   xmm0,edx
   2c23b:	48 89 c7             	mov    rdi,rax
   2c23e:	e8 47 fe ff ff       	call   2c08a <objl::Vector2::Vector2(float, float)>
   2c243:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c247:	48 89 c2             	mov    rdx,rax
   2c24a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c24e:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2c257:	74 05                	je     2c25e <objl::Vector2::operator-(objl::Vector2 const&) const+0x7e>
   2c259:	e8 82 82 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2c25e:	66 48 0f 6e c2       	movq   xmm0,rdx
   2c263:	c9                   	leave  
   2c264:	c3                   	ret    
   2c265:	90                   	nop

000000000002c266 <objl::Vector2::operator*(float const&) const>:
   2c266:	55                   	push   rbp
   2c267:	48 89 e5             	mov    rbp,rsp
   2c26a:	48 83 ec 20          	sub    rsp,0x20
   2c26e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2c272:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2c276:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c27f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c283:	31 c0                	xor    eax,eax
   2c285:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c289:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c28e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c292:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c296:	0f 28 d1             	movaps xmm2,xmm1
   2c299:	f3 0f 59 d0          	mulss  xmm2,xmm0
   2c29d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c2a1:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c2a5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c2a9:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c2ad:	f3 0f 59 c8          	mulss  xmm1,xmm0
   2c2b1:	66 0f 7e ca          	movd   edx,xmm1
   2c2b5:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   2c2b9:	0f 28 ca             	movaps xmm1,xmm2
   2c2bc:	66 0f 6e c2          	movd   xmm0,edx
   2c2c0:	48 89 c7             	mov    rdi,rax
   2c2c3:	e8 c2 fd ff ff       	call   2c08a <objl::Vector2::Vector2(float, float)>
   2c2c8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c2cc:	48 89 c2             	mov    rdx,rax
   2c2cf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c2d3:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2c2dc:	74 05                	je     2c2e3 <objl::Vector2::operator*(float const&) const+0x7d>
   2c2de:	e8 fd 81 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2c2e3:	66 48 0f 6e c2       	movq   xmm0,rdx
   2c2e8:	c9                   	leave  
   2c2e9:	c3                   	ret    

000000000002c2ea <objl::Vector3::Vector3()>:
   2c2ea:	55                   	push   rbp
   2c2eb:	48 89 e5             	mov    rbp,rsp
   2c2ee:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c2f2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c2f6:	66 0f ef c0          	pxor   xmm0,xmm0
   2c2fa:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   2c2fe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c302:	66 0f ef c0          	pxor   xmm0,xmm0
   2c306:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   2c30b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c30f:	66 0f ef c0          	pxor   xmm0,xmm0
   2c313:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   2c318:	90                   	nop
   2c319:	5d                   	pop    rbp
   2c31a:	c3                   	ret    
   2c31b:	90                   	nop

000000000002c31c <objl::Vector3::Vector3(float, float, float)>:
   2c31c:	55                   	push   rbp
   2c31d:	48 89 e5             	mov    rbp,rsp
   2c320:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c324:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   2c329:	f3 0f 11 4d f0       	movss  DWORD PTR [rbp-0x10],xmm1
   2c32e:	f3 0f 11 55 ec       	movss  DWORD PTR [rbp-0x14],xmm2
   2c333:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c337:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2c33c:	f3 0f 11 00          	movss  DWORD PTR [rax],xmm0
   2c340:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c344:	f3 0f 10 45 f0       	movss  xmm0,DWORD PTR [rbp-0x10]
   2c349:	f3 0f 11 40 04       	movss  DWORD PTR [rax+0x4],xmm0
   2c34e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c352:	f3 0f 10 45 ec       	movss  xmm0,DWORD PTR [rbp-0x14]
   2c357:	f3 0f 11 40 08       	movss  DWORD PTR [rax+0x8],xmm0
   2c35c:	90                   	nop
   2c35d:	5d                   	pop    rbp
   2c35e:	c3                   	ret    
   2c35f:	90                   	nop

000000000002c360 <objl::Vector3::operator==(objl::Vector3 const&) const>:
   2c360:	55                   	push   rbp
   2c361:	48 89 e5             	mov    rbp,rsp
   2c364:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c368:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2c36c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c370:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c374:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c378:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c37c:	0f 2e c1             	ucomiss xmm0,xmm1
   2c37f:	7a 44                	jp     2c3c5 <objl::Vector3::operator==(objl::Vector3 const&) const+0x65>
   2c381:	0f 2e c1             	ucomiss xmm0,xmm1
   2c384:	75 3f                	jne    2c3c5 <objl::Vector3::operator==(objl::Vector3 const&) const+0x65>
   2c386:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c38a:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c38f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c393:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c398:	0f 2e c1             	ucomiss xmm0,xmm1
   2c39b:	7a 28                	jp     2c3c5 <objl::Vector3::operator==(objl::Vector3 const&) const+0x65>
   2c39d:	0f 2e c1             	ucomiss xmm0,xmm1
   2c3a0:	75 23                	jne    2c3c5 <objl::Vector3::operator==(objl::Vector3 const&) const+0x65>
   2c3a2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c3a6:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   2c3ab:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c3af:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2c3b4:	0f 2e c1             	ucomiss xmm0,xmm1
   2c3b7:	7a 0c                	jp     2c3c5 <objl::Vector3::operator==(objl::Vector3 const&) const+0x65>
   2c3b9:	0f 2e c1             	ucomiss xmm0,xmm1
   2c3bc:	75 07                	jne    2c3c5 <objl::Vector3::operator==(objl::Vector3 const&) const+0x65>
   2c3be:	b8 01 00 00 00       	mov    eax,0x1
   2c3c3:	eb 05                	jmp    2c3ca <objl::Vector3::operator==(objl::Vector3 const&) const+0x6a>
   2c3c5:	b8 00 00 00 00       	mov    eax,0x0
   2c3ca:	5d                   	pop    rbp
   2c3cb:	c3                   	ret    

000000000002c3cc <objl::Vector3::operator!=(objl::Vector3 const&) const>:
   2c3cc:	55                   	push   rbp
   2c3cd:	48 89 e5             	mov    rbp,rsp
   2c3d0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c3d4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   2c3d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c3dc:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c3e0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c3e4:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c3e8:	0f 2e c1             	ucomiss xmm0,xmm1
   2c3eb:	7a 3d                	jp     2c42a <objl::Vector3::operator!=(objl::Vector3 const&) const+0x5e>
   2c3ed:	0f 2e c1             	ucomiss xmm0,xmm1
   2c3f0:	75 38                	jne    2c42a <objl::Vector3::operator!=(objl::Vector3 const&) const+0x5e>
   2c3f2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c3f6:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c3fb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c3ff:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c404:	0f 2e c1             	ucomiss xmm0,xmm1
   2c407:	7a 21                	jp     2c42a <objl::Vector3::operator!=(objl::Vector3 const&) const+0x5e>
   2c409:	0f 2e c1             	ucomiss xmm0,xmm1
   2c40c:	75 1c                	jne    2c42a <objl::Vector3::operator!=(objl::Vector3 const&) const+0x5e>
   2c40e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c412:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   2c417:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   2c41b:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2c420:	0f 2e c1             	ucomiss xmm0,xmm1
   2c423:	7a 05                	jp     2c42a <objl::Vector3::operator!=(objl::Vector3 const&) const+0x5e>
   2c425:	0f 2e c1             	ucomiss xmm0,xmm1
   2c428:	74 07                	je     2c431 <objl::Vector3::operator!=(objl::Vector3 const&) const+0x65>
   2c42a:	b8 01 00 00 00       	mov    eax,0x1
   2c42f:	eb 05                	jmp    2c436 <objl::Vector3::operator!=(objl::Vector3 const&) const+0x6a>
   2c431:	b8 00 00 00 00       	mov    eax,0x0
   2c436:	5d                   	pop    rbp
   2c437:	c3                   	ret    

000000000002c438 <objl::Vector3::operator+(objl::Vector3 const&) const>:
   2c438:	55                   	push   rbp
   2c439:	48 89 e5             	mov    rbp,rsp
   2c43c:	48 83 ec 40          	sub    rsp,0x40
   2c440:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2c444:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2c448:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c451:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c455:	31 c0                	xor    eax,eax
   2c457:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c45b:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2c460:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c464:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   2c469:	0f 28 d1             	movaps xmm2,xmm1
   2c46c:	f3 0f 58 d0          	addss  xmm2,xmm0
   2c470:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c474:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c479:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c47d:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c482:	0f 28 d9             	movaps xmm3,xmm1
   2c485:	f3 0f 58 d8          	addss  xmm3,xmm0
   2c489:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c48d:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c491:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c495:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c499:	f3 0f 58 c8          	addss  xmm1,xmm0
   2c49d:	66 0f 7e ca          	movd   edx,xmm1
   2c4a1:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2c4a5:	0f 28 cb             	movaps xmm1,xmm3
   2c4a8:	66 0f 6e c2          	movd   xmm0,edx
   2c4ac:	48 89 c7             	mov    rdi,rax
   2c4af:	e8 68 fe ff ff       	call   2c31c <objl::Vector3::Vector3(float, float, float)>
   2c4b4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c4b8:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2c4bc:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2c4bf:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2c4c2:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2c4c6:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2c4cb:	48 89 c2             	mov    rdx,rax
   2c4ce:	0f 28 c8             	movaps xmm1,xmm0
   2c4d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c4d5:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2c4de:	74 05                	je     2c4e5 <objl::Vector3::operator+(objl::Vector3 const&) const+0xad>
   2c4e0:	e8 fb 7f fd ff       	call   44e0 <__stack_chk_fail@plt>
   2c4e5:	66 48 0f 6e c2       	movq   xmm0,rdx
   2c4ea:	c9                   	leave  
   2c4eb:	c3                   	ret    

000000000002c4ec <objl::Vector3::operator-(objl::Vector3 const&) const>:
   2c4ec:	55                   	push   rbp
   2c4ed:	48 89 e5             	mov    rbp,rsp
   2c4f0:	48 83 ec 40          	sub    rsp,0x40
   2c4f4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2c4f8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2c4fc:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c505:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c509:	31 c0                	xor    eax,eax
   2c50b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c50f:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   2c514:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c518:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2c51d:	0f 28 d0             	movaps xmm2,xmm0
   2c520:	f3 0f 5c d1          	subss  xmm2,xmm1
   2c524:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c528:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c52d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c531:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c536:	0f 28 d8             	movaps xmm3,xmm0
   2c539:	f3 0f 5c d9          	subss  xmm3,xmm1
   2c53d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c541:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c545:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c549:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c54d:	f3 0f 5c c1          	subss  xmm0,xmm1
   2c551:	66 0f 7e c2          	movd   edx,xmm0
   2c555:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2c559:	0f 28 cb             	movaps xmm1,xmm3
   2c55c:	66 0f 6e c2          	movd   xmm0,edx
   2c560:	48 89 c7             	mov    rdi,rax
   2c563:	e8 b4 fd ff ff       	call   2c31c <objl::Vector3::Vector3(float, float, float)>
   2c568:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c56c:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2c570:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2c573:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2c576:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2c57a:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2c57f:	48 89 c2             	mov    rdx,rax
   2c582:	0f 28 c8             	movaps xmm1,xmm0
   2c585:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c589:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2c592:	74 05                	je     2c599 <objl::Vector3::operator-(objl::Vector3 const&) const+0xad>
   2c594:	e8 47 7f fd ff       	call   44e0 <__stack_chk_fail@plt>
   2c599:	66 48 0f 6e c2       	movq   xmm0,rdx
   2c59e:	c9                   	leave  
   2c59f:	c3                   	ret    

000000000002c5a0 <objl::Vector3::operator*(float const&) const>:
   2c5a0:	55                   	push   rbp
   2c5a1:	48 89 e5             	mov    rbp,rsp
   2c5a4:	48 83 ec 40          	sub    rsp,0x40
   2c5a8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2c5ac:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2c5b0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c5b9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c5bd:	31 c0                	xor    eax,eax
   2c5bf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c5c3:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2c5c8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c5cc:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c5d0:	0f 28 d1             	movaps xmm2,xmm1
   2c5d3:	f3 0f 59 d0          	mulss  xmm2,xmm0
   2c5d7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c5db:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2c5e0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c5e4:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c5e8:	0f 28 d9             	movaps xmm3,xmm1
   2c5eb:	f3 0f 59 d8          	mulss  xmm3,xmm0
   2c5ef:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c5f3:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c5f7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c5fb:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c5ff:	f3 0f 59 c8          	mulss  xmm1,xmm0
   2c603:	66 0f 7e ca          	movd   edx,xmm1
   2c607:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2c60b:	0f 28 cb             	movaps xmm1,xmm3
   2c60e:	66 0f 6e c2          	movd   xmm0,edx
   2c612:	48 89 c7             	mov    rdi,rax
   2c615:	e8 02 fd ff ff       	call   2c31c <objl::Vector3::Vector3(float, float, float)>
   2c61a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c61e:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2c622:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2c625:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2c628:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2c62c:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2c631:	48 89 c2             	mov    rdx,rax
   2c634:	0f 28 c8             	movaps xmm1,xmm0
   2c637:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c63b:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2c644:	74 05                	je     2c64b <objl::Vector3::operator*(float const&) const+0xab>
   2c646:	e8 95 7e fd ff       	call   44e0 <__stack_chk_fail@plt>
   2c64b:	66 48 0f 6e c2       	movq   xmm0,rdx
   2c650:	c9                   	leave  
   2c651:	c3                   	ret    

000000000002c652 <objl::Vector3::operator/(float const&) const>:
   2c652:	55                   	push   rbp
   2c653:	48 89 e5             	mov    rbp,rsp
   2c656:	48 83 ec 40          	sub    rsp,0x40
   2c65a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2c65e:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2c662:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c66b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c66f:	31 c0                	xor    eax,eax
   2c671:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c675:	f3 0f 10 40 08       	movss  xmm0,DWORD PTR [rax+0x8]
   2c67a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c67e:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c682:	0f 28 d0             	movaps xmm2,xmm0
   2c685:	f3 0f 5e d1          	divss  xmm2,xmm1
   2c689:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c68d:	f3 0f 10 40 04       	movss  xmm0,DWORD PTR [rax+0x4]
   2c692:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c696:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c69a:	0f 28 d8             	movaps xmm3,xmm0
   2c69d:	f3 0f 5e d9          	divss  xmm3,xmm1
   2c6a1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c6a5:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2c6a9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2c6ad:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2c6b1:	f3 0f 5e c1          	divss  xmm0,xmm1
   2c6b5:	66 0f 7e c2          	movd   edx,xmm0
   2c6b9:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2c6bd:	0f 28 cb             	movaps xmm1,xmm3
   2c6c0:	66 0f 6e c2          	movd   xmm0,edx
   2c6c4:	48 89 c7             	mov    rdi,rax
   2c6c7:	e8 50 fc ff ff       	call   2c31c <objl::Vector3::Vector3(float, float, float)>
   2c6cc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c6d0:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2c6d4:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2c6d7:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2c6da:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2c6de:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2c6e3:	48 89 c2             	mov    rdx,rax
   2c6e6:	0f 28 c8             	movaps xmm1,xmm0
   2c6e9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c6ed:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2c6f6:	74 05                	je     2c6fd <objl::Vector3::operator/(float const&) const+0xab>
   2c6f8:	e8 e3 7d fd ff       	call   44e0 <__stack_chk_fail@plt>
   2c6fd:	66 48 0f 6e c2       	movq   xmm0,rdx
   2c702:	c9                   	leave  
   2c703:	c3                   	ret    

000000000002c704 <objl::Material::Material()>:
   2c704:	55                   	push   rbp
   2c705:	48 89 e5             	mov    rbp,rsp
   2c708:	48 83 ec 10          	sub    rsp,0x10
   2c70c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c710:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c714:	48 89 c7             	mov    rdi,rax
   2c717:	e8 04 7f fd ff       	call   4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c71c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c720:	48 83 c0 20          	add    rax,0x20
   2c724:	48 89 c7             	mov    rdi,rax
   2c727:	e8 be fb ff ff       	call   2c2ea <objl::Vector3::Vector3()>
   2c72c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c730:	48 83 c0 2c          	add    rax,0x2c
   2c734:	48 89 c7             	mov    rdi,rax
   2c737:	e8 ae fb ff ff       	call   2c2ea <objl::Vector3::Vector3()>
   2c73c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c740:	48 83 c0 38          	add    rax,0x38
   2c744:	48 89 c7             	mov    rdi,rax
   2c747:	e8 9e fb ff ff       	call   2c2ea <objl::Vector3::Vector3()>
   2c74c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c750:	48 83 c0 58          	add    rax,0x58
   2c754:	48 89 c7             	mov    rdi,rax
   2c757:	e8 c4 7e fd ff       	call   4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c75c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c760:	48 83 c0 78          	add    rax,0x78
   2c764:	48 89 c7             	mov    rdi,rax
   2c767:	e8 b4 7e fd ff       	call   4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c76c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c770:	48 05 98 00 00 00    	add    rax,0x98
   2c776:	48 89 c7             	mov    rdi,rax
   2c779:	e8 a2 7e fd ff       	call   4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c77e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c782:	48 05 b8 00 00 00    	add    rax,0xb8
   2c788:	48 89 c7             	mov    rdi,rax
   2c78b:	e8 90 7e fd ff       	call   4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c790:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c794:	48 05 d8 00 00 00    	add    rax,0xd8
   2c79a:	48 89 c7             	mov    rdi,rax
   2c79d:	e8 7e 7e fd ff       	call   4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c7a2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c7a6:	48 05 f8 00 00 00    	add    rax,0xf8
   2c7ac:	48 89 c7             	mov    rdi,rax
   2c7af:	e8 6c 7e fd ff       	call   4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c7b4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c7b8:	66 0f ef c0          	pxor   xmm0,xmm0
   2c7bc:	f3 0f 11 40 44       	movss  DWORD PTR [rax+0x44],xmm0
   2c7c1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c7c5:	66 0f ef c0          	pxor   xmm0,xmm0
   2c7c9:	f3 0f 11 40 48       	movss  DWORD PTR [rax+0x48],xmm0
   2c7ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c7d2:	66 0f ef c0          	pxor   xmm0,xmm0
   2c7d6:	f3 0f 11 40 4c       	movss  DWORD PTR [rax+0x4c],xmm0
   2c7db:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c7df:	c7 40 50 00 00 00 00 	mov    DWORD PTR [rax+0x50],0x0
   2c7e6:	90                   	nop
   2c7e7:	c9                   	leave  
   2c7e8:	c3                   	ret    
   2c7e9:	90                   	nop

000000000002c7ea <objl::Mesh::Mesh()>:
   2c7ea:	55                   	push   rbp
   2c7eb:	48 89 e5             	mov    rbp,rsp
   2c7ee:	48 83 ec 10          	sub    rsp,0x10
   2c7f2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2c7f6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c7fa:	48 89 c7             	mov    rdi,rax
   2c7fd:	e8 1e 7e fd ff       	call   4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c802:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c806:	48 83 c0 20          	add    rax,0x20
   2c80a:	48 89 c7             	mov    rdi,rax
   2c80d:	e8 38 4b 00 00       	call   3134a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector()>
   2c812:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c816:	48 83 c0 38          	add    rax,0x38
   2c81a:	48 89 c7             	mov    rdi,rax
   2c81d:	e8 42 8f ff ff       	call   25764 <std::vector<unsigned int, std::allocator<unsigned int> >::vector()>
   2c822:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c826:	48 83 c0 50          	add    rax,0x50
   2c82a:	48 89 c7             	mov    rdi,rax
   2c82d:	e8 d2 fe ff ff       	call   2c704 <objl::Material::Material()>
   2c832:	90                   	nop
   2c833:	c9                   	leave  
   2c834:	c3                   	ret    
   2c835:	90                   	nop

000000000002c836 <objl::Mesh::Mesh(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<unsigned int, std::allocator<unsigned int> >&)>:
   2c836:	55                   	push   rbp
   2c837:	48 89 e5             	mov    rbp,rsp
   2c83a:	53                   	push   rbx
   2c83b:	48 83 ec 28          	sub    rsp,0x28
   2c83f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   2c843:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   2c847:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2c84b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c84f:	48 89 c7             	mov    rdi,rax
   2c852:	e8 c9 7d fd ff       	call   4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2c857:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c85b:	48 83 c0 20          	add    rax,0x20
   2c85f:	48 89 c7             	mov    rdi,rax
   2c862:	e8 e3 4a 00 00       	call   3134a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector()>
   2c867:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c86b:	48 83 c0 38          	add    rax,0x38
   2c86f:	48 89 c7             	mov    rdi,rax
   2c872:	e8 ed 8e ff ff       	call   25764 <std::vector<unsigned int, std::allocator<unsigned int> >::vector()>
   2c877:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c87b:	48 83 c0 50          	add    rax,0x50
   2c87f:	48 89 c7             	mov    rdi,rax
   2c882:	e8 7d fe ff ff       	call   2c704 <objl::Material::Material()>
   2c887:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c88b:	48 8d 50 20          	lea    rdx,[rax+0x20]
   2c88f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c893:	48 89 c6             	mov    rsi,rax
   2c896:	48 89 d7             	mov    rdi,rdx
   2c899:	e8 7e 5c 00 00       	call   3251c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)>
   2c89e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c8a2:	48 8d 50 38          	lea    rdx,[rax+0x38]
   2c8a6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2c8aa:	48 89 c6             	mov    rsi,rax
   2c8ad:	48 89 d7             	mov    rdi,rdx
   2c8b0:	e8 89 5f 00 00       	call   3283e <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)>
   2c8b5:	eb 4a                	jmp    2c901 <objl::Mesh::Mesh(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<unsigned int, std::allocator<unsigned int> >&)+0xcb>
   2c8b7:	48 89 c3             	mov    rbx,rax
   2c8ba:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c8be:	48 83 c0 50          	add    rax,0x50
   2c8c2:	48 89 c7             	mov    rdi,rax
   2c8c5:	e8 9c 4a 00 00       	call   31366 <objl::Material::~Material()>
   2c8ca:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c8ce:	48 83 c0 38          	add    rax,0x38
   2c8d2:	48 89 c7             	mov    rdi,rax
   2c8d5:	e8 ea a4 ff ff       	call   26dc4 <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   2c8da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c8de:	48 83 c0 20          	add    rax,0x20
   2c8e2:	48 89 c7             	mov    rdi,rax
   2c8e5:	e8 e2 5b 00 00       	call   324cc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2c8ea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2c8ee:	48 89 c7             	mov    rdi,rax
   2c8f1:	e8 6a 79 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2c8f6:	48 89 d8             	mov    rax,rbx
   2c8f9:	48 89 c7             	mov    rdi,rax
   2c8fc:	e8 5f 7e fd ff       	call   4760 <_Unwind_Resume@plt>
   2c901:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2c905:	c9                   	leave  
   2c906:	c3                   	ret    

000000000002c907 <objl::math::CrossV3(objl::Vector3, objl::Vector3)>:
   2c907:	55                   	push   rbp
   2c908:	48 89 e5             	mov    rbp,rsp
   2c90b:	48 83 ec 50          	sub    rsp,0x50
   2c90f:	66 48 0f 7e c0       	movq   rax,xmm0
   2c914:	0f 28 e1             	movaps xmm4,xmm1
   2c917:	66 0f 6f ca          	movdqa xmm1,xmm2
   2c91b:	0f 28 c3             	movaps xmm0,xmm3
   2c91e:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   2c922:	f3 0f 11 65 d8       	movss  DWORD PTR [rbp-0x28],xmm4
   2c927:	66 0f d6 4d c0       	movq   QWORD PTR [rbp-0x40],xmm1
   2c92c:	f3 0f 11 45 c8       	movss  DWORD PTR [rbp-0x38],xmm0
   2c931:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2c93a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2c93e:	31 c0                	xor    eax,eax
   2c940:	f3 0f 10 4d d0       	movss  xmm1,DWORD PTR [rbp-0x30]
   2c945:	f3 0f 10 45 c4       	movss  xmm0,DWORD PTR [rbp-0x3c]
   2c94a:	f3 0f 59 c1          	mulss  xmm0,xmm1
   2c94e:	f3 0f 10 55 d4       	movss  xmm2,DWORD PTR [rbp-0x2c]
   2c953:	f3 0f 10 4d c0       	movss  xmm1,DWORD PTR [rbp-0x40]
   2c958:	f3 0f 59 ca          	mulss  xmm1,xmm2
   2c95c:	0f 28 e0             	movaps xmm4,xmm0
   2c95f:	f3 0f 5c e1          	subss  xmm4,xmm1
   2c963:	f3 0f 10 4d d8       	movss  xmm1,DWORD PTR [rbp-0x28]
   2c968:	f3 0f 10 45 c0       	movss  xmm0,DWORD PTR [rbp-0x40]
   2c96d:	f3 0f 59 c1          	mulss  xmm0,xmm1
   2c971:	f3 0f 10 55 d0       	movss  xmm2,DWORD PTR [rbp-0x30]
   2c976:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   2c97b:	f3 0f 59 ca          	mulss  xmm1,xmm2
   2c97f:	0f 28 d8             	movaps xmm3,xmm0
   2c982:	f3 0f 5c d9          	subss  xmm3,xmm1
   2c986:	f3 0f 10 4d d4       	movss  xmm1,DWORD PTR [rbp-0x2c]
   2c98b:	f3 0f 10 45 c8       	movss  xmm0,DWORD PTR [rbp-0x38]
   2c990:	f3 0f 59 c1          	mulss  xmm0,xmm1
   2c994:	f3 0f 10 55 d8       	movss  xmm2,DWORD PTR [rbp-0x28]
   2c999:	f3 0f 10 4d c4       	movss  xmm1,DWORD PTR [rbp-0x3c]
   2c99e:	f3 0f 59 ca          	mulss  xmm1,xmm2
   2c9a2:	f3 0f 5c c1          	subss  xmm0,xmm1
   2c9a6:	66 0f 7e c2          	movd   edx,xmm0
   2c9aa:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2c9ae:	0f 28 d4             	movaps xmm2,xmm4
   2c9b1:	0f 28 cb             	movaps xmm1,xmm3
   2c9b4:	66 0f 6e c2          	movd   xmm0,edx
   2c9b8:	48 89 c7             	mov    rdi,rax
   2c9bb:	e8 5c f9 ff ff       	call   2c31c <objl::Vector3::Vector3(float, float, float)>
   2c9c0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2c9c4:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2c9c8:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2c9cb:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2c9ce:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2c9d2:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2c9d7:	48 89 c2             	mov    rdx,rax
   2c9da:	0f 28 c8             	movaps xmm1,xmm0
   2c9dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2c9e1:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2c9ea:	74 05                	je     2c9f1 <objl::math::CrossV3(objl::Vector3, objl::Vector3)+0xea>
   2c9ec:	e8 ef 7a fd ff       	call   44e0 <__stack_chk_fail@plt>
   2c9f1:	66 48 0f 6e c2       	movq   xmm0,rdx
   2c9f6:	c9                   	leave  
   2c9f7:	c3                   	ret    

000000000002c9f8 <objl::math::MagnitudeV3(objl::Vector3)>:
   2c9f8:	55                   	push   rbp
   2c9f9:	48 89 e5             	mov    rbp,rsp
   2c9fc:	48 83 ec 20          	sub    rsp,0x20
   2ca00:	66 48 0f 7e c0       	movq   rax,xmm0
   2ca05:	0f 28 c1             	movaps xmm0,xmm1
   2ca08:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2ca0c:	f3 0f 11 45 f8       	movss  DWORD PTR [rbp-0x8],xmm0
   2ca11:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
   2ca14:	f3 0f 10 0d 8c 01 01 00 	movss  xmm1,DWORD PTR [rip+0x1018c]        # 3cba8 <NANO_SEC+0x18e0>
   2ca1c:	66 0f 6e c0          	movd   xmm0,eax
   2ca20:	e8 8b 7c fd ff       	call   46b0 <powf@plt>
   2ca25:	f3 0f 11 45 ec       	movss  DWORD PTR [rbp-0x14],xmm0
   2ca2a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   2ca2d:	f3 0f 10 0d 73 01 01 00 	movss  xmm1,DWORD PTR [rip+0x10173]        # 3cba8 <NANO_SEC+0x18e0>
   2ca35:	66 0f 6e c0          	movd   xmm0,eax
   2ca39:	e8 72 7c fd ff       	call   46b0 <powf@plt>
   2ca3e:	0f 28 d0             	movaps xmm2,xmm0
   2ca41:	f3 0f 58 55 ec       	addss  xmm2,DWORD PTR [rbp-0x14]
   2ca46:	f3 0f 11 55 ec       	movss  DWORD PTR [rbp-0x14],xmm2
   2ca4b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   2ca4e:	f3 0f 10 0d 52 01 01 00 	movss  xmm1,DWORD PTR [rip+0x10152]        # 3cba8 <NANO_SEC+0x18e0>
   2ca56:	66 0f 6e c0          	movd   xmm0,eax
   2ca5a:	e8 51 7c fd ff       	call   46b0 <powf@plt>
   2ca5f:	f3 0f 58 45 ec       	addss  xmm0,DWORD PTR [rbp-0x14]
   2ca64:	66 0f 7e c0          	movd   eax,xmm0
   2ca68:	66 0f 6e c0          	movd   xmm0,eax
   2ca6c:	e8 2f 7d fd ff       	call   47a0 <sqrtf@plt>
   2ca71:	c9                   	leave  
   2ca72:	c3                   	ret    

000000000002ca73 <objl::math::DotV3(objl::Vector3, objl::Vector3)>:
   2ca73:	55                   	push   rbp
   2ca74:	48 89 e5             	mov    rbp,rsp
   2ca77:	66 48 0f 7e c0       	movq   rax,xmm0
   2ca7c:	0f 28 e1             	movaps xmm4,xmm1
   2ca7f:	66 0f 6f ca          	movdqa xmm1,xmm2
   2ca83:	0f 28 c3             	movaps xmm0,xmm3
   2ca86:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   2ca8a:	f3 0f 11 65 f8       	movss  DWORD PTR [rbp-0x8],xmm4
   2ca8f:	66 0f d6 4d e0       	movq   QWORD PTR [rbp-0x20],xmm1
   2ca94:	f3 0f 11 45 e8       	movss  DWORD PTR [rbp-0x18],xmm0
   2ca99:	f3 0f 10 4d f0       	movss  xmm1,DWORD PTR [rbp-0x10]
   2ca9e:	f3 0f 10 45 e0       	movss  xmm0,DWORD PTR [rbp-0x20]
   2caa3:	f3 0f 59 c8          	mulss  xmm1,xmm0
   2caa7:	f3 0f 10 55 f4       	movss  xmm2,DWORD PTR [rbp-0xc]
   2caac:	f3 0f 10 45 e4       	movss  xmm0,DWORD PTR [rbp-0x1c]
   2cab1:	f3 0f 59 c2          	mulss  xmm0,xmm2
   2cab5:	f3 0f 58 c8          	addss  xmm1,xmm0
   2cab9:	f3 0f 10 55 f8       	movss  xmm2,DWORD PTR [rbp-0x8]
   2cabe:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   2cac3:	f3 0f 59 c2          	mulss  xmm0,xmm2
   2cac7:	f3 0f 58 c1          	addss  xmm0,xmm1
   2cacb:	5d                   	pop    rbp
   2cacc:	c3                   	ret    

000000000002cacd <objl::math::AngleBetweenV3(objl::Vector3, objl::Vector3)>:
   2cacd:	55                   	push   rbp
   2cace:	48 89 e5             	mov    rbp,rsp
   2cad1:	48 83 ec 40          	sub    rsp,0x40
   2cad5:	66 48 0f 7e c0       	movq   rax,xmm0
   2cada:	0f 28 e1             	movaps xmm4,xmm1
   2cadd:	66 0f 6f ca          	movdqa xmm1,xmm2
   2cae1:	0f 28 c3             	movaps xmm0,xmm3
   2cae4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2cae8:	f3 0f 11 65 e8       	movss  DWORD PTR [rbp-0x18],xmm4
   2caed:	66 0f d6 4d d0       	movq   QWORD PTR [rbp-0x30],xmm1
   2caf2:	f3 0f 11 45 d8       	movss  DWORD PTR [rbp-0x28],xmm0
   2caf7:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   2cafb:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   2cb00:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2cb04:	f3 0f 10 4d e8       	movss  xmm1,DWORD PTR [rbp-0x18]
   2cb09:	66 48 0f 6e d2       	movq   xmm2,rdx
   2cb0e:	0f 28 d8             	movaps xmm3,xmm0
   2cb11:	66 48 0f 6e c0       	movq   xmm0,rax
   2cb16:	e8 58 ff ff ff       	call   2ca73 <objl::math::DotV3(objl::Vector3, objl::Vector3)>
   2cb1b:	66 0f 7e c0          	movd   eax,xmm0
   2cb1f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   2cb22:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2cb26:	f3 0f 10 4d e8       	movss  xmm1,DWORD PTR [rbp-0x18]
   2cb2b:	66 48 0f 6e c0       	movq   xmm0,rax
   2cb30:	e8 c3 fe ff ff       	call   2c9f8 <objl::math::MagnitudeV3(objl::Vector3)>
   2cb35:	f3 0f 11 45 cc       	movss  DWORD PTR [rbp-0x34],xmm0
   2cb3a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2cb3e:	f3 0f 10 4d d8       	movss  xmm1,DWORD PTR [rbp-0x28]
   2cb43:	66 48 0f 6e c0       	movq   xmm0,rax
   2cb48:	e8 ab fe ff ff       	call   2c9f8 <objl::math::MagnitudeV3(objl::Vector3)>
   2cb4d:	f3 0f 10 4d cc       	movss  xmm1,DWORD PTR [rbp-0x34]
   2cb52:	f3 0f 59 c8          	mulss  xmm1,xmm0
   2cb56:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   2cb5b:	f3 0f 5e c1          	divss  xmm0,xmm1
   2cb5f:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   2cb64:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   2cb67:	66 0f 6e c0          	movd   xmm0,eax
   2cb6b:	e8 00 79 fd ff       	call   4470 <acosf@plt>
   2cb70:	66 0f 7e c0          	movd   eax,xmm0
   2cb74:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   2cb77:	f3 0f 10 45 fc       	movss  xmm0,DWORD PTR [rbp-0x4]
   2cb7c:	c9                   	leave  
   2cb7d:	c3                   	ret    

000000000002cb7e <objl::math::ProjV3(objl::Vector3, objl::Vector3)>:
   2cb7e:	55                   	push   rbp
   2cb7f:	48 89 e5             	mov    rbp,rsp
   2cb82:	48 83 ec 60          	sub    rsp,0x60
   2cb86:	66 48 0f 7e c0       	movq   rax,xmm0
   2cb8b:	0f 28 e1             	movaps xmm4,xmm1
   2cb8e:	66 0f 6f ca          	movdqa xmm1,xmm2
   2cb92:	0f 28 c3             	movaps xmm0,xmm3
   2cb95:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   2cb99:	f3 0f 11 65 c8       	movss  DWORD PTR [rbp-0x38],xmm4
   2cb9e:	66 0f d6 4d b0       	movq   QWORD PTR [rbp-0x50],xmm1
   2cba3:	f3 0f 11 45 b8       	movss  DWORD PTR [rbp-0x48],xmm0
   2cba8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2cbb1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2cbb5:	31 c0                	xor    eax,eax
   2cbb7:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   2cbbb:	f3 0f 10 4d b8       	movss  xmm1,DWORD PTR [rbp-0x48]
   2cbc0:	66 48 0f 6e c0       	movq   xmm0,rax
   2cbc5:	e8 2e fe ff ff       	call   2c9f8 <objl::math::MagnitudeV3(objl::Vector3)>
   2cbca:	66 0f 7e c0          	movd   eax,xmm0
   2cbce:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
   2cbd1:	48 8d 55 ec          	lea    rdx,[rbp-0x14]
   2cbd5:	48 8d 45 b0          	lea    rax,[rbp-0x50]
   2cbd9:	48 89 d6             	mov    rsi,rdx
   2cbdc:	48 89 c7             	mov    rdi,rax
   2cbdf:	e8 6e fa ff ff       	call   2c652 <objl::Vector3::operator/(float const&) const>
   2cbe4:	66 48 0f 7e c0       	movq   rax,xmm0
   2cbe9:	0f 28 c1             	movaps xmm0,xmm1
   2cbec:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2cbf0:	f3 0f 11 45 e8       	movss  DWORD PTR [rbp-0x18],xmm0
   2cbf5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2cbf9:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   2cbfe:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2cc02:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   2cc07:	66 48 0f 6e d2       	movq   xmm2,rdx
   2cc0c:	0f 28 d8             	movaps xmm3,xmm0
   2cc0f:	66 48 0f 6e c0       	movq   xmm0,rax
   2cc14:	e8 5a fe ff ff       	call   2ca73 <objl::math::DotV3(objl::Vector3, objl::Vector3)>
   2cc19:	66 0f 7e c0          	movd   eax,xmm0
   2cc1d:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   2cc20:	48 8d 55 dc          	lea    rdx,[rbp-0x24]
   2cc24:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2cc28:	48 89 d6             	mov    rsi,rdx
   2cc2b:	48 89 c7             	mov    rdi,rax
   2cc2e:	e8 6d f9 ff ff       	call   2c5a0 <objl::Vector3::operator*(float const&) const>
   2cc33:	66 48 0f 7e c0       	movq   rax,xmm0
   2cc38:	0f 28 c1             	movaps xmm0,xmm1
   2cc3b:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2cc3f:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   2cc44:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2cc48:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2cc4d:	48 89 c2             	mov    rdx,rax
   2cc50:	0f 28 c8             	movaps xmm1,xmm0
   2cc53:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2cc57:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2cc60:	74 05                	je     2cc67 <objl::math::ProjV3(objl::Vector3, objl::Vector3)+0xe9>
   2cc62:	e8 79 78 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2cc67:	66 48 0f 6e c2       	movq   xmm0,rdx
   2cc6c:	c9                   	leave  
   2cc6d:	c3                   	ret    

000000000002cc6e <objl::algorithm::operator*(float const&, objl::Vector3 const&)>:
   2cc6e:	55                   	push   rbp
   2cc6f:	48 89 e5             	mov    rbp,rsp
   2cc72:	48 83 ec 40          	sub    rsp,0x40
   2cc76:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   2cc7a:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   2cc7e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2cc87:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2cc8b:	31 c0                	xor    eax,eax
   2cc8d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2cc91:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2cc96:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2cc9a:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2cc9e:	0f 28 d1             	movaps xmm2,xmm1
   2cca1:	f3 0f 59 d0          	mulss  xmm2,xmm0
   2cca5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2cca9:	f3 0f 10 48 04       	movss  xmm1,DWORD PTR [rax+0x4]
   2ccae:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2ccb2:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2ccb6:	0f 28 d9             	movaps xmm3,xmm1
   2ccb9:	f3 0f 59 d8          	mulss  xmm3,xmm0
   2ccbd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   2ccc1:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
   2ccc5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   2ccc9:	f3 0f 10 00          	movss  xmm0,DWORD PTR [rax]
   2cccd:	f3 0f 59 c8          	mulss  xmm1,xmm0
   2ccd1:	66 0f 7e ca          	movd   edx,xmm1
   2ccd5:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   2ccd9:	0f 28 cb             	movaps xmm1,xmm3
   2ccdc:	66 0f 6e c2          	movd   xmm0,edx
   2cce0:	48 89 c7             	mov    rdi,rax
   2cce3:	e8 34 f6 ff ff       	call   2c31c <objl::Vector3::Vector3(float, float, float)>
   2cce8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2ccec:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2ccf0:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2ccf3:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2ccf6:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2ccfa:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2ccff:	48 89 c2             	mov    rdx,rax
   2cd02:	0f 28 c8             	movaps xmm1,xmm0
   2cd05:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2cd09:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2cd12:	74 05                	je     2cd19 <objl::algorithm::operator*(float const&, objl::Vector3 const&)+0xab>
   2cd14:	e8 c7 77 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2cd19:	66 48 0f 6e c2       	movq   xmm0,rdx
   2cd1e:	c9                   	leave  
   2cd1f:	c3                   	ret    

000000000002cd20 <objl::algorithm::SameSide(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)>:
   2cd20:	55                   	push   rbp
   2cd21:	48 89 e5             	mov    rbp,rsp
   2cd24:	48 81 ec 90 00 00 00 	sub    rsp,0x90
   2cd2b:	66 48 0f 7e c0       	movq   rax,xmm0
   2cd30:	44 0f 28 d1          	movaps xmm10,xmm1
   2cd34:	66 44 0f 6f ca       	movdqa xmm9,xmm2
   2cd39:	44 0f 28 c3          	movaps xmm8,xmm3
   2cd3d:	66 0f 6f dc          	movdqa xmm3,xmm4
   2cd41:	0f 28 d5             	movaps xmm2,xmm5
   2cd44:	66 0f 6f ce          	movdqa xmm1,xmm6
   2cd48:	0f 28 c7             	movaps xmm0,xmm7
   2cd4b:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   2cd4f:	f3 44 0f 11 55 a8    	movss  DWORD PTR [rbp-0x58],xmm10
   2cd55:	66 44 0f d6 4d 90    	movq   QWORD PTR [rbp-0x70],xmm9
   2cd5b:	f3 44 0f 11 45 98    	movss  DWORD PTR [rbp-0x68],xmm8
   2cd61:	66 0f d6 5d 80       	movq   QWORD PTR [rbp-0x80],xmm3
   2cd66:	f3 0f 11 55 88       	movss  DWORD PTR [rbp-0x78],xmm2
   2cd6b:	66 0f d6 8d 70 ff ff ff 	movq   QWORD PTR [rbp-0x90],xmm1
   2cd73:	f3 0f 11 85 78 ff ff ff 	movss  DWORD PTR [rbp-0x88],xmm0
   2cd7b:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2cd84:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2cd88:	31 c0                	xor    eax,eax
   2cd8a:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2cd8e:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2cd92:	48 89 d6             	mov    rsi,rdx
   2cd95:	48 89 c7             	mov    rdi,rax
   2cd98:	e8 4f f7 ff ff       	call   2c4ec <objl::Vector3::operator-(objl::Vector3 const&) const>
   2cd9d:	66 48 0f 7e c0       	movq   rax,xmm0
   2cda2:	0f 28 c1             	movaps xmm0,xmm1
   2cda5:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   2cda9:	f3 0f 11 45 d0       	movss  DWORD PTR [rbp-0x30],xmm0
   2cdae:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2cdb2:	48 8d 85 70 ff ff ff 	lea    rax,[rbp-0x90]
   2cdb9:	48 89 d6             	mov    rsi,rdx
   2cdbc:	48 89 c7             	mov    rdi,rax
   2cdbf:	e8 28 f7 ff ff       	call   2c4ec <objl::Vector3::operator-(objl::Vector3 const&) const>
   2cdc4:	66 48 0f 7e c0       	movq   rax,xmm0
   2cdc9:	0f 28 c1             	movaps xmm0,xmm1
   2cdcc:	48 89 45 d4          	mov    QWORD PTR [rbp-0x2c],rax
   2cdd0:	f3 0f 11 45 dc       	movss  DWORD PTR [rbp-0x24],xmm0
   2cdd5:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   2cdd9:	f3 0f 10 45 d0       	movss  xmm0,DWORD PTR [rbp-0x30]
   2cdde:	48 8b 45 d4          	mov    rax,QWORD PTR [rbp-0x2c]
   2cde2:	f3 0f 10 4d dc       	movss  xmm1,DWORD PTR [rbp-0x24]
   2cde7:	66 48 0f 6e d2       	movq   xmm2,rdx
   2cdec:	0f 28 d8             	movaps xmm3,xmm0
   2cdef:	66 48 0f 6e c0       	movq   xmm0,rax
   2cdf4:	e8 0e fb ff ff       	call   2c907 <objl::math::CrossV3(objl::Vector3, objl::Vector3)>
   2cdf9:	66 48 0f 7e c0       	movq   rax,xmm0
   2cdfe:	0f 28 c1             	movaps xmm0,xmm1
   2ce01:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   2ce05:	f3 0f 11 45 b8       	movss  DWORD PTR [rbp-0x48],xmm0
   2ce0a:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2ce0e:	48 8d 45 90          	lea    rax,[rbp-0x70]
   2ce12:	48 89 d6             	mov    rsi,rdx
   2ce15:	48 89 c7             	mov    rdi,rax
   2ce18:	e8 cf f6 ff ff       	call   2c4ec <objl::Vector3::operator-(objl::Vector3 const&) const>
   2ce1d:	66 48 0f 7e c0       	movq   rax,xmm0
   2ce22:	0f 28 c1             	movaps xmm0,xmm1
   2ce25:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2ce29:	f3 0f 11 45 e8       	movss  DWORD PTR [rbp-0x18],xmm0
   2ce2e:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2ce32:	48 8d 85 70 ff ff ff 	lea    rax,[rbp-0x90]
   2ce39:	48 89 d6             	mov    rsi,rdx
   2ce3c:	48 89 c7             	mov    rdi,rax
   2ce3f:	e8 a8 f6 ff ff       	call   2c4ec <objl::Vector3::operator-(objl::Vector3 const&) const>
   2ce44:	66 48 0f 7e c0       	movq   rax,xmm0
   2ce49:	0f 28 c1             	movaps xmm0,xmm1
   2ce4c:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2ce50:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   2ce55:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2ce59:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   2ce5e:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2ce62:	f3 0f 10 4d f4       	movss  xmm1,DWORD PTR [rbp-0xc]
   2ce67:	66 48 0f 6e d2       	movq   xmm2,rdx
   2ce6c:	0f 28 d8             	movaps xmm3,xmm0
   2ce6f:	66 48 0f 6e c0       	movq   xmm0,rax
   2ce74:	e8 8e fa ff ff       	call   2c907 <objl::math::CrossV3(objl::Vector3, objl::Vector3)>
   2ce79:	66 48 0f 7e c0       	movq   rax,xmm0
   2ce7e:	0f 28 c1             	movaps xmm0,xmm1
   2ce81:	48 89 45 bc          	mov    QWORD PTR [rbp-0x44],rax
   2ce85:	f3 0f 11 45 c4       	movss  DWORD PTR [rbp-0x3c],xmm0
   2ce8a:	48 8b 55 bc          	mov    rdx,QWORD PTR [rbp-0x44]
   2ce8e:	f3 0f 10 45 c4       	movss  xmm0,DWORD PTR [rbp-0x3c]
   2ce93:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   2ce97:	f3 0f 10 4d b8       	movss  xmm1,DWORD PTR [rbp-0x48]
   2ce9c:	66 48 0f 6e d2       	movq   xmm2,rdx
   2cea1:	0f 28 d8             	movaps xmm3,xmm0
   2cea4:	66 48 0f 6e c0       	movq   xmm0,rax
   2cea9:	e8 c5 fb ff ff       	call   2ca73 <objl::math::DotV3(objl::Vector3, objl::Vector3)>
   2ceae:	66 0f 7e c0          	movd   eax,xmm0
   2ceb2:	66 0f ef c0          	pxor   xmm0,xmm0
   2ceb6:	66 0f 6e e0          	movd   xmm4,eax
   2ceba:	0f 2f e0             	comiss xmm4,xmm0
   2cebd:	0f 93 c0             	setae  al
   2cec0:	84 c0                	test   al,al
   2cec2:	74 07                	je     2cecb <objl::algorithm::SameSide(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x1ab>
   2cec4:	b8 01 00 00 00       	mov    eax,0x1
   2cec9:	eb 05                	jmp    2ced0 <objl::algorithm::SameSide(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x1b0>
   2cecb:	b8 00 00 00 00       	mov    eax,0x0
   2ced0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2ced4:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2cedd:	74 05                	je     2cee4 <objl::algorithm::SameSide(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x1c4>
   2cedf:	e8 fc 75 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2cee4:	c9                   	leave  
   2cee5:	c3                   	ret    

000000000002cee6 <objl::algorithm::GenTriNormal(objl::Vector3, objl::Vector3, objl::Vector3)>:
   2cee6:	55                   	push   rbp
   2cee7:	48 89 e5             	mov    rbp,rsp
   2ceea:	48 83 c4 80          	add    rsp,0xffffffffffffff80
   2ceee:	66 48 0f 7e c0       	movq   rax,xmm0
   2cef3:	0f 28 f9             	movaps xmm7,xmm1
   2cef6:	66 0f 6f f2          	movdqa xmm6,xmm2
   2cefa:	0f 28 d3             	movaps xmm2,xmm3
   2cefd:	66 0f 6f cc          	movdqa xmm1,xmm4
   2cf01:	0f 28 c5             	movaps xmm0,xmm5
   2cf04:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   2cf08:	f3 0f 11 7d b8       	movss  DWORD PTR [rbp-0x48],xmm7
   2cf0d:	66 0f d6 75 a0       	movq   QWORD PTR [rbp-0x60],xmm6
   2cf12:	f3 0f 11 55 a8       	movss  DWORD PTR [rbp-0x58],xmm2
   2cf17:	66 0f d6 4d 90       	movq   QWORD PTR [rbp-0x70],xmm1
   2cf1c:	f3 0f 11 45 98       	movss  DWORD PTR [rbp-0x68],xmm0
   2cf21:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2cf2a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2cf2e:	31 c0                	xor    eax,eax
   2cf30:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   2cf34:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2cf38:	48 89 d6             	mov    rsi,rdx
   2cf3b:	48 89 c7             	mov    rdi,rax
   2cf3e:	e8 a9 f5 ff ff       	call   2c4ec <objl::Vector3::operator-(objl::Vector3 const&) const>
   2cf43:	66 48 0f 7e c0       	movq   rax,xmm0
   2cf48:	0f 28 c1             	movaps xmm0,xmm1
   2cf4b:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   2cf4f:	f3 0f 11 45 d0       	movss  DWORD PTR [rbp-0x30],xmm0
   2cf54:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   2cf58:	48 8d 45 90          	lea    rax,[rbp-0x70]
   2cf5c:	48 89 d6             	mov    rsi,rdx
   2cf5f:	48 89 c7             	mov    rdi,rax
   2cf62:	e8 85 f5 ff ff       	call   2c4ec <objl::Vector3::operator-(objl::Vector3 const&) const>
   2cf67:	66 48 0f 7e c0       	movq   rax,xmm0
   2cf6c:	0f 28 c1             	movaps xmm0,xmm1
   2cf6f:	48 89 45 d4          	mov    QWORD PTR [rbp-0x2c],rax
   2cf73:	f3 0f 11 45 dc       	movss  DWORD PTR [rbp-0x24],xmm0
   2cf78:	48 8b 55 d4          	mov    rdx,QWORD PTR [rbp-0x2c]
   2cf7c:	f3 0f 10 45 dc       	movss  xmm0,DWORD PTR [rbp-0x24]
   2cf81:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   2cf85:	f3 0f 10 4d d0       	movss  xmm1,DWORD PTR [rbp-0x30]
   2cf8a:	66 48 0f 6e d2       	movq   xmm2,rdx
   2cf8f:	0f 28 d8             	movaps xmm3,xmm0
   2cf92:	66 48 0f 6e c0       	movq   xmm0,rax
   2cf97:	e8 6b f9 ff ff       	call   2c907 <objl::math::CrossV3(objl::Vector3, objl::Vector3)>
   2cf9c:	66 48 0f 7e c0       	movq   rax,xmm0
   2cfa1:	0f 28 c1             	movaps xmm0,xmm1
   2cfa4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2cfa8:	f3 0f 11 45 e8       	movss  DWORD PTR [rbp-0x18],xmm0
   2cfad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   2cfb1:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2cfb5:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
   2cfb8:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   2cfbb:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2cfbf:	f3 0f 10 45 f4       	movss  xmm0,DWORD PTR [rbp-0xc]
   2cfc4:	48 89 c2             	mov    rdx,rax
   2cfc7:	0f 28 c8             	movaps xmm1,xmm0
   2cfca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2cfce:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2cfd7:	74 05                	je     2cfde <objl::algorithm::GenTriNormal(objl::Vector3, objl::Vector3, objl::Vector3)+0xf8>
   2cfd9:	e8 02 75 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2cfde:	66 48 0f 6e c2       	movq   xmm0,rdx
   2cfe3:	c9                   	leave  
   2cfe4:	c3                   	ret    

000000000002cfe5 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)>:
   2cfe5:	55                   	push   rbp
   2cfe6:	48 89 e5             	mov    rbp,rsp
   2cfe9:	48 83 ec 70          	sub    rsp,0x70
   2cfed:	66 48 0f 7e c0       	movq   rax,xmm0
   2cff2:	44 0f 28 d1          	movaps xmm10,xmm1
   2cff6:	66 44 0f 6f ca       	movdqa xmm9,xmm2
   2cffb:	44 0f 28 c3          	movaps xmm8,xmm3
   2cfff:	66 0f 6f dc          	movdqa xmm3,xmm4
   2d003:	0f 28 d5             	movaps xmm2,xmm5
   2d006:	66 0f 6f ce          	movdqa xmm1,xmm6
   2d00a:	0f 28 c7             	movaps xmm0,xmm7
   2d00d:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   2d011:	f3 44 0f 11 55 c8    	movss  DWORD PTR [rbp-0x38],xmm10
   2d017:	66 44 0f d6 4d b0    	movq   QWORD PTR [rbp-0x50],xmm9
   2d01d:	f3 44 0f 11 45 b8    	movss  DWORD PTR [rbp-0x48],xmm8
   2d023:	66 0f d6 5d a0       	movq   QWORD PTR [rbp-0x60],xmm3
   2d028:	f3 0f 11 55 a8       	movss  DWORD PTR [rbp-0x58],xmm2
   2d02d:	66 0f d6 4d 90       	movq   QWORD PTR [rbp-0x70],xmm1
   2d032:	f3 0f 11 45 98       	movss  DWORD PTR [rbp-0x68],xmm0
   2d037:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2d040:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   2d044:	31 c0                	xor    eax,eax
   2d046:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
   2d04a:	f3 0f 10 5d 98       	movss  xmm3,DWORD PTR [rbp-0x68]
   2d04f:	48 8b 4d a0          	mov    rcx,QWORD PTR [rbp-0x60]
   2d053:	f3 0f 10 55 a8       	movss  xmm2,DWORD PTR [rbp-0x58]
   2d058:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   2d05c:	f3 0f 10 45 b8       	movss  xmm0,DWORD PTR [rbp-0x48]
   2d061:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2d065:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   2d06a:	66 48 0f 6e f6       	movq   xmm6,rsi
   2d06f:	0f 28 fb             	movaps xmm7,xmm3
   2d072:	66 48 0f 6e e1       	movq   xmm4,rcx
   2d077:	0f 28 ea             	movaps xmm5,xmm2
   2d07a:	66 48 0f 6e d2       	movq   xmm2,rdx
   2d07f:	0f 28 d8             	movaps xmm3,xmm0
   2d082:	66 48 0f 6e c0       	movq   xmm0,rax
   2d087:	e8 94 fc ff ff       	call   2cd20 <objl::algorithm::SameSide(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)>
   2d08c:	84 c0                	test   al,al
   2d08e:	0f 84 9b 00 00 00    	je     2d12f <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x14a>
   2d094:	48 8b 75 90          	mov    rsi,QWORD PTR [rbp-0x70]
   2d098:	f3 0f 10 5d 98       	movss  xmm3,DWORD PTR [rbp-0x68]
   2d09d:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
   2d0a1:	f3 0f 10 55 b8       	movss  xmm2,DWORD PTR [rbp-0x48]
   2d0a6:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   2d0aa:	f3 0f 10 45 a8       	movss  xmm0,DWORD PTR [rbp-0x58]
   2d0af:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2d0b3:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   2d0b8:	66 48 0f 6e f6       	movq   xmm6,rsi
   2d0bd:	0f 28 fb             	movaps xmm7,xmm3
   2d0c0:	66 48 0f 6e e1       	movq   xmm4,rcx
   2d0c5:	0f 28 ea             	movaps xmm5,xmm2
   2d0c8:	66 48 0f 6e d2       	movq   xmm2,rdx
   2d0cd:	0f 28 d8             	movaps xmm3,xmm0
   2d0d0:	66 48 0f 6e c0       	movq   xmm0,rax
   2d0d5:	e8 46 fc ff ff       	call   2cd20 <objl::algorithm::SameSide(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)>
   2d0da:	84 c0                	test   al,al
   2d0dc:	74 51                	je     2d12f <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x14a>
   2d0de:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
   2d0e2:	f3 0f 10 5d a8       	movss  xmm3,DWORD PTR [rbp-0x58]
   2d0e7:	48 8b 4d b0          	mov    rcx,QWORD PTR [rbp-0x50]
   2d0eb:	f3 0f 10 55 b8       	movss  xmm2,DWORD PTR [rbp-0x48]
   2d0f0:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
   2d0f4:	f3 0f 10 45 98       	movss  xmm0,DWORD PTR [rbp-0x68]
   2d0f9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2d0fd:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   2d102:	66 48 0f 6e f6       	movq   xmm6,rsi
   2d107:	0f 28 fb             	movaps xmm7,xmm3
   2d10a:	66 48 0f 6e e1       	movq   xmm4,rcx
   2d10f:	0f 28 ea             	movaps xmm5,xmm2
   2d112:	66 48 0f 6e d2       	movq   xmm2,rdx
   2d117:	0f 28 d8             	movaps xmm3,xmm0
   2d11a:	66 48 0f 6e c0       	movq   xmm0,rax
   2d11f:	e8 fc fb ff ff       	call   2cd20 <objl::algorithm::SameSide(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)>
   2d124:	84 c0                	test   al,al
   2d126:	74 07                	je     2d12f <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x14a>
   2d128:	b8 01 00 00 00       	mov    eax,0x1
   2d12d:	eb 05                	jmp    2d134 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x14f>
   2d12f:	b8 00 00 00 00       	mov    eax,0x0
   2d134:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
   2d137:	0f b6 45 df          	movzx  eax,BYTE PTR [rbp-0x21]
   2d13b:	83 f0 01             	xor    eax,0x1
   2d13e:	84 c0                	test   al,al
   2d140:	74 0a                	je     2d14c <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x167>
   2d142:	b8 00 00 00 00       	mov    eax,0x0
   2d147:	e9 c5 00 00 00       	jmp    2d211 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x22c>
   2d14c:	48 8b 4d 90          	mov    rcx,QWORD PTR [rbp-0x70]
   2d150:	f3 0f 10 55 98       	movss  xmm2,DWORD PTR [rbp-0x68]
   2d155:	48 8b 55 a0          	mov    rdx,QWORD PTR [rbp-0x60]
   2d159:	f3 0f 10 45 a8       	movss  xmm0,DWORD PTR [rbp-0x58]
   2d15e:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   2d162:	f3 0f 10 4d b8       	movss  xmm1,DWORD PTR [rbp-0x48]
   2d167:	66 48 0f 6e e1       	movq   xmm4,rcx
   2d16c:	0f 28 ea             	movaps xmm5,xmm2
   2d16f:	66 48 0f 6e d2       	movq   xmm2,rdx
   2d174:	0f 28 d8             	movaps xmm3,xmm0
   2d177:	66 48 0f 6e c0       	movq   xmm0,rax
   2d17c:	e8 65 fd ff ff       	call   2cee6 <objl::algorithm::GenTriNormal(objl::Vector3, objl::Vector3, objl::Vector3)>
   2d181:	66 48 0f 7e c0       	movq   rax,xmm0
   2d186:	0f 28 c1             	movaps xmm0,xmm1
   2d189:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   2d18d:	f3 0f 11 45 e8       	movss  DWORD PTR [rbp-0x18],xmm0
   2d192:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   2d196:	f3 0f 10 45 e8       	movss  xmm0,DWORD PTR [rbp-0x18]
   2d19b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   2d19f:	f3 0f 10 4d c8       	movss  xmm1,DWORD PTR [rbp-0x38]
   2d1a4:	66 48 0f 6e d2       	movq   xmm2,rdx
   2d1a9:	0f 28 d8             	movaps xmm3,xmm0
   2d1ac:	66 48 0f 6e c0       	movq   xmm0,rax
   2d1b1:	e8 c8 f9 ff ff       	call   2cb7e <objl::math::ProjV3(objl::Vector3, objl::Vector3)>
   2d1b6:	66 48 0f 7e c0       	movq   rax,xmm0
   2d1bb:	0f 28 c1             	movaps xmm0,xmm1
   2d1be:	48 89 45 ec          	mov    QWORD PTR [rbp-0x14],rax
   2d1c2:	f3 0f 11 45 f4       	movss  DWORD PTR [rbp-0xc],xmm0
   2d1c7:	48 8b 45 ec          	mov    rax,QWORD PTR [rbp-0x14]
   2d1cb:	f3 0f 10 4d f4       	movss  xmm1,DWORD PTR [rbp-0xc]
   2d1d0:	66 48 0f 6e c0       	movq   xmm0,rax
   2d1d5:	e8 1e f8 ff ff       	call   2c9f8 <objl::math::MagnitudeV3(objl::Vector3)>
   2d1da:	66 0f 7e c0          	movd   eax,xmm0
   2d1de:	66 0f ef c0          	pxor   xmm0,xmm0
   2d1e2:	66 0f 6e f0          	movd   xmm6,eax
   2d1e6:	0f 2e f0             	ucomiss xmm6,xmm0
   2d1e9:	0f 9b c2             	setnp  dl
   2d1ec:	b9 00 00 00 00       	mov    ecx,0x0
   2d1f1:	66 0f ef c0          	pxor   xmm0,xmm0
   2d1f5:	66 0f 6e f8          	movd   xmm7,eax
   2d1f9:	0f 2e f8             	ucomiss xmm7,xmm0
   2d1fc:	89 c8                	mov    eax,ecx
   2d1fe:	0f 44 c2             	cmove  eax,edx
   2d201:	84 c0                	test   al,al
   2d203:	74 07                	je     2d20c <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x227>
   2d205:	b8 01 00 00 00       	mov    eax,0x1
   2d20a:	eb 05                	jmp    2d211 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x22c>
   2d20c:	b8 00 00 00 00       	mov    eax,0x0
   2d211:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   2d215:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2d21e:	74 05                	je     2d225 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)+0x240>
   2d220:	e8 bb 72 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2d225:	c9                   	leave  
   2d226:	c3                   	ret    
   2d227:	90                   	nop

000000000002d228 <objl::Loader::Loader()>:
   2d228:	55                   	push   rbp
   2d229:	48 89 e5             	mov    rbp,rsp
   2d22c:	48 83 ec 10          	sub    rsp,0x10
   2d230:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2d234:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d238:	48 89 c7             	mov    rdi,rax
   2d23b:	e8 5e 47 00 00       	call   3199e <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::vector()>
   2d240:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d244:	48 83 c0 18          	add    rax,0x18
   2d248:	48 89 c7             	mov    rdi,rax
   2d24b:	e8 fa 40 00 00       	call   3134a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector()>
   2d250:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d254:	48 83 c0 30          	add    rax,0x30
   2d258:	48 89 c7             	mov    rdi,rax
   2d25b:	e8 04 85 ff ff       	call   25764 <std::vector<unsigned int, std::allocator<unsigned int> >::vector()>
   2d260:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d264:	48 83 c0 48          	add    rax,0x48
   2d268:	48 89 c7             	mov    rdi,rax
   2d26b:	e8 82 47 00 00       	call   319f2 <std::vector<objl::Material, std::allocator<objl::Material> >::vector()>
   2d270:	90                   	nop
   2d271:	c9                   	leave  
   2d272:	c3                   	ret    
   2d273:	90                   	nop

000000000002d274 <objl::Loader::~Loader()>:
   2d274:	55                   	push   rbp
   2d275:	48 89 e5             	mov    rbp,rsp
   2d278:	48 83 ec 10          	sub    rsp,0x10
   2d27c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   2d280:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d284:	48 89 c7             	mov    rdi,rax
   2d287:	e8 ec 5a 00 00       	call   32d78 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::clear()>
   2d28c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d290:	48 83 c0 48          	add    rax,0x48
   2d294:	48 89 c7             	mov    rdi,rax
   2d297:	e8 98 5a 00 00       	call   32d34 <std::vector<objl::Material, std::allocator<objl::Material> >::~vector()>
   2d29c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d2a0:	48 83 c0 30          	add    rax,0x30
   2d2a4:	48 89 c7             	mov    rdi,rax
   2d2a7:	e8 18 9b ff ff       	call   26dc4 <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   2d2ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d2b0:	48 83 c0 18          	add    rax,0x18
   2d2b4:	48 89 c7             	mov    rdi,rax
   2d2b7:	e8 10 52 00 00       	call   324cc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2d2bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   2d2c0:	48 89 c7             	mov    rdi,rax
   2d2c3:	e8 86 59 00 00       	call   32c4e <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::~vector()>
   2d2c8:	90                   	nop
   2d2c9:	c9                   	leave  
   2d2ca:	c3                   	ret    
   2d2cb:	90                   	nop

000000000002d2cc <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>:
   2d2cc:	55                   	push   rbp
   2d2cd:	48 89 e5             	mov    rbp,rsp
   2d2d0:	41 55                	push   r13
   2d2d2:	41 54                	push   r12
   2d2d4:	53                   	push   rbx
   2d2d5:	48 81 ec 98 0a 00 00 	sub    rsp,0xa98
   2d2dc:	48 89 bd 58 f5 ff ff 	mov    QWORD PTR [rbp-0xaa8],rdi
   2d2e3:	48 89 b5 50 f5 ff ff 	mov    QWORD PTR [rbp-0xab0],rsi
   2d2ea:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2d2f3:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2d2f7:	31 c0                	xor    eax,eax
   2d2f9:	48 8b 85 50 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xab0]
   2d300:	48 89 c7             	mov    rdi,rax
   2d303:	e8 a8 6f fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   2d308:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   2d30c:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2d313:	48 8b b5 50 f5 ff ff 	mov    rsi,QWORD PTR [rbp-0xab0]
   2d31a:	b9 04 00 00 00       	mov    ecx,0x4
   2d31f:	48 89 c7             	mov    rdi,rax
   2d322:	e8 29 71 fd ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   2d327:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2d32e:	48 8d 15 99 f7 00 00 	lea    rdx,[rip+0xf799]        # 3cace <NANO_SEC+0x1806>
   2d335:	48 89 d6             	mov    rsi,rdx
   2d338:	48 89 c7             	mov    rdi,rax
   2d33b:	e8 5d 5a 00 00       	call   32d9d <bool std::operator!=<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d340:	89 c3                	mov    ebx,eax
   2d342:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2d349:	48 89 c7             	mov    rdi,rax
   2d34c:	e8 0f 6f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d351:	84 db                	test   bl,bl
   2d353:	74 0a                	je     2d35f <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x93>
   2d355:	bb 00 00 00 00       	mov    ebx,0x0
   2d35a:	e9 f3 14 00 00       	jmp    2e852 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1586>
   2d35f:	48 8b 8d 50 f5 ff ff 	mov    rcx,QWORD PTR [rbp-0xab0]
   2d366:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2d36d:	ba 08 00 00 00       	mov    edx,0x8
   2d372:	48 89 ce             	mov    rsi,rcx
   2d375:	48 89 c7             	mov    rdi,rax
   2d378:	e8 73 73 fd ff       	call   46f0 <std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@plt>
   2d37d:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2d384:	48 89 c7             	mov    rdi,rax
   2d387:	e8 54 73 fd ff       	call   46e0 <std::basic_ifstream<char, std::char_traits<char> >::is_open()@plt>
   2d38c:	83 f0 01             	xor    eax,0x1
   2d38f:	84 c0                	test   al,al
   2d391:	74 0a                	je     2d39d <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd1>
   2d393:	bb 00 00 00 00       	mov    ebx,0x0
   2d398:	e9 a6 14 00 00       	jmp    2e843 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1577>
   2d39d:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2d3a4:	48 89 c7             	mov    rdi,rax
   2d3a7:	e8 cc 59 00 00       	call   32d78 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::clear()>
   2d3ac:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2d3b3:	48 83 c0 18          	add    rax,0x18
   2d3b7:	48 89 c7             	mov    rdi,rax
   2d3ba:	e8 07 5a 00 00       	call   32dc6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::clear()>
   2d3bf:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2d3c6:	48 83 c0 30          	add    rax,0x30
   2d3ca:	48 89 c7             	mov    rdi,rax
   2d3cd:	e8 1a 5a 00 00       	call   32dec <std::vector<unsigned int, std::allocator<unsigned int> >::clear()>
   2d3d2:	48 8d 85 90 f5 ff ff 	lea    rax,[rbp-0xa70]
   2d3d9:	48 89 c7             	mov    rdi,rax
   2d3dc:	e8 65 46 00 00       	call   31a46 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::vector()>
   2d3e1:	48 8d 85 b0 f5 ff ff 	lea    rax,[rbp-0xa50]
   2d3e8:	48 89 c7             	mov    rdi,rax
   2d3eb:	e8 aa 46 00 00       	call   31a9a <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::vector()>
   2d3f0:	48 8d 85 d0 f5 ff ff 	lea    rax,[rbp-0xa30]
   2d3f7:	48 89 c7             	mov    rdi,rax
   2d3fa:	e8 47 46 00 00       	call   31a46 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::vector()>
   2d3ff:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2d406:	48 89 c7             	mov    rdi,rax
   2d409:	e8 3c 3f 00 00       	call   3134a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector()>
   2d40e:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2d415:	48 89 c7             	mov    rdi,rax
   2d418:	e8 47 83 ff ff       	call   25764 <std::vector<unsigned int, std::allocator<unsigned int> >::vector()>
   2d41d:	48 8d 85 30 f6 ff ff 	lea    rax,[rbp-0x9d0]
   2d424:	48 89 c7             	mov    rdi,rax
   2d427:	e8 fa 81 ff ff       	call   25626 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   2d42c:	c6 85 63 f5 ff ff 00 	mov    BYTE PTR [rbp-0xa9d],0x0
   2d433:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2d43a:	48 89 c7             	mov    rdi,rax
   2d43d:	e8 de 71 fd ff       	call   4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2d442:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2d449:	48 89 c7             	mov    rdi,rax
   2d44c:	e8 99 f3 ff ff       	call   2c7ea <objl::Mesh::Mesh()>
   2d451:	48 8d 85 b0 f6 ff ff 	lea    rax,[rbp-0x950]
   2d458:	48 89 c7             	mov    rdi,rax
   2d45b:	e8 c0 71 fd ff       	call   4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   2d460:	e9 c0 10 00 00       	jmp    2e525 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1259>
   2d465:	bb 00 00 00 00       	mov    ebx,0x0
   2d46a:	41 bc 00 00 00 00    	mov    r12d,0x0
   2d470:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d477:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d47e:	48 89 d6             	mov    rsi,rdx
   2d481:	48 89 c7             	mov    rdi,rax
   2d484:	e8 a9 43 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d489:	bb 01 00 00 00       	mov    ebx,0x1
   2d48e:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d495:	48 8d 15 37 f6 00 00 	lea    rdx,[rip+0xf637]        # 3cad3 <NANO_SEC+0x180b>
   2d49c:	48 89 d6             	mov    rsi,rdx
   2d49f:	48 89 c7             	mov    rdi,rax
   2d4a2:	e8 30 92 ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d4a7:	84 c0                	test   al,al
   2d4a9:	75 57                	jne    2d502 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x236>
   2d4ab:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d4b2:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d4b9:	48 89 d6             	mov    rsi,rdx
   2d4bc:	48 89 c7             	mov    rdi,rax
   2d4bf:	e8 6e 43 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d4c4:	41 bc 01 00 00 00    	mov    r12d,0x1
   2d4ca:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d4d1:	48 8d 15 fd f5 00 00 	lea    rdx,[rip+0xf5fd]        # 3cad5 <NANO_SEC+0x180d>
   2d4d8:	48 89 d6             	mov    rsi,rdx
   2d4db:	48 89 c7             	mov    rdi,rax
   2d4de:	e8 f4 91 ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d4e3:	84 c0                	test   al,al
   2d4e5:	75 1b                	jne    2d502 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x236>
   2d4e7:	48 8d 85 b0 f6 ff ff 	lea    rax,[rbp-0x950]
   2d4ee:	be 00 00 00 00       	mov    esi,0x0
   2d4f3:	48 89 c7             	mov    rdi,rax
   2d4f6:	e8 15 73 fd ff       	call   4810 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)@plt>
   2d4fb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   2d4fe:	3c 67                	cmp    al,0x67
   2d500:	75 08                	jne    2d50a <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x23e>
   2d502:	41 bd 01 00 00 00    	mov    r13d,0x1
   2d508:	eb 06                	jmp    2d510 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x244>
   2d50a:	41 bd 00 00 00 00    	mov    r13d,0x0
   2d510:	45 84 e4             	test   r12b,r12b
   2d513:	74 0f                	je     2d524 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x258>
   2d515:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d51c:	48 89 c7             	mov    rdi,rax
   2d51f:	e8 3c 6d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d524:	84 db                	test   bl,bl
   2d526:	74 0f                	je     2d537 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x26b>
   2d528:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d52f:	48 89 c7             	mov    rdi,rax
   2d532:	e8 29 6d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d537:	45 84 ed             	test   r13b,r13b
   2d53a:	0f 84 7e 03 00 00    	je     2d8be <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x5f2>
   2d540:	0f b6 85 63 f5 ff ff 	movzx  eax,BYTE PTR [rbp-0xa9d]
   2d547:	83 f0 01             	xor    eax,0x1
   2d54a:	84 c0                	test   al,al
   2d54c:	0f 84 27 01 00 00    	je     2d679 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x3ad>
   2d552:	c6 85 63 f5 ff ff 01 	mov    BYTE PTR [rbp-0xa9d],0x1
   2d559:	bb 00 00 00 00       	mov    ebx,0x0
   2d55e:	41 bc 00 00 00 00    	mov    r12d,0x0
   2d564:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d56b:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d572:	48 89 d6             	mov    rsi,rdx
   2d575:	48 89 c7             	mov    rdi,rax
   2d578:	e8 b5 42 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d57d:	bb 01 00 00 00       	mov    ebx,0x1
   2d582:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d589:	48 8d 15 43 f5 00 00 	lea    rdx,[rip+0xf543]        # 3cad3 <NANO_SEC+0x180b>
   2d590:	48 89 d6             	mov    rsi,rdx
   2d593:	48 89 c7             	mov    rdi,rax
   2d596:	e8 3c 91 ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d59b:	84 c0                	test   al,al
   2d59d:	75 3c                	jne    2d5db <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x30f>
   2d59f:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d5a6:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d5ad:	48 89 d6             	mov    rsi,rdx
   2d5b0:	48 89 c7             	mov    rdi,rax
   2d5b3:	e8 7a 42 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d5b8:	41 bc 01 00 00 00    	mov    r12d,0x1
   2d5be:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d5c5:	48 8d 15 09 f5 00 00 	lea    rdx,[rip+0xf509]        # 3cad5 <NANO_SEC+0x180d>
   2d5cc:	48 89 d6             	mov    rsi,rdx
   2d5cf:	48 89 c7             	mov    rdi,rax
   2d5d2:	e8 00 91 ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d5d7:	84 c0                	test   al,al
   2d5d9:	74 08                	je     2d5e3 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x317>
   2d5db:	41 bd 01 00 00 00    	mov    r13d,0x1
   2d5e1:	eb 06                	jmp    2d5e9 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x31d>
   2d5e3:	41 bd 00 00 00 00    	mov    r13d,0x0
   2d5e9:	45 84 e4             	test   r12b,r12b
   2d5ec:	74 0f                	je     2d5fd <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x331>
   2d5ee:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d5f5:	48 89 c7             	mov    rdi,rax
   2d5f8:	e8 63 6c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d5fd:	84 db                	test   bl,bl
   2d5ff:	74 0f                	je     2d610 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x344>
   2d601:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d608:	48 89 c7             	mov    rdi,rax
   2d60b:	e8 50 6c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d610:	45 84 ed             	test   r13b,r13b
   2d613:	74 46                	je     2d65b <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x38f>
   2d615:	48 8d 85 d0 f6 ff ff 	lea    rax,[rbp-0x930]
   2d61c:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d623:	48 89 d6             	mov    rsi,rdx
   2d626:	48 89 c7             	mov    rdi,rax
   2d629:	e8 a8 40 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d62e:	48 8d 95 d0 f6 ff ff 	lea    rdx,[rbp-0x930]
   2d635:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2d63c:	48 89 d6             	mov    rsi,rdx
   2d63f:	48 89 c7             	mov    rdi,rax
   2d642:	e8 09 6f fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2d647:	48 8d 85 d0 f6 ff ff 	lea    rax,[rbp-0x930]
   2d64e:	48 89 c7             	mov    rdi,rax
   2d651:	e8 0a 6c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d656:	e9 63 02 00 00       	jmp    2d8be <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x5f2>
   2d65b:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2d662:	48 8d 15 6e f4 00 00 	lea    rdx,[rip+0xf46e]        # 3cad7 <NANO_SEC+0x180f>
   2d669:	48 89 d6             	mov    rsi,rdx
   2d66c:	48 89 c7             	mov    rdi,rax
   2d66f:	e8 9c 6f fd ff       	call   4610 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)@plt>
   2d674:	e9 45 02 00 00       	jmp    2d8be <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x5f2>
   2d679:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2d680:	48 89 c7             	mov    rdi,rax
   2d683:	e8 46 59 00 00       	call   32fce <std::vector<unsigned int, std::allocator<unsigned int> >::empty() const>
   2d688:	83 f0 01             	xor    eax,0x1
   2d68b:	84 c0                	test   al,al
   2d68d:	74 1d                	je     2d6ac <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x3e0>
   2d68f:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2d696:	48 89 c7             	mov    rdi,rax
   2d699:	e8 94 59 00 00       	call   33032 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::empty() const>
   2d69e:	83 f0 01             	xor    eax,0x1
   2d6a1:	84 c0                	test   al,al
   2d6a3:	74 07                	je     2d6ac <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x3e0>
   2d6a5:	b8 01 00 00 00       	mov    eax,0x1
   2d6aa:	eb 05                	jmp    2d6b1 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x3e5>
   2d6ac:	b8 00 00 00 00       	mov    eax,0x0
   2d6b1:	84 c0                	test   al,al
   2d6b3:	0f 84 ed 00 00 00    	je     2d7a6 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4da>
   2d6b9:	48 8d 95 10 f6 ff ff 	lea    rdx,[rbp-0x9f0]
   2d6c0:	48 8d 8d f0 f5 ff ff 	lea    rcx,[rbp-0xa10]
   2d6c7:	48 8d 85 80 f9 ff ff 	lea    rax,[rbp-0x680]
   2d6ce:	48 89 ce             	mov    rsi,rcx
   2d6d1:	48 89 c7             	mov    rdi,rax
   2d6d4:	e8 5d f1 ff ff       	call   2c836 <objl::Mesh::Mesh(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<unsigned int, std::allocator<unsigned int> >&)>
   2d6d9:	48 8d 95 80 f9 ff ff 	lea    rdx,[rbp-0x680]
   2d6e0:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2d6e7:	48 89 d6             	mov    rsi,rdx
   2d6ea:	48 89 c7             	mov    rdi,rax
   2d6ed:	e8 8c 45 00 00       	call   31c7e <objl::Mesh::operator=(objl::Mesh&&)>
   2d6f2:	48 8d 85 80 f9 ff ff 	lea    rax,[rbp-0x680]
   2d6f9:	48 89 c7             	mov    rdi,rax
   2d6fc:	e8 b5 43 00 00       	call   31ab6 <objl::Mesh::~Mesh()>
   2d701:	48 8d 95 90 f6 ff ff 	lea    rdx,[rbp-0x970]
   2d708:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2d70f:	48 89 d6             	mov    rsi,rdx
   2d712:	48 89 c7             	mov    rdi,rax
   2d715:	e8 36 69 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2d71a:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2d721:	48 8d 95 10 f8 ff ff 	lea    rdx,[rbp-0x7f0]
   2d728:	48 89 d6             	mov    rsi,rdx
   2d72b:	48 89 c7             	mov    rdi,rax
   2d72e:	e8 d3 59 00 00       	call   33106 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::push_back(objl::Mesh const&)>
   2d733:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2d73a:	48 89 c7             	mov    rdi,rax
   2d73d:	e8 84 56 00 00       	call   32dc6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::clear()>
   2d742:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2d749:	48 89 c7             	mov    rdi,rax
   2d74c:	e8 9b 56 00 00       	call   32dec <std::vector<unsigned int, std::allocator<unsigned int> >::clear()>
   2d751:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2d758:	48 89 c7             	mov    rdi,rax
   2d75b:	e8 60 6e fd ff       	call   45c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()@plt>
   2d760:	48 8d 85 f0 f6 ff ff 	lea    rax,[rbp-0x910]
   2d767:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d76e:	48 89 d6             	mov    rsi,rdx
   2d771:	48 89 c7             	mov    rdi,rax
   2d774:	e8 5d 3f 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d779:	48 8d 95 f0 f6 ff ff 	lea    rdx,[rbp-0x910]
   2d780:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2d787:	48 89 d6             	mov    rsi,rdx
   2d78a:	48 89 c7             	mov    rdi,rax
   2d78d:	e8 be 6d fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2d792:	48 8d 85 f0 f6 ff ff 	lea    rax,[rbp-0x910]
   2d799:	48 89 c7             	mov    rdi,rax
   2d79c:	e8 bf 6a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d7a1:	e9 18 01 00 00       	jmp    2d8be <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x5f2>
   2d7a6:	bb 00 00 00 00       	mov    ebx,0x0
   2d7ab:	41 bc 00 00 00 00    	mov    r12d,0x0
   2d7b1:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d7b8:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d7bf:	48 89 d6             	mov    rsi,rdx
   2d7c2:	48 89 c7             	mov    rdi,rax
   2d7c5:	e8 68 40 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d7ca:	bb 01 00 00 00       	mov    ebx,0x1
   2d7cf:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d7d6:	48 8d 15 f6 f2 00 00 	lea    rdx,[rip+0xf2f6]        # 3cad3 <NANO_SEC+0x180b>
   2d7dd:	48 89 d6             	mov    rsi,rdx
   2d7e0:	48 89 c7             	mov    rdi,rax
   2d7e3:	e8 ef 8e ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d7e8:	84 c0                	test   al,al
   2d7ea:	75 3c                	jne    2d828 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x55c>
   2d7ec:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d7f3:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d7fa:	48 89 d6             	mov    rsi,rdx
   2d7fd:	48 89 c7             	mov    rdi,rax
   2d800:	e8 2d 40 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d805:	41 bc 01 00 00 00    	mov    r12d,0x1
   2d80b:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d812:	48 8d 15 bc f2 00 00 	lea    rdx,[rip+0xf2bc]        # 3cad5 <NANO_SEC+0x180d>
   2d819:	48 89 d6             	mov    rsi,rdx
   2d81c:	48 89 c7             	mov    rdi,rax
   2d81f:	e8 b3 8e ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d824:	84 c0                	test   al,al
   2d826:	74 08                	je     2d830 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x564>
   2d828:	41 bd 01 00 00 00    	mov    r13d,0x1
   2d82e:	eb 06                	jmp    2d836 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x56a>
   2d830:	41 bd 00 00 00 00    	mov    r13d,0x0
   2d836:	45 84 e4             	test   r12b,r12b
   2d839:	74 0f                	je     2d84a <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x57e>
   2d83b:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d842:	48 89 c7             	mov    rdi,rax
   2d845:	e8 16 6a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d84a:	84 db                	test   bl,bl
   2d84c:	74 0f                	je     2d85d <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x591>
   2d84e:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d855:	48 89 c7             	mov    rdi,rax
   2d858:	e8 03 6a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d85d:	45 84 ed             	test   r13b,r13b
   2d860:	74 43                	je     2d8a5 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x5d9>
   2d862:	48 8d 85 10 f7 ff ff 	lea    rax,[rbp-0x8f0]
   2d869:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d870:	48 89 d6             	mov    rsi,rdx
   2d873:	48 89 c7             	mov    rdi,rax
   2d876:	e8 5b 3e 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d87b:	48 8d 95 10 f7 ff ff 	lea    rdx,[rbp-0x8f0]
   2d882:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2d889:	48 89 d6             	mov    rsi,rdx
   2d88c:	48 89 c7             	mov    rdi,rax
   2d88f:	e8 bc 6c fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2d894:	48 8d 85 10 f7 ff ff 	lea    rax,[rbp-0x8f0]
   2d89b:	48 89 c7             	mov    rdi,rax
   2d89e:	e8 bd 69 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d8a3:	eb 19                	jmp    2d8be <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x5f2>
   2d8a5:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2d8ac:	48 8d 15 24 f2 00 00 	lea    rdx,[rip+0xf224]        # 3cad7 <NANO_SEC+0x180f>
   2d8b3:	48 89 d6             	mov    rsi,rdx
   2d8b6:	48 89 c7             	mov    rdi,rax
   2d8b9:	e8 52 6d fd ff       	call   4610 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)@plt>
   2d8be:	48 8d 85 30 f7 ff ff 	lea    rax,[rbp-0x8d0]
   2d8c5:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d8cc:	48 89 d6             	mov    rsi,rdx
   2d8cf:	48 89 c7             	mov    rdi,rax
   2d8d2:	e8 5b 3f 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d8d7:	48 8d 85 30 f7 ff ff 	lea    rax,[rbp-0x8d0]
   2d8de:	48 8d 15 fa f1 00 00 	lea    rdx,[rip+0xf1fa]        # 3cadf <NANO_SEC+0x1817>
   2d8e5:	48 89 d6             	mov    rsi,rdx
   2d8e8:	48 89 c7             	mov    rdi,rax
   2d8eb:	e8 e7 8d ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2d8f0:	89 c3                	mov    ebx,eax
   2d8f2:	48 8d 85 30 f7 ff ff 	lea    rax,[rbp-0x8d0]
   2d8f9:	48 89 c7             	mov    rdi,rax
   2d8fc:	e8 5f 69 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d901:	84 db                	test   bl,bl
   2d903:	0f 84 5c 01 00 00    	je     2da65 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x799>
   2d909:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2d910:	48 89 c7             	mov    rdi,rax
   2d913:	e8 0e 7d ff ff       	call   25626 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   2d918:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2d91f:	48 89 c7             	mov    rdi,rax
   2d922:	e8 c3 e9 ff ff       	call   2c2ea <objl::Vector3::Vector3()>
   2d927:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2d92e:	48 89 c7             	mov    rdi,rax
   2d931:	e8 3a 6e fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   2d936:	48 8d 95 64 f5 ff ff 	lea    rdx,[rbp-0xa9c]
   2d93d:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d944:	48 8d 0d 96 f1 00 00 	lea    rcx,[rip+0xf196]        # 3cae1 <NANO_SEC+0x1819>
   2d94b:	48 89 ce             	mov    rsi,rcx
   2d94e:	48 89 c7             	mov    rdi,rax
   2d951:	e8 04 81 ff ff       	call   25a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   2d956:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d95d:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2d964:	48 89 d6             	mov    rsi,rdx
   2d967:	48 89 c7             	mov    rdi,rax
   2d96a:	e8 67 3d 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2d96f:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2d976:	48 8d 8d 70 f6 ff ff 	lea    rcx,[rbp-0x990]
   2d97d:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d984:	48 89 ce             	mov    rsi,rcx
   2d987:	48 89 c7             	mov    rdi,rax
   2d98a:	e8 5a 3a 00 00       	call   313e9 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2d98f:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2d996:	48 89 c7             	mov    rdi,rax
   2d999:	e8 c2 68 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d99e:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2d9a5:	48 89 c7             	mov    rdi,rax
   2d9a8:	e8 b3 68 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2d9ad:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2d9b4:	48 89 c7             	mov    rdi,rax
   2d9b7:	e8 d4 6a fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   2d9bc:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2d9c3:	be 00 00 00 00       	mov    esi,0x0
   2d9c8:	48 89 c7             	mov    rdi,rax
   2d9cb:	e8 88 8d ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2d9d0:	be 00 00 00 00       	mov    esi,0x0
   2d9d5:	48 89 c7             	mov    rdi,rax
   2d9d8:	e8 69 37 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2d9dd:	66 0f 7e c0          	movd   eax,xmm0
   2d9e1:	89 85 50 f6 ff ff    	mov    DWORD PTR [rbp-0x9b0],eax
   2d9e7:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2d9ee:	be 01 00 00 00       	mov    esi,0x1
   2d9f3:	48 89 c7             	mov    rdi,rax
   2d9f6:	e8 5d 8d ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2d9fb:	be 00 00 00 00       	mov    esi,0x0
   2da00:	48 89 c7             	mov    rdi,rax
   2da03:	e8 3e 37 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2da08:	66 0f 7e c0          	movd   eax,xmm0
   2da0c:	89 85 54 f6 ff ff    	mov    DWORD PTR [rbp-0x9ac],eax
   2da12:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2da19:	be 02 00 00 00       	mov    esi,0x2
   2da1e:	48 89 c7             	mov    rdi,rax
   2da21:	e8 32 8d ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2da26:	be 00 00 00 00       	mov    esi,0x0
   2da2b:	48 89 c7             	mov    rdi,rax
   2da2e:	e8 13 37 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2da33:	66 0f 7e c0          	movd   eax,xmm0
   2da37:	89 85 58 f6 ff ff    	mov    DWORD PTR [rbp-0x9a8],eax
   2da3d:	48 8d 95 50 f6 ff ff 	lea    rdx,[rbp-0x9b0]
   2da44:	48 8d 85 90 f5 ff ff 	lea    rax,[rbp-0xa70]
   2da4b:	48 89 d6             	mov    rsi,rdx
   2da4e:	48 89 c7             	mov    rdi,rax
   2da51:	e8 2e 57 00 00       	call   33184 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::push_back(objl::Vector3 const&)>
   2da56:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2da5d:	48 89 c7             	mov    rdi,rax
   2da60:	e8 67 8a ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2da65:	48 8d 85 50 f7 ff ff 	lea    rax,[rbp-0x8b0]
   2da6c:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2da73:	48 89 d6             	mov    rsi,rdx
   2da76:	48 89 c7             	mov    rdi,rax
   2da79:	e8 b4 3d 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2da7e:	48 8d 85 50 f7 ff ff 	lea    rax,[rbp-0x8b0]
   2da85:	48 8d 15 57 f0 00 00 	lea    rdx,[rip+0xf057]        # 3cae3 <NANO_SEC+0x181b>
   2da8c:	48 89 d6             	mov    rsi,rdx
   2da8f:	48 89 c7             	mov    rdi,rax
   2da92:	e8 40 8c ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2da97:	89 c3                	mov    ebx,eax
   2da99:	48 8d 85 50 f7 ff ff 	lea    rax,[rbp-0x8b0]
   2daa0:	48 89 c7             	mov    rdi,rax
   2daa3:	e8 b8 67 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2daa8:	84 db                	test   bl,bl
   2daaa:	0f 84 31 01 00 00    	je     2dbe1 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x915>
   2dab0:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dab7:	48 89 c7             	mov    rdi,rax
   2daba:	e8 67 7b ff ff       	call   25626 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   2dabf:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2dac6:	48 89 c7             	mov    rdi,rax
   2dac9:	e8 98 e5 ff ff       	call   2c066 <objl::Vector2::Vector2()>
   2dace:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2dad5:	48 89 c7             	mov    rdi,rax
   2dad8:	e8 93 6c fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   2dadd:	48 8d 95 64 f5 ff ff 	lea    rdx,[rbp-0xa9c]
   2dae4:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2daeb:	48 8d 0d ef ef 00 00 	lea    rcx,[rip+0xefef]        # 3cae1 <NANO_SEC+0x1819>
   2daf2:	48 89 ce             	mov    rsi,rcx
   2daf5:	48 89 c7             	mov    rdi,rax
   2daf8:	e8 5d 7f ff ff       	call   25a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   2dafd:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2db04:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2db0b:	48 89 d6             	mov    rsi,rdx
   2db0e:	48 89 c7             	mov    rdi,rax
   2db11:	e8 c0 3b 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2db16:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2db1d:	48 8d 8d 70 f6 ff ff 	lea    rcx,[rbp-0x990]
   2db24:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2db2b:	48 89 ce             	mov    rsi,rcx
   2db2e:	48 89 c7             	mov    rdi,rax
   2db31:	e8 b3 38 00 00       	call   313e9 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2db36:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2db3d:	48 89 c7             	mov    rdi,rax
   2db40:	e8 1b 67 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2db45:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2db4c:	48 89 c7             	mov    rdi,rax
   2db4f:	e8 0c 67 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2db54:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2db5b:	48 89 c7             	mov    rdi,rax
   2db5e:	e8 2d 69 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   2db63:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2db6a:	be 00 00 00 00       	mov    esi,0x0
   2db6f:	48 89 c7             	mov    rdi,rax
   2db72:	e8 e1 8b ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2db77:	be 00 00 00 00       	mov    esi,0x0
   2db7c:	48 89 c7             	mov    rdi,rax
   2db7f:	e8 c2 35 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2db84:	66 0f 7e c0          	movd   eax,xmm0
   2db88:	89 85 50 f6 ff ff    	mov    DWORD PTR [rbp-0x9b0],eax
   2db8e:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2db95:	be 01 00 00 00       	mov    esi,0x1
   2db9a:	48 89 c7             	mov    rdi,rax
   2db9d:	e8 b6 8b ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2dba2:	be 00 00 00 00       	mov    esi,0x0
   2dba7:	48 89 c7             	mov    rdi,rax
   2dbaa:	e8 97 35 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2dbaf:	66 0f 7e c0          	movd   eax,xmm0
   2dbb3:	89 85 54 f6 ff ff    	mov    DWORD PTR [rbp-0x9ac],eax
   2dbb9:	48 8d 95 50 f6 ff ff 	lea    rdx,[rbp-0x9b0]
   2dbc0:	48 8d 85 b0 f5 ff ff 	lea    rax,[rbp-0xa50]
   2dbc7:	48 89 d6             	mov    rsi,rdx
   2dbca:	48 89 c7             	mov    rdi,rax
   2dbcd:	e8 2e 56 00 00       	call   33200 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::push_back(objl::Vector2 const&)>
   2dbd2:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dbd9:	48 89 c7             	mov    rdi,rax
   2dbdc:	e8 eb 88 ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2dbe1:	48 8d 85 70 f7 ff ff 	lea    rax,[rbp-0x890]
   2dbe8:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2dbef:	48 89 d6             	mov    rsi,rdx
   2dbf2:	48 89 c7             	mov    rdi,rax
   2dbf5:	e8 38 3c 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2dbfa:	48 8d 85 70 f7 ff ff 	lea    rax,[rbp-0x890]
   2dc01:	48 8d 15 de ee 00 00 	lea    rdx,[rip+0xeede]        # 3cae6 <NANO_SEC+0x181e>
   2dc08:	48 89 d6             	mov    rsi,rdx
   2dc0b:	48 89 c7             	mov    rdi,rax
   2dc0e:	e8 c4 8a ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2dc13:	89 c3                	mov    ebx,eax
   2dc15:	48 8d 85 70 f7 ff ff 	lea    rax,[rbp-0x890]
   2dc1c:	48 89 c7             	mov    rdi,rax
   2dc1f:	e8 3c 66 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2dc24:	84 db                	test   bl,bl
   2dc26:	0f 84 5c 01 00 00    	je     2dd88 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xabc>
   2dc2c:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dc33:	48 89 c7             	mov    rdi,rax
   2dc36:	e8 eb 79 ff ff       	call   25626 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   2dc3b:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2dc42:	48 89 c7             	mov    rdi,rax
   2dc45:	e8 a0 e6 ff ff       	call   2c2ea <objl::Vector3::Vector3()>
   2dc4a:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2dc51:	48 89 c7             	mov    rdi,rax
   2dc54:	e8 17 6b fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   2dc59:	48 8d 95 64 f5 ff ff 	lea    rdx,[rbp-0xa9c]
   2dc60:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2dc67:	48 8d 0d 73 ee 00 00 	lea    rcx,[rip+0xee73]        # 3cae1 <NANO_SEC+0x1819>
   2dc6e:	48 89 ce             	mov    rsi,rcx
   2dc71:	48 89 c7             	mov    rdi,rax
   2dc74:	e8 e1 7d ff ff       	call   25a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   2dc79:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2dc80:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2dc87:	48 89 d6             	mov    rsi,rdx
   2dc8a:	48 89 c7             	mov    rdi,rax
   2dc8d:	e8 44 3a 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2dc92:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2dc99:	48 8d 8d 70 f6 ff ff 	lea    rcx,[rbp-0x990]
   2dca0:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2dca7:	48 89 ce             	mov    rsi,rcx
   2dcaa:	48 89 c7             	mov    rdi,rax
   2dcad:	e8 37 37 00 00       	call   313e9 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2dcb2:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2dcb9:	48 89 c7             	mov    rdi,rax
   2dcbc:	e8 9f 65 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2dcc1:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2dcc8:	48 89 c7             	mov    rdi,rax
   2dccb:	e8 90 65 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2dcd0:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2dcd7:	48 89 c7             	mov    rdi,rax
   2dcda:	e8 b1 67 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   2dcdf:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dce6:	be 00 00 00 00       	mov    esi,0x0
   2dceb:	48 89 c7             	mov    rdi,rax
   2dcee:	e8 65 8a ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2dcf3:	be 00 00 00 00       	mov    esi,0x0
   2dcf8:	48 89 c7             	mov    rdi,rax
   2dcfb:	e8 46 34 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2dd00:	66 0f 7e c0          	movd   eax,xmm0
   2dd04:	89 85 50 f6 ff ff    	mov    DWORD PTR [rbp-0x9b0],eax
   2dd0a:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dd11:	be 01 00 00 00       	mov    esi,0x1
   2dd16:	48 89 c7             	mov    rdi,rax
   2dd19:	e8 3a 8a ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2dd1e:	be 00 00 00 00       	mov    esi,0x0
   2dd23:	48 89 c7             	mov    rdi,rax
   2dd26:	e8 1b 34 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2dd2b:	66 0f 7e c0          	movd   eax,xmm0
   2dd2f:	89 85 54 f6 ff ff    	mov    DWORD PTR [rbp-0x9ac],eax
   2dd35:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dd3c:	be 02 00 00 00       	mov    esi,0x2
   2dd41:	48 89 c7             	mov    rdi,rax
   2dd44:	e8 0f 8a ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2dd49:	be 00 00 00 00       	mov    esi,0x0
   2dd4e:	48 89 c7             	mov    rdi,rax
   2dd51:	e8 f0 33 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   2dd56:	66 0f 7e c0          	movd   eax,xmm0
   2dd5a:	89 85 58 f6 ff ff    	mov    DWORD PTR [rbp-0x9a8],eax
   2dd60:	48 8d 95 50 f6 ff ff 	lea    rdx,[rbp-0x9b0]
   2dd67:	48 8d 85 d0 f5 ff ff 	lea    rax,[rbp-0xa30]
   2dd6e:	48 89 d6             	mov    rsi,rdx
   2dd71:	48 89 c7             	mov    rdi,rax
   2dd74:	e8 0b 54 00 00       	call   33184 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::push_back(objl::Vector3 const&)>
   2dd79:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dd80:	48 89 c7             	mov    rdi,rax
   2dd83:	e8 44 87 ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2dd88:	48 8d 85 90 f7 ff ff 	lea    rax,[rbp-0x870]
   2dd8f:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2dd96:	48 89 d6             	mov    rsi,rdx
   2dd99:	48 89 c7             	mov    rdi,rax
   2dd9c:	e8 91 3a 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2dda1:	48 8d 85 90 f7 ff ff 	lea    rax,[rbp-0x870]
   2dda8:	48 8d 15 3a ed 00 00 	lea    rdx,[rip+0xed3a]        # 3cae9 <NANO_SEC+0x1821>
   2ddaf:	48 89 d6             	mov    rsi,rdx
   2ddb2:	48 89 c7             	mov    rdi,rax
   2ddb5:	e8 1d 89 ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2ddba:	89 c3                	mov    ebx,eax
   2ddbc:	48 8d 85 90 f7 ff ff 	lea    rax,[rbp-0x870]
   2ddc3:	48 89 c7             	mov    rdi,rax
   2ddc6:	e8 95 64 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ddcb:	84 db                	test   bl,bl
   2ddcd:	0f 84 4e 02 00 00    	je     2e021 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd55>
   2ddd3:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2ddda:	48 89 c7             	mov    rdi,rax
   2dddd:	e8 68 35 00 00       	call   3134a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector()>
   2dde2:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2dde9:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2ddf0:	48 89 d6             	mov    rsi,rdx
   2ddf3:	48 89 c7             	mov    rdi,rax
   2ddf6:	e8 75 63 fd ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2ddfb:	4c 8d 85 60 fc ff ff 	lea    r8,[rbp-0x3a0]
   2de02:	48 8d bd d0 f5 ff ff 	lea    rdi,[rbp-0xa30]
   2de09:	48 8d 8d b0 f5 ff ff 	lea    rcx,[rbp-0xa50]
   2de10:	48 8d 95 90 f5 ff ff 	lea    rdx,[rbp-0xa70]
   2de17:	48 8d b5 50 f6 ff ff 	lea    rsi,[rbp-0x9b0]
   2de1e:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2de25:	4d 89 c1             	mov    r9,r8
   2de28:	49 89 f8             	mov    r8,rdi
   2de2b:	48 89 c7             	mov    rdi,rax
   2de2e:	e8 db 0d 00 00       	call   2ec0e <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2de33:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2de3a:	48 89 c7             	mov    rdi,rax
   2de3d:	e8 1e 64 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2de42:	c7 85 68 f5 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa98],0x0
   2de4c:	eb 68                	jmp    2deb6 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xbea>
   2de4e:	8b 85 68 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa98]
   2de54:	48 63 d0             	movsxd rdx,eax
   2de57:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2de5e:	48 89 d6             	mov    rsi,rdx
   2de61:	48 89 c7             	mov    rdi,rax
   2de64:	e8 6b 87 ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2de69:	48 89 c2             	mov    rdx,rax
   2de6c:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2de73:	48 89 d6             	mov    rsi,rdx
   2de76:	48 89 c7             	mov    rdi,rax
   2de79:	e8 fe 53 00 00       	call   3327c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)>
   2de7e:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2de85:	48 8d 58 18          	lea    rbx,[rax+0x18]
   2de89:	8b 85 68 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa98]
   2de8f:	48 63 d0             	movsxd rdx,eax
   2de92:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2de99:	48 89 d6             	mov    rsi,rdx
   2de9c:	48 89 c7             	mov    rdi,rax
   2de9f:	e8 30 87 ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2dea4:	48 89 c6             	mov    rsi,rax
   2dea7:	48 89 df             	mov    rdi,rbx
   2deaa:	e8 cd 53 00 00       	call   3327c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)>
   2deaf:	83 85 68 f5 ff ff 01 	add    DWORD PTR [rbp-0xa98],0x1
   2deb6:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2debd:	48 89 c7             	mov    rdi,rax
   2dec0:	e8 a3 86 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2dec5:	39 85 68 f5 ff ff    	cmp    DWORD PTR [rbp-0xa98],eax
   2decb:	0f 9c c0             	setl   al
   2dece:	84 c0                	test   al,al
   2ded0:	0f 85 78 ff ff ff    	jne    2de4e <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xb82>
   2ded6:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dedd:	48 89 c7             	mov    rdi,rax
   2dee0:	e8 7f 78 ff ff       	call   25764 <std::vector<unsigned int, std::allocator<unsigned int> >::vector()>
   2dee5:	48 8d 95 50 f6 ff ff 	lea    rdx,[rbp-0x9b0]
   2deec:	48 8d 8d 70 f6 ff ff 	lea    rcx,[rbp-0x990]
   2def3:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2defa:	48 89 ce             	mov    rsi,rcx
   2defd:	48 89 c7             	mov    rdi,rax
   2df00:	e8 27 14 00 00       	call   2f32c <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)>
   2df05:	c7 85 6c f5 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa94],0x0
   2df0f:	e9 cf 00 00 00       	jmp    2dfe3 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd17>
   2df14:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2df1b:	48 89 c7             	mov    rdi,rax
   2df1e:	e8 45 86 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2df23:	89 c3                	mov    ebx,eax
   2df25:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2df2c:	48 89 c7             	mov    rdi,rax
   2df2f:	e8 34 86 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2df34:	29 c3                	sub    ebx,eax
   2df36:	8b 85 6c f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa94]
   2df3c:	48 63 d0             	movsxd rdx,eax
   2df3f:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2df46:	48 89 d6             	mov    rsi,rdx
   2df49:	48 89 c7             	mov    rdi,rax
   2df4c:	e8 13 99 ff ff       	call   27864 <std::vector<unsigned int, std::allocator<unsigned int> >::operator[](unsigned long)>
   2df51:	8b 00                	mov    eax,DWORD PTR [rax]
   2df53:	01 d8                	add    eax,ebx
   2df55:	89 85 64 f5 ff ff    	mov    DWORD PTR [rbp-0xa9c],eax
   2df5b:	48 8d 95 64 f5 ff ff 	lea    rdx,[rbp-0xa9c]
   2df62:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2df69:	48 89 d6             	mov    rsi,rdx
   2df6c:	48 89 c7             	mov    rdi,rax
   2df6f:	e8 b2 88 ff ff       	call   26826 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)>
   2df74:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2df7b:	48 83 c0 18          	add    rax,0x18
   2df7f:	48 89 c7             	mov    rdi,rax
   2df82:	e8 e1 85 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2df87:	89 c3                	mov    ebx,eax
   2df89:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2df90:	48 89 c7             	mov    rdi,rax
   2df93:	e8 d0 85 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2df98:	29 c3                	sub    ebx,eax
   2df9a:	8b 85 6c f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa94]
   2dfa0:	48 63 d0             	movsxd rdx,eax
   2dfa3:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dfaa:	48 89 d6             	mov    rsi,rdx
   2dfad:	48 89 c7             	mov    rdi,rax
   2dfb0:	e8 af 98 ff ff       	call   27864 <std::vector<unsigned int, std::allocator<unsigned int> >::operator[](unsigned long)>
   2dfb5:	8b 00                	mov    eax,DWORD PTR [rax]
   2dfb7:	01 d8                	add    eax,ebx
   2dfb9:	89 85 64 f5 ff ff    	mov    DWORD PTR [rbp-0xa9c],eax
   2dfbf:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2dfc6:	48 8d 50 30          	lea    rdx,[rax+0x30]
   2dfca:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2dfd1:	48 89 c6             	mov    rsi,rax
   2dfd4:	48 89 d7             	mov    rdi,rdx
   2dfd7:	e8 4a 88 ff ff       	call   26826 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int const&)>
   2dfdc:	83 85 6c f5 ff ff 01 	add    DWORD PTR [rbp-0xa94],0x1
   2dfe3:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2dfea:	48 89 c7             	mov    rdi,rax
   2dfed:	e8 be 85 ff ff       	call   265b0 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   2dff2:	39 85 6c f5 ff ff    	cmp    DWORD PTR [rbp-0xa94],eax
   2dff8:	0f 9c c0             	setl   al
   2dffb:	84 c0                	test   al,al
   2dffd:	0f 85 11 ff ff ff    	jne    2df14 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xc48>
   2e003:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e00a:	48 89 c7             	mov    rdi,rax
   2e00d:	e8 b2 8d ff ff       	call   26dc4 <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   2e012:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e019:	48 89 c7             	mov    rdi,rax
   2e01c:	e8 ab 44 00 00       	call   324cc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2e021:	48 8d 85 b0 f7 ff ff 	lea    rax,[rbp-0x850]
   2e028:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2e02f:	48 89 d6             	mov    rsi,rdx
   2e032:	48 89 c7             	mov    rdi,rax
   2e035:	e8 f8 37 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2e03a:	48 8d 85 b0 f7 ff ff 	lea    rax,[rbp-0x850]
   2e041:	48 8d 15 a3 ea 00 00 	lea    rdx,[rip+0xeaa3]        # 3caeb <NANO_SEC+0x1823>
   2e048:	48 89 d6             	mov    rsi,rdx
   2e04b:	48 89 c7             	mov    rdi,rax
   2e04e:	e8 84 86 ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2e053:	89 c3                	mov    ebx,eax
   2e055:	48 8d 85 b0 f7 ff ff 	lea    rax,[rbp-0x850]
   2e05c:	48 89 c7             	mov    rdi,rax
   2e05f:	e8 fc 61 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e064:	84 db                	test   bl,bl
   2e066:	0f 84 5a 02 00 00    	je     2e2c6 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xffa>
   2e06c:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e073:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2e07a:	48 89 d6             	mov    rsi,rdx
   2e07d:	48 89 c7             	mov    rdi,rax
   2e080:	e8 51 36 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2e085:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2e08c:	48 8d 85 30 f6 ff ff 	lea    rax,[rbp-0x9d0]
   2e093:	48 89 d6             	mov    rsi,rdx
   2e096:	48 89 c7             	mov    rdi,rax
   2e099:	e8 dc 4a 00 00       	call   32b7a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   2e09e:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e0a5:	48 89 c7             	mov    rdi,rax
   2e0a8:	e8 b3 61 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e0ad:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2e0b4:	48 89 c7             	mov    rdi,rax
   2e0b7:	e8 12 4f 00 00       	call   32fce <std::vector<unsigned int, std::allocator<unsigned int> >::empty() const>
   2e0bc:	83 f0 01             	xor    eax,0x1
   2e0bf:	84 c0                	test   al,al
   2e0c1:	74 1d                	je     2e0e0 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe14>
   2e0c3:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2e0ca:	48 89 c7             	mov    rdi,rax
   2e0cd:	e8 60 4f 00 00       	call   33032 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::empty() const>
   2e0d2:	83 f0 01             	xor    eax,0x1
   2e0d5:	84 c0                	test   al,al
   2e0d7:	74 07                	je     2e0e0 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe14>
   2e0d9:	b8 01 00 00 00       	mov    eax,0x1
   2e0de:	eb 05                	jmp    2e0e5 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe19>
   2e0e0:	b8 00 00 00 00       	mov    eax,0x0
   2e0e5:	84 c0                	test   al,al
   2e0e7:	0f 84 d9 01 00 00    	je     2e2c6 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xffa>
   2e0ed:	48 8d 95 10 f6 ff ff 	lea    rdx,[rbp-0x9f0]
   2e0f4:	48 8d 8d f0 f5 ff ff 	lea    rcx,[rbp-0xa10]
   2e0fb:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e102:	48 89 ce             	mov    rsi,rcx
   2e105:	48 89 c7             	mov    rdi,rax
   2e108:	e8 29 e7 ff ff       	call   2c836 <objl::Mesh::Mesh(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<unsigned int, std::allocator<unsigned int> >&)>
   2e10d:	48 8d 95 f0 fa ff ff 	lea    rdx,[rbp-0x510]
   2e114:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2e11b:	48 89 d6             	mov    rsi,rdx
   2e11e:	48 89 c7             	mov    rdi,rax
   2e121:	e8 58 3b 00 00       	call   31c7e <objl::Mesh::operator=(objl::Mesh&&)>
   2e126:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e12d:	48 89 c7             	mov    rdi,rax
   2e130:	e8 81 39 00 00       	call   31ab6 <objl::Mesh::~Mesh()>
   2e135:	48 8d 95 90 f6 ff ff 	lea    rdx,[rbp-0x970]
   2e13c:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2e143:	48 89 d6             	mov    rsi,rdx
   2e146:	48 89 c7             	mov    rdi,rax
   2e149:	e8 02 5f fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2e14e:	c7 85 7c f5 ff ff 02 00 00 00 	mov    DWORD PTR [rbp-0xa84],0x2
   2e158:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e15f:	8b 95 7c f5 ff ff    	mov    edx,DWORD PTR [rbp-0xa84]
   2e165:	89 d6                	mov    esi,edx
   2e167:	48 89 c7             	mov    rdi,rax
   2e16a:	e8 18 30 00 00       	call   31187 <std::__cxx11::to_string(int)>
   2e16f:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e176:	48 8d 8d 90 f6 ff ff 	lea    rcx,[rbp-0x970]
   2e17d:	48 8d 15 6e e9 00 00 	lea    rdx,[rip+0xe96e]        # 3caf2 <NANO_SEC+0x182a>
   2e184:	48 89 ce             	mov    rsi,rcx
   2e187:	48 89 c7             	mov    rdi,rax
   2e18a:	e8 65 41 00 00       	call   322f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2e18f:	48 8d 85 d0 f7 ff ff 	lea    rax,[rbp-0x830]
   2e196:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2e19d:	48 8d 8d f0 fa ff ff 	lea    rcx,[rbp-0x510]
   2e1a4:	48 89 ce             	mov    rsi,rcx
   2e1a7:	48 89 c7             	mov    rdi,rax
   2e1aa:	e8 a6 41 00 00       	call   32355 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   2e1af:	48 8d 95 d0 f7 ff ff 	lea    rdx,[rbp-0x830]
   2e1b6:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2e1bd:	48 89 d6             	mov    rsi,rdx
   2e1c0:	48 89 c7             	mov    rdi,rax
   2e1c3:	e8 88 63 fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2e1c8:	48 8d 85 d0 f7 ff ff 	lea    rax,[rbp-0x830]
   2e1cf:	48 89 c7             	mov    rdi,rax
   2e1d2:	e8 89 60 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e1d7:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e1de:	48 89 c7             	mov    rdi,rax
   2e1e1:	e8 7a 60 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e1e6:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e1ed:	48 89 c7             	mov    rdi,rax
   2e1f0:	e8 6b 60 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e1f5:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e1fc:	48 89 85 80 f5 ff ff 	mov    QWORD PTR [rbp-0xa80],rax
   2e203:	48 8b 85 80 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa80]
   2e20a:	48 89 c7             	mov    rdi,rax
   2e20d:	e8 e6 50 00 00       	call   332f8 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::begin()>
   2e212:	48 89 85 50 f6 ff ff 	mov    QWORD PTR [rbp-0x9b0],rax
   2e219:	48 8b 85 80 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa80]
   2e220:	48 89 c7             	mov    rdi,rax
   2e223:	e8 18 51 00 00       	call   33340 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::end()>
   2e228:	48 89 85 70 f6 ff ff 	mov    QWORD PTR [rbp-0x990],rax
   2e22f:	eb 40                	jmp    2e271 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xfa5>
   2e231:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e238:	48 89 c7             	mov    rdi,rax
   2e23b:	e8 ac 51 00 00       	call   333ec <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::operator*() const>
   2e240:	48 89 85 88 f5 ff ff 	mov    QWORD PTR [rbp-0xa78],rax
   2e247:	48 8b 85 88 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa78]
   2e24e:	48 8d 95 10 f8 ff ff 	lea    rdx,[rbp-0x7f0]
   2e255:	48 89 d6             	mov    rsi,rdx
   2e258:	48 89 c7             	mov    rdi,rax
   2e25b:	e8 18 85 ff ff       	call   26778 <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2e260:	84 c0                	test   al,al
   2e262:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e269:	48 89 c7             	mov    rdi,rax
   2e26c:	e8 57 51 00 00       	call   333c8 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::operator++()>
   2e271:	48 8d 95 70 f6 ff ff 	lea    rdx,[rbp-0x990]
   2e278:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e27f:	48 89 d6             	mov    rsi,rdx
   2e282:	48 89 c7             	mov    rdi,rax
   2e285:	e8 02 51 00 00       	call   3338c <bool __gnu_cxx::operator!=<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&, __gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&)>
   2e28a:	84 c0                	test   al,al
   2e28c:	75 a3                	jne    2e231 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf65>
   2e28e:	90                   	nop
   2e28f:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e296:	48 8d 95 10 f8 ff ff 	lea    rdx,[rbp-0x7f0]
   2e29d:	48 89 d6             	mov    rsi,rdx
   2e2a0:	48 89 c7             	mov    rdi,rax
   2e2a3:	e8 5e 4e 00 00       	call   33106 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::push_back(objl::Mesh const&)>
   2e2a8:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2e2af:	48 89 c7             	mov    rdi,rax
   2e2b2:	e8 0f 4b 00 00       	call   32dc6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::clear()>
   2e2b7:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2e2be:	48 89 c7             	mov    rdi,rax
   2e2c1:	e8 26 4b 00 00       	call   32dec <std::vector<unsigned int, std::allocator<unsigned int> >::clear()>
   2e2c6:	48 8d 85 f0 f7 ff ff 	lea    rax,[rbp-0x810]
   2e2cd:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2e2d4:	48 89 d6             	mov    rsi,rdx
   2e2d7:	48 89 c7             	mov    rdi,rax
   2e2da:	e8 53 35 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2e2df:	48 8d 85 f0 f7 ff ff 	lea    rax,[rbp-0x810]
   2e2e6:	48 8d 15 07 e8 00 00 	lea    rdx,[rip+0xe807]        # 3caf4 <NANO_SEC+0x182c>
   2e2ed:	48 89 d6             	mov    rsi,rdx
   2e2f0:	48 89 c7             	mov    rdi,rax
   2e2f3:	e8 df 83 ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2e2f8:	89 c3                	mov    ebx,eax
   2e2fa:	48 8d 85 f0 f7 ff ff 	lea    rax,[rbp-0x810]
   2e301:	48 89 c7             	mov    rdi,rax
   2e304:	e8 57 5f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e309:	84 db                	test   bl,bl
   2e30b:	0f 84 14 02 00 00    	je     2e525 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1259>
   2e311:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e318:	48 89 c7             	mov    rdi,rax
   2e31b:	e8 06 73 ff ff       	call   25626 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   2e320:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e327:	48 89 c7             	mov    rdi,rax
   2e32a:	e8 41 64 fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   2e32f:	48 8d 95 50 f6 ff ff 	lea    rdx,[rbp-0x9b0]
   2e336:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e33d:	48 8d 0d b7 e7 00 00 	lea    rcx,[rip+0xe7b7]        # 3cafb <NANO_SEC+0x1833>
   2e344:	48 89 ce             	mov    rsi,rcx
   2e347:	48 89 c7             	mov    rdi,rax
   2e34a:	e8 0b 77 ff ff       	call   25a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   2e34f:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2e356:	48 8d 8d 70 f6 ff ff 	lea    rcx,[rbp-0x990]
   2e35d:	48 8b 85 50 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xab0]
   2e364:	48 89 ce             	mov    rsi,rcx
   2e367:	48 89 c7             	mov    rdi,rax
   2e36a:	e8 7a 30 00 00       	call   313e9 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2e36f:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e376:	48 89 c7             	mov    rdi,rax
   2e379:	e8 e2 5e fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e37e:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e385:	48 89 c7             	mov    rdi,rax
   2e388:	e8 03 61 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   2e38d:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e394:	48 89 c7             	mov    rdi,rax
   2e397:	e8 d4 63 fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   2e39c:	48 8d 95 50 f6 ff ff 	lea    rdx,[rbp-0x9b0]
   2e3a3:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e3aa:	48 8d 0d 19 e7 00 00 	lea    rcx,[rip+0xe719]        # 3caca <NANO_SEC+0x1802>
   2e3b1:	48 89 ce             	mov    rsi,rcx
   2e3b4:	48 89 c7             	mov    rdi,rax
   2e3b7:	e8 9e 76 ff ff       	call   25a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   2e3bc:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2e3c3:	48 89 c7             	mov    rdi,rax
   2e3c6:	e8 c5 60 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   2e3cb:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e3d2:	48 89 c7             	mov    rdi,rax
   2e3d5:	e8 5a 83 ff ff       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2e3da:	48 83 f8 01          	cmp    rax,0x1
   2e3de:	0f 95 c0             	setne  al
   2e3e1:	84 c0                	test   al,al
   2e3e3:	0f 84 9c 00 00 00    	je     2e485 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x11b9>
   2e3e9:	c7 85 70 f5 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa90],0x0
   2e3f3:	eb 66                	jmp    2e45b <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x118f>
   2e3f5:	8b 85 70 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa90]
   2e3fb:	48 63 d0             	movsxd rdx,eax
   2e3fe:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e405:	48 89 d6             	mov    rsi,rdx
   2e408:	48 89 c7             	mov    rdi,rax
   2e40b:	e8 48 83 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2e410:	48 89 c1             	mov    rcx,rax
   2e413:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e41a:	48 8d 15 da e6 00 00 	lea    rdx,[rip+0xe6da]        # 3cafb <NANO_SEC+0x1833>
   2e421:	48 89 ce             	mov    rsi,rcx
   2e424:	48 89 c7             	mov    rdi,rax
   2e427:	e8 c8 3e 00 00       	call   322f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2e42c:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2e433:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e43a:	48 89 d6             	mov    rsi,rdx
   2e43d:	48 89 c7             	mov    rdi,rax
   2e440:	e8 4b 61 fd ff       	call   4590 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2e445:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e44c:	48 89 c7             	mov    rdi,rax
   2e44f:	e8 0c 5e fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e454:	83 85 70 f5 ff ff 01 	add    DWORD PTR [rbp-0xa90],0x1
   2e45b:	8b 85 70 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa90]
   2e461:	48 63 d8             	movsxd rbx,eax
   2e464:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e46b:	48 89 c7             	mov    rdi,rax
   2e46e:	e8 c1 82 ff ff       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2e473:	48 83 e8 01          	sub    rax,0x1
   2e477:	48 39 c3             	cmp    rbx,rax
   2e47a:	0f 92 c0             	setb   al
   2e47d:	84 c0                	test   al,al
   2e47f:	0f 85 70 ff ff ff    	jne    2e3f5 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1129>
   2e485:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e48c:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2e493:	48 89 d6             	mov    rsi,rdx
   2e496:	48 89 c7             	mov    rdi,rax
   2e499:	e8 38 32 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2e49e:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2e4a5:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e4ac:	48 89 d6             	mov    rsi,rdx
   2e4af:	48 89 c7             	mov    rdi,rax
   2e4b2:	e8 d9 60 fd ff       	call   4590 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2e4b7:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e4be:	48 89 c7             	mov    rdi,rax
   2e4c1:	e8 9a 5d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e4c6:	48 8d 95 f0 fa ff ff 	lea    rdx,[rbp-0x510]
   2e4cd:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e4d4:	48 89 d6             	mov    rsi,rdx
   2e4d7:	48 89 c7             	mov    rdi,rax
   2e4da:	e8 91 5c fd ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2e4df:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2e4e6:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e4ed:	48 89 d6             	mov    rsi,rdx
   2e4f0:	48 89 c7             	mov    rdi,rax
   2e4f3:	e8 b6 1a 00 00       	call   2ffae <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2e4f8:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e4ff:	48 89 c7             	mov    rdi,rax
   2e502:	e8 59 5d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e507:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e50e:	48 89 c7             	mov    rdi,rax
   2e511:	e8 4a 5d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e516:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e51d:	48 89 c7             	mov    rdi,rax
   2e520:	e8 a7 7f ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2e525:	48 8d 95 b0 f6 ff ff 	lea    rdx,[rbp-0x950]
   2e52c:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2e533:	48 89 d6             	mov    rsi,rdx
   2e536:	48 89 c7             	mov    rdi,rax
   2e539:	e8 52 5b fd ff       	call   4090 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>
   2e53e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2e541:	48 83 ea 18          	sub    rdx,0x18
   2e545:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
   2e548:	48 01 d0             	add    rax,rdx
   2e54b:	48 89 c7             	mov    rdi,rax
   2e54e:	e8 1d 60 fd ff       	call   4570 <std::basic_ios<char, std::char_traits<char> >::operator bool() const@plt>
   2e553:	84 c0                	test   al,al
   2e555:	0f 85 0a ef ff ff    	jne    2d465 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x199>
   2e55b:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2e562:	48 89 c7             	mov    rdi,rax
   2e565:	e8 64 4a 00 00       	call   32fce <std::vector<unsigned int, std::allocator<unsigned int> >::empty() const>
   2e56a:	83 f0 01             	xor    eax,0x1
   2e56d:	84 c0                	test   al,al
   2e56f:	74 1d                	je     2e58e <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x12c2>
   2e571:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2e578:	48 89 c7             	mov    rdi,rax
   2e57b:	e8 b2 4a 00 00       	call   33032 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::empty() const>
   2e580:	83 f0 01             	xor    eax,0x1
   2e583:	84 c0                	test   al,al
   2e585:	74 07                	je     2e58e <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x12c2>
   2e587:	b8 01 00 00 00       	mov    eax,0x1
   2e58c:	eb 05                	jmp    2e593 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x12c7>
   2e58e:	b8 00 00 00 00       	mov    eax,0x0
   2e593:	84 c0                	test   al,al
   2e595:	74 7a                	je     2e611 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1345>
   2e597:	48 8d 95 10 f6 ff ff 	lea    rdx,[rbp-0x9f0]
   2e59e:	48 8d 8d f0 f5 ff ff 	lea    rcx,[rbp-0xa10]
   2e5a5:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e5ac:	48 89 ce             	mov    rsi,rcx
   2e5af:	48 89 c7             	mov    rdi,rax
   2e5b2:	e8 7f e2 ff ff       	call   2c836 <objl::Mesh::Mesh(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<unsigned int, std::allocator<unsigned int> >&)>
   2e5b7:	48 8d 95 60 fc ff ff 	lea    rdx,[rbp-0x3a0]
   2e5be:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2e5c5:	48 89 d6             	mov    rsi,rdx
   2e5c8:	48 89 c7             	mov    rdi,rax
   2e5cb:	e8 ae 36 00 00       	call   31c7e <objl::Mesh::operator=(objl::Mesh&&)>
   2e5d0:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e5d7:	48 89 c7             	mov    rdi,rax
   2e5da:	e8 d7 34 00 00       	call   31ab6 <objl::Mesh::~Mesh()>
   2e5df:	48 8d 95 90 f6 ff ff 	lea    rdx,[rbp-0x970]
   2e5e6:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2e5ed:	48 89 d6             	mov    rsi,rdx
   2e5f0:	48 89 c7             	mov    rdi,rax
   2e5f3:	e8 58 5a fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2e5f8:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e5ff:	48 8d 95 10 f8 ff ff 	lea    rdx,[rbp-0x7f0]
   2e606:	48 89 d6             	mov    rsi,rdx
   2e609:	48 89 c7             	mov    rdi,rax
   2e60c:	e8 f5 4a 00 00       	call   33106 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::push_back(objl::Mesh const&)>
   2e611:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2e618:	48 89 c7             	mov    rdi,rax
   2e61b:	e8 80 5a fd ff       	call   40a0 <std::basic_ifstream<char, std::char_traits<char> >::close()@plt>
   2e620:	c7 85 74 f5 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa8c],0x0
   2e62a:	e9 0a 01 00 00       	jmp    2e739 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x146d>
   2e62f:	8b 85 74 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa8c]
   2e635:	48 63 d0             	movsxd rdx,eax
   2e638:	48 8d 85 30 f6 ff ff 	lea    rax,[rbp-0x9d0]
   2e63f:	48 89 d6             	mov    rsi,rdx
   2e642:	48 89 c7             	mov    rdi,rax
   2e645:	e8 0e 81 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2e64a:	48 89 c2             	mov    rdx,rax
   2e64d:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e654:	48 89 d6             	mov    rsi,rdx
   2e657:	48 89 c7             	mov    rdi,rax
   2e65a:	e8 11 5b fd ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2e65f:	c7 85 78 f5 ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xa88],0x0
   2e669:	e9 8b 00 00 00       	jmp    2e6f9 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x142d>
   2e66e:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e675:	48 8d 50 48          	lea    rdx,[rax+0x48]
   2e679:	8b 85 78 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa88]
   2e67f:	48 98                	cdqe   
   2e681:	48 89 c6             	mov    rsi,rax
   2e684:	48 89 d7             	mov    rdi,rdx
   2e687:	e8 a6 4d 00 00       	call   33432 <std::vector<objl::Material, std::allocator<objl::Material> >::operator[](unsigned long)>
   2e68c:	48 89 c2             	mov    rdx,rax
   2e68f:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e696:	48 89 c6             	mov    rsi,rax
   2e699:	48 89 d7             	mov    rdi,rdx
   2e69c:	e8 d7 80 ff ff       	call   26778 <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2e6a1:	84 c0                	test   al,al
   2e6a3:	74 4d                	je     2e6f2 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1426>
   2e6a5:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e6ac:	48 8d 50 48          	lea    rdx,[rax+0x48]
   2e6b0:	8b 85 78 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa88]
   2e6b6:	48 98                	cdqe   
   2e6b8:	48 89 c6             	mov    rsi,rax
   2e6bb:	48 89 d7             	mov    rdi,rdx
   2e6be:	e8 6f 4d 00 00       	call   33432 <std::vector<objl::Material, std::allocator<objl::Material> >::operator[](unsigned long)>
   2e6c3:	48 89 c3             	mov    rbx,rax
   2e6c6:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e6cd:	8b 95 74 f5 ff ff    	mov    edx,DWORD PTR [rbp-0xa8c]
   2e6d3:	48 63 d2             	movsxd rdx,edx
   2e6d6:	48 89 d6             	mov    rsi,rdx
   2e6d9:	48 89 c7             	mov    rdi,rax
   2e6dc:	e8 63 7e ff ff       	call   26544 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::operator[](unsigned long)>
   2e6e1:	48 83 c0 50          	add    rax,0x50
   2e6e5:	48 89 de             	mov    rsi,rbx
   2e6e8:	48 89 c7             	mov    rdi,rax
   2e6eb:	e8 08 36 00 00       	call   31cf8 <objl::Material::operator=(objl::Material const&)>
   2e6f0:	eb 31                	jmp    2e723 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1457>
   2e6f2:	83 85 78 f5 ff ff 01 	add    DWORD PTR [rbp-0xa88],0x1
   2e6f9:	8b 85 78 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa88]
   2e6ff:	48 63 d8             	movsxd rbx,eax
   2e702:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e709:	48 83 c0 48          	add    rax,0x48
   2e70d:	48 89 c7             	mov    rdi,rax
   2e710:	e8 e9 4c 00 00       	call   333fe <std::vector<objl::Material, std::allocator<objl::Material> >::size() const>
   2e715:	48 39 c3             	cmp    rbx,rax
   2e718:	0f 92 c0             	setb   al
   2e71b:	84 c0                	test   al,al
   2e71d:	0f 85 4b ff ff ff    	jne    2e66e <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x13a2>
   2e723:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e72a:	48 89 c7             	mov    rdi,rax
   2e72d:	e8 2e 5b fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e732:	83 85 74 f5 ff ff 01 	add    DWORD PTR [rbp-0xa8c],0x1
   2e739:	8b 85 74 f5 ff ff    	mov    eax,DWORD PTR [rbp-0xa8c]
   2e73f:	48 63 d8             	movsxd rbx,eax
   2e742:	48 8d 85 30 f6 ff ff 	lea    rax,[rbp-0x9d0]
   2e749:	48 89 c7             	mov    rdi,rax
   2e74c:	e8 e3 7f ff ff       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2e751:	48 39 c3             	cmp    rbx,rax
   2e754:	0f 92 c0             	setb   al
   2e757:	84 c0                	test   al,al
   2e759:	0f 85 d0 fe ff ff    	jne    2e62f <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1363>
   2e75f:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e766:	48 89 c7             	mov    rdi,rax
   2e769:	e8 e8 4c 00 00       	call   33456 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::empty() const>
   2e76e:	84 c0                	test   al,al
   2e770:	74 35                	je     2e7a7 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x14db>
   2e772:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e779:	48 83 c0 18          	add    rax,0x18
   2e77d:	48 89 c7             	mov    rdi,rax
   2e780:	e8 ad 48 00 00       	call   33032 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::empty() const>
   2e785:	84 c0                	test   al,al
   2e787:	74 1e                	je     2e7a7 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x14db>
   2e789:	48 8b 85 58 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xaa8]
   2e790:	48 83 c0 30          	add    rax,0x30
   2e794:	48 89 c7             	mov    rdi,rax
   2e797:	e8 32 48 00 00       	call   32fce <std::vector<unsigned int, std::allocator<unsigned int> >::empty() const>
   2e79c:	84 c0                	test   al,al
   2e79e:	74 07                	je     2e7a7 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x14db>
   2e7a0:	b8 01 00 00 00       	mov    eax,0x1
   2e7a5:	eb 05                	jmp    2e7ac <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x14e0>
   2e7a7:	b8 00 00 00 00       	mov    eax,0x0
   2e7ac:	84 c0                	test   al,al
   2e7ae:	74 07                	je     2e7b7 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x14eb>
   2e7b0:	bb 00 00 00 00       	mov    ebx,0x0
   2e7b5:	eb 05                	jmp    2e7bc <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x14f0>
   2e7b7:	bb 01 00 00 00       	mov    ebx,0x1
   2e7bc:	48 8d 85 b0 f6 ff ff 	lea    rax,[rbp-0x950]
   2e7c3:	48 89 c7             	mov    rdi,rax
   2e7c6:	e8 95 5a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e7cb:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2e7d2:	48 89 c7             	mov    rdi,rax
   2e7d5:	e8 dc 32 00 00       	call   31ab6 <objl::Mesh::~Mesh()>
   2e7da:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2e7e1:	48 89 c7             	mov    rdi,rax
   2e7e4:	e8 77 5a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e7e9:	48 8d 85 30 f6 ff ff 	lea    rax,[rbp-0x9d0]
   2e7f0:	48 89 c7             	mov    rdi,rax
   2e7f3:	e8 d4 7c ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2e7f8:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2e7ff:	48 89 c7             	mov    rdi,rax
   2e802:	e8 bd 85 ff ff       	call   26dc4 <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   2e807:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2e80e:	48 89 c7             	mov    rdi,rax
   2e811:	e8 b6 3c 00 00       	call   324cc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2e816:	48 8d 85 d0 f5 ff ff 	lea    rax,[rbp-0xa30]
   2e81d:	48 89 c7             	mov    rdi,rax
   2e820:	e8 8f 46 00 00       	call   32eb4 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::~vector()>
   2e825:	48 8d 85 b0 f5 ff ff 	lea    rax,[rbp-0xa50]
   2e82c:	48 89 c7             	mov    rdi,rax
   2e82f:	e8 56 47 00 00       	call   32f8a <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::~vector()>
   2e834:	48 8d 85 90 f5 ff ff 	lea    rax,[rbp-0xa70]
   2e83b:	48 89 c7             	mov    rdi,rax
   2e83e:	e8 71 46 00 00       	call   32eb4 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::~vector()>
   2e843:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2e84a:	48 89 c7             	mov    rdi,rax
   2e84d:	e8 6e 58 fd ff       	call   40c0 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@plt>
   2e852:	89 d8                	mov    eax,ebx
   2e854:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   2e858:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   2e861:	0f 84 98 03 00 00    	je     2ebff <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1933>
   2e867:	e9 8e 03 00 00       	jmp    2ebfa <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x192e>
   2e86c:	48 89 c3             	mov    rbx,rax
   2e86f:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2e876:	48 89 c7             	mov    rdi,rax
   2e879:	e8 e2 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e87e:	48 89 d8             	mov    rax,rbx
   2e881:	48 89 c7             	mov    rdi,rax
   2e884:	e8 d7 5e fd ff       	call   4760 <_Unwind_Resume@plt>
   2e889:	49 89 c5             	mov    r13,rax
   2e88c:	45 84 e4             	test   r12b,r12b
   2e88f:	74 0f                	je     2e8a0 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x15d4>
   2e891:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e898:	48 89 c7             	mov    rdi,rax
   2e89b:	e8 c0 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e8a0:	4d 89 ec             	mov    r12,r13
   2e8a3:	84 db                	test   bl,bl
   2e8a5:	74 0f                	je     2e8b6 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x15ea>
   2e8a7:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e8ae:	48 89 c7             	mov    rdi,rax
   2e8b1:	e8 aa 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e8b6:	4c 89 e3             	mov    rbx,r12
   2e8b9:	e9 96 02 00 00       	jmp    2eb54 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1888>
   2e8be:	49 89 c5             	mov    r13,rax
   2e8c1:	45 84 e4             	test   r12b,r12b
   2e8c4:	74 0f                	je     2e8d5 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1609>
   2e8c6:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e8cd:	48 89 c7             	mov    rdi,rax
   2e8d0:	e8 8b 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e8d5:	4d 89 ec             	mov    r12,r13
   2e8d8:	84 db                	test   bl,bl
   2e8da:	74 0f                	je     2e8eb <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x161f>
   2e8dc:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e8e3:	48 89 c7             	mov    rdi,rax
   2e8e6:	e8 75 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e8eb:	4c 89 e3             	mov    rbx,r12
   2e8ee:	e9 61 02 00 00       	jmp    2eb54 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1888>
   2e8f3:	49 89 c5             	mov    r13,rax
   2e8f6:	45 84 e4             	test   r12b,r12b
   2e8f9:	74 0f                	je     2e90a <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x163e>
   2e8fb:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e902:	48 89 c7             	mov    rdi,rax
   2e905:	e8 56 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e90a:	4d 89 ec             	mov    r12,r13
   2e90d:	84 db                	test   bl,bl
   2e90f:	74 0f                	je     2e920 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1654>
   2e911:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e918:	48 89 c7             	mov    rdi,rax
   2e91b:	e8 40 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e920:	4c 89 e3             	mov    rbx,r12
   2e923:	e9 2c 02 00 00       	jmp    2eb54 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1888>
   2e928:	48 89 c3             	mov    rbx,rax
   2e92b:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e932:	48 89 c7             	mov    rdi,rax
   2e935:	e8 26 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e93a:	eb 03                	jmp    2e93f <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1673>
   2e93c:	48 89 c3             	mov    rbx,rax
   2e93f:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e946:	48 89 c7             	mov    rdi,rax
   2e949:	e8 12 59 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e94e:	eb 03                	jmp    2e953 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1687>
   2e950:	48 89 c3             	mov    rbx,rax
   2e953:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2e95a:	48 89 c7             	mov    rdi,rax
   2e95d:	e8 2e 5b fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   2e962:	eb 03                	jmp    2e967 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x169b>
   2e964:	48 89 c3             	mov    rbx,rax
   2e967:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e96e:	48 89 c7             	mov    rdi,rax
   2e971:	e8 56 7b ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2e976:	e9 d9 01 00 00       	jmp    2eb54 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1888>
   2e97b:	48 89 c3             	mov    rbx,rax
   2e97e:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e985:	48 89 c7             	mov    rdi,rax
   2e988:	e8 d3 58 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e98d:	eb 03                	jmp    2e992 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x16c6>
   2e98f:	48 89 c3             	mov    rbx,rax
   2e992:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e999:	48 89 c7             	mov    rdi,rax
   2e99c:	e8 bf 58 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e9a1:	eb 03                	jmp    2e9a6 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x16da>
   2e9a3:	48 89 c3             	mov    rbx,rax
   2e9a6:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2e9ad:	48 89 c7             	mov    rdi,rax
   2e9b0:	e8 db 5a fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   2e9b5:	eb 03                	jmp    2e9ba <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x16ee>
   2e9b7:	48 89 c3             	mov    rbx,rax
   2e9ba:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2e9c1:	48 89 c7             	mov    rdi,rax
   2e9c4:	e8 03 7b ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2e9c9:	e9 86 01 00 00       	jmp    2eb54 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1888>
   2e9ce:	48 89 c3             	mov    rbx,rax
   2e9d1:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2e9d8:	48 89 c7             	mov    rdi,rax
   2e9db:	e8 80 58 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e9e0:	eb 03                	jmp    2e9e5 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1719>
   2e9e2:	48 89 c3             	mov    rbx,rax
   2e9e5:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2e9ec:	48 89 c7             	mov    rdi,rax
   2e9ef:	e8 6c 58 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2e9f4:	eb 03                	jmp    2e9f9 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x172d>
   2e9f6:	48 89 c3             	mov    rbx,rax
   2e9f9:	48 8d 85 64 f5 ff ff 	lea    rax,[rbp-0xa9c]
   2ea00:	48 89 c7             	mov    rdi,rax
   2ea03:	e8 88 5a fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   2ea08:	eb 03                	jmp    2ea0d <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1741>
   2ea0a:	48 89 c3             	mov    rbx,rax
   2ea0d:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2ea14:	48 89 c7             	mov    rdi,rax
   2ea17:	e8 b0 7a ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2ea1c:	e9 33 01 00 00       	jmp    2eb54 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1888>
   2ea21:	48 89 c3             	mov    rbx,rax
   2ea24:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2ea2b:	48 89 c7             	mov    rdi,rax
   2ea2e:	e8 2d 58 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ea33:	eb 17                	jmp    2ea4c <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1780>
   2ea35:	48 89 c3             	mov    rbx,rax
   2ea38:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2ea3f:	48 89 c7             	mov    rdi,rax
   2ea42:	e8 7d 83 ff ff       	call   26dc4 <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   2ea47:	eb 03                	jmp    2ea4c <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1780>
   2ea49:	48 89 c3             	mov    rbx,rax
   2ea4c:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2ea53:	48 89 c7             	mov    rdi,rax
   2ea56:	e8 71 3a 00 00       	call   324cc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2ea5b:	e9 f4 00 00 00       	jmp    2eb54 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1888>
   2ea60:	48 89 c3             	mov    rbx,rax
   2ea63:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2ea6a:	48 89 c7             	mov    rdi,rax
   2ea6d:	e8 ee 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ea72:	e9 dd 00 00 00       	jmp    2eb54 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1888>
   2ea77:	48 89 c3             	mov    rbx,rax
   2ea7a:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2ea81:	48 89 c7             	mov    rdi,rax
   2ea84:	e8 d7 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ea89:	eb 03                	jmp    2ea8e <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x17c2>
   2ea8b:	48 89 c3             	mov    rbx,rax
   2ea8e:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2ea95:	48 89 c7             	mov    rdi,rax
   2ea98:	e8 c3 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ea9d:	e9 b2 00 00 00       	jmp    2eb54 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1888>
   2eaa2:	48 89 c3             	mov    rbx,rax
   2eaa5:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2eaac:	48 89 c7             	mov    rdi,rax
   2eaaf:	e8 ac 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2eab4:	eb 03                	jmp    2eab9 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x17ed>
   2eab6:	48 89 c3             	mov    rbx,rax
   2eab9:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2eac0:	48 89 c7             	mov    rdi,rax
   2eac3:	e8 c8 59 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   2eac8:	eb 62                	jmp    2eb2c <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1860>
   2eaca:	48 89 c3             	mov    rbx,rax
   2eacd:	48 8d 85 50 f6 ff ff 	lea    rax,[rbp-0x9b0]
   2ead4:	48 89 c7             	mov    rdi,rax
   2ead7:	e8 b4 59 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   2eadc:	eb 4e                	jmp    2eb2c <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1860>
   2eade:	48 89 c3             	mov    rbx,rax
   2eae1:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2eae8:	48 89 c7             	mov    rdi,rax
   2eaeb:	e8 70 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2eaf0:	eb 2b                	jmp    2eb1d <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1851>
   2eaf2:	48 89 c3             	mov    rbx,rax
   2eaf5:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2eafc:	48 89 c7             	mov    rdi,rax
   2eaff:	e8 5c 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2eb04:	eb 17                	jmp    2eb1d <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1851>
   2eb06:	48 89 c3             	mov    rbx,rax
   2eb09:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2eb10:	48 89 c7             	mov    rdi,rax
   2eb13:	e8 48 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2eb18:	eb 03                	jmp    2eb1d <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1851>
   2eb1a:	48 89 c3             	mov    rbx,rax
   2eb1d:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   2eb24:	48 89 c7             	mov    rdi,rax
   2eb27:	e8 34 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2eb2c:	48 8d 85 70 f6 ff ff 	lea    rax,[rbp-0x990]
   2eb33:	48 89 c7             	mov    rdi,rax
   2eb36:	e8 91 79 ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2eb3b:	eb 17                	jmp    2eb54 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1888>
   2eb3d:	48 89 c3             	mov    rbx,rax
   2eb40:	48 8d 85 60 fc ff ff 	lea    rax,[rbp-0x3a0]
   2eb47:	48 89 c7             	mov    rdi,rax
   2eb4a:	e8 11 57 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2eb4f:	eb 03                	jmp    2eb54 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1888>
   2eb51:	48 89 c3             	mov    rbx,rax
   2eb54:	48 8d 85 b0 f6 ff ff 	lea    rax,[rbp-0x950]
   2eb5b:	48 89 c7             	mov    rdi,rax
   2eb5e:	e8 fd 56 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2eb63:	48 8d 85 10 f8 ff ff 	lea    rax,[rbp-0x7f0]
   2eb6a:	48 89 c7             	mov    rdi,rax
   2eb6d:	e8 44 2f 00 00       	call   31ab6 <objl::Mesh::~Mesh()>
   2eb72:	48 8d 85 90 f6 ff ff 	lea    rax,[rbp-0x970]
   2eb79:	48 89 c7             	mov    rdi,rax
   2eb7c:	e8 df 56 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2eb81:	48 8d 85 30 f6 ff ff 	lea    rax,[rbp-0x9d0]
   2eb88:	48 89 c7             	mov    rdi,rax
   2eb8b:	e8 3c 79 ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2eb90:	48 8d 85 10 f6 ff ff 	lea    rax,[rbp-0x9f0]
   2eb97:	48 89 c7             	mov    rdi,rax
   2eb9a:	e8 25 82 ff ff       	call   26dc4 <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   2eb9f:	48 8d 85 f0 f5 ff ff 	lea    rax,[rbp-0xa10]
   2eba6:	48 89 c7             	mov    rdi,rax
   2eba9:	e8 1e 39 00 00       	call   324cc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2ebae:	48 8d 85 d0 f5 ff ff 	lea    rax,[rbp-0xa30]
   2ebb5:	48 89 c7             	mov    rdi,rax
   2ebb8:	e8 f7 42 00 00       	call   32eb4 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::~vector()>
   2ebbd:	48 8d 85 b0 f5 ff ff 	lea    rax,[rbp-0xa50]
   2ebc4:	48 89 c7             	mov    rdi,rax
   2ebc7:	e8 be 43 00 00       	call   32f8a <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::~vector()>
   2ebcc:	48 8d 85 90 f5 ff ff 	lea    rax,[rbp-0xa70]
   2ebd3:	48 89 c7             	mov    rdi,rax
   2ebd6:	e8 d9 42 00 00       	call   32eb4 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::~vector()>
   2ebdb:	eb 03                	jmp    2ebe0 <objl::Loader::LoadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1914>
   2ebdd:	48 89 c3             	mov    rbx,rax
   2ebe0:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   2ebe7:	48 89 c7             	mov    rdi,rax
   2ebea:	e8 d1 54 fd ff       	call   40c0 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@plt>
   2ebef:	48 89 d8             	mov    rax,rbx
   2ebf2:	48 89 c7             	mov    rdi,rax
   2ebf5:	e8 66 5b fd ff       	call   4760 <_Unwind_Resume@plt>
   2ebfa:	e8 e1 58 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2ebff:	48 81 c4 98 0a 00 00 	add    rsp,0xa98
   2ec06:	5b                   	pop    rbx
   2ec07:	41 5c                	pop    r12
   2ec09:	41 5d                	pop    r13
   2ec0b:	5d                   	pop    rbp
   2ec0c:	c3                   	ret    
   2ec0d:	90                   	nop

000000000002ec0e <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>:
   2ec0e:	55                   	push   rbp
   2ec0f:	48 89 e5             	mov    rbp,rsp
   2ec12:	53                   	push   rbx
   2ec13:	48 81 ec 28 01 00 00 	sub    rsp,0x128
   2ec1a:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
   2ec21:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
   2ec28:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
   2ec2f:	48 89 8d e0 fe ff ff 	mov    QWORD PTR [rbp-0x120],rcx
   2ec36:	4c 89 85 d8 fe ff ff 	mov    QWORD PTR [rbp-0x128],r8
   2ec3d:	4c 89 8d d0 fe ff ff 	mov    QWORD PTR [rbp-0x130],r9
   2ec44:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2ec4d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2ec51:	31 c0                	xor    eax,eax
   2ec53:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
   2ec5a:	48 89 c7             	mov    rdi,rax
   2ec5d:	e8 c4 69 ff ff       	call   25626 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   2ec62:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ec69:	48 89 c7             	mov    rdi,rax
   2ec6c:	e8 b5 69 ff ff       	call   25626 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   2ec71:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2ec75:	48 89 c7             	mov    rdi,rax
   2ec78:	e8 e1 31 00 00       	call   31e5e <objl::Vertex::Vertex()>
   2ec7d:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2ec84:	48 89 c7             	mov    rdi,rax
   2ec87:	e8 e4 5a fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   2ec8c:	48 8d 95 34 ff ff ff 	lea    rdx,[rbp-0xcc]
   2ec93:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2ec97:	48 8d 0d 43 de 00 00 	lea    rcx,[rip+0xde43]        # 3cae1 <NANO_SEC+0x1819>
   2ec9e:	48 89 ce             	mov    rsi,rcx
   2eca1:	48 89 c7             	mov    rdi,rax
   2eca4:	e8 b1 6d ff ff       	call   25a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   2eca9:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2ecad:	48 8b 95 d0 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x130]
   2ecb4:	48 89 d6             	mov    rsi,rdx
   2ecb7:	48 89 c7             	mov    rdi,rax
   2ecba:	e8 17 2a 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   2ecbf:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2ecc3:	48 8d 8d 40 ff ff ff 	lea    rcx,[rbp-0xc0]
   2ecca:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2ecce:	48 89 ce             	mov    rsi,rcx
   2ecd1:	48 89 c7             	mov    rdi,rax
   2ecd4:	e8 10 27 00 00       	call   313e9 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2ecd9:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2ecdd:	48 89 c7             	mov    rdi,rax
   2ece0:	e8 7b 55 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ece5:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2ece9:	48 89 c7             	mov    rdi,rax
   2ecec:	e8 6f 55 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ecf1:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2ecf8:	48 89 c7             	mov    rdi,rax
   2ecfb:	e8 90 57 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   2ed00:	c6 85 0f ff ff ff 00 	mov    BYTE PTR [rbp-0xf1],0x0
   2ed07:	c7 85 10 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf0],0x0
   2ed11:	e9 e2 03 00 00       	jmp    2f0f8 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4ea>
   2ed16:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2ed1d:	48 89 c7             	mov    rdi,rax
   2ed20:	e8 4b 5a fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   2ed25:	48 8d 95 34 ff ff ff 	lea    rdx,[rbp-0xcc]
   2ed2c:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2ed30:	48 8d 0d c4 dd 00 00 	lea    rcx,[rip+0xddc4]        # 3cafb <NANO_SEC+0x1833>
   2ed37:	48 89 ce             	mov    rsi,rcx
   2ed3a:	48 89 c7             	mov    rdi,rax
   2ed3d:	e8 18 6d ff ff       	call   25a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   2ed42:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
   2ed48:	48 63 d0             	movsxd rdx,eax
   2ed4b:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
   2ed52:	48 89 d6             	mov    rsi,rdx
   2ed55:	48 89 c7             	mov    rdi,rax
   2ed58:	e8 fb 79 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2ed5d:	48 89 c1             	mov    rcx,rax
   2ed60:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2ed64:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ed6b:	48 89 c6             	mov    rsi,rax
   2ed6e:	48 89 cf             	mov    rdi,rcx
   2ed71:	e8 73 26 00 00       	call   313e9 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   2ed76:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2ed7a:	48 89 c7             	mov    rdi,rax
   2ed7d:	e8 de 54 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2ed82:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2ed89:	48 89 c7             	mov    rdi,rax
   2ed8c:	e8 ff 56 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   2ed91:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ed98:	48 89 c7             	mov    rdi,rax
   2ed9b:	e8 94 79 ff ff       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2eda0:	48 83 f8 01          	cmp    rax,0x1
   2eda4:	0f 94 c0             	sete   al
   2eda7:	84 c0                	test   al,al
   2eda9:	74 0a                	je     2edb5 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1a7>
   2edab:	c7 85 14 ff ff ff 01 00 00 00 	mov    DWORD PTR [rbp-0xec],0x1
   2edb5:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2edbc:	48 89 c7             	mov    rdi,rax
   2edbf:	e8 70 79 ff ff       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2edc4:	48 83 f8 02          	cmp    rax,0x2
   2edc8:	0f 94 c0             	sete   al
   2edcb:	84 c0                	test   al,al
   2edcd:	74 0a                	je     2edd9 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1cb>
   2edcf:	c7 85 14 ff ff ff 02 00 00 00 	mov    DWORD PTR [rbp-0xec],0x2
   2edd9:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ede0:	48 89 c7             	mov    rdi,rax
   2ede3:	e8 4c 79 ff ff       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2ede8:	48 83 f8 03          	cmp    rax,0x3
   2edec:	0f 94 c0             	sete   al
   2edef:	84 c0                	test   al,al
   2edf1:	74 43                	je     2ee36 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x228>
   2edf3:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2edfa:	be 01 00 00 00       	mov    esi,0x1
   2edff:	48 89 c7             	mov    rdi,rax
   2ee02:	e8 51 79 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2ee07:	48 89 c2             	mov    rdx,rax
   2ee0a:	48 8d 05 b9 dc 00 00 	lea    rax,[rip+0xdcb9]        # 3caca <NANO_SEC+0x1802>
   2ee11:	48 89 c6             	mov    rsi,rax
   2ee14:	48 89 d7             	mov    rdi,rdx
   2ee17:	e8 81 3f 00 00       	call   32d9d <bool std::operator!=<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   2ee1c:	84 c0                	test   al,al
   2ee1e:	74 0c                	je     2ee2c <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x21e>
   2ee20:	c7 85 14 ff ff ff 04 00 00 00 	mov    DWORD PTR [rbp-0xec],0x4
   2ee2a:	eb 0a                	jmp    2ee36 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x228>
   2ee2c:	c7 85 14 ff ff ff 03 00 00 00 	mov    DWORD PTR [rbp-0xec],0x3
   2ee36:	83 bd 14 ff ff ff 04 	cmp    DWORD PTR [rbp-0xec],0x4
   2ee3d:	0f 84 f9 01 00 00    	je     2f03c <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x42e>
   2ee43:	83 bd 14 ff ff ff 04 	cmp    DWORD PTR [rbp-0xec],0x4
   2ee4a:	0f 8f a0 02 00 00    	jg     2f0f0 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e2>
   2ee50:	83 bd 14 ff ff ff 03 	cmp    DWORD PTR [rbp-0xec],0x3
   2ee57:	0f 84 30 01 00 00    	je     2ef8d <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x37f>
   2ee5d:	83 bd 14 ff ff ff 03 	cmp    DWORD PTR [rbp-0xec],0x3
   2ee64:	0f 8f 86 02 00 00    	jg     2f0f0 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e2>
   2ee6a:	83 bd 14 ff ff ff 01 	cmp    DWORD PTR [rbp-0xec],0x1
   2ee71:	74 12                	je     2ee85 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x277>
   2ee73:	83 bd 14 ff ff ff 02 	cmp    DWORD PTR [rbp-0xec],0x2
   2ee7a:	0f 84 85 00 00 00    	je     2ef05 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2f7>
   2ee80:	e9 6b 02 00 00       	jmp    2f0f0 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e2>
   2ee85:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ee8c:	be 00 00 00 00       	mov    esi,0x0
   2ee91:	48 89 c7             	mov    rdi,rax
   2ee94:	e8 bf 78 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2ee99:	48 89 c2             	mov    rdx,rax
   2ee9c:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2eea3:	48 89 d6             	mov    rsi,rdx
   2eea6:	48 89 c7             	mov    rdi,rax
   2eea9:	e8 0c 46 00 00       	call   334ba <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2eeae:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2eeb1:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
   2eeb5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2eeb8:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   2eebb:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2eec2:	66 0f ef c9          	pxor   xmm1,xmm1
   2eec6:	8b 15 d8 dc 00 00    	mov    edx,DWORD PTR [rip+0xdcd8]        # 3cba4 <NANO_SEC+0x18dc>
   2eecc:	66 0f 6e c2          	movd   xmm0,edx
   2eed0:	48 89 c7             	mov    rdi,rax
   2eed3:	e8 b2 d1 ff ff       	call   2c08a <objl::Vector2::Vector2(float, float)>
   2eed8:	48 8b 85 34 ff ff ff 	mov    rax,QWORD PTR [rbp-0xcc]
   2eedf:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   2eee3:	c6 85 0f ff ff ff 01 	mov    BYTE PTR [rbp-0xf1],0x1
   2eeea:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2eeee:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2eef5:	48 89 d6             	mov    rsi,rdx
   2eef8:	48 89 c7             	mov    rdi,rax
   2eefb:	e8 7c 43 00 00       	call   3327c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)>
   2ef00:	e9 ec 01 00 00       	jmp    2f0f1 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e3>
   2ef05:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ef0c:	be 00 00 00 00       	mov    esi,0x0
   2ef11:	48 89 c7             	mov    rdi,rax
   2ef14:	e8 3f 78 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2ef19:	48 89 c2             	mov    rdx,rax
   2ef1c:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2ef23:	48 89 d6             	mov    rsi,rdx
   2ef26:	48 89 c7             	mov    rdi,rax
   2ef29:	e8 8c 45 00 00       	call   334ba <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2ef2e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2ef31:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
   2ef35:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2ef38:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   2ef3b:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ef42:	be 01 00 00 00       	mov    esi,0x1
   2ef47:	48 89 c7             	mov    rdi,rax
   2ef4a:	e8 09 78 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2ef4f:	48 89 c2             	mov    rdx,rax
   2ef52:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
   2ef59:	48 89 d6             	mov    rsi,rdx
   2ef5c:	48 89 c7             	mov    rdi,rax
   2ef5f:	e8 b1 45 00 00       	call   33515 <objl::Vector2 const& objl::algorithm::getElement<objl::Vector2>(std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2ef64:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2ef67:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   2ef6b:	c6 85 0f ff ff ff 01 	mov    BYTE PTR [rbp-0xf1],0x1
   2ef72:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2ef76:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2ef7d:	48 89 d6             	mov    rsi,rdx
   2ef80:	48 89 c7             	mov    rdi,rax
   2ef83:	e8 f4 42 00 00       	call   3327c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)>
   2ef88:	e9 64 01 00 00       	jmp    2f0f1 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e3>
   2ef8d:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ef94:	be 00 00 00 00       	mov    esi,0x0
   2ef99:	48 89 c7             	mov    rdi,rax
   2ef9c:	e8 b7 77 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2efa1:	48 89 c2             	mov    rdx,rax
   2efa4:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2efab:	48 89 d6             	mov    rsi,rdx
   2efae:	48 89 c7             	mov    rdi,rax
   2efb1:	e8 04 45 00 00       	call   334ba <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2efb6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2efb9:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
   2efbd:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2efc0:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   2efc3:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2efca:	66 0f ef c9          	pxor   xmm1,xmm1
   2efce:	8b 15 d0 db 00 00    	mov    edx,DWORD PTR [rip+0xdbd0]        # 3cba4 <NANO_SEC+0x18dc>
   2efd4:	66 0f 6e c2          	movd   xmm0,edx
   2efd8:	48 89 c7             	mov    rdi,rax
   2efdb:	e8 aa d0 ff ff       	call   2c08a <objl::Vector2::Vector2(float, float)>
   2efe0:	48 8b 85 34 ff ff ff 	mov    rax,QWORD PTR [rbp-0xcc]
   2efe7:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   2efeb:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2eff2:	be 02 00 00 00       	mov    esi,0x2
   2eff7:	48 89 c7             	mov    rdi,rax
   2effa:	e8 59 77 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2efff:	48 89 c2             	mov    rdx,rax
   2f002:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   2f009:	48 89 d6             	mov    rsi,rdx
   2f00c:	48 89 c7             	mov    rdi,rax
   2f00f:	e8 a6 44 00 00       	call   334ba <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2f014:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2f017:	48 89 55 8c          	mov    QWORD PTR [rbp-0x74],rdx
   2f01b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2f01e:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
   2f021:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2f025:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f02c:	48 89 d6             	mov    rsi,rdx
   2f02f:	48 89 c7             	mov    rdi,rax
   2f032:	e8 45 42 00 00       	call   3327c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)>
   2f037:	e9 b5 00 00 00       	jmp    2f0f1 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e3>
   2f03c:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f043:	be 00 00 00 00       	mov    esi,0x0
   2f048:	48 89 c7             	mov    rdi,rax
   2f04b:	e8 08 77 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2f050:	48 89 c2             	mov    rdx,rax
   2f053:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f05a:	48 89 d6             	mov    rsi,rdx
   2f05d:	48 89 c7             	mov    rdi,rax
   2f060:	e8 55 44 00 00       	call   334ba <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2f065:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2f068:	48 89 55 80          	mov    QWORD PTR [rbp-0x80],rdx
   2f06c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2f06f:	89 45 88             	mov    DWORD PTR [rbp-0x78],eax
   2f072:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f079:	be 01 00 00 00       	mov    esi,0x1
   2f07e:	48 89 c7             	mov    rdi,rax
   2f081:	e8 d2 76 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2f086:	48 89 c2             	mov    rdx,rax
   2f089:	48 8b 85 e0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x120]
   2f090:	48 89 d6             	mov    rsi,rdx
   2f093:	48 89 c7             	mov    rdi,rax
   2f096:	e8 7a 44 00 00       	call   33515 <objl::Vector2 const& objl::algorithm::getElement<objl::Vector2>(std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2f09b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   2f09e:	48 89 45 98          	mov    QWORD PTR [rbp-0x68],rax
   2f0a2:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f0a9:	be 02 00 00 00       	mov    esi,0x2
   2f0ae:	48 89 c7             	mov    rdi,rax
   2f0b1:	e8 a2 76 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   2f0b6:	48 89 c2             	mov    rdx,rax
   2f0b9:	48 8b 85 d8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x128]
   2f0c0:	48 89 d6             	mov    rsi,rdx
   2f0c3:	48 89 c7             	mov    rdi,rax
   2f0c6:	e8 ef 43 00 00       	call   334ba <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   2f0cb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2f0ce:	48 89 55 8c          	mov    QWORD PTR [rbp-0x74],rdx
   2f0d2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2f0d5:	89 45 94             	mov    DWORD PTR [rbp-0x6c],eax
   2f0d8:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   2f0dc:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f0e3:	48 89 d6             	mov    rsi,rdx
   2f0e6:	48 89 c7             	mov    rdi,rax
   2f0e9:	e8 8e 41 00 00       	call   3327c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)>
   2f0ee:	eb 01                	jmp    2f0f1 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x4e3>
   2f0f0:	90                   	nop
   2f0f1:	83 85 10 ff ff ff 01 	add    DWORD PTR [rbp-0xf0],0x1
   2f0f8:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
   2f0ff:	48 89 c7             	mov    rdi,rax
   2f102:	e8 2d 76 ff ff       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   2f107:	39 85 10 ff ff ff    	cmp    DWORD PTR [rbp-0xf0],eax
   2f10d:	0f 9c c0             	setl   al
   2f110:	84 c0                	test   al,al
   2f112:	0f 85 fe fb ff ff    	jne    2ed16 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x108>
   2f118:	80 bd 0f ff ff ff 00 	cmp    BYTE PTR [rbp-0xf1],0x0
   2f11f:	0f 84 3f 01 00 00    	je     2f264 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x656>
   2f125:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f12c:	be 01 00 00 00       	mov    esi,0x1
   2f131:	48 89 c7             	mov    rdi,rax
   2f134:	e8 9b 74 ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f139:	48 89 c3             	mov    rbx,rax
   2f13c:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f143:	be 00 00 00 00       	mov    esi,0x0
   2f148:	48 89 c7             	mov    rdi,rax
   2f14b:	e8 84 74 ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f150:	48 89 de             	mov    rsi,rbx
   2f153:	48 89 c7             	mov    rdi,rax
   2f156:	e8 91 d3 ff ff       	call   2c4ec <objl::Vector3::operator-(objl::Vector3 const&) const>
   2f15b:	66 48 0f 7e c0       	movq   rax,xmm0
   2f160:	0f 28 c1             	movaps xmm0,xmm1
   2f163:	48 89 85 1c ff ff ff 	mov    QWORD PTR [rbp-0xe4],rax
   2f16a:	f3 0f 11 85 24 ff ff ff 	movss  DWORD PTR [rbp-0xdc],xmm0
   2f172:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f179:	be 01 00 00 00       	mov    esi,0x1
   2f17e:	48 89 c7             	mov    rdi,rax
   2f181:	e8 4e 74 ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f186:	48 89 c3             	mov    rbx,rax
   2f189:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f190:	be 02 00 00 00       	mov    esi,0x2
   2f195:	48 89 c7             	mov    rdi,rax
   2f198:	e8 37 74 ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f19d:	48 89 de             	mov    rsi,rbx
   2f1a0:	48 89 c7             	mov    rdi,rax
   2f1a3:	e8 44 d3 ff ff       	call   2c4ec <objl::Vector3::operator-(objl::Vector3 const&) const>
   2f1a8:	66 48 0f 7e c0       	movq   rax,xmm0
   2f1ad:	0f 28 c1             	movaps xmm0,xmm1
   2f1b0:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
   2f1b7:	f3 0f 11 85 30 ff ff ff 	movss  DWORD PTR [rbp-0xd0],xmm0
   2f1bf:	48 8b 95 28 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xd8]
   2f1c6:	f3 0f 10 85 30 ff ff ff 	movss  xmm0,DWORD PTR [rbp-0xd0]
   2f1ce:	48 8b 85 1c ff ff ff 	mov    rax,QWORD PTR [rbp-0xe4]
   2f1d5:	f3 0f 10 8d 24 ff ff ff 	movss  xmm1,DWORD PTR [rbp-0xdc]
   2f1dd:	66 48 0f 6e d2       	movq   xmm2,rdx
   2f1e2:	0f 28 d8             	movaps xmm3,xmm0
   2f1e5:	66 48 0f 6e c0       	movq   xmm0,rax
   2f1ea:	e8 18 d7 ff ff       	call   2c907 <objl::math::CrossV3(objl::Vector3, objl::Vector3)>
   2f1ef:	66 48 0f 7e c0       	movq   rax,xmm0
   2f1f4:	0f 28 c1             	movaps xmm0,xmm1
   2f1f7:	48 89 85 34 ff ff ff 	mov    QWORD PTR [rbp-0xcc],rax
   2f1fe:	f3 0f 11 85 3c ff ff ff 	movss  DWORD PTR [rbp-0xc4],xmm0
   2f206:	c7 85 18 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe8],0x0
   2f210:	eb 36                	jmp    2f248 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x63a>
   2f212:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   2f218:	48 63 d0             	movsxd rdx,eax
   2f21b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f222:	48 89 d6             	mov    rsi,rdx
   2f225:	48 89 c7             	mov    rdi,rax
   2f228:	e8 a7 73 ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f22d:	48 8b 95 34 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xcc]
   2f234:	48 89 50 0c          	mov    QWORD PTR [rax+0xc],rdx
   2f238:	8b 95 3c ff ff ff    	mov    edx,DWORD PTR [rbp-0xc4]
   2f23e:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
   2f241:	83 85 18 ff ff ff 01 	add    DWORD PTR [rbp-0xe8],0x1
   2f248:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f24f:	48 89 c7             	mov    rdi,rax
   2f252:	e8 11 73 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f257:	39 85 18 ff ff ff    	cmp    DWORD PTR [rbp-0xe8],eax
   2f25d:	0f 9c c0             	setl   al
   2f260:	84 c0                	test   al,al
   2f262:	75 ae                	jne    2f212 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x604>
   2f264:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f26b:	48 89 c7             	mov    rdi,rax
   2f26e:	e8 59 72 ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2f273:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
   2f27a:	48 89 c7             	mov    rdi,rax
   2f27d:	e8 4a 72 ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2f282:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2f286:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2f28f:	0f 84 91 00 00 00    	je     2f326 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x718>
   2f295:	e9 87 00 00 00       	jmp    2f321 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x713>
   2f29a:	48 89 c3             	mov    rbx,rax
   2f29d:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2f2a1:	48 89 c7             	mov    rdi,rax
   2f2a4:	e8 b7 4f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2f2a9:	eb 03                	jmp    2f2ae <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x6a0>
   2f2ab:	48 89 c3             	mov    rbx,rax
   2f2ae:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2f2b2:	48 89 c7             	mov    rdi,rax
   2f2b5:	e8 a6 4f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2f2ba:	eb 03                	jmp    2f2bf <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x6b1>
   2f2bc:	48 89 c3             	mov    rbx,rax
   2f2bf:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2f2c6:	48 89 c7             	mov    rdi,rax
   2f2c9:	e8 c2 51 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   2f2ce:	eb 28                	jmp    2f2f8 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x6ea>
   2f2d0:	48 89 c3             	mov    rbx,rax
   2f2d3:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2f2d7:	48 89 c7             	mov    rdi,rax
   2f2da:	e8 81 4f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   2f2df:	eb 03                	jmp    2f2e4 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x6d6>
   2f2e1:	48 89 c3             	mov    rbx,rax
   2f2e4:	48 8d 85 34 ff ff ff 	lea    rax,[rbp-0xcc]
   2f2eb:	48 89 c7             	mov    rdi,rax
   2f2ee:	e8 9d 51 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   2f2f3:	eb 03                	jmp    2f2f8 <objl::Loader::GenVerticesFromRawOBJ(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x6ea>
   2f2f5:	48 89 c3             	mov    rbx,rax
   2f2f8:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f2ff:	48 89 c7             	mov    rdi,rax
   2f302:	e8 c5 71 ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2f307:	48 8d 85 40 ff ff ff 	lea    rax,[rbp-0xc0]
   2f30e:	48 89 c7             	mov    rdi,rax
   2f311:	e8 b6 71 ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   2f316:	48 89 d8             	mov    rax,rbx
   2f319:	48 89 c7             	mov    rdi,rax
   2f31c:	e8 3f 54 fd ff       	call   4760 <_Unwind_Resume@plt>
   2f321:	e8 ba 51 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2f326:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2f32a:	c9                   	leave  
   2f32b:	c3                   	ret    

000000000002f32c <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)>:
   2f32c:	55                   	push   rbp
   2f32d:	48 89 e5             	mov    rbp,rsp
   2f330:	53                   	push   rbx
   2f331:	48 81 ec 18 01 00 00 	sub    rsp,0x118
   2f338:	48 89 bd f8 fe ff ff 	mov    QWORD PTR [rbp-0x108],rdi
   2f33f:	48 89 b5 f0 fe ff ff 	mov    QWORD PTR [rbp-0x110],rsi
   2f346:	48 89 95 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdx
   2f34d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2f356:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   2f35a:	31 c0                	xor    eax,eax
   2f35c:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f363:	48 89 c7             	mov    rdi,rax
   2f366:	e8 fd 71 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f36b:	48 83 f8 02          	cmp    rax,0x2
   2f36f:	0f 96 c0             	setbe  al
   2f372:	84 c0                	test   al,al
   2f374:	0f 85 19 0c 00 00    	jne    2ff93 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc67>
   2f37a:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f381:	48 89 c7             	mov    rdi,rax
   2f384:	e8 df 71 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f389:	48 83 f8 03          	cmp    rax,0x3
   2f38d:	0f 94 c0             	sete   al
   2f390:	84 c0                	test   al,al
   2f392:	74 5c                	je     2f3f0 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc4>
   2f394:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [rbp-0x40],0x0
   2f39b:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2f39f:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f3a6:	48 89 d6             	mov    rsi,rdx
   2f3a9:	48 89 c7             	mov    rdi,rax
   2f3ac:	e8 51 73 ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f3b1:	c7 45 c0 01 00 00 00 	mov    DWORD PTR [rbp-0x40],0x1
   2f3b8:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2f3bc:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f3c3:	48 89 d6             	mov    rsi,rdx
   2f3c6:	48 89 c7             	mov    rdi,rax
   2f3c9:	e8 34 73 ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f3ce:	c7 45 c0 02 00 00 00 	mov    DWORD PTR [rbp-0x40],0x2
   2f3d5:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   2f3d9:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f3e0:	48 89 d6             	mov    rsi,rdx
   2f3e3:	48 89 c7             	mov    rdi,rax
   2f3e6:	e8 17 73 ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f3eb:	e9 a4 0b 00 00       	jmp    2ff94 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc68>
   2f3f0:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
   2f3f7:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f3fe:	48 89 d6             	mov    rsi,rdx
   2f401:	48 89 c7             	mov    rdi,rax
   2f404:	e8 67 41 00 00       	call   33570 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)>
   2f409:	c7 85 04 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xfc],0x0
   2f413:	e9 f2 0a 00 00       	jmp    2ff0a <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbde>
   2f418:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2f41c:	48 89 c7             	mov    rdi,rax
   2f41f:	e8 3a 2a 00 00       	call   31e5e <objl::Vertex::Vertex()>
   2f424:	83 bd 04 ff ff ff 00 	cmp    DWORD PTR [rbp-0xfc],0x0
   2f42b:	75 49                	jne    2f476 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x14a>
   2f42d:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f434:	48 89 c7             	mov    rdi,rax
   2f437:	e8 2c 71 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f43c:	48 8d 50 ff          	lea    rdx,[rax-0x1]
   2f440:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f447:	48 89 d6             	mov    rsi,rdx
   2f44a:	48 89 c7             	mov    rdi,rax
   2f44d:	e8 82 71 ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f452:	48 89 c1             	mov    rcx,rax
   2f455:	48 8b 01             	mov    rax,QWORD PTR [rcx]
   2f458:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
   2f45c:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   2f460:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
   2f464:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
   2f468:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
   2f46c:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   2f470:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   2f474:	eb 40                	jmp    2f4b6 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x18a>
   2f476:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
   2f47c:	83 e8 01             	sub    eax,0x1
   2f47f:	48 63 d0             	movsxd rdx,eax
   2f482:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f489:	48 89 d6             	mov    rsi,rdx
   2f48c:	48 89 c7             	mov    rdi,rax
   2f48f:	e8 40 71 ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f494:	48 89 c1             	mov    rcx,rax
   2f497:	48 8b 01             	mov    rax,QWORD PTR [rcx]
   2f49a:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
   2f49e:	48 89 45 80          	mov    QWORD PTR [rbp-0x80],rax
   2f4a2:	48 89 55 88          	mov    QWORD PTR [rbp-0x78],rdx
   2f4a6:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
   2f4aa:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
   2f4ae:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
   2f4b2:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   2f4b6:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
   2f4bc:	48 63 d0             	movsxd rdx,eax
   2f4bf:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f4c6:	48 89 d6             	mov    rsi,rdx
   2f4c9:	48 89 c7             	mov    rdi,rax
   2f4cc:	e8 03 71 ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f4d1:	48 89 c1             	mov    rcx,rax
   2f4d4:	48 8b 01             	mov    rax,QWORD PTR [rcx]
   2f4d7:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
   2f4db:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
   2f4df:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
   2f4e3:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
   2f4e7:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
   2f4eb:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   2f4ef:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   2f4f3:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2f4f7:	48 89 c7             	mov    rdi,rax
   2f4fa:	e8 5f 29 00 00       	call   31e5e <objl::Vertex::Vertex()>
   2f4ff:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
   2f505:	48 63 d8             	movsxd rbx,eax
   2f508:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f50f:	48 89 c7             	mov    rdi,rax
   2f512:	e8 51 70 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f517:	48 83 e8 01          	sub    rax,0x1
   2f51b:	48 39 c3             	cmp    rbx,rax
   2f51e:	0f 94 c0             	sete   al
   2f521:	84 c0                	test   al,al
   2f523:	74 38                	je     2f55d <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x231>
   2f525:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f52c:	be 00 00 00 00       	mov    esi,0x0
   2f531:	48 89 c7             	mov    rdi,rax
   2f534:	e8 9b 70 ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f539:	48 89 c1             	mov    rcx,rax
   2f53c:	48 8b 01             	mov    rax,QWORD PTR [rcx]
   2f53f:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
   2f543:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   2f547:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   2f54b:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
   2f54f:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
   2f553:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   2f557:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2f55b:	eb 40                	jmp    2f59d <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x271>
   2f55d:	8b 85 04 ff ff ff    	mov    eax,DWORD PTR [rbp-0xfc]
   2f563:	83 c0 01             	add    eax,0x1
   2f566:	48 63 d0             	movsxd rdx,eax
   2f569:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f570:	48 89 d6             	mov    rsi,rdx
   2f573:	48 89 c7             	mov    rdi,rax
   2f576:	e8 59 70 ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f57b:	48 89 c1             	mov    rcx,rax
   2f57e:	48 8b 01             	mov    rax,QWORD PTR [rcx]
   2f581:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
   2f585:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   2f589:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   2f58d:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
   2f591:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
   2f595:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   2f599:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   2f59d:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f5a4:	48 89 c7             	mov    rdi,rax
   2f5a7:	e8 bc 6f ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f5ac:	48 83 f8 03          	cmp    rax,0x3
   2f5b0:	0f 94 c0             	sete   al
   2f5b3:	84 c0                	test   al,al
   2f5b5:	0f 84 4c 01 00 00    	je     2f707 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x3db>
   2f5bb:	c7 85 08 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf8],0x0
   2f5c5:	e9 09 01 00 00       	jmp    2f6d3 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x3a7>
   2f5ca:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2f5d0:	48 63 d0             	movsxd rdx,eax
   2f5d3:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f5da:	48 89 d6             	mov    rsi,rdx
   2f5dd:	48 89 c7             	mov    rdi,rax
   2f5e0:	e8 9f 40 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f5e5:	48 89 c2             	mov    rdx,rax
   2f5e8:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2f5ec:	48 89 c6             	mov    rsi,rax
   2f5ef:	48 89 d7             	mov    rdi,rdx
   2f5f2:	e8 69 cd ff ff       	call   2c360 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f5f7:	84 c0                	test   al,al
   2f5f9:	74 25                	je     2f620 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x2f4>
   2f5fb:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2f601:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2f607:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2f60e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f615:	48 89 d6             	mov    rsi,rdx
   2f618:	48 89 c7             	mov    rdi,rax
   2f61b:	e8 e2 70 ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f620:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2f626:	48 63 d0             	movsxd rdx,eax
   2f629:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f630:	48 89 d6             	mov    rsi,rdx
   2f633:	48 89 c7             	mov    rdi,rax
   2f636:	e8 49 40 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f63b:	48 89 c2             	mov    rdx,rax
   2f63e:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2f642:	48 89 c6             	mov    rsi,rax
   2f645:	48 89 d7             	mov    rdi,rdx
   2f648:	e8 13 cd ff ff       	call   2c360 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f64d:	84 c0                	test   al,al
   2f64f:	74 25                	je     2f676 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x34a>
   2f651:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2f657:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2f65d:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2f664:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f66b:	48 89 d6             	mov    rsi,rdx
   2f66e:	48 89 c7             	mov    rdi,rax
   2f671:	e8 8c 70 ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f676:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2f67c:	48 63 d0             	movsxd rdx,eax
   2f67f:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f686:	48 89 d6             	mov    rsi,rdx
   2f689:	48 89 c7             	mov    rdi,rax
   2f68c:	e8 f3 3f 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f691:	48 89 c2             	mov    rdx,rax
   2f694:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2f698:	48 89 c6             	mov    rsi,rax
   2f69b:	48 89 d7             	mov    rdi,rdx
   2f69e:	e8 bd cc ff ff       	call   2c360 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f6a3:	84 c0                	test   al,al
   2f6a5:	74 25                	je     2f6cc <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x3a0>
   2f6a7:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf8]
   2f6ad:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2f6b3:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2f6ba:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f6c1:	48 89 d6             	mov    rsi,rdx
   2f6c4:	48 89 c7             	mov    rdi,rax
   2f6c7:	e8 36 70 ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f6cc:	83 85 08 ff ff ff 01 	add    DWORD PTR [rbp-0xf8],0x1
   2f6d3:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f6da:	48 89 c7             	mov    rdi,rax
   2f6dd:	e8 86 6e ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f6e2:	39 85 08 ff ff ff    	cmp    DWORD PTR [rbp-0xf8],eax
   2f6e8:	0f 9c c0             	setl   al
   2f6eb:	84 c0                	test   al,al
   2f6ed:	0f 85 d7 fe ff ff    	jne    2f5ca <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x29e>
   2f6f3:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f6fa:	48 89 c7             	mov    rdi,rax
   2f6fd:	e8 c4 36 00 00       	call   32dc6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::clear()>
   2f702:	e9 23 08 00 00       	jmp    2ff2a <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbfe>
   2f707:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f70e:	48 89 c7             	mov    rdi,rax
   2f711:	e8 52 6e ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f716:	48 83 f8 04          	cmp    rax,0x4
   2f71a:	0f 94 c0             	sete   al
   2f71d:	84 c0                	test   al,al
   2f71f:	0f 84 9f 03 00 00    	je     2fac4 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x798>
   2f725:	c7 85 0c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf4],0x0
   2f72f:	e9 09 01 00 00       	jmp    2f83d <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x511>
   2f734:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   2f73a:	48 63 d0             	movsxd rdx,eax
   2f73d:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f744:	48 89 d6             	mov    rsi,rdx
   2f747:	48 89 c7             	mov    rdi,rax
   2f74a:	e8 35 3f 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f74f:	48 89 c2             	mov    rdx,rax
   2f752:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2f756:	48 89 c6             	mov    rsi,rax
   2f759:	48 89 d7             	mov    rdi,rdx
   2f75c:	e8 ff cb ff ff       	call   2c360 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f761:	84 c0                	test   al,al
   2f763:	74 25                	je     2f78a <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x45e>
   2f765:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   2f76b:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2f771:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2f778:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f77f:	48 89 d6             	mov    rsi,rdx
   2f782:	48 89 c7             	mov    rdi,rax
   2f785:	e8 78 6f ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f78a:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   2f790:	48 63 d0             	movsxd rdx,eax
   2f793:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f79a:	48 89 d6             	mov    rsi,rdx
   2f79d:	48 89 c7             	mov    rdi,rax
   2f7a0:	e8 df 3e 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f7a5:	48 89 c2             	mov    rdx,rax
   2f7a8:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2f7ac:	48 89 c6             	mov    rsi,rax
   2f7af:	48 89 d7             	mov    rdi,rdx
   2f7b2:	e8 a9 cb ff ff       	call   2c360 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f7b7:	84 c0                	test   al,al
   2f7b9:	74 25                	je     2f7e0 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x4b4>
   2f7bb:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   2f7c1:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2f7c7:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2f7ce:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f7d5:	48 89 d6             	mov    rsi,rdx
   2f7d8:	48 89 c7             	mov    rdi,rax
   2f7db:	e8 22 6f ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f7e0:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   2f7e6:	48 63 d0             	movsxd rdx,eax
   2f7e9:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f7f0:	48 89 d6             	mov    rsi,rdx
   2f7f3:	48 89 c7             	mov    rdi,rax
   2f7f6:	e8 89 3e 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f7fb:	48 89 c2             	mov    rdx,rax
   2f7fe:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2f802:	48 89 c6             	mov    rsi,rax
   2f805:	48 89 d7             	mov    rdi,rdx
   2f808:	e8 53 cb ff ff       	call   2c360 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f80d:	84 c0                	test   al,al
   2f80f:	74 25                	je     2f836 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x50a>
   2f811:	8b 85 0c ff ff ff    	mov    eax,DWORD PTR [rbp-0xf4]
   2f817:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2f81d:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2f824:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f82b:	48 89 d6             	mov    rsi,rdx
   2f82e:	48 89 c7             	mov    rdi,rax
   2f831:	e8 cc 6e ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f836:	83 85 0c ff ff ff 01 	add    DWORD PTR [rbp-0xf4],0x1
   2f83d:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f844:	48 89 c7             	mov    rdi,rax
   2f847:	e8 1c 6d ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f84c:	39 85 0c ff ff ff    	cmp    DWORD PTR [rbp-0xf4],eax
   2f852:	0f 9c c0             	setl   al
   2f855:	84 c0                	test   al,al
   2f857:	0f 85 d7 fe ff ff    	jne    2f734 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x408>
   2f85d:	48 8d 85 38 ff ff ff 	lea    rax,[rbp-0xc8]
   2f864:	48 89 c7             	mov    rdi,rax
   2f867:	e8 7e ca ff ff       	call   2c2ea <objl::Vector3::Vector3()>
   2f86c:	c7 85 10 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xf0],0x0
   2f876:	e9 da 00 00 00       	jmp    2f955 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x629>
   2f87b:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
   2f881:	48 63 d0             	movsxd rdx,eax
   2f884:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f88b:	48 89 d6             	mov    rsi,rdx
   2f88e:	48 89 c7             	mov    rdi,rax
   2f891:	e8 3e 6d ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f896:	48 89 c2             	mov    rdx,rax
   2f899:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2f89d:	48 89 c6             	mov    rsi,rax
   2f8a0:	48 89 d7             	mov    rdi,rdx
   2f8a3:	e8 24 cb ff ff       	call   2c3cc <objl::Vector3::operator!=(objl::Vector3 const&) const>
   2f8a8:	84 c0                	test   al,al
   2f8aa:	74 69                	je     2f915 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x5e9>
   2f8ac:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
   2f8b2:	48 63 d0             	movsxd rdx,eax
   2f8b5:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f8bc:	48 89 d6             	mov    rsi,rdx
   2f8bf:	48 89 c7             	mov    rdi,rax
   2f8c2:	e8 0d 6d ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f8c7:	48 89 c2             	mov    rdx,rax
   2f8ca:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2f8ce:	48 89 c6             	mov    rsi,rax
   2f8d1:	48 89 d7             	mov    rdi,rdx
   2f8d4:	e8 f3 ca ff ff       	call   2c3cc <objl::Vector3::operator!=(objl::Vector3 const&) const>
   2f8d9:	84 c0                	test   al,al
   2f8db:	74 38                	je     2f915 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x5e9>
   2f8dd:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
   2f8e3:	48 63 d0             	movsxd rdx,eax
   2f8e6:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f8ed:	48 89 d6             	mov    rsi,rdx
   2f8f0:	48 89 c7             	mov    rdi,rax
   2f8f3:	e8 dc 6c ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f8f8:	48 89 c2             	mov    rdx,rax
   2f8fb:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2f8ff:	48 89 c6             	mov    rsi,rax
   2f902:	48 89 d7             	mov    rdi,rdx
   2f905:	e8 c2 ca ff ff       	call   2c3cc <objl::Vector3::operator!=(objl::Vector3 const&) const>
   2f90a:	84 c0                	test   al,al
   2f90c:	74 07                	je     2f915 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x5e9>
   2f90e:	b8 01 00 00 00       	mov    eax,0x1
   2f913:	eb 05                	jmp    2f91a <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x5ee>
   2f915:	b8 00 00 00 00       	mov    eax,0x0
   2f91a:	84 c0                	test   al,al
   2f91c:	74 30                	je     2f94e <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x622>
   2f91e:	8b 85 10 ff ff ff    	mov    eax,DWORD PTR [rbp-0xf0]
   2f924:	48 63 d0             	movsxd rdx,eax
   2f927:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f92e:	48 89 d6             	mov    rsi,rdx
   2f931:	48 89 c7             	mov    rdi,rax
   2f934:	e8 9b 6c ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2f939:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2f93c:	48 89 95 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rdx
   2f943:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
   2f946:	89 85 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],eax
   2f94c:	eb 27                	jmp    2f975 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x649>
   2f94e:	83 85 10 ff ff ff 01 	add    DWORD PTR [rbp-0xf0],0x1
   2f955:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2f95c:	48 89 c7             	mov    rdi,rax
   2f95f:	e8 04 6c ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2f964:	39 85 10 ff ff ff    	cmp    DWORD PTR [rbp-0xf0],eax
   2f96a:	0f 9c c0             	setl   al
   2f96d:	84 c0                	test   al,al
   2f96f:	0f 85 06 ff ff ff    	jne    2f87b <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x54f>
   2f975:	c7 85 14 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xec],0x0
   2f97f:	e9 0c 01 00 00       	jmp    2fa90 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x764>
   2f984:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   2f98a:	48 63 d0             	movsxd rdx,eax
   2f98d:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f994:	48 89 d6             	mov    rsi,rdx
   2f997:	48 89 c7             	mov    rdi,rax
   2f99a:	e8 e5 3c 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f99f:	48 89 c2             	mov    rdx,rax
   2f9a2:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2f9a6:	48 89 c6             	mov    rsi,rax
   2f9a9:	48 89 d7             	mov    rdi,rdx
   2f9ac:	e8 af c9 ff ff       	call   2c360 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2f9b1:	84 c0                	test   al,al
   2f9b3:	74 25                	je     2f9da <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x6ae>
   2f9b5:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   2f9bb:	89 85 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],eax
   2f9c1:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
   2f9c8:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2f9cf:	48 89 d6             	mov    rsi,rdx
   2f9d2:	48 89 c7             	mov    rdi,rax
   2f9d5:	e8 28 6d ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2f9da:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   2f9e0:	48 63 d0             	movsxd rdx,eax
   2f9e3:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2f9ea:	48 89 d6             	mov    rsi,rdx
   2f9ed:	48 89 c7             	mov    rdi,rax
   2f9f0:	e8 8f 3c 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2f9f5:	48 89 c2             	mov    rdx,rax
   2f9f8:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2f9fc:	48 89 c6             	mov    rsi,rax
   2f9ff:	48 89 d7             	mov    rdi,rdx
   2fa02:	e8 59 c9 ff ff       	call   2c360 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2fa07:	84 c0                	test   al,al
   2fa09:	74 25                	je     2fa30 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x704>
   2fa0b:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   2fa11:	89 85 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],eax
   2fa17:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
   2fa1e:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2fa25:	48 89 d6             	mov    rsi,rdx
   2fa28:	48 89 c7             	mov    rdi,rax
   2fa2b:	e8 d2 6c ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2fa30:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   2fa36:	48 63 d0             	movsxd rdx,eax
   2fa39:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fa40:	48 89 d6             	mov    rsi,rdx
   2fa43:	48 89 c7             	mov    rdi,rax
   2fa46:	e8 39 3c 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fa4b:	48 89 c2             	mov    rdx,rax
   2fa4e:	48 8d 85 38 ff ff ff 	lea    rax,[rbp-0xc8]
   2fa55:	48 89 c6             	mov    rsi,rax
   2fa58:	48 89 d7             	mov    rdi,rdx
   2fa5b:	e8 00 c9 ff ff       	call   2c360 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2fa60:	84 c0                	test   al,al
   2fa62:	74 25                	je     2fa89 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x75d>
   2fa64:	8b 85 14 ff ff ff    	mov    eax,DWORD PTR [rbp-0xec]
   2fa6a:	89 85 30 ff ff ff    	mov    DWORD PTR [rbp-0xd0],eax
   2fa70:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
   2fa77:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2fa7e:	48 89 d6             	mov    rsi,rdx
   2fa81:	48 89 c7             	mov    rdi,rax
   2fa84:	e8 79 6c ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2fa89:	83 85 14 ff ff ff 01 	add    DWORD PTR [rbp-0xec],0x1
   2fa90:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fa97:	48 89 c7             	mov    rdi,rax
   2fa9a:	e8 c9 6a ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2fa9f:	39 85 14 ff ff ff    	cmp    DWORD PTR [rbp-0xec],eax
   2faa5:	0f 9c c0             	setl   al
   2faa8:	84 c0                	test   al,al
   2faaa:	0f 85 d4 fe ff ff    	jne    2f984 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x658>
   2fab0:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2fab7:	48 89 c7             	mov    rdi,rax
   2faba:	e8 07 33 00 00       	call   32dc6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::clear()>
   2fabf:	e9 66 04 00 00       	jmp    2ff2a <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbfe>
   2fac4:	48 8d 55 a0          	lea    rdx,[rbp-0x60]
   2fac8:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2facc:	48 89 d6             	mov    rsi,rdx
   2facf:	48 89 c7             	mov    rdi,rax
   2fad2:	e8 15 ca ff ff       	call   2c4ec <objl::Vector3::operator-(objl::Vector3 const&) const>
   2fad7:	66 48 0f 7e c0       	movq   rax,xmm0
   2fadc:	0f 28 c1             	movaps xmm0,xmm1
   2fadf:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
   2fae6:	f3 0f 11 85 50 ff ff ff 	movss  DWORD PTR [rbp-0xb0],xmm0
   2faee:	48 8d 55 a0          	lea    rdx,[rbp-0x60]
   2faf2:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2faf6:	48 89 d6             	mov    rsi,rdx
   2faf9:	48 89 c7             	mov    rdi,rax
   2fafc:	e8 eb c9 ff ff       	call   2c4ec <objl::Vector3::operator-(objl::Vector3 const&) const>
   2fb01:	66 48 0f 7e c0       	movq   rax,xmm0
   2fb06:	0f 28 c1             	movaps xmm0,xmm1
   2fb09:	48 89 85 54 ff ff ff 	mov    QWORD PTR [rbp-0xac],rax
   2fb10:	f3 0f 11 85 5c ff ff ff 	movss  DWORD PTR [rbp-0xa4],xmm0
   2fb18:	48 8b 95 48 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xb8]
   2fb1f:	f3 0f 10 85 50 ff ff ff 	movss  xmm0,DWORD PTR [rbp-0xb0]
   2fb27:	48 8b 85 54 ff ff ff 	mov    rax,QWORD PTR [rbp-0xac]
   2fb2e:	f3 0f 10 8d 5c ff ff ff 	movss  xmm1,DWORD PTR [rbp-0xa4]
   2fb36:	66 48 0f 6e d2       	movq   xmm2,rdx
   2fb3b:	0f 28 d8             	movaps xmm3,xmm0
   2fb3e:	66 48 0f 6e c0       	movq   xmm0,rax
   2fb43:	e8 85 cf ff ff       	call   2cacd <objl::math::AngleBetweenV3(objl::Vector3, objl::Vector3)>
   2fb48:	66 0f ef c9          	pxor   xmm1,xmm1
   2fb4c:	f3 0f 5a c8          	cvtss2sd xmm1,xmm0
   2fb50:	f2 0f 10 05 58 d0 00 00 	movsd  xmm0,QWORD PTR [rip+0xd058]        # 3cbb0 <NANO_SEC+0x18e8>
   2fb58:	f2 0f 59 c1          	mulsd  xmm0,xmm1
   2fb5c:	f2 0f 5a c0          	cvtsd2ss xmm0,xmm0
   2fb60:	f3 0f 11 85 24 ff ff ff 	movss  DWORD PTR [rbp-0xdc],xmm0
   2fb68:	66 0f ef c0          	pxor   xmm0,xmm0
   2fb6c:	0f 2f 85 24 ff ff ff 	comiss xmm0,DWORD PTR [rbp-0xdc]
   2fb73:	72 15                	jb     2fb8a <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x85e>
   2fb75:	f3 0f 10 85 24 ff ff ff 	movss  xmm0,DWORD PTR [rbp-0xdc]
   2fb7d:	0f 2f 05 34 d0 00 00 	comiss xmm0,DWORD PTR [rip+0xd034]        # 3cbb8 <NANO_SEC+0x18f0>
   2fb84:	0f 83 75 03 00 00    	jae    2feff <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbd3>
   2fb8a:	c6 85 03 ff ff ff 00 	mov    BYTE PTR [rbp-0xfd],0x0
   2fb91:	c7 85 18 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe8],0x0
   2fb9b:	e9 1b 01 00 00       	jmp    2fcbb <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x98f>
   2fba0:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   2fba6:	48 63 d0             	movsxd rdx,eax
   2fba9:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fbb0:	48 89 d6             	mov    rsi,rdx
   2fbb3:	48 89 c7             	mov    rdi,rax
   2fbb6:	e8 c9 3a 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fbbb:	48 8b 7d c0          	mov    rdi,QWORD PTR [rbp-0x40]
   2fbbf:	f3 0f 10 5d c8       	movss  xmm3,DWORD PTR [rbp-0x38]
   2fbc4:	48 8b 75 a0          	mov    rsi,QWORD PTR [rbp-0x60]
   2fbc8:	f3 0f 10 55 a8       	movss  xmm2,DWORD PTR [rbp-0x58]
   2fbcd:	48 8b 4d 80          	mov    rcx,QWORD PTR [rbp-0x80]
   2fbd1:	f3 0f 10 45 88       	movss  xmm0,DWORD PTR [rbp-0x78]
   2fbd6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   2fbd9:	f3 0f 10 48 08       	movss  xmm1,DWORD PTR [rax+0x8]
   2fbde:	66 48 0f 6e f7       	movq   xmm6,rdi
   2fbe3:	0f 28 fb             	movaps xmm7,xmm3
   2fbe6:	66 48 0f 6e e6       	movq   xmm4,rsi
   2fbeb:	0f 28 ea             	movaps xmm5,xmm2
   2fbee:	66 48 0f 6e d1       	movq   xmm2,rcx
   2fbf3:	0f 28 d8             	movaps xmm3,xmm0
   2fbf6:	66 48 0f 6e c2       	movq   xmm0,rdx
   2fbfb:	e8 e5 d3 ff ff       	call   2cfe5 <objl::algorithm::inTriangle(objl::Vector3, objl::Vector3, objl::Vector3, objl::Vector3)>
   2fc00:	84 c0                	test   al,al
   2fc02:	0f 84 9a 00 00 00    	je     2fca2 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x976>
   2fc08:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   2fc0e:	48 63 d0             	movsxd rdx,eax
   2fc11:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fc18:	48 89 d6             	mov    rsi,rdx
   2fc1b:	48 89 c7             	mov    rdi,rax
   2fc1e:	e8 61 3a 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fc23:	48 89 c2             	mov    rdx,rax
   2fc26:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2fc2a:	48 89 c6             	mov    rsi,rax
   2fc2d:	48 89 d7             	mov    rdi,rdx
   2fc30:	e8 97 c7 ff ff       	call   2c3cc <objl::Vector3::operator!=(objl::Vector3 const&) const>
   2fc35:	84 c0                	test   al,al
   2fc37:	74 69                	je     2fca2 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x976>
   2fc39:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   2fc3f:	48 63 d0             	movsxd rdx,eax
   2fc42:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fc49:	48 89 d6             	mov    rsi,rdx
   2fc4c:	48 89 c7             	mov    rdi,rax
   2fc4f:	e8 30 3a 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fc54:	48 89 c2             	mov    rdx,rax
   2fc57:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2fc5b:	48 89 c6             	mov    rsi,rax
   2fc5e:	48 89 d7             	mov    rdi,rdx
   2fc61:	e8 66 c7 ff ff       	call   2c3cc <objl::Vector3::operator!=(objl::Vector3 const&) const>
   2fc66:	84 c0                	test   al,al
   2fc68:	74 38                	je     2fca2 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x976>
   2fc6a:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe8]
   2fc70:	48 63 d0             	movsxd rdx,eax
   2fc73:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fc7a:	48 89 d6             	mov    rsi,rdx
   2fc7d:	48 89 c7             	mov    rdi,rax
   2fc80:	e8 ff 39 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fc85:	48 89 c2             	mov    rdx,rax
   2fc88:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2fc8c:	48 89 c6             	mov    rsi,rax
   2fc8f:	48 89 d7             	mov    rdi,rdx
   2fc92:	e8 35 c7 ff ff       	call   2c3cc <objl::Vector3::operator!=(objl::Vector3 const&) const>
   2fc97:	84 c0                	test   al,al
   2fc99:	74 07                	je     2fca2 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x976>
   2fc9b:	b8 01 00 00 00       	mov    eax,0x1
   2fca0:	eb 05                	jmp    2fca7 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x97b>
   2fca2:	b8 00 00 00 00       	mov    eax,0x0
   2fca7:	84 c0                	test   al,al
   2fca9:	74 09                	je     2fcb4 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x988>
   2fcab:	c6 85 03 ff ff ff 01 	mov    BYTE PTR [rbp-0xfd],0x1
   2fcb2:	eb 27                	jmp    2fcdb <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x9af>
   2fcb4:	83 85 18 ff ff ff 01 	add    DWORD PTR [rbp-0xe8],0x1
   2fcbb:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fcc2:	48 89 c7             	mov    rdi,rax
   2fcc5:	e8 9e 68 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2fcca:	39 85 18 ff ff ff    	cmp    DWORD PTR [rbp-0xe8],eax
   2fcd0:	0f 9c c0             	setl   al
   2fcd3:	84 c0                	test   al,al
   2fcd5:	0f 85 c5 fe ff ff    	jne    2fba0 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x874>
   2fcdb:	80 bd 03 ff ff ff 00 	cmp    BYTE PTR [rbp-0xfd],0x0
   2fce2:	0f 85 1a 02 00 00    	jne    2ff02 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbd6>
   2fce8:	c7 85 1c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe4],0x0
   2fcf2:	e9 09 01 00 00       	jmp    2fe00 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xad4>
   2fcf7:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
   2fcfd:	48 63 d0             	movsxd rdx,eax
   2fd00:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fd07:	48 89 d6             	mov    rsi,rdx
   2fd0a:	48 89 c7             	mov    rdi,rax
   2fd0d:	e8 72 39 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fd12:	48 89 c2             	mov    rdx,rax
   2fd15:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2fd19:	48 89 c6             	mov    rsi,rax
   2fd1c:	48 89 d7             	mov    rdi,rdx
   2fd1f:	e8 3c c6 ff ff       	call   2c360 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2fd24:	84 c0                	test   al,al
   2fd26:	74 25                	je     2fd4d <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xa21>
   2fd28:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
   2fd2e:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2fd34:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2fd3b:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2fd42:	48 89 d6             	mov    rsi,rdx
   2fd45:	48 89 c7             	mov    rdi,rax
   2fd48:	e8 b5 69 ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2fd4d:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
   2fd53:	48 63 d0             	movsxd rdx,eax
   2fd56:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fd5d:	48 89 d6             	mov    rsi,rdx
   2fd60:	48 89 c7             	mov    rdi,rax
   2fd63:	e8 1c 39 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fd68:	48 89 c2             	mov    rdx,rax
   2fd6b:	48 8d 45 80          	lea    rax,[rbp-0x80]
   2fd6f:	48 89 c6             	mov    rsi,rax
   2fd72:	48 89 d7             	mov    rdi,rdx
   2fd75:	e8 e6 c5 ff ff       	call   2c360 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2fd7a:	84 c0                	test   al,al
   2fd7c:	74 25                	je     2fda3 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xa77>
   2fd7e:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
   2fd84:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2fd8a:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2fd91:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2fd98:	48 89 d6             	mov    rsi,rdx
   2fd9b:	48 89 c7             	mov    rdi,rax
   2fd9e:	e8 5f 69 ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2fda3:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
   2fda9:	48 63 d0             	movsxd rdx,eax
   2fdac:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fdb3:	48 89 d6             	mov    rsi,rdx
   2fdb6:	48 89 c7             	mov    rdi,rax
   2fdb9:	e8 c6 38 00 00       	call   33684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>
   2fdbe:	48 89 c2             	mov    rdx,rax
   2fdc1:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   2fdc5:	48 89 c6             	mov    rsi,rax
   2fdc8:	48 89 d7             	mov    rdi,rdx
   2fdcb:	e8 90 c5 ff ff       	call   2c360 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2fdd0:	84 c0                	test   al,al
   2fdd2:	74 25                	je     2fdf9 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xacd>
   2fdd4:	8b 85 1c ff ff ff    	mov    eax,DWORD PTR [rbp-0xe4]
   2fdda:	89 85 38 ff ff ff    	mov    DWORD PTR [rbp-0xc8],eax
   2fde0:	48 8d 95 38 ff ff ff 	lea    rdx,[rbp-0xc8]
   2fde7:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2fdee:	48 89 d6             	mov    rsi,rdx
   2fdf1:	48 89 c7             	mov    rdi,rax
   2fdf4:	e8 09 69 ff ff       	call   26702 <std::vector<unsigned int, std::allocator<unsigned int> >::push_back(unsigned int&&)>
   2fdf9:	83 85 1c ff ff ff 01 	add    DWORD PTR [rbp-0xe4],0x1
   2fe00:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
   2fe07:	48 89 c7             	mov    rdi,rax
   2fe0a:	e8 59 67 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2fe0f:	39 85 1c ff ff ff    	cmp    DWORD PTR [rbp-0xe4],eax
   2fe15:	0f 9c c0             	setl   al
   2fe18:	84 c0                	test   al,al
   2fe1a:	0f 85 d7 fe ff ff    	jne    2fcf7 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x9cb>
   2fe20:	c7 85 20 ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0xe0],0x0
   2fe2a:	e9 a4 00 00 00       	jmp    2fed3 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xba7>
   2fe2f:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
   2fe35:	48 63 d0             	movsxd rdx,eax
   2fe38:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2fe3f:	48 89 d6             	mov    rsi,rdx
   2fe42:	48 89 c7             	mov    rdi,rax
   2fe45:	e8 8a 67 ff ff       	call   265d4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long)>
   2fe4a:	48 89 c2             	mov    rdx,rax
   2fe4d:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   2fe51:	48 89 c6             	mov    rsi,rax
   2fe54:	48 89 d7             	mov    rdi,rdx
   2fe57:	e8 04 c5 ff ff       	call   2c360 <objl::Vector3::operator==(objl::Vector3 const&) const>
   2fe5c:	84 c0                	test   al,al
   2fe5e:	74 6c                	je     2fecc <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xba0>
   2fe60:	8b 85 20 ff ff ff    	mov    eax,DWORD PTR [rbp-0xe0]
   2fe66:	48 63 d8             	movsxd rbx,eax
   2fe69:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2fe70:	48 89 c7             	mov    rdi,rax
   2fe73:	e8 2c 38 00 00       	call   336a4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin()>
   2fe78:	48 89 85 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rax
   2fe7f:	48 8d 85 28 ff ff ff 	lea    rax,[rbp-0xd8]
   2fe86:	48 89 de             	mov    rsi,rbx
   2fe89:	48 89 c7             	mov    rdi,rax
   2fe8c:	e8 5b 38 00 00       	call   336ec <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator+(long) const>
   2fe91:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
   2fe98:	48 8d 95 30 ff ff ff 	lea    rdx,[rbp-0xd0]
   2fe9f:	48 8d 85 38 ff ff ff 	lea    rax,[rbp-0xc8]
   2fea6:	48 89 d6             	mov    rsi,rdx
   2fea9:	48 89 c7             	mov    rdi,rax
   2feac:	e8 9d 38 00 00       	call   3374e <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator<objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex*, __gnu_cxx::__enable_if<std::__are_same<objl::Vertex*, objl::Vertex*>::__value, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__type> const&)>
   2feb1:	48 8b 95 38 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xc8]
   2feb8:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2febf:	48 89 d6             	mov    rsi,rdx
   2fec2:	48 89 c7             	mov    rdi,rax
   2fec5:	e8 ae 38 00 00       	call   33778 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::erase(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   2feca:	eb 27                	jmp    2fef3 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbc7>
   2fecc:	83 85 20 ff ff ff 01 	add    DWORD PTR [rbp-0xe0],0x1
   2fed3:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2feda:	48 89 c7             	mov    rdi,rax
   2fedd:	e8 86 66 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2fee2:	39 85 20 ff ff ff    	cmp    DWORD PTR [rbp-0xe0],eax
   2fee8:	0f 9c c0             	setl   al
   2feeb:	84 c0                	test   al,al
   2feed:	0f 85 3c ff ff ff    	jne    2fe2f <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xb03>
   2fef3:	c7 85 04 ff ff ff ff ff ff ff 	mov    DWORD PTR [rbp-0xfc],0xffffffff
   2fefd:	eb 04                	jmp    2ff03 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbd7>
   2feff:	90                   	nop
   2ff00:	eb 01                	jmp    2ff03 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xbd7>
   2ff02:	90                   	nop
   2ff03:	83 85 04 ff ff ff 01 	add    DWORD PTR [rbp-0xfc],0x1
   2ff0a:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ff11:	48 89 c7             	mov    rdi,rax
   2ff14:	e8 4f 66 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2ff19:	39 85 04 ff ff ff    	cmp    DWORD PTR [rbp-0xfc],eax
   2ff1f:	0f 9c c0             	setl   al
   2ff22:	84 c0                	test   al,al
   2ff24:	0f 85 ee f4 ff ff    	jne    2f418 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xec>
   2ff2a:	48 8b 85 f0 fe ff ff 	mov    rax,QWORD PTR [rbp-0x110]
   2ff31:	48 89 c7             	mov    rdi,rax
   2ff34:	e8 77 66 ff ff       	call   265b0 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   2ff39:	48 85 c0             	test   rax,rax
   2ff3c:	0f 94 c0             	sete   al
   2ff3f:	84 c0                	test   al,al
   2ff41:	75 1e                	jne    2ff61 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc35>
   2ff43:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ff4a:	48 89 c7             	mov    rdi,rax
   2ff4d:	e8 16 66 ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   2ff52:	48 85 c0             	test   rax,rax
   2ff55:	0f 94 c0             	sete   al
   2ff58:	84 c0                	test   al,al
   2ff5a:	75 08                	jne    2ff64 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc38>
   2ff5c:	e9 a8 f4 ff ff       	jmp    2f409 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xdd>
   2ff61:	90                   	nop
   2ff62:	eb 01                	jmp    2ff65 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc39>
   2ff64:	90                   	nop
   2ff65:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ff6c:	48 89 c7             	mov    rdi,rax
   2ff6f:	e8 58 25 00 00       	call   324cc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2ff74:	eb 1e                	jmp    2ff94 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc68>
   2ff76:	48 89 c3             	mov    rbx,rax
   2ff79:	48 8d 85 60 ff ff ff 	lea    rax,[rbp-0xa0]
   2ff80:	48 89 c7             	mov    rdi,rax
   2ff83:	e8 44 25 00 00       	call   324cc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   2ff88:	48 89 d8             	mov    rax,rbx
   2ff8b:	48 89 c7             	mov    rdi,rax
   2ff8e:	e8 cd 47 fd ff       	call   4760 <_Unwind_Resume@plt>
   2ff93:	90                   	nop
   2ff94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   2ff98:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   2ffa1:	74 05                	je     2ffa8 <objl::Loader::VertexTriangluation(std::vector<unsigned int, std::allocator<unsigned int> >&, std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xc7c>
   2ffa3:	e8 38 45 fd ff       	call   44e0 <__stack_chk_fail@plt>
   2ffa8:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   2ffac:	c9                   	leave  
   2ffad:	c3                   	ret    

000000000002ffae <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>:
   2ffae:	55                   	push   rbp
   2ffaf:	48 89 e5             	mov    rbp,rsp
   2ffb2:	41 56                	push   r14
   2ffb4:	41 55                	push   r13
   2ffb6:	41 54                	push   r12
   2ffb8:	53                   	push   rbx
   2ffb9:	48 81 ec 30 07 00 00 	sub    rsp,0x730
   2ffc0:	48 89 bd b8 f8 ff ff 	mov    QWORD PTR [rbp-0x748],rdi
   2ffc7:	48 89 b5 b0 f8 ff ff 	mov    QWORD PTR [rbp-0x750],rsi
   2ffce:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   2ffd7:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   2ffdb:	31 c0                	xor    eax,eax
   2ffdd:	48 8b 85 b0 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x750]
   2ffe4:	48 89 c7             	mov    rdi,rax
   2ffe7:	e8 c4 42 fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   2ffec:	48 89 c3             	mov    rbx,rax
   2ffef:	48 8b 85 b0 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x750]
   2fff6:	48 89 c7             	mov    rdi,rax
   2fff9:	e8 b2 42 fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   2fffe:	48 8d 50 fc          	lea    rdx,[rax-0x4]
   30002:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   30009:	48 8b b5 b0 f8 ff ff 	mov    rsi,QWORD PTR [rbp-0x750]
   30010:	48 89 d9             	mov    rcx,rbx
   30013:	48 89 c7             	mov    rdi,rax
   30016:	e8 35 44 fd ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   3001b:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   30022:	48 8d 15 d4 ca 00 00 	lea    rdx,[rip+0xcad4]        # 3cafd <NANO_SEC+0x1835>
   30029:	48 89 d6             	mov    rsi,rdx
   3002c:	48 89 c7             	mov    rdi,rax
   3002f:	e8 69 2d 00 00       	call   32d9d <bool std::operator!=<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30034:	89 c3                	mov    ebx,eax
   30036:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   3003d:	48 89 c7             	mov    rdi,rax
   30040:	e8 1b 42 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30045:	84 db                	test   bl,bl
   30047:	74 0a                	je     30053 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xa5>
   30049:	bb 00 00 00 00       	mov    ebx,0x0
   3004e:	e9 21 0e 00 00       	jmp    30e74 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xec6>
   30053:	48 8b 8d b0 f8 ff ff 	mov    rcx,QWORD PTR [rbp-0x750]
   3005a:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   30061:	ba 08 00 00 00       	mov    edx,0x8
   30066:	48 89 ce             	mov    rsi,rcx
   30069:	48 89 c7             	mov    rdi,rax
   3006c:	e8 7f 46 fd ff       	call   46f0 <std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@plt>
   30071:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   30078:	48 89 c7             	mov    rdi,rax
   3007b:	e8 60 46 fd ff       	call   46e0 <std::basic_ifstream<char, std::char_traits<char> >::is_open()@plt>
   30080:	83 f0 01             	xor    eax,0x1
   30083:	84 c0                	test   al,al
   30085:	74 0a                	je     30091 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe3>
   30087:	bb 00 00 00 00       	mov    ebx,0x0
   3008c:	e9 d4 0d 00 00       	jmp    30e65 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xeb7>
   30091:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   30098:	48 89 c7             	mov    rdi,rax
   3009b:	e8 64 c6 ff ff       	call   2c704 <objl::Material::Material()>
   300a0:	c6 85 cf f8 ff ff 00 	mov    BYTE PTR [rbp-0x731],0x0
   300a7:	48 8d 85 f0 f8 ff ff 	lea    rax,[rbp-0x710]
   300ae:	48 89 c7             	mov    rdi,rax
   300b1:	e8 6a 45 fd ff       	call   4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   300b6:	e9 16 0d 00 00       	jmp    30dd1 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe23>
   300bb:	48 8d 85 10 f9 ff ff 	lea    rax,[rbp-0x6f0]
   300c2:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   300c9:	48 89 d6             	mov    rsi,rdx
   300cc:	48 89 c7             	mov    rdi,rax
   300cf:	e8 5e 17 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   300d4:	48 8d 85 10 f9 ff ff 	lea    rax,[rbp-0x6f0]
   300db:	48 8d 15 20 ca 00 00 	lea    rdx,[rip+0xca20]        # 3cb02 <NANO_SEC+0x183a>
   300e2:	48 89 d6             	mov    rsi,rdx
   300e5:	48 89 c7             	mov    rdi,rax
   300e8:	e8 ea 65 ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   300ed:	89 c3                	mov    ebx,eax
   300ef:	48 8d 85 10 f9 ff ff 	lea    rax,[rbp-0x6f0]
   300f6:	48 89 c7             	mov    rdi,rax
   300f9:	e8 62 41 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   300fe:	84 db                	test   bl,bl
   30100:	0f 84 61 01 00 00    	je     30267 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2b9>
   30106:	0f b6 85 cf f8 ff ff 	movzx  eax,BYTE PTR [rbp-0x731]
   3010d:	83 f0 01             	xor    eax,0x1
   30110:	84 c0                	test   al,al
   30112:	0f 84 85 00 00 00    	je     3019d <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1ef>
   30118:	c6 85 cf f8 ff ff 01 	mov    BYTE PTR [rbp-0x731],0x1
   3011f:	48 8d 85 f0 f8 ff ff 	lea    rax,[rbp-0x710]
   30126:	48 89 c7             	mov    rdi,rax
   30129:	e8 82 41 fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   3012e:	48 83 f8 07          	cmp    rax,0x7
   30132:	0f 97 c0             	seta   al
   30135:	84 c0                	test   al,al
   30137:	74 46                	je     3017f <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1d1>
   30139:	48 8d 85 30 f9 ff ff 	lea    rax,[rbp-0x6d0]
   30140:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30147:	48 89 d6             	mov    rsi,rdx
   3014a:	48 89 c7             	mov    rdi,rax
   3014d:	e8 84 15 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30152:	48 8d 95 30 f9 ff ff 	lea    rdx,[rbp-0x6d0]
   30159:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   30160:	48 89 d6             	mov    rsi,rdx
   30163:	48 89 c7             	mov    rdi,rax
   30166:	e8 e5 43 fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   3016b:	48 8d 85 30 f9 ff ff 	lea    rax,[rbp-0x6d0]
   30172:	48 89 c7             	mov    rdi,rax
   30175:	e8 e6 40 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3017a:	e9 e8 00 00 00       	jmp    30267 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2b9>
   3017f:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   30186:	48 8d 15 7c c9 00 00 	lea    rdx,[rip+0xc97c]        # 3cb09 <NANO_SEC+0x1841>
   3018d:	48 89 d6             	mov    rsi,rdx
   30190:	48 89 c7             	mov    rdi,rax
   30193:	e8 78 44 fd ff       	call   4610 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)@plt>
   30198:	e9 ca 00 00 00       	jmp    30267 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2b9>
   3019d:	48 8b 85 b8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x748]
   301a4:	48 8d 50 48          	lea    rdx,[rax+0x48]
   301a8:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   301af:	48 89 c6             	mov    rsi,rax
   301b2:	48 89 d7             	mov    rdi,rdx
   301b5:	e8 50 36 00 00       	call   3380a <std::vector<objl::Material, std::allocator<objl::Material> >::push_back(objl::Material const&)>
   301ba:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   301c1:	48 89 c7             	mov    rdi,rax
   301c4:	e8 3b c5 ff ff       	call   2c704 <objl::Material::Material()>
   301c9:	48 8d 95 b0 fc ff ff 	lea    rdx,[rbp-0x350]
   301d0:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   301d7:	48 89 d6             	mov    rsi,rdx
   301da:	48 89 c7             	mov    rdi,rax
   301dd:	e8 36 19 00 00       	call   31b18 <objl::Material::operator=(objl::Material&&)>
   301e2:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   301e9:	48 89 c7             	mov    rdi,rax
   301ec:	e8 75 11 00 00       	call   31366 <objl::Material::~Material()>
   301f1:	48 8d 85 f0 f8 ff ff 	lea    rax,[rbp-0x710]
   301f8:	48 89 c7             	mov    rdi,rax
   301fb:	e8 b0 40 fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   30200:	48 83 f8 07          	cmp    rax,0x7
   30204:	0f 97 c0             	seta   al
   30207:	84 c0                	test   al,al
   30209:	74 43                	je     3024e <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2a0>
   3020b:	48 8d 85 50 f9 ff ff 	lea    rax,[rbp-0x6b0]
   30212:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30219:	48 89 d6             	mov    rsi,rdx
   3021c:	48 89 c7             	mov    rdi,rax
   3021f:	e8 b2 14 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30224:	48 8d 95 50 f9 ff ff 	lea    rdx,[rbp-0x6b0]
   3022b:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   30232:	48 89 d6             	mov    rsi,rdx
   30235:	48 89 c7             	mov    rdi,rax
   30238:	e8 13 43 fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   3023d:	48 8d 85 50 f9 ff ff 	lea    rax,[rbp-0x6b0]
   30244:	48 89 c7             	mov    rdi,rax
   30247:	e8 14 40 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3024c:	eb 19                	jmp    30267 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2b9>
   3024e:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   30255:	48 8d 15 ad c8 00 00 	lea    rdx,[rip+0xc8ad]        # 3cb09 <NANO_SEC+0x1841>
   3025c:	48 89 d6             	mov    rsi,rdx
   3025f:	48 89 c7             	mov    rdi,rax
   30262:	e8 a9 43 fd ff       	call   4610 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)@plt>
   30267:	48 8d 85 70 f9 ff ff 	lea    rax,[rbp-0x690]
   3026e:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30275:	48 89 d6             	mov    rsi,rdx
   30278:	48 89 c7             	mov    rdi,rax
   3027b:	e8 b2 15 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30280:	48 8d 85 70 f9 ff ff 	lea    rax,[rbp-0x690]
   30287:	48 8d 15 80 c8 00 00 	lea    rdx,[rip+0xc880]        # 3cb0e <NANO_SEC+0x1846>
   3028e:	48 89 d6             	mov    rsi,rdx
   30291:	48 89 c7             	mov    rdi,rax
   30294:	e8 3e 64 ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30299:	89 c3                	mov    ebx,eax
   3029b:	48 8d 85 70 f9 ff ff 	lea    rax,[rbp-0x690]
   302a2:	48 89 c7             	mov    rdi,rax
   302a5:	e8 b6 3f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   302aa:	84 db                	test   bl,bl
   302ac:	0f 84 67 01 00 00    	je     30419 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x46b>
   302b2:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   302b9:	48 89 c7             	mov    rdi,rax
   302bc:	e8 65 53 ff ff       	call   25626 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   302c1:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   302c8:	48 89 c7             	mov    rdi,rax
   302cb:	e8 a0 44 fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   302d0:	48 8d 95 ce f8 ff ff 	lea    rdx,[rbp-0x732]
   302d7:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   302de:	48 8d 0d fc c7 00 00 	lea    rcx,[rip+0xc7fc]        # 3cae1 <NANO_SEC+0x1819>
   302e5:	48 89 ce             	mov    rsi,rcx
   302e8:	48 89 c7             	mov    rdi,rax
   302eb:	e8 6a 57 ff ff       	call   25a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   302f0:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   302f7:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   302fe:	48 89 d6             	mov    rsi,rdx
   30301:	48 89 c7             	mov    rdi,rax
   30304:	e8 cd 13 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30309:	48 8d 95 b0 fc ff ff 	lea    rdx,[rbp-0x350]
   30310:	48 8d 8d d0 f8 ff ff 	lea    rcx,[rbp-0x730]
   30317:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   3031e:	48 89 ce             	mov    rsi,rcx
   30321:	48 89 c7             	mov    rdi,rax
   30324:	e8 c0 10 00 00       	call   313e9 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   30329:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30330:	48 89 c7             	mov    rdi,rax
   30333:	e8 28 3f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30338:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   3033f:	48 89 c7             	mov    rdi,rax
   30342:	e8 19 3f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30347:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   3034e:	48 89 c7             	mov    rdi,rax
   30351:	e8 3a 41 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   30356:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   3035d:	48 89 c7             	mov    rdi,rax
   30360:	e8 cf 63 ff ff       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   30365:	48 83 f8 03          	cmp    rax,0x3
   30369:	0f 95 c0             	setne  al
   3036c:	84 c0                	test   al,al
   3036e:	74 0a                	je     3037a <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x3cc>
   30370:	bb 00 00 00 00       	mov    ebx,0x0
   30375:	e9 86 00 00 00       	jmp    30400 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x452>
   3037a:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30381:	be 00 00 00 00       	mov    esi,0x0
   30386:	48 89 c7             	mov    rdi,rax
   30389:	e8 ca 63 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   3038e:	be 00 00 00 00       	mov    esi,0x0
   30393:	48 89 c7             	mov    rdi,rax
   30396:	e8 ab 0d 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   3039b:	66 0f 7e c0          	movd   eax,xmm0
   3039f:	89 85 b0 fb ff ff    	mov    DWORD PTR [rbp-0x450],eax
   303a5:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   303ac:	be 01 00 00 00       	mov    esi,0x1
   303b1:	48 89 c7             	mov    rdi,rax
   303b4:	e8 9f 63 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   303b9:	be 00 00 00 00       	mov    esi,0x0
   303be:	48 89 c7             	mov    rdi,rax
   303c1:	e8 80 0d 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   303c6:	66 0f 7e c0          	movd   eax,xmm0
   303ca:	89 85 b4 fb ff ff    	mov    DWORD PTR [rbp-0x44c],eax
   303d0:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   303d7:	be 02 00 00 00       	mov    esi,0x2
   303dc:	48 89 c7             	mov    rdi,rax
   303df:	e8 74 63 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   303e4:	be 00 00 00 00       	mov    esi,0x0
   303e9:	48 89 c7             	mov    rdi,rax
   303ec:	e8 55 0d 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   303f1:	66 0f 7e c0          	movd   eax,xmm0
   303f5:	89 85 b8 fb ff ff    	mov    DWORD PTR [rbp-0x448],eax
   303fb:	bb 01 00 00 00       	mov    ebx,0x1
   30400:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30407:	48 89 c7             	mov    rdi,rax
   3040a:	e8 bd 60 ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   3040f:	83 fb 01             	cmp    ebx,0x1
   30412:	74 05                	je     30419 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x46b>
   30414:	e9 b8 09 00 00       	jmp    30dd1 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe23>
   30419:	48 8d 85 90 f9 ff ff 	lea    rax,[rbp-0x670]
   30420:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30427:	48 89 d6             	mov    rsi,rdx
   3042a:	48 89 c7             	mov    rdi,rax
   3042d:	e8 00 14 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30432:	48 8d 85 90 f9 ff ff 	lea    rax,[rbp-0x670]
   30439:	48 8d 15 d1 c6 00 00 	lea    rdx,[rip+0xc6d1]        # 3cb11 <NANO_SEC+0x1849>
   30440:	48 89 d6             	mov    rsi,rdx
   30443:	48 89 c7             	mov    rdi,rax
   30446:	e8 8c 62 ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   3044b:	89 c3                	mov    ebx,eax
   3044d:	48 8d 85 90 f9 ff ff 	lea    rax,[rbp-0x670]
   30454:	48 89 c7             	mov    rdi,rax
   30457:	e8 04 3e fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3045c:	84 db                	test   bl,bl
   3045e:	0f 84 67 01 00 00    	je     305cb <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x61d>
   30464:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   3046b:	48 89 c7             	mov    rdi,rax
   3046e:	e8 b3 51 ff ff       	call   25626 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   30473:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   3047a:	48 89 c7             	mov    rdi,rax
   3047d:	e8 ee 42 fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   30482:	48 8d 95 ce f8 ff ff 	lea    rdx,[rbp-0x732]
   30489:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30490:	48 8d 0d 4a c6 00 00 	lea    rcx,[rip+0xc64a]        # 3cae1 <NANO_SEC+0x1819>
   30497:	48 89 ce             	mov    rsi,rcx
   3049a:	48 89 c7             	mov    rdi,rax
   3049d:	e8 b8 55 ff ff       	call   25a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   304a2:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   304a9:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   304b0:	48 89 d6             	mov    rsi,rdx
   304b3:	48 89 c7             	mov    rdi,rax
   304b6:	e8 1b 12 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   304bb:	48 8d 95 b0 fc ff ff 	lea    rdx,[rbp-0x350]
   304c2:	48 8d 8d d0 f8 ff ff 	lea    rcx,[rbp-0x730]
   304c9:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   304d0:	48 89 ce             	mov    rsi,rcx
   304d3:	48 89 c7             	mov    rdi,rax
   304d6:	e8 0e 0f 00 00       	call   313e9 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   304db:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   304e2:	48 89 c7             	mov    rdi,rax
   304e5:	e8 76 3d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   304ea:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   304f1:	48 89 c7             	mov    rdi,rax
   304f4:	e8 67 3d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   304f9:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   30500:	48 89 c7             	mov    rdi,rax
   30503:	e8 88 3f fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   30508:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   3050f:	48 89 c7             	mov    rdi,rax
   30512:	e8 1d 62 ff ff       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   30517:	48 83 f8 03          	cmp    rax,0x3
   3051b:	0f 95 c0             	setne  al
   3051e:	84 c0                	test   al,al
   30520:	74 0a                	je     3052c <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x57e>
   30522:	bb 00 00 00 00       	mov    ebx,0x0
   30527:	e9 86 00 00 00       	jmp    305b2 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x604>
   3052c:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30533:	be 00 00 00 00       	mov    esi,0x0
   30538:	48 89 c7             	mov    rdi,rax
   3053b:	e8 18 62 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   30540:	be 00 00 00 00       	mov    esi,0x0
   30545:	48 89 c7             	mov    rdi,rax
   30548:	e8 f9 0b 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   3054d:	66 0f 7e c0          	movd   eax,xmm0
   30551:	89 85 bc fb ff ff    	mov    DWORD PTR [rbp-0x444],eax
   30557:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   3055e:	be 01 00 00 00       	mov    esi,0x1
   30563:	48 89 c7             	mov    rdi,rax
   30566:	e8 ed 61 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   3056b:	be 00 00 00 00       	mov    esi,0x0
   30570:	48 89 c7             	mov    rdi,rax
   30573:	e8 ce 0b 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   30578:	66 0f 7e c0          	movd   eax,xmm0
   3057c:	89 85 c0 fb ff ff    	mov    DWORD PTR [rbp-0x440],eax
   30582:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30589:	be 02 00 00 00       	mov    esi,0x2
   3058e:	48 89 c7             	mov    rdi,rax
   30591:	e8 c2 61 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   30596:	be 00 00 00 00       	mov    esi,0x0
   3059b:	48 89 c7             	mov    rdi,rax
   3059e:	e8 a3 0b 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   305a3:	66 0f 7e c0          	movd   eax,xmm0
   305a7:	89 85 c4 fb ff ff    	mov    DWORD PTR [rbp-0x43c],eax
   305ad:	bb 01 00 00 00       	mov    ebx,0x1
   305b2:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   305b9:	48 89 c7             	mov    rdi,rax
   305bc:	e8 0b 5f ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   305c1:	83 fb 01             	cmp    ebx,0x1
   305c4:	74 05                	je     305cb <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x61d>
   305c6:	e9 06 08 00 00       	jmp    30dd1 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe23>
   305cb:	48 8d 85 b0 f9 ff ff 	lea    rax,[rbp-0x650]
   305d2:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   305d9:	48 89 d6             	mov    rsi,rdx
   305dc:	48 89 c7             	mov    rdi,rax
   305df:	e8 4e 12 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   305e4:	48 8d 85 b0 f9 ff ff 	lea    rax,[rbp-0x650]
   305eb:	48 8d 15 22 c5 00 00 	lea    rdx,[rip+0xc522]        # 3cb14 <NANO_SEC+0x184c>
   305f2:	48 89 d6             	mov    rsi,rdx
   305f5:	48 89 c7             	mov    rdi,rax
   305f8:	e8 da 60 ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   305fd:	89 c3                	mov    ebx,eax
   305ff:	48 8d 85 b0 f9 ff ff 	lea    rax,[rbp-0x650]
   30606:	48 89 c7             	mov    rdi,rax
   30609:	e8 52 3c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3060e:	84 db                	test   bl,bl
   30610:	0f 84 67 01 00 00    	je     3077d <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x7cf>
   30616:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   3061d:	48 89 c7             	mov    rdi,rax
   30620:	e8 01 50 ff ff       	call   25626 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector()>
   30625:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   3062c:	48 89 c7             	mov    rdi,rax
   3062f:	e8 3c 41 fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   30634:	48 8d 95 ce f8 ff ff 	lea    rdx,[rbp-0x732]
   3063b:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30642:	48 8d 0d 98 c4 00 00 	lea    rcx,[rip+0xc498]        # 3cae1 <NANO_SEC+0x1819>
   30649:	48 89 ce             	mov    rsi,rcx
   3064c:	48 89 c7             	mov    rdi,rax
   3064f:	e8 06 54 ff ff       	call   25a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   30654:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   3065b:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30662:	48 89 d6             	mov    rsi,rdx
   30665:	48 89 c7             	mov    rdi,rax
   30668:	e8 69 10 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   3066d:	48 8d 95 b0 fc ff ff 	lea    rdx,[rbp-0x350]
   30674:	48 8d 8d d0 f8 ff ff 	lea    rcx,[rbp-0x730]
   3067b:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30682:	48 89 ce             	mov    rsi,rcx
   30685:	48 89 c7             	mov    rdi,rax
   30688:	e8 5c 0d 00 00       	call   313e9 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
   3068d:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30694:	48 89 c7             	mov    rdi,rax
   30697:	e8 c4 3b fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3069c:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   306a3:	48 89 c7             	mov    rdi,rax
   306a6:	e8 b5 3b fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   306ab:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   306b2:	48 89 c7             	mov    rdi,rax
   306b5:	e8 d6 3d fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   306ba:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   306c1:	48 89 c7             	mov    rdi,rax
   306c4:	e8 6b 60 ff ff       	call   26734 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const>
   306c9:	48 83 f8 03          	cmp    rax,0x3
   306cd:	0f 95 c0             	setne  al
   306d0:	84 c0                	test   al,al
   306d2:	74 0a                	je     306de <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x730>
   306d4:	bb 00 00 00 00       	mov    ebx,0x0
   306d9:	e9 86 00 00 00       	jmp    30764 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x7b6>
   306de:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   306e5:	be 00 00 00 00       	mov    esi,0x0
   306ea:	48 89 c7             	mov    rdi,rax
   306ed:	e8 66 60 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   306f2:	be 00 00 00 00       	mov    esi,0x0
   306f7:	48 89 c7             	mov    rdi,rax
   306fa:	e8 47 0a 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   306ff:	66 0f 7e c0          	movd   eax,xmm0
   30703:	89 85 c8 fb ff ff    	mov    DWORD PTR [rbp-0x438],eax
   30709:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30710:	be 01 00 00 00       	mov    esi,0x1
   30715:	48 89 c7             	mov    rdi,rax
   30718:	e8 3b 60 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   3071d:	be 00 00 00 00       	mov    esi,0x0
   30722:	48 89 c7             	mov    rdi,rax
   30725:	e8 1c 0a 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   3072a:	66 0f 7e c0          	movd   eax,xmm0
   3072e:	89 85 cc fb ff ff    	mov    DWORD PTR [rbp-0x434],eax
   30734:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   3073b:	be 02 00 00 00       	mov    esi,0x2
   30740:	48 89 c7             	mov    rdi,rax
   30743:	e8 10 60 ff ff       	call   26758 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
   30748:	be 00 00 00 00       	mov    esi,0x0
   3074d:	48 89 c7             	mov    rdi,rax
   30750:	e8 f1 09 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   30755:	66 0f 7e c0          	movd   eax,xmm0
   30759:	89 85 d0 fb ff ff    	mov    DWORD PTR [rbp-0x430],eax
   3075f:	bb 01 00 00 00       	mov    ebx,0x1
   30764:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   3076b:	48 89 c7             	mov    rdi,rax
   3076e:	e8 59 5d ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   30773:	83 fb 01             	cmp    ebx,0x1
   30776:	74 05                	je     3077d <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x7cf>
   30778:	e9 54 06 00 00       	jmp    30dd1 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe23>
   3077d:	48 8d 85 d0 f9 ff ff 	lea    rax,[rbp-0x630]
   30784:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   3078b:	48 89 d6             	mov    rsi,rdx
   3078e:	48 89 c7             	mov    rdi,rax
   30791:	e8 9c 10 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30796:	48 8d 85 d0 f9 ff ff 	lea    rax,[rbp-0x630]
   3079d:	48 8d 15 73 c3 00 00 	lea    rdx,[rip+0xc373]        # 3cb17 <NANO_SEC+0x184f>
   307a4:	48 89 d6             	mov    rsi,rdx
   307a7:	48 89 c7             	mov    rdi,rax
   307aa:	e8 28 5f ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   307af:	89 c3                	mov    ebx,eax
   307b1:	48 8d 85 d0 f9 ff ff 	lea    rax,[rbp-0x630]
   307b8:	48 89 c7             	mov    rdi,rax
   307bb:	e8 a0 3a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   307c0:	84 db                	test   bl,bl
   307c2:	74 46                	je     3080a <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x85c>
   307c4:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   307cb:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   307d2:	48 89 d6             	mov    rsi,rdx
   307d5:	48 89 c7             	mov    rdi,rax
   307d8:	e8 f9 0e 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   307dd:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   307e4:	be 00 00 00 00       	mov    esi,0x0
   307e9:	48 89 c7             	mov    rdi,rax
   307ec:	e8 55 09 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   307f1:	66 0f 7e c0          	movd   eax,xmm0
   307f5:	89 85 d4 fb ff ff    	mov    DWORD PTR [rbp-0x42c],eax
   307fb:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30802:	48 89 c7             	mov    rdi,rax
   30805:	e8 56 3a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3080a:	48 8d 85 f0 f9 ff ff 	lea    rax,[rbp-0x610]
   30811:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30818:	48 89 d6             	mov    rsi,rdx
   3081b:	48 89 c7             	mov    rdi,rax
   3081e:	e8 0f 10 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30823:	48 8d 85 f0 f9 ff ff 	lea    rax,[rbp-0x610]
   3082a:	48 8d 15 e9 c2 00 00 	lea    rdx,[rip+0xc2e9]        # 3cb1a <NANO_SEC+0x1852>
   30831:	48 89 d6             	mov    rsi,rdx
   30834:	48 89 c7             	mov    rdi,rax
   30837:	e8 9b 5e ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   3083c:	89 c3                	mov    ebx,eax
   3083e:	48 8d 85 f0 f9 ff ff 	lea    rax,[rbp-0x610]
   30845:	48 89 c7             	mov    rdi,rax
   30848:	e8 13 3a fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3084d:	84 db                	test   bl,bl
   3084f:	74 46                	je     30897 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x8e9>
   30851:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30858:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   3085f:	48 89 d6             	mov    rsi,rdx
   30862:	48 89 c7             	mov    rdi,rax
   30865:	e8 6c 0e 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   3086a:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30871:	be 00 00 00 00       	mov    esi,0x0
   30876:	48 89 c7             	mov    rdi,rax
   30879:	e8 c8 08 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   3087e:	66 0f 7e c0          	movd   eax,xmm0
   30882:	89 85 d8 fb ff ff    	mov    DWORD PTR [rbp-0x428],eax
   30888:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   3088f:	48 89 c7             	mov    rdi,rax
   30892:	e8 c9 39 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30897:	48 8d 85 10 fa ff ff 	lea    rax,[rbp-0x5f0]
   3089e:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   308a5:	48 89 d6             	mov    rsi,rdx
   308a8:	48 89 c7             	mov    rdi,rax
   308ab:	e8 82 0f 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   308b0:	48 8d 85 10 fa ff ff 	lea    rax,[rbp-0x5f0]
   308b7:	48 8d 15 5f c2 00 00 	lea    rdx,[rip+0xc25f]        # 3cb1d <NANO_SEC+0x1855>
   308be:	48 89 d6             	mov    rsi,rdx
   308c1:	48 89 c7             	mov    rdi,rax
   308c4:	e8 0e 5e ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   308c9:	89 c3                	mov    ebx,eax
   308cb:	48 8d 85 10 fa ff ff 	lea    rax,[rbp-0x5f0]
   308d2:	48 89 c7             	mov    rdi,rax
   308d5:	e8 86 39 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   308da:	84 db                	test   bl,bl
   308dc:	74 46                	je     30924 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x976>
   308de:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   308e5:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   308ec:	48 89 d6             	mov    rsi,rdx
   308ef:	48 89 c7             	mov    rdi,rax
   308f2:	e8 df 0d 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   308f7:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   308fe:	be 00 00 00 00       	mov    esi,0x0
   30903:	48 89 c7             	mov    rdi,rax
   30906:	e8 3b 08 00 00       	call   31146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>
   3090b:	66 0f 7e c0          	movd   eax,xmm0
   3090f:	89 85 dc fb ff ff    	mov    DWORD PTR [rbp-0x424],eax
   30915:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   3091c:	48 89 c7             	mov    rdi,rax
   3091f:	e8 3c 39 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30924:	48 8d 85 30 fa ff ff 	lea    rax,[rbp-0x5d0]
   3092b:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30932:	48 89 d6             	mov    rsi,rdx
   30935:	48 89 c7             	mov    rdi,rax
   30938:	e8 f5 0e 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   3093d:	48 8d 85 30 fa ff ff 	lea    rax,[rbp-0x5d0]
   30944:	48 8d 15 d4 c1 00 00 	lea    rdx,[rip+0xc1d4]        # 3cb1f <NANO_SEC+0x1857>
   3094b:	48 89 d6             	mov    rsi,rdx
   3094e:	48 89 c7             	mov    rdi,rax
   30951:	e8 81 5d ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30956:	89 c3                	mov    ebx,eax
   30958:	48 8d 85 30 fa ff ff 	lea    rax,[rbp-0x5d0]
   3095f:	48 89 c7             	mov    rdi,rax
   30962:	e8 f9 38 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30967:	84 db                	test   bl,bl
   30969:	74 47                	je     309b2 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xa04>
   3096b:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30972:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30979:	48 89 d6             	mov    rsi,rdx
   3097c:	48 89 c7             	mov    rdi,rax
   3097f:	e8 52 0d 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30984:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   3098b:	ba 0a 00 00 00       	mov    edx,0xa
   30990:	be 00 00 00 00       	mov    esi,0x0
   30995:	48 89 c7             	mov    rdi,rax
   30998:	e8 5f 07 00 00       	call   310fc <std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int)>
   3099d:	89 85 e0 fb ff ff    	mov    DWORD PTR [rbp-0x420],eax
   309a3:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   309aa:	48 89 c7             	mov    rdi,rax
   309ad:	e8 ae 38 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   309b2:	48 8d 85 50 fa ff ff 	lea    rax,[rbp-0x5b0]
   309b9:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   309c0:	48 89 d6             	mov    rsi,rdx
   309c3:	48 89 c7             	mov    rdi,rax
   309c6:	e8 67 0e 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   309cb:	48 8d 85 50 fa ff ff 	lea    rax,[rbp-0x5b0]
   309d2:	48 8d 15 4c c1 00 00 	lea    rdx,[rip+0xc14c]        # 3cb25 <NANO_SEC+0x185d>
   309d9:	48 89 d6             	mov    rsi,rdx
   309dc:	48 89 c7             	mov    rdi,rax
   309df:	e8 f3 5c ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   309e4:	89 c3                	mov    ebx,eax
   309e6:	48 8d 85 50 fa ff ff 	lea    rax,[rbp-0x5b0]
   309ed:	48 89 c7             	mov    rdi,rax
   309f0:	e8 6b 38 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   309f5:	84 db                	test   bl,bl
   309f7:	74 45                	je     30a3e <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xa90>
   309f9:	48 8d 85 70 fa ff ff 	lea    rax,[rbp-0x590]
   30a00:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30a07:	48 89 d6             	mov    rsi,rdx
   30a0a:	48 89 c7             	mov    rdi,rax
   30a0d:	e8 c4 0c 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30a12:	48 8d 85 70 fa ff ff 	lea    rax,[rbp-0x590]
   30a19:	48 8d 95 90 fb ff ff 	lea    rdx,[rbp-0x470]
   30a20:	48 83 c2 58          	add    rdx,0x58
   30a24:	48 89 c6             	mov    rsi,rax
   30a27:	48 89 d7             	mov    rdi,rdx
   30a2a:	e8 21 3b fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   30a2f:	48 8d 85 70 fa ff ff 	lea    rax,[rbp-0x590]
   30a36:	48 89 c7             	mov    rdi,rax
   30a39:	e8 22 38 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30a3e:	48 8d 85 90 fa ff ff 	lea    rax,[rbp-0x570]
   30a45:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30a4c:	48 89 d6             	mov    rsi,rdx
   30a4f:	48 89 c7             	mov    rdi,rax
   30a52:	e8 db 0d 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30a57:	48 8d 85 90 fa ff ff 	lea    rax,[rbp-0x570]
   30a5e:	48 8d 15 c7 c0 00 00 	lea    rdx,[rip+0xc0c7]        # 3cb2c <NANO_SEC+0x1864>
   30a65:	48 89 d6             	mov    rsi,rdx
   30a68:	48 89 c7             	mov    rdi,rax
   30a6b:	e8 67 5c ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30a70:	89 c3                	mov    ebx,eax
   30a72:	48 8d 85 90 fa ff ff 	lea    rax,[rbp-0x570]
   30a79:	48 89 c7             	mov    rdi,rax
   30a7c:	e8 df 37 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30a81:	84 db                	test   bl,bl
   30a83:	74 45                	je     30aca <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xb1c>
   30a85:	48 8d 85 b0 fa ff ff 	lea    rax,[rbp-0x550]
   30a8c:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30a93:	48 89 d6             	mov    rsi,rdx
   30a96:	48 89 c7             	mov    rdi,rax
   30a99:	e8 38 0c 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30a9e:	48 8d 85 b0 fa ff ff 	lea    rax,[rbp-0x550]
   30aa5:	48 8d 95 90 fb ff ff 	lea    rdx,[rbp-0x470]
   30aac:	48 83 c2 78          	add    rdx,0x78
   30ab0:	48 89 c6             	mov    rsi,rax
   30ab3:	48 89 d7             	mov    rdi,rdx
   30ab6:	e8 95 3a fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   30abb:	48 8d 85 b0 fa ff ff 	lea    rax,[rbp-0x550]
   30ac2:	48 89 c7             	mov    rdi,rax
   30ac5:	e8 96 37 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30aca:	48 8d 85 d0 fa ff ff 	lea    rax,[rbp-0x530]
   30ad1:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30ad8:	48 89 d6             	mov    rsi,rdx
   30adb:	48 89 c7             	mov    rdi,rax
   30ade:	e8 4f 0d 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30ae3:	48 8d 85 d0 fa ff ff 	lea    rax,[rbp-0x530]
   30aea:	48 8d 15 42 c0 00 00 	lea    rdx,[rip+0xc042]        # 3cb33 <NANO_SEC+0x186b>
   30af1:	48 89 d6             	mov    rsi,rdx
   30af4:	48 89 c7             	mov    rdi,rax
   30af7:	e8 db 5b ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30afc:	89 c3                	mov    ebx,eax
   30afe:	48 8d 85 d0 fa ff ff 	lea    rax,[rbp-0x530]
   30b05:	48 89 c7             	mov    rdi,rax
   30b08:	e8 53 37 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30b0d:	84 db                	test   bl,bl
   30b0f:	74 48                	je     30b59 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xbab>
   30b11:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   30b18:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30b1f:	48 89 d6             	mov    rsi,rdx
   30b22:	48 89 c7             	mov    rdi,rax
   30b25:	e8 ac 0b 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30b2a:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   30b31:	48 8d 95 90 fb ff ff 	lea    rdx,[rbp-0x470]
   30b38:	48 81 c2 98 00 00 00 	add    rdx,0x98
   30b3f:	48 89 c6             	mov    rsi,rax
   30b42:	48 89 d7             	mov    rdi,rdx
   30b45:	e8 06 3a fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   30b4a:	48 8d 85 f0 fa ff ff 	lea    rax,[rbp-0x510]
   30b51:	48 89 c7             	mov    rdi,rax
   30b54:	e8 07 37 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30b59:	48 8d 85 10 fb ff ff 	lea    rax,[rbp-0x4f0]
   30b60:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30b67:	48 89 d6             	mov    rsi,rdx
   30b6a:	48 89 c7             	mov    rdi,rax
   30b6d:	e8 c0 0c 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30b72:	48 8d 85 10 fb ff ff 	lea    rax,[rbp-0x4f0]
   30b79:	48 8d 15 ba bf 00 00 	lea    rdx,[rip+0xbfba]        # 3cb3a <NANO_SEC+0x1872>
   30b80:	48 89 d6             	mov    rsi,rdx
   30b83:	48 89 c7             	mov    rdi,rax
   30b86:	e8 4c 5b ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30b8b:	89 c3                	mov    ebx,eax
   30b8d:	48 8d 85 10 fb ff ff 	lea    rax,[rbp-0x4f0]
   30b94:	48 89 c7             	mov    rdi,rax
   30b97:	e8 c4 36 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30b9c:	84 db                	test   bl,bl
   30b9e:	74 48                	je     30be8 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xc3a>
   30ba0:	48 8d 85 30 fb ff ff 	lea    rax,[rbp-0x4d0]
   30ba7:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30bae:	48 89 d6             	mov    rsi,rdx
   30bb1:	48 89 c7             	mov    rdi,rax
   30bb4:	e8 1d 0b 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30bb9:	48 8d 85 30 fb ff ff 	lea    rax,[rbp-0x4d0]
   30bc0:	48 8d 95 90 fb ff ff 	lea    rdx,[rbp-0x470]
   30bc7:	48 81 c2 b8 00 00 00 	add    rdx,0xb8
   30bce:	48 89 c6             	mov    rsi,rax
   30bd1:	48 89 d7             	mov    rdi,rdx
   30bd4:	e8 77 39 fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   30bd9:	48 8d 85 30 fb ff ff 	lea    rax,[rbp-0x4d0]
   30be0:	48 89 c7             	mov    rdi,rax
   30be3:	e8 78 36 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30be8:	48 8d 85 50 fb ff ff 	lea    rax,[rbp-0x4b0]
   30bef:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30bf6:	48 89 d6             	mov    rsi,rdx
   30bf9:	48 89 c7             	mov    rdi,rax
   30bfc:	e8 31 0c 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30c01:	48 8d 85 50 fb ff ff 	lea    rax,[rbp-0x4b0]
   30c08:	48 8d 15 32 bf 00 00 	lea    rdx,[rip+0xbf32]        # 3cb41 <NANO_SEC+0x1879>
   30c0f:	48 89 d6             	mov    rsi,rdx
   30c12:	48 89 c7             	mov    rdi,rax
   30c15:	e8 bd 5a ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30c1a:	89 c3                	mov    ebx,eax
   30c1c:	48 8d 85 50 fb ff ff 	lea    rax,[rbp-0x4b0]
   30c23:	48 89 c7             	mov    rdi,rax
   30c26:	e8 35 36 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30c2b:	84 db                	test   bl,bl
   30c2d:	74 48                	je     30c77 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xcc9>
   30c2f:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30c36:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30c3d:	48 89 d6             	mov    rsi,rdx
   30c40:	48 89 c7             	mov    rdi,rax
   30c43:	e8 8e 0a 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30c48:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30c4f:	48 8d 95 90 fb ff ff 	lea    rdx,[rbp-0x470]
   30c56:	48 81 c2 d8 00 00 00 	add    rdx,0xd8
   30c5d:	48 89 c6             	mov    rsi,rax
   30c60:	48 89 d7             	mov    rdi,rdx
   30c63:	e8 e8 38 fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   30c68:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30c6f:	48 89 c7             	mov    rdi,rax
   30c72:	e8 e9 35 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30c77:	bb 00 00 00 00       	mov    ebx,0x0
   30c7c:	41 bc 00 00 00 00    	mov    r12d,0x0
   30c82:	41 bd 00 00 00 00    	mov    r13d,0x0
   30c88:	48 8d 85 50 fb ff ff 	lea    rax,[rbp-0x4b0]
   30c8f:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30c96:	48 89 d6             	mov    rsi,rdx
   30c99:	48 89 c7             	mov    rdi,rax
   30c9c:	e8 91 0b 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30ca1:	bb 01 00 00 00       	mov    ebx,0x1
   30ca6:	48 8d 85 50 fb ff ff 	lea    rax,[rbp-0x4b0]
   30cad:	48 8d 15 93 be 00 00 	lea    rdx,[rip+0xbe93]        # 3cb47 <NANO_SEC+0x187f>
   30cb4:	48 89 d6             	mov    rsi,rdx
   30cb7:	48 89 c7             	mov    rdi,rax
   30cba:	e8 18 5a ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30cbf:	84 c0                	test   al,al
   30cc1:	75 78                	jne    30d3b <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd8d>
   30cc3:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30cca:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30cd1:	48 89 d6             	mov    rsi,rdx
   30cd4:	48 89 c7             	mov    rdi,rax
   30cd7:	e8 56 0b 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30cdc:	41 bc 01 00 00 00    	mov    r12d,0x1
   30ce2:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30ce9:	48 8d 15 60 be 00 00 	lea    rdx,[rip+0xbe60]        # 3cb50 <NANO_SEC+0x1888>
   30cf0:	48 89 d6             	mov    rsi,rdx
   30cf3:	48 89 c7             	mov    rdi,rax
   30cf6:	e8 dc 59 ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30cfb:	84 c0                	test   al,al
   30cfd:	75 3c                	jne    30d3b <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd8d>
   30cff:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30d06:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30d0d:	48 89 d6             	mov    rsi,rdx
   30d10:	48 89 c7             	mov    rdi,rax
   30d13:	e8 1a 0b 00 00       	call   31832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30d18:	41 bd 01 00 00 00    	mov    r13d,0x1
   30d1e:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30d25:	48 8d 15 2d be 00 00 	lea    rdx,[rip+0xbe2d]        # 3cb59 <NANO_SEC+0x1891>
   30d2c:	48 89 d6             	mov    rsi,rdx
   30d2f:	48 89 c7             	mov    rdi,rax
   30d32:	e8 a0 59 ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   30d37:	84 c0                	test   al,al
   30d39:	74 08                	je     30d43 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd95>
   30d3b:	41 be 01 00 00 00    	mov    r14d,0x1
   30d41:	eb 06                	jmp    30d49 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xd9b>
   30d43:	41 be 00 00 00 00    	mov    r14d,0x0
   30d49:	45 84 ed             	test   r13b,r13b
   30d4c:	74 0f                	je     30d5d <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xdaf>
   30d4e:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30d55:	48 89 c7             	mov    rdi,rax
   30d58:	e8 03 35 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30d5d:	45 84 e4             	test   r12b,r12b
   30d60:	74 0f                	je     30d71 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xdc3>
   30d62:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30d69:	48 89 c7             	mov    rdi,rax
   30d6c:	e8 ef 34 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30d71:	84 db                	test   bl,bl
   30d73:	74 0f                	je     30d84 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xdd6>
   30d75:	48 8d 85 50 fb ff ff 	lea    rax,[rbp-0x4b0]
   30d7c:	48 89 c7             	mov    rdi,rax
   30d7f:	e8 dc 34 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30d84:	45 84 f6             	test   r14b,r14b
   30d87:	74 48                	je     30dd1 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe23>
   30d89:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30d90:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30d97:	48 89 d6             	mov    rsi,rdx
   30d9a:	48 89 c7             	mov    rdi,rax
   30d9d:	e8 34 09 00 00       	call   316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   30da2:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30da9:	48 8d 95 90 fb ff ff 	lea    rdx,[rbp-0x470]
   30db0:	48 81 c2 f8 00 00 00 	add    rdx,0xf8
   30db7:	48 89 c6             	mov    rsi,rax
   30dba:	48 89 d7             	mov    rdi,rdx
   30dbd:	e8 8e 37 fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   30dc2:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30dc9:	48 89 c7             	mov    rdi,rax
   30dcc:	e8 8f 34 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30dd1:	48 8d 95 f0 f8 ff ff 	lea    rdx,[rbp-0x710]
   30dd8:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   30ddf:	48 89 d6             	mov    rsi,rdx
   30de2:	48 89 c7             	mov    rdi,rax
   30de5:	e8 a6 32 fd ff       	call   4090 <std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>
   30dea:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   30ded:	48 83 ea 18          	sub    rdx,0x18
   30df1:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
   30df4:	48 01 d0             	add    rax,rdx
   30df7:	48 89 c7             	mov    rdi,rax
   30dfa:	e8 71 37 fd ff       	call   4570 <std::basic_ios<char, std::char_traits<char> >::operator bool() const@plt>
   30dff:	84 c0                	test   al,al
   30e01:	0f 85 b4 f2 ff ff    	jne    300bb <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x10d>
   30e07:	48 8b 85 b8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x748]
   30e0e:	48 8d 50 48          	lea    rdx,[rax+0x48]
   30e12:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   30e19:	48 89 c6             	mov    rsi,rax
   30e1c:	48 89 d7             	mov    rdi,rdx
   30e1f:	e8 e6 29 00 00       	call   3380a <std::vector<objl::Material, std::allocator<objl::Material> >::push_back(objl::Material const&)>
   30e24:	48 8b 85 b8 f8 ff ff 	mov    rax,QWORD PTR [rbp-0x748]
   30e2b:	48 83 c0 48          	add    rax,0x48
   30e2f:	48 89 c7             	mov    rdi,rax
   30e32:	e8 51 2a 00 00       	call   33888 <std::vector<objl::Material, std::allocator<objl::Material> >::empty() const>
   30e37:	84 c0                	test   al,al
   30e39:	74 07                	je     30e42 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe94>
   30e3b:	bb 00 00 00 00       	mov    ebx,0x0
   30e40:	eb 05                	jmp    30e47 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xe99>
   30e42:	bb 01 00 00 00       	mov    ebx,0x1
   30e47:	48 8d 85 f0 f8 ff ff 	lea    rax,[rbp-0x710]
   30e4e:	48 89 c7             	mov    rdi,rax
   30e51:	e8 0a 34 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30e56:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   30e5d:	48 89 c7             	mov    rdi,rax
   30e60:	e8 01 05 00 00       	call   31366 <objl::Material::~Material()>
   30e65:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   30e6c:	48 89 c7             	mov    rdi,rax
   30e6f:	e8 4c 32 fd ff       	call   40c0 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@plt>
   30e74:	89 d8                	mov    eax,ebx
   30e76:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   30e7a:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   30e83:	0f 84 fc 01 00 00    	je     31085 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x10d7>
   30e89:	e9 f2 01 00 00       	jmp    31080 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x10d2>
   30e8e:	48 89 c3             	mov    rbx,rax
   30e91:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   30e98:	48 89 c7             	mov    rdi,rax
   30e9b:	e8 c0 33 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30ea0:	48 89 d8             	mov    rax,rbx
   30ea3:	48 89 c7             	mov    rdi,rax
   30ea6:	e8 b5 38 fd ff       	call   4760 <_Unwind_Resume@plt>
   30eab:	48 89 c3             	mov    rbx,rax
   30eae:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30eb5:	48 89 c7             	mov    rdi,rax
   30eb8:	e8 a3 33 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30ebd:	eb 03                	jmp    30ec2 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf14>
   30ebf:	48 89 c3             	mov    rbx,rax
   30ec2:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30ec9:	48 89 c7             	mov    rdi,rax
   30ecc:	e8 8f 33 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30ed1:	eb 03                	jmp    30ed6 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf28>
   30ed3:	48 89 c3             	mov    rbx,rax
   30ed6:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   30edd:	48 89 c7             	mov    rdi,rax
   30ee0:	e8 ab 35 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   30ee5:	eb 03                	jmp    30eea <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf3c>
   30ee7:	48 89 c3             	mov    rbx,rax
   30eea:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30ef1:	48 89 c7             	mov    rdi,rax
   30ef4:	e8 d3 55 ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   30ef9:	e9 45 01 00 00       	jmp    31043 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1095>
   30efe:	48 89 c3             	mov    rbx,rax
   30f01:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30f08:	48 89 c7             	mov    rdi,rax
   30f0b:	e8 50 33 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30f10:	eb 03                	jmp    30f15 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf67>
   30f12:	48 89 c3             	mov    rbx,rax
   30f15:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30f1c:	48 89 c7             	mov    rdi,rax
   30f1f:	e8 3c 33 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30f24:	eb 03                	jmp    30f29 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf7b>
   30f26:	48 89 c3             	mov    rbx,rax
   30f29:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   30f30:	48 89 c7             	mov    rdi,rax
   30f33:	e8 58 35 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   30f38:	eb 03                	jmp    30f3d <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf8f>
   30f3a:	48 89 c3             	mov    rbx,rax
   30f3d:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30f44:	48 89 c7             	mov    rdi,rax
   30f47:	e8 80 55 ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   30f4c:	e9 f2 00 00 00       	jmp    31043 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1095>
   30f51:	48 89 c3             	mov    rbx,rax
   30f54:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   30f5b:	48 89 c7             	mov    rdi,rax
   30f5e:	e8 fd 32 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30f63:	eb 03                	jmp    30f68 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xfba>
   30f65:	48 89 c3             	mov    rbx,rax
   30f68:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30f6f:	48 89 c7             	mov    rdi,rax
   30f72:	e8 e9 32 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30f77:	eb 03                	jmp    30f7c <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xfce>
   30f79:	48 89 c3             	mov    rbx,rax
   30f7c:	48 8d 85 ce f8 ff ff 	lea    rax,[rbp-0x732]
   30f83:	48 89 c7             	mov    rdi,rax
   30f86:	e8 05 35 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   30f8b:	eb 03                	jmp    30f90 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xfe2>
   30f8d:	48 89 c3             	mov    rbx,rax
   30f90:	48 8d 85 d0 f8 ff ff 	lea    rax,[rbp-0x730]
   30f97:	48 89 c7             	mov    rdi,rax
   30f9a:	e8 2d 55 ff ff       	call   264cc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
   30f9f:	e9 9f 00 00 00       	jmp    31043 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1095>
   30fa4:	48 89 c3             	mov    rbx,rax
   30fa7:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30fae:	48 89 c7             	mov    rdi,rax
   30fb1:	e8 aa 32 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30fb6:	e9 88 00 00 00       	jmp    31043 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1095>
   30fbb:	48 89 c3             	mov    rbx,rax
   30fbe:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30fc5:	48 89 c7             	mov    rdi,rax
   30fc8:	e8 93 32 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30fcd:	eb 74                	jmp    31043 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1095>
   30fcf:	48 89 c3             	mov    rbx,rax
   30fd2:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30fd9:	48 89 c7             	mov    rdi,rax
   30fdc:	e8 7f 32 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30fe1:	eb 60                	jmp    31043 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1095>
   30fe3:	48 89 c3             	mov    rbx,rax
   30fe6:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   30fed:	48 89 c7             	mov    rdi,rax
   30ff0:	e8 6b 32 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   30ff5:	eb 4c                	jmp    31043 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1095>
   30ff7:	49 89 c6             	mov    r14,rax
   30ffa:	45 84 ed             	test   r13b,r13b
   30ffd:	74 0f                	je     3100e <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1060>
   30fff:	48 8d 85 b0 fc ff ff 	lea    rax,[rbp-0x350]
   31006:	48 89 c7             	mov    rdi,rax
   31009:	e8 52 32 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3100e:	4d 89 f5             	mov    r13,r14
   31011:	45 84 e4             	test   r12b,r12b
   31014:	74 0f                	je     31025 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1077>
   31016:	48 8d 85 70 fb ff ff 	lea    rax,[rbp-0x490]
   3101d:	48 89 c7             	mov    rdi,rax
   31020:	e8 3b 32 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   31025:	4d 89 ec             	mov    r12,r13
   31028:	84 db                	test   bl,bl
   3102a:	74 0f                	je     3103b <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x108d>
   3102c:	48 8d 85 50 fb ff ff 	lea    rax,[rbp-0x4b0]
   31033:	48 89 c7             	mov    rdi,rax
   31036:	e8 25 32 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3103b:	4c 89 e3             	mov    rbx,r12
   3103e:	eb 03                	jmp    31043 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1095>
   31040:	48 89 c3             	mov    rbx,rax
   31043:	48 8d 85 f0 f8 ff ff 	lea    rax,[rbp-0x710]
   3104a:	48 89 c7             	mov    rdi,rax
   3104d:	e8 0e 32 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   31052:	48 8d 85 90 fb ff ff 	lea    rax,[rbp-0x470]
   31059:	48 89 c7             	mov    rdi,rax
   3105c:	e8 05 03 00 00       	call   31366 <objl::Material::~Material()>
   31061:	eb 03                	jmp    31066 <objl::Loader::LoadMaterials(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x10b8>
   31063:	48 89 c3             	mov    rbx,rax
   31066:	48 8d 85 d0 fd ff ff 	lea    rax,[rbp-0x230]
   3106d:	48 89 c7             	mov    rdi,rax
   31070:	e8 4b 30 fd ff       	call   40c0 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@plt>
   31075:	48 89 d8             	mov    rax,rbx
   31078:	48 89 c7             	mov    rdi,rax
   3107b:	e8 e0 36 fd ff       	call   4760 <_Unwind_Resume@plt>
   31080:	e8 5b 34 fd ff       	call   44e0 <__stack_chk_fail@plt>
   31085:	48 81 c4 30 07 00 00 	add    rsp,0x730
   3108c:	5b                   	pop    rbx
   3108d:	41 5c                	pop    r12
   3108f:	41 5d                	pop    r13
   31091:	41 5e                	pop    r14
   31093:	5d                   	pop    rbp
   31094:	c3                   	ret    

0000000000031095 <__static_initialization_and_destruction_0(int, int)>:
   31095:	55                   	push   rbp
   31096:	48 89 e5             	mov    rbp,rsp
   31099:	48 83 ec 10          	sub    rsp,0x10
   3109d:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
   310a0:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
   310a3:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
   310a7:	75 3b                	jne    310e4 <__static_initialization_and_destruction_0(int, int)+0x4f>
   310a9:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
   310b0:	75 32                	jne    310e4 <__static_initialization_and_destruction_0(int, int)+0x4f>
   310b2:	48 8d 05 c8 96 01 00 	lea    rax,[rip+0x196c8]        # 4a781 <std::__ioinit>
   310b9:	48 89 c7             	mov    rdi,rax
   310bc:	e8 cf 35 fd ff       	call   4690 <std::ios_base::Init::Init()@plt>
   310c1:	48 8d 05 60 93 01 00 	lea    rax,[rip+0x19360]        # 4a428 <__dso_handle>
   310c8:	48 89 c2             	mov    rdx,rax
   310cb:	48 8d 05 af 96 01 00 	lea    rax,[rip+0x196af]        # 4a781 <std::__ioinit>
   310d2:	48 89 c6             	mov    rsi,rax
   310d5:	48 8b 05 1c 8f 01 00 	mov    rax,QWORD PTR [rip+0x18f1c]        # 49ff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
   310dc:	48 89 c7             	mov    rdi,rax
   310df:	e8 ec 32 fd ff       	call   43d0 <__cxa_atexit@plt>
   310e4:	90                   	nop
   310e5:	c9                   	leave  
   310e6:	c3                   	ret    

00000000000310e7 <_GLOBAL__sub_I__ZN4objl7Vector2C2Ev>:
   310e7:	55                   	push   rbp
   310e8:	48 89 e5             	mov    rbp,rsp
   310eb:	be ff ff 00 00       	mov    esi,0xffff
   310f0:	bf 01 00 00 00       	mov    edi,0x1
   310f5:	e8 9b ff ff ff       	call   31095 <__static_initialization_and_destruction_0(int, int)>
   310fa:	5d                   	pop    rbp
   310fb:	c3                   	ret    

00000000000310fc <std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int)>:
   310fc:	55                   	push   rbp
   310fd:	48 89 e5             	mov    rbp,rsp
   31100:	48 83 ec 20          	sub    rsp,0x20
   31104:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31108:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3110c:	89 55 ec             	mov    DWORD PTR [rbp-0x14],edx
   3110f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31113:	48 89 c7             	mov    rdi,rax
   31116:	e8 35 30 fd ff       	call   4150 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const@plt>
   3111b:	48 89 c2             	mov    rdx,rax
   3111e:	8b 4d ec             	mov    ecx,DWORD PTR [rbp-0x14]
   31121:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31125:	41 89 c8             	mov    r8d,ecx
   31128:	48 89 c1             	mov    rcx,rax
   3112b:	48 8d 05 8e b9 00 00 	lea    rax,[rip+0xb98e]        # 3cac0 <NANO_SEC+0x17f8>
   31132:	48 89 c6             	mov    rsi,rax
   31135:	48 8b 05 94 8e 01 00 	mov    rax,QWORD PTR [rip+0x18e94]        # 49fd0 <strtol@GLIBC_2.2.5>
   3113c:	48 89 c7             	mov    rdi,rax
   3113f:	e8 d6 0d 00 00       	call   31f1a <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)>
   31144:	c9                   	leave  
   31145:	c3                   	ret    

0000000000031146 <std::__cxx11::stof(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*)>:
   31146:	55                   	push   rbp
   31147:	48 89 e5             	mov    rbp,rsp
   3114a:	48 83 ec 10          	sub    rsp,0x10
   3114e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31152:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   31156:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3115a:	48 89 c7             	mov    rdi,rax
   3115d:	e8 ee 2f fd ff       	call   4150 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const@plt>
   31162:	48 89 c2             	mov    rdx,rax
   31165:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31169:	48 89 c1             	mov    rcx,rax
   3116c:	48 8d 05 52 b9 00 00 	lea    rax,[rip+0xb952]        # 3cac5 <NANO_SEC+0x17fd>
   31173:	48 89 c6             	mov    rsi,rax
   31176:	48 8b 05 4b 8e 01 00 	mov    rax,QWORD PTR [rip+0x18e4b]        # 49fc8 <strtof@GLIBC_2.2.5>
   3117d:	48 89 c7             	mov    rdi,rax
   31180:	e8 fe 0e 00 00       	call   32083 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)>
   31185:	c9                   	leave  
   31186:	c3                   	ret    

0000000000031187 <std::__cxx11::to_string(int)>:
   31187:	55                   	push   rbp
   31188:	48 89 e5             	mov    rbp,rsp
   3118b:	53                   	push   rbx
   3118c:	48 83 ec 38          	sub    rsp,0x38
   31190:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   31194:	89 75 c4             	mov    DWORD PTR [rbp-0x3c],esi
   31197:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   311a0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   311a4:	31 c0                	xor    eax,eax
   311a6:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   311a9:	c1 e8 1f             	shr    eax,0x1f
   311ac:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
   311af:	80 7d df 00          	cmp    BYTE PTR [rbp-0x21],0x0
   311b3:	74 07                	je     311bc <std::__cxx11::to_string(int)+0x35>
   311b5:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   311b8:	f7 d8                	neg    eax
   311ba:	eb 03                	jmp    311bf <std::__cxx11::to_string(int)+0x38>
   311bc:	8b 45 c4             	mov    eax,DWORD PTR [rbp-0x3c]
   311bf:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   311c2:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   311c5:	be 0a 00 00 00       	mov    esi,0xa
   311ca:	89 c7                	mov    edi,eax
   311cc:	e8 b9 00 00 00       	call   3128a <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)>
   311d1:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
   311d4:	48 8d 45 de          	lea    rax,[rbp-0x22]
   311d8:	48 89 c7             	mov    rdi,rax
   311db:	e8 90 35 fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   311e0:	0f b6 55 df          	movzx  edx,BYTE PTR [rbp-0x21]
   311e4:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   311e7:	01 d0                	add    eax,edx
   311e9:	89 c6                	mov    esi,eax
   311eb:	48 8d 55 de          	lea    rdx,[rbp-0x22]
   311ef:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   311f3:	48 89 d1             	mov    rcx,rdx
   311f6:	ba 2d 00 00 00       	mov    edx,0x2d
   311fb:	48 89 c7             	mov    rdi,rax
   311fe:	e8 91 0f 00 00       	call   32194 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(unsigned long, char, std::allocator<char> const&)>
   31203:	48 8d 45 de          	lea    rax,[rbp-0x22]
   31207:	48 89 c7             	mov    rdi,rax
   3120a:	e8 81 32 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   3120f:	0f b6 55 df          	movzx  edx,BYTE PTR [rbp-0x21]
   31213:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   31217:	48 89 d6             	mov    rsi,rdx
   3121a:	48 89 c7             	mov    rdi,rax
   3121d:	e8 ee 35 fd ff       	call   4810 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)@plt>
   31222:	48 89 c1             	mov    rcx,rax
   31225:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   31228:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   3122b:	89 c6                	mov    esi,eax
   3122d:	48 89 cf             	mov    rdi,rcx
   31230:	e8 d7 0f 00 00       	call   3220c <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>
   31235:	90                   	nop
   31236:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3123a:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   31243:	74 3b                	je     31280 <std::__cxx11::to_string(int)+0xf9>
   31245:	eb 34                	jmp    3127b <std::__cxx11::to_string(int)+0xf4>
   31247:	48 89 c3             	mov    rbx,rax
   3124a:	48 8d 45 de          	lea    rax,[rbp-0x22]
   3124e:	48 89 c7             	mov    rdi,rax
   31251:	e8 3a 32 fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   31256:	48 89 d8             	mov    rax,rbx
   31259:	48 89 c7             	mov    rdi,rax
   3125c:	e8 ff 34 fd ff       	call   4760 <_Unwind_Resume@plt>
   31261:	48 89 c3             	mov    rbx,rax
   31264:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   31268:	48 89 c7             	mov    rdi,rax
   3126b:	e8 f0 2f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   31270:	48 89 d8             	mov    rax,rbx
   31273:	48 89 c7             	mov    rdi,rax
   31276:	e8 e5 34 fd ff       	call   4760 <_Unwind_Resume@plt>
   3127b:	e8 60 32 fd ff       	call   44e0 <__stack_chk_fail@plt>
   31280:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   31284:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   31288:	c9                   	leave  
   31289:	c3                   	ret    

000000000003128a <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)>:
   3128a:	55                   	push   rbp
   3128b:	48 89 e5             	mov    rbp,rsp
   3128e:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
   31291:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
   31294:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [rbp-0x14],0x1
   3129b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   3129e:	0f af c0             	imul   eax,eax
   312a1:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
   312a4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   312a7:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
   312aa:	0f af c2             	imul   eax,edx
   312ad:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   312b0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   312b3:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
   312b7:	89 c0                	mov    eax,eax
   312b9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   312bd:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   312c0:	39 45 dc             	cmp    DWORD PTR [rbp-0x24],eax
   312c3:	73 05                	jae    312ca <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x40>
   312c5:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   312c8:	eb 46                	jmp    31310 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x86>
   312ca:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   312cd:	3b 45 f0             	cmp    eax,DWORD PTR [rbp-0x10]
   312d0:	73 08                	jae    312da <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x50>
   312d2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   312d5:	83 c0 01             	add    eax,0x1
   312d8:	eb 36                	jmp    31310 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x86>
   312da:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   312dd:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
   312e0:	73 08                	jae    312ea <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x60>
   312e2:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   312e5:	83 c0 02             	add    eax,0x2
   312e8:	eb 26                	jmp    31310 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x86>
   312ea:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   312ed:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
   312f1:	76 08                	jbe    312fb <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x71>
   312f3:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
   312f6:	83 c0 03             	add    eax,0x3
   312f9:	eb 15                	jmp    31310 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x86>
   312fb:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
   312fe:	ba 00 00 00 00       	mov    edx,0x0
   31303:	48 f7 75 f8          	div    QWORD PTR [rbp-0x8]
   31307:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
   3130a:	83 45 ec 04          	add    DWORD PTR [rbp-0x14],0x4
   3130e:	eb ad                	jmp    312bd <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x33>
   31310:	5d                   	pop    rbp
   31311:	c3                   	ret    

0000000000031312 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::~_Vector_impl()>:
   31312:	55                   	push   rbp
   31313:	48 89 e5             	mov    rbp,rsp
   31316:	48 83 ec 10          	sub    rsp,0x10
   3131a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3131e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31322:	48 89 c7             	mov    rdi,rax
   31325:	e8 38 11 00 00       	call   32462 <std::allocator<objl::Vertex>::~allocator()>
   3132a:	90                   	nop
   3132b:	c9                   	leave  
   3132c:	c3                   	ret    
   3132d:	90                   	nop

000000000003132e <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base()>:
   3132e:	55                   	push   rbp
   3132f:	48 89 e5             	mov    rbp,rsp
   31332:	48 83 ec 10          	sub    rsp,0x10
   31336:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3133a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3133e:	48 89 c7             	mov    rdi,rax
   31341:	e8 f4 10 00 00       	call   3243a <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::_Vector_impl()>
   31346:	90                   	nop
   31347:	c9                   	leave  
   31348:	c3                   	ret    
   31349:	90                   	nop

000000000003134a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector()>:
   3134a:	55                   	push   rbp
   3134b:	48 89 e5             	mov    rbp,rsp
   3134e:	48 83 ec 10          	sub    rsp,0x10
   31352:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31356:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3135a:	48 89 c7             	mov    rdi,rax
   3135d:	e8 cc ff ff ff       	call   3132e <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base()>
   31362:	90                   	nop
   31363:	c9                   	leave  
   31364:	c3                   	ret    
   31365:	90                   	nop

0000000000031366 <objl::Material::~Material()>:
   31366:	55                   	push   rbp
   31367:	48 89 e5             	mov    rbp,rsp
   3136a:	48 83 ec 10          	sub    rsp,0x10
   3136e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31372:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31376:	48 05 f8 00 00 00    	add    rax,0xf8
   3137c:	48 89 c7             	mov    rdi,rax
   3137f:	e8 dc 2e fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   31384:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31388:	48 05 d8 00 00 00    	add    rax,0xd8
   3138e:	48 89 c7             	mov    rdi,rax
   31391:	e8 ca 2e fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   31396:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3139a:	48 05 b8 00 00 00    	add    rax,0xb8
   313a0:	48 89 c7             	mov    rdi,rax
   313a3:	e8 b8 2e fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   313a8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   313ac:	48 05 98 00 00 00    	add    rax,0x98
   313b2:	48 89 c7             	mov    rdi,rax
   313b5:	e8 a6 2e fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   313ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   313be:	48 83 c0 78          	add    rax,0x78
   313c2:	48 89 c7             	mov    rdi,rax
   313c5:	e8 96 2e fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   313ca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   313ce:	48 83 c0 58          	add    rax,0x58
   313d2:	48 89 c7             	mov    rdi,rax
   313d5:	e8 86 2e fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   313da:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   313de:	48 89 c7             	mov    rdi,rax
   313e1:	e8 7a 2e fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   313e6:	90                   	nop
   313e7:	c9                   	leave  
   313e8:	c3                   	ret    

00000000000313e9 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>:
   313e9:	55                   	push   rbp
   313ea:	48 89 e5             	mov    rbp,rsp
   313ed:	53                   	push   rbx
   313ee:	48 81 ec a8 00 00 00 	sub    rsp,0xa8
   313f5:	48 89 bd 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rdi
   313fc:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
   31403:	48 89 95 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rdx
   3140a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   31413:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   31417:	31 c0                	xor    eax,eax
   31419:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   31420:	48 89 c7             	mov    rdi,rax
   31423:	e8 2c 17 00 00       	call   32b54 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::clear()>
   31428:	48 8d 45 80          	lea    rax,[rbp-0x80]
   3142c:	48 89 c7             	mov    rdi,rax
   3142f:	e8 ec 31 fd ff       	call   4620 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
   31434:	c7 85 7c ff ff ff 00 00 00 00 	mov    DWORD PTR [rbp-0x84],0x0
   3143e:	e9 ea 01 00 00       	jmp    3162d <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x244>
   31443:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   3144a:	48 89 c7             	mov    rdi,rax
   3144d:	e8 5e 2e fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   31452:	48 89 c1             	mov    rcx,rax
   31455:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   3145b:	48 63 d0             	movsxd rdx,eax
   3145e:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   31462:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
   31469:	48 89 c7             	mov    rdi,rax
   3146c:	e8 df 2f fd ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   31471:	48 8b 95 58 ff ff ff 	mov    rdx,QWORD PTR [rbp-0xa8]
   31478:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   3147c:	48 89 d6             	mov    rsi,rdx
   3147f:	48 89 c7             	mov    rdi,rax
   31482:	e8 f1 52 ff ff       	call   26778 <__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   31487:	84 c0                	test   al,al
   31489:	0f 84 b4 00 00 00    	je     31543 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x15a>
   3148f:	48 8d 45 80          	lea    rax,[rbp-0x80]
   31493:	48 89 c7             	mov    rdi,rax
   31496:	e8 95 32 fd ff       	call   4730 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const@plt>
   3149b:	83 f0 01             	xor    eax,0x1
   3149e:	84 c0                	test   al,al
   314a0:	74 3f                	je     314e1 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf8>
   314a2:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   314a6:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   314ad:	48 89 d6             	mov    rsi,rdx
   314b0:	48 89 c7             	mov    rdi,rax
   314b3:	e8 ea 53 ff ff       	call   268a2 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   314b8:	48 8d 45 80          	lea    rax,[rbp-0x80]
   314bc:	48 89 c7             	mov    rdi,rax
   314bf:	e8 fc 30 fd ff       	call   45c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()@plt>
   314c4:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   314cb:	48 89 c7             	mov    rdi,rax
   314ce:	e8 dd 2d fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   314d3:	83 e8 01             	sub    eax,0x1
   314d6:	01 85 7c ff ff ff    	add    DWORD PTR [rbp-0x84],eax
   314dc:	e9 2f 01 00 00       	jmp    31610 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x227>
   314e1:	48 8d 85 7b ff ff ff 	lea    rax,[rbp-0x85]
   314e8:	48 89 c7             	mov    rdi,rax
   314eb:	e8 80 32 fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   314f0:	48 8d 95 7b ff ff ff 	lea    rdx,[rbp-0x85]
   314f7:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   314fb:	48 8d 0d c8 b5 00 00 	lea    rcx,[rip+0xb5c8]        # 3caca <NANO_SEC+0x1802>
   31502:	48 89 ce             	mov    rsi,rcx
   31505:	48 89 c7             	mov    rdi,rax
   31508:	e8 4d 45 ff ff       	call   25a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   3150d:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   31511:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   31518:	48 89 d6             	mov    rsi,rdx
   3151b:	48 89 c7             	mov    rdi,rax
   3151e:	e8 57 16 00 00       	call   32b7a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   31523:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   31527:	48 89 c7             	mov    rdi,rax
   3152a:	e8 31 2d fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3152f:	48 8d 85 7b ff ff ff 	lea    rax,[rbp-0x85]
   31536:	48 89 c7             	mov    rdi,rax
   31539:	e8 52 2f fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   3153e:	e9 cd 00 00 00       	jmp    31610 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x227>
   31543:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   31549:	48 63 d8             	movsxd rbx,eax
   3154c:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   31553:	48 89 c7             	mov    rdi,rax
   31556:	e8 55 2d fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   3155b:	48 01 c3             	add    rbx,rax
   3155e:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   31565:	48 89 c7             	mov    rdi,rax
   31568:	e8 43 2d fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   3156d:	48 39 c3             	cmp    rbx,rax
   31570:	0f 93 c0             	setae  al
   31573:	84 c0                	test   al,al
   31575:	74 6a                	je     315e1 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x1f8>
   31577:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
   3157e:	48 89 c7             	mov    rdi,rax
   31581:	e8 2a 2d fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   31586:	48 89 c1             	mov    rcx,rax
   31589:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   3158f:	48 63 d0             	movsxd rdx,eax
   31592:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   31596:	48 8b b5 68 ff ff ff 	mov    rsi,QWORD PTR [rbp-0x98]
   3159d:	48 89 c7             	mov    rdi,rax
   315a0:	e8 ab 2e fd ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   315a5:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   315a9:	48 8d 45 80          	lea    rax,[rbp-0x80]
   315ad:	48 89 d6             	mov    rsi,rdx
   315b0:	48 89 c7             	mov    rdi,rax
   315b3:	e8 d8 2f fd ff       	call   4590 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   315b8:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   315bc:	48 89 c7             	mov    rdi,rax
   315bf:	e8 9c 2c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   315c4:	48 8d 55 80          	lea    rdx,[rbp-0x80]
   315c8:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
   315cf:	48 89 d6             	mov    rsi,rdx
   315d2:	48 89 c7             	mov    rdi,rax
   315d5:	e8 c8 52 ff ff       	call   268a2 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
   315da:	bb 00 00 00 00       	mov    ebx,0x0
   315df:	eb 34                	jmp    31615 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x22c>
   315e1:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
   315e7:	48 63 d0             	movsxd rdx,eax
   315ea:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   315f1:	48 89 d6             	mov    rsi,rdx
   315f4:	48 89 c7             	mov    rdi,rax
   315f7:	e8 b4 2e fd ff       	call   44b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const@plt>
   315fc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
   315ff:	0f be d0             	movsx  edx,al
   31602:	48 8d 45 80          	lea    rax,[rbp-0x80]
   31606:	89 d6                	mov    esi,edx
   31608:	48 89 c7             	mov    rdi,rax
   3160b:	e8 60 2c fd ff       	call   4270 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)@plt>
   31610:	bb 01 00 00 00       	mov    ebx,0x1
   31615:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   31619:	48 89 c7             	mov    rdi,rax
   3161c:	e8 3f 2c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   31621:	83 fb 01             	cmp    ebx,0x1
   31624:	75 27                	jne    3164d <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x264>
   31626:	83 85 7c ff ff ff 01 	add    DWORD PTR [rbp-0x84],0x1
   3162d:	48 8b 85 68 ff ff ff 	mov    rax,QWORD PTR [rbp-0x98]
   31634:	48 89 c7             	mov    rdi,rax
   31637:	e8 74 2c fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   3163c:	39 85 7c ff ff ff    	cmp    DWORD PTR [rbp-0x84],eax
   31642:	0f 9c c0             	setl   al
   31645:	84 c0                	test   al,al
   31647:	0f 85 f6 fd ff ff    	jne    31443 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x5a>
   3164d:	48 8d 45 80          	lea    rax,[rbp-0x80]
   31651:	48 89 c7             	mov    rdi,rax
   31654:	e8 07 2c fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   31659:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3165d:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   31666:	74 68                	je     316d0 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2e7>
   31668:	eb 61                	jmp    316cb <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2e2>
   3166a:	48 89 c3             	mov    rbx,rax
   3166d:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   31671:	48 89 c7             	mov    rdi,rax
   31674:	e8 e7 2b fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   31679:	eb 03                	jmp    3167e <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x295>
   3167b:	48 89 c3             	mov    rbx,rax
   3167e:	48 8d 85 7b ff ff ff 	lea    rax,[rbp-0x85]
   31685:	48 89 c7             	mov    rdi,rax
   31688:	e8 03 2e fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   3168d:	eb 14                	jmp    316a3 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2ba>
   3168f:	48 89 c3             	mov    rbx,rax
   31692:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   31696:	48 89 c7             	mov    rdi,rax
   31699:	e8 c2 2b fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3169e:	eb 03                	jmp    316a3 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2ba>
   316a0:	48 89 c3             	mov    rbx,rax
   316a3:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   316a7:	48 89 c7             	mov    rdi,rax
   316aa:	e8 b1 2b fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   316af:	eb 03                	jmp    316b4 <objl::algorithm::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x2cb>
   316b1:	48 89 c3             	mov    rbx,rax
   316b4:	48 8d 45 80          	lea    rax,[rbp-0x80]
   316b8:	48 89 c7             	mov    rdi,rax
   316bb:	e8 a0 2b fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   316c0:	48 89 d8             	mov    rax,rbx
   316c3:	48 89 c7             	mov    rdi,rax
   316c6:	e8 95 30 fd ff       	call   4760 <_Unwind_Resume@plt>
   316cb:	e8 10 2e fd ff       	call   44e0 <__stack_chk_fail@plt>
   316d0:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   316d4:	c9                   	leave  
   316d5:	c3                   	ret    

00000000000316d6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   316d6:	55                   	push   rbp
   316d7:	48 89 e5             	mov    rbp,rsp
   316da:	53                   	push   rbx
   316db:	48 83 ec 48          	sub    rsp,0x48
   316df:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   316e3:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   316e7:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   316f0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   316f4:	31 c0                	xor    eax,eax
   316f6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   316fa:	ba 00 00 00 00       	mov    edx,0x0
   316ff:	48 8d 0d c5 b3 00 00 	lea    rcx,[rip+0xb3c5]        # 3cacb <NANO_SEC+0x1803>
   31706:	48 89 ce             	mov    rsi,rcx
   31709:	48 89 c7             	mov    rdi,rax
   3170c:	e8 1f 2b fd ff       	call   4230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const@plt>
   31711:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   31715:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   31719:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   3171d:	48 8d 0d a7 b3 00 00 	lea    rcx,[rip+0xb3a7]        # 3cacb <NANO_SEC+0x1803>
   31724:	48 89 ce             	mov    rsi,rcx
   31727:	48 89 c7             	mov    rdi,rax
   3172a:	e8 91 2a fd ff       	call   41c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const@plt>
   3172f:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   31733:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   31737:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   3173b:	48 8d 0d 89 b3 00 00 	lea    rcx,[rip+0xb389]        # 3cacb <NANO_SEC+0x1803>
   31742:	48 89 ce             	mov    rsi,rcx
   31745:	48 89 c7             	mov    rdi,rax
   31748:	e8 e3 2a fd ff       	call   4230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const@plt>
   3174d:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   31751:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   31755:	48 c7 c2 ff ff ff ff 	mov    rdx,0xffffffffffffffff
   3175c:	48 8d 0d 68 b3 00 00 	lea    rcx,[rip+0xb368]        # 3cacb <NANO_SEC+0x1803>
   31763:	48 89 ce             	mov    rsi,rcx
   31766:	48 89 c7             	mov    rdi,rax
   31769:	e8 22 30 fd ff       	call   4790 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long) const@plt>
   3176e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   31772:	48 83 7d d8 ff       	cmp    QWORD PTR [rbp-0x28],0xffffffffffffffff
   31777:	74 29                	je     317a2 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc>
   31779:	48 83 7d e0 ff       	cmp    QWORD PTR [rbp-0x20],0xffffffffffffffff
   3177e:	74 22                	je     317a2 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc>
   31780:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   31784:	48 2b 45 d8          	sub    rax,QWORD PTR [rbp-0x28]
   31788:	48 8d 48 01          	lea    rcx,[rax+0x1]
   3178c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   31790:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   31794:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
   31798:	48 89 c7             	mov    rdi,rax
   3179b:	e8 b0 2c fd ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   317a0:	eb 72                	jmp    31814 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x13e>
   317a2:	48 83 7d d8 ff       	cmp    QWORD PTR [rbp-0x28],0xffffffffffffffff
   317a7:	74 1d                	je     317c6 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf0>
   317a9:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   317ad:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   317b1:	48 8b 75 b0          	mov    rsi,QWORD PTR [rbp-0x50]
   317b5:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
   317bc:	48 89 c7             	mov    rdi,rax
   317bf:	e8 8c 2c fd ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   317c4:	eb 4e                	jmp    31814 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x13e>
   317c6:	48 8d 45 c7          	lea    rax,[rbp-0x39]
   317ca:	48 89 c7             	mov    rdi,rax
   317cd:	e8 9e 2f fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   317d2:	48 8d 55 c7          	lea    rdx,[rbp-0x39]
   317d6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   317da:	48 8d 0d e9 b2 00 00 	lea    rcx,[rip+0xb2e9]        # 3caca <NANO_SEC+0x1802>
   317e1:	48 89 ce             	mov    rsi,rcx
   317e4:	48 89 c7             	mov    rdi,rax
   317e7:	e8 6e 42 ff ff       	call   25a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   317ec:	48 8d 45 c7          	lea    rax,[rbp-0x39]
   317f0:	48 89 c7             	mov    rdi,rax
   317f3:	e8 98 2c fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   317f8:	eb 1a                	jmp    31814 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x13e>
   317fa:	48 89 c3             	mov    rbx,rax
   317fd:	48 8d 45 c7          	lea    rax,[rbp-0x39]
   31801:	48 89 c7             	mov    rdi,rax
   31804:	e8 87 2c fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   31809:	48 89 d8             	mov    rax,rbx
   3180c:	48 89 c7             	mov    rdi,rax
   3180f:	e8 4c 2f fd ff       	call   4760 <_Unwind_Resume@plt>
   31814:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   31818:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   31821:	74 05                	je     31828 <objl::algorithm::tail(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x152>
   31823:	e8 b8 2c fd ff       	call   44e0 <__stack_chk_fail@plt>
   31828:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   3182c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   31830:	c9                   	leave  
   31831:	c3                   	ret    

0000000000031832 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   31832:	55                   	push   rbp
   31833:	48 89 e5             	mov    rbp,rsp
   31836:	53                   	push   rbx
   31837:	48 83 ec 38          	sub    rsp,0x38
   3183b:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   3183f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   31843:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3184c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   31850:	31 c0                	xor    eax,eax
   31852:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   31856:	48 89 c7             	mov    rdi,rax
   31859:	e8 d2 2e fd ff       	call   4730 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const@plt>
   3185e:	83 f0 01             	xor    eax,0x1
   31861:	84 c0                	test   al,al
   31863:	0f 84 90 00 00 00    	je     318f9 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc7>
   31869:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3186d:	ba 00 00 00 00       	mov    edx,0x0
   31872:	48 8d 0d 52 b2 00 00 	lea    rcx,[rip+0xb252]        # 3cacb <NANO_SEC+0x1803>
   31879:	48 89 ce             	mov    rsi,rcx
   3187c:	48 89 c7             	mov    rdi,rax
   3187f:	e8 ac 29 fd ff       	call   4230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const@plt>
   31884:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   31888:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   3188c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   31890:	48 8d 0d 34 b2 00 00 	lea    rcx,[rip+0xb234]        # 3cacb <NANO_SEC+0x1803>
   31897:	48 89 ce             	mov    rsi,rcx
   3189a:	48 89 c7             	mov    rdi,rax
   3189d:	e8 1e 29 fd ff       	call   41c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const@plt>
   318a2:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   318a6:	48 83 7d d8 ff       	cmp    QWORD PTR [rbp-0x28],0xffffffffffffffff
   318ab:	74 28                	je     318d5 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa3>
   318ad:	48 83 7d e0 ff       	cmp    QWORD PTR [rbp-0x20],0xffffffffffffffff
   318b2:	74 21                	je     318d5 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa3>
   318b4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   318b8:	48 2b 45 d8          	sub    rax,QWORD PTR [rbp-0x28]
   318bc:	48 89 c1             	mov    rcx,rax
   318bf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   318c3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   318c7:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   318cb:	48 89 c7             	mov    rdi,rax
   318ce:	e8 7d 2b fd ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   318d3:	eb 72                	jmp    31947 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x115>
   318d5:	48 83 7d d8 ff       	cmp    QWORD PTR [rbp-0x28],0xffffffffffffffff
   318da:	74 1d                	je     318f9 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc7>
   318dc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   318e0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   318e4:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   318e8:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
   318ef:	48 89 c7             	mov    rdi,rax
   318f2:	e8 59 2b fd ff       	call   4450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const@plt>
   318f7:	eb 4e                	jmp    31947 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x115>
   318f9:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   318fd:	48 89 c7             	mov    rdi,rax
   31900:	e8 6b 2e fd ff       	call   4770 <std::allocator<char>::allocator()@plt>
   31905:	48 8d 55 d7          	lea    rdx,[rbp-0x29]
   31909:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3190d:	48 8d 0d b6 b1 00 00 	lea    rcx,[rip+0xb1b6]        # 3caca <NANO_SEC+0x1802>
   31914:	48 89 ce             	mov    rsi,rcx
   31917:	48 89 c7             	mov    rdi,rax
   3191a:	e8 3b 41 ff ff       	call   25a5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)>
   3191f:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   31923:	48 89 c7             	mov    rdi,rax
   31926:	e8 65 2b fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   3192b:	eb 1a                	jmp    31947 <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x115>
   3192d:	48 89 c3             	mov    rbx,rax
   31930:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   31934:	48 89 c7             	mov    rdi,rax
   31937:	e8 54 2b fd ff       	call   4490 <std::allocator<char>::~allocator()@plt>
   3193c:	48 89 d8             	mov    rax,rbx
   3193f:	48 89 c7             	mov    rdi,rax
   31942:	e8 19 2e fd ff       	call   4760 <_Unwind_Resume@plt>
   31947:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3194b:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   31954:	74 05                	je     3195b <objl::algorithm::firstToken(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x129>
   31956:	e8 85 2b fd ff       	call   44e0 <__stack_chk_fail@plt>
   3195b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3195f:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   31963:	c9                   	leave  
   31964:	c3                   	ret    
   31965:	90                   	nop

0000000000031966 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_impl::~_Vector_impl()>:
   31966:	55                   	push   rbp
   31967:	48 89 e5             	mov    rbp,rsp
   3196a:	48 83 ec 10          	sub    rsp,0x10
   3196e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31972:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31976:	48 89 c7             	mov    rdi,rax
   31979:	e8 56 12 00 00       	call   32bd4 <std::allocator<objl::Mesh>::~allocator()>
   3197e:	90                   	nop
   3197f:	c9                   	leave  
   31980:	c3                   	ret    
   31981:	90                   	nop

0000000000031982 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_base()>:
   31982:	55                   	push   rbp
   31983:	48 89 e5             	mov    rbp,rsp
   31986:	48 83 ec 10          	sub    rsp,0x10
   3198a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3198e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31992:	48 89 c7             	mov    rdi,rax
   31995:	e8 12 12 00 00       	call   32bac <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_impl::_Vector_impl()>
   3199a:	90                   	nop
   3199b:	c9                   	leave  
   3199c:	c3                   	ret    
   3199d:	90                   	nop

000000000003199e <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::vector()>:
   3199e:	55                   	push   rbp
   3199f:	48 89 e5             	mov    rbp,rsp
   319a2:	48 83 ec 10          	sub    rsp,0x10
   319a6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   319aa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   319ae:	48 89 c7             	mov    rdi,rax
   319b1:	e8 cc ff ff ff       	call   31982 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_base()>
   319b6:	90                   	nop
   319b7:	c9                   	leave  
   319b8:	c3                   	ret    
   319b9:	90                   	nop

00000000000319ba <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_impl::~_Vector_impl()>:
   319ba:	55                   	push   rbp
   319bb:	48 89 e5             	mov    rbp,rsp
   319be:	48 83 ec 10          	sub    rsp,0x10
   319c2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   319c6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   319ca:	48 89 c7             	mov    rdi,rax
   319cd:	e8 e8 12 00 00       	call   32cba <std::allocator<objl::Material>::~allocator()>
   319d2:	90                   	nop
   319d3:	c9                   	leave  
   319d4:	c3                   	ret    
   319d5:	90                   	nop

00000000000319d6 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_base()>:
   319d6:	55                   	push   rbp
   319d7:	48 89 e5             	mov    rbp,rsp
   319da:	48 83 ec 10          	sub    rsp,0x10
   319de:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   319e2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   319e6:	48 89 c7             	mov    rdi,rax
   319e9:	e8 a4 12 00 00       	call   32c92 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_impl::_Vector_impl()>
   319ee:	90                   	nop
   319ef:	c9                   	leave  
   319f0:	c3                   	ret    
   319f1:	90                   	nop

00000000000319f2 <std::vector<objl::Material, std::allocator<objl::Material> >::vector()>:
   319f2:	55                   	push   rbp
   319f3:	48 89 e5             	mov    rbp,rsp
   319f6:	48 83 ec 10          	sub    rsp,0x10
   319fa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   319fe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31a02:	48 89 c7             	mov    rdi,rax
   31a05:	e8 cc ff ff ff       	call   319d6 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_base()>
   31a0a:	90                   	nop
   31a0b:	c9                   	leave  
   31a0c:	c3                   	ret    
   31a0d:	90                   	nop

0000000000031a0e <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_impl::~_Vector_impl()>:
   31a0e:	55                   	push   rbp
   31a0f:	48 89 e5             	mov    rbp,rsp
   31a12:	48 83 ec 10          	sub    rsp,0x10
   31a16:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31a1a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31a1e:	48 89 c7             	mov    rdi,rax
   31a21:	e8 14 14 00 00       	call   32e3a <std::allocator<objl::Vector3>::~allocator()>
   31a26:	90                   	nop
   31a27:	c9                   	leave  
   31a28:	c3                   	ret    
   31a29:	90                   	nop

0000000000031a2a <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_base()>:
   31a2a:	55                   	push   rbp
   31a2b:	48 89 e5             	mov    rbp,rsp
   31a2e:	48 83 ec 10          	sub    rsp,0x10
   31a32:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31a36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31a3a:	48 89 c7             	mov    rdi,rax
   31a3d:	e8 d0 13 00 00       	call   32e12 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_impl::_Vector_impl()>
   31a42:	90                   	nop
   31a43:	c9                   	leave  
   31a44:	c3                   	ret    
   31a45:	90                   	nop

0000000000031a46 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::vector()>:
   31a46:	55                   	push   rbp
   31a47:	48 89 e5             	mov    rbp,rsp
   31a4a:	48 83 ec 10          	sub    rsp,0x10
   31a4e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31a52:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31a56:	48 89 c7             	mov    rdi,rax
   31a59:	e8 cc ff ff ff       	call   31a2a <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_base()>
   31a5e:	90                   	nop
   31a5f:	c9                   	leave  
   31a60:	c3                   	ret    
   31a61:	90                   	nop

0000000000031a62 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_impl::~_Vector_impl()>:
   31a62:	55                   	push   rbp
   31a63:	48 89 e5             	mov    rbp,rsp
   31a66:	48 83 ec 10          	sub    rsp,0x10
   31a6a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31a6e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31a72:	48 89 c7             	mov    rdi,rax
   31a75:	e8 a6 14 00 00       	call   32f20 <std::allocator<objl::Vector2>::~allocator()>
   31a7a:	90                   	nop
   31a7b:	c9                   	leave  
   31a7c:	c3                   	ret    
   31a7d:	90                   	nop

0000000000031a7e <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_base()>:
   31a7e:	55                   	push   rbp
   31a7f:	48 89 e5             	mov    rbp,rsp
   31a82:	48 83 ec 10          	sub    rsp,0x10
   31a86:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31a8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31a8e:	48 89 c7             	mov    rdi,rax
   31a91:	e8 62 14 00 00       	call   32ef8 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_impl::_Vector_impl()>
   31a96:	90                   	nop
   31a97:	c9                   	leave  
   31a98:	c3                   	ret    
   31a99:	90                   	nop

0000000000031a9a <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::vector()>:
   31a9a:	55                   	push   rbp
   31a9b:	48 89 e5             	mov    rbp,rsp
   31a9e:	48 83 ec 10          	sub    rsp,0x10
   31aa2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31aa6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31aaa:	48 89 c7             	mov    rdi,rax
   31aad:	e8 cc ff ff ff       	call   31a7e <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_base()>
   31ab2:	90                   	nop
   31ab3:	c9                   	leave  
   31ab4:	c3                   	ret    
   31ab5:	90                   	nop

0000000000031ab6 <objl::Mesh::~Mesh()>:
   31ab6:	55                   	push   rbp
   31ab7:	48 89 e5             	mov    rbp,rsp
   31aba:	48 83 ec 10          	sub    rsp,0x10
   31abe:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31ac2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31ac6:	48 83 c0 50          	add    rax,0x50
   31aca:	48 89 c7             	mov    rdi,rax
   31acd:	e8 94 f8 ff ff       	call   31366 <objl::Material::~Material()>
   31ad2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31ad6:	48 83 c0 38          	add    rax,0x38
   31ada:	48 89 c7             	mov    rdi,rax
   31add:	e8 e2 52 ff ff       	call   26dc4 <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   31ae2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31ae6:	48 83 c0 20          	add    rax,0x20
   31aea:	48 89 c7             	mov    rdi,rax
   31aed:	e8 da 09 00 00       	call   324cc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   31af2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31af6:	48 89 c7             	mov    rdi,rax
   31af9:	e8 62 27 fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   31afe:	90                   	nop
   31aff:	c9                   	leave  
   31b00:	c3                   	ret    

0000000000031b01 <__gnu_cxx::__alloc_traits<std::allocator<objl::Vertex>, objl::Vertex>::_S_always_equal()>:
   31b01:	55                   	push   rbp
   31b02:	48 89 e5             	mov    rbp,rsp
   31b05:	b8 01 00 00 00       	mov    eax,0x1
   31b0a:	5d                   	pop    rbp
   31b0b:	c3                   	ret    

0000000000031b0c <__gnu_cxx::__alloc_traits<std::allocator<unsigned int>, unsigned int>::_S_always_equal()>:
   31b0c:	55                   	push   rbp
   31b0d:	48 89 e5             	mov    rbp,rsp
   31b10:	b8 01 00 00 00       	mov    eax,0x1
   31b15:	5d                   	pop    rbp
   31b16:	c3                   	ret    
   31b17:	90                   	nop

0000000000031b18 <objl::Material::operator=(objl::Material&&)>:
   31b18:	55                   	push   rbp
   31b19:	48 89 e5             	mov    rbp,rsp
   31b1c:	48 83 ec 10          	sub    rsp,0x10
   31b20:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31b24:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   31b28:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31b2c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31b30:	48 89 d6             	mov    rsi,rdx
   31b33:	48 89 c7             	mov    rdi,rax
   31b36:	e8 15 2a fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31b3b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31b3f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31b43:	48 8b 4a 20          	mov    rcx,QWORD PTR [rdx+0x20]
   31b47:	48 89 48 20          	mov    QWORD PTR [rax+0x20],rcx
   31b4b:	8b 52 28             	mov    edx,DWORD PTR [rdx+0x28]
   31b4e:	89 50 28             	mov    DWORD PTR [rax+0x28],edx
   31b51:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31b55:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31b59:	48 8b 4a 2c          	mov    rcx,QWORD PTR [rdx+0x2c]
   31b5d:	48 89 48 2c          	mov    QWORD PTR [rax+0x2c],rcx
   31b61:	8b 52 34             	mov    edx,DWORD PTR [rdx+0x34]
   31b64:	89 50 34             	mov    DWORD PTR [rax+0x34],edx
   31b67:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31b6b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31b6f:	48 8b 4a 38          	mov    rcx,QWORD PTR [rdx+0x38]
   31b73:	48 89 48 38          	mov    QWORD PTR [rax+0x38],rcx
   31b77:	8b 52 40             	mov    edx,DWORD PTR [rdx+0x40]
   31b7a:	89 50 40             	mov    DWORD PTR [rax+0x40],edx
   31b7d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31b81:	f3 0f 10 40 44       	movss  xmm0,DWORD PTR [rax+0x44]
   31b86:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31b8a:	f3 0f 11 40 44       	movss  DWORD PTR [rax+0x44],xmm0
   31b8f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31b93:	f3 0f 10 40 48       	movss  xmm0,DWORD PTR [rax+0x48]
   31b98:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31b9c:	f3 0f 11 40 48       	movss  DWORD PTR [rax+0x48],xmm0
   31ba1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31ba5:	f3 0f 10 40 4c       	movss  xmm0,DWORD PTR [rax+0x4c]
   31baa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31bae:	f3 0f 11 40 4c       	movss  DWORD PTR [rax+0x4c],xmm0
   31bb3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31bb7:	8b 50 50             	mov    edx,DWORD PTR [rax+0x50]
   31bba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31bbe:	89 50 50             	mov    DWORD PTR [rax+0x50],edx
   31bc1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31bc5:	48 8d 50 58          	lea    rdx,[rax+0x58]
   31bc9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31bcd:	48 83 c0 58          	add    rax,0x58
   31bd1:	48 89 d6             	mov    rsi,rdx
   31bd4:	48 89 c7             	mov    rdi,rax
   31bd7:	e8 74 29 fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31bdc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31be0:	48 8d 50 78          	lea    rdx,[rax+0x78]
   31be4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31be8:	48 83 c0 78          	add    rax,0x78
   31bec:	48 89 d6             	mov    rsi,rdx
   31bef:	48 89 c7             	mov    rdi,rax
   31bf2:	e8 59 29 fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31bf7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31bfb:	48 8d 90 98 00 00 00 	lea    rdx,[rax+0x98]
   31c02:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c06:	48 05 98 00 00 00    	add    rax,0x98
   31c0c:	48 89 d6             	mov    rsi,rdx
   31c0f:	48 89 c7             	mov    rdi,rax
   31c12:	e8 39 29 fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31c17:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31c1b:	48 8d 90 b8 00 00 00 	lea    rdx,[rax+0xb8]
   31c22:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c26:	48 05 b8 00 00 00    	add    rax,0xb8
   31c2c:	48 89 d6             	mov    rsi,rdx
   31c2f:	48 89 c7             	mov    rdi,rax
   31c32:	e8 19 29 fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31c37:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31c3b:	48 8d 90 d8 00 00 00 	lea    rdx,[rax+0xd8]
   31c42:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c46:	48 05 d8 00 00 00    	add    rax,0xd8
   31c4c:	48 89 d6             	mov    rsi,rdx
   31c4f:	48 89 c7             	mov    rdi,rax
   31c52:	e8 f9 28 fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31c57:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31c5b:	48 8d 90 f8 00 00 00 	lea    rdx,[rax+0xf8]
   31c62:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c66:	48 05 f8 00 00 00    	add    rax,0xf8
   31c6c:	48 89 d6             	mov    rsi,rdx
   31c6f:	48 89 c7             	mov    rdi,rax
   31c72:	e8 d9 28 fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31c77:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c7b:	c9                   	leave  
   31c7c:	c3                   	ret    
   31c7d:	90                   	nop

0000000000031c7e <objl::Mesh::operator=(objl::Mesh&&)>:
   31c7e:	55                   	push   rbp
   31c7f:	48 89 e5             	mov    rbp,rsp
   31c82:	48 83 ec 10          	sub    rsp,0x10
   31c86:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31c8a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   31c8e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31c92:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31c96:	48 89 d6             	mov    rsi,rdx
   31c99:	48 89 c7             	mov    rdi,rax
   31c9c:	e8 af 28 fd ff       	call   4550 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   31ca1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31ca5:	48 8d 50 20          	lea    rdx,[rax+0x20]
   31ca9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31cad:	48 83 c0 20          	add    rax,0x20
   31cb1:	48 89 d6             	mov    rsi,rdx
   31cb4:	48 89 c7             	mov    rdi,rax
   31cb7:	e8 da 13 00 00       	call   33096 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&&)>
   31cbc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31cc0:	48 8d 50 38          	lea    rdx,[rax+0x38]
   31cc4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31cc8:	48 83 c0 38          	add    rax,0x38
   31ccc:	48 89 d6             	mov    rsi,rdx
   31ccf:	48 89 c7             	mov    rdi,rax
   31cd2:	e8 f7 13 00 00       	call   330ce <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> >&&)>
   31cd7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31cdb:	48 8d 50 50          	lea    rdx,[rax+0x50]
   31cdf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31ce3:	48 83 c0 50          	add    rax,0x50
   31ce7:	48 89 d6             	mov    rsi,rdx
   31cea:	48 89 c7             	mov    rdi,rax
   31ced:	e8 26 fe ff ff       	call   31b18 <objl::Material::operator=(objl::Material&&)>
   31cf2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31cf6:	c9                   	leave  
   31cf7:	c3                   	ret    

0000000000031cf8 <objl::Material::operator=(objl::Material const&)>:
   31cf8:	55                   	push   rbp
   31cf9:	48 89 e5             	mov    rbp,rsp
   31cfc:	48 83 ec 10          	sub    rsp,0x10
   31d00:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31d04:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   31d08:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31d0c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31d10:	48 89 d6             	mov    rsi,rdx
   31d13:	48 89 c7             	mov    rdi,rax
   31d16:	e8 35 23 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   31d1b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31d1f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31d23:	48 8b 4a 20          	mov    rcx,QWORD PTR [rdx+0x20]
   31d27:	48 89 48 20          	mov    QWORD PTR [rax+0x20],rcx
   31d2b:	8b 52 28             	mov    edx,DWORD PTR [rdx+0x28]
   31d2e:	89 50 28             	mov    DWORD PTR [rax+0x28],edx
   31d31:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31d35:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31d39:	48 8b 4a 2c          	mov    rcx,QWORD PTR [rdx+0x2c]
   31d3d:	48 89 48 2c          	mov    QWORD PTR [rax+0x2c],rcx
   31d41:	8b 52 34             	mov    edx,DWORD PTR [rdx+0x34]
   31d44:	89 50 34             	mov    DWORD PTR [rax+0x34],edx
   31d47:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31d4b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   31d4f:	48 8b 4a 38          	mov    rcx,QWORD PTR [rdx+0x38]
   31d53:	48 89 48 38          	mov    QWORD PTR [rax+0x38],rcx
   31d57:	8b 52 40             	mov    edx,DWORD PTR [rdx+0x40]
   31d5a:	89 50 40             	mov    DWORD PTR [rax+0x40],edx
   31d5d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31d61:	f3 0f 10 40 44       	movss  xmm0,DWORD PTR [rax+0x44]
   31d66:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31d6a:	f3 0f 11 40 44       	movss  DWORD PTR [rax+0x44],xmm0
   31d6f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31d73:	f3 0f 10 40 48       	movss  xmm0,DWORD PTR [rax+0x48]
   31d78:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31d7c:	f3 0f 11 40 48       	movss  DWORD PTR [rax+0x48],xmm0
   31d81:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31d85:	f3 0f 10 40 4c       	movss  xmm0,DWORD PTR [rax+0x4c]
   31d8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31d8e:	f3 0f 11 40 4c       	movss  DWORD PTR [rax+0x4c],xmm0
   31d93:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31d97:	8b 50 50             	mov    edx,DWORD PTR [rax+0x50]
   31d9a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31d9e:	89 50 50             	mov    DWORD PTR [rax+0x50],edx
   31da1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31da5:	48 8d 50 58          	lea    rdx,[rax+0x58]
   31da9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31dad:	48 83 c0 58          	add    rax,0x58
   31db1:	48 89 d6             	mov    rsi,rdx
   31db4:	48 89 c7             	mov    rdi,rax
   31db7:	e8 94 22 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   31dbc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31dc0:	48 8d 50 78          	lea    rdx,[rax+0x78]
   31dc4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31dc8:	48 83 c0 78          	add    rax,0x78
   31dcc:	48 89 d6             	mov    rsi,rdx
   31dcf:	48 89 c7             	mov    rdi,rax
   31dd2:	e8 79 22 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   31dd7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31ddb:	48 8d 90 98 00 00 00 	lea    rdx,[rax+0x98]
   31de2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31de6:	48 05 98 00 00 00    	add    rax,0x98
   31dec:	48 89 d6             	mov    rsi,rdx
   31def:	48 89 c7             	mov    rdi,rax
   31df2:	e8 59 22 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   31df7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31dfb:	48 8d 90 b8 00 00 00 	lea    rdx,[rax+0xb8]
   31e02:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31e06:	48 05 b8 00 00 00    	add    rax,0xb8
   31e0c:	48 89 d6             	mov    rsi,rdx
   31e0f:	48 89 c7             	mov    rdi,rax
   31e12:	e8 39 22 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   31e17:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31e1b:	48 8d 90 d8 00 00 00 	lea    rdx,[rax+0xd8]
   31e22:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31e26:	48 05 d8 00 00 00    	add    rax,0xd8
   31e2c:	48 89 d6             	mov    rsi,rdx
   31e2f:	48 89 c7             	mov    rdi,rax
   31e32:	e8 19 22 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   31e37:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   31e3b:	48 8d 90 f8 00 00 00 	lea    rdx,[rax+0xf8]
   31e42:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31e46:	48 05 f8 00 00 00    	add    rax,0xf8
   31e4c:	48 89 d6             	mov    rsi,rdx
   31e4f:	48 89 c7             	mov    rdi,rax
   31e52:	e8 f9 21 fd ff       	call   4050 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   31e57:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31e5b:	c9                   	leave  
   31e5c:	c3                   	ret    
   31e5d:	90                   	nop

0000000000031e5e <objl::Vertex::Vertex()>:
   31e5e:	55                   	push   rbp
   31e5f:	48 89 e5             	mov    rbp,rsp
   31e62:	48 83 ec 08          	sub    rsp,0x8
   31e66:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31e6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31e6e:	48 89 c7             	mov    rdi,rax
   31e71:	e8 74 a4 ff ff       	call   2c2ea <objl::Vector3::Vector3()>
   31e76:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31e7a:	48 83 c0 0c          	add    rax,0xc
   31e7e:	48 89 c7             	mov    rdi,rax
   31e81:	e8 64 a4 ff ff       	call   2c2ea <objl::Vector3::Vector3()>
   31e86:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31e8a:	48 83 c0 18          	add    rax,0x18
   31e8e:	48 89 c7             	mov    rdi,rax
   31e91:	e8 d0 a1 ff ff       	call   2c066 <objl::Vector2::Vector2()>
   31e96:	90                   	nop
   31e97:	c9                   	leave  
   31e98:	c3                   	ret    
   31e99:	90                   	nop

0000000000031e9a <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno()>:
   31e9a:	55                   	push   rbp
   31e9b:	48 89 e5             	mov    rbp,rsp
   31e9e:	48 83 ec 10          	sub    rsp,0x10
   31ea2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31ea6:	e8 b5 21 fd ff       	call   4060 <__errno_location@plt>
   31eab:	8b 10                	mov    edx,DWORD PTR [rax]
   31ead:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   31eb1:	89 10                	mov    DWORD PTR [rax],edx
   31eb3:	e8 a8 21 fd ff       	call   4060 <__errno_location@plt>
   31eb8:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
   31ebe:	90                   	nop
   31ebf:	c9                   	leave  
   31ec0:	c3                   	ret    
   31ec1:	90                   	nop

0000000000031ec2 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()>:
   31ec2:	55                   	push   rbp
   31ec3:	48 89 e5             	mov    rbp,rsp
   31ec6:	48 83 ec 10          	sub    rsp,0x10
   31eca:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31ece:	e8 8d 21 fd ff       	call   4060 <__errno_location@plt>
   31ed3:	8b 00                	mov    eax,DWORD PTR [rax]
   31ed5:	85 c0                	test   eax,eax
   31ed7:	75 0d                	jne    31ee6 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()+0x24>
   31ed9:	e8 82 21 fd ff       	call   4060 <__errno_location@plt>
   31ede:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   31ee2:	8b 12                	mov    edx,DWORD PTR [rdx]
   31ee4:	89 10                	mov    DWORD PTR [rax],edx
   31ee6:	90                   	nop
   31ee7:	c9                   	leave  
   31ee8:	c3                   	ret    

0000000000031ee9 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>)>:
   31ee9:	55                   	push   rbp
   31eea:	48 89 e5             	mov    rbp,rsp
   31eed:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   31ef1:	48 b8 ff ff ff 7f ff ff ff ff 	movabs rax,0xffffffff7fffffff
   31efb:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
   31eff:	7e 0b                	jle    31f0c <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>)+0x23>
   31f01:	b8 00 00 00 80       	mov    eax,0x80000000
   31f06:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
   31f0a:	7c 07                	jl     31f13 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>)+0x2a>
   31f0c:	b8 01 00 00 00       	mov    eax,0x1
   31f11:	eb 05                	jmp    31f18 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>)+0x2f>
   31f13:	b8 00 00 00 00       	mov    eax,0x0
   31f18:	5d                   	pop    rbp
   31f19:	c3                   	ret    

0000000000031f1a <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)>:
   31f1a:	55                   	push   rbp
   31f1b:	48 89 e5             	mov    rbp,rsp
   31f1e:	53                   	push   rbx
   31f1f:	48 83 ec 68          	sub    rsp,0x68
   31f23:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   31f27:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   31f2b:	48 89 55 a8          	mov    QWORD PTR [rbp-0x58],rdx
   31f2f:	48 89 4d a0          	mov    QWORD PTR [rbp-0x60],rcx
   31f33:	44 89 45 9c          	mov    DWORD PTR [rbp-0x64],r8d
   31f37:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   31f40:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   31f44:	31 c0                	xor    eax,eax
   31f46:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   31f4a:	48 89 c7             	mov    rdi,rax
   31f4d:	e8 48 ff ff ff       	call   31e9a <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno()>
   31f52:	4c 8b 45 b8          	mov    r8,QWORD PTR [rbp-0x48]
   31f56:	8b 55 9c             	mov    edx,DWORD PTR [rbp-0x64]
   31f59:	48 8d 4d d8          	lea    rcx,[rbp-0x28]
   31f5d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   31f61:	48 89 ce             	mov    rsi,rcx
   31f64:	48 89 c7             	mov    rdi,rax
   31f67:	41 ff d0             	call   r8
   31f6a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   31f6e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   31f72:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
   31f76:	75 0c                	jne    31f84 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0x6a>
   31f78:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   31f7c:	48 89 c7             	mov    rdi,rax
   31f7f:	e8 cc 22 fd ff       	call   4250 <std::__throw_invalid_argument(char const*)@plt>
   31f84:	e8 d7 20 fd ff       	call   4060 <__errno_location@plt>
   31f89:	8b 00                	mov    eax,DWORD PTR [rax]
   31f8b:	83 f8 22             	cmp    eax,0x22
   31f8e:	74 10                	je     31fa0 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0x86>
   31f90:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   31f94:	48 89 c7             	mov    rdi,rax
   31f97:	e8 4d ff ff ff       	call   31ee9 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>)>
   31f9c:	84 c0                	test   al,al
   31f9e:	74 07                	je     31fa7 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0x8d>
   31fa0:	b8 01 00 00 00       	mov    eax,0x1
   31fa5:	eb 05                	jmp    31fac <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0x92>
   31fa7:	b8 00 00 00 00       	mov    eax,0x0
   31fac:	84 c0                	test   al,al
   31fae:	74 0c                	je     31fbc <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0xa2>
   31fb0:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   31fb4:	48 89 c7             	mov    rdi,rax
   31fb7:	e8 84 26 fd ff       	call   4640 <std::__throw_out_of_range(char const*)@plt>
   31fbc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   31fc0:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
   31fc3:	48 83 7d a0 00       	cmp    QWORD PTR [rbp-0x60],0x0
   31fc8:	74 12                	je     31fdc <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0xc2>
   31fca:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   31fce:	48 2b 45 a8          	sub    rax,QWORD PTR [rbp-0x58]
   31fd2:	48 89 c2             	mov    rdx,rax
   31fd5:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
   31fd9:	48 89 10             	mov    QWORD PTR [rax],rdx
   31fdc:	8b 5d d4             	mov    ebx,DWORD PTR [rbp-0x2c]
   31fdf:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   31fe3:	48 89 c7             	mov    rdi,rax
   31fe6:	e8 d7 fe ff ff       	call   31ec2 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()>
   31feb:	89 d8                	mov    eax,ebx
   31fed:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   31ff1:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   31ffa:	74 21                	je     3201d <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0x103>
   31ffc:	eb 1a                	jmp    32018 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)+0xfe>
   31ffe:	48 89 c3             	mov    rbx,rax
   32001:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   32005:	48 89 c7             	mov    rdi,rax
   32008:	e8 b5 fe ff ff       	call   31ec2 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()>
   3200d:	48 89 d8             	mov    rax,rbx
   32010:	48 89 c7             	mov    rdi,rax
   32013:	e8 48 27 fd ff       	call   4760 <_Unwind_Resume@plt>
   32018:	e8 c3 24 fd ff       	call   44e0 <__stack_chk_fail@plt>
   3201d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   32021:	c9                   	leave  
   32022:	c3                   	ret    
   32023:	90                   	nop

0000000000032024 <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Save_errno::_Save_errno()>:
   32024:	55                   	push   rbp
   32025:	48 89 e5             	mov    rbp,rsp
   32028:	48 83 ec 10          	sub    rsp,0x10
   3202c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32030:	e8 2b 20 fd ff       	call   4060 <__errno_location@plt>
   32035:	8b 10                	mov    edx,DWORD PTR [rax]
   32037:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3203b:	89 10                	mov    DWORD PTR [rax],edx
   3203d:	e8 1e 20 fd ff       	call   4060 <__errno_location@plt>
   32042:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
   32048:	90                   	nop
   32049:	c9                   	leave  
   3204a:	c3                   	ret    
   3204b:	90                   	nop

000000000003204c <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Save_errno::~_Save_errno()>:
   3204c:	55                   	push   rbp
   3204d:	48 89 e5             	mov    rbp,rsp
   32050:	48 83 ec 10          	sub    rsp,0x10
   32054:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32058:	e8 03 20 fd ff       	call   4060 <__errno_location@plt>
   3205d:	8b 00                	mov    eax,DWORD PTR [rax]
   3205f:	85 c0                	test   eax,eax
   32061:	75 0d                	jne    32070 <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Save_errno::~_Save_errno()+0x24>
   32063:	e8 f8 1f fd ff       	call   4060 <__errno_location@plt>
   32068:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   3206c:	8b 12                	mov    edx,DWORD PTR [rdx]
   3206e:	89 10                	mov    DWORD PTR [rax],edx
   32070:	90                   	nop
   32071:	c9                   	leave  
   32072:	c3                   	ret    

0000000000032073 <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Range_chk::_S_chk(float, std::integral_constant<bool, false>)>:
   32073:	55                   	push   rbp
   32074:	48 89 e5             	mov    rbp,rsp
   32077:	f3 0f 11 45 fc       	movss  DWORD PTR [rbp-0x4],xmm0
   3207c:	b8 00 00 00 00       	mov    eax,0x0
   32081:	5d                   	pop    rbp
   32082:	c3                   	ret    

0000000000032083 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)>:
   32083:	55                   	push   rbp
   32084:	48 89 e5             	mov    rbp,rsp
   32087:	53                   	push   rbx
   32088:	48 83 ec 58          	sub    rsp,0x58
   3208c:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   32090:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   32094:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   32098:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
   3209c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   320a5:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   320a9:	31 c0                	xor    eax,eax
   320ab:	48 8d 45 d4          	lea    rax,[rbp-0x2c]
   320af:	48 89 c7             	mov    rdi,rax
   320b2:	e8 6d ff ff ff       	call   32024 <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Save_errno::_Save_errno()>
   320b7:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
   320bb:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   320bf:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   320c3:	48 89 d6             	mov    rsi,rdx
   320c6:	48 89 c7             	mov    rdi,rax
   320c9:	ff d1                	call   rcx
   320cb:	66 0f 7e c0          	movd   eax,xmm0
   320cf:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
   320d2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   320d6:	48 39 45 b8          	cmp    QWORD PTR [rbp-0x48],rax
   320da:	75 0c                	jne    320e8 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0x65>
   320dc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   320e0:	48 89 c7             	mov    rdi,rax
   320e3:	e8 68 21 fd ff       	call   4250 <std::__throw_invalid_argument(char const*)@plt>
   320e8:	e8 73 1f fd ff       	call   4060 <__errno_location@plt>
   320ed:	8b 00                	mov    eax,DWORD PTR [rax]
   320ef:	83 f8 22             	cmp    eax,0x22
   320f2:	74 10                	je     32104 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0x81>
   320f4:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
   320f7:	66 0f 6e c0          	movd   xmm0,eax
   320fb:	e8 73 ff ff ff       	call   32073 <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Range_chk::_S_chk(float, std::integral_constant<bool, false>)>
   32100:	84 c0                	test   al,al
   32102:	74 07                	je     3210b <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0x88>
   32104:	b8 01 00 00 00       	mov    eax,0x1
   32109:	eb 05                	jmp    32110 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0x8d>
   3210b:	b8 00 00 00 00       	mov    eax,0x0
   32110:	84 c0                	test   al,al
   32112:	74 0c                	je     32120 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0x9d>
   32114:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32118:	48 89 c7             	mov    rdi,rax
   3211b:	e8 20 25 fd ff       	call   4640 <std::__throw_out_of_range(char const*)@plt>
   32120:	f3 0f 10 45 d8       	movss  xmm0,DWORD PTR [rbp-0x28]
   32125:	f3 0f 11 45 dc       	movss  DWORD PTR [rbp-0x24],xmm0
   3212a:	48 83 7d b0 00       	cmp    QWORD PTR [rbp-0x50],0x0
   3212f:	74 12                	je     32143 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0xc0>
   32131:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   32135:	48 2b 45 b8          	sub    rax,QWORD PTR [rbp-0x48]
   32139:	48 89 c2             	mov    rdx,rax
   3213c:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   32140:	48 89 10             	mov    QWORD PTR [rax],rdx
   32143:	f3 0f 10 4d dc       	movss  xmm1,DWORD PTR [rbp-0x24]
   32148:	f3 0f 11 4d ac       	movss  DWORD PTR [rbp-0x54],xmm1
   3214d:	48 8d 45 d4          	lea    rax,[rbp-0x2c]
   32151:	48 89 c7             	mov    rdi,rax
   32154:	e8 f3 fe ff ff       	call   3204c <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Save_errno::~_Save_errno()>
   32159:	f3 0f 10 45 ac       	movss  xmm0,DWORD PTR [rbp-0x54]
   3215e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32162:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   3216b:	74 21                	je     3218e <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0x10b>
   3216d:	eb 1a                	jmp    32189 <float __gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)+0x106>
   3216f:	48 89 c3             	mov    rbx,rax
   32172:	48 8d 45 d4          	lea    rax,[rbp-0x2c]
   32176:	48 89 c7             	mov    rdi,rax
   32179:	e8 ce fe ff ff       	call   3204c <__gnu_cxx::__stoa<float, float, char>(float (*)(char const*, char**), char const*, char const*, unsigned long*)::_Save_errno::~_Save_errno()>
   3217e:	48 89 d8             	mov    rax,rbx
   32181:	48 89 c7             	mov    rdi,rax
   32184:	e8 d7 25 fd ff       	call   4760 <_Unwind_Resume@plt>
   32189:	e8 52 23 fd ff       	call   44e0 <__stack_chk_fail@plt>
   3218e:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   32192:	c9                   	leave  
   32193:	c3                   	ret    

0000000000032194 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(unsigned long, char, std::allocator<char> const&)>:
   32194:	55                   	push   rbp
   32195:	48 89 e5             	mov    rbp,rsp
   32198:	53                   	push   rbx
   32199:	48 83 ec 28          	sub    rsp,0x28
   3219d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   321a1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   321a5:	89 d0                	mov    eax,edx
   321a7:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   321ab:	88 45 dc             	mov    BYTE PTR [rbp-0x24],al
   321ae:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   321b2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   321b6:	48 89 c7             	mov    rdi,rax
   321b9:	e8 92 21 fd ff       	call   4350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>
   321be:	48 89 c1             	mov    rcx,rax
   321c1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   321c5:	48 89 c2             	mov    rdx,rax
   321c8:	48 89 ce             	mov    rsi,rcx
   321cb:	48 89 df             	mov    rdi,rbx
   321ce:	e8 ad 22 fd ff       	call   4480 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)@plt>
   321d3:	0f be 55 dc          	movsx  edx,BYTE PTR [rbp-0x24]
   321d7:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   321db:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   321df:	48 89 ce             	mov    rsi,rcx
   321e2:	48 89 c7             	mov    rdi,rax
   321e5:	e8 26 23 fd ff       	call   4510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
   321ea:	eb 1a                	jmp    32206 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(unsigned long, char, std::allocator<char> const&)+0x72>
   321ec:	48 89 c3             	mov    rbx,rax
   321ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   321f3:	48 89 c7             	mov    rdi,rax
   321f6:	e8 4f 37 ff ff       	call   2594a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>
   321fb:	48 89 d8             	mov    rax,rbx
   321fe:	48 89 c7             	mov    rdi,rax
   32201:	e8 5a 25 fd ff       	call   4760 <_Unwind_Resume@plt>
   32206:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3220a:	c9                   	leave  
   3220b:	c3                   	ret    

000000000003220c <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>:
   3220c:	55                   	push   rbp
   3220d:	48 89 e5             	mov    rbp,rsp
   32210:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   32214:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
   32217:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
   3221a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
   3221d:	83 e8 01             	sub    eax,0x1
   32220:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
   32223:	eb 77                	jmp    3229c <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x90>
   32225:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
   32228:	89 d0                	mov    eax,edx
   3222a:	48 69 c0 1f 85 eb 51 	imul   rax,rax,0x51eb851f
   32231:	48 c1 e8 20          	shr    rax,0x20
   32235:	c1 e8 05             	shr    eax,0x5
   32238:	6b c8 64             	imul   ecx,eax,0x64
   3223b:	89 d0                	mov    eax,edx
   3223d:	29 c8                	sub    eax,ecx
   3223f:	01 c0                	add    eax,eax
   32241:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   32244:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   32247:	89 c0                	mov    eax,eax
   32249:	48 69 c0 1f 85 eb 51 	imul   rax,rax,0x51eb851f
   32250:	48 c1 e8 20          	shr    rax,0x20
   32254:	c1 e8 05             	shr    eax,0x5
   32257:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
   3225a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   3225d:	8d 48 01             	lea    ecx,[rax+0x1]
   32260:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
   32263:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32267:	48 01 c2             	add    rdx,rax
   3226a:	89 c9                	mov    ecx,ecx
   3226c:	48 8d 05 4d a9 00 00 	lea    rax,[rip+0xa94d]        # 3cbc0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits>
   32273:	0f b6 04 01          	movzx  eax,BYTE PTR [rcx+rax*1]
   32277:	88 02                	mov    BYTE PTR [rdx],al
   32279:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
   3227c:	83 e8 01             	sub    eax,0x1
   3227f:	89 c2                	mov    edx,eax
   32281:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32285:	48 01 c2             	add    rdx,rax
   32288:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   3228b:	48 8d 0d 2e a9 00 00 	lea    rcx,[rip+0xa92e]        # 3cbc0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits>
   32292:	0f b6 04 08          	movzx  eax,BYTE PTR [rax+rcx*1]
   32296:	88 02                	mov    BYTE PTR [rdx],al
   32298:	83 6d f4 02          	sub    DWORD PTR [rbp-0xc],0x2
   3229c:	83 7d e0 63          	cmp    DWORD PTR [rbp-0x20],0x63
   322a0:	77 83                	ja     32225 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x19>
   322a2:	83 7d e0 09          	cmp    DWORD PTR [rbp-0x20],0x9
   322a6:	76 3b                	jbe    322e3 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0xd7>
   322a8:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   322ab:	01 c0                	add    eax,eax
   322ad:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
   322b0:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   322b3:	8d 48 01             	lea    ecx,[rax+0x1]
   322b6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   322ba:	48 8d 50 01          	lea    rdx,[rax+0x1]
   322be:	89 c9                	mov    ecx,ecx
   322c0:	48 8d 05 f9 a8 00 00 	lea    rax,[rip+0xa8f9]        # 3cbc0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits>
   322c7:	0f b6 04 01          	movzx  eax,BYTE PTR [rcx+rax*1]
   322cb:	88 02                	mov    BYTE PTR [rdx],al
   322cd:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
   322d0:	48 8d 15 e9 a8 00 00 	lea    rdx,[rip+0xa8e9]        # 3cbc0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits>
   322d7:	0f b6 14 10          	movzx  edx,BYTE PTR [rax+rdx*1]
   322db:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   322df:	88 10                	mov    BYTE PTR [rax],dl
   322e1:	eb 0e                	jmp    322f1 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0xe5>
   322e3:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
   322e6:	83 c0 30             	add    eax,0x30
   322e9:	89 c2                	mov    edx,eax
   322eb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   322ef:	88 10                	mov    BYTE PTR [rax],dl
   322f1:	90                   	nop
   322f2:	5d                   	pop    rbp
   322f3:	c3                   	ret    

00000000000322f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>:
   322f4:	55                   	push   rbp
   322f5:	48 89 e5             	mov    rbp,rsp
   322f8:	53                   	push   rbx
   322f9:	48 83 ec 28          	sub    rsp,0x28
   322fd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   32301:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   32305:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   32309:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   3230d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32311:	48 89 d6             	mov    rsi,rdx
   32314:	48 89 c7             	mov    rdi,rax
   32317:	e8 54 1e fd ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   3231c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   32320:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32324:	48 89 d6             	mov    rsi,rdx
   32327:	48 89 c7             	mov    rdi,rax
   3232a:	e8 b1 24 fd ff       	call   47e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   3232f:	eb 1a                	jmp    3234b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)+0x57>
   32331:	48 89 c3             	mov    rbx,rax
   32334:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   32338:	48 89 c7             	mov    rdi,rax
   3233b:	e8 20 1f fd ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   32340:	48 89 d8             	mov    rax,rbx
   32343:	48 89 c7             	mov    rdi,rax
   32346:	e8 15 24 fd ff       	call   4760 <_Unwind_Resume@plt>
   3234b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3234f:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   32353:	c9                   	leave  
   32354:	c3                   	ret    

0000000000032355 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
   32355:	55                   	push   rbp
   32356:	48 89 e5             	mov    rbp,rsp
   32359:	53                   	push   rbx
   3235a:	48 83 ec 38          	sub    rsp,0x38
   3235e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   32362:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   32366:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   3236a:	c6 45 e7 00          	mov    BYTE PTR [rbp-0x19],0x0
   3236e:	c6 45 e7 01          	mov    BYTE PTR [rbp-0x19],0x1
   32372:	80 7d e7 00          	cmp    BYTE PTR [rbp-0x19],0x0
   32376:	0f 84 87 00 00 00    	je     32403 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xae>
   3237c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32380:	48 89 c7             	mov    rdi,rax
   32383:	e8 28 1f fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   32388:	48 89 c3             	mov    rbx,rax
   3238b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3238f:	48 89 c7             	mov    rdi,rax
   32392:	e8 19 1f fd ff       	call   42b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const@plt>
   32397:	48 01 d8             	add    rax,rbx
   3239a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   3239e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   323a2:	48 89 c7             	mov    rdi,rax
   323a5:	e8 96 1c fd ff       	call   4040 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const@plt>
   323aa:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
   323ae:	76 19                	jbe    323c9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x74>
   323b0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   323b4:	48 89 c7             	mov    rdi,rax
   323b7:	e8 84 1c fd ff       	call   4040 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const@plt>
   323bc:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
   323c0:	77 07                	ja     323c9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x74>
   323c2:	b8 01 00 00 00       	mov    eax,0x1
   323c7:	eb 05                	jmp    323ce <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x79>
   323c9:	b8 00 00 00 00       	mov    eax,0x0
   323ce:	84 c0                	test   al,al
   323d0:	74 31                	je     32403 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xae>
   323d2:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   323d6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   323da:	be 00 00 00 00       	mov    esi,0x0
   323df:	48 89 c7             	mov    rdi,rax
   323e2:	e8 e9 22 fd ff       	call   46d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   323e7:	48 89 c7             	mov    rdi,rax
   323ea:	e8 db 35 ff ff       	call   259ca <std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   323ef:	48 89 c2             	mov    rdx,rax
   323f2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   323f6:	48 89 d6             	mov    rsi,rdx
   323f9:	48 89 c7             	mov    rdi,rax
   323fc:	e8 3f 1e fd ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   32401:	eb 2d                	jmp    32430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xdb>
   32403:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   32407:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   3240b:	48 89 d6             	mov    rsi,rdx
   3240e:	48 89 c7             	mov    rdi,rax
   32411:	e8 da 23 fd ff       	call   47f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   32416:	48 89 c7             	mov    rdi,rax
   32419:	e8 ac 35 ff ff       	call   259ca <std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   3241e:	48 89 c2             	mov    rdx,rax
   32421:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32425:	48 89 d6             	mov    rsi,rdx
   32428:	48 89 c7             	mov    rdi,rax
   3242b:	e8 10 1e fd ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   32430:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32434:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   32438:	c9                   	leave  
   32439:	c3                   	ret    

000000000003243a <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::_Vector_impl()>:
   3243a:	55                   	push   rbp
   3243b:	48 89 e5             	mov    rbp,rsp
   3243e:	48 83 ec 10          	sub    rsp,0x10
   32442:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32446:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3244a:	48 89 c7             	mov    rdi,rax
   3244d:	e8 9a 14 00 00       	call   338ec <std::allocator<objl::Vertex>::allocator()>
   32452:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32456:	48 89 c7             	mov    rdi,rax
   32459:	e8 aa 14 00 00       	call   33908 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_Vector_impl_data()>
   3245e:	90                   	nop
   3245f:	c9                   	leave  
   32460:	c3                   	ret    
   32461:	90                   	nop

0000000000032462 <std::allocator<objl::Vertex>::~allocator()>:
   32462:	55                   	push   rbp
   32463:	48 89 e5             	mov    rbp,rsp
   32466:	48 83 ec 10          	sub    rsp,0x10
   3246a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3246e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32472:	48 89 c7             	mov    rdi,rax
   32475:	e8 bc 14 00 00       	call   33936 <__gnu_cxx::new_allocator<objl::Vertex>::~new_allocator()>
   3247a:	90                   	nop
   3247b:	c9                   	leave  
   3247c:	c3                   	ret    
   3247d:	90                   	nop

000000000003247e <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::~_Vector_base()>:
   3247e:	55                   	push   rbp
   3247f:	48 89 e5             	mov    rbp,rsp
   32482:	48 83 ec 10          	sub    rsp,0x10
   32486:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3248a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3248e:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   32492:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32496:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32499:	48 89 d0             	mov    rax,rdx
   3249c:	48 29 c8             	sub    rax,rcx
   3249f:	48 c1 f8 05          	sar    rax,0x5
   324a3:	48 89 c2             	mov    rdx,rax
   324a6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   324aa:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   324ad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   324b1:	48 89 ce             	mov    rsi,rcx
   324b4:	48 89 c7             	mov    rdi,rax
   324b7:	e8 86 14 00 00       	call   33942 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_deallocate(objl::Vertex*, unsigned long)>
   324bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   324c0:	48 89 c7             	mov    rdi,rax
   324c3:	e8 4a ee ff ff       	call   31312 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::~_Vector_impl()>
   324c8:	90                   	nop
   324c9:	c9                   	leave  
   324ca:	c3                   	ret    
   324cb:	90                   	nop

00000000000324cc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>:
   324cc:	55                   	push   rbp
   324cd:	48 89 e5             	mov    rbp,rsp
   324d0:	48 83 ec 10          	sub    rsp,0x10
   324d4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   324d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   324dc:	48 89 c7             	mov    rdi,rax
   324df:	e8 94 14 00 00       	call   33978 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   324e4:	48 89 c2             	mov    rdx,rax
   324e7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   324eb:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   324ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   324f3:	48 8b 00             	mov    rax,QWORD PTR [rax]
   324f6:	48 89 ce             	mov    rsi,rcx
   324f9:	48 89 c7             	mov    rdi,rax
   324fc:	e8 85 14 00 00       	call   33986 <void std::_Destroy<objl::Vertex*, objl::Vertex>(objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   32501:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32505:	48 89 c7             	mov    rdi,rax
   32508:	e8 71 ff ff ff       	call   3247e <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::~_Vector_base()>
   3250d:	90                   	nop
   3250e:	c9                   	leave  
   3250f:	c3                   	ret    

0000000000032510 <__gnu_cxx::__alloc_traits<std::allocator<objl::Vertex>, objl::Vertex>::_S_propagate_on_copy_assign()>:
   32510:	55                   	push   rbp
   32511:	48 89 e5             	mov    rbp,rsp
   32514:	b8 00 00 00 00       	mov    eax,0x0
   32519:	5d                   	pop    rbp
   3251a:	c3                   	ret    
   3251b:	90                   	nop

000000000003251c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)>:
   3251c:	55                   	push   rbp
   3251d:	48 89 e5             	mov    rbp,rsp
   32520:	41 56                	push   r14
   32522:	41 55                	push   r13
   32524:	41 54                	push   r12
   32526:	53                   	push   rbx
   32527:	48 83 ec 20          	sub    rsp,0x20
   3252b:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   3252f:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   32533:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32537:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
   3253b:	0f 84 e0 02 00 00    	je     32821 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x305>
   32541:	e8 ca ff ff ff       	call   32510 <__gnu_cxx::__alloc_traits<std::allocator<objl::Vertex>, objl::Vertex>::_S_propagate_on_copy_assign()>
   32546:	84 c0                	test   al,al
   32548:	0f 84 d0 00 00 00    	je     3261e <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x102>
   3254e:	e8 ae f5 ff ff       	call   31b01 <__gnu_cxx::__alloc_traits<std::allocator<objl::Vertex>, objl::Vertex>::_S_always_equal()>
   32553:	83 f0 01             	xor    eax,0x1
   32556:	84 c0                	test   al,al
   32558:	74 31                	je     3258b <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x6f>
   3255a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3255e:	48 89 c7             	mov    rdi,rax
   32561:	e8 4a 14 00 00       	call   339b0 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator() const>
   32566:	48 89 c3             	mov    rbx,rax
   32569:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3256d:	48 89 c7             	mov    rdi,rax
   32570:	e8 03 14 00 00       	call   33978 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   32575:	48 89 de             	mov    rsi,rbx
   32578:	48 89 c7             	mov    rdi,rax
   3257b:	e8 3e 14 00 00       	call   339be <std::operator!=(std::allocator<objl::Vertex> const&, std::allocator<objl::Vertex> const&)>
   32580:	84 c0                	test   al,al
   32582:	74 07                	je     3258b <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x6f>
   32584:	b8 01 00 00 00       	mov    eax,0x1
   32589:	eb 05                	jmp    32590 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x74>
   3258b:	b8 00 00 00 00       	mov    eax,0x0
   32590:	84 c0                	test   al,al
   32592:	74 64                	je     325f8 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0xdc>
   32594:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32598:	48 89 c7             	mov    rdi,rax
   3259b:	e8 26 08 00 00       	call   32dc6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::clear()>
   325a0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   325a4:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   325a8:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
   325ac:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   325b0:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
   325b3:	48 29 f1             	sub    rcx,rsi
   325b6:	48 89 ca             	mov    rdx,rcx
   325b9:	48 c1 fa 05          	sar    rdx,0x5
   325bd:	48 89 d6             	mov    rsi,rdx
   325c0:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   325c4:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
   325c7:	48 89 f2             	mov    rdx,rsi
   325ca:	48 89 ce             	mov    rsi,rcx
   325cd:	48 89 c7             	mov    rdi,rax
   325d0:	e8 6d 13 00 00       	call   33942 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_deallocate(objl::Vertex*, unsigned long)>
   325d5:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   325d9:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   325e0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   325e4:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   325ec:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   325f0:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   325f8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   325fc:	48 89 c7             	mov    rdi,rax
   325ff:	e8 ac 13 00 00       	call   339b0 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator() const>
   32604:	48 89 c3             	mov    rbx,rax
   32607:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3260b:	48 89 c7             	mov    rdi,rax
   3260e:	e8 65 13 00 00       	call   33978 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   32613:	48 89 de             	mov    rsi,rbx
   32616:	48 89 c7             	mov    rdi,rax
   32619:	e8 b3 13 00 00       	call   339d1 <void std::__alloc_on_copy<std::allocator<objl::Vertex> >(std::allocator<objl::Vertex>&, std::allocator<objl::Vertex> const&)>
   3261e:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32622:	48 89 c7             	mov    rdi,rax
   32625:	e8 3e 3f ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   3262a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   3262e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32632:	48 89 c7             	mov    rdi,rax
   32635:	e8 a6 13 00 00       	call   339e0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::capacity() const>
   3263a:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
   3263e:	0f 97 c0             	seta   al
   32641:	84 c0                	test   al,al
   32643:	0f 84 bd 00 00 00    	je     32706 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x1ea>
   32649:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3264d:	48 89 c7             	mov    rdi,rax
   32650:	e8 f7 13 00 00       	call   33a4c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end() const>
   32655:	48 89 c3             	mov    rbx,rax
   32658:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3265c:	48 89 c7             	mov    rdi,rax
   3265f:	e8 a0 13 00 00       	call   33a04 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin() const>
   32664:	48 89 c2             	mov    rdx,rax
   32667:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   3266b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3266f:	48 89 d9             	mov    rcx,rbx
   32672:	48 89 c7             	mov    rdi,rax
   32675:	e8 1e 14 00 00       	call   33a98 <objl::Vertex* std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(unsigned long, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   3267a:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   3267e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32682:	48 89 c7             	mov    rdi,rax
   32685:	e8 ee 12 00 00       	call   33978 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   3268a:	48 89 c2             	mov    rdx,rax
   3268d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32691:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   32695:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32699:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3269c:	48 89 ce             	mov    rsi,rcx
   3269f:	48 89 c7             	mov    rdi,rax
   326a2:	e8 df 12 00 00       	call   33986 <void std::_Destroy<objl::Vertex*, objl::Vertex>(objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   326a7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   326ab:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   326af:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
   326b3:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   326b7:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
   326ba:	48 29 f1             	sub    rcx,rsi
   326bd:	48 89 ca             	mov    rdx,rcx
   326c0:	48 c1 fa 05          	sar    rdx,0x5
   326c4:	48 89 d6             	mov    rsi,rdx
   326c7:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   326cb:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
   326ce:	48 89 f2             	mov    rdx,rsi
   326d1:	48 89 ce             	mov    rsi,rcx
   326d4:	48 89 c7             	mov    rdi,rax
   326d7:	e8 66 12 00 00       	call   33942 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_deallocate(objl::Vertex*, unsigned long)>
   326dc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   326e0:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   326e4:	48 89 10             	mov    QWORD PTR [rax],rdx
   326e7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   326eb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   326ee:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   326f2:	48 c1 e0 05          	shl    rax,0x5
   326f6:	48 01 c2             	add    rdx,rax
   326f9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   326fd:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   32701:	e9 01 01 00 00       	jmp    32807 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x2eb>
   32706:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3270a:	48 89 c7             	mov    rdi,rax
   3270d:	e8 56 3e ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   32712:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
   32716:	0f 96 c0             	setbe  al
   32719:	84 c0                	test   al,al
   3271b:	74 69                	je     32786 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x26a>
   3271d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32721:	48 89 c7             	mov    rdi,rax
   32724:	e8 4f 12 00 00       	call   33978 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   32729:	49 89 c4             	mov    r12,rax
   3272c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32730:	48 89 c7             	mov    rdi,rax
   32733:	e8 42 14 00 00       	call   33b7a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end()>
   32738:	48 89 c3             	mov    rbx,rax
   3273b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3273f:	48 89 c7             	mov    rdi,rax
   32742:	e8 5d 0f 00 00       	call   336a4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin()>
   32747:	49 89 c6             	mov    r14,rax
   3274a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3274e:	48 89 c7             	mov    rdi,rax
   32751:	e8 f6 12 00 00       	call   33a4c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end() const>
   32756:	49 89 c5             	mov    r13,rax
   32759:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3275d:	48 89 c7             	mov    rdi,rax
   32760:	e8 9f 12 00 00       	call   33a04 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin() const>
   32765:	4c 89 f2             	mov    rdx,r14
   32768:	4c 89 ee             	mov    rsi,r13
   3276b:	48 89 c7             	mov    rdi,rax
   3276e:	e8 bb 13 00 00       	call   33b2e <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   32773:	4c 89 e2             	mov    rdx,r12
   32776:	48 89 de             	mov    rsi,rbx
   32779:	48 89 c7             	mov    rdi,rax
   3277c:	e8 45 14 00 00       	call   33bc6 <void std::_Destroy<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, std::allocator<objl::Vertex>&)>
   32781:	e9 81 00 00 00       	jmp    32807 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x2eb>
   32786:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3278a:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   3278d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32791:	4c 8b 20             	mov    r12,QWORD PTR [rax]
   32794:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32798:	48 89 c7             	mov    rdi,rax
   3279b:	e8 c8 3d ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   327a0:	48 c1 e0 05          	shl    rax,0x5
   327a4:	49 8d 0c 04          	lea    rcx,[r12+rax*1]
   327a8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   327ac:	48 8b 00             	mov    rax,QWORD PTR [rax]
   327af:	48 89 da             	mov    rdx,rbx
   327b2:	48 89 ce             	mov    rsi,rcx
   327b5:	48 89 c7             	mov    rdi,rax
   327b8:	e8 33 14 00 00       	call   33bf0 <objl::Vertex* std::copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   327bd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   327c1:	48 89 c7             	mov    rdi,rax
   327c4:	e8 af 11 00 00       	call   33978 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   327c9:	49 89 c5             	mov    r13,rax
   327cc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   327d0:	4c 8b 60 08          	mov    r12,QWORD PTR [rax+0x8]
   327d4:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   327d8:	48 8b 58 08          	mov    rbx,QWORD PTR [rax+0x8]
   327dc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   327e0:	4c 8b 30             	mov    r14,QWORD PTR [rax]
   327e3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   327e7:	48 89 c7             	mov    rdi,rax
   327ea:	e8 79 3d ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   327ef:	48 c1 e0 05          	shl    rax,0x5
   327f3:	4c 01 f0             	add    rax,r14
   327f6:	4c 89 e9             	mov    rcx,r13
   327f9:	4c 89 e2             	mov    rdx,r12
   327fc:	48 89 de             	mov    rsi,rbx
   327ff:	48 89 c7             	mov    rdi,rax
   32802:	e8 34 14 00 00       	call   33c3b <objl::Vertex* std::__uninitialized_copy_a<objl::Vertex*, objl::Vertex*, objl::Vertex>(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   32807:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3280b:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   3280e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32812:	48 c1 e0 05          	shl    rax,0x5
   32816:	48 01 c2             	add    rdx,rax
   32819:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3281d:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   32821:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32825:	48 83 c4 20          	add    rsp,0x20
   32829:	5b                   	pop    rbx
   3282a:	41 5c                	pop    r12
   3282c:	41 5d                	pop    r13
   3282e:	41 5e                	pop    r14
   32830:	5d                   	pop    rbp
   32831:	c3                   	ret    

0000000000032832 <__gnu_cxx::__alloc_traits<std::allocator<unsigned int>, unsigned int>::_S_propagate_on_copy_assign()>:
   32832:	55                   	push   rbp
   32833:	48 89 e5             	mov    rbp,rsp
   32836:	b8 00 00 00 00       	mov    eax,0x0
   3283b:	5d                   	pop    rbp
   3283c:	c3                   	ret    
   3283d:	90                   	nop

000000000003283e <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)>:
   3283e:	55                   	push   rbp
   3283f:	48 89 e5             	mov    rbp,rsp
   32842:	41 56                	push   r14
   32844:	41 55                	push   r13
   32846:	41 54                	push   r12
   32848:	53                   	push   rbx
   32849:	48 83 ec 20          	sub    rsp,0x20
   3284d:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   32851:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   32855:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32859:	48 3b 45 c8          	cmp    rax,QWORD PTR [rbp-0x38]
   3285d:	0f 84 e0 02 00 00    	je     32b43 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x305>
   32863:	e8 ca ff ff ff       	call   32832 <__gnu_cxx::__alloc_traits<std::allocator<unsigned int>, unsigned int>::_S_propagate_on_copy_assign()>
   32868:	84 c0                	test   al,al
   3286a:	0f 84 d0 00 00 00    	je     32940 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x102>
   32870:	e8 97 f2 ff ff       	call   31b0c <__gnu_cxx::__alloc_traits<std::allocator<unsigned int>, unsigned int>::_S_always_equal()>
   32875:	83 f0 01             	xor    eax,0x1
   32878:	84 c0                	test   al,al
   3287a:	74 31                	je     328ad <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x6f>
   3287c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32880:	48 89 c7             	mov    rdi,rax
   32883:	e8 28 8b ff ff       	call   2b3b0 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator() const>
   32888:	48 89 c3             	mov    rbx,rax
   3288b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3288f:	48 89 c7             	mov    rdi,rax
   32892:	e8 9b 5f ff ff       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   32897:	48 89 de             	mov    rsi,rbx
   3289a:	48 89 c7             	mov    rdi,rax
   3289d:	e8 ca 13 00 00       	call   33c6c <std::operator!=(std::allocator<unsigned int> const&, std::allocator<unsigned int> const&)>
   328a2:	84 c0                	test   al,al
   328a4:	74 07                	je     328ad <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x6f>
   328a6:	b8 01 00 00 00       	mov    eax,0x1
   328ab:	eb 05                	jmp    328b2 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x74>
   328ad:	b8 00 00 00 00       	mov    eax,0x0
   328b2:	84 c0                	test   al,al
   328b4:	74 64                	je     3291a <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0xdc>
   328b6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   328ba:	48 89 c7             	mov    rdi,rax
   328bd:	e8 2a 05 00 00       	call   32dec <std::vector<unsigned int, std::allocator<unsigned int> >::clear()>
   328c2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   328c6:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   328ca:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
   328ce:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   328d2:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
   328d5:	48 29 f1             	sub    rcx,rsi
   328d8:	48 89 ca             	mov    rdx,rcx
   328db:	48 c1 fa 02          	sar    rdx,0x2
   328df:	48 89 d6             	mov    rsi,rdx
   328e2:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   328e6:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
   328e9:	48 89 f2             	mov    rdx,rsi
   328ec:	48 89 ce             	mov    rsi,rcx
   328ef:	48 89 c7             	mov    rdi,rax
   328f2:	e8 05 5f ff ff       	call   287fc <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)>
   328f7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   328fb:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   32902:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32906:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   3290e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32912:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   3291a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3291e:	48 89 c7             	mov    rdi,rax
   32921:	e8 8a 8a ff ff       	call   2b3b0 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator() const>
   32926:	48 89 c3             	mov    rbx,rax
   32929:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3292d:	48 89 c7             	mov    rdi,rax
   32930:	e8 fd 5e ff ff       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   32935:	48 89 de             	mov    rsi,rbx
   32938:	48 89 c7             	mov    rdi,rax
   3293b:	e8 3f 13 00 00       	call   33c7f <void std::__alloc_on_copy<std::allocator<unsigned int> >(std::allocator<unsigned int>&, std::allocator<unsigned int> const&)>
   32940:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32944:	48 89 c7             	mov    rdi,rax
   32947:	e8 64 3c ff ff       	call   265b0 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   3294c:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   32950:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32954:	48 89 c7             	mov    rdi,rax
   32957:	e8 32 13 00 00       	call   33c8e <std::vector<unsigned int, std::allocator<unsigned int> >::capacity() const>
   3295c:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
   32960:	0f 97 c0             	seta   al
   32963:	84 c0                	test   al,al
   32965:	0f 84 bd 00 00 00    	je     32a28 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x1ea>
   3296b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3296f:	48 89 c7             	mov    rdi,rax
   32972:	e8 83 13 00 00       	call   33cfa <std::vector<unsigned int, std::allocator<unsigned int> >::end() const>
   32977:	48 89 c3             	mov    rbx,rax
   3297a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3297e:	48 89 c7             	mov    rdi,rax
   32981:	e8 2c 13 00 00       	call   33cb2 <std::vector<unsigned int, std::allocator<unsigned int> >::begin() const>
   32986:	48 89 c2             	mov    rdx,rax
   32989:	48 8b 75 d0          	mov    rsi,QWORD PTR [rbp-0x30]
   3298d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32991:	48 89 d9             	mov    rcx,rbx
   32994:	48 89 c7             	mov    rdi,rax
   32997:	e8 aa 13 00 00       	call   33d46 <unsigned int* std::vector<unsigned int, std::allocator<unsigned int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(unsigned long, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   3299c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   329a0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   329a4:	48 89 c7             	mov    rdi,rax
   329a7:	e8 86 5e ff ff       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   329ac:	48 89 c2             	mov    rdx,rax
   329af:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   329b3:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   329b7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   329bb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   329be:	48 89 ce             	mov    rsi,rcx
   329c1:	48 89 c7             	mov    rdi,rax
   329c4:	e8 77 5e ff ff       	call   28840 <void std::_Destroy<unsigned int*, unsigned int>(unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   329c9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   329cd:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   329d1:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
   329d5:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   329d9:	48 8b 32             	mov    rsi,QWORD PTR [rdx]
   329dc:	48 29 f1             	sub    rcx,rsi
   329df:	48 89 ca             	mov    rdx,rcx
   329e2:	48 c1 fa 02          	sar    rdx,0x2
   329e6:	48 89 d6             	mov    rsi,rdx
   329e9:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   329ed:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
   329f0:	48 89 f2             	mov    rdx,rsi
   329f3:	48 89 ce             	mov    rsi,rcx
   329f6:	48 89 c7             	mov    rdi,rax
   329f9:	e8 fe 5d ff ff       	call   287fc <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)>
   329fe:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32a02:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   32a06:	48 89 10             	mov    QWORD PTR [rax],rdx
   32a09:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32a0d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   32a10:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32a14:	48 c1 e0 02          	shl    rax,0x2
   32a18:	48 01 c2             	add    rdx,rax
   32a1b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32a1f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   32a23:	e9 01 01 00 00       	jmp    32b29 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x2eb>
   32a28:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32a2c:	48 89 c7             	mov    rdi,rax
   32a2f:	e8 7c 3b ff ff       	call   265b0 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   32a34:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
   32a38:	0f 96 c0             	setbe  al
   32a3b:	84 c0                	test   al,al
   32a3d:	74 69                	je     32aa8 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x26a>
   32a3f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32a43:	48 89 c7             	mov    rdi,rax
   32a46:	e8 e7 5d ff ff       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   32a4b:	49 89 c4             	mov    r12,rax
   32a4e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32a52:	48 89 c7             	mov    rdi,rax
   32a55:	e8 96 54 ff ff       	call   27ef0 <std::vector<unsigned int, std::allocator<unsigned int> >::end()>
   32a5a:	48 89 c3             	mov    rbx,rax
   32a5d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32a61:	48 89 c7             	mov    rdi,rax
   32a64:	e8 bd 6f ff ff       	call   29a26 <std::vector<unsigned int, std::allocator<unsigned int> >::begin()>
   32a69:	49 89 c6             	mov    r14,rax
   32a6c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32a70:	48 89 c7             	mov    rdi,rax
   32a73:	e8 82 12 00 00       	call   33cfa <std::vector<unsigned int, std::allocator<unsigned int> >::end() const>
   32a78:	49 89 c5             	mov    r13,rax
   32a7b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32a7f:	48 89 c7             	mov    rdi,rax
   32a82:	e8 2b 12 00 00       	call   33cb2 <std::vector<unsigned int, std::allocator<unsigned int> >::begin() const>
   32a87:	4c 89 f2             	mov    rdx,r14
   32a8a:	4c 89 ee             	mov    rsi,r13
   32a8d:	48 89 c7             	mov    rdi,rax
   32a90:	e8 47 13 00 00       	call   33ddc <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   32a95:	4c 89 e2             	mov    rdx,r12
   32a98:	48 89 de             	mov    rsi,rbx
   32a9b:	48 89 c7             	mov    rdi,rax
   32a9e:	e8 84 13 00 00       	call   33e27 <void std::_Destroy<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<unsigned int>&)>
   32aa3:	e9 81 00 00 00       	jmp    32b29 <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x2eb>
   32aa8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32aac:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   32aaf:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32ab3:	4c 8b 20             	mov    r12,QWORD PTR [rax]
   32ab6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32aba:	48 89 c7             	mov    rdi,rax
   32abd:	e8 ee 3a ff ff       	call   265b0 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   32ac2:	48 c1 e0 02          	shl    rax,0x2
   32ac6:	49 8d 0c 04          	lea    rcx,[r12+rax*1]
   32aca:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32ace:	48 8b 00             	mov    rax,QWORD PTR [rax]
   32ad1:	48 89 da             	mov    rdx,rbx
   32ad4:	48 89 ce             	mov    rsi,rcx
   32ad7:	48 89 c7             	mov    rdi,rax
   32ada:	e8 72 13 00 00       	call   33e51 <unsigned int* std::copy<unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>
   32adf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32ae3:	48 89 c7             	mov    rdi,rax
   32ae6:	e8 47 5d ff ff       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   32aeb:	49 89 c5             	mov    r13,rax
   32aee:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32af2:	4c 8b 60 08          	mov    r12,QWORD PTR [rax+0x8]
   32af6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32afa:	48 8b 58 08          	mov    rbx,QWORD PTR [rax+0x8]
   32afe:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   32b02:	4c 8b 30             	mov    r14,QWORD PTR [rax]
   32b05:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32b09:	48 89 c7             	mov    rdi,rax
   32b0c:	e8 9f 3a ff ff       	call   265b0 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   32b11:	48 c1 e0 02          	shl    rax,0x2
   32b15:	4c 01 f0             	add    rax,r14
   32b18:	4c 89 e9             	mov    rcx,r13
   32b1b:	4c 89 e2             	mov    rdx,r12
   32b1e:	48 89 de             	mov    rsi,rbx
   32b21:	48 89 c7             	mov    rdi,rax
   32b24:	e8 73 13 00 00       	call   33e9c <unsigned int* std::__uninitialized_copy_a<unsigned int*, unsigned int*, unsigned int>(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   32b29:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32b2d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   32b30:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   32b34:	48 c1 e0 02          	shl    rax,0x2
   32b38:	48 01 c2             	add    rdx,rax
   32b3b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32b3f:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   32b43:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   32b47:	48 83 c4 20          	add    rsp,0x20
   32b4b:	5b                   	pop    rbx
   32b4c:	41 5c                	pop    r12
   32b4e:	41 5d                	pop    r13
   32b50:	41 5e                	pop    r14
   32b52:	5d                   	pop    rbp
   32b53:	c3                   	ret    

0000000000032b54 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::clear()>:
   32b54:	55                   	push   rbp
   32b55:	48 89 e5             	mov    rbp,rsp
   32b58:	48 83 ec 10          	sub    rsp,0x10
   32b5c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32b60:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32b64:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   32b67:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32b6b:	48 89 d6             	mov    rsi,rdx
   32b6e:	48 89 c7             	mov    rdi,rax
   32b71:	e8 58 13 00 00       	call   33ece <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_erase_at_end(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
   32b76:	90                   	nop
   32b77:	c9                   	leave  
   32b78:	c3                   	ret    
   32b79:	90                   	nop

0000000000032b7a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
   32b7a:	55                   	push   rbp
   32b7b:	48 89 e5             	mov    rbp,rsp
   32b7e:	48 83 ec 10          	sub    rsp,0x10
   32b82:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32b86:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   32b8a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   32b8e:	48 89 c7             	mov    rdi,rax
   32b91:	e8 34 2e ff ff       	call   259ca <std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   32b96:	48 89 c2             	mov    rdx,rax
   32b99:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32b9d:	48 89 d6             	mov    rsi,rdx
   32ba0:	48 89 c7             	mov    rdi,rax
   32ba3:	e8 86 13 00 00       	call   33f2e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   32ba8:	90                   	nop
   32ba9:	c9                   	leave  
   32baa:	c3                   	ret    
   32bab:	90                   	nop

0000000000032bac <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_impl::_Vector_impl()>:
   32bac:	55                   	push   rbp
   32bad:	48 89 e5             	mov    rbp,rsp
   32bb0:	48 83 ec 10          	sub    rsp,0x10
   32bb4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32bb8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32bbc:	48 89 c7             	mov    rdi,rax
   32bbf:	e8 0e 14 00 00       	call   33fd2 <std::allocator<objl::Mesh>::allocator()>
   32bc4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32bc8:	48 89 c7             	mov    rdi,rax
   32bcb:	e8 1e 14 00 00       	call   33fee <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_impl_data::_Vector_impl_data()>
   32bd0:	90                   	nop
   32bd1:	c9                   	leave  
   32bd2:	c3                   	ret    
   32bd3:	90                   	nop

0000000000032bd4 <std::allocator<objl::Mesh>::~allocator()>:
   32bd4:	55                   	push   rbp
   32bd5:	48 89 e5             	mov    rbp,rsp
   32bd8:	48 83 ec 10          	sub    rsp,0x10
   32bdc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32be0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32be4:	48 89 c7             	mov    rdi,rax
   32be7:	e8 30 14 00 00       	call   3401c <__gnu_cxx::new_allocator<objl::Mesh>::~new_allocator()>
   32bec:	90                   	nop
   32bed:	c9                   	leave  
   32bee:	c3                   	ret    
   32bef:	90                   	nop

0000000000032bf0 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::~_Vector_base()>:
   32bf0:	55                   	push   rbp
   32bf1:	48 89 e5             	mov    rbp,rsp
   32bf4:	48 83 ec 10          	sub    rsp,0x10
   32bf8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32bfc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c00:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   32c04:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c08:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32c0b:	48 89 d0             	mov    rax,rdx
   32c0e:	48 29 c8             	sub    rax,rcx
   32c11:	48 c1 f8 03          	sar    rax,0x3
   32c15:	48 89 c2             	mov    rdx,rax
   32c18:	48 b8 a5 4f fa a4 4f fa a4 4f 	movabs rax,0x4fa4fa4fa4fa4fa5
   32c22:	48 0f af c2          	imul   rax,rdx
   32c26:	48 89 c2             	mov    rdx,rax
   32c29:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c2d:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32c30:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c34:	48 89 ce             	mov    rsi,rcx
   32c37:	48 89 c7             	mov    rdi,rax
   32c3a:	e8 e9 13 00 00       	call   34028 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_deallocate(objl::Mesh*, unsigned long)>
   32c3f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c43:	48 89 c7             	mov    rdi,rax
   32c46:	e8 1b ed ff ff       	call   31966 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_impl::~_Vector_impl()>
   32c4b:	90                   	nop
   32c4c:	c9                   	leave  
   32c4d:	c3                   	ret    

0000000000032c4e <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::~vector()>:
   32c4e:	55                   	push   rbp
   32c4f:	48 89 e5             	mov    rbp,rsp
   32c52:	48 83 ec 10          	sub    rsp,0x10
   32c56:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32c5a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c5e:	48 89 c7             	mov    rdi,rax
   32c61:	e8 f8 13 00 00       	call   3405e <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator()>
   32c66:	48 89 c2             	mov    rdx,rax
   32c69:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c6d:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   32c71:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c75:	48 8b 00             	mov    rax,QWORD PTR [rax]
   32c78:	48 89 ce             	mov    rsi,rcx
   32c7b:	48 89 c7             	mov    rdi,rax
   32c7e:	e8 e9 13 00 00       	call   3406c <void std::_Destroy<objl::Mesh*, objl::Mesh>(objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   32c83:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32c87:	48 89 c7             	mov    rdi,rax
   32c8a:	e8 61 ff ff ff       	call   32bf0 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::~_Vector_base()>
   32c8f:	90                   	nop
   32c90:	c9                   	leave  
   32c91:	c3                   	ret    

0000000000032c92 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_impl::_Vector_impl()>:
   32c92:	55                   	push   rbp
   32c93:	48 89 e5             	mov    rbp,rsp
   32c96:	48 83 ec 10          	sub    rsp,0x10
   32c9a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32c9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32ca2:	48 89 c7             	mov    rdi,rax
   32ca5:	e8 ec 13 00 00       	call   34096 <std::allocator<objl::Material>::allocator()>
   32caa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32cae:	48 89 c7             	mov    rdi,rax
   32cb1:	e8 fc 13 00 00       	call   340b2 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_impl_data::_Vector_impl_data()>
   32cb6:	90                   	nop
   32cb7:	c9                   	leave  
   32cb8:	c3                   	ret    
   32cb9:	90                   	nop

0000000000032cba <std::allocator<objl::Material>::~allocator()>:
   32cba:	55                   	push   rbp
   32cbb:	48 89 e5             	mov    rbp,rsp
   32cbe:	48 83 ec 10          	sub    rsp,0x10
   32cc2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32cc6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32cca:	48 89 c7             	mov    rdi,rax
   32ccd:	e8 0e 14 00 00       	call   340e0 <__gnu_cxx::new_allocator<objl::Material>::~new_allocator()>
   32cd2:	90                   	nop
   32cd3:	c9                   	leave  
   32cd4:	c3                   	ret    
   32cd5:	90                   	nop

0000000000032cd6 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::~_Vector_base()>:
   32cd6:	55                   	push   rbp
   32cd7:	48 89 e5             	mov    rbp,rsp
   32cda:	48 83 ec 10          	sub    rsp,0x10
   32cde:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32ce2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32ce6:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   32cea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32cee:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32cf1:	48 89 d0             	mov    rax,rdx
   32cf4:	48 29 c8             	sub    rax,rcx
   32cf7:	48 c1 f8 03          	sar    rax,0x3
   32cfb:	48 89 c2             	mov    rdx,rax
   32cfe:	48 b8 8b af f8 8a af f8 8a af 	movabs rax,0xaf8af8af8af8af8b
   32d08:	48 0f af c2          	imul   rax,rdx
   32d0c:	48 89 c2             	mov    rdx,rax
   32d0f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d13:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32d16:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d1a:	48 89 ce             	mov    rsi,rcx
   32d1d:	48 89 c7             	mov    rdi,rax
   32d20:	e8 c7 13 00 00       	call   340ec <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_deallocate(objl::Material*, unsigned long)>
   32d25:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d29:	48 89 c7             	mov    rdi,rax
   32d2c:	e8 89 ec ff ff       	call   319ba <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_impl::~_Vector_impl()>
   32d31:	90                   	nop
   32d32:	c9                   	leave  
   32d33:	c3                   	ret    

0000000000032d34 <std::vector<objl::Material, std::allocator<objl::Material> >::~vector()>:
   32d34:	55                   	push   rbp
   32d35:	48 89 e5             	mov    rbp,rsp
   32d38:	48 83 ec 10          	sub    rsp,0x10
   32d3c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32d40:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d44:	48 89 c7             	mov    rdi,rax
   32d47:	e8 d6 13 00 00       	call   34122 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_get_Tp_allocator()>
   32d4c:	48 89 c2             	mov    rdx,rax
   32d4f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d53:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   32d57:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d5b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   32d5e:	48 89 ce             	mov    rsi,rcx
   32d61:	48 89 c7             	mov    rdi,rax
   32d64:	e8 c7 13 00 00       	call   34130 <void std::_Destroy<objl::Material*, objl::Material>(objl::Material*, objl::Material*, std::allocator<objl::Material>&)>
   32d69:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d6d:	48 89 c7             	mov    rdi,rax
   32d70:	e8 61 ff ff ff       	call   32cd6 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::~_Vector_base()>
   32d75:	90                   	nop
   32d76:	c9                   	leave  
   32d77:	c3                   	ret    

0000000000032d78 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::clear()>:
   32d78:	55                   	push   rbp
   32d79:	48 89 e5             	mov    rbp,rsp
   32d7c:	48 83 ec 10          	sub    rsp,0x10
   32d80:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32d84:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d88:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   32d8b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32d8f:	48 89 d6             	mov    rsi,rdx
   32d92:	48 89 c7             	mov    rdi,rax
   32d95:	e8 c0 13 00 00       	call   3415a <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_erase_at_end(objl::Mesh*)>
   32d9a:	90                   	nop
   32d9b:	c9                   	leave  
   32d9c:	c3                   	ret    

0000000000032d9d <bool std::operator!=<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>:
   32d9d:	55                   	push   rbp
   32d9e:	48 89 e5             	mov    rbp,rsp
   32da1:	48 83 ec 10          	sub    rsp,0x10
   32da5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32da9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   32dad:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   32db1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32db5:	48 89 d6             	mov    rsi,rdx
   32db8:	48 89 c7             	mov    rdi,rax
   32dbb:	e8 17 39 ff ff       	call   266d7 <bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)>
   32dc0:	83 f0 01             	xor    eax,0x1
   32dc3:	c9                   	leave  
   32dc4:	c3                   	ret    
   32dc5:	90                   	nop

0000000000032dc6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::clear()>:
   32dc6:	55                   	push   rbp
   32dc7:	48 89 e5             	mov    rbp,rsp
   32dca:	48 83 ec 10          	sub    rsp,0x10
   32dce:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32dd2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32dd6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   32dd9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32ddd:	48 89 d6             	mov    rsi,rdx
   32de0:	48 89 c7             	mov    rdi,rax
   32de3:	e8 e4 13 00 00       	call   341cc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_erase_at_end(objl::Vertex*)>
   32de8:	90                   	nop
   32de9:	c9                   	leave  
   32dea:	c3                   	ret    
   32deb:	90                   	nop

0000000000032dec <std::vector<unsigned int, std::allocator<unsigned int> >::clear()>:
   32dec:	55                   	push   rbp
   32ded:	48 89 e5             	mov    rbp,rsp
   32df0:	48 83 ec 10          	sub    rsp,0x10
   32df4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32df8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32dfc:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   32dff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e03:	48 89 d6             	mov    rsi,rdx
   32e06:	48 89 c7             	mov    rdi,rax
   32e09:	e8 1e 14 00 00       	call   3422c <std::vector<unsigned int, std::allocator<unsigned int> >::_M_erase_at_end(unsigned int*)>
   32e0e:	90                   	nop
   32e0f:	c9                   	leave  
   32e10:	c3                   	ret    
   32e11:	90                   	nop

0000000000032e12 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_impl::_Vector_impl()>:
   32e12:	55                   	push   rbp
   32e13:	48 89 e5             	mov    rbp,rsp
   32e16:	48 83 ec 10          	sub    rsp,0x10
   32e1a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32e1e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e22:	48 89 c7             	mov    rdi,rax
   32e25:	e8 62 14 00 00       	call   3428c <std::allocator<objl::Vector3>::allocator()>
   32e2a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e2e:	48 89 c7             	mov    rdi,rax
   32e31:	e8 72 14 00 00       	call   342a8 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_impl_data::_Vector_impl_data()>
   32e36:	90                   	nop
   32e37:	c9                   	leave  
   32e38:	c3                   	ret    
   32e39:	90                   	nop

0000000000032e3a <std::allocator<objl::Vector3>::~allocator()>:
   32e3a:	55                   	push   rbp
   32e3b:	48 89 e5             	mov    rbp,rsp
   32e3e:	48 83 ec 10          	sub    rsp,0x10
   32e42:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32e46:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e4a:	48 89 c7             	mov    rdi,rax
   32e4d:	e8 84 14 00 00       	call   342d6 <__gnu_cxx::new_allocator<objl::Vector3>::~new_allocator()>
   32e52:	90                   	nop
   32e53:	c9                   	leave  
   32e54:	c3                   	ret    
   32e55:	90                   	nop

0000000000032e56 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::~_Vector_base()>:
   32e56:	55                   	push   rbp
   32e57:	48 89 e5             	mov    rbp,rsp
   32e5a:	48 83 ec 10          	sub    rsp,0x10
   32e5e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32e62:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e66:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   32e6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e6e:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32e71:	48 89 d0             	mov    rax,rdx
   32e74:	48 29 c8             	sub    rax,rcx
   32e77:	48 c1 f8 02          	sar    rax,0x2
   32e7b:	48 89 c2             	mov    rdx,rax
   32e7e:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   32e88:	48 0f af c2          	imul   rax,rdx
   32e8c:	48 89 c2             	mov    rdx,rax
   32e8f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e93:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32e96:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32e9a:	48 89 ce             	mov    rsi,rcx
   32e9d:	48 89 c7             	mov    rdi,rax
   32ea0:	e8 3d 14 00 00       	call   342e2 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_deallocate(objl::Vector3*, unsigned long)>
   32ea5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32ea9:	48 89 c7             	mov    rdi,rax
   32eac:	e8 5d eb ff ff       	call   31a0e <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_impl::~_Vector_impl()>
   32eb1:	90                   	nop
   32eb2:	c9                   	leave  
   32eb3:	c3                   	ret    

0000000000032eb4 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::~vector()>:
   32eb4:	55                   	push   rbp
   32eb5:	48 89 e5             	mov    rbp,rsp
   32eb8:	48 83 ec 10          	sub    rsp,0x10
   32ebc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32ec0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32ec4:	48 89 c7             	mov    rdi,rax
   32ec7:	e8 4c 14 00 00       	call   34318 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_get_Tp_allocator()>
   32ecc:	48 89 c2             	mov    rdx,rax
   32ecf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32ed3:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   32ed7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32edb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   32ede:	48 89 ce             	mov    rsi,rcx
   32ee1:	48 89 c7             	mov    rdi,rax
   32ee4:	e8 3d 14 00 00       	call   34326 <void std::_Destroy<objl::Vector3*, objl::Vector3>(objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>
   32ee9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32eed:	48 89 c7             	mov    rdi,rax
   32ef0:	e8 61 ff ff ff       	call   32e56 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::~_Vector_base()>
   32ef5:	90                   	nop
   32ef6:	c9                   	leave  
   32ef7:	c3                   	ret    

0000000000032ef8 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_impl::_Vector_impl()>:
   32ef8:	55                   	push   rbp
   32ef9:	48 89 e5             	mov    rbp,rsp
   32efc:	48 83 ec 10          	sub    rsp,0x10
   32f00:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32f04:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32f08:	48 89 c7             	mov    rdi,rax
   32f0b:	e8 40 14 00 00       	call   34350 <std::allocator<objl::Vector2>::allocator()>
   32f10:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32f14:	48 89 c7             	mov    rdi,rax
   32f17:	e8 50 14 00 00       	call   3436c <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_impl_data::_Vector_impl_data()>
   32f1c:	90                   	nop
   32f1d:	c9                   	leave  
   32f1e:	c3                   	ret    
   32f1f:	90                   	nop

0000000000032f20 <std::allocator<objl::Vector2>::~allocator()>:
   32f20:	55                   	push   rbp
   32f21:	48 89 e5             	mov    rbp,rsp
   32f24:	48 83 ec 10          	sub    rsp,0x10
   32f28:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32f2c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32f30:	48 89 c7             	mov    rdi,rax
   32f33:	e8 62 14 00 00       	call   3439a <__gnu_cxx::new_allocator<objl::Vector2>::~new_allocator()>
   32f38:	90                   	nop
   32f39:	c9                   	leave  
   32f3a:	c3                   	ret    
   32f3b:	90                   	nop

0000000000032f3c <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::~_Vector_base()>:
   32f3c:	55                   	push   rbp
   32f3d:	48 89 e5             	mov    rbp,rsp
   32f40:	48 83 ec 10          	sub    rsp,0x10
   32f44:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32f48:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32f4c:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   32f50:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32f54:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32f57:	48 89 d0             	mov    rax,rdx
   32f5a:	48 29 c8             	sub    rax,rcx
   32f5d:	48 c1 f8 03          	sar    rax,0x3
   32f61:	48 89 c2             	mov    rdx,rax
   32f64:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32f68:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   32f6b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32f6f:	48 89 ce             	mov    rsi,rcx
   32f72:	48 89 c7             	mov    rdi,rax
   32f75:	e8 2c 14 00 00       	call   343a6 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_deallocate(objl::Vector2*, unsigned long)>
   32f7a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32f7e:	48 89 c7             	mov    rdi,rax
   32f81:	e8 dc ea ff ff       	call   31a62 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_impl::~_Vector_impl()>
   32f86:	90                   	nop
   32f87:	c9                   	leave  
   32f88:	c3                   	ret    
   32f89:	90                   	nop

0000000000032f8a <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::~vector()>:
   32f8a:	55                   	push   rbp
   32f8b:	48 89 e5             	mov    rbp,rsp
   32f8e:	48 83 ec 10          	sub    rsp,0x10
   32f92:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   32f96:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32f9a:	48 89 c7             	mov    rdi,rax
   32f9d:	e8 3a 14 00 00       	call   343dc <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_get_Tp_allocator()>
   32fa2:	48 89 c2             	mov    rdx,rax
   32fa5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32fa9:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   32fad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32fb1:	48 8b 00             	mov    rax,QWORD PTR [rax]
   32fb4:	48 89 ce             	mov    rsi,rcx
   32fb7:	48 89 c7             	mov    rdi,rax
   32fba:	e8 2b 14 00 00       	call   343ea <void std::_Destroy<objl::Vector2*, objl::Vector2>(objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>
   32fbf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   32fc3:	48 89 c7             	mov    rdi,rax
   32fc6:	e8 71 ff ff ff       	call   32f3c <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::~_Vector_base()>
   32fcb:	90                   	nop
   32fcc:	c9                   	leave  
   32fcd:	c3                   	ret    

0000000000032fce <std::vector<unsigned int, std::allocator<unsigned int> >::empty() const>:
   32fce:	55                   	push   rbp
   32fcf:	48 89 e5             	mov    rbp,rsp
   32fd2:	48 83 ec 30          	sub    rsp,0x30
   32fd6:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   32fda:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   32fe3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   32fe7:	31 c0                	xor    eax,eax
   32fe9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32fed:	48 89 c7             	mov    rdi,rax
   32ff0:	e8 05 0d 00 00       	call   33cfa <std::vector<unsigned int, std::allocator<unsigned int> >::end() const>
   32ff5:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   32ff9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   32ffd:	48 89 c7             	mov    rdi,rax
   33000:	e8 ad 0c 00 00       	call   33cb2 <std::vector<unsigned int, std::allocator<unsigned int> >::begin() const>
   33005:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   33009:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   3300d:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   33011:	48 89 d6             	mov    rsi,rdx
   33014:	48 89 c7             	mov    rdi,rax
   33017:	e8 f8 13 00 00       	call   34414 <bool __gnu_cxx::operator==<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > const&, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > const&)>
   3301c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   33020:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   33029:	74 05                	je     33030 <std::vector<unsigned int, std::allocator<unsigned int> >::empty() const+0x62>
   3302b:	e8 b0 14 fd ff       	call   44e0 <__stack_chk_fail@plt>
   33030:	c9                   	leave  
   33031:	c3                   	ret    

0000000000033032 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::empty() const>:
   33032:	55                   	push   rbp
   33033:	48 89 e5             	mov    rbp,rsp
   33036:	48 83 ec 30          	sub    rsp,0x30
   3303a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   3303e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33047:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   3304b:	31 c0                	xor    eax,eax
   3304d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33051:	48 89 c7             	mov    rdi,rax
   33054:	e8 f3 09 00 00       	call   33a4c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end() const>
   33059:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   3305d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33061:	48 89 c7             	mov    rdi,rax
   33064:	e8 9b 09 00 00       	call   33a04 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin() const>
   33069:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   3306d:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   33071:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   33075:	48 89 d6             	mov    rsi,rdx
   33078:	48 89 c7             	mov    rdi,rax
   3307b:	e8 cf 13 00 00       	call   3444f <bool __gnu_cxx::operator==<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>
   33080:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   33084:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   3308d:	74 05                	je     33094 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::empty() const+0x62>
   3308f:	e8 4c 14 fd ff       	call   44e0 <__stack_chk_fail@plt>
   33094:	c9                   	leave  
   33095:	c3                   	ret    

0000000000033096 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator=(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&&)>:
   33096:	55                   	push   rbp
   33097:	48 89 e5             	mov    rbp,rsp
   3309a:	48 83 ec 20          	sub    rsp,0x20
   3309e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   330a2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   330a6:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
   330aa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   330ae:	48 89 c7             	mov    rdi,rax
   330b1:	e8 d4 13 00 00       	call   3448a <std::remove_reference<std::vector<objl::Vertex, std::allocator<objl::Vertex> >&>::type&& std::move<std::vector<objl::Vertex, std::allocator<objl::Vertex> >&>(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&)>
   330b6:	48 89 c2             	mov    rdx,rax
   330b9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   330bd:	48 89 d6             	mov    rsi,rdx
   330c0:	48 89 c7             	mov    rdi,rax
   330c3:	e8 d0 13 00 00       	call   34498 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_move_assign(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&&, std::integral_constant<bool, true>)>
   330c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   330cc:	c9                   	leave  
   330cd:	c3                   	ret    

00000000000330ce <std::vector<unsigned int, std::allocator<unsigned int> >::operator=(std::vector<unsigned int, std::allocator<unsigned int> >&&)>:
   330ce:	55                   	push   rbp
   330cf:	48 89 e5             	mov    rbp,rsp
   330d2:	48 83 ec 20          	sub    rsp,0x20
   330d6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   330da:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   330de:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
   330e2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   330e6:	48 89 c7             	mov    rdi,rax
   330e9:	e8 6e 14 00 00       	call   3455c <std::remove_reference<std::vector<unsigned int, std::allocator<unsigned int> >&>::type&& std::move<std::vector<unsigned int, std::allocator<unsigned int> >&>(std::vector<unsigned int, std::allocator<unsigned int> >&)>
   330ee:	48 89 c2             	mov    rdx,rax
   330f1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   330f5:	48 89 d6             	mov    rsi,rdx
   330f8:	48 89 c7             	mov    rdi,rax
   330fb:	e8 6a 14 00 00       	call   3456a <std::vector<unsigned int, std::allocator<unsigned int> >::_M_move_assign(std::vector<unsigned int, std::allocator<unsigned int> >&&, std::integral_constant<bool, true>)>
   33100:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33104:	c9                   	leave  
   33105:	c3                   	ret    

0000000000033106 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::push_back(objl::Mesh const&)>:
   33106:	55                   	push   rbp
   33107:	48 89 e5             	mov    rbp,rsp
   3310a:	48 83 ec 10          	sub    rsp,0x10
   3310e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33112:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33116:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3311a:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   3311e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33122:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   33126:	48 39 c2             	cmp    rdx,rax
   33129:	74 34                	je     3315f <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::push_back(objl::Mesh const&)+0x59>
   3312b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3312f:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   33133:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33137:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3313b:	48 89 ce             	mov    rsi,rcx
   3313e:	48 89 c7             	mov    rdi,rax
   33141:	e8 e8 14 00 00       	call   3462e <void std::allocator_traits<std::allocator<objl::Mesh> >::construct<objl::Mesh, objl::Mesh const&>(std::allocator<objl::Mesh>&, objl::Mesh*, objl::Mesh const&)>
   33146:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3314a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   3314e:	48 8d 90 68 01 00 00 	lea    rdx,[rax+0x168]
   33155:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33159:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   3315d:	eb 22                	jmp    33181 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::push_back(objl::Mesh const&)+0x7b>
   3315f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33163:	48 89 c7             	mov    rdi,rax
   33166:	e8 d5 01 00 00       	call   33340 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::end()>
   3316b:	48 89 c1             	mov    rcx,rax
   3316e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   33172:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33176:	48 89 ce             	mov    rsi,rcx
   33179:	48 89 c7             	mov    rdi,rax
   3317c:	e8 e7 14 00 00       	call   34668 <void std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_realloc_insert<objl::Mesh const&>(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >, objl::Mesh const&)>
   33181:	90                   	nop
   33182:	c9                   	leave  
   33183:	c3                   	ret    

0000000000033184 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::push_back(objl::Vector3 const&)>:
   33184:	55                   	push   rbp
   33185:	48 89 e5             	mov    rbp,rsp
   33188:	48 83 ec 10          	sub    rsp,0x10
   3318c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33190:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33194:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33198:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   3319c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   331a0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   331a4:	48 39 c2             	cmp    rdx,rax
   331a7:	74 31                	je     331da <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::push_back(objl::Vector3 const&)+0x56>
   331a9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   331ad:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   331b1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   331b5:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   331b9:	48 89 ce             	mov    rsi,rcx
   331bc:	48 89 c7             	mov    rdi,rax
   331bf:	e8 f7 16 00 00       	call   348bb <void std::allocator_traits<std::allocator<objl::Vector3> >::construct<objl::Vector3, objl::Vector3 const&>(std::allocator<objl::Vector3>&, objl::Vector3*, objl::Vector3 const&)>
   331c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   331c8:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   331cc:	48 8d 50 0c          	lea    rdx,[rax+0xc]
   331d0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   331d4:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   331d8:	eb 22                	jmp    331fc <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::push_back(objl::Vector3 const&)+0x78>
   331da:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   331de:	48 89 c7             	mov    rdi,rax
   331e1:	e8 0e 17 00 00       	call   348f4 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::end()>
   331e6:	48 89 c1             	mov    rcx,rax
   331e9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   331ed:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   331f1:	48 89 ce             	mov    rsi,rcx
   331f4:	48 89 c7             	mov    rdi,rax
   331f7:	e8 44 17 00 00       	call   34940 <void std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_realloc_insert<objl::Vector3 const&>(__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >, objl::Vector3 const&)>
   331fc:	90                   	nop
   331fd:	c9                   	leave  
   331fe:	c3                   	ret    
   331ff:	90                   	nop

0000000000033200 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::push_back(objl::Vector2 const&)>:
   33200:	55                   	push   rbp
   33201:	48 89 e5             	mov    rbp,rsp
   33204:	48 83 ec 10          	sub    rsp,0x10
   33208:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3320c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33210:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33214:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   33218:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3321c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   33220:	48 39 c2             	cmp    rdx,rax
   33223:	74 31                	je     33256 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::push_back(objl::Vector2 const&)+0x56>
   33225:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33229:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   3322d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33231:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   33235:	48 89 ce             	mov    rsi,rcx
   33238:	48 89 c7             	mov    rdi,rax
   3323b:	e8 da 18 00 00       	call   34b1a <void std::allocator_traits<std::allocator<objl::Vector2> >::construct<objl::Vector2, objl::Vector2 const&>(std::allocator<objl::Vector2>&, objl::Vector2*, objl::Vector2 const&)>
   33240:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33244:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   33248:	48 8d 50 08          	lea    rdx,[rax+0x8]
   3324c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33250:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   33254:	eb 22                	jmp    33278 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::push_back(objl::Vector2 const&)+0x78>
   33256:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3325a:	48 89 c7             	mov    rdi,rax
   3325d:	e8 f2 18 00 00       	call   34b54 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::end()>
   33262:	48 89 c1             	mov    rcx,rax
   33265:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   33269:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3326d:	48 89 ce             	mov    rsi,rcx
   33270:	48 89 c7             	mov    rdi,rax
   33273:	e8 28 19 00 00       	call   34ba0 <void std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_realloc_insert<objl::Vector2 const&>(__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >, objl::Vector2 const&)>
   33278:	90                   	nop
   33279:	c9                   	leave  
   3327a:	c3                   	ret    
   3327b:	90                   	nop

000000000003327c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)>:
   3327c:	55                   	push   rbp
   3327d:	48 89 e5             	mov    rbp,rsp
   33280:	48 83 ec 10          	sub    rsp,0x10
   33284:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33288:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3328c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33290:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   33294:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33298:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   3329c:	48 39 c2             	cmp    rdx,rax
   3329f:	74 31                	je     332d2 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)+0x56>
   332a1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   332a5:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   332a9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   332ad:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   332b1:	48 89 ce             	mov    rsi,rcx
   332b4:	48 89 c7             	mov    rdi,rax
   332b7:	e8 99 1a 00 00       	call   34d55 <void std::allocator_traits<std::allocator<objl::Vertex> >::construct<objl::Vertex, objl::Vertex const&>(std::allocator<objl::Vertex>&, objl::Vertex*, objl::Vertex const&)>
   332bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   332c0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   332c4:	48 8d 50 20          	lea    rdx,[rax+0x20]
   332c8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   332cc:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   332d0:	eb 22                	jmp    332f4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::push_back(objl::Vertex const&)+0x78>
   332d2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   332d6:	48 89 c7             	mov    rdi,rax
   332d9:	e8 9c 08 00 00       	call   33b7a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end()>
   332de:	48 89 c1             	mov    rcx,rax
   332e1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   332e5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   332e9:	48 89 ce             	mov    rsi,rcx
   332ec:	48 89 c7             	mov    rdi,rax
   332ef:	e8 9a 1a 00 00       	call   34d8e <void std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_realloc_insert<objl::Vertex const&>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex const&)>
   332f4:	90                   	nop
   332f5:	c9                   	leave  
   332f6:	c3                   	ret    
   332f7:	90                   	nop

00000000000332f8 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::begin()>:
   332f8:	55                   	push   rbp
   332f9:	48 89 e5             	mov    rbp,rsp
   332fc:	48 83 ec 20          	sub    rsp,0x20
   33300:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33304:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3330d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33311:	31 c0                	xor    eax,eax
   33313:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33317:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   3331b:	48 89 d6             	mov    rsi,rdx
   3331e:	48 89 c7             	mov    rdi,rax
   33321:	e8 1c 1c 00 00       	call   34f42 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::__normal_iterator(objl::Mesh* const&)>
   33326:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3332a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   3332e:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   33337:	74 05                	je     3333e <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::begin()+0x46>
   33339:	e8 a2 11 fd ff       	call   44e0 <__stack_chk_fail@plt>
   3333e:	c9                   	leave  
   3333f:	c3                   	ret    

0000000000033340 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::end()>:
   33340:	55                   	push   rbp
   33341:	48 89 e5             	mov    rbp,rsp
   33344:	48 83 ec 20          	sub    rsp,0x20
   33348:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3334c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33355:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33359:	31 c0                	xor    eax,eax
   3335b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3335f:	48 8d 50 08          	lea    rdx,[rax+0x8]
   33363:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   33367:	48 89 d6             	mov    rsi,rdx
   3336a:	48 89 c7             	mov    rdi,rax
   3336d:	e8 d0 1b 00 00       	call   34f42 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::__normal_iterator(objl::Mesh* const&)>
   33372:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   33376:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   3337a:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   33383:	74 05                	je     3338a <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::end()+0x4a>
   33385:	e8 56 11 fd ff       	call   44e0 <__stack_chk_fail@plt>
   3338a:	c9                   	leave  
   3338b:	c3                   	ret    

000000000003338c <bool __gnu_cxx::operator!=<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&, __gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&)>:
   3338c:	55                   	push   rbp
   3338d:	48 89 e5             	mov    rbp,rsp
   33390:	53                   	push   rbx
   33391:	48 83 ec 18          	sub    rsp,0x18
   33395:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33399:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3339d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   333a1:	48 89 c7             	mov    rdi,rax
   333a4:	e8 b7 1b 00 00       	call   34f60 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   333a9:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   333ac:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   333b0:	48 89 c7             	mov    rdi,rax
   333b3:	e8 a8 1b 00 00       	call   34f60 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   333b8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   333bb:	48 39 c3             	cmp    rbx,rax
   333be:	0f 95 c0             	setne  al
   333c1:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   333c5:	c9                   	leave  
   333c6:	c3                   	ret    
   333c7:	90                   	nop

00000000000333c8 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::operator++()>:
   333c8:	55                   	push   rbp
   333c9:	48 89 e5             	mov    rbp,rsp
   333cc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   333d0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   333d4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   333d7:	48 8d 90 68 01 00 00 	lea    rdx,[rax+0x168]
   333de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   333e2:	48 89 10             	mov    QWORD PTR [rax],rdx
   333e5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   333e9:	5d                   	pop    rbp
   333ea:	c3                   	ret    
   333eb:	90                   	nop

00000000000333ec <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::operator*() const>:
   333ec:	55                   	push   rbp
   333ed:	48 89 e5             	mov    rbp,rsp
   333f0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   333f4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   333f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   333fb:	5d                   	pop    rbp
   333fc:	c3                   	ret    
   333fd:	90                   	nop

00000000000333fe <std::vector<objl::Material, std::allocator<objl::Material> >::size() const>:
   333fe:	55                   	push   rbp
   333ff:	48 89 e5             	mov    rbp,rsp
   33402:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33406:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3340a:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   3340e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33412:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   33415:	48 89 d0             	mov    rax,rdx
   33418:	48 29 c8             	sub    rax,rcx
   3341b:	48 c1 f8 03          	sar    rax,0x3
   3341f:	48 89 c2             	mov    rdx,rax
   33422:	48 b8 8b af f8 8a af f8 8a af 	movabs rax,0xaf8af8af8af8af8b
   3342c:	48 0f af c2          	imul   rax,rdx
   33430:	5d                   	pop    rbp
   33431:	c3                   	ret    

0000000000033432 <std::vector<objl::Material, std::allocator<objl::Material> >::operator[](unsigned long)>:
   33432:	55                   	push   rbp
   33433:	48 89 e5             	mov    rbp,rsp
   33436:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3343a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3343e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33442:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   33445:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   33449:	48 69 c0 18 01 00 00 	imul   rax,rax,0x118
   33450:	48 01 d0             	add    rax,rdx
   33453:	5d                   	pop    rbp
   33454:	c3                   	ret    
   33455:	90                   	nop

0000000000033456 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::empty() const>:
   33456:	55                   	push   rbp
   33457:	48 89 e5             	mov    rbp,rsp
   3345a:	48 83 ec 30          	sub    rsp,0x30
   3345e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   33462:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3346b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   3346f:	31 c0                	xor    eax,eax
   33471:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33475:	48 89 c7             	mov    rdi,rax
   33478:	e8 39 1b 00 00       	call   34fb6 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::end() const>
   3347d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   33481:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33485:	48 89 c7             	mov    rdi,rax
   33488:	e8 e1 1a 00 00       	call   34f6e <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::begin() const>
   3348d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   33491:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   33495:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   33499:	48 89 d6             	mov    rsi,rdx
   3349c:	48 89 c7             	mov    rdi,rax
   3349f:	e8 5e 1b 00 00       	call   35002 <bool __gnu_cxx::operator==<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >(__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&, __gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&)>
   334a4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   334a8:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   334b1:	74 05                	je     334b8 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::empty() const+0x62>
   334b3:	e8 28 10 fd ff       	call   44e0 <__stack_chk_fail@plt>
   334b8:	c9                   	leave  
   334b9:	c3                   	ret    

00000000000334ba <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
   334ba:	55                   	push   rbp
   334bb:	48 89 e5             	mov    rbp,rsp
   334be:	48 83 ec 20          	sub    rsp,0x20
   334c2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   334c6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   334ca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   334ce:	ba 0a 00 00 00       	mov    edx,0xa
   334d3:	be 00 00 00 00       	mov    esi,0x0
   334d8:	48 89 c7             	mov    rdi,rax
   334db:	e8 1c dc ff ff       	call   310fc <std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int)>
   334e0:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   334e3:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   334e7:	79 11                	jns    334fa <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x40>
   334e9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   334ed:	48 89 c7             	mov    rdi,rax
   334f0:	e8 49 1b 00 00       	call   3503e <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::size() const>
   334f5:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   334f8:	eb 04                	jmp    334fe <objl::Vector3 const& objl::algorithm::getElement<objl::Vector3>(std::vector<objl::Vector3, std::allocator<objl::Vector3> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x44>
   334fa:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
   334fe:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   33501:	48 63 d0             	movsxd rdx,eax
   33504:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33508:	48 89 d6             	mov    rsi,rdx
   3350b:	48 89 c7             	mov    rdi,rax
   3350e:	e8 5f 1b 00 00       	call   35072 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::operator[](unsigned long) const>
   33513:	c9                   	leave  
   33514:	c3                   	ret    

0000000000033515 <objl::Vector2 const& objl::algorithm::getElement<objl::Vector2>(std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
   33515:	55                   	push   rbp
   33516:	48 89 e5             	mov    rbp,rsp
   33519:	48 83 ec 20          	sub    rsp,0x20
   3351d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33521:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33525:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33529:	ba 0a 00 00 00       	mov    edx,0xa
   3352e:	be 00 00 00 00       	mov    esi,0x0
   33533:	48 89 c7             	mov    rdi,rax
   33536:	e8 c1 db ff ff       	call   310fc <std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int)>
   3353b:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
   3353e:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
   33542:	79 11                	jns    33555 <objl::Vector2 const& objl::algorithm::getElement<objl::Vector2>(std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x40>
   33544:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33548:	48 89 c7             	mov    rdi,rax
   3354b:	e8 4c 1b 00 00       	call   3509c <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::size() const>
   33550:	01 45 fc             	add    DWORD PTR [rbp-0x4],eax
   33553:	eb 04                	jmp    33559 <objl::Vector2 const& objl::algorithm::getElement<objl::Vector2>(std::vector<objl::Vector2, std::allocator<objl::Vector2> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x44>
   33555:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
   33559:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
   3355c:	48 63 d0             	movsxd rdx,eax
   3355f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33563:	48 89 d6             	mov    rsi,rdx
   33566:	48 89 c7             	mov    rdi,rax
   33569:	e8 52 1b 00 00       	call   350c0 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::operator[](unsigned long) const>
   3356e:	c9                   	leave  
   3356f:	c3                   	ret    

0000000000033570 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)>:
   33570:	55                   	push   rbp
   33571:	48 89 e5             	mov    rbp,rsp
   33574:	41 55                	push   r13
   33576:	41 54                	push   r12
   33578:	53                   	push   rbx
   33579:	48 83 ec 28          	sub    rsp,0x28
   3357d:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   33581:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   33585:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3358e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   33592:	31 c0                	xor    eax,eax
   33594:	48 8b 5d c8          	mov    rbx,QWORD PTR [rbp-0x38]
   33598:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3359c:	48 89 c7             	mov    rdi,rax
   3359f:	e8 0c 04 00 00       	call   339b0 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator() const>
   335a4:	48 89 c2             	mov    rdx,rax
   335a7:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   335ab:	48 89 d6             	mov    rsi,rdx
   335ae:	48 89 c7             	mov    rdi,rax
   335b1:	e8 2a 1b 00 00       	call   350e0 <__gnu_cxx::__alloc_traits<std::allocator<objl::Vertex>, objl::Vertex>::_S_select_on_copy(std::allocator<objl::Vertex> const&)>
   335b6:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   335ba:	48 89 c7             	mov    rdi,rax
   335bd:	e8 a6 2f ff ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   335c2:	48 89 c1             	mov    rcx,rax
   335c5:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   335c9:	48 89 c2             	mov    rdx,rax
   335cc:	48 89 ce             	mov    rsi,rcx
   335cf:	48 89 df             	mov    rdi,rbx
   335d2:	e8 55 1b 00 00       	call   3512c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base(unsigned long, std::allocator<objl::Vertex> const&)>
   335d7:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   335db:	48 89 c7             	mov    rdi,rax
   335de:	e8 7f ee ff ff       	call   32462 <std::allocator<objl::Vertex>::~allocator()>
   335e3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   335e7:	48 89 c7             	mov    rdi,rax
   335ea:	e8 89 03 00 00       	call   33978 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   335ef:	49 89 c5             	mov    r13,rax
   335f2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   335f6:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   335f9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   335fd:	48 89 c7             	mov    rdi,rax
   33600:	e8 47 04 00 00       	call   33a4c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end() const>
   33605:	49 89 c4             	mov    r12,rax
   33608:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3360c:	48 89 c7             	mov    rdi,rax
   3360f:	e8 f0 03 00 00       	call   33a04 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin() const>
   33614:	4c 89 e9             	mov    rcx,r13
   33617:	48 89 da             	mov    rdx,rbx
   3361a:	4c 89 e6             	mov    rsi,r12
   3361d:	48 89 c7             	mov    rdi,rax
   33620:	e8 64 1b 00 00       	call   35189 <objl::Vertex* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*, objl::Vertex>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*, std::allocator<objl::Vertex>&)>
   33625:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   33629:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
   3362d:	90                   	nop
   3362e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33632:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   3363b:	74 3b                	je     33678 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x108>
   3363d:	eb 34                	jmp    33673 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)+0x103>
   3363f:	48 89 c3             	mov    rbx,rax
   33642:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   33646:	48 89 c7             	mov    rdi,rax
   33649:	e8 14 ee ff ff       	call   32462 <std::allocator<objl::Vertex>::~allocator()>
   3364e:	48 89 d8             	mov    rax,rbx
   33651:	48 89 c7             	mov    rdi,rax
   33654:	e8 07 11 fd ff       	call   4760 <_Unwind_Resume@plt>
   33659:	48 89 c3             	mov    rbx,rax
   3365c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   33660:	48 89 c7             	mov    rdi,rax
   33663:	e8 16 ee ff ff       	call   3247e <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::~_Vector_base()>
   33668:	48 89 d8             	mov    rax,rbx
   3366b:	48 89 c7             	mov    rdi,rax
   3366e:	e8 ed 10 fd ff       	call   4760 <_Unwind_Resume@plt>
   33673:	e8 68 0e fd ff       	call   44e0 <__stack_chk_fail@plt>
   33678:	48 83 c4 28          	add    rsp,0x28
   3367c:	5b                   	pop    rbx
   3367d:	41 5c                	pop    r12
   3367f:	41 5d                	pop    r13
   33681:	5d                   	pop    rbp
   33682:	c3                   	ret    
   33683:	90                   	nop

0000000000033684 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::operator[](unsigned long) const>:
   33684:	55                   	push   rbp
   33685:	48 89 e5             	mov    rbp,rsp
   33688:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3368c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33690:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33694:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   33697:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3369b:	48 c1 e0 05          	shl    rax,0x5
   3369f:	48 01 d0             	add    rax,rdx
   336a2:	5d                   	pop    rbp
   336a3:	c3                   	ret    

00000000000336a4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin()>:
   336a4:	55                   	push   rbp
   336a5:	48 89 e5             	mov    rbp,rsp
   336a8:	48 83 ec 20          	sub    rsp,0x20
   336ac:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   336b0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   336b9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   336bd:	31 c0                	xor    eax,eax
   336bf:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   336c3:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   336c7:	48 89 d6             	mov    rsi,rdx
   336ca:	48 89 c7             	mov    rdi,rax
   336cd:	e8 e8 1a 00 00       	call   351ba <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex* const&)>
   336d2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   336d6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   336da:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   336e3:	74 05                	je     336ea <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin()+0x46>
   336e5:	e8 f6 0d fd ff       	call   44e0 <__stack_chk_fail@plt>
   336ea:	c9                   	leave  
   336eb:	c3                   	ret    

00000000000336ec <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator+(long) const>:
   336ec:	55                   	push   rbp
   336ed:	48 89 e5             	mov    rbp,rsp
   336f0:	48 83 ec 30          	sub    rsp,0x30
   336f4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   336f8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   336fc:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33705:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33709:	31 c0                	xor    eax,eax
   3370b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3370f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   33712:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   33716:	48 c1 e0 05          	shl    rax,0x5
   3371a:	48 01 d0             	add    rax,rdx
   3371d:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   33721:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   33725:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   33729:	48 89 d6             	mov    rsi,rdx
   3372c:	48 89 c7             	mov    rdi,rax
   3372f:	e8 86 1a 00 00       	call   351ba <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex* const&)>
   33734:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   33738:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   3373c:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   33745:	74 05                	je     3374c <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator+(long) const+0x60>
   33747:	e8 94 0d fd ff       	call   44e0 <__stack_chk_fail@plt>
   3374c:	c9                   	leave  
   3374d:	c3                   	ret    

000000000003374e <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator<objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex*, __gnu_cxx::__enable_if<std::__are_same<objl::Vertex*, objl::Vertex*>::__value, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__type> const&)>:
   3374e:	55                   	push   rbp
   3374f:	48 89 e5             	mov    rbp,rsp
   33752:	48 83 ec 10          	sub    rsp,0x10
   33756:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3375a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3375e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   33762:	48 89 c7             	mov    rdi,rax
   33765:	e8 6e 1a 00 00       	call   351d8 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   3376a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   3376d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33771:	48 89 10             	mov    QWORD PTR [rax],rdx
   33774:	90                   	nop
   33775:	c9                   	leave  
   33776:	c3                   	ret    
   33777:	90                   	nop

0000000000033778 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::erase(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   33778:	55                   	push   rbp
   33779:	48 89 e5             	mov    rbp,rsp
   3377c:	53                   	push   rbx
   3377d:	48 83 ec 38          	sub    rsp,0x38
   33781:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   33785:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   33789:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33792:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   33796:	31 c0                	xor    eax,eax
   33798:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3379c:	48 89 c7             	mov    rdi,rax
   3379f:	e8 42 1a 00 00       	call   351e6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::cbegin() const>
   337a4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   337a8:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   337ac:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   337b0:	48 89 d6             	mov    rsi,rdx
   337b3:	48 89 c7             	mov    rdi,rax
   337b6:	e8 73 1a 00 00       	call   3522e <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::difference_type __gnu_cxx::operator-<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>
   337bb:	48 89 c3             	mov    rbx,rax
   337be:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   337c2:	48 89 c7             	mov    rdi,rax
   337c5:	e8 da fe ff ff       	call   336a4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin()>
   337ca:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   337ce:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   337d2:	48 89 de             	mov    rsi,rbx
   337d5:	48 89 c7             	mov    rdi,rax
   337d8:	e8 0f ff ff ff       	call   336ec <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator+(long) const>
   337dd:	48 89 c2             	mov    rdx,rax
   337e0:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   337e4:	48 89 d6             	mov    rsi,rdx
   337e7:	48 89 c7             	mov    rdi,rax
   337ea:	e8 7f 1a 00 00       	call   3526e <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_erase(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   337ef:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   337f3:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   337fc:	74 05                	je     33803 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::erase(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)+0x8b>
   337fe:	e8 dd 0c fd ff       	call   44e0 <__stack_chk_fail@plt>
   33803:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33807:	c9                   	leave  
   33808:	c3                   	ret    
   33809:	90                   	nop

000000000003380a <std::vector<objl::Material, std::allocator<objl::Material> >::push_back(objl::Material const&)>:
   3380a:	55                   	push   rbp
   3380b:	48 89 e5             	mov    rbp,rsp
   3380e:	48 83 ec 10          	sub    rsp,0x10
   33812:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33816:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3381a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3381e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   33822:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33826:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   3382a:	48 39 c2             	cmp    rdx,rax
   3382d:	74 34                	je     33863 <std::vector<objl::Material, std::allocator<objl::Material> >::push_back(objl::Material const&)+0x59>
   3382f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33833:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   33837:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3383b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3383f:	48 89 ce             	mov    rsi,rcx
   33842:	48 89 c7             	mov    rdi,rax
   33845:	e8 fe 1a 00 00       	call   35348 <void std::allocator_traits<std::allocator<objl::Material> >::construct<objl::Material, objl::Material const&>(std::allocator<objl::Material>&, objl::Material*, objl::Material const&)>
   3384a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3384e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   33852:	48 8d 90 18 01 00 00 	lea    rdx,[rax+0x118]
   33859:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3385d:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   33861:	eb 22                	jmp    33885 <std::vector<objl::Material, std::allocator<objl::Material> >::push_back(objl::Material const&)+0x7b>
   33863:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33867:	48 89 c7             	mov    rdi,rax
   3386a:	e8 13 1b 00 00       	call   35382 <std::vector<objl::Material, std::allocator<objl::Material> >::end()>
   3386f:	48 89 c1             	mov    rcx,rax
   33872:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   33876:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3387a:	48 89 ce             	mov    rsi,rcx
   3387d:	48 89 c7             	mov    rdi,rax
   33880:	e8 49 1b 00 00       	call   353ce <void std::vector<objl::Material, std::allocator<objl::Material> >::_M_realloc_insert<objl::Material const&>(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >, objl::Material const&)>
   33885:	90                   	nop
   33886:	c9                   	leave  
   33887:	c3                   	ret    

0000000000033888 <std::vector<objl::Material, std::allocator<objl::Material> >::empty() const>:
   33888:	55                   	push   rbp
   33889:	48 89 e5             	mov    rbp,rsp
   3388c:	48 83 ec 30          	sub    rsp,0x30
   33890:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   33894:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3389d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   338a1:	31 c0                	xor    eax,eax
   338a3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   338a7:	48 89 c7             	mov    rdi,rax
   338aa:	e8 bb 1d 00 00       	call   3566a <std::vector<objl::Material, std::allocator<objl::Material> >::end() const>
   338af:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   338b3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   338b7:	48 89 c7             	mov    rdi,rax
   338ba:	e8 63 1d 00 00       	call   35622 <std::vector<objl::Material, std::allocator<objl::Material> >::begin() const>
   338bf:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   338c3:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   338c7:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   338cb:	48 89 d6             	mov    rsi,rdx
   338ce:	48 89 c7             	mov    rdi,rax
   338d1:	e8 e0 1d 00 00       	call   356b6 <bool __gnu_cxx::operator==<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >(__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > > const&, __gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > > const&)>
   338d6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   338da:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   338e3:	74 05                	je     338ea <std::vector<objl::Material, std::allocator<objl::Material> >::empty() const+0x62>
   338e5:	e8 f6 0b fd ff       	call   44e0 <__stack_chk_fail@plt>
   338ea:	c9                   	leave  
   338eb:	c3                   	ret    

00000000000338ec <std::allocator<objl::Vertex>::allocator()>:
   338ec:	55                   	push   rbp
   338ed:	48 89 e5             	mov    rbp,rsp
   338f0:	48 83 ec 10          	sub    rsp,0x10
   338f4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   338f8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   338fc:	48 89 c7             	mov    rdi,rax
   338ff:	e8 ee 1d 00 00       	call   356f2 <__gnu_cxx::new_allocator<objl::Vertex>::new_allocator()>
   33904:	90                   	nop
   33905:	c9                   	leave  
   33906:	c3                   	ret    
   33907:	90                   	nop

0000000000033908 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_Vector_impl_data()>:
   33908:	55                   	push   rbp
   33909:	48 89 e5             	mov    rbp,rsp
   3390c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33910:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33914:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   3391b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3391f:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   33927:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3392b:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   33933:	90                   	nop
   33934:	5d                   	pop    rbp
   33935:	c3                   	ret    

0000000000033936 <__gnu_cxx::new_allocator<objl::Vertex>::~new_allocator()>:
   33936:	55                   	push   rbp
   33937:	48 89 e5             	mov    rbp,rsp
   3393a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3393e:	90                   	nop
   3393f:	5d                   	pop    rbp
   33940:	c3                   	ret    
   33941:	90                   	nop

0000000000033942 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_deallocate(objl::Vertex*, unsigned long)>:
   33942:	55                   	push   rbp
   33943:	48 89 e5             	mov    rbp,rsp
   33946:	48 83 ec 20          	sub    rsp,0x20
   3394a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3394e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33952:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   33956:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   3395b:	74 17                	je     33974 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_deallocate(objl::Vertex*, unsigned long)+0x32>
   3395d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33961:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33965:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   33969:	48 89 ce             	mov    rsi,rcx
   3396c:	48 89 c7             	mov    rdi,rax
   3396f:	e8 89 1d 00 00       	call   356fd <std::allocator_traits<std::allocator<objl::Vertex> >::deallocate(std::allocator<objl::Vertex>&, objl::Vertex*, unsigned long)>
   33974:	90                   	nop
   33975:	c9                   	leave  
   33976:	c3                   	ret    
   33977:	90                   	nop

0000000000033978 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>:
   33978:	55                   	push   rbp
   33979:	48 89 e5             	mov    rbp,rsp
   3397c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33980:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33984:	5d                   	pop    rbp
   33985:	c3                   	ret    

0000000000033986 <void std::_Destroy<objl::Vertex*, objl::Vertex>(objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>:
   33986:	55                   	push   rbp
   33987:	48 89 e5             	mov    rbp,rsp
   3398a:	48 83 ec 20          	sub    rsp,0x20
   3398e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33992:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33996:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3399a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3399e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   339a2:	48 89 d6             	mov    rsi,rdx
   339a5:	48 89 c7             	mov    rdi,rax
   339a8:	e8 7e 1d 00 00       	call   3572b <void std::_Destroy<objl::Vertex*>(objl::Vertex*, objl::Vertex*)>
   339ad:	90                   	nop
   339ae:	c9                   	leave  
   339af:	c3                   	ret    

00000000000339b0 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator() const>:
   339b0:	55                   	push   rbp
   339b1:	48 89 e5             	mov    rbp,rsp
   339b4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   339b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   339bc:	5d                   	pop    rbp
   339bd:	c3                   	ret    

00000000000339be <std::operator!=(std::allocator<objl::Vertex> const&, std::allocator<objl::Vertex> const&)>:
   339be:	55                   	push   rbp
   339bf:	48 89 e5             	mov    rbp,rsp
   339c2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   339c6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   339ca:	b8 00 00 00 00       	mov    eax,0x0
   339cf:	5d                   	pop    rbp
   339d0:	c3                   	ret    

00000000000339d1 <void std::__alloc_on_copy<std::allocator<objl::Vertex> >(std::allocator<objl::Vertex>&, std::allocator<objl::Vertex> const&)>:
   339d1:	55                   	push   rbp
   339d2:	48 89 e5             	mov    rbp,rsp
   339d5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   339d9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   339dd:	90                   	nop
   339de:	5d                   	pop    rbp
   339df:	c3                   	ret    

00000000000339e0 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::capacity() const>:
   339e0:	55                   	push   rbp
   339e1:	48 89 e5             	mov    rbp,rsp
   339e4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   339e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   339ec:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   339f0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   339f4:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   339f7:	48 89 d0             	mov    rax,rdx
   339fa:	48 29 c8             	sub    rax,rcx
   339fd:	48 c1 f8 05          	sar    rax,0x5
   33a01:	5d                   	pop    rbp
   33a02:	c3                   	ret    
   33a03:	90                   	nop

0000000000033a04 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin() const>:
   33a04:	55                   	push   rbp
   33a05:	48 89 e5             	mov    rbp,rsp
   33a08:	48 83 ec 20          	sub    rsp,0x20
   33a0c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33a10:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33a19:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33a1d:	31 c0                	xor    eax,eax
   33a1f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33a23:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   33a27:	48 89 d6             	mov    rsi,rdx
   33a2a:	48 89 c7             	mov    rdi,rax
   33a2d:	e8 20 1d 00 00       	call   35752 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex const* const&)>
   33a32:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   33a36:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   33a3a:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   33a43:	74 05                	je     33a4a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin() const+0x46>
   33a45:	e8 96 0a fd ff       	call   44e0 <__stack_chk_fail@plt>
   33a4a:	c9                   	leave  
   33a4b:	c3                   	ret    

0000000000033a4c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end() const>:
   33a4c:	55                   	push   rbp
   33a4d:	48 89 e5             	mov    rbp,rsp
   33a50:	48 83 ec 20          	sub    rsp,0x20
   33a54:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33a58:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33a61:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33a65:	31 c0                	xor    eax,eax
   33a67:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33a6b:	48 8d 50 08          	lea    rdx,[rax+0x8]
   33a6f:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   33a73:	48 89 d6             	mov    rsi,rdx
   33a76:	48 89 c7             	mov    rdi,rax
   33a79:	e8 d4 1c 00 00       	call   35752 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex const* const&)>
   33a7e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   33a82:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   33a86:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   33a8f:	74 05                	je     33a96 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end() const+0x4a>
   33a91:	e8 4a 0a fd ff       	call   44e0 <__stack_chk_fail@plt>
   33a96:	c9                   	leave  
   33a97:	c3                   	ret    

0000000000033a98 <objl::Vertex* std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(unsigned long, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   33a98:	55                   	push   rbp
   33a99:	48 89 e5             	mov    rbp,rsp
   33a9c:	53                   	push   rbx
   33a9d:	48 83 ec 38          	sub    rsp,0x38
   33aa1:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   33aa5:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   33aa9:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   33aad:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   33ab1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33ab5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   33ab9:	48 89 d6             	mov    rsi,rdx
   33abc:	48 89 c7             	mov    rdi,rax
   33abf:	e8 ac 1c 00 00       	call   35770 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate(unsigned long)>
   33ac4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   33ac8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33acc:	48 89 c7             	mov    rdi,rax
   33acf:	e8 a4 fe ff ff       	call   33978 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   33ad4:	48 89 c1             	mov    rcx,rax
   33ad7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33adb:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   33adf:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   33ae3:	48 89 c7             	mov    rdi,rax
   33ae6:	e8 9e 16 00 00       	call   35189 <objl::Vertex* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*, objl::Vertex>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*, std::allocator<objl::Vertex>&)>
   33aeb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33aef:	eb 37                	jmp    33b28 <objl::Vertex* std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(unsigned long, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)+0x90>
   33af1:	48 89 c7             	mov    rdi,rax
   33af4:	e8 47 06 fd ff       	call   4140 <__cxa_begin_catch@plt>
   33af9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33afd:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   33b01:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   33b05:	48 89 ce             	mov    rsi,rcx
   33b08:	48 89 c7             	mov    rdi,rax
   33b0b:	e8 32 fe ff ff       	call   33942 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_deallocate(objl::Vertex*, unsigned long)>
   33b10:	e8 3b 0b fd ff       	call   4650 <__cxa_rethrow@plt>
   33b15:	48 89 c3             	mov    rbx,rax
   33b18:	e8 f3 0b fd ff       	call   4710 <__cxa_end_catch@plt>
   33b1d:	48 89 d8             	mov    rax,rbx
   33b20:	48 89 c7             	mov    rdi,rax
   33b23:	e8 38 0c fd ff       	call   4760 <_Unwind_Resume@plt>
   33b28:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33b2c:	c9                   	leave  
   33b2d:	c3                   	ret    

0000000000033b2e <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   33b2e:	55                   	push   rbp
   33b2f:	48 89 e5             	mov    rbp,rsp
   33b32:	53                   	push   rbx
   33b33:	48 83 ec 28          	sub    rsp,0x28
   33b37:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33b3b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33b3f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   33b43:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33b47:	48 89 c7             	mov    rdi,rax
   33b4a:	e8 54 1c 00 00       	call   357a3 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__miter_base<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   33b4f:	48 89 c3             	mov    rbx,rax
   33b52:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33b56:	48 89 c7             	mov    rdi,rax
   33b59:	e8 45 1c 00 00       	call   357a3 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__miter_base<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   33b5e:	48 89 c1             	mov    rcx,rax
   33b61:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33b65:	48 89 c2             	mov    rdx,rax
   33b68:	48 89 de             	mov    rsi,rbx
   33b6b:	48 89 cf             	mov    rdi,rcx
   33b6e:	e8 3e 1c 00 00       	call   357b1 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__copy_move_a<false, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   33b73:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33b77:	c9                   	leave  
   33b78:	c3                   	ret    
   33b79:	90                   	nop

0000000000033b7a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end()>:
   33b7a:	55                   	push   rbp
   33b7b:	48 89 e5             	mov    rbp,rsp
   33b7e:	48 83 ec 20          	sub    rsp,0x20
   33b82:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33b86:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33b8f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33b93:	31 c0                	xor    eax,eax
   33b95:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33b99:	48 8d 50 08          	lea    rdx,[rax+0x8]
   33b9d:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   33ba1:	48 89 d6             	mov    rsi,rdx
   33ba4:	48 89 c7             	mov    rdi,rax
   33ba7:	e8 0e 16 00 00       	call   351ba <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex* const&)>
   33bac:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   33bb0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   33bb4:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   33bbd:	74 05                	je     33bc4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end()+0x4a>
   33bbf:	e8 1c 09 fd ff       	call   44e0 <__stack_chk_fail@plt>
   33bc4:	c9                   	leave  
   33bc5:	c3                   	ret    

0000000000033bc6 <void std::_Destroy<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, std::allocator<objl::Vertex>&)>:
   33bc6:	55                   	push   rbp
   33bc7:	48 89 e5             	mov    rbp,rsp
   33bca:	48 83 ec 20          	sub    rsp,0x20
   33bce:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33bd2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33bd6:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   33bda:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   33bde:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33be2:	48 89 d6             	mov    rsi,rdx
   33be5:	48 89 c7             	mov    rdi,rax
   33be8:	e8 2e 1c 00 00       	call   3581b <void std::_Destroy<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   33bed:	90                   	nop
   33bee:	c9                   	leave  
   33bef:	c3                   	ret    

0000000000033bf0 <objl::Vertex* std::copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   33bf0:	55                   	push   rbp
   33bf1:	48 89 e5             	mov    rbp,rsp
   33bf4:	53                   	push   rbx
   33bf5:	48 83 ec 28          	sub    rsp,0x28
   33bf9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33bfd:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33c01:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   33c05:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33c09:	48 89 c7             	mov    rdi,rax
   33c0c:	e8 30 1c 00 00       	call   35841 <objl::Vertex* std::__miter_base<objl::Vertex*>(objl::Vertex*)>
   33c11:	48 89 c3             	mov    rbx,rax
   33c14:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33c18:	48 89 c7             	mov    rdi,rax
   33c1b:	e8 21 1c 00 00       	call   35841 <objl::Vertex* std::__miter_base<objl::Vertex*>(objl::Vertex*)>
   33c20:	48 89 c1             	mov    rcx,rax
   33c23:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33c27:	48 89 c2             	mov    rdx,rax
   33c2a:	48 89 de             	mov    rsi,rbx
   33c2d:	48 89 cf             	mov    rdi,rcx
   33c30:	e8 1a 1c 00 00       	call   3584f <objl::Vertex* std::__copy_move_a<false, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   33c35:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33c39:	c9                   	leave  
   33c3a:	c3                   	ret    

0000000000033c3b <objl::Vertex* std::__uninitialized_copy_a<objl::Vertex*, objl::Vertex*, objl::Vertex>(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>:
   33c3b:	55                   	push   rbp
   33c3c:	48 89 e5             	mov    rbp,rsp
   33c3f:	48 83 ec 20          	sub    rsp,0x20
   33c43:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33c47:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33c4b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   33c4f:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   33c53:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33c57:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   33c5b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33c5f:	48 89 ce             	mov    rsi,rcx
   33c62:	48 89 c7             	mov    rdi,rax
   33c65:	e8 4f 1c 00 00       	call   358b9 <objl::Vertex* std::uninitialized_copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   33c6a:	c9                   	leave  
   33c6b:	c3                   	ret    

0000000000033c6c <std::operator!=(std::allocator<unsigned int> const&, std::allocator<unsigned int> const&)>:
   33c6c:	55                   	push   rbp
   33c6d:	48 89 e5             	mov    rbp,rsp
   33c70:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33c74:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33c78:	b8 00 00 00 00       	mov    eax,0x0
   33c7d:	5d                   	pop    rbp
   33c7e:	c3                   	ret    

0000000000033c7f <void std::__alloc_on_copy<std::allocator<unsigned int> >(std::allocator<unsigned int>&, std::allocator<unsigned int> const&)>:
   33c7f:	55                   	push   rbp
   33c80:	48 89 e5             	mov    rbp,rsp
   33c83:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33c87:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33c8b:	90                   	nop
   33c8c:	5d                   	pop    rbp
   33c8d:	c3                   	ret    

0000000000033c8e <std::vector<unsigned int, std::allocator<unsigned int> >::capacity() const>:
   33c8e:	55                   	push   rbp
   33c8f:	48 89 e5             	mov    rbp,rsp
   33c92:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33c96:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33c9a:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   33c9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33ca2:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   33ca5:	48 89 d0             	mov    rax,rdx
   33ca8:	48 29 c8             	sub    rax,rcx
   33cab:	48 c1 f8 02          	sar    rax,0x2
   33caf:	5d                   	pop    rbp
   33cb0:	c3                   	ret    
   33cb1:	90                   	nop

0000000000033cb2 <std::vector<unsigned int, std::allocator<unsigned int> >::begin() const>:
   33cb2:	55                   	push   rbp
   33cb3:	48 89 e5             	mov    rbp,rsp
   33cb6:	48 83 ec 20          	sub    rsp,0x20
   33cba:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33cbe:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33cc7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33ccb:	31 c0                	xor    eax,eax
   33ccd:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33cd1:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   33cd5:	48 89 d6             	mov    rsi,rdx
   33cd8:	48 89 c7             	mov    rdi,rax
   33cdb:	e8 0a 1c 00 00       	call   358ea <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int const* const&)>
   33ce0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   33ce4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   33ce8:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   33cf1:	74 05                	je     33cf8 <std::vector<unsigned int, std::allocator<unsigned int> >::begin() const+0x46>
   33cf3:	e8 e8 07 fd ff       	call   44e0 <__stack_chk_fail@plt>
   33cf8:	c9                   	leave  
   33cf9:	c3                   	ret    

0000000000033cfa <std::vector<unsigned int, std::allocator<unsigned int> >::end() const>:
   33cfa:	55                   	push   rbp
   33cfb:	48 89 e5             	mov    rbp,rsp
   33cfe:	48 83 ec 20          	sub    rsp,0x20
   33d02:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33d06:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   33d0f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33d13:	31 c0                	xor    eax,eax
   33d15:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33d19:	48 8d 50 08          	lea    rdx,[rax+0x8]
   33d1d:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   33d21:	48 89 d6             	mov    rsi,rdx
   33d24:	48 89 c7             	mov    rdi,rax
   33d27:	e8 be 1b 00 00       	call   358ea <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int const* const&)>
   33d2c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   33d30:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   33d34:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   33d3d:	74 05                	je     33d44 <std::vector<unsigned int, std::allocator<unsigned int> >::end() const+0x4a>
   33d3f:	e8 9c 07 fd ff       	call   44e0 <__stack_chk_fail@plt>
   33d44:	c9                   	leave  
   33d45:	c3                   	ret    

0000000000033d46 <unsigned int* std::vector<unsigned int, std::allocator<unsigned int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(unsigned long, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   33d46:	55                   	push   rbp
   33d47:	48 89 e5             	mov    rbp,rsp
   33d4a:	53                   	push   rbx
   33d4b:	48 83 ec 38          	sub    rsp,0x38
   33d4f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   33d53:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   33d57:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   33d5b:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   33d5f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33d63:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   33d67:	48 89 d6             	mov    rsi,rdx
   33d6a:	48 89 c7             	mov    rdi,rax
   33d6d:	e8 3c 5d ff ff       	call   29aae <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long)>
   33d72:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   33d76:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33d7a:	48 89 c7             	mov    rdi,rax
   33d7d:	e8 b0 4a ff ff       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   33d82:	48 89 c1             	mov    rcx,rax
   33d85:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33d89:	48 8b 75 c0          	mov    rsi,QWORD PTR [rbp-0x40]
   33d8d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   33d91:	48 89 c7             	mov    rdi,rax
   33d94:	e8 6e 1b 00 00       	call   35907 <unsigned int* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*, std::allocator<unsigned int>&)>
   33d99:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33d9d:	eb 37                	jmp    33dd6 <unsigned int* std::vector<unsigned int, std::allocator<unsigned int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(unsigned long, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)+0x90>
   33d9f:	48 89 c7             	mov    rdi,rax
   33da2:	e8 99 03 fd ff       	call   4140 <__cxa_begin_catch@plt>
   33da7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33dab:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   33daf:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   33db3:	48 89 ce             	mov    rsi,rcx
   33db6:	48 89 c7             	mov    rdi,rax
   33db9:	e8 3e 4a ff ff       	call   287fc <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_deallocate(unsigned int*, unsigned long)>
   33dbe:	e8 8d 08 fd ff       	call   4650 <__cxa_rethrow@plt>
   33dc3:	48 89 c3             	mov    rbx,rax
   33dc6:	e8 45 09 fd ff       	call   4710 <__cxa_end_catch@plt>
   33dcb:	48 89 d8             	mov    rax,rbx
   33dce:	48 89 c7             	mov    rdi,rax
   33dd1:	e8 8a 09 fd ff       	call   4760 <_Unwind_Resume@plt>
   33dd6:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33dda:	c9                   	leave  
   33ddb:	c3                   	ret    

0000000000033ddc <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   33ddc:	55                   	push   rbp
   33ddd:	48 89 e5             	mov    rbp,rsp
   33de0:	53                   	push   rbx
   33de1:	48 83 ec 28          	sub    rsp,0x28
   33de5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33de9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33ded:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   33df1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33df5:	48 89 c7             	mov    rdi,rax
   33df8:	e8 3b 1b 00 00       	call   35938 <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__miter_base<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   33dfd:	48 89 c3             	mov    rbx,rax
   33e00:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33e04:	48 89 c7             	mov    rdi,rax
   33e07:	e8 2c 1b 00 00       	call   35938 <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__miter_base<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   33e0c:	48 89 c1             	mov    rcx,rax
   33e0f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33e13:	48 89 c2             	mov    rdx,rax
   33e16:	48 89 de             	mov    rsi,rbx
   33e19:	48 89 cf             	mov    rdi,rcx
   33e1c:	e8 25 1b 00 00       	call   35946 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__copy_move_a<false, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   33e21:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33e25:	c9                   	leave  
   33e26:	c3                   	ret    

0000000000033e27 <void std::_Destroy<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<unsigned int>&)>:
   33e27:	55                   	push   rbp
   33e28:	48 89 e5             	mov    rbp,rsp
   33e2b:	48 83 ec 20          	sub    rsp,0x20
   33e2f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33e33:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33e37:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   33e3b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   33e3f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33e43:	48 89 d6             	mov    rsi,rdx
   33e46:	48 89 c7             	mov    rdi,rax
   33e49:	e8 62 1b 00 00       	call   359b0 <void std::_Destroy<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   33e4e:	90                   	nop
   33e4f:	c9                   	leave  
   33e50:	c3                   	ret    

0000000000033e51 <unsigned int* std::copy<unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>:
   33e51:	55                   	push   rbp
   33e52:	48 89 e5             	mov    rbp,rsp
   33e55:	53                   	push   rbx
   33e56:	48 83 ec 28          	sub    rsp,0x28
   33e5a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33e5e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33e62:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   33e66:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33e6a:	48 89 c7             	mov    rdi,rax
   33e6d:	e8 64 1b 00 00       	call   359d6 <unsigned int* std::__miter_base<unsigned int*>(unsigned int*)>
   33e72:	48 89 c3             	mov    rbx,rax
   33e75:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33e79:	48 89 c7             	mov    rdi,rax
   33e7c:	e8 55 1b 00 00       	call   359d6 <unsigned int* std::__miter_base<unsigned int*>(unsigned int*)>
   33e81:	48 89 c1             	mov    rcx,rax
   33e84:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   33e88:	48 89 c2             	mov    rdx,rax
   33e8b:	48 89 de             	mov    rsi,rbx
   33e8e:	48 89 cf             	mov    rdi,rcx
   33e91:	e8 4e 1b 00 00       	call   359e4 <unsigned int* std::__copy_move_a<false, unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>
   33e96:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33e9a:	c9                   	leave  
   33e9b:	c3                   	ret    

0000000000033e9c <unsigned int* std::__uninitialized_copy_a<unsigned int*, unsigned int*, unsigned int>(unsigned int*, unsigned int*, unsigned int*, std::allocator<unsigned int>&)>:
   33e9c:	55                   	push   rbp
   33e9d:	48 89 e5             	mov    rbp,rsp
   33ea0:	48 83 ec 20          	sub    rsp,0x20
   33ea4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33ea8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   33eac:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   33eb0:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   33eb4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   33eb8:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   33ebc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33ec0:	48 89 ce             	mov    rsi,rcx
   33ec3:	48 89 c7             	mov    rdi,rax
   33ec6:	e8 83 1b 00 00       	call   35a4e <unsigned int* std::uninitialized_copy<unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>
   33ecb:	c9                   	leave  
   33ecc:	c3                   	ret    
   33ecd:	90                   	nop

0000000000033ece <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_erase_at_end(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
   33ece:	55                   	push   rbp
   33ecf:	48 89 e5             	mov    rbp,rsp
   33ed2:	48 83 ec 20          	sub    rsp,0x20
   33ed6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33eda:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33ede:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33ee2:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   33ee6:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
   33eea:	48 c1 f8 05          	sar    rax,0x5
   33eee:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   33ef2:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   33ef7:	74 32                	je     33f2b <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_erase_at_end(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)+0x5d>
   33ef9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33efd:	48 89 c7             	mov    rdi,rax
   33f00:	e8 9f 3c ff ff       	call   27ba4 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
   33f05:	48 89 c2             	mov    rdx,rax
   33f08:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33f0c:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   33f10:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33f14:	48 89 ce             	mov    rsi,rcx
   33f17:	48 89 c7             	mov    rdi,rax
   33f1a:	e8 93 3c ff ff       	call   27bb2 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   33f1f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33f23:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   33f27:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   33f2b:	90                   	nop
   33f2c:	c9                   	leave  
   33f2d:	c3                   	ret    

0000000000033f2e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
   33f2e:	55                   	push   rbp
   33f2f:	48 89 e5             	mov    rbp,rsp
   33f32:	53                   	push   rbx
   33f33:	48 83 ec 18          	sub    rsp,0x18
   33f37:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   33f3b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   33f3f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33f43:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   33f47:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33f4b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
   33f4f:	48 39 c2             	cmp    rdx,rax
   33f52:	74 3c                	je     33f90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x62>
   33f54:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33f58:	48 89 c7             	mov    rdi,rax
   33f5b:	e8 af 80 ff ff       	call   2c00f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type&)>
   33f60:	48 89 c2             	mov    rdx,rax
   33f63:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33f67:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   33f6b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33f6f:	48 89 ce             	mov    rsi,rcx
   33f72:	48 89 c7             	mov    rdi,rax
   33f75:	e8 5c 80 ff ff       	call   2bfd6 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   33f7a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33f7e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   33f82:	48 8d 50 20          	lea    rdx,[rax+0x20]
   33f86:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33f8a:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   33f8e:	eb 30                	jmp    33fc0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x92>
   33f90:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   33f94:	48 89 c7             	mov    rdi,rax
   33f97:	e8 73 80 ff ff       	call   2c00f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type&)>
   33f9c:	48 89 c3             	mov    rbx,rax
   33f9f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33fa3:	48 89 c7             	mov    rdi,rax
   33fa6:	e8 7f 41 ff ff       	call   2812a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::end()>
   33fab:	48 89 c1             	mov    rcx,rax
   33fae:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33fb2:	48 89 da             	mov    rdx,rbx
   33fb5:	48 89 ce             	mov    rsi,rcx
   33fb8:	48 89 c7             	mov    rdi,rax
   33fbb:	e8 c0 1a 00 00       	call   35a80 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   33fc0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   33fc4:	48 89 c7             	mov    rdi,rax
   33fc7:	e8 68 1c 00 00       	call   35c34 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::back()>
   33fcc:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   33fd0:	c9                   	leave  
   33fd1:	c3                   	ret    

0000000000033fd2 <std::allocator<objl::Mesh>::allocator()>:
   33fd2:	55                   	push   rbp
   33fd3:	48 89 e5             	mov    rbp,rsp
   33fd6:	48 83 ec 10          	sub    rsp,0x10
   33fda:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33fde:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33fe2:	48 89 c7             	mov    rdi,rax
   33fe5:	e8 ac 1c 00 00       	call   35c96 <__gnu_cxx::new_allocator<objl::Mesh>::new_allocator()>
   33fea:	90                   	nop
   33feb:	c9                   	leave  
   33fec:	c3                   	ret    
   33fed:	90                   	nop

0000000000033fee <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_Vector_impl_data::_Vector_impl_data()>:
   33fee:	55                   	push   rbp
   33fef:	48 89 e5             	mov    rbp,rsp
   33ff2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   33ff6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   33ffa:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   34001:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34005:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   3400d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34011:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   34019:	90                   	nop
   3401a:	5d                   	pop    rbp
   3401b:	c3                   	ret    

000000000003401c <__gnu_cxx::new_allocator<objl::Mesh>::~new_allocator()>:
   3401c:	55                   	push   rbp
   3401d:	48 89 e5             	mov    rbp,rsp
   34020:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34024:	90                   	nop
   34025:	5d                   	pop    rbp
   34026:	c3                   	ret    
   34027:	90                   	nop

0000000000034028 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_deallocate(objl::Mesh*, unsigned long)>:
   34028:	55                   	push   rbp
   34029:	48 89 e5             	mov    rbp,rsp
   3402c:	48 83 ec 20          	sub    rsp,0x20
   34030:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34034:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   34038:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3403c:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   34041:	74 17                	je     3405a <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_deallocate(objl::Mesh*, unsigned long)+0x32>
   34043:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34047:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   3404b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   3404f:	48 89 ce             	mov    rsi,rcx
   34052:	48 89 c7             	mov    rdi,rax
   34055:	e8 47 1c 00 00       	call   35ca1 <std::allocator_traits<std::allocator<objl::Mesh> >::deallocate(std::allocator<objl::Mesh>&, objl::Mesh*, unsigned long)>
   3405a:	90                   	nop
   3405b:	c9                   	leave  
   3405c:	c3                   	ret    
   3405d:	90                   	nop

000000000003405e <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator()>:
   3405e:	55                   	push   rbp
   3405f:	48 89 e5             	mov    rbp,rsp
   34062:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34066:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3406a:	5d                   	pop    rbp
   3406b:	c3                   	ret    

000000000003406c <void std::_Destroy<objl::Mesh*, objl::Mesh>(objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>:
   3406c:	55                   	push   rbp
   3406d:	48 89 e5             	mov    rbp,rsp
   34070:	48 83 ec 20          	sub    rsp,0x20
   34074:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34078:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3407c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   34080:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   34084:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34088:	48 89 d6             	mov    rsi,rdx
   3408b:	48 89 c7             	mov    rdi,rax
   3408e:	e8 3c 1c 00 00       	call   35ccf <void std::_Destroy<objl::Mesh*>(objl::Mesh*, objl::Mesh*)>
   34093:	90                   	nop
   34094:	c9                   	leave  
   34095:	c3                   	ret    

0000000000034096 <std::allocator<objl::Material>::allocator()>:
   34096:	55                   	push   rbp
   34097:	48 89 e5             	mov    rbp,rsp
   3409a:	48 83 ec 10          	sub    rsp,0x10
   3409e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   340a2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   340a6:	48 89 c7             	mov    rdi,rax
   340a9:	e8 48 1c 00 00       	call   35cf6 <__gnu_cxx::new_allocator<objl::Material>::new_allocator()>
   340ae:	90                   	nop
   340af:	c9                   	leave  
   340b0:	c3                   	ret    
   340b1:	90                   	nop

00000000000340b2 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_Vector_impl_data::_Vector_impl_data()>:
   340b2:	55                   	push   rbp
   340b3:	48 89 e5             	mov    rbp,rsp
   340b6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   340ba:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   340be:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   340c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   340c9:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   340d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   340d5:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   340dd:	90                   	nop
   340de:	5d                   	pop    rbp
   340df:	c3                   	ret    

00000000000340e0 <__gnu_cxx::new_allocator<objl::Material>::~new_allocator()>:
   340e0:	55                   	push   rbp
   340e1:	48 89 e5             	mov    rbp,rsp
   340e4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   340e8:	90                   	nop
   340e9:	5d                   	pop    rbp
   340ea:	c3                   	ret    
   340eb:	90                   	nop

00000000000340ec <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_deallocate(objl::Material*, unsigned long)>:
   340ec:	55                   	push   rbp
   340ed:	48 89 e5             	mov    rbp,rsp
   340f0:	48 83 ec 20          	sub    rsp,0x20
   340f4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   340f8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   340fc:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   34100:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   34105:	74 17                	je     3411e <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_deallocate(objl::Material*, unsigned long)+0x32>
   34107:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3410b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   3410f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   34113:	48 89 ce             	mov    rsi,rcx
   34116:	48 89 c7             	mov    rdi,rax
   34119:	e8 e3 1b 00 00       	call   35d01 <std::allocator_traits<std::allocator<objl::Material> >::deallocate(std::allocator<objl::Material>&, objl::Material*, unsigned long)>
   3411e:	90                   	nop
   3411f:	c9                   	leave  
   34120:	c3                   	ret    
   34121:	90                   	nop

0000000000034122 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_get_Tp_allocator()>:
   34122:	55                   	push   rbp
   34123:	48 89 e5             	mov    rbp,rsp
   34126:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3412a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3412e:	5d                   	pop    rbp
   3412f:	c3                   	ret    

0000000000034130 <void std::_Destroy<objl::Material*, objl::Material>(objl::Material*, objl::Material*, std::allocator<objl::Material>&)>:
   34130:	55                   	push   rbp
   34131:	48 89 e5             	mov    rbp,rsp
   34134:	48 83 ec 20          	sub    rsp,0x20
   34138:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3413c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   34140:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   34144:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   34148:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3414c:	48 89 d6             	mov    rsi,rdx
   3414f:	48 89 c7             	mov    rdi,rax
   34152:	e8 d8 1b 00 00       	call   35d2f <void std::_Destroy<objl::Material*>(objl::Material*, objl::Material*)>
   34157:	90                   	nop
   34158:	c9                   	leave  
   34159:	c3                   	ret    

000000000003415a <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_erase_at_end(objl::Mesh*)>:
   3415a:	55                   	push   rbp
   3415b:	48 89 e5             	mov    rbp,rsp
   3415e:	48 83 ec 20          	sub    rsp,0x20
   34162:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   34166:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3416a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3416e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   34172:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
   34176:	48 c1 f8 03          	sar    rax,0x3
   3417a:	48 89 c2             	mov    rdx,rax
   3417d:	48 b8 a5 4f fa a4 4f fa a4 4f 	movabs rax,0x4fa4fa4fa4fa4fa5
   34187:	48 0f af c2          	imul   rax,rdx
   3418b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   3418f:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   34194:	74 32                	je     341c8 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_erase_at_end(objl::Mesh*)+0x6e>
   34196:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3419a:	48 89 c7             	mov    rdi,rax
   3419d:	e8 bc fe ff ff       	call   3405e <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator()>
   341a2:	48 89 c2             	mov    rdx,rax
   341a5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   341a9:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   341ad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   341b1:	48 89 ce             	mov    rsi,rcx
   341b4:	48 89 c7             	mov    rdi,rax
   341b7:	e8 b0 fe ff ff       	call   3406c <void std::_Destroy<objl::Mesh*, objl::Mesh>(objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   341bc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   341c0:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   341c4:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   341c8:	90                   	nop
   341c9:	c9                   	leave  
   341ca:	c3                   	ret    
   341cb:	90                   	nop

00000000000341cc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_erase_at_end(objl::Vertex*)>:
   341cc:	55                   	push   rbp
   341cd:	48 89 e5             	mov    rbp,rsp
   341d0:	48 83 ec 20          	sub    rsp,0x20
   341d4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   341d8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   341dc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   341e0:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   341e4:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
   341e8:	48 c1 f8 05          	sar    rax,0x5
   341ec:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   341f0:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   341f5:	74 32                	je     34229 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_erase_at_end(objl::Vertex*)+0x5d>
   341f7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   341fb:	48 89 c7             	mov    rdi,rax
   341fe:	e8 75 f7 ff ff       	call   33978 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   34203:	48 89 c2             	mov    rdx,rax
   34206:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3420a:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   3420e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   34212:	48 89 ce             	mov    rsi,rcx
   34215:	48 89 c7             	mov    rdi,rax
   34218:	e8 69 f7 ff ff       	call   33986 <void std::_Destroy<objl::Vertex*, objl::Vertex>(objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   3421d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34221:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34225:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   34229:	90                   	nop
   3422a:	c9                   	leave  
   3422b:	c3                   	ret    

000000000003422c <std::vector<unsigned int, std::allocator<unsigned int> >::_M_erase_at_end(unsigned int*)>:
   3422c:	55                   	push   rbp
   3422d:	48 89 e5             	mov    rbp,rsp
   34230:	48 83 ec 20          	sub    rsp,0x20
   34234:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   34238:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3423c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34240:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   34244:	48 2b 45 e0          	sub    rax,QWORD PTR [rbp-0x20]
   34248:	48 c1 f8 02          	sar    rax,0x2
   3424c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   34250:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   34255:	74 32                	je     34289 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_erase_at_end(unsigned int*)+0x5d>
   34257:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3425b:	48 89 c7             	mov    rdi,rax
   3425e:	e8 cf 45 ff ff       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   34263:	48 89 c2             	mov    rdx,rax
   34266:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3426a:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
   3426e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   34272:	48 89 ce             	mov    rsi,rcx
   34275:	48 89 c7             	mov    rdi,rax
   34278:	e8 c3 45 ff ff       	call   28840 <void std::_Destroy<unsigned int*, unsigned int>(unsigned int*, unsigned int*, std::allocator<unsigned int>&)>
   3427d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34281:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34285:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   34289:	90                   	nop
   3428a:	c9                   	leave  
   3428b:	c3                   	ret    

000000000003428c <std::allocator<objl::Vector3>::allocator()>:
   3428c:	55                   	push   rbp
   3428d:	48 89 e5             	mov    rbp,rsp
   34290:	48 83 ec 10          	sub    rsp,0x10
   34294:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34298:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3429c:	48 89 c7             	mov    rdi,rax
   3429f:	e8 b2 1a 00 00       	call   35d56 <__gnu_cxx::new_allocator<objl::Vector3>::new_allocator()>
   342a4:	90                   	nop
   342a5:	c9                   	leave  
   342a6:	c3                   	ret    
   342a7:	90                   	nop

00000000000342a8 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_Vector_impl_data::_Vector_impl_data()>:
   342a8:	55                   	push   rbp
   342a9:	48 89 e5             	mov    rbp,rsp
   342ac:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   342b0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   342b4:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   342bb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   342bf:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   342c7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   342cb:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   342d3:	90                   	nop
   342d4:	5d                   	pop    rbp
   342d5:	c3                   	ret    

00000000000342d6 <__gnu_cxx::new_allocator<objl::Vector3>::~new_allocator()>:
   342d6:	55                   	push   rbp
   342d7:	48 89 e5             	mov    rbp,rsp
   342da:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   342de:	90                   	nop
   342df:	5d                   	pop    rbp
   342e0:	c3                   	ret    
   342e1:	90                   	nop

00000000000342e2 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_deallocate(objl::Vector3*, unsigned long)>:
   342e2:	55                   	push   rbp
   342e3:	48 89 e5             	mov    rbp,rsp
   342e6:	48 83 ec 20          	sub    rsp,0x20
   342ea:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   342ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   342f2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   342f6:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   342fb:	74 17                	je     34314 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_deallocate(objl::Vector3*, unsigned long)+0x32>
   342fd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34301:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   34305:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   34309:	48 89 ce             	mov    rsi,rcx
   3430c:	48 89 c7             	mov    rdi,rax
   3430f:	e8 4d 1a 00 00       	call   35d61 <std::allocator_traits<std::allocator<objl::Vector3> >::deallocate(std::allocator<objl::Vector3>&, objl::Vector3*, unsigned long)>
   34314:	90                   	nop
   34315:	c9                   	leave  
   34316:	c3                   	ret    
   34317:	90                   	nop

0000000000034318 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_get_Tp_allocator()>:
   34318:	55                   	push   rbp
   34319:	48 89 e5             	mov    rbp,rsp
   3431c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34320:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34324:	5d                   	pop    rbp
   34325:	c3                   	ret    

0000000000034326 <void std::_Destroy<objl::Vector3*, objl::Vector3>(objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>:
   34326:	55                   	push   rbp
   34327:	48 89 e5             	mov    rbp,rsp
   3432a:	48 83 ec 20          	sub    rsp,0x20
   3432e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34332:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   34336:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3433a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3433e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34342:	48 89 d6             	mov    rsi,rdx
   34345:	48 89 c7             	mov    rdi,rax
   34348:	e8 42 1a 00 00       	call   35d8f <void std::_Destroy<objl::Vector3*>(objl::Vector3*, objl::Vector3*)>
   3434d:	90                   	nop
   3434e:	c9                   	leave  
   3434f:	c3                   	ret    

0000000000034350 <std::allocator<objl::Vector2>::allocator()>:
   34350:	55                   	push   rbp
   34351:	48 89 e5             	mov    rbp,rsp
   34354:	48 83 ec 10          	sub    rsp,0x10
   34358:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3435c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34360:	48 89 c7             	mov    rdi,rax
   34363:	e8 4e 1a 00 00       	call   35db6 <__gnu_cxx::new_allocator<objl::Vector2>::new_allocator()>
   34368:	90                   	nop
   34369:	c9                   	leave  
   3436a:	c3                   	ret    
   3436b:	90                   	nop

000000000003436c <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_Vector_impl_data::_Vector_impl_data()>:
   3436c:	55                   	push   rbp
   3436d:	48 89 e5             	mov    rbp,rsp
   34370:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34374:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34378:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
   3437f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34383:	48 c7 40 08 00 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
   3438b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3438f:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   34397:	90                   	nop
   34398:	5d                   	pop    rbp
   34399:	c3                   	ret    

000000000003439a <__gnu_cxx::new_allocator<objl::Vector2>::~new_allocator()>:
   3439a:	55                   	push   rbp
   3439b:	48 89 e5             	mov    rbp,rsp
   3439e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   343a2:	90                   	nop
   343a3:	5d                   	pop    rbp
   343a4:	c3                   	ret    
   343a5:	90                   	nop

00000000000343a6 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_deallocate(objl::Vector2*, unsigned long)>:
   343a6:	55                   	push   rbp
   343a7:	48 89 e5             	mov    rbp,rsp
   343aa:	48 83 ec 20          	sub    rsp,0x20
   343ae:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   343b2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   343b6:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   343ba:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   343bf:	74 17                	je     343d8 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_deallocate(objl::Vector2*, unsigned long)+0x32>
   343c1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   343c5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   343c9:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   343cd:	48 89 ce             	mov    rsi,rcx
   343d0:	48 89 c7             	mov    rdi,rax
   343d3:	e8 e9 19 00 00       	call   35dc1 <std::allocator_traits<std::allocator<objl::Vector2> >::deallocate(std::allocator<objl::Vector2>&, objl::Vector2*, unsigned long)>
   343d8:	90                   	nop
   343d9:	c9                   	leave  
   343da:	c3                   	ret    
   343db:	90                   	nop

00000000000343dc <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_get_Tp_allocator()>:
   343dc:	55                   	push   rbp
   343dd:	48 89 e5             	mov    rbp,rsp
   343e0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   343e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   343e8:	5d                   	pop    rbp
   343e9:	c3                   	ret    

00000000000343ea <void std::_Destroy<objl::Vector2*, objl::Vector2>(objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>:
   343ea:	55                   	push   rbp
   343eb:	48 89 e5             	mov    rbp,rsp
   343ee:	48 83 ec 20          	sub    rsp,0x20
   343f2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   343f6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   343fa:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   343fe:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   34402:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34406:	48 89 d6             	mov    rsi,rdx
   34409:	48 89 c7             	mov    rdi,rax
   3440c:	e8 de 19 00 00       	call   35def <void std::_Destroy<objl::Vector2*>(objl::Vector2*, objl::Vector2*)>
   34411:	90                   	nop
   34412:	c9                   	leave  
   34413:	c3                   	ret    

0000000000034414 <bool __gnu_cxx::operator==<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > const&, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > const&)>:
   34414:	55                   	push   rbp
   34415:	48 89 e5             	mov    rbp,rsp
   34418:	53                   	push   rbx
   34419:	48 83 ec 18          	sub    rsp,0x18
   3441d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   34421:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   34425:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34429:	48 89 c7             	mov    rdi,rax
   3442c:	e8 e5 19 00 00       	call   35e16 <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   34431:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   34434:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   34438:	48 89 c7             	mov    rdi,rax
   3443b:	e8 d6 19 00 00       	call   35e16 <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   34440:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34443:	48 39 c3             	cmp    rbx,rax
   34446:	0f 94 c0             	sete   al
   34449:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3444d:	c9                   	leave  
   3444e:	c3                   	ret    

000000000003444f <bool __gnu_cxx::operator==<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>:
   3444f:	55                   	push   rbp
   34450:	48 89 e5             	mov    rbp,rsp
   34453:	53                   	push   rbx
   34454:	48 83 ec 18          	sub    rsp,0x18
   34458:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3445c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   34460:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34464:	48 89 c7             	mov    rdi,rax
   34467:	e8 b8 19 00 00       	call   35e24 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   3446c:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   3446f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   34473:	48 89 c7             	mov    rdi,rax
   34476:	e8 a9 19 00 00       	call   35e24 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   3447b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3447e:	48 39 c3             	cmp    rbx,rax
   34481:	0f 94 c0             	sete   al
   34484:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   34488:	c9                   	leave  
   34489:	c3                   	ret    

000000000003448a <std::remove_reference<std::vector<objl::Vertex, std::allocator<objl::Vertex> >&>::type&& std::move<std::vector<objl::Vertex, std::allocator<objl::Vertex> >&>(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&)>:
   3448a:	55                   	push   rbp
   3448b:	48 89 e5             	mov    rbp,rsp
   3448e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34492:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34496:	5d                   	pop    rbp
   34497:	c3                   	ret    

0000000000034498 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_move_assign(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&&, std::integral_constant<bool, true>)>:
   34498:	55                   	push   rbp
   34499:	48 89 e5             	mov    rbp,rsp
   3449c:	53                   	push   rbx
   3449d:	48 83 ec 48          	sub    rsp,0x48
   344a1:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   344a5:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   344a9:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   344b2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   344b6:	31 c0                	xor    eax,eax
   344b8:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   344bc:	48 8d 45 cf          	lea    rax,[rbp-0x31]
   344c0:	48 89 d6             	mov    rsi,rdx
   344c3:	48 89 c7             	mov    rdi,rax
   344c6:	e8 67 19 00 00       	call   35e32 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::get_allocator() const>
   344cb:	48 8d 55 cf          	lea    rdx,[rbp-0x31]
   344cf:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   344d3:	48 89 d6             	mov    rsi,rdx
   344d6:	48 89 c7             	mov    rdi,rax
   344d9:	e8 88 19 00 00       	call   35e66 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::allocator<objl::Vertex> const&)>
   344de:	48 8d 45 cf          	lea    rax,[rbp-0x31]
   344e2:	48 89 c7             	mov    rdi,rax
   344e5:	e8 78 df ff ff       	call   32462 <std::allocator<objl::Vertex>::~allocator()>
   344ea:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   344ee:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   344f2:	48 89 d6             	mov    rsi,rdx
   344f5:	48 89 c7             	mov    rdi,rax
   344f8:	e8 8f 19 00 00       	call   35e8c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data&)>
   344fd:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   34501:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   34505:	48 89 d6             	mov    rsi,rdx
   34508:	48 89 c7             	mov    rdi,rax
   3450b:	e8 7c 19 00 00       	call   35e8c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data&)>
   34510:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   34514:	48 89 c7             	mov    rdi,rax
   34517:	e8 5c f4 ff ff       	call   33978 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   3451c:	48 89 c3             	mov    rbx,rax
   3451f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   34523:	48 89 c7             	mov    rdi,rax
   34526:	e8 4d f4 ff ff       	call   33978 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   3452b:	48 89 de             	mov    rsi,rbx
   3452e:	48 89 c7             	mov    rdi,rax
   34531:	e8 d1 19 00 00       	call   35f07 <void std::__alloc_on_move<std::allocator<objl::Vertex> >(std::allocator<objl::Vertex>&, std::allocator<objl::Vertex>&)>
   34536:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   3453a:	48 89 c7             	mov    rdi,rax
   3453d:	e8 8a df ff ff       	call   324cc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   34542:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34546:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   3454f:	74 05                	je     34556 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_move_assign(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&&, std::integral_constant<bool, true>)+0xbe>
   34551:	e8 8a ff fc ff       	call   44e0 <__stack_chk_fail@plt>
   34556:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3455a:	c9                   	leave  
   3455b:	c3                   	ret    

000000000003455c <std::remove_reference<std::vector<unsigned int, std::allocator<unsigned int> >&>::type&& std::move<std::vector<unsigned int, std::allocator<unsigned int> >&>(std::vector<unsigned int, std::allocator<unsigned int> >&)>:
   3455c:	55                   	push   rbp
   3455d:	48 89 e5             	mov    rbp,rsp
   34560:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34564:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34568:	5d                   	pop    rbp
   34569:	c3                   	ret    

000000000003456a <std::vector<unsigned int, std::allocator<unsigned int> >::_M_move_assign(std::vector<unsigned int, std::allocator<unsigned int> >&&, std::integral_constant<bool, true>)>:
   3456a:	55                   	push   rbp
   3456b:	48 89 e5             	mov    rbp,rsp
   3456e:	53                   	push   rbx
   3456f:	48 83 ec 48          	sub    rsp,0x48
   34573:	48 89 7d b8          	mov    QWORD PTR [rbp-0x48],rdi
   34577:	48 89 75 b0          	mov    QWORD PTR [rbp-0x50],rsi
   3457b:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34584:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   34588:	31 c0                	xor    eax,eax
   3458a:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   3458e:	48 8d 45 cf          	lea    rax,[rbp-0x31]
   34592:	48 89 d6             	mov    rsi,rdx
   34595:	48 89 c7             	mov    rdi,rax
   34598:	e8 89 19 00 00       	call   35f26 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::get_allocator() const>
   3459d:	48 8d 55 cf          	lea    rdx,[rbp-0x31]
   345a1:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   345a5:	48 89 d6             	mov    rsi,rdx
   345a8:	48 89 c7             	mov    rdi,rax
   345ab:	e8 aa 19 00 00       	call   35f5a <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::allocator<unsigned int> const&)>
   345b0:	48 8d 45 cf          	lea    rax,[rbp-0x31]
   345b4:	48 89 c7             	mov    rdi,rax
   345b7:	e8 9e 27 ff ff       	call   26d5a <std::allocator<unsigned int>::~allocator()>
   345bc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   345c0:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   345c4:	48 89 d6             	mov    rsi,rdx
   345c7:	48 89 c7             	mov    rdi,rax
   345ca:	e8 b1 19 00 00       	call   35f80 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data&)>
   345cf:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
   345d3:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   345d7:	48 89 d6             	mov    rsi,rdx
   345da:	48 89 c7             	mov    rdi,rax
   345dd:	e8 9e 19 00 00       	call   35f80 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data&)>
   345e2:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
   345e6:	48 89 c7             	mov    rdi,rax
   345e9:	e8 44 42 ff ff       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   345ee:	48 89 c3             	mov    rbx,rax
   345f1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   345f5:	48 89 c7             	mov    rdi,rax
   345f8:	e8 35 42 ff ff       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   345fd:	48 89 de             	mov    rsi,rbx
   34600:	48 89 c7             	mov    rdi,rax
   34603:	e8 f3 19 00 00       	call   35ffb <void std::__alloc_on_move<std::allocator<unsigned int> >(std::allocator<unsigned int>&, std::allocator<unsigned int>&)>
   34608:	48 8d 45 d0          	lea    rax,[rbp-0x30]
   3460c:	48 89 c7             	mov    rdi,rax
   3460f:	e8 b0 27 ff ff       	call   26dc4 <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   34614:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34618:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   34621:	74 05                	je     34628 <std::vector<unsigned int, std::allocator<unsigned int> >::_M_move_assign(std::vector<unsigned int, std::allocator<unsigned int> >&&, std::integral_constant<bool, true>)+0xbe>
   34623:	e8 b8 fe fc ff       	call   44e0 <__stack_chk_fail@plt>
   34628:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3462c:	c9                   	leave  
   3462d:	c3                   	ret    

000000000003462e <void std::allocator_traits<std::allocator<objl::Mesh> >::construct<objl::Mesh, objl::Mesh const&>(std::allocator<objl::Mesh>&, objl::Mesh*, objl::Mesh const&)>:
   3462e:	55                   	push   rbp
   3462f:	48 89 e5             	mov    rbp,rsp
   34632:	48 83 ec 20          	sub    rsp,0x20
   34636:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3463a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3463e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   34642:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34646:	48 89 c7             	mov    rdi,rax
   34649:	e8 cc 19 00 00       	call   3601a <objl::Mesh const& std::forward<objl::Mesh const&>(std::remove_reference<objl::Mesh const&>::type&)>
   3464e:	48 89 c2             	mov    rdx,rax
   34651:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   34655:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34659:	48 89 ce             	mov    rsi,rcx
   3465c:	48 89 c7             	mov    rdi,rax
   3465f:	e8 7a 1c 00 00       	call   362de <void __gnu_cxx::new_allocator<objl::Mesh>::construct<objl::Mesh, objl::Mesh const&>(objl::Mesh*, objl::Mesh const&)>
   34664:	90                   	nop
   34665:	c9                   	leave  
   34666:	c3                   	ret    
   34667:	90                   	nop

0000000000034668 <void std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_realloc_insert<objl::Mesh const&>(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >, objl::Mesh const&)>:
   34668:	55                   	push   rbp
   34669:	48 89 e5             	mov    rbp,rsp
   3466c:	53                   	push   rbx
   3466d:	48 83 ec 68          	sub    rsp,0x68
   34671:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   34675:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   34679:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   3467d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34686:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   3468a:	31 c0                	xor    eax,eax
   3468c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34690:	48 8d 15 c7 84 00 00 	lea    rdx,[rip+0x84c7]        # 3cb5e <NANO_SEC+0x1896>
   34697:	be 01 00 00 00       	mov    esi,0x1
   3469c:	48 89 c7             	mov    rdi,rax
   3469f:	e8 a8 1c 00 00       	call   3634c <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_check_len(unsigned long, char const*) const>
   346a4:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   346a8:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   346ac:	48 8b 00             	mov    rax,QWORD PTR [rax]
   346af:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   346b3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   346b7:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   346bb:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   346bf:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   346c3:	48 89 c7             	mov    rdi,rax
   346c6:	e8 2d ec ff ff       	call   332f8 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::begin()>
   346cb:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   346cf:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   346d3:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   346d7:	48 89 d6             	mov    rsi,rdx
   346da:	48 89 c7             	mov    rdi,rax
   346dd:	e8 55 1d 00 00       	call   36437 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::difference_type __gnu_cxx::operator-<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&, __gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&)>
   346e2:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   346e6:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   346ea:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   346ee:	48 89 d6             	mov    rsi,rdx
   346f1:	48 89 c7             	mov    rdi,rax
   346f4:	e8 8f 1d 00 00       	call   36488 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_allocate(unsigned long)>
   346f9:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   346fd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34701:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34705:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   34709:	48 89 c7             	mov    rdi,rax
   3470c:	e8 09 19 00 00       	call   3601a <objl::Mesh const& std::forward<objl::Mesh const&>(std::remove_reference<objl::Mesh const&>::type&)>
   34711:	48 89 c2             	mov    rdx,rax
   34714:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   34718:	48 69 c8 68 01 00 00 	imul   rcx,rax,0x168
   3471f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34723:	48 01 c1             	add    rcx,rax
   34726:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3472a:	48 89 ce             	mov    rsi,rcx
   3472d:	48 89 c7             	mov    rdi,rax
   34730:	e8 f9 fe ff ff       	call   3462e <void std::allocator_traits<std::allocator<objl::Mesh> >::construct<objl::Mesh, objl::Mesh const&>(std::allocator<objl::Mesh>&, objl::Mesh*, objl::Mesh const&)>
   34735:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   3473d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34741:	48 89 c7             	mov    rdi,rax
   34744:	e8 15 f9 ff ff       	call   3405e <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator()>
   34749:	48 89 c3             	mov    rbx,rax
   3474c:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34750:	48 89 c7             	mov    rdi,rax
   34753:	e8 08 08 00 00       	call   34f60 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   34758:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   3475b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   3475f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   34763:	48 89 d9             	mov    rcx,rbx
   34766:	48 89 c7             	mov    rdi,rax
   34769:	e8 4d 1d 00 00       	call   364bb <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_relocate(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   3476e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34772:	48 81 45 e0 68 01 00 00 	add    QWORD PTR [rbp-0x20],0x168
   3477a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3477e:	48 89 c7             	mov    rdi,rax
   34781:	e8 d8 f8 ff ff       	call   3405e <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator()>
   34786:	48 89 c3             	mov    rbx,rax
   34789:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   3478d:	48 89 c7             	mov    rdi,rax
   34790:	e8 cb 07 00 00       	call   34f60 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   34795:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34798:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   3479c:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   347a0:	48 89 d9             	mov    rcx,rbx
   347a3:	48 89 c7             	mov    rdi,rax
   347a6:	e8 10 1d 00 00       	call   364bb <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_relocate(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   347ab:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   347af:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   347b3:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   347b7:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   347bb:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   347bf:	48 89 d1             	mov    rcx,rdx
   347c2:	48 c1 f9 03          	sar    rcx,0x3
   347c6:	48 ba a5 4f fa a4 4f fa a4 4f 	movabs rdx,0x4fa4fa4fa4fa4fa5
   347d0:	48 0f af d1          	imul   rdx,rcx
   347d4:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   347d8:	48 89 ce             	mov    rsi,rcx
   347db:	48 89 c7             	mov    rdi,rax
   347de:	e8 45 f8 ff ff       	call   34028 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_deallocate(objl::Mesh*, unsigned long)>
   347e3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   347e7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   347eb:	48 89 10             	mov    QWORD PTR [rax],rdx
   347ee:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   347f2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   347f6:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   347fa:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   347fe:	48 69 d0 68 01 00 00 	imul   rdx,rax,0x168
   34805:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34809:	48 01 c2             	add    rdx,rax
   3480c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34810:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   34814:	90                   	nop
   34815:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34819:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   34822:	0f 84 8d 00 00 00    	je     348b5 <void std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_realloc_insert<objl::Mesh const&>(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >, objl::Mesh const&)+0x24d>
   34828:	e9 83 00 00 00       	jmp    348b0 <void std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_realloc_insert<objl::Mesh const&>(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >, objl::Mesh const&)+0x248>
   3482d:	48 89 c7             	mov    rdi,rax
   34830:	e8 0b f9 fc ff       	call   4140 <__cxa_begin_catch@plt>
   34835:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   3483a:	75 23                	jne    3485f <void std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_realloc_insert<objl::Mesh const&>(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >, objl::Mesh const&)+0x1f7>
   3483c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   34840:	48 69 d0 68 01 00 00 	imul   rdx,rax,0x168
   34847:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3484b:	48 01 c2             	add    rdx,rax
   3484e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34852:	48 89 d6             	mov    rsi,rdx
   34855:	48 89 c7             	mov    rdi,rax
   34858:	e8 90 1c 00 00       	call   364ed <void std::allocator_traits<std::allocator<objl::Mesh> >::destroy<objl::Mesh>(std::allocator<objl::Mesh>&, objl::Mesh*)>
   3485d:	eb 22                	jmp    34881 <void std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_realloc_insert<objl::Mesh const&>(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >, objl::Mesh const&)+0x219>
   3485f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34863:	48 89 c7             	mov    rdi,rax
   34866:	e8 f3 f7 ff ff       	call   3405e <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator()>
   3486b:	48 89 c2             	mov    rdx,rax
   3486e:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   34872:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34876:	48 89 ce             	mov    rsi,rcx
   34879:	48 89 c7             	mov    rdi,rax
   3487c:	e8 eb f7 ff ff       	call   3406c <void std::_Destroy<objl::Mesh*, objl::Mesh>(objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   34881:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34885:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   34889:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   3488d:	48 89 ce             	mov    rsi,rcx
   34890:	48 89 c7             	mov    rdi,rax
   34893:	e8 90 f7 ff ff       	call   34028 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_deallocate(objl::Mesh*, unsigned long)>
   34898:	e8 b3 fd fc ff       	call   4650 <__cxa_rethrow@plt>
   3489d:	48 89 c3             	mov    rbx,rax
   348a0:	e8 6b fe fc ff       	call   4710 <__cxa_end_catch@plt>
   348a5:	48 89 d8             	mov    rax,rbx
   348a8:	48 89 c7             	mov    rdi,rax
   348ab:	e8 b0 fe fc ff       	call   4760 <_Unwind_Resume@plt>
   348b0:	e8 2b fc fc ff       	call   44e0 <__stack_chk_fail@plt>
   348b5:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   348b9:	c9                   	leave  
   348ba:	c3                   	ret    

00000000000348bb <void std::allocator_traits<std::allocator<objl::Vector3> >::construct<objl::Vector3, objl::Vector3 const&>(std::allocator<objl::Vector3>&, objl::Vector3*, objl::Vector3 const&)>:
   348bb:	55                   	push   rbp
   348bc:	48 89 e5             	mov    rbp,rsp
   348bf:	48 83 ec 20          	sub    rsp,0x20
   348c3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   348c7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   348cb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   348cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   348d3:	48 89 c7             	mov    rdi,rax
   348d6:	e8 38 1c 00 00       	call   36513 <objl::Vector3 const& std::forward<objl::Vector3 const&>(std::remove_reference<objl::Vector3 const&>::type&)>
   348db:	48 89 c2             	mov    rdx,rax
   348de:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   348e2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   348e6:	48 89 ce             	mov    rsi,rcx
   348e9:	48 89 c7             	mov    rdi,rax
   348ec:	e8 31 1c 00 00       	call   36522 <void __gnu_cxx::new_allocator<objl::Vector3>::construct<objl::Vector3, objl::Vector3 const&>(objl::Vector3*, objl::Vector3 const&)>
   348f1:	90                   	nop
   348f2:	c9                   	leave  
   348f3:	c3                   	ret    

00000000000348f4 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::end()>:
   348f4:	55                   	push   rbp
   348f5:	48 89 e5             	mov    rbp,rsp
   348f8:	48 83 ec 20          	sub    rsp,0x20
   348fc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   34900:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34909:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   3490d:	31 c0                	xor    eax,eax
   3490f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34913:	48 8d 50 08          	lea    rdx,[rax+0x8]
   34917:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   3491b:	48 89 d6             	mov    rsi,rdx
   3491e:	48 89 c7             	mov    rdi,rax
   34921:	e8 44 1c 00 00       	call   3656a <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::__normal_iterator(objl::Vector3* const&)>
   34926:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3492a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   3492e:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   34937:	74 05                	je     3493e <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::end()+0x4a>
   34939:	e8 a2 fb fc ff       	call   44e0 <__stack_chk_fail@plt>
   3493e:	c9                   	leave  
   3493f:	c3                   	ret    

0000000000034940 <void std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_realloc_insert<objl::Vector3 const&>(__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >, objl::Vector3 const&)>:
   34940:	55                   	push   rbp
   34941:	48 89 e5             	mov    rbp,rsp
   34944:	53                   	push   rbx
   34945:	48 83 ec 68          	sub    rsp,0x68
   34949:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   3494d:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   34951:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   34955:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3495e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   34962:	31 c0                	xor    eax,eax
   34964:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34968:	48 8d 15 ef 81 00 00 	lea    rdx,[rip+0x81ef]        # 3cb5e <NANO_SEC+0x1896>
   3496f:	be 01 00 00 00       	mov    esi,0x1
   34974:	48 89 c7             	mov    rdi,rax
   34977:	e8 0c 1c 00 00       	call   36588 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_check_len(unsigned long, char const*) const>
   3497c:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   34980:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34984:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34987:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   3498b:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3498f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   34993:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   34997:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3499b:	48 89 c7             	mov    rdi,rax
   3499e:	e8 d1 1c 00 00       	call   36674 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::begin()>
   349a3:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   349a7:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   349ab:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   349af:	48 89 d6             	mov    rsi,rdx
   349b2:	48 89 c7             	mov    rdi,rax
   349b5:	e8 02 1d 00 00       	call   366bc <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::difference_type __gnu_cxx::operator-<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >(__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > > const&, __gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > > const&)>
   349ba:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   349be:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   349c2:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   349c6:	48 89 d6             	mov    rsi,rdx
   349c9:	48 89 c7             	mov    rdi,rax
   349cc:	e8 3b 1d 00 00       	call   3670c <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_allocate(unsigned long)>
   349d1:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   349d5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   349d9:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   349dd:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   349e1:	48 89 c7             	mov    rdi,rax
   349e4:	e8 2a 1b 00 00       	call   36513 <objl::Vector3 const& std::forward<objl::Vector3 const&>(std::remove_reference<objl::Vector3 const&>::type&)>
   349e9:	48 89 c6             	mov    rsi,rax
   349ec:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   349f0:	48 89 d0             	mov    rax,rdx
   349f3:	48 01 c0             	add    rax,rax
   349f6:	48 01 d0             	add    rax,rdx
   349f9:	48 c1 e0 02          	shl    rax,0x2
   349fd:	48 89 c2             	mov    rdx,rax
   34a00:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34a04:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
   34a08:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34a0c:	48 89 f2             	mov    rdx,rsi
   34a0f:	48 89 ce             	mov    rsi,rcx
   34a12:	48 89 c7             	mov    rdi,rax
   34a15:	e8 a1 fe ff ff       	call   348bb <void std::allocator_traits<std::allocator<objl::Vector3> >::construct<objl::Vector3, objl::Vector3 const&>(std::allocator<objl::Vector3>&, objl::Vector3*, objl::Vector3 const&)>
   34a1a:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   34a22:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34a26:	48 89 c7             	mov    rdi,rax
   34a29:	e8 ea f8 ff ff       	call   34318 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_get_Tp_allocator()>
   34a2e:	48 89 c3             	mov    rbx,rax
   34a31:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34a35:	48 89 c7             	mov    rdi,rax
   34a38:	e8 35 1d 00 00       	call   36772 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::base() const>
   34a3d:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   34a40:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   34a44:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   34a48:	48 89 d9             	mov    rcx,rbx
   34a4b:	48 89 c7             	mov    rdi,rax
   34a4e:	e8 ec 1c 00 00       	call   3673f <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_relocate(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>
   34a53:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34a57:	48 83 45 e0 0c       	add    QWORD PTR [rbp-0x20],0xc
   34a5c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34a60:	48 89 c7             	mov    rdi,rax
   34a63:	e8 b0 f8 ff ff       	call   34318 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_get_Tp_allocator()>
   34a68:	48 89 c3             	mov    rbx,rax
   34a6b:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34a6f:	48 89 c7             	mov    rdi,rax
   34a72:	e8 fb 1c 00 00       	call   36772 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::base() const>
   34a77:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34a7a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34a7e:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   34a82:	48 89 d9             	mov    rcx,rbx
   34a85:	48 89 c7             	mov    rdi,rax
   34a88:	e8 b2 1c 00 00       	call   3673f <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_relocate(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>
   34a8d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34a91:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34a95:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   34a99:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   34a9d:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   34aa1:	48 89 d1             	mov    rcx,rdx
   34aa4:	48 c1 f9 02          	sar    rcx,0x2
   34aa8:	48 ba ab aa aa aa aa aa aa aa 	movabs rdx,0xaaaaaaaaaaaaaaab
   34ab2:	48 0f af d1          	imul   rdx,rcx
   34ab6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   34aba:	48 89 ce             	mov    rsi,rcx
   34abd:	48 89 c7             	mov    rdi,rax
   34ac0:	e8 1d f8 ff ff       	call   342e2 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_deallocate(objl::Vector3*, unsigned long)>
   34ac5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34ac9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   34acd:	48 89 10             	mov    QWORD PTR [rax],rdx
   34ad0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34ad4:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34ad8:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   34adc:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   34ae0:	48 89 d0             	mov    rax,rdx
   34ae3:	48 01 c0             	add    rax,rax
   34ae6:	48 01 d0             	add    rax,rdx
   34ae9:	48 c1 e0 02          	shl    rax,0x2
   34aed:	48 89 c2             	mov    rdx,rax
   34af0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34af4:	48 01 c2             	add    rdx,rax
   34af7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34afb:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   34aff:	90                   	nop
   34b00:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34b04:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   34b0d:	74 05                	je     34b14 <void std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_realloc_insert<objl::Vector3 const&>(__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >, objl::Vector3 const&)+0x1d4>
   34b0f:	e8 cc f9 fc ff       	call   44e0 <__stack_chk_fail@plt>
   34b14:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   34b18:	c9                   	leave  
   34b19:	c3                   	ret    

0000000000034b1a <void std::allocator_traits<std::allocator<objl::Vector2> >::construct<objl::Vector2, objl::Vector2 const&>(std::allocator<objl::Vector2>&, objl::Vector2*, objl::Vector2 const&)>:
   34b1a:	55                   	push   rbp
   34b1b:	48 89 e5             	mov    rbp,rsp
   34b1e:	48 83 ec 20          	sub    rsp,0x20
   34b22:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34b26:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   34b2a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   34b2e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34b32:	48 89 c7             	mov    rdi,rax
   34b35:	e8 6c 1c 00 00       	call   367a6 <objl::Vector2 const& std::forward<objl::Vector2 const&>(std::remove_reference<objl::Vector2 const&>::type&)>
   34b3a:	48 89 c2             	mov    rdx,rax
   34b3d:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   34b41:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34b45:	48 89 ce             	mov    rsi,rcx
   34b48:	48 89 c7             	mov    rdi,rax
   34b4b:	e8 64 1c 00 00       	call   367b4 <void __gnu_cxx::new_allocator<objl::Vector2>::construct<objl::Vector2, objl::Vector2 const&>(objl::Vector2*, objl::Vector2 const&)>
   34b50:	90                   	nop
   34b51:	c9                   	leave  
   34b52:	c3                   	ret    
   34b53:	90                   	nop

0000000000034b54 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::end()>:
   34b54:	55                   	push   rbp
   34b55:	48 89 e5             	mov    rbp,rsp
   34b58:	48 83 ec 20          	sub    rsp,0x20
   34b5c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   34b60:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34b69:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   34b6d:	31 c0                	xor    eax,eax
   34b6f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34b73:	48 8d 50 08          	lea    rdx,[rax+0x8]
   34b77:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   34b7b:	48 89 d6             	mov    rsi,rdx
   34b7e:	48 89 c7             	mov    rdi,rax
   34b81:	e8 70 1c 00 00       	call   367f6 <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::__normal_iterator(objl::Vector2* const&)>
   34b86:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   34b8a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   34b8e:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   34b97:	74 05                	je     34b9e <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::end()+0x4a>
   34b99:	e8 42 f9 fc ff       	call   44e0 <__stack_chk_fail@plt>
   34b9e:	c9                   	leave  
   34b9f:	c3                   	ret    

0000000000034ba0 <void std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_realloc_insert<objl::Vector2 const&>(__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >, objl::Vector2 const&)>:
   34ba0:	55                   	push   rbp
   34ba1:	48 89 e5             	mov    rbp,rsp
   34ba4:	53                   	push   rbx
   34ba5:	48 83 ec 68          	sub    rsp,0x68
   34ba9:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   34bad:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   34bb1:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   34bb5:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34bbe:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   34bc2:	31 c0                	xor    eax,eax
   34bc4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34bc8:	48 8d 15 8f 7f 00 00 	lea    rdx,[rip+0x7f8f]        # 3cb5e <NANO_SEC+0x1896>
   34bcf:	be 01 00 00 00       	mov    esi,0x1
   34bd4:	48 89 c7             	mov    rdi,rax
   34bd7:	e8 38 1c 00 00       	call   36814 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_check_len(unsigned long, char const*) const>
   34bdc:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   34be0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34be4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34be7:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   34beb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34bef:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   34bf3:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   34bf7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34bfb:	48 89 c7             	mov    rdi,rax
   34bfe:	e8 fd 1c 00 00       	call   36900 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::begin()>
   34c03:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   34c07:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   34c0b:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34c0f:	48 89 d6             	mov    rsi,rdx
   34c12:	48 89 c7             	mov    rdi,rax
   34c15:	e8 2e 1d 00 00       	call   36948 <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::difference_type __gnu_cxx::operator-<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >(__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > > const&, __gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > > const&)>
   34c1a:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   34c1e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34c22:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   34c26:	48 89 d6             	mov    rsi,rdx
   34c29:	48 89 c7             	mov    rdi,rax
   34c2c:	e8 57 1d 00 00       	call   36988 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_allocate(unsigned long)>
   34c31:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   34c35:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34c39:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34c3d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   34c41:	48 89 c7             	mov    rdi,rax
   34c44:	e8 5d 1b 00 00       	call   367a6 <objl::Vector2 const& std::forward<objl::Vector2 const&>(std::remove_reference<objl::Vector2 const&>::type&)>
   34c49:	48 89 c2             	mov    rdx,rax
   34c4c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   34c50:	48 8d 0c c5 00 00 00 00 	lea    rcx,[rax*8+0x0]
   34c58:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34c5c:	48 01 c1             	add    rcx,rax
   34c5f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34c63:	48 89 ce             	mov    rsi,rcx
   34c66:	48 89 c7             	mov    rdi,rax
   34c69:	e8 ac fe ff ff       	call   34b1a <void std::allocator_traits<std::allocator<objl::Vector2> >::construct<objl::Vector2, objl::Vector2 const&>(std::allocator<objl::Vector2>&, objl::Vector2*, objl::Vector2 const&)>
   34c6e:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   34c76:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34c7a:	48 89 c7             	mov    rdi,rax
   34c7d:	e8 5a f7 ff ff       	call   343dc <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_get_Tp_allocator()>
   34c82:	48 89 c3             	mov    rbx,rax
   34c85:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34c89:	48 89 c7             	mov    rdi,rax
   34c8c:	e8 5d 1d 00 00       	call   369ee <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::base() const>
   34c91:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   34c94:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   34c98:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   34c9c:	48 89 d9             	mov    rcx,rbx
   34c9f:	48 89 c7             	mov    rdi,rax
   34ca2:	e8 14 1d 00 00       	call   369bb <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_relocate(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>
   34ca7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34cab:	48 83 45 e0 08       	add    QWORD PTR [rbp-0x20],0x8
   34cb0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34cb4:	48 89 c7             	mov    rdi,rax
   34cb7:	e8 20 f7 ff ff       	call   343dc <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_get_Tp_allocator()>
   34cbc:	48 89 c3             	mov    rbx,rax
   34cbf:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34cc3:	48 89 c7             	mov    rdi,rax
   34cc6:	e8 23 1d 00 00       	call   369ee <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::base() const>
   34ccb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34cce:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34cd2:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   34cd6:	48 89 d9             	mov    rcx,rbx
   34cd9:	48 89 c7             	mov    rdi,rax
   34cdc:	e8 da 1c 00 00       	call   369bb <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_relocate(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>
   34ce1:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34ce5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34ce9:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   34ced:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   34cf1:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   34cf5:	48 c1 fa 03          	sar    rdx,0x3
   34cf9:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   34cfd:	48 89 ce             	mov    rsi,rcx
   34d00:	48 89 c7             	mov    rdi,rax
   34d03:	e8 9e f6 ff ff       	call   343a6 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_deallocate(objl::Vector2*, unsigned long)>
   34d08:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34d0c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   34d10:	48 89 10             	mov    QWORD PTR [rax],rdx
   34d13:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34d17:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34d1b:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   34d1f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   34d23:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   34d2b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34d2f:	48 01 c2             	add    rdx,rax
   34d32:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34d36:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   34d3a:	90                   	nop
   34d3b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34d3f:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   34d48:	74 05                	je     34d4f <void std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_realloc_insert<objl::Vector2 const&>(__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >, objl::Vector2 const&)+0x1af>
   34d4a:	e8 91 f7 fc ff       	call   44e0 <__stack_chk_fail@plt>
   34d4f:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   34d53:	c9                   	leave  
   34d54:	c3                   	ret    

0000000000034d55 <void std::allocator_traits<std::allocator<objl::Vertex> >::construct<objl::Vertex, objl::Vertex const&>(std::allocator<objl::Vertex>&, objl::Vertex*, objl::Vertex const&)>:
   34d55:	55                   	push   rbp
   34d56:	48 89 e5             	mov    rbp,rsp
   34d59:	48 83 ec 20          	sub    rsp,0x20
   34d5d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34d61:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   34d65:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   34d69:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34d6d:	48 89 c7             	mov    rdi,rax
   34d70:	e8 ad 1c 00 00       	call   36a22 <objl::Vertex const& std::forward<objl::Vertex const&>(std::remove_reference<objl::Vertex const&>::type&)>
   34d75:	48 89 c2             	mov    rdx,rax
   34d78:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   34d7c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34d80:	48 89 ce             	mov    rsi,rcx
   34d83:	48 89 c7             	mov    rdi,rax
   34d86:	e8 a5 1c 00 00       	call   36a30 <void __gnu_cxx::new_allocator<objl::Vertex>::construct<objl::Vertex, objl::Vertex const&>(objl::Vertex*, objl::Vertex const&)>
   34d8b:	90                   	nop
   34d8c:	c9                   	leave  
   34d8d:	c3                   	ret    

0000000000034d8e <void std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_realloc_insert<objl::Vertex const&>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex const&)>:
   34d8e:	55                   	push   rbp
   34d8f:	48 89 e5             	mov    rbp,rsp
   34d92:	53                   	push   rbx
   34d93:	48 83 ec 68          	sub    rsp,0x68
   34d97:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   34d9b:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   34d9f:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   34da3:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34dac:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   34db0:	31 c0                	xor    eax,eax
   34db2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34db6:	48 8d 15 a1 7d 00 00 	lea    rdx,[rip+0x7da1]        # 3cb5e <NANO_SEC+0x1896>
   34dbd:	be 01 00 00 00       	mov    esi,0x1
   34dc2:	48 89 c7             	mov    rdi,rax
   34dc5:	e8 c4 1c 00 00       	call   36a8e <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_check_len(unsigned long, char const*) const>
   34dca:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   34dce:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34dd2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34dd5:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   34dd9:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34ddd:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   34de1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   34de5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34de9:	48 89 c7             	mov    rdi,rax
   34dec:	e8 b3 e8 ff ff       	call   336a4 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::begin()>
   34df1:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   34df5:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   34df9:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34dfd:	48 89 d6             	mov    rsi,rdx
   34e00:	48 89 c7             	mov    rdi,rax
   34e03:	e8 71 1d 00 00       	call   36b79 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::difference_type __gnu_cxx::operator-<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>
   34e08:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   34e0c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34e10:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   34e14:	48 89 d6             	mov    rsi,rdx
   34e17:	48 89 c7             	mov    rdi,rax
   34e1a:	e8 51 09 00 00       	call   35770 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate(unsigned long)>
   34e1f:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   34e23:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34e27:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34e2b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   34e2f:	48 89 c7             	mov    rdi,rax
   34e32:	e8 eb 1b 00 00       	call   36a22 <objl::Vertex const& std::forward<objl::Vertex const&>(std::remove_reference<objl::Vertex const&>::type&)>
   34e37:	48 89 c2             	mov    rdx,rax
   34e3a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   34e3e:	48 c1 e0 05          	shl    rax,0x5
   34e42:	48 89 c1             	mov    rcx,rax
   34e45:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34e49:	48 01 c1             	add    rcx,rax
   34e4c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34e50:	48 89 ce             	mov    rsi,rcx
   34e53:	48 89 c7             	mov    rdi,rax
   34e56:	e8 fa fe ff ff       	call   34d55 <void std::allocator_traits<std::allocator<objl::Vertex> >::construct<objl::Vertex, objl::Vertex const&>(std::allocator<objl::Vertex>&, objl::Vertex*, objl::Vertex const&)>
   34e5b:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   34e63:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34e67:	48 89 c7             	mov    rdi,rax
   34e6a:	e8 09 eb ff ff       	call   33978 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   34e6f:	48 89 c3             	mov    rbx,rax
   34e72:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34e76:	48 89 c7             	mov    rdi,rax
   34e79:	e8 5a 03 00 00       	call   351d8 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   34e7e:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   34e81:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   34e85:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   34e89:	48 89 d9             	mov    rcx,rbx
   34e8c:	48 89 c7             	mov    rdi,rax
   34e8f:	e8 24 1d 00 00       	call   36bb8 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_relocate(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   34e94:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34e98:	48 83 45 e0 20       	add    QWORD PTR [rbp-0x20],0x20
   34e9d:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34ea1:	48 89 c7             	mov    rdi,rax
   34ea4:	e8 cf ea ff ff       	call   33978 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator()>
   34ea9:	48 89 c3             	mov    rbx,rax
   34eac:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   34eb0:	48 89 c7             	mov    rdi,rax
   34eb3:	e8 20 03 00 00       	call   351d8 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   34eb8:	48 8b 00             	mov    rax,QWORD PTR [rax]
   34ebb:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34ebf:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   34ec3:	48 89 d9             	mov    rcx,rbx
   34ec6:	48 89 c7             	mov    rdi,rax
   34ec9:	e8 ea 1c 00 00       	call   36bb8 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_relocate(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   34ece:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   34ed2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34ed6:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   34eda:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   34ede:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   34ee2:	48 c1 fa 05          	sar    rdx,0x5
   34ee6:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   34eea:	48 89 ce             	mov    rsi,rcx
   34eed:	48 89 c7             	mov    rdi,rax
   34ef0:	e8 4d ea ff ff       	call   33942 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_deallocate(objl::Vertex*, unsigned long)>
   34ef5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34ef9:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   34efd:	48 89 10             	mov    QWORD PTR [rax],rdx
   34f00:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34f04:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   34f08:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   34f0c:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   34f10:	48 c1 e0 05          	shl    rax,0x5
   34f14:	48 89 c2             	mov    rdx,rax
   34f17:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   34f1b:	48 01 c2             	add    rdx,rax
   34f1e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   34f22:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   34f26:	90                   	nop
   34f27:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34f2b:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   34f34:	74 05                	je     34f3b <void std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_realloc_insert<objl::Vertex const&>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex const&)+0x1ad>
   34f36:	e8 a5 f5 fc ff       	call   44e0 <__stack_chk_fail@plt>
   34f3b:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   34f3f:	c9                   	leave  
   34f40:	c3                   	ret    
   34f41:	90                   	nop

0000000000034f42 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::__normal_iterator(objl::Mesh* const&)>:
   34f42:	55                   	push   rbp
   34f43:	48 89 e5             	mov    rbp,rsp
   34f46:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34f4a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   34f4e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   34f52:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   34f55:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34f59:	48 89 10             	mov    QWORD PTR [rax],rdx
   34f5c:	90                   	nop
   34f5d:	5d                   	pop    rbp
   34f5e:	c3                   	ret    
   34f5f:	90                   	nop

0000000000034f60 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>:
   34f60:	55                   	push   rbp
   34f61:	48 89 e5             	mov    rbp,rsp
   34f64:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   34f68:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   34f6c:	5d                   	pop    rbp
   34f6d:	c3                   	ret    

0000000000034f6e <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::begin() const>:
   34f6e:	55                   	push   rbp
   34f6f:	48 89 e5             	mov    rbp,rsp
   34f72:	48 83 ec 20          	sub    rsp,0x20
   34f76:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   34f7a:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34f83:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   34f87:	31 c0                	xor    eax,eax
   34f89:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   34f8d:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   34f91:	48 89 d6             	mov    rsi,rdx
   34f94:	48 89 c7             	mov    rdi,rax
   34f97:	e8 74 1c 00 00       	call   36c10 <__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::__normal_iterator(objl::Mesh const* const&)>
   34f9c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   34fa0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   34fa4:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   34fad:	74 05                	je     34fb4 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::begin() const+0x46>
   34faf:	e8 2c f5 fc ff       	call   44e0 <__stack_chk_fail@plt>
   34fb4:	c9                   	leave  
   34fb5:	c3                   	ret    

0000000000034fb6 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::end() const>:
   34fb6:	55                   	push   rbp
   34fb7:	48 89 e5             	mov    rbp,rsp
   34fba:	48 83 ec 20          	sub    rsp,0x20
   34fbe:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   34fc2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   34fcb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   34fcf:	31 c0                	xor    eax,eax
   34fd1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   34fd5:	48 8d 50 08          	lea    rdx,[rax+0x8]
   34fd9:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   34fdd:	48 89 d6             	mov    rsi,rdx
   34fe0:	48 89 c7             	mov    rdi,rax
   34fe3:	e8 28 1c 00 00       	call   36c10 <__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::__normal_iterator(objl::Mesh const* const&)>
   34fe8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   34fec:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   34ff0:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   34ff9:	74 05                	je     35000 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::end() const+0x4a>
   34ffb:	e8 e0 f4 fc ff       	call   44e0 <__stack_chk_fail@plt>
   35000:	c9                   	leave  
   35001:	c3                   	ret    

0000000000035002 <bool __gnu_cxx::operator==<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >(__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&, __gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&)>:
   35002:	55                   	push   rbp
   35003:	48 89 e5             	mov    rbp,rsp
   35006:	53                   	push   rbx
   35007:	48 83 ec 18          	sub    rsp,0x18
   3500b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3500f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   35013:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35017:	48 89 c7             	mov    rdi,rax
   3501a:	e8 0f 1c 00 00       	call   36c2e <__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   3501f:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   35022:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   35026:	48 89 c7             	mov    rdi,rax
   35029:	e8 00 1c 00 00       	call   36c2e <__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   3502e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   35031:	48 39 c3             	cmp    rbx,rax
   35034:	0f 94 c0             	sete   al
   35037:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3503b:	c9                   	leave  
   3503c:	c3                   	ret    
   3503d:	90                   	nop

000000000003503e <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::size() const>:
   3503e:	55                   	push   rbp
   3503f:	48 89 e5             	mov    rbp,rsp
   35042:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35046:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3504a:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   3504e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35052:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   35055:	48 89 d0             	mov    rax,rdx
   35058:	48 29 c8             	sub    rax,rcx
   3505b:	48 c1 f8 02          	sar    rax,0x2
   3505f:	48 89 c2             	mov    rdx,rax
   35062:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   3506c:	48 0f af c2          	imul   rax,rdx
   35070:	5d                   	pop    rbp
   35071:	c3                   	ret    

0000000000035072 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::operator[](unsigned long) const>:
   35072:	55                   	push   rbp
   35073:	48 89 e5             	mov    rbp,rsp
   35076:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3507a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3507e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35082:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   35085:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35089:	48 89 d0             	mov    rax,rdx
   3508c:	48 01 c0             	add    rax,rax
   3508f:	48 01 d0             	add    rax,rdx
   35092:	48 c1 e0 02          	shl    rax,0x2
   35096:	48 01 c8             	add    rax,rcx
   35099:	5d                   	pop    rbp
   3509a:	c3                   	ret    
   3509b:	90                   	nop

000000000003509c <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::size() const>:
   3509c:	55                   	push   rbp
   3509d:	48 89 e5             	mov    rbp,rsp
   350a0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   350a4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   350a8:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   350ac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   350b0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
   350b3:	48 89 d0             	mov    rax,rdx
   350b6:	48 29 c8             	sub    rax,rcx
   350b9:	48 c1 f8 03          	sar    rax,0x3
   350bd:	5d                   	pop    rbp
   350be:	c3                   	ret    
   350bf:	90                   	nop

00000000000350c0 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::operator[](unsigned long) const>:
   350c0:	55                   	push   rbp
   350c1:	48 89 e5             	mov    rbp,rsp
   350c4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   350c8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   350cc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   350d0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   350d3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   350d7:	48 c1 e0 03          	shl    rax,0x3
   350db:	48 01 d0             	add    rax,rdx
   350de:	5d                   	pop    rbp
   350df:	c3                   	ret    

00000000000350e0 <__gnu_cxx::__alloc_traits<std::allocator<objl::Vertex>, objl::Vertex>::_S_select_on_copy(std::allocator<objl::Vertex> const&)>:
   350e0:	55                   	push   rbp
   350e1:	48 89 e5             	mov    rbp,rsp
   350e4:	48 83 ec 20          	sub    rsp,0x20
   350e8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   350ec:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   350f0:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   350f9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   350fd:	31 c0                	xor    eax,eax
   350ff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35103:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   35107:	48 89 d6             	mov    rsi,rdx
   3510a:	48 89 c7             	mov    rdi,rax
   3510d:	e8 2a 1b 00 00       	call   36c3c <std::allocator_traits<std::allocator<objl::Vertex> >::select_on_container_copy_construction(std::allocator<objl::Vertex> const&)>
   35112:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35116:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   3511f:	74 05                	je     35126 <__gnu_cxx::__alloc_traits<std::allocator<objl::Vertex>, objl::Vertex>::_S_select_on_copy(std::allocator<objl::Vertex> const&)+0x46>
   35121:	e8 ba f3 fc ff       	call   44e0 <__stack_chk_fail@plt>
   35126:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3512a:	c9                   	leave  
   3512b:	c3                   	ret    

000000000003512c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base(unsigned long, std::allocator<objl::Vertex> const&)>:
   3512c:	55                   	push   rbp
   3512d:	48 89 e5             	mov    rbp,rsp
   35130:	53                   	push   rbx
   35131:	48 83 ec 28          	sub    rsp,0x28
   35135:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   35139:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3513d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   35141:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35145:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   35149:	48 89 d6             	mov    rsi,rdx
   3514c:	48 89 c7             	mov    rdi,rax
   3514f:	e8 12 1b 00 00       	call   36c66 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::_Vector_impl(std::allocator<objl::Vertex> const&)>
   35154:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   35158:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3515c:	48 89 d6             	mov    rsi,rdx
   3515f:	48 89 c7             	mov    rdi,rax
   35162:	e8 31 1b 00 00       	call   36c98 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_create_storage(unsigned long)>
   35167:	eb 1a                	jmp    35183 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base(unsigned long, std::allocator<objl::Vertex> const&)+0x57>
   35169:	48 89 c3             	mov    rbx,rax
   3516c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35170:	48 89 c7             	mov    rdi,rax
   35173:	e8 9a c1 ff ff       	call   31312 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::~_Vector_impl()>
   35178:	48 89 d8             	mov    rax,rbx
   3517b:	48 89 c7             	mov    rdi,rax
   3517e:	e8 dd f5 fc ff       	call   4760 <_Unwind_Resume@plt>
   35183:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   35187:	c9                   	leave  
   35188:	c3                   	ret    

0000000000035189 <objl::Vertex* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*, objl::Vertex>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*, std::allocator<objl::Vertex>&)>:
   35189:	55                   	push   rbp
   3518a:	48 89 e5             	mov    rbp,rsp
   3518d:	48 83 ec 20          	sub    rsp,0x20
   35191:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35195:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35199:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3519d:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   351a1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   351a5:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   351a9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   351ad:	48 89 ce             	mov    rsi,rcx
   351b0:	48 89 c7             	mov    rdi,rax
   351b3:	e8 36 1b 00 00       	call   36cee <objl::Vertex* std::uninitialized_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)>
   351b8:	c9                   	leave  
   351b9:	c3                   	ret    

00000000000351ba <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex* const&)>:
   351ba:	55                   	push   rbp
   351bb:	48 89 e5             	mov    rbp,rsp
   351be:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   351c2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   351c6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   351ca:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   351cd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   351d1:	48 89 10             	mov    QWORD PTR [rax],rdx
   351d4:	90                   	nop
   351d5:	5d                   	pop    rbp
   351d6:	c3                   	ret    
   351d7:	90                   	nop

00000000000351d8 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>:
   351d8:	55                   	push   rbp
   351d9:	48 89 e5             	mov    rbp,rsp
   351dc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   351e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   351e4:	5d                   	pop    rbp
   351e5:	c3                   	ret    

00000000000351e6 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::cbegin() const>:
   351e6:	55                   	push   rbp
   351e7:	48 89 e5             	mov    rbp,rsp
   351ea:	48 83 ec 20          	sub    rsp,0x20
   351ee:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   351f2:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   351fb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   351ff:	31 c0                	xor    eax,eax
   35201:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35205:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   35209:	48 89 d6             	mov    rsi,rdx
   3520c:	48 89 c7             	mov    rdi,rax
   3520f:	e8 3e 05 00 00       	call   35752 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex const* const&)>
   35214:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   35218:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   3521c:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   35225:	74 05                	je     3522c <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::cbegin() const+0x46>
   35227:	e8 b4 f2 fc ff       	call   44e0 <__stack_chk_fail@plt>
   3522c:	c9                   	leave  
   3522d:	c3                   	ret    

000000000003522e <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::difference_type __gnu_cxx::operator-<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>:
   3522e:	55                   	push   rbp
   3522f:	48 89 e5             	mov    rbp,rsp
   35232:	53                   	push   rbx
   35233:	48 83 ec 18          	sub    rsp,0x18
   35237:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3523b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3523f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35243:	48 89 c7             	mov    rdi,rax
   35246:	e8 d9 0b 00 00       	call   35e24 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   3524b:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   3524e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   35252:	48 89 c7             	mov    rdi,rax
   35255:	e8 ca 0b 00 00       	call   35e24 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   3525a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   3525d:	48 89 d8             	mov    rax,rbx
   35260:	48 29 d0             	sub    rax,rdx
   35263:	48 c1 f8 05          	sar    rax,0x5
   35267:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3526b:	c9                   	leave  
   3526c:	c3                   	ret    
   3526d:	90                   	nop

000000000003526e <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_erase(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   3526e:	55                   	push   rbp
   3526f:	48 89 e5             	mov    rbp,rsp
   35272:	53                   	push   rbx
   35273:	48 83 ec 38          	sub    rsp,0x38
   35277:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   3527b:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   3527f:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   35288:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   3528c:	31 c0                	xor    eax,eax
   3528e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   35292:	48 89 c7             	mov    rdi,rax
   35295:	e8 e0 e8 ff ff       	call   33b7a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end()>
   3529a:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   3529e:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   352a2:	be 01 00 00 00       	mov    esi,0x1
   352a7:	48 89 c7             	mov    rdi,rax
   352aa:	e8 3d e4 ff ff       	call   336ec <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator+(long) const>
   352af:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   352b3:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   352b7:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   352bb:	48 89 d6             	mov    rsi,rdx
   352be:	48 89 c7             	mov    rdi,rax
   352c1:	e8 59 1a 00 00       	call   36d1f <bool __gnu_cxx::operator!=<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>
   352c6:	84 c0                	test   al,al
   352c8:	74 35                	je     352ff <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_erase(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)+0x91>
   352ca:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   352ce:	48 89 c7             	mov    rdi,rax
   352d1:	e8 a4 e8 ff ff       	call   33b7a <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::end()>
   352d6:	48 89 c3             	mov    rbx,rax
   352d9:	48 8d 45 c0          	lea    rax,[rbp-0x40]
   352dd:	be 01 00 00 00       	mov    esi,0x1
   352e2:	48 89 c7             	mov    rdi,rax
   352e5:	e8 02 e4 ff ff       	call   336ec <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator+(long) const>
   352ea:	48 89 c1             	mov    rcx,rax
   352ed:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   352f1:	48 89 c2             	mov    rdx,rax
   352f4:	48 89 de             	mov    rsi,rbx
   352f7:	48 89 cf             	mov    rdi,rcx
   352fa:	e8 5b 1a 00 00       	call   36d5a <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::move<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   352ff:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   35303:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   35307:	48 8d 50 e0          	lea    rdx,[rax-0x20]
   3530b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3530f:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   35313:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   35317:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   3531b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3531f:	48 89 d6             	mov    rsi,rdx
   35322:	48 89 c7             	mov    rdi,rax
   35325:	e8 c0 18 00 00       	call   36bea <void std::allocator_traits<std::allocator<objl::Vertex> >::destroy<objl::Vertex>(std::allocator<objl::Vertex>&, objl::Vertex*)>
   3532a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3532e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35332:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   3533b:	74 05                	je     35342 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_erase(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)+0xd4>
   3533d:	e8 9e f1 fc ff       	call   44e0 <__stack_chk_fail@plt>
   35342:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   35346:	c9                   	leave  
   35347:	c3                   	ret    

0000000000035348 <void std::allocator_traits<std::allocator<objl::Material> >::construct<objl::Material, objl::Material const&>(std::allocator<objl::Material>&, objl::Material*, objl::Material const&)>:
   35348:	55                   	push   rbp
   35349:	48 89 e5             	mov    rbp,rsp
   3534c:	48 83 ec 20          	sub    rsp,0x20
   35350:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35354:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35358:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3535c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35360:	48 89 c7             	mov    rdi,rax
   35363:	e8 3d 1a 00 00       	call   36da5 <objl::Material const& std::forward<objl::Material const&>(std::remove_reference<objl::Material const&>::type&)>
   35368:	48 89 c2             	mov    rdx,rax
   3536b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   3536f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35373:	48 89 ce             	mov    rsi,rcx
   35376:	48 89 c7             	mov    rdi,rax
   35379:	e8 36 1a 00 00       	call   36db4 <void __gnu_cxx::new_allocator<objl::Material>::construct<objl::Material, objl::Material const&>(objl::Material*, objl::Material const&)>
   3537e:	90                   	nop
   3537f:	c9                   	leave  
   35380:	c3                   	ret    
   35381:	90                   	nop

0000000000035382 <std::vector<objl::Material, std::allocator<objl::Material> >::end()>:
   35382:	55                   	push   rbp
   35383:	48 89 e5             	mov    rbp,rsp
   35386:	48 83 ec 20          	sub    rsp,0x20
   3538a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3538e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   35397:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   3539b:	31 c0                	xor    eax,eax
   3539d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   353a1:	48 8d 50 08          	lea    rdx,[rax+0x8]
   353a5:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   353a9:	48 89 d6             	mov    rsi,rdx
   353ac:	48 89 c7             	mov    rdi,rax
   353af:	e8 6e 1a 00 00       	call   36e22 <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::__normal_iterator(objl::Material* const&)>
   353b4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   353b8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   353bc:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   353c5:	74 05                	je     353cc <std::vector<objl::Material, std::allocator<objl::Material> >::end()+0x4a>
   353c7:	e8 14 f1 fc ff       	call   44e0 <__stack_chk_fail@plt>
   353cc:	c9                   	leave  
   353cd:	c3                   	ret    

00000000000353ce <void std::vector<objl::Material, std::allocator<objl::Material> >::_M_realloc_insert<objl::Material const&>(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >, objl::Material const&)>:
   353ce:	55                   	push   rbp
   353cf:	48 89 e5             	mov    rbp,rsp
   353d2:	53                   	push   rbx
   353d3:	48 83 ec 68          	sub    rsp,0x68
   353d7:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   353db:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   353df:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   353e3:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   353ec:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   353f0:	31 c0                	xor    eax,eax
   353f2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   353f6:	48 8d 15 61 77 00 00 	lea    rdx,[rip+0x7761]        # 3cb5e <NANO_SEC+0x1896>
   353fd:	be 01 00 00 00       	mov    esi,0x1
   35402:	48 89 c7             	mov    rdi,rax
   35405:	e8 36 1a 00 00       	call   36e40 <std::vector<objl::Material, std::allocator<objl::Material> >::_M_check_len(unsigned long, char const*) const>
   3540a:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   3540e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35412:	48 8b 00             	mov    rax,QWORD PTR [rax]
   35415:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   35419:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3541d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   35421:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   35425:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35429:	48 89 c7             	mov    rdi,rax
   3542c:	e8 fb 1a 00 00       	call   36f2c <std::vector<objl::Material, std::allocator<objl::Material> >::begin()>
   35431:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   35435:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   35439:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   3543d:	48 89 d6             	mov    rsi,rdx
   35440:	48 89 c7             	mov    rdi,rax
   35443:	e8 2c 1b 00 00       	call   36f74 <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::difference_type __gnu_cxx::operator-<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > > const&, __gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > > const&)>
   35448:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   3544c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35450:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   35454:	48 89 d6             	mov    rsi,rdx
   35457:	48 89 c7             	mov    rdi,rax
   3545a:	e8 65 1b 00 00       	call   36fc4 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_allocate(unsigned long)>
   3545f:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   35463:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35467:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   3546b:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   3546f:	48 89 c7             	mov    rdi,rax
   35472:	e8 2e 19 00 00       	call   36da5 <objl::Material const& std::forward<objl::Material const&>(std::remove_reference<objl::Material const&>::type&)>
   35477:	48 89 c2             	mov    rdx,rax
   3547a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   3547e:	48 69 c8 18 01 00 00 	imul   rcx,rax,0x118
   35485:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35489:	48 01 c1             	add    rcx,rax
   3548c:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35490:	48 89 ce             	mov    rsi,rcx
   35493:	48 89 c7             	mov    rdi,rax
   35496:	e8 ad fe ff ff       	call   35348 <void std::allocator_traits<std::allocator<objl::Material> >::construct<objl::Material, objl::Material const&>(std::allocator<objl::Material>&, objl::Material*, objl::Material const&)>
   3549b:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   354a3:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   354a7:	48 89 c7             	mov    rdi,rax
   354aa:	e8 73 ec ff ff       	call   34122 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_get_Tp_allocator()>
   354af:	48 89 c3             	mov    rbx,rax
   354b2:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   354b6:	48 89 c7             	mov    rdi,rax
   354b9:	e8 6c 1b 00 00       	call   3702a <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>
   354be:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   354c1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   354c5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   354c9:	48 89 d9             	mov    rcx,rbx
   354cc:	48 89 c7             	mov    rdi,rax
   354cf:	e8 23 1b 00 00       	call   36ff7 <std::vector<objl::Material, std::allocator<objl::Material> >::_S_relocate(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)>
   354d4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   354d8:	48 81 45 e0 18 01 00 00 	add    QWORD PTR [rbp-0x20],0x118
   354e0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   354e4:	48 89 c7             	mov    rdi,rax
   354e7:	e8 36 ec ff ff       	call   34122 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_get_Tp_allocator()>
   354ec:	48 89 c3             	mov    rbx,rax
   354ef:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   354f3:	48 89 c7             	mov    rdi,rax
   354f6:	e8 2f 1b 00 00       	call   3702a <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>
   354fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
   354fe:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   35502:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   35506:	48 89 d9             	mov    rcx,rbx
   35509:	48 89 c7             	mov    rdi,rax
   3550c:	e8 e6 1a 00 00       	call   36ff7 <std::vector<objl::Material, std::allocator<objl::Material> >::_S_relocate(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)>
   35511:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   35515:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35519:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   3551d:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   35521:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   35525:	48 89 d1             	mov    rcx,rdx
   35528:	48 c1 f9 03          	sar    rcx,0x3
   3552c:	48 ba 8b af f8 8a af f8 8a af 	movabs rdx,0xaf8af8af8af8af8b
   35536:	48 0f af d1          	imul   rdx,rcx
   3553a:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   3553e:	48 89 ce             	mov    rsi,rcx
   35541:	48 89 c7             	mov    rdi,rax
   35544:	e8 a3 eb ff ff       	call   340ec <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_deallocate(objl::Material*, unsigned long)>
   35549:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   3554d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   35551:	48 89 10             	mov    QWORD PTR [rax],rdx
   35554:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35558:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   3555c:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   35560:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   35564:	48 69 d0 18 01 00 00 	imul   rdx,rax,0x118
   3556b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3556f:	48 01 c2             	add    rdx,rax
   35572:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35576:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   3557a:	90                   	nop
   3557b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3557f:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   35588:	0f 84 8d 00 00 00    	je     3561b <void std::vector<objl::Material, std::allocator<objl::Material> >::_M_realloc_insert<objl::Material const&>(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >, objl::Material const&)+0x24d>
   3558e:	e9 83 00 00 00       	jmp    35616 <void std::vector<objl::Material, std::allocator<objl::Material> >::_M_realloc_insert<objl::Material const&>(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >, objl::Material const&)+0x248>
   35593:	48 89 c7             	mov    rdi,rax
   35596:	e8 a5 eb fc ff       	call   4140 <__cxa_begin_catch@plt>
   3559b:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
   355a0:	75 23                	jne    355c5 <void std::vector<objl::Material, std::allocator<objl::Material> >::_M_realloc_insert<objl::Material const&>(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >, objl::Material const&)+0x1f7>
   355a2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   355a6:	48 69 d0 18 01 00 00 	imul   rdx,rax,0x118
   355ad:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   355b1:	48 01 c2             	add    rdx,rax
   355b4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   355b8:	48 89 d6             	mov    rsi,rdx
   355bb:	48 89 c7             	mov    rdi,rax
   355be:	e8 75 1a 00 00       	call   37038 <void std::allocator_traits<std::allocator<objl::Material> >::destroy<objl::Material>(std::allocator<objl::Material>&, objl::Material*)>
   355c3:	eb 22                	jmp    355e7 <void std::vector<objl::Material, std::allocator<objl::Material> >::_M_realloc_insert<objl::Material const&>(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >, objl::Material const&)+0x219>
   355c5:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   355c9:	48 89 c7             	mov    rdi,rax
   355cc:	e8 51 eb ff ff       	call   34122 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_get_Tp_allocator()>
   355d1:	48 89 c2             	mov    rdx,rax
   355d4:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   355d8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   355dc:	48 89 ce             	mov    rsi,rcx
   355df:	48 89 c7             	mov    rdi,rax
   355e2:	e8 49 eb ff ff       	call   34130 <void std::_Destroy<objl::Material*, objl::Material>(objl::Material*, objl::Material*, std::allocator<objl::Material>&)>
   355e7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   355eb:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   355ef:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
   355f3:	48 89 ce             	mov    rsi,rcx
   355f6:	48 89 c7             	mov    rdi,rax
   355f9:	e8 ee ea ff ff       	call   340ec <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_deallocate(objl::Material*, unsigned long)>
   355fe:	e8 4d f0 fc ff       	call   4650 <__cxa_rethrow@plt>
   35603:	48 89 c3             	mov    rbx,rax
   35606:	e8 05 f1 fc ff       	call   4710 <__cxa_end_catch@plt>
   3560b:	48 89 d8             	mov    rax,rbx
   3560e:	48 89 c7             	mov    rdi,rax
   35611:	e8 4a f1 fc ff       	call   4760 <_Unwind_Resume@plt>
   35616:	e8 c5 ee fc ff       	call   44e0 <__stack_chk_fail@plt>
   3561b:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3561f:	c9                   	leave  
   35620:	c3                   	ret    
   35621:	90                   	nop

0000000000035622 <std::vector<objl::Material, std::allocator<objl::Material> >::begin() const>:
   35622:	55                   	push   rbp
   35623:	48 89 e5             	mov    rbp,rsp
   35626:	48 83 ec 20          	sub    rsp,0x20
   3562a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3562e:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   35637:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   3563b:	31 c0                	xor    eax,eax
   3563d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35641:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   35645:	48 89 d6             	mov    rsi,rdx
   35648:	48 89 c7             	mov    rdi,rax
   3564b:	e8 0e 1a 00 00       	call   3705e <__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >::__normal_iterator(objl::Material const* const&)>
   35650:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   35654:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   35658:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   35661:	74 05                	je     35668 <std::vector<objl::Material, std::allocator<objl::Material> >::begin() const+0x46>
   35663:	e8 78 ee fc ff       	call   44e0 <__stack_chk_fail@plt>
   35668:	c9                   	leave  
   35669:	c3                   	ret    

000000000003566a <std::vector<objl::Material, std::allocator<objl::Material> >::end() const>:
   3566a:	55                   	push   rbp
   3566b:	48 89 e5             	mov    rbp,rsp
   3566e:	48 83 ec 20          	sub    rsp,0x20
   35672:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   35676:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3567f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   35683:	31 c0                	xor    eax,eax
   35685:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35689:	48 8d 50 08          	lea    rdx,[rax+0x8]
   3568d:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   35691:	48 89 d6             	mov    rsi,rdx
   35694:	48 89 c7             	mov    rdi,rax
   35697:	e8 c2 19 00 00       	call   3705e <__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >::__normal_iterator(objl::Material const* const&)>
   3569c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   356a0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   356a4:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   356ad:	74 05                	je     356b4 <std::vector<objl::Material, std::allocator<objl::Material> >::end() const+0x4a>
   356af:	e8 2c ee fc ff       	call   44e0 <__stack_chk_fail@plt>
   356b4:	c9                   	leave  
   356b5:	c3                   	ret    

00000000000356b6 <bool __gnu_cxx::operator==<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >(__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > > const&, __gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > > const&)>:
   356b6:	55                   	push   rbp
   356b7:	48 89 e5             	mov    rbp,rsp
   356ba:	53                   	push   rbx
   356bb:	48 83 ec 18          	sub    rsp,0x18
   356bf:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   356c3:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   356c7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   356cb:	48 89 c7             	mov    rdi,rax
   356ce:	e8 a9 19 00 00       	call   3707c <__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>
   356d3:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   356d6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   356da:	48 89 c7             	mov    rdi,rax
   356dd:	e8 9a 19 00 00       	call   3707c <__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>
   356e2:	48 8b 00             	mov    rax,QWORD PTR [rax]
   356e5:	48 39 c3             	cmp    rbx,rax
   356e8:	0f 94 c0             	sete   al
   356eb:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   356ef:	c9                   	leave  
   356f0:	c3                   	ret    
   356f1:	90                   	nop

00000000000356f2 <__gnu_cxx::new_allocator<objl::Vertex>::new_allocator()>:
   356f2:	55                   	push   rbp
   356f3:	48 89 e5             	mov    rbp,rsp
   356f6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   356fa:	90                   	nop
   356fb:	5d                   	pop    rbp
   356fc:	c3                   	ret    

00000000000356fd <std::allocator_traits<std::allocator<objl::Vertex> >::deallocate(std::allocator<objl::Vertex>&, objl::Vertex*, unsigned long)>:
   356fd:	55                   	push   rbp
   356fe:	48 89 e5             	mov    rbp,rsp
   35701:	48 83 ec 20          	sub    rsp,0x20
   35705:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35709:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3570d:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   35711:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35715:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   35719:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3571d:	48 89 ce             	mov    rsi,rcx
   35720:	48 89 c7             	mov    rdi,rax
   35723:	e8 62 19 00 00       	call   3708a <__gnu_cxx::new_allocator<objl::Vertex>::deallocate(objl::Vertex*, unsigned long)>
   35728:	90                   	nop
   35729:	c9                   	leave  
   3572a:	c3                   	ret    

000000000003572b <void std::_Destroy<objl::Vertex*>(objl::Vertex*, objl::Vertex*)>:
   3572b:	55                   	push   rbp
   3572c:	48 89 e5             	mov    rbp,rsp
   3572f:	48 83 ec 10          	sub    rsp,0x10
   35733:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35737:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3573b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3573f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35743:	48 89 d6             	mov    rsi,rdx
   35746:	48 89 c7             	mov    rdi,rax
   35749:	e8 6c 19 00 00       	call   370ba <void std::_Destroy_aux<true>::__destroy<objl::Vertex*>(objl::Vertex*, objl::Vertex*)>
   3574e:	90                   	nop
   3574f:	c9                   	leave  
   35750:	c3                   	ret    
   35751:	90                   	nop

0000000000035752 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::__normal_iterator(objl::Vertex const* const&)>:
   35752:	55                   	push   rbp
   35753:	48 89 e5             	mov    rbp,rsp
   35756:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3575a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3575e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   35762:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   35765:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35769:	48 89 10             	mov    QWORD PTR [rax],rdx
   3576c:	90                   	nop
   3576d:	5d                   	pop    rbp
   3576e:	c3                   	ret    
   3576f:	90                   	nop

0000000000035770 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate(unsigned long)>:
   35770:	55                   	push   rbp
   35771:	48 89 e5             	mov    rbp,rsp
   35774:	48 83 ec 10          	sub    rsp,0x10
   35778:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3577c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35780:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   35785:	74 15                	je     3579c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate(unsigned long)+0x2c>
   35787:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3578b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3578f:	48 89 d6             	mov    rsi,rdx
   35792:	48 89 c7             	mov    rdi,rax
   35795:	e8 2f 19 00 00       	call   370c9 <std::allocator_traits<std::allocator<objl::Vertex> >::allocate(std::allocator<objl::Vertex>&, unsigned long)>
   3579a:	eb 05                	jmp    357a1 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate(unsigned long)+0x31>
   3579c:	b8 00 00 00 00       	mov    eax,0x0
   357a1:	c9                   	leave  
   357a2:	c3                   	ret    

00000000000357a3 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__miter_base<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   357a3:	55                   	push   rbp
   357a4:	48 89 e5             	mov    rbp,rsp
   357a7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   357ab:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   357af:	5d                   	pop    rbp
   357b0:	c3                   	ret    

00000000000357b1 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__copy_move_a<false, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   357b1:	55                   	push   rbp
   357b2:	48 89 e5             	mov    rbp,rsp
   357b5:	41 54                	push   r12
   357b7:	53                   	push   rbx
   357b8:	48 83 ec 20          	sub    rsp,0x20
   357bc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   357c0:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   357c4:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   357c8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   357cc:	48 89 c7             	mov    rdi,rax
   357cf:	e8 3c 19 00 00       	call   37110 <objl::Vertex* std::__niter_base<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   357d4:	49 89 c4             	mov    r12,rax
   357d7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   357db:	48 89 c7             	mov    rdi,rax
   357de:	e8 10 19 00 00       	call   370f3 <objl::Vertex const* std::__niter_base<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   357e3:	48 89 c3             	mov    rbx,rax
   357e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   357ea:	48 89 c7             	mov    rdi,rax
   357ed:	e8 01 19 00 00       	call   370f3 <objl::Vertex const* std::__niter_base<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   357f2:	4c 89 e2             	mov    rdx,r12
   357f5:	48 89 de             	mov    rsi,rbx
   357f8:	48 89 c7             	mov    rdi,rax
   357fb:	e8 2d 19 00 00       	call   3712d <objl::Vertex* std::__copy_move_a1<false, objl::Vertex const*, objl::Vertex*>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>
   35800:	48 89 c2             	mov    rdx,rax
   35803:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35807:	48 89 d6             	mov    rsi,rdx
   3580a:	48 89 c7             	mov    rdi,rax
   3580d:	e8 48 19 00 00       	call   3715a <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)>
   35812:	48 83 c4 20          	add    rsp,0x20
   35816:	5b                   	pop    rbx
   35817:	41 5c                	pop    r12
   35819:	5d                   	pop    rbp
   3581a:	c3                   	ret    

000000000003581b <void std::_Destroy<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   3581b:	55                   	push   rbp
   3581c:	48 89 e5             	mov    rbp,rsp
   3581f:	48 83 ec 10          	sub    rsp,0x10
   35823:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35827:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3582b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3582f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35833:	48 89 d6             	mov    rsi,rdx
   35836:	48 89 c7             	mov    rdi,rax
   35839:	e8 5a 19 00 00       	call   37198 <void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   3583e:	90                   	nop
   3583f:	c9                   	leave  
   35840:	c3                   	ret    

0000000000035841 <objl::Vertex* std::__miter_base<objl::Vertex*>(objl::Vertex*)>:
   35841:	55                   	push   rbp
   35842:	48 89 e5             	mov    rbp,rsp
   35845:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35849:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3584d:	5d                   	pop    rbp
   3584e:	c3                   	ret    

000000000003584f <objl::Vertex* std::__copy_move_a<false, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   3584f:	55                   	push   rbp
   35850:	48 89 e5             	mov    rbp,rsp
   35853:	41 54                	push   r12
   35855:	53                   	push   rbx
   35856:	48 83 ec 20          	sub    rsp,0x20
   3585a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3585e:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   35862:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   35866:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3586a:	48 89 c7             	mov    rdi,rax
   3586d:	e8 35 19 00 00       	call   371a7 <objl::Vertex* std::__niter_base<objl::Vertex*>(objl::Vertex*)>
   35872:	49 89 c4             	mov    r12,rax
   35875:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   35879:	48 89 c7             	mov    rdi,rax
   3587c:	e8 26 19 00 00       	call   371a7 <objl::Vertex* std::__niter_base<objl::Vertex*>(objl::Vertex*)>
   35881:	48 89 c3             	mov    rbx,rax
   35884:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35888:	48 89 c7             	mov    rdi,rax
   3588b:	e8 17 19 00 00       	call   371a7 <objl::Vertex* std::__niter_base<objl::Vertex*>(objl::Vertex*)>
   35890:	4c 89 e2             	mov    rdx,r12
   35893:	48 89 de             	mov    rsi,rbx
   35896:	48 89 c7             	mov    rdi,rax
   35899:	e8 17 19 00 00       	call   371b5 <objl::Vertex* std::__copy_move_a1<false, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   3589e:	48 89 c2             	mov    rdx,rax
   358a1:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   358a5:	48 89 d6             	mov    rsi,rdx
   358a8:	48 89 c7             	mov    rdi,rax
   358ab:	e8 32 19 00 00       	call   371e2 <objl::Vertex* std::__niter_wrap<objl::Vertex*>(objl::Vertex* const&, objl::Vertex*)>
   358b0:	48 83 c4 20          	add    rsp,0x20
   358b4:	5b                   	pop    rbx
   358b5:	41 5c                	pop    r12
   358b7:	5d                   	pop    rbp
   358b8:	c3                   	ret    

00000000000358b9 <objl::Vertex* std::uninitialized_copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   358b9:	55                   	push   rbp
   358ba:	48 89 e5             	mov    rbp,rsp
   358bd:	48 83 ec 30          	sub    rsp,0x30
   358c1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   358c5:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   358c9:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   358cd:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
   358d1:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   358d5:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   358d9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   358dd:	48 89 ce             	mov    rsi,rcx
   358e0:	48 89 c7             	mov    rdi,rax
   358e3:	e8 0c 19 00 00       	call   371f4 <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   358e8:	c9                   	leave  
   358e9:	c3                   	ret    

00000000000358ea <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int const* const&)>:
   358ea:	55                   	push   rbp
   358eb:	48 89 e5             	mov    rbp,rsp
   358ee:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   358f2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   358f6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   358fa:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   358fd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35901:	48 89 10             	mov    QWORD PTR [rax],rdx
   35904:	90                   	nop
   35905:	5d                   	pop    rbp
   35906:	c3                   	ret    

0000000000035907 <unsigned int* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*, std::allocator<unsigned int>&)>:
   35907:	55                   	push   rbp
   35908:	48 89 e5             	mov    rbp,rsp
   3590b:	48 83 ec 20          	sub    rsp,0x20
   3590f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35913:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35917:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3591b:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   3591f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35923:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   35927:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3592b:	48 89 ce             	mov    rsi,rcx
   3592e:	48 89 c7             	mov    rdi,rax
   35931:	e8 14 19 00 00       	call   3724a <unsigned int* std::uninitialized_copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>
   35936:	c9                   	leave  
   35937:	c3                   	ret    

0000000000035938 <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__miter_base<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   35938:	55                   	push   rbp
   35939:	48 89 e5             	mov    rbp,rsp
   3593c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35940:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35944:	5d                   	pop    rbp
   35945:	c3                   	ret    

0000000000035946 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__copy_move_a<false, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   35946:	55                   	push   rbp
   35947:	48 89 e5             	mov    rbp,rsp
   3594a:	41 54                	push   r12
   3594c:	53                   	push   rbx
   3594d:	48 83 ec 20          	sub    rsp,0x20
   35951:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   35955:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   35959:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   3595d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35961:	48 89 c7             	mov    rdi,rax
   35964:	e8 2f 19 00 00       	call   37298 <unsigned int* std::__niter_base<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   35969:	49 89 c4             	mov    r12,rax
   3596c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   35970:	48 89 c7             	mov    rdi,rax
   35973:	e8 03 19 00 00       	call   3727b <unsigned int const* std::__niter_base<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   35978:	48 89 c3             	mov    rbx,rax
   3597b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3597f:	48 89 c7             	mov    rdi,rax
   35982:	e8 f4 18 00 00       	call   3727b <unsigned int const* std::__niter_base<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   35987:	4c 89 e2             	mov    rdx,r12
   3598a:	48 89 de             	mov    rsi,rbx
   3598d:	48 89 c7             	mov    rdi,rax
   35990:	e8 20 19 00 00       	call   372b5 <unsigned int* std::__copy_move_a1<false, unsigned int const*, unsigned int*>(unsigned int const*, unsigned int const*, unsigned int*)>
   35995:	48 89 c2             	mov    rdx,rax
   35998:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3599c:	48 89 d6             	mov    rsi,rdx
   3599f:	48 89 c7             	mov    rdi,rax
   359a2:	e8 3b 19 00 00       	call   372e2 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>
   359a7:	48 83 c4 20          	add    rsp,0x20
   359ab:	5b                   	pop    rbx
   359ac:	41 5c                	pop    r12
   359ae:	5d                   	pop    rbp
   359af:	c3                   	ret    

00000000000359b0 <void std::_Destroy<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   359b0:	55                   	push   rbp
   359b1:	48 89 e5             	mov    rbp,rsp
   359b4:	48 83 ec 10          	sub    rsp,0x10
   359b8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   359bc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   359c0:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   359c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   359c8:	48 89 d6             	mov    rsi,rdx
   359cb:	48 89 c7             	mov    rdi,rax
   359ce:	e8 4d 19 00 00       	call   37320 <void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   359d3:	90                   	nop
   359d4:	c9                   	leave  
   359d5:	c3                   	ret    

00000000000359d6 <unsigned int* std::__miter_base<unsigned int*>(unsigned int*)>:
   359d6:	55                   	push   rbp
   359d7:	48 89 e5             	mov    rbp,rsp
   359da:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   359de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   359e2:	5d                   	pop    rbp
   359e3:	c3                   	ret    

00000000000359e4 <unsigned int* std::__copy_move_a<false, unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>:
   359e4:	55                   	push   rbp
   359e5:	48 89 e5             	mov    rbp,rsp
   359e8:	41 54                	push   r12
   359ea:	53                   	push   rbx
   359eb:	48 83 ec 20          	sub    rsp,0x20
   359ef:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   359f3:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   359f7:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   359fb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   359ff:	48 89 c7             	mov    rdi,rax
   35a02:	e8 3f 61 ff ff       	call   2bb46 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>
   35a07:	49 89 c4             	mov    r12,rax
   35a0a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   35a0e:	48 89 c7             	mov    rdi,rax
   35a11:	e8 30 61 ff ff       	call   2bb46 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>
   35a16:	48 89 c3             	mov    rbx,rax
   35a19:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35a1d:	48 89 c7             	mov    rdi,rax
   35a20:	e8 21 61 ff ff       	call   2bb46 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>
   35a25:	4c 89 e2             	mov    rdx,r12
   35a28:	48 89 de             	mov    rsi,rbx
   35a2b:	48 89 c7             	mov    rdi,rax
   35a2e:	e8 fc 18 00 00       	call   3732f <unsigned int* std::__copy_move_a1<false, unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>
   35a33:	48 89 c2             	mov    rdx,rax
   35a36:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   35a3a:	48 89 d6             	mov    rsi,rdx
   35a3d:	48 89 c7             	mov    rdi,rax
   35a40:	e8 17 19 00 00       	call   3735c <unsigned int* std::__niter_wrap<unsigned int*>(unsigned int* const&, unsigned int*)>
   35a45:	48 83 c4 20          	add    rsp,0x20
   35a49:	5b                   	pop    rbx
   35a4a:	41 5c                	pop    r12
   35a4c:	5d                   	pop    rbp
   35a4d:	c3                   	ret    

0000000000035a4e <unsigned int* std::uninitialized_copy<unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>:
   35a4e:	55                   	push   rbp
   35a4f:	48 89 e5             	mov    rbp,rsp
   35a52:	48 83 ec 30          	sub    rsp,0x30
   35a56:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   35a5a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   35a5e:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   35a62:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
   35a66:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   35a6a:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   35a6e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35a72:	48 89 ce             	mov    rsi,rcx
   35a75:	48 89 c7             	mov    rdi,rax
   35a78:	e8 f1 18 00 00       	call   3736e <unsigned int* std::__uninitialized_copy<true>::__uninit_copy<unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>
   35a7d:	c9                   	leave  
   35a7e:	c3                   	ret    
   35a7f:	90                   	nop

0000000000035a80 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
   35a80:	55                   	push   rbp
   35a81:	48 89 e5             	mov    rbp,rsp
   35a84:	53                   	push   rbx
   35a85:	48 83 ec 68          	sub    rsp,0x68
   35a89:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
   35a8d:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
   35a91:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
   35a95:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   35a9e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   35aa2:	31 c0                	xor    eax,eax
   35aa4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35aa8:	48 8d 15 af 70 00 00 	lea    rdx,[rip+0x70af]        # 3cb5e <NANO_SEC+0x1896>
   35aaf:	be 01 00 00 00       	mov    esi,0x1
   35ab4:	48 89 c7             	mov    rdi,rax
   35ab7:	e8 00 41 ff ff       	call   29bbc <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_check_len(unsigned long, char const*) const>
   35abc:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
   35ac0:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35ac4:	48 8b 00             	mov    rax,QWORD PTR [rax]
   35ac7:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
   35acb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35acf:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
   35ad3:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
   35ad7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35adb:	48 89 c7             	mov    rdi,rax
   35ade:	e8 c5 41 ff ff       	call   29ca8 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::begin()>
   35ae3:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
   35ae7:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
   35aeb:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   35aef:	48 89 d6             	mov    rsi,rdx
   35af2:	48 89 c7             	mov    rdi,rax
   35af5:	e8 f6 41 ff ff       	call   29cf0 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::difference_type __gnu_cxx::operator-<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)>
   35afa:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
   35afe:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35b02:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
   35b06:	48 89 d6             	mov    rsi,rdx
   35b09:	48 89 c7             	mov    rdi,rax
   35b0c:	e8 1f 42 ff ff       	call   29d30 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)>
   35b11:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   35b15:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35b19:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   35b1d:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
   35b21:	48 89 c7             	mov    rdi,rax
   35b24:	e8 e6 64 ff ff       	call   2c00f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type&)>
   35b29:	48 89 c2             	mov    rdx,rax
   35b2c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   35b30:	48 c1 e0 05          	shl    rax,0x5
   35b34:	48 89 c1             	mov    rcx,rax
   35b37:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35b3b:	48 01 c1             	add    rcx,rax
   35b3e:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35b42:	48 89 ce             	mov    rsi,rcx
   35b45:	48 89 c7             	mov    rdi,rax
   35b48:	e8 89 64 ff ff       	call   2bfd6 <void std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
   35b4d:	48 c7 45 e0 00 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
   35b55:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35b59:	48 89 c7             	mov    rdi,rax
   35b5c:	e8 43 20 ff ff       	call   27ba4 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
   35b61:	48 89 c3             	mov    rbx,rax
   35b64:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   35b68:	48 89 c7             	mov    rdi,rax
   35b6b:	e8 26 42 ff ff       	call   29d96 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::base() const>
   35b70:	48 8b 30             	mov    rsi,QWORD PTR [rax]
   35b73:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   35b77:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   35b7b:	48 89 d9             	mov    rcx,rbx
   35b7e:	48 89 c7             	mov    rdi,rax
   35b81:	e8 dd 41 ff ff       	call   29d63 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_relocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   35b86:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   35b8a:	48 83 45 e0 20       	add    QWORD PTR [rbp-0x20],0x20
   35b8f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35b93:	48 89 c7             	mov    rdi,rax
   35b96:	e8 09 20 ff ff       	call   27ba4 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
   35b9b:	48 89 c3             	mov    rbx,rax
   35b9e:	48 8d 45 a0          	lea    rax,[rbp-0x60]
   35ba2:	48 89 c7             	mov    rdi,rax
   35ba5:	e8 ec 41 ff ff       	call   29d96 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::base() const>
   35baa:	48 8b 00             	mov    rax,QWORD PTR [rax]
   35bad:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   35bb1:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
   35bb5:	48 89 d9             	mov    rcx,rbx
   35bb8:	48 89 c7             	mov    rdi,rax
   35bbb:	e8 a3 41 ff ff       	call   29d63 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_S_relocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
   35bc0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   35bc4:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35bc8:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
   35bcc:	48 8b 52 10          	mov    rdx,QWORD PTR [rdx+0x10]
   35bd0:	48 2b 55 c0          	sub    rdx,QWORD PTR [rbp-0x40]
   35bd4:	48 c1 fa 05          	sar    rdx,0x5
   35bd8:	48 8b 4d c0          	mov    rcx,QWORD PTR [rbp-0x40]
   35bdc:	48 89 ce             	mov    rsi,rcx
   35bdf:	48 89 c7             	mov    rdi,rax
   35be2:	e8 87 1f ff ff       	call   27b6e <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
   35be7:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35beb:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   35bef:	48 89 10             	mov    QWORD PTR [rax],rdx
   35bf2:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35bf6:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   35bfa:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   35bfe:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   35c02:	48 c1 e0 05          	shl    rax,0x5
   35c06:	48 89 c2             	mov    rdx,rax
   35c09:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35c0d:	48 01 c2             	add    rdx,rax
   35c10:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
   35c14:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   35c18:	90                   	nop
   35c19:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   35c1d:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   35c26:	74 05                	je     35c2d <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1ad>
   35c28:	e8 b3 e8 fc ff       	call   44e0 <__stack_chk_fail@plt>
   35c2d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   35c31:	c9                   	leave  
   35c32:	c3                   	ret    
   35c33:	90                   	nop

0000000000035c34 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::back()>:
   35c34:	55                   	push   rbp
   35c35:	48 89 e5             	mov    rbp,rsp
   35c38:	48 83 ec 30          	sub    rsp,0x30
   35c3c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   35c40:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   35c49:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   35c4d:	31 c0                	xor    eax,eax
   35c4f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35c53:	48 89 c7             	mov    rdi,rax
   35c56:	e8 cf 24 ff ff       	call   2812a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::end()>
   35c5b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   35c5f:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   35c63:	be 01 00 00 00       	mov    esi,0x1
   35c68:	48 89 c7             	mov    rdi,rax
   35c6b:	e8 2c 17 00 00       	call   3739c <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::operator-(long) const>
   35c70:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   35c74:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   35c78:	48 89 c7             	mov    rdi,rax
   35c7b:	e8 82 17 00 00       	call   37402 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::operator*() const>
   35c80:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   35c84:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   35c8d:	74 05                	je     35c94 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::back()+0x60>
   35c8f:	e8 4c e8 fc ff       	call   44e0 <__stack_chk_fail@plt>
   35c94:	c9                   	leave  
   35c95:	c3                   	ret    

0000000000035c96 <__gnu_cxx::new_allocator<objl::Mesh>::new_allocator()>:
   35c96:	55                   	push   rbp
   35c97:	48 89 e5             	mov    rbp,rsp
   35c9a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35c9e:	90                   	nop
   35c9f:	5d                   	pop    rbp
   35ca0:	c3                   	ret    

0000000000035ca1 <std::allocator_traits<std::allocator<objl::Mesh> >::deallocate(std::allocator<objl::Mesh>&, objl::Mesh*, unsigned long)>:
   35ca1:	55                   	push   rbp
   35ca2:	48 89 e5             	mov    rbp,rsp
   35ca5:	48 83 ec 20          	sub    rsp,0x20
   35ca9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35cad:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35cb1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   35cb5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35cb9:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   35cbd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35cc1:	48 89 ce             	mov    rsi,rcx
   35cc4:	48 89 c7             	mov    rdi,rax
   35cc7:	e8 48 17 00 00       	call   37414 <__gnu_cxx::new_allocator<objl::Mesh>::deallocate(objl::Mesh*, unsigned long)>
   35ccc:	90                   	nop
   35ccd:	c9                   	leave  
   35cce:	c3                   	ret    

0000000000035ccf <void std::_Destroy<objl::Mesh*>(objl::Mesh*, objl::Mesh*)>:
   35ccf:	55                   	push   rbp
   35cd0:	48 89 e5             	mov    rbp,rsp
   35cd3:	48 83 ec 10          	sub    rsp,0x10
   35cd7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35cdb:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35cdf:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35ce3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35ce7:	48 89 d6             	mov    rsi,rdx
   35cea:	48 89 c7             	mov    rdi,rax
   35ced:	e8 52 17 00 00       	call   37444 <void std::_Destroy_aux<false>::__destroy<objl::Mesh*>(objl::Mesh*, objl::Mesh*)>
   35cf2:	90                   	nop
   35cf3:	c9                   	leave  
   35cf4:	c3                   	ret    
   35cf5:	90                   	nop

0000000000035cf6 <__gnu_cxx::new_allocator<objl::Material>::new_allocator()>:
   35cf6:	55                   	push   rbp
   35cf7:	48 89 e5             	mov    rbp,rsp
   35cfa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35cfe:	90                   	nop
   35cff:	5d                   	pop    rbp
   35d00:	c3                   	ret    

0000000000035d01 <std::allocator_traits<std::allocator<objl::Material> >::deallocate(std::allocator<objl::Material>&, objl::Material*, unsigned long)>:
   35d01:	55                   	push   rbp
   35d02:	48 89 e5             	mov    rbp,rsp
   35d05:	48 83 ec 20          	sub    rsp,0x20
   35d09:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35d0d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35d11:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   35d15:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35d19:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   35d1d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35d21:	48 89 ce             	mov    rsi,rcx
   35d24:	48 89 c7             	mov    rdi,rax
   35d27:	e8 54 17 00 00       	call   37480 <__gnu_cxx::new_allocator<objl::Material>::deallocate(objl::Material*, unsigned long)>
   35d2c:	90                   	nop
   35d2d:	c9                   	leave  
   35d2e:	c3                   	ret    

0000000000035d2f <void std::_Destroy<objl::Material*>(objl::Material*, objl::Material*)>:
   35d2f:	55                   	push   rbp
   35d30:	48 89 e5             	mov    rbp,rsp
   35d33:	48 83 ec 10          	sub    rsp,0x10
   35d37:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35d3b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35d3f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35d43:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35d47:	48 89 d6             	mov    rsi,rdx
   35d4a:	48 89 c7             	mov    rdi,rax
   35d4d:	e8 5e 17 00 00       	call   374b0 <void std::_Destroy_aux<false>::__destroy<objl::Material*>(objl::Material*, objl::Material*)>
   35d52:	90                   	nop
   35d53:	c9                   	leave  
   35d54:	c3                   	ret    
   35d55:	90                   	nop

0000000000035d56 <__gnu_cxx::new_allocator<objl::Vector3>::new_allocator()>:
   35d56:	55                   	push   rbp
   35d57:	48 89 e5             	mov    rbp,rsp
   35d5a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35d5e:	90                   	nop
   35d5f:	5d                   	pop    rbp
   35d60:	c3                   	ret    

0000000000035d61 <std::allocator_traits<std::allocator<objl::Vector3> >::deallocate(std::allocator<objl::Vector3>&, objl::Vector3*, unsigned long)>:
   35d61:	55                   	push   rbp
   35d62:	48 89 e5             	mov    rbp,rsp
   35d65:	48 83 ec 20          	sub    rsp,0x20
   35d69:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35d6d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35d71:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   35d75:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35d79:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   35d7d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35d81:	48 89 ce             	mov    rsi,rcx
   35d84:	48 89 c7             	mov    rdi,rax
   35d87:	e8 60 17 00 00       	call   374ec <__gnu_cxx::new_allocator<objl::Vector3>::deallocate(objl::Vector3*, unsigned long)>
   35d8c:	90                   	nop
   35d8d:	c9                   	leave  
   35d8e:	c3                   	ret    

0000000000035d8f <void std::_Destroy<objl::Vector3*>(objl::Vector3*, objl::Vector3*)>:
   35d8f:	55                   	push   rbp
   35d90:	48 89 e5             	mov    rbp,rsp
   35d93:	48 83 ec 10          	sub    rsp,0x10
   35d97:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35d9b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35d9f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35da3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35da7:	48 89 d6             	mov    rsi,rdx
   35daa:	48 89 c7             	mov    rdi,rax
   35dad:	e8 73 17 00 00       	call   37525 <void std::_Destroy_aux<true>::__destroy<objl::Vector3*>(objl::Vector3*, objl::Vector3*)>
   35db2:	90                   	nop
   35db3:	c9                   	leave  
   35db4:	c3                   	ret    
   35db5:	90                   	nop

0000000000035db6 <__gnu_cxx::new_allocator<objl::Vector2>::new_allocator()>:
   35db6:	55                   	push   rbp
   35db7:	48 89 e5             	mov    rbp,rsp
   35dba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35dbe:	90                   	nop
   35dbf:	5d                   	pop    rbp
   35dc0:	c3                   	ret    

0000000000035dc1 <std::allocator_traits<std::allocator<objl::Vector2> >::deallocate(std::allocator<objl::Vector2>&, objl::Vector2*, unsigned long)>:
   35dc1:	55                   	push   rbp
   35dc2:	48 89 e5             	mov    rbp,rsp
   35dc5:	48 83 ec 20          	sub    rsp,0x20
   35dc9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35dcd:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35dd1:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   35dd5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   35dd9:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   35ddd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35de1:	48 89 ce             	mov    rsi,rcx
   35de4:	48 89 c7             	mov    rdi,rax
   35de7:	e8 48 17 00 00       	call   37534 <__gnu_cxx::new_allocator<objl::Vector2>::deallocate(objl::Vector2*, unsigned long)>
   35dec:	90                   	nop
   35ded:	c9                   	leave  
   35dee:	c3                   	ret    

0000000000035def <void std::_Destroy<objl::Vector2*>(objl::Vector2*, objl::Vector2*)>:
   35def:	55                   	push   rbp
   35df0:	48 89 e5             	mov    rbp,rsp
   35df3:	48 83 ec 10          	sub    rsp,0x10
   35df7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35dfb:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35dff:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35e03:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35e07:	48 89 d6             	mov    rsi,rdx
   35e0a:	48 89 c7             	mov    rdi,rax
   35e0d:	e8 53 17 00 00       	call   37565 <void std::_Destroy_aux<true>::__destroy<objl::Vector2*>(objl::Vector2*, objl::Vector2*)>
   35e12:	90                   	nop
   35e13:	c9                   	leave  
   35e14:	c3                   	ret    
   35e15:	90                   	nop

0000000000035e16 <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>:
   35e16:	55                   	push   rbp
   35e17:	48 89 e5             	mov    rbp,rsp
   35e1a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35e1e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35e22:	5d                   	pop    rbp
   35e23:	c3                   	ret    

0000000000035e24 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>:
   35e24:	55                   	push   rbp
   35e25:	48 89 e5             	mov    rbp,rsp
   35e28:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35e2c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35e30:	5d                   	pop    rbp
   35e31:	c3                   	ret    

0000000000035e32 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::get_allocator() const>:
   35e32:	55                   	push   rbp
   35e33:	48 89 e5             	mov    rbp,rsp
   35e36:	48 83 ec 10          	sub    rsp,0x10
   35e3a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35e3e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35e42:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   35e46:	48 89 c7             	mov    rdi,rax
   35e49:	e8 62 db ff ff       	call   339b0 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator() const>
   35e4e:	48 89 c2             	mov    rdx,rax
   35e51:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35e55:	48 89 d6             	mov    rsi,rdx
   35e58:	48 89 c7             	mov    rdi,rax
   35e5b:	e8 14 17 00 00       	call   37574 <std::allocator<objl::Vertex>::allocator(std::allocator<objl::Vertex> const&)>
   35e60:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35e64:	c9                   	leave  
   35e65:	c3                   	ret    

0000000000035e66 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::allocator<objl::Vertex> const&)>:
   35e66:	55                   	push   rbp
   35e67:	48 89 e5             	mov    rbp,rsp
   35e6a:	48 83 ec 10          	sub    rsp,0x10
   35e6e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35e72:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35e76:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35e7a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35e7e:	48 89 d6             	mov    rsi,rdx
   35e81:	48 89 c7             	mov    rdi,rax
   35e84:	e8 11 17 00 00       	call   3759a <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base(std::allocator<objl::Vertex> const&)>
   35e89:	90                   	nop
   35e8a:	c9                   	leave  
   35e8b:	c3                   	ret    

0000000000035e8c <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data&)>:
   35e8c:	55                   	push   rbp
   35e8d:	48 89 e5             	mov    rbp,rsp
   35e90:	48 83 ec 30          	sub    rsp,0x30
   35e94:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   35e98:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   35e9c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   35ea5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   35ea9:	31 c0                	xor    eax,eax
   35eab:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   35eaf:	48 89 c7             	mov    rdi,rax
   35eb2:	e8 51 da ff ff       	call   33908 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_Vector_impl_data()>
   35eb7:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   35ebb:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   35ebf:	48 89 d6             	mov    rsi,rdx
   35ec2:	48 89 c7             	mov    rdi,rax
   35ec5:	e8 f6 16 00 00       	call   375c0 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data const&)>
   35eca:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   35ece:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35ed2:	48 89 d6             	mov    rsi,rdx
   35ed5:	48 89 c7             	mov    rdi,rax
   35ed8:	e8 e3 16 00 00       	call   375c0 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data const&)>
   35edd:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   35ee1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   35ee5:	48 89 d6             	mov    rsi,rdx
   35ee8:	48 89 c7             	mov    rdi,rax
   35eeb:	e8 d0 16 00 00       	call   375c0 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data const&)>
   35ef0:	90                   	nop
   35ef1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35ef5:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   35efe:	74 05                	je     35f05 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data&)+0x79>
   35f00:	e8 db e5 fc ff       	call   44e0 <__stack_chk_fail@plt>
   35f05:	c9                   	leave  
   35f06:	c3                   	ret    

0000000000035f07 <void std::__alloc_on_move<std::allocator<objl::Vertex> >(std::allocator<objl::Vertex>&, std::allocator<objl::Vertex>&)>:
   35f07:	55                   	push   rbp
   35f08:	48 89 e5             	mov    rbp,rsp
   35f0b:	48 83 ec 10          	sub    rsp,0x10
   35f0f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35f13:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35f17:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   35f1b:	48 89 c7             	mov    rdi,rax
   35f1e:	e8 da 16 00 00       	call   375fd <std::remove_reference<std::allocator<objl::Vertex>&>::type&& std::move<std::allocator<objl::Vertex>&>(std::allocator<objl::Vertex>&)>
   35f23:	90                   	nop
   35f24:	c9                   	leave  
   35f25:	c3                   	ret    

0000000000035f26 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::get_allocator() const>:
   35f26:	55                   	push   rbp
   35f27:	48 89 e5             	mov    rbp,rsp
   35f2a:	48 83 ec 10          	sub    rsp,0x10
   35f2e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35f32:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35f36:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   35f3a:	48 89 c7             	mov    rdi,rax
   35f3d:	e8 6e 54 ff ff       	call   2b3b0 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator() const>
   35f42:	48 89 c2             	mov    rdx,rax
   35f45:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35f49:	48 89 d6             	mov    rsi,rdx
   35f4c:	48 89 c7             	mov    rdi,rax
   35f4f:	e8 b8 16 00 00       	call   3760c <std::allocator<unsigned int>::allocator(std::allocator<unsigned int> const&)>
   35f54:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35f58:	c9                   	leave  
   35f59:	c3                   	ret    

0000000000035f5a <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::allocator<unsigned int> const&)>:
   35f5a:	55                   	push   rbp
   35f5b:	48 89 e5             	mov    rbp,rsp
   35f5e:	48 83 ec 10          	sub    rsp,0x10
   35f62:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   35f66:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   35f6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35f6e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   35f72:	48 89 d6             	mov    rsi,rdx
   35f75:	48 89 c7             	mov    rdi,rax
   35f78:	e8 b5 16 00 00       	call   37632 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base(std::allocator<unsigned int> const&)>
   35f7d:	90                   	nop
   35f7e:	c9                   	leave  
   35f7f:	c3                   	ret    

0000000000035f80 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data&)>:
   35f80:	55                   	push   rbp
   35f81:	48 89 e5             	mov    rbp,rsp
   35f84:	48 83 ec 30          	sub    rsp,0x30
   35f88:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   35f8c:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   35f90:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   35f99:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   35f9d:	31 c0                	xor    eax,eax
   35f9f:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   35fa3:	48 89 c7             	mov    rdi,rax
   35fa6:	e8 17 28 ff ff       	call   287c2 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_Vector_impl_data()>
   35fab:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   35faf:	48 8d 45 e0          	lea    rax,[rbp-0x20]
   35fb3:	48 89 d6             	mov    rsi,rdx
   35fb6:	48 89 c7             	mov    rdi,rax
   35fb9:	e8 9a 16 00 00       	call   37658 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data const&)>
   35fbe:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
   35fc2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   35fc6:	48 89 d6             	mov    rsi,rdx
   35fc9:	48 89 c7             	mov    rdi,rax
   35fcc:	e8 87 16 00 00       	call   37658 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data const&)>
   35fd1:	48 8d 55 e0          	lea    rdx,[rbp-0x20]
   35fd5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   35fd9:	48 89 d6             	mov    rsi,rdx
   35fdc:	48 89 c7             	mov    rdi,rax
   35fdf:	e8 74 16 00 00       	call   37658 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data const&)>
   35fe4:	90                   	nop
   35fe5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   35fe9:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   35ff2:	74 05                	je     35ff9 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data&)+0x79>
   35ff4:	e8 e7 e4 fc ff       	call   44e0 <__stack_chk_fail@plt>
   35ff9:	c9                   	leave  
   35ffa:	c3                   	ret    

0000000000035ffb <void std::__alloc_on_move<std::allocator<unsigned int> >(std::allocator<unsigned int>&, std::allocator<unsigned int>&)>:
   35ffb:	55                   	push   rbp
   35ffc:	48 89 e5             	mov    rbp,rsp
   35fff:	48 83 ec 10          	sub    rsp,0x10
   36003:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36007:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3600b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3600f:	48 89 c7             	mov    rdi,rax
   36012:	e8 7e 16 00 00       	call   37695 <std::remove_reference<std::allocator<unsigned int>&>::type&& std::move<std::allocator<unsigned int>&>(std::allocator<unsigned int>&)>
   36017:	90                   	nop
   36018:	c9                   	leave  
   36019:	c3                   	ret    

000000000003601a <objl::Mesh const& std::forward<objl::Mesh const&>(std::remove_reference<objl::Mesh const&>::type&)>:
   3601a:	55                   	push   rbp
   3601b:	48 89 e5             	mov    rbp,rsp
   3601e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36022:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36026:	5d                   	pop    rbp
   36027:	c3                   	ret    

0000000000036028 <objl::Material::Material(objl::Material const&)>:
   36028:	55                   	push   rbp
   36029:	48 89 e5             	mov    rbp,rsp
   3602c:	53                   	push   rbx
   3602d:	48 83 ec 18          	sub    rsp,0x18
   36031:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36035:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36039:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3603d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   36041:	48 89 d6             	mov    rsi,rdx
   36044:	48 89 c7             	mov    rdi,rax
   36047:	e8 24 e1 fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   3604c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36050:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   36054:	48 8b 4a 20          	mov    rcx,QWORD PTR [rdx+0x20]
   36058:	48 89 48 20          	mov    QWORD PTR [rax+0x20],rcx
   3605c:	8b 52 28             	mov    edx,DWORD PTR [rdx+0x28]
   3605f:	89 50 28             	mov    DWORD PTR [rax+0x28],edx
   36062:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36066:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   3606a:	48 8b 4a 2c          	mov    rcx,QWORD PTR [rdx+0x2c]
   3606e:	48 89 48 2c          	mov    QWORD PTR [rax+0x2c],rcx
   36072:	8b 52 34             	mov    edx,DWORD PTR [rdx+0x34]
   36075:	89 50 34             	mov    DWORD PTR [rax+0x34],edx
   36078:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3607c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   36080:	48 8b 4a 38          	mov    rcx,QWORD PTR [rdx+0x38]
   36084:	48 89 48 38          	mov    QWORD PTR [rax+0x38],rcx
   36088:	8b 52 40             	mov    edx,DWORD PTR [rdx+0x40]
   3608b:	89 50 40             	mov    DWORD PTR [rax+0x40],edx
   3608e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36092:	f3 0f 10 40 44       	movss  xmm0,DWORD PTR [rax+0x44]
   36097:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3609b:	f3 0f 11 40 44       	movss  DWORD PTR [rax+0x44],xmm0
   360a0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   360a4:	f3 0f 10 40 48       	movss  xmm0,DWORD PTR [rax+0x48]
   360a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   360ad:	f3 0f 11 40 48       	movss  DWORD PTR [rax+0x48],xmm0
   360b2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   360b6:	f3 0f 10 40 4c       	movss  xmm0,DWORD PTR [rax+0x4c]
   360bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   360bf:	f3 0f 11 40 4c       	movss  DWORD PTR [rax+0x4c],xmm0
   360c4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   360c8:	8b 50 50             	mov    edx,DWORD PTR [rax+0x50]
   360cb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   360cf:	89 50 50             	mov    DWORD PTR [rax+0x50],edx
   360d2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   360d6:	48 83 c0 58          	add    rax,0x58
   360da:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   360de:	48 83 c2 58          	add    rdx,0x58
   360e2:	48 89 d6             	mov    rsi,rdx
   360e5:	48 89 c7             	mov    rdi,rax
   360e8:	e8 83 e0 fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   360ed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   360f1:	48 83 c0 78          	add    rax,0x78
   360f5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   360f9:	48 83 c2 78          	add    rdx,0x78
   360fd:	48 89 d6             	mov    rsi,rdx
   36100:	48 89 c7             	mov    rdi,rax
   36103:	e8 68 e0 fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   36108:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3610c:	48 05 98 00 00 00    	add    rax,0x98
   36112:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   36116:	48 81 c2 98 00 00 00 	add    rdx,0x98
   3611d:	48 89 d6             	mov    rsi,rdx
   36120:	48 89 c7             	mov    rdi,rax
   36123:	e8 48 e0 fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   36128:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3612c:	48 05 b8 00 00 00    	add    rax,0xb8
   36132:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   36136:	48 81 c2 b8 00 00 00 	add    rdx,0xb8
   3613d:	48 89 d6             	mov    rsi,rdx
   36140:	48 89 c7             	mov    rdi,rax
   36143:	e8 28 e0 fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   36148:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3614c:	48 05 d8 00 00 00    	add    rax,0xd8
   36152:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   36156:	48 81 c2 d8 00 00 00 	add    rdx,0xd8
   3615d:	48 89 d6             	mov    rsi,rdx
   36160:	48 89 c7             	mov    rdi,rax
   36163:	e8 08 e0 fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   36168:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3616c:	48 05 f8 00 00 00    	add    rax,0xf8
   36172:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   36176:	48 81 c2 f8 00 00 00 	add    rdx,0xf8
   3617d:	48 89 d6             	mov    rsi,rdx
   36180:	48 89 c7             	mov    rdi,rax
   36183:	e8 e8 df fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   36188:	e9 89 00 00 00       	jmp    36216 <objl::Material::Material(objl::Material const&)+0x1ee>
   3618d:	48 89 c3             	mov    rbx,rax
   36190:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36194:	48 05 d8 00 00 00    	add    rax,0xd8
   3619a:	48 89 c7             	mov    rdi,rax
   3619d:	e8 be e0 fc ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   361a2:	eb 03                	jmp    361a7 <objl::Material::Material(objl::Material const&)+0x17f>
   361a4:	48 89 c3             	mov    rbx,rax
   361a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   361ab:	48 05 b8 00 00 00    	add    rax,0xb8
   361b1:	48 89 c7             	mov    rdi,rax
   361b4:	e8 a7 e0 fc ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   361b9:	eb 03                	jmp    361be <objl::Material::Material(objl::Material const&)+0x196>
   361bb:	48 89 c3             	mov    rbx,rax
   361be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   361c2:	48 05 98 00 00 00    	add    rax,0x98
   361c8:	48 89 c7             	mov    rdi,rax
   361cb:	e8 90 e0 fc ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   361d0:	eb 03                	jmp    361d5 <objl::Material::Material(objl::Material const&)+0x1ad>
   361d2:	48 89 c3             	mov    rbx,rax
   361d5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   361d9:	48 83 c0 78          	add    rax,0x78
   361dd:	48 89 c7             	mov    rdi,rax
   361e0:	e8 7b e0 fc ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   361e5:	eb 03                	jmp    361ea <objl::Material::Material(objl::Material const&)+0x1c2>
   361e7:	48 89 c3             	mov    rbx,rax
   361ea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   361ee:	48 83 c0 58          	add    rax,0x58
   361f2:	48 89 c7             	mov    rdi,rax
   361f5:	e8 66 e0 fc ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   361fa:	eb 03                	jmp    361ff <objl::Material::Material(objl::Material const&)+0x1d7>
   361fc:	48 89 c3             	mov    rbx,rax
   361ff:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36203:	48 89 c7             	mov    rdi,rax
   36206:	e8 55 e0 fc ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   3620b:	48 89 d8             	mov    rax,rbx
   3620e:	48 89 c7             	mov    rdi,rax
   36211:	e8 4a e5 fc ff       	call   4760 <_Unwind_Resume@plt>
   36216:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3621a:	c9                   	leave  
   3621b:	c3                   	ret    

000000000003621c <objl::Mesh::Mesh(objl::Mesh const&)>:
   3621c:	55                   	push   rbp
   3621d:	48 89 e5             	mov    rbp,rsp
   36220:	53                   	push   rbx
   36221:	48 83 ec 18          	sub    rsp,0x18
   36225:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36229:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3622d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36231:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   36235:	48 89 d6             	mov    rsi,rdx
   36238:	48 89 c7             	mov    rdi,rax
   3623b:	e8 30 df fc ff       	call   4170 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   36240:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36244:	48 83 c0 20          	add    rax,0x20
   36248:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   3624c:	48 83 c2 20          	add    rdx,0x20
   36250:	48 89 d6             	mov    rsi,rdx
   36253:	48 89 c7             	mov    rdi,rax
   36256:	e8 15 d3 ff ff       	call   33570 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::vector<objl::Vertex, std::allocator<objl::Vertex> > const&)>
   3625b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3625f:	48 83 c0 38          	add    rax,0x38
   36263:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   36267:	48 83 c2 38          	add    rdx,0x38
   3626b:	48 89 d6             	mov    rsi,rdx
   3626e:	48 89 c7             	mov    rdi,rax
   36271:	e8 2e 14 00 00       	call   376a4 <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::vector<unsigned int, std::allocator<unsigned int> > const&)>
   36276:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3627a:	48 83 c0 50          	add    rax,0x50
   3627e:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   36282:	48 83 c2 50          	add    rdx,0x50
   36286:	48 89 d6             	mov    rsi,rdx
   36289:	48 89 c7             	mov    rdi,rax
   3628c:	e8 97 fd ff ff       	call   36028 <objl::Material::Material(objl::Material const&)>
   36291:	eb 44                	jmp    362d7 <objl::Mesh::Mesh(objl::Mesh const&)+0xbb>
   36293:	48 89 c3             	mov    rbx,rax
   36296:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3629a:	48 83 c0 38          	add    rax,0x38
   3629e:	48 89 c7             	mov    rdi,rax
   362a1:	e8 1e 0b ff ff       	call   26dc4 <std::vector<unsigned int, std::allocator<unsigned int> >::~vector()>
   362a6:	eb 03                	jmp    362ab <objl::Mesh::Mesh(objl::Mesh const&)+0x8f>
   362a8:	48 89 c3             	mov    rbx,rax
   362ab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   362af:	48 83 c0 20          	add    rax,0x20
   362b3:	48 89 c7             	mov    rdi,rax
   362b6:	e8 11 c2 ff ff       	call   324cc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::~vector()>
   362bb:	eb 03                	jmp    362c0 <objl::Mesh::Mesh(objl::Mesh const&)+0xa4>
   362bd:	48 89 c3             	mov    rbx,rax
   362c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   362c4:	48 89 c7             	mov    rdi,rax
   362c7:	e8 94 df fc ff       	call   4260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
   362cc:	48 89 d8             	mov    rax,rbx
   362cf:	48 89 c7             	mov    rdi,rax
   362d2:	e8 89 e4 fc ff       	call   4760 <_Unwind_Resume@plt>
   362d7:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   362db:	c9                   	leave  
   362dc:	c3                   	ret    
   362dd:	90                   	nop

00000000000362de <void __gnu_cxx::new_allocator<objl::Mesh>::construct<objl::Mesh, objl::Mesh const&>(objl::Mesh*, objl::Mesh const&)>:
   362de:	55                   	push   rbp
   362df:	48 89 e5             	mov    rbp,rsp
   362e2:	41 55                	push   r13
   362e4:	41 54                	push   r12
   362e6:	53                   	push   rbx
   362e7:	48 83 ec 28          	sub    rsp,0x28
   362eb:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   362ef:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   362f3:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   362f7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   362fb:	48 89 c7             	mov    rdi,rax
   362fe:	e8 17 fd ff ff       	call   3601a <objl::Mesh const& std::forward<objl::Mesh const&>(std::remove_reference<objl::Mesh const&>::type&)>
   36303:	49 89 c5             	mov    r13,rax
   36306:	48 8b 5d d0          	mov    rbx,QWORD PTR [rbp-0x30]
   3630a:	48 89 de             	mov    rsi,rbx
   3630d:	bf 68 01 00 00       	mov    edi,0x168
   36312:	e8 9a ee fe ff       	call   251b1 <operator new(unsigned long, void*)>
   36317:	49 89 c4             	mov    r12,rax
   3631a:	4c 89 ee             	mov    rsi,r13
   3631d:	4c 89 e7             	mov    rdi,r12
   36320:	e8 f7 fe ff ff       	call   3621c <objl::Mesh::Mesh(objl::Mesh const&)>
   36325:	eb 19                	jmp    36340 <void __gnu_cxx::new_allocator<objl::Mesh>::construct<objl::Mesh, objl::Mesh const&>(objl::Mesh*, objl::Mesh const&)+0x62>
   36327:	49 89 c5             	mov    r13,rax
   3632a:	48 89 de             	mov    rsi,rbx
   3632d:	4c 89 e7             	mov    rdi,r12
   36330:	e8 8e ee fe ff       	call   251c3 <operator delete(void*, void*)>
   36335:	4c 89 e8             	mov    rax,r13
   36338:	48 89 c7             	mov    rdi,rax
   3633b:	e8 20 e4 fc ff       	call   4760 <_Unwind_Resume@plt>
   36340:	48 83 c4 28          	add    rsp,0x28
   36344:	5b                   	pop    rbx
   36345:	41 5c                	pop    r12
   36347:	41 5d                	pop    r13
   36349:	5d                   	pop    rbp
   3634a:	c3                   	ret    
   3634b:	90                   	nop

000000000003634c <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_check_len(unsigned long, char const*) const>:
   3634c:	55                   	push   rbp
   3634d:	48 89 e5             	mov    rbp,rsp
   36350:	53                   	push   rbx
   36351:	48 83 ec 48          	sub    rsp,0x48
   36355:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   36359:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   3635d:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   36361:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3636a:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   3636e:	31 c0                	xor    eax,eax
   36370:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36374:	48 89 c7             	mov    rdi,rax
   36377:	e8 3c 14 00 00       	call   377b8 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::max_size() const>
   3637c:	48 89 c3             	mov    rbx,rax
   3637f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36383:	48 89 c7             	mov    rdi,rax
   36386:	e8 85 01 ff ff       	call   26510 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::size() const>
   3638b:	48 29 c3             	sub    rbx,rax
   3638e:	48 89 da             	mov    rdx,rbx
   36391:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   36395:	48 39 c2             	cmp    rdx,rax
   36398:	0f 92 c0             	setb   al
   3639b:	84 c0                	test   al,al
   3639d:	74 0c                	je     363ab <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_check_len(unsigned long, char const*) const+0x5f>
   3639f:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   363a3:	48 89 c7             	mov    rdi,rax
   363a6:	e8 25 de fc ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   363ab:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   363af:	48 89 c7             	mov    rdi,rax
   363b2:	e8 59 01 ff ff       	call   26510 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::size() const>
   363b7:	48 89 c3             	mov    rbx,rax
   363ba:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   363be:	48 89 c7             	mov    rdi,rax
   363c1:	e8 4a 01 ff ff       	call   26510 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::size() const>
   363c6:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   363ca:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   363ce:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   363d2:	48 89 d6             	mov    rsi,rdx
   363d5:	48 89 c7             	mov    rdi,rax
   363d8:	e8 51 f7 fe ff       	call   25b2e <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   363dd:	48 8b 00             	mov    rax,QWORD PTR [rax]
   363e0:	48 01 d8             	add    rax,rbx
   363e3:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   363e7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   363eb:	48 89 c7             	mov    rdi,rax
   363ee:	e8 1d 01 ff ff       	call   26510 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::size() const>
   363f3:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   363f7:	72 12                	jb     3640b <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_check_len(unsigned long, char const*) const+0xbf>
   363f9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   363fd:	48 89 c7             	mov    rdi,rax
   36400:	e8 b3 13 00 00       	call   377b8 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::max_size() const>
   36405:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   36409:	76 0e                	jbe    36419 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_check_len(unsigned long, char const*) const+0xcd>
   3640b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3640f:	48 89 c7             	mov    rdi,rax
   36412:	e8 a1 13 00 00       	call   377b8 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::max_size() const>
   36417:	eb 04                	jmp    3641d <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_check_len(unsigned long, char const*) const+0xd1>
   36419:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3641d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   36421:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   3642a:	74 05                	je     36431 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_M_check_len(unsigned long, char const*) const+0xe5>
   3642c:	e8 af e0 fc ff       	call   44e0 <__stack_chk_fail@plt>
   36431:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36435:	c9                   	leave  
   36436:	c3                   	ret    

0000000000036437 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::difference_type __gnu_cxx::operator-<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >(__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&, __gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > > const&)>:
   36437:	55                   	push   rbp
   36438:	48 89 e5             	mov    rbp,rsp
   3643b:	53                   	push   rbx
   3643c:	48 83 ec 18          	sub    rsp,0x18
   36440:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36444:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36448:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3644c:	48 89 c7             	mov    rdi,rax
   3644f:	e8 0c eb ff ff       	call   34f60 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   36454:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   36457:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3645b:	48 89 c7             	mov    rdi,rax
   3645e:	e8 fd ea ff ff       	call   34f60 <__gnu_cxx::__normal_iterator<objl::Mesh*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>
   36463:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36466:	48 89 d8             	mov    rax,rbx
   36469:	48 29 d0             	sub    rax,rdx
   3646c:	48 c1 f8 03          	sar    rax,0x3
   36470:	48 89 c2             	mov    rdx,rax
   36473:	48 b8 a5 4f fa a4 4f fa a4 4f 	movabs rax,0x4fa4fa4fa4fa4fa5
   3647d:	48 0f af c2          	imul   rax,rdx
   36481:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36485:	c9                   	leave  
   36486:	c3                   	ret    
   36487:	90                   	nop

0000000000036488 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_allocate(unsigned long)>:
   36488:	55                   	push   rbp
   36489:	48 89 e5             	mov    rbp,rsp
   3648c:	48 83 ec 10          	sub    rsp,0x10
   36490:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36494:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36498:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   3649d:	74 15                	je     364b4 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_allocate(unsigned long)+0x2c>
   3649f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   364a3:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   364a7:	48 89 d6             	mov    rsi,rdx
   364aa:	48 89 c7             	mov    rdi,rax
   364ad:	e8 28 13 00 00       	call   377da <std::allocator_traits<std::allocator<objl::Mesh> >::allocate(std::allocator<objl::Mesh>&, unsigned long)>
   364b2:	eb 05                	jmp    364b9 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_allocate(unsigned long)+0x31>
   364b4:	b8 00 00 00 00       	mov    eax,0x0
   364b9:	c9                   	leave  
   364ba:	c3                   	ret    

00000000000364bb <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_relocate(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>:
   364bb:	55                   	push   rbp
   364bc:	48 89 e5             	mov    rbp,rsp
   364bf:	48 83 ec 20          	sub    rsp,0x20
   364c3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   364c7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   364cb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   364cf:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   364d3:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   364d7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   364db:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   364df:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   364e3:	48 89 c7             	mov    rdi,rax
   364e6:	e8 19 13 00 00       	call   37804 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_do_relocate(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&, std::integral_constant<bool, true>)>
   364eb:	c9                   	leave  
   364ec:	c3                   	ret    

00000000000364ed <void std::allocator_traits<std::allocator<objl::Mesh> >::destroy<objl::Mesh>(std::allocator<objl::Mesh>&, objl::Mesh*)>:
   364ed:	55                   	push   rbp
   364ee:	48 89 e5             	mov    rbp,rsp
   364f1:	48 83 ec 10          	sub    rsp,0x10
   364f5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   364f9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   364fd:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36501:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36505:	48 89 d6             	mov    rsi,rdx
   36508:	48 89 c7             	mov    rdi,rax
   3650b:	e8 26 13 00 00       	call   37836 <void __gnu_cxx::new_allocator<objl::Mesh>::destroy<objl::Mesh>(objl::Mesh*)>
   36510:	90                   	nop
   36511:	c9                   	leave  
   36512:	c3                   	ret    

0000000000036513 <objl::Vector3 const& std::forward<objl::Vector3 const&>(std::remove_reference<objl::Vector3 const&>::type&)>:
   36513:	55                   	push   rbp
   36514:	48 89 e5             	mov    rbp,rsp
   36517:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3651b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3651f:	5d                   	pop    rbp
   36520:	c3                   	ret    
   36521:	90                   	nop

0000000000036522 <void __gnu_cxx::new_allocator<objl::Vector3>::construct<objl::Vector3, objl::Vector3 const&>(objl::Vector3*, objl::Vector3 const&)>:
   36522:	55                   	push   rbp
   36523:	48 89 e5             	mov    rbp,rsp
   36526:	53                   	push   rbx
   36527:	48 83 ec 28          	sub    rsp,0x28
   3652b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3652f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36533:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   36537:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3653b:	48 89 c7             	mov    rdi,rax
   3653e:	e8 d0 ff ff ff       	call   36513 <objl::Vector3 const& std::forward<objl::Vector3 const&>(std::remove_reference<objl::Vector3 const&>::type&)>
   36543:	48 89 c3             	mov    rbx,rax
   36546:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3654a:	48 89 c6             	mov    rsi,rax
   3654d:	bf 0c 00 00 00       	mov    edi,0xc
   36552:	e8 5a ec fe ff       	call   251b1 <operator new(unsigned long, void*)>
   36557:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
   3655a:	48 89 10             	mov    QWORD PTR [rax],rdx
   3655d:	8b 53 08             	mov    edx,DWORD PTR [rbx+0x8]
   36560:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   36563:	90                   	nop
   36564:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36568:	c9                   	leave  
   36569:	c3                   	ret    

000000000003656a <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::__normal_iterator(objl::Vector3* const&)>:
   3656a:	55                   	push   rbp
   3656b:	48 89 e5             	mov    rbp,rsp
   3656e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36572:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36576:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3657a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   3657d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36581:	48 89 10             	mov    QWORD PTR [rax],rdx
   36584:	90                   	nop
   36585:	5d                   	pop    rbp
   36586:	c3                   	ret    
   36587:	90                   	nop

0000000000036588 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_check_len(unsigned long, char const*) const>:
   36588:	55                   	push   rbp
   36589:	48 89 e5             	mov    rbp,rsp
   3658c:	53                   	push   rbx
   3658d:	48 83 ec 48          	sub    rsp,0x48
   36591:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   36595:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   36599:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   3659d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   365a6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   365aa:	31 c0                	xor    eax,eax
   365ac:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   365b0:	48 89 c7             	mov    rdi,rax
   365b3:	e8 9e 12 00 00       	call   37856 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::max_size() const>
   365b8:	48 89 c3             	mov    rbx,rax
   365bb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   365bf:	48 89 c7             	mov    rdi,rax
   365c2:	e8 77 ea ff ff       	call   3503e <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::size() const>
   365c7:	48 29 c3             	sub    rbx,rax
   365ca:	48 89 da             	mov    rdx,rbx
   365cd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   365d1:	48 39 c2             	cmp    rdx,rax
   365d4:	0f 92 c0             	setb   al
   365d7:	84 c0                	test   al,al
   365d9:	74 0c                	je     365e7 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_check_len(unsigned long, char const*) const+0x5f>
   365db:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   365df:	48 89 c7             	mov    rdi,rax
   365e2:	e8 e9 db fc ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   365e7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   365eb:	48 89 c7             	mov    rdi,rax
   365ee:	e8 4b ea ff ff       	call   3503e <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::size() const>
   365f3:	48 89 c3             	mov    rbx,rax
   365f6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   365fa:	48 89 c7             	mov    rdi,rax
   365fd:	e8 3c ea ff ff       	call   3503e <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::size() const>
   36602:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   36606:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   3660a:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   3660e:	48 89 d6             	mov    rsi,rdx
   36611:	48 89 c7             	mov    rdi,rax
   36614:	e8 15 f5 fe ff       	call   25b2e <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   36619:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3661c:	48 01 d8             	add    rax,rbx
   3661f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   36623:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36627:	48 89 c7             	mov    rdi,rax
   3662a:	e8 0f ea ff ff       	call   3503e <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::size() const>
   3662f:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   36633:	72 12                	jb     36647 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_check_len(unsigned long, char const*) const+0xbf>
   36635:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36639:	48 89 c7             	mov    rdi,rax
   3663c:	e8 15 12 00 00       	call   37856 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::max_size() const>
   36641:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   36645:	76 0e                	jbe    36655 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_check_len(unsigned long, char const*) const+0xcd>
   36647:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3664b:	48 89 c7             	mov    rdi,rax
   3664e:	e8 03 12 00 00       	call   37856 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::max_size() const>
   36653:	eb 04                	jmp    36659 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_check_len(unsigned long, char const*) const+0xd1>
   36655:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36659:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   3665d:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   36666:	74 05                	je     3666d <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_M_check_len(unsigned long, char const*) const+0xe5>
   36668:	e8 73 de fc ff       	call   44e0 <__stack_chk_fail@plt>
   3666d:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36671:	c9                   	leave  
   36672:	c3                   	ret    
   36673:	90                   	nop

0000000000036674 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::begin()>:
   36674:	55                   	push   rbp
   36675:	48 89 e5             	mov    rbp,rsp
   36678:	48 83 ec 20          	sub    rsp,0x20
   3667c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36680:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   36689:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   3668d:	31 c0                	xor    eax,eax
   3668f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   36693:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   36697:	48 89 d6             	mov    rsi,rdx
   3669a:	48 89 c7             	mov    rdi,rax
   3669d:	e8 c8 fe ff ff       	call   3656a <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::__normal_iterator(objl::Vector3* const&)>
   366a2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   366a6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   366aa:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   366b3:	74 05                	je     366ba <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::begin()+0x46>
   366b5:	e8 26 de fc ff       	call   44e0 <__stack_chk_fail@plt>
   366ba:	c9                   	leave  
   366bb:	c3                   	ret    

00000000000366bc <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::difference_type __gnu_cxx::operator-<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >(__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > > const&, __gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > > const&)>:
   366bc:	55                   	push   rbp
   366bd:	48 89 e5             	mov    rbp,rsp
   366c0:	53                   	push   rbx
   366c1:	48 83 ec 18          	sub    rsp,0x18
   366c5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   366c9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   366cd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   366d1:	48 89 c7             	mov    rdi,rax
   366d4:	e8 99 00 00 00       	call   36772 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::base() const>
   366d9:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   366dc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   366e0:	48 89 c7             	mov    rdi,rax
   366e3:	e8 8a 00 00 00       	call   36772 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::base() const>
   366e8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   366eb:	48 89 d8             	mov    rax,rbx
   366ee:	48 29 d0             	sub    rax,rdx
   366f1:	48 c1 f8 02          	sar    rax,0x2
   366f5:	48 89 c2             	mov    rdx,rax
   366f8:	48 b8 ab aa aa aa aa aa aa aa 	movabs rax,0xaaaaaaaaaaaaaaab
   36702:	48 0f af c2          	imul   rax,rdx
   36706:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3670a:	c9                   	leave  
   3670b:	c3                   	ret    

000000000003670c <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_allocate(unsigned long)>:
   3670c:	55                   	push   rbp
   3670d:	48 89 e5             	mov    rbp,rsp
   36710:	48 83 ec 10          	sub    rsp,0x10
   36714:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36718:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3671c:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   36721:	74 15                	je     36738 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_allocate(unsigned long)+0x2c>
   36723:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36727:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3672b:	48 89 d6             	mov    rsi,rdx
   3672e:	48 89 c7             	mov    rdi,rax
   36731:	e8 42 11 00 00       	call   37878 <std::allocator_traits<std::allocator<objl::Vector3> >::allocate(std::allocator<objl::Vector3>&, unsigned long)>
   36736:	eb 05                	jmp    3673d <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_allocate(unsigned long)+0x31>
   36738:	b8 00 00 00 00       	mov    eax,0x0
   3673d:	c9                   	leave  
   3673e:	c3                   	ret    

000000000003673f <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_relocate(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>:
   3673f:	55                   	push   rbp
   36740:	48 89 e5             	mov    rbp,rsp
   36743:	48 83 ec 20          	sub    rsp,0x20
   36747:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3674b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3674f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   36753:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   36757:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   3675b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   3675f:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   36763:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36767:	48 89 c7             	mov    rdi,rax
   3676a:	e8 33 11 00 00       	call   378a2 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_do_relocate(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&, std::integral_constant<bool, true>)>
   3676f:	c9                   	leave  
   36770:	c3                   	ret    
   36771:	90                   	nop

0000000000036772 <__gnu_cxx::__normal_iterator<objl::Vector3*, std::vector<objl::Vector3, std::allocator<objl::Vector3> > >::base() const>:
   36772:	55                   	push   rbp
   36773:	48 89 e5             	mov    rbp,rsp
   36776:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3677a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3677e:	5d                   	pop    rbp
   3677f:	c3                   	ret    

0000000000036780 <void std::allocator_traits<std::allocator<objl::Vector3> >::destroy<objl::Vector3>(std::allocator<objl::Vector3>&, objl::Vector3*)>:
   36780:	55                   	push   rbp
   36781:	48 89 e5             	mov    rbp,rsp
   36784:	48 83 ec 10          	sub    rsp,0x10
   36788:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3678c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36790:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36794:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36798:	48 89 d6             	mov    rsi,rdx
   3679b:	48 89 c7             	mov    rdi,rax
   3679e:	e8 31 11 00 00       	call   378d4 <void __gnu_cxx::new_allocator<objl::Vector3>::destroy<objl::Vector3>(objl::Vector3*)>
   367a3:	90                   	nop
   367a4:	c9                   	leave  
   367a5:	c3                   	ret    

00000000000367a6 <objl::Vector2 const& std::forward<objl::Vector2 const&>(std::remove_reference<objl::Vector2 const&>::type&)>:
   367a6:	55                   	push   rbp
   367a7:	48 89 e5             	mov    rbp,rsp
   367aa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   367ae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   367b2:	5d                   	pop    rbp
   367b3:	c3                   	ret    

00000000000367b4 <void __gnu_cxx::new_allocator<objl::Vector2>::construct<objl::Vector2, objl::Vector2 const&>(objl::Vector2*, objl::Vector2 const&)>:
   367b4:	55                   	push   rbp
   367b5:	48 89 e5             	mov    rbp,rsp
   367b8:	53                   	push   rbx
   367b9:	48 83 ec 28          	sub    rsp,0x28
   367bd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   367c1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   367c5:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   367c9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   367cd:	48 89 c7             	mov    rdi,rax
   367d0:	e8 d1 ff ff ff       	call   367a6 <objl::Vector2 const& std::forward<objl::Vector2 const&>(std::remove_reference<objl::Vector2 const&>::type&)>
   367d5:	48 89 c3             	mov    rbx,rax
   367d8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   367dc:	48 89 c6             	mov    rsi,rax
   367df:	bf 08 00 00 00       	mov    edi,0x8
   367e4:	e8 c8 e9 fe ff       	call   251b1 <operator new(unsigned long, void*)>
   367e9:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
   367ec:	48 89 10             	mov    QWORD PTR [rax],rdx
   367ef:	90                   	nop
   367f0:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   367f4:	c9                   	leave  
   367f5:	c3                   	ret    

00000000000367f6 <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::__normal_iterator(objl::Vector2* const&)>:
   367f6:	55                   	push   rbp
   367f7:	48 89 e5             	mov    rbp,rsp
   367fa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   367fe:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36802:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   36806:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36809:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3680d:	48 89 10             	mov    QWORD PTR [rax],rdx
   36810:	90                   	nop
   36811:	5d                   	pop    rbp
   36812:	c3                   	ret    
   36813:	90                   	nop

0000000000036814 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_check_len(unsigned long, char const*) const>:
   36814:	55                   	push   rbp
   36815:	48 89 e5             	mov    rbp,rsp
   36818:	53                   	push   rbx
   36819:	48 83 ec 48          	sub    rsp,0x48
   3681d:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   36821:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   36825:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   36829:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   36832:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   36836:	31 c0                	xor    eax,eax
   36838:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3683c:	48 89 c7             	mov    rdi,rax
   3683f:	e8 a0 10 00 00       	call   378e4 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::max_size() const>
   36844:	48 89 c3             	mov    rbx,rax
   36847:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3684b:	48 89 c7             	mov    rdi,rax
   3684e:	e8 49 e8 ff ff       	call   3509c <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::size() const>
   36853:	48 29 c3             	sub    rbx,rax
   36856:	48 89 da             	mov    rdx,rbx
   36859:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3685d:	48 39 c2             	cmp    rdx,rax
   36860:	0f 92 c0             	setb   al
   36863:	84 c0                	test   al,al
   36865:	74 0c                	je     36873 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_check_len(unsigned long, char const*) const+0x5f>
   36867:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   3686b:	48 89 c7             	mov    rdi,rax
   3686e:	e8 5d d9 fc ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   36873:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36877:	48 89 c7             	mov    rdi,rax
   3687a:	e8 1d e8 ff ff       	call   3509c <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::size() const>
   3687f:	48 89 c3             	mov    rbx,rax
   36882:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36886:	48 89 c7             	mov    rdi,rax
   36889:	e8 0e e8 ff ff       	call   3509c <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::size() const>
   3688e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   36892:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   36896:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   3689a:	48 89 d6             	mov    rsi,rdx
   3689d:	48 89 c7             	mov    rdi,rax
   368a0:	e8 89 f2 fe ff       	call   25b2e <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   368a5:	48 8b 00             	mov    rax,QWORD PTR [rax]
   368a8:	48 01 d8             	add    rax,rbx
   368ab:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   368af:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   368b3:	48 89 c7             	mov    rdi,rax
   368b6:	e8 e1 e7 ff ff       	call   3509c <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::size() const>
   368bb:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   368bf:	72 12                	jb     368d3 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_check_len(unsigned long, char const*) const+0xbf>
   368c1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   368c5:	48 89 c7             	mov    rdi,rax
   368c8:	e8 17 10 00 00       	call   378e4 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::max_size() const>
   368cd:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   368d1:	76 0e                	jbe    368e1 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_check_len(unsigned long, char const*) const+0xcd>
   368d3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   368d7:	48 89 c7             	mov    rdi,rax
   368da:	e8 05 10 00 00       	call   378e4 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::max_size() const>
   368df:	eb 04                	jmp    368e5 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_check_len(unsigned long, char const*) const+0xd1>
   368e1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   368e5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   368e9:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   368f2:	74 05                	je     368f9 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_M_check_len(unsigned long, char const*) const+0xe5>
   368f4:	e8 e7 db fc ff       	call   44e0 <__stack_chk_fail@plt>
   368f9:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   368fd:	c9                   	leave  
   368fe:	c3                   	ret    
   368ff:	90                   	nop

0000000000036900 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::begin()>:
   36900:	55                   	push   rbp
   36901:	48 89 e5             	mov    rbp,rsp
   36904:	48 83 ec 20          	sub    rsp,0x20
   36908:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3690c:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   36915:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   36919:	31 c0                	xor    eax,eax
   3691b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   3691f:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   36923:	48 89 d6             	mov    rsi,rdx
   36926:	48 89 c7             	mov    rdi,rax
   36929:	e8 c8 fe ff ff       	call   367f6 <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::__normal_iterator(objl::Vector2* const&)>
   3692e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   36932:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   36936:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   3693f:	74 05                	je     36946 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::begin()+0x46>
   36941:	e8 9a db fc ff       	call   44e0 <__stack_chk_fail@plt>
   36946:	c9                   	leave  
   36947:	c3                   	ret    

0000000000036948 <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::difference_type __gnu_cxx::operator-<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >(__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > > const&, __gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > > const&)>:
   36948:	55                   	push   rbp
   36949:	48 89 e5             	mov    rbp,rsp
   3694c:	53                   	push   rbx
   3694d:	48 83 ec 18          	sub    rsp,0x18
   36951:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36955:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36959:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3695d:	48 89 c7             	mov    rdi,rax
   36960:	e8 89 00 00 00       	call   369ee <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::base() const>
   36965:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   36968:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3696c:	48 89 c7             	mov    rdi,rax
   3696f:	e8 7a 00 00 00       	call   369ee <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::base() const>
   36974:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36977:	48 89 d8             	mov    rax,rbx
   3697a:	48 29 d0             	sub    rax,rdx
   3697d:	48 c1 f8 03          	sar    rax,0x3
   36981:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36985:	c9                   	leave  
   36986:	c3                   	ret    
   36987:	90                   	nop

0000000000036988 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_allocate(unsigned long)>:
   36988:	55                   	push   rbp
   36989:	48 89 e5             	mov    rbp,rsp
   3698c:	48 83 ec 10          	sub    rsp,0x10
   36990:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36994:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36998:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   3699d:	74 15                	je     369b4 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_allocate(unsigned long)+0x2c>
   3699f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   369a3:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   369a7:	48 89 d6             	mov    rsi,rdx
   369aa:	48 89 c7             	mov    rdi,rax
   369ad:	e8 54 0f 00 00       	call   37906 <std::allocator_traits<std::allocator<objl::Vector2> >::allocate(std::allocator<objl::Vector2>&, unsigned long)>
   369b2:	eb 05                	jmp    369b9 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_allocate(unsigned long)+0x31>
   369b4:	b8 00 00 00 00       	mov    eax,0x0
   369b9:	c9                   	leave  
   369ba:	c3                   	ret    

00000000000369bb <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_relocate(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>:
   369bb:	55                   	push   rbp
   369bc:	48 89 e5             	mov    rbp,rsp
   369bf:	48 83 ec 20          	sub    rsp,0x20
   369c3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   369c7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   369cb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   369cf:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   369d3:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   369d7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   369db:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   369df:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   369e3:	48 89 c7             	mov    rdi,rax
   369e6:	e8 45 0f 00 00       	call   37930 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_do_relocate(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&, std::integral_constant<bool, true>)>
   369eb:	c9                   	leave  
   369ec:	c3                   	ret    
   369ed:	90                   	nop

00000000000369ee <__gnu_cxx::__normal_iterator<objl::Vector2*, std::vector<objl::Vector2, std::allocator<objl::Vector2> > >::base() const>:
   369ee:	55                   	push   rbp
   369ef:	48 89 e5             	mov    rbp,rsp
   369f2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   369f6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   369fa:	5d                   	pop    rbp
   369fb:	c3                   	ret    

00000000000369fc <void std::allocator_traits<std::allocator<objl::Vector2> >::destroy<objl::Vector2>(std::allocator<objl::Vector2>&, objl::Vector2*)>:
   369fc:	55                   	push   rbp
   369fd:	48 89 e5             	mov    rbp,rsp
   36a00:	48 83 ec 10          	sub    rsp,0x10
   36a04:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36a08:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36a0c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36a10:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36a14:	48 89 d6             	mov    rsi,rdx
   36a17:	48 89 c7             	mov    rdi,rax
   36a1a:	e8 43 0f 00 00       	call   37962 <void __gnu_cxx::new_allocator<objl::Vector2>::destroy<objl::Vector2>(objl::Vector2*)>
   36a1f:	90                   	nop
   36a20:	c9                   	leave  
   36a21:	c3                   	ret    

0000000000036a22 <objl::Vertex const& std::forward<objl::Vertex const&>(std::remove_reference<objl::Vertex const&>::type&)>:
   36a22:	55                   	push   rbp
   36a23:	48 89 e5             	mov    rbp,rsp
   36a26:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36a2a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36a2e:	5d                   	pop    rbp
   36a2f:	c3                   	ret    

0000000000036a30 <void __gnu_cxx::new_allocator<objl::Vertex>::construct<objl::Vertex, objl::Vertex const&>(objl::Vertex*, objl::Vertex const&)>:
   36a30:	55                   	push   rbp
   36a31:	48 89 e5             	mov    rbp,rsp
   36a34:	53                   	push   rbx
   36a35:	48 83 ec 28          	sub    rsp,0x28
   36a39:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36a3d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36a41:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   36a45:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   36a49:	48 89 c7             	mov    rdi,rax
   36a4c:	e8 d1 ff ff ff       	call   36a22 <objl::Vertex const& std::forward<objl::Vertex const&>(std::remove_reference<objl::Vertex const&>::type&)>
   36a51:	48 89 c3             	mov    rbx,rax
   36a54:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36a58:	48 89 c6             	mov    rsi,rax
   36a5b:	bf 20 00 00 00       	mov    edi,0x20
   36a60:	e8 4c e7 fe ff       	call   251b1 <operator new(unsigned long, void*)>
   36a65:	48 89 c1             	mov    rcx,rax
   36a68:	48 8b 03             	mov    rax,QWORD PTR [rbx]
   36a6b:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
   36a6f:	48 89 01             	mov    QWORD PTR [rcx],rax
   36a72:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   36a76:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
   36a7a:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
   36a7e:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   36a82:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
   36a86:	90                   	nop
   36a87:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36a8b:	c9                   	leave  
   36a8c:	c3                   	ret    
   36a8d:	90                   	nop

0000000000036a8e <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_check_len(unsigned long, char const*) const>:
   36a8e:	55                   	push   rbp
   36a8f:	48 89 e5             	mov    rbp,rsp
   36a92:	53                   	push   rbx
   36a93:	48 83 ec 48          	sub    rsp,0x48
   36a97:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   36a9b:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   36a9f:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   36aa3:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   36aac:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   36ab0:	31 c0                	xor    eax,eax
   36ab2:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36ab6:	48 89 c7             	mov    rdi,rax
   36ab9:	e8 b4 0e 00 00       	call   37972 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::max_size() const>
   36abe:	48 89 c3             	mov    rbx,rax
   36ac1:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36ac5:	48 89 c7             	mov    rdi,rax
   36ac8:	e8 9b fa fe ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   36acd:	48 29 c3             	sub    rbx,rax
   36ad0:	48 89 da             	mov    rdx,rbx
   36ad3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   36ad7:	48 39 c2             	cmp    rdx,rax
   36ada:	0f 92 c0             	setb   al
   36add:	84 c0                	test   al,al
   36adf:	74 0c                	je     36aed <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_check_len(unsigned long, char const*) const+0x5f>
   36ae1:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   36ae5:	48 89 c7             	mov    rdi,rax
   36ae8:	e8 e3 d6 fc ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   36aed:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36af1:	48 89 c7             	mov    rdi,rax
   36af4:	e8 6f fa fe ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   36af9:	48 89 c3             	mov    rbx,rax
   36afc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36b00:	48 89 c7             	mov    rdi,rax
   36b03:	e8 60 fa fe ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   36b08:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   36b0c:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   36b10:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   36b14:	48 89 d6             	mov    rsi,rdx
   36b17:	48 89 c7             	mov    rdi,rax
   36b1a:	e8 0f f0 fe ff       	call   25b2e <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   36b1f:	48 8b 00             	mov    rax,QWORD PTR [rax]
   36b22:	48 01 d8             	add    rax,rbx
   36b25:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   36b29:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36b2d:	48 89 c7             	mov    rdi,rax
   36b30:	e8 33 fa fe ff       	call   26568 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::size() const>
   36b35:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   36b39:	72 12                	jb     36b4d <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_check_len(unsigned long, char const*) const+0xbf>
   36b3b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36b3f:	48 89 c7             	mov    rdi,rax
   36b42:	e8 2b 0e 00 00       	call   37972 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::max_size() const>
   36b47:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   36b4b:	76 0e                	jbe    36b5b <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_check_len(unsigned long, char const*) const+0xcd>
   36b4d:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36b51:	48 89 c7             	mov    rdi,rax
   36b54:	e8 19 0e 00 00       	call   37972 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::max_size() const>
   36b59:	eb 04                	jmp    36b5f <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_check_len(unsigned long, char const*) const+0xd1>
   36b5b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36b5f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   36b63:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   36b6c:	74 05                	je     36b73 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_M_check_len(unsigned long, char const*) const+0xe5>
   36b6e:	e8 6d d9 fc ff       	call   44e0 <__stack_chk_fail@plt>
   36b73:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36b77:	c9                   	leave  
   36b78:	c3                   	ret    

0000000000036b79 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::difference_type __gnu_cxx::operator-<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>:
   36b79:	55                   	push   rbp
   36b7a:	48 89 e5             	mov    rbp,rsp
   36b7d:	53                   	push   rbx
   36b7e:	48 83 ec 18          	sub    rsp,0x18
   36b82:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36b86:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36b8a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36b8e:	48 89 c7             	mov    rdi,rax
   36b91:	e8 42 e6 ff ff       	call   351d8 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   36b96:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   36b99:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36b9d:	48 89 c7             	mov    rdi,rax
   36ba0:	e8 33 e6 ff ff       	call   351d8 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   36ba5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36ba8:	48 89 d8             	mov    rax,rbx
   36bab:	48 29 d0             	sub    rax,rdx
   36bae:	48 c1 f8 05          	sar    rax,0x5
   36bb2:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36bb6:	c9                   	leave  
   36bb7:	c3                   	ret    

0000000000036bb8 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_relocate(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>:
   36bb8:	55                   	push   rbp
   36bb9:	48 89 e5             	mov    rbp,rsp
   36bbc:	48 83 ec 20          	sub    rsp,0x20
   36bc0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36bc4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36bc8:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   36bcc:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   36bd0:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   36bd4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   36bd8:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   36bdc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36be0:	48 89 c7             	mov    rdi,rax
   36be3:	e8 ac 0d 00 00       	call   37994 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_do_relocate(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&, std::integral_constant<bool, true>)>
   36be8:	c9                   	leave  
   36be9:	c3                   	ret    

0000000000036bea <void std::allocator_traits<std::allocator<objl::Vertex> >::destroy<objl::Vertex>(std::allocator<objl::Vertex>&, objl::Vertex*)>:
   36bea:	55                   	push   rbp
   36beb:	48 89 e5             	mov    rbp,rsp
   36bee:	48 83 ec 10          	sub    rsp,0x10
   36bf2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36bf6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36bfa:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36bfe:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36c02:	48 89 d6             	mov    rsi,rdx
   36c05:	48 89 c7             	mov    rdi,rax
   36c08:	e8 b9 0d 00 00       	call   379c6 <void __gnu_cxx::new_allocator<objl::Vertex>::destroy<objl::Vertex>(objl::Vertex*)>
   36c0d:	90                   	nop
   36c0e:	c9                   	leave  
   36c0f:	c3                   	ret    

0000000000036c10 <__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::__normal_iterator(objl::Mesh const* const&)>:
   36c10:	55                   	push   rbp
   36c11:	48 89 e5             	mov    rbp,rsp
   36c14:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36c18:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36c1c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   36c20:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36c23:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36c27:	48 89 10             	mov    QWORD PTR [rax],rdx
   36c2a:	90                   	nop
   36c2b:	5d                   	pop    rbp
   36c2c:	c3                   	ret    
   36c2d:	90                   	nop

0000000000036c2e <__gnu_cxx::__normal_iterator<objl::Mesh const*, std::vector<objl::Mesh, std::allocator<objl::Mesh> > >::base() const>:
   36c2e:	55                   	push   rbp
   36c2f:	48 89 e5             	mov    rbp,rsp
   36c32:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36c36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36c3a:	5d                   	pop    rbp
   36c3b:	c3                   	ret    

0000000000036c3c <std::allocator_traits<std::allocator<objl::Vertex> >::select_on_container_copy_construction(std::allocator<objl::Vertex> const&)>:
   36c3c:	55                   	push   rbp
   36c3d:	48 89 e5             	mov    rbp,rsp
   36c40:	48 83 ec 10          	sub    rsp,0x10
   36c44:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36c48:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36c4c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36c50:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36c54:	48 89 d6             	mov    rsi,rdx
   36c57:	48 89 c7             	mov    rdi,rax
   36c5a:	e8 15 09 00 00       	call   37574 <std::allocator<objl::Vertex>::allocator(std::allocator<objl::Vertex> const&)>
   36c5f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36c63:	c9                   	leave  
   36c64:	c3                   	ret    
   36c65:	90                   	nop

0000000000036c66 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::_Vector_impl(std::allocator<objl::Vertex> const&)>:
   36c66:	55                   	push   rbp
   36c67:	48 89 e5             	mov    rbp,rsp
   36c6a:	48 83 ec 10          	sub    rsp,0x10
   36c6e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36c72:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36c76:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36c7a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36c7e:	48 89 d6             	mov    rsi,rdx
   36c81:	48 89 c7             	mov    rdi,rax
   36c84:	e8 eb 08 00 00       	call   37574 <std::allocator<objl::Vertex>::allocator(std::allocator<objl::Vertex> const&)>
   36c89:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36c8d:	48 89 c7             	mov    rdi,rax
   36c90:	e8 73 cc ff ff       	call   33908 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_Vector_impl_data()>
   36c95:	90                   	nop
   36c96:	c9                   	leave  
   36c97:	c3                   	ret    

0000000000036c98 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_create_storage(unsigned long)>:
   36c98:	55                   	push   rbp
   36c99:	48 89 e5             	mov    rbp,rsp
   36c9c:	48 83 ec 10          	sub    rsp,0x10
   36ca0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36ca4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36ca8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36cac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36cb0:	48 89 d6             	mov    rsi,rdx
   36cb3:	48 89 c7             	mov    rdi,rax
   36cb6:	e8 b5 ea ff ff       	call   35770 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_allocate(unsigned long)>
   36cbb:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   36cbf:	48 89 02             	mov    QWORD PTR [rdx],rax
   36cc2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36cc6:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36cc9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36ccd:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   36cd1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36cd5:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36cd8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   36cdc:	48 c1 e0 05          	shl    rax,0x5
   36ce0:	48 01 c2             	add    rdx,rax
   36ce3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36ce7:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   36ceb:	90                   	nop
   36cec:	c9                   	leave  
   36ced:	c3                   	ret    

0000000000036cee <objl::Vertex* std::uninitialized_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)>:
   36cee:	55                   	push   rbp
   36cef:	48 89 e5             	mov    rbp,rsp
   36cf2:	48 83 ec 30          	sub    rsp,0x30
   36cf6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36cfa:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36cfe:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   36d02:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
   36d06:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   36d0a:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   36d0e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36d12:	48 89 ce             	mov    rsi,rcx
   36d15:	48 89 c7             	mov    rdi,rax
   36d18:	e8 b8 0c 00 00       	call   379d5 <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)>
   36d1d:	c9                   	leave  
   36d1e:	c3                   	ret    

0000000000036d1f <bool __gnu_cxx::operator!=<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>:
   36d1f:	55                   	push   rbp
   36d20:	48 89 e5             	mov    rbp,rsp
   36d23:	53                   	push   rbx
   36d24:	48 83 ec 18          	sub    rsp,0x18
   36d28:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36d2c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36d30:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36d34:	48 89 c7             	mov    rdi,rax
   36d37:	e8 9c e4 ff ff       	call   351d8 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   36d3c:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   36d3f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36d43:	48 89 c7             	mov    rdi,rax
   36d46:	e8 8d e4 ff ff       	call   351d8 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   36d4b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   36d4e:	48 39 c3             	cmp    rbx,rax
   36d51:	0f 95 c0             	setne  al
   36d54:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36d58:	c9                   	leave  
   36d59:	c3                   	ret    

0000000000036d5a <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::move<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   36d5a:	55                   	push   rbp
   36d5b:	48 89 e5             	mov    rbp,rsp
   36d5e:	53                   	push   rbx
   36d5f:	48 83 ec 28          	sub    rsp,0x28
   36d63:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36d67:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36d6b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   36d6f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36d73:	48 89 c7             	mov    rdi,rax
   36d76:	e8 d1 0c 00 00       	call   37a4c <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__miter_base<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   36d7b:	48 89 c3             	mov    rbx,rax
   36d7e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36d82:	48 89 c7             	mov    rdi,rax
   36d85:	e8 c2 0c 00 00       	call   37a4c <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__miter_base<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   36d8a:	48 89 c1             	mov    rcx,rax
   36d8d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   36d91:	48 89 c2             	mov    rdx,rax
   36d94:	48 89 de             	mov    rsi,rbx
   36d97:	48 89 cf             	mov    rdi,rcx
   36d9a:	e8 bb 0c 00 00       	call   37a5a <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__copy_move_a<true, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   36d9f:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36da3:	c9                   	leave  
   36da4:	c3                   	ret    

0000000000036da5 <objl::Material const& std::forward<objl::Material const&>(std::remove_reference<objl::Material const&>::type&)>:
   36da5:	55                   	push   rbp
   36da6:	48 89 e5             	mov    rbp,rsp
   36da9:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36dad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36db1:	5d                   	pop    rbp
   36db2:	c3                   	ret    
   36db3:	90                   	nop

0000000000036db4 <void __gnu_cxx::new_allocator<objl::Material>::construct<objl::Material, objl::Material const&>(objl::Material*, objl::Material const&)>:
   36db4:	55                   	push   rbp
   36db5:	48 89 e5             	mov    rbp,rsp
   36db8:	41 55                	push   r13
   36dba:	41 54                	push   r12
   36dbc:	53                   	push   rbx
   36dbd:	48 83 ec 28          	sub    rsp,0x28
   36dc1:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   36dc5:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   36dc9:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   36dcd:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36dd1:	48 89 c7             	mov    rdi,rax
   36dd4:	e8 cc ff ff ff       	call   36da5 <objl::Material const& std::forward<objl::Material const&>(std::remove_reference<objl::Material const&>::type&)>
   36dd9:	49 89 c5             	mov    r13,rax
   36ddc:	48 8b 5d d0          	mov    rbx,QWORD PTR [rbp-0x30]
   36de0:	48 89 de             	mov    rsi,rbx
   36de3:	bf 18 01 00 00       	mov    edi,0x118
   36de8:	e8 c4 e3 fe ff       	call   251b1 <operator new(unsigned long, void*)>
   36ded:	49 89 c4             	mov    r12,rax
   36df0:	4c 89 ee             	mov    rsi,r13
   36df3:	4c 89 e7             	mov    rdi,r12
   36df6:	e8 2d f2 ff ff       	call   36028 <objl::Material::Material(objl::Material const&)>
   36dfb:	eb 19                	jmp    36e16 <void __gnu_cxx::new_allocator<objl::Material>::construct<objl::Material, objl::Material const&>(objl::Material*, objl::Material const&)+0x62>
   36dfd:	49 89 c5             	mov    r13,rax
   36e00:	48 89 de             	mov    rsi,rbx
   36e03:	4c 89 e7             	mov    rdi,r12
   36e06:	e8 b8 e3 fe ff       	call   251c3 <operator delete(void*, void*)>
   36e0b:	4c 89 e8             	mov    rax,r13
   36e0e:	48 89 c7             	mov    rdi,rax
   36e11:	e8 4a d9 fc ff       	call   4760 <_Unwind_Resume@plt>
   36e16:	48 83 c4 28          	add    rsp,0x28
   36e1a:	5b                   	pop    rbx
   36e1b:	41 5c                	pop    r12
   36e1d:	41 5d                	pop    r13
   36e1f:	5d                   	pop    rbp
   36e20:	c3                   	ret    
   36e21:	90                   	nop

0000000000036e22 <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::__normal_iterator(objl::Material* const&)>:
   36e22:	55                   	push   rbp
   36e23:	48 89 e5             	mov    rbp,rsp
   36e26:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36e2a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36e2e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   36e32:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36e35:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36e39:	48 89 10             	mov    QWORD PTR [rax],rdx
   36e3c:	90                   	nop
   36e3d:	5d                   	pop    rbp
   36e3e:	c3                   	ret    
   36e3f:	90                   	nop

0000000000036e40 <std::vector<objl::Material, std::allocator<objl::Material> >::_M_check_len(unsigned long, char const*) const>:
   36e40:	55                   	push   rbp
   36e41:	48 89 e5             	mov    rbp,rsp
   36e44:	53                   	push   rbx
   36e45:	48 83 ec 48          	sub    rsp,0x48
   36e49:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   36e4d:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   36e51:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
   36e55:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   36e5e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   36e62:	31 c0                	xor    eax,eax
   36e64:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36e68:	48 89 c7             	mov    rdi,rax
   36e6b:	e8 54 0c 00 00       	call   37ac4 <std::vector<objl::Material, std::allocator<objl::Material> >::max_size() const>
   36e70:	48 89 c3             	mov    rbx,rax
   36e73:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36e77:	48 89 c7             	mov    rdi,rax
   36e7a:	e8 7f c5 ff ff       	call   333fe <std::vector<objl::Material, std::allocator<objl::Material> >::size() const>
   36e7f:	48 29 c3             	sub    rbx,rax
   36e82:	48 89 da             	mov    rdx,rbx
   36e85:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   36e89:	48 39 c2             	cmp    rdx,rax
   36e8c:	0f 92 c0             	setb   al
   36e8f:	84 c0                	test   al,al
   36e91:	74 0c                	je     36e9f <std::vector<objl::Material, std::allocator<objl::Material> >::_M_check_len(unsigned long, char const*) const+0x5f>
   36e93:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
   36e97:	48 89 c7             	mov    rdi,rax
   36e9a:	e8 31 d3 fc ff       	call   41d0 <std::__throw_length_error(char const*)@plt>
   36e9f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36ea3:	48 89 c7             	mov    rdi,rax
   36ea6:	e8 53 c5 ff ff       	call   333fe <std::vector<objl::Material, std::allocator<objl::Material> >::size() const>
   36eab:	48 89 c3             	mov    rbx,rax
   36eae:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36eb2:	48 89 c7             	mov    rdi,rax
   36eb5:	e8 44 c5 ff ff       	call   333fe <std::vector<objl::Material, std::allocator<objl::Material> >::size() const>
   36eba:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   36ebe:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
   36ec2:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   36ec6:	48 89 d6             	mov    rsi,rdx
   36ec9:	48 89 c7             	mov    rdi,rax
   36ecc:	e8 5d ec fe ff       	call   25b2e <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>
   36ed1:	48 8b 00             	mov    rax,QWORD PTR [rax]
   36ed4:	48 01 d8             	add    rax,rbx
   36ed7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
   36edb:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36edf:	48 89 c7             	mov    rdi,rax
   36ee2:	e8 17 c5 ff ff       	call   333fe <std::vector<objl::Material, std::allocator<objl::Material> >::size() const>
   36ee7:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   36eeb:	72 12                	jb     36eff <std::vector<objl::Material, std::allocator<objl::Material> >::_M_check_len(unsigned long, char const*) const+0xbf>
   36eed:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36ef1:	48 89 c7             	mov    rdi,rax
   36ef4:	e8 cb 0b 00 00       	call   37ac4 <std::vector<objl::Material, std::allocator<objl::Material> >::max_size() const>
   36ef9:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
   36efd:	76 0e                	jbe    36f0d <std::vector<objl::Material, std::allocator<objl::Material> >::_M_check_len(unsigned long, char const*) const+0xcd>
   36eff:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   36f03:	48 89 c7             	mov    rdi,rax
   36f06:	e8 b9 0b 00 00       	call   37ac4 <std::vector<objl::Material, std::allocator<objl::Material> >::max_size() const>
   36f0b:	eb 04                	jmp    36f11 <std::vector<objl::Material, std::allocator<objl::Material> >::_M_check_len(unsigned long, char const*) const+0xd1>
   36f0d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36f11:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   36f15:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   36f1e:	74 05                	je     36f25 <std::vector<objl::Material, std::allocator<objl::Material> >::_M_check_len(unsigned long, char const*) const+0xe5>
   36f20:	e8 bb d5 fc ff       	call   44e0 <__stack_chk_fail@plt>
   36f25:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36f29:	c9                   	leave  
   36f2a:	c3                   	ret    
   36f2b:	90                   	nop

0000000000036f2c <std::vector<objl::Material, std::allocator<objl::Material> >::begin()>:
   36f2c:	55                   	push   rbp
   36f2d:	48 89 e5             	mov    rbp,rsp
   36f30:	48 83 ec 20          	sub    rsp,0x20
   36f34:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36f38:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   36f41:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   36f45:	31 c0                	xor    eax,eax
   36f47:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   36f4b:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   36f4f:	48 89 d6             	mov    rsi,rdx
   36f52:	48 89 c7             	mov    rdi,rax
   36f55:	e8 c8 fe ff ff       	call   36e22 <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::__normal_iterator(objl::Material* const&)>
   36f5a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   36f5e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   36f62:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   36f6b:	74 05                	je     36f72 <std::vector<objl::Material, std::allocator<objl::Material> >::begin()+0x46>
   36f6d:	e8 6e d5 fc ff       	call   44e0 <__stack_chk_fail@plt>
   36f72:	c9                   	leave  
   36f73:	c3                   	ret    

0000000000036f74 <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::difference_type __gnu_cxx::operator-<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >(__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > > const&, __gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > > const&)>:
   36f74:	55                   	push   rbp
   36f75:	48 89 e5             	mov    rbp,rsp
   36f78:	53                   	push   rbx
   36f79:	48 83 ec 18          	sub    rsp,0x18
   36f7d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   36f81:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   36f85:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   36f89:	48 89 c7             	mov    rdi,rax
   36f8c:	e8 99 00 00 00       	call   3702a <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>
   36f91:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   36f94:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   36f98:	48 89 c7             	mov    rdi,rax
   36f9b:	e8 8a 00 00 00       	call   3702a <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>
   36fa0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   36fa3:	48 89 d8             	mov    rax,rbx
   36fa6:	48 29 d0             	sub    rax,rdx
   36fa9:	48 c1 f8 03          	sar    rax,0x3
   36fad:	48 89 c2             	mov    rdx,rax
   36fb0:	48 b8 8b af f8 8a af f8 8a af 	movabs rax,0xaf8af8af8af8af8b
   36fba:	48 0f af c2          	imul   rax,rdx
   36fbe:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   36fc2:	c9                   	leave  
   36fc3:	c3                   	ret    

0000000000036fc4 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_allocate(unsigned long)>:
   36fc4:	55                   	push   rbp
   36fc5:	48 89 e5             	mov    rbp,rsp
   36fc8:	48 83 ec 10          	sub    rsp,0x10
   36fcc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   36fd0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   36fd4:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
   36fd9:	74 15                	je     36ff0 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_allocate(unsigned long)+0x2c>
   36fdb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   36fdf:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   36fe3:	48 89 d6             	mov    rsi,rdx
   36fe6:	48 89 c7             	mov    rdi,rax
   36fe9:	e8 f8 0a 00 00       	call   37ae6 <std::allocator_traits<std::allocator<objl::Material> >::allocate(std::allocator<objl::Material>&, unsigned long)>
   36fee:	eb 05                	jmp    36ff5 <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_allocate(unsigned long)+0x31>
   36ff0:	b8 00 00 00 00       	mov    eax,0x0
   36ff5:	c9                   	leave  
   36ff6:	c3                   	ret    

0000000000036ff7 <std::vector<objl::Material, std::allocator<objl::Material> >::_S_relocate(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)>:
   36ff7:	55                   	push   rbp
   36ff8:	48 89 e5             	mov    rbp,rsp
   36ffb:	48 83 ec 20          	sub    rsp,0x20
   36fff:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37003:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37007:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3700b:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   3700f:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   37013:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37017:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   3701b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3701f:	48 89 c7             	mov    rdi,rax
   37022:	e8 e9 0a 00 00       	call   37b10 <std::vector<objl::Material, std::allocator<objl::Material> >::_S_do_relocate(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&, std::integral_constant<bool, true>)>
   37027:	c9                   	leave  
   37028:	c3                   	ret    
   37029:	90                   	nop

000000000003702a <__gnu_cxx::__normal_iterator<objl::Material*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>:
   3702a:	55                   	push   rbp
   3702b:	48 89 e5             	mov    rbp,rsp
   3702e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37032:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37036:	5d                   	pop    rbp
   37037:	c3                   	ret    

0000000000037038 <void std::allocator_traits<std::allocator<objl::Material> >::destroy<objl::Material>(std::allocator<objl::Material>&, objl::Material*)>:
   37038:	55                   	push   rbp
   37039:	48 89 e5             	mov    rbp,rsp
   3703c:	48 83 ec 10          	sub    rsp,0x10
   37040:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37044:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37048:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3704c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37050:	48 89 d6             	mov    rsi,rdx
   37053:	48 89 c7             	mov    rdi,rax
   37056:	e8 e7 0a 00 00       	call   37b42 <void __gnu_cxx::new_allocator<objl::Material>::destroy<objl::Material>(objl::Material*)>
   3705b:	90                   	nop
   3705c:	c9                   	leave  
   3705d:	c3                   	ret    

000000000003705e <__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >::__normal_iterator(objl::Material const* const&)>:
   3705e:	55                   	push   rbp
   3705f:	48 89 e5             	mov    rbp,rsp
   37062:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37066:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3706a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3706e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   37071:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37075:	48 89 10             	mov    QWORD PTR [rax],rdx
   37078:	90                   	nop
   37079:	5d                   	pop    rbp
   3707a:	c3                   	ret    
   3707b:	90                   	nop

000000000003707c <__gnu_cxx::__normal_iterator<objl::Material const*, std::vector<objl::Material, std::allocator<objl::Material> > >::base() const>:
   3707c:	55                   	push   rbp
   3707d:	48 89 e5             	mov    rbp,rsp
   37080:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37084:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37088:	5d                   	pop    rbp
   37089:	c3                   	ret    

000000000003708a <__gnu_cxx::new_allocator<objl::Vertex>::deallocate(objl::Vertex*, unsigned long)>:
   3708a:	55                   	push   rbp
   3708b:	48 89 e5             	mov    rbp,rsp
   3708e:	48 83 ec 20          	sub    rsp,0x20
   37092:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37096:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3709a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3709e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   370a2:	48 c1 e0 05          	shl    rax,0x5
   370a6:	48 89 c2             	mov    rdx,rax
   370a9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   370ad:	48 89 d6             	mov    rsi,rdx
   370b0:	48 89 c7             	mov    rdi,rax
   370b3:	e8 88 d3 fc ff       	call   4440 <operator delete(void*, unsigned long)@plt>
   370b8:	c9                   	leave  
   370b9:	c3                   	ret    

00000000000370ba <void std::_Destroy_aux<true>::__destroy<objl::Vertex*>(objl::Vertex*, objl::Vertex*)>:
   370ba:	55                   	push   rbp
   370bb:	48 89 e5             	mov    rbp,rsp
   370be:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   370c2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   370c6:	90                   	nop
   370c7:	5d                   	pop    rbp
   370c8:	c3                   	ret    

00000000000370c9 <std::allocator_traits<std::allocator<objl::Vertex> >::allocate(std::allocator<objl::Vertex>&, unsigned long)>:
   370c9:	55                   	push   rbp
   370ca:	48 89 e5             	mov    rbp,rsp
   370cd:	48 83 ec 10          	sub    rsp,0x10
   370d1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   370d5:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   370d9:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   370dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   370e1:	ba 00 00 00 00       	mov    edx,0x0
   370e6:	48 89 ce             	mov    rsi,rcx
   370e9:	48 89 c7             	mov    rdi,rax
   370ec:	e8 85 0a 00 00       	call   37b76 <__gnu_cxx::new_allocator<objl::Vertex>::allocate(unsigned long, void const*)>
   370f1:	c9                   	leave  
   370f2:	c3                   	ret    

00000000000370f3 <objl::Vertex const* std::__niter_base<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   370f3:	55                   	push   rbp
   370f4:	48 89 e5             	mov    rbp,rsp
   370f7:	48 83 ec 10          	sub    rsp,0x10
   370fb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   370ff:	48 8d 45 f8          	lea    rax,[rbp-0x8]
   37103:	48 89 c7             	mov    rdi,rax
   37106:	e8 19 ed ff ff       	call   35e24 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   3710b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3710e:	c9                   	leave  
   3710f:	c3                   	ret    

0000000000037110 <objl::Vertex* std::__niter_base<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   37110:	55                   	push   rbp
   37111:	48 89 e5             	mov    rbp,rsp
   37114:	48 83 ec 10          	sub    rsp,0x10
   37118:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3711c:	48 8d 45 f8          	lea    rax,[rbp-0x8]
   37120:	48 89 c7             	mov    rdi,rax
   37123:	e8 b0 e0 ff ff       	call   351d8 <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   37128:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3712b:	c9                   	leave  
   3712c:	c3                   	ret    

000000000003712d <objl::Vertex* std::__copy_move_a1<false, objl::Vertex const*, objl::Vertex*>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>:
   3712d:	55                   	push   rbp
   3712e:	48 89 e5             	mov    rbp,rsp
   37131:	48 83 ec 20          	sub    rsp,0x20
   37135:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37139:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3713d:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37141:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37145:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37149:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3714d:	48 89 ce             	mov    rsi,rcx
   37150:	48 89 c7             	mov    rdi,rax
   37153:	e8 7f 0a 00 00       	call   37bd7 <objl::Vertex* std::__copy_move_a2<false, objl::Vertex const*, objl::Vertex*>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>
   37158:	c9                   	leave  
   37159:	c3                   	ret    

000000000003715a <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)>:
   3715a:	55                   	push   rbp
   3715b:	48 89 e5             	mov    rbp,rsp
   3715e:	48 83 ec 10          	sub    rsp,0x10
   37162:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37166:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3716a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3716e:	48 89 c7             	mov    rdi,rax
   37171:	e8 9a ff ff ff       	call   37110 <objl::Vertex* std::__niter_base<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   37176:	48 89 c2             	mov    rdx,rax
   37179:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3717d:	48 29 d0             	sub    rax,rdx
   37180:	48 c1 f8 05          	sar    rax,0x5
   37184:	48 89 c2             	mov    rdx,rax
   37187:	48 8d 45 f8          	lea    rax,[rbp-0x8]
   3718b:	48 89 d6             	mov    rsi,rdx
   3718e:	48 89 c7             	mov    rdi,rax
   37191:	e8 56 c5 ff ff       	call   336ec <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator+(long) const>
   37196:	c9                   	leave  
   37197:	c3                   	ret    

0000000000037198 <void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   37198:	55                   	push   rbp
   37199:	48 89 e5             	mov    rbp,rsp
   3719c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   371a0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   371a4:	90                   	nop
   371a5:	5d                   	pop    rbp
   371a6:	c3                   	ret    

00000000000371a7 <objl::Vertex* std::__niter_base<objl::Vertex*>(objl::Vertex*)>:
   371a7:	55                   	push   rbp
   371a8:	48 89 e5             	mov    rbp,rsp
   371ab:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   371af:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   371b3:	5d                   	pop    rbp
   371b4:	c3                   	ret    

00000000000371b5 <objl::Vertex* std::__copy_move_a1<false, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   371b5:	55                   	push   rbp
   371b6:	48 89 e5             	mov    rbp,rsp
   371b9:	48 83 ec 20          	sub    rsp,0x20
   371bd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   371c1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   371c5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   371c9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   371cd:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   371d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   371d5:	48 89 ce             	mov    rsi,rcx
   371d8:	48 89 c7             	mov    rdi,rax
   371db:	e8 24 0a 00 00       	call   37c04 <objl::Vertex* std::__copy_move_a2<false, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   371e0:	c9                   	leave  
   371e1:	c3                   	ret    

00000000000371e2 <objl::Vertex* std::__niter_wrap<objl::Vertex*>(objl::Vertex* const&, objl::Vertex*)>:
   371e2:	55                   	push   rbp
   371e3:	48 89 e5             	mov    rbp,rsp
   371e6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   371ea:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   371ee:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   371f2:	5d                   	pop    rbp
   371f3:	c3                   	ret    

00000000000371f4 <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   371f4:	55                   	push   rbp
   371f5:	48 89 e5             	mov    rbp,rsp
   371f8:	48 83 ec 30          	sub    rsp,0x30
   371fc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   37200:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   37204:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   37208:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3720c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   37210:	eb 28                	jmp    3723a <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)+0x46>
   37212:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37216:	48 89 c7             	mov    rdi,rax
   37219:	e8 13 0a 00 00       	call   37c31 <objl::Vertex* std::__addressof<objl::Vertex>(objl::Vertex&)>
   3721e:	48 89 c2             	mov    rdx,rax
   37221:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37225:	48 89 c6             	mov    rsi,rax
   37228:	48 89 d7             	mov    rdi,rdx
   3722b:	e8 0f 0a 00 00       	call   37c3f <void std::_Construct<objl::Vertex, objl::Vertex&>(objl::Vertex*, objl::Vertex&)>
   37230:	48 83 45 e8 20       	add    QWORD PTR [rbp-0x18],0x20
   37235:	48 83 45 f8 20       	add    QWORD PTR [rbp-0x8],0x20
   3723a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3723e:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
   37242:	75 ce                	jne    37212 <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)+0x1e>
   37244:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37248:	c9                   	leave  
   37249:	c3                   	ret    

000000000003724a <unsigned int* std::uninitialized_copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>:
   3724a:	55                   	push   rbp
   3724b:	48 89 e5             	mov    rbp,rsp
   3724e:	48 83 ec 30          	sub    rsp,0x30
   37252:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   37256:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3725a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   3725e:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
   37262:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   37266:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   3726a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3726e:	48 89 ce             	mov    rsi,rcx
   37271:	48 89 c7             	mov    rdi,rax
   37274:	e8 1f 0a 00 00       	call   37c98 <unsigned int* std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>
   37279:	c9                   	leave  
   3727a:	c3                   	ret    

000000000003727b <unsigned int const* std::__niter_base<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   3727b:	55                   	push   rbp
   3727c:	48 89 e5             	mov    rbp,rsp
   3727f:	48 83 ec 10          	sub    rsp,0x10
   37283:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37287:	48 8d 45 f8          	lea    rax,[rbp-0x8]
   3728b:	48 89 c7             	mov    rdi,rax
   3728e:	e8 83 eb ff ff       	call   35e16 <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   37293:	48 8b 00             	mov    rax,QWORD PTR [rax]
   37296:	c9                   	leave  
   37297:	c3                   	ret    

0000000000037298 <unsigned int* std::__niter_base<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   37298:	55                   	push   rbp
   37299:	48 89 e5             	mov    rbp,rsp
   3729c:	48 83 ec 10          	sub    rsp,0x10
   372a0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   372a4:	48 8d 45 f8          	lea    rax,[rbp-0x8]
   372a8:	48 89 c7             	mov    rdi,rax
   372ab:	e8 64 28 ff ff       	call   29b14 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::base() const>
   372b0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   372b3:	c9                   	leave  
   372b4:	c3                   	ret    

00000000000372b5 <unsigned int* std::__copy_move_a1<false, unsigned int const*, unsigned int*>(unsigned int const*, unsigned int const*, unsigned int*)>:
   372b5:	55                   	push   rbp
   372b6:	48 89 e5             	mov    rbp,rsp
   372b9:	48 83 ec 20          	sub    rsp,0x20
   372bd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   372c1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   372c5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   372c9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   372cd:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   372d1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   372d5:	48 89 ce             	mov    rsi,rcx
   372d8:	48 89 c7             	mov    rdi,rax
   372db:	e8 e5 09 00 00       	call   37cc5 <unsigned int* std::__copy_move_a2<false, unsigned int const*, unsigned int*>(unsigned int const*, unsigned int const*, unsigned int*)>
   372e0:	c9                   	leave  
   372e1:	c3                   	ret    

00000000000372e2 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>:
   372e2:	55                   	push   rbp
   372e3:	48 89 e5             	mov    rbp,rsp
   372e6:	48 83 ec 10          	sub    rsp,0x10
   372ea:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   372ee:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   372f2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   372f6:	48 89 c7             	mov    rdi,rax
   372f9:	e8 9a ff ff ff       	call   37298 <unsigned int* std::__niter_base<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   372fe:	48 89 c2             	mov    rdx,rax
   37301:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37305:	48 29 d0             	sub    rax,rdx
   37308:	48 c1 f8 02          	sar    rax,0x2
   3730c:	48 89 c2             	mov    rdx,rax
   3730f:	48 8d 45 f8          	lea    rax,[rbp-0x8]
   37313:	48 89 d6             	mov    rsi,rdx
   37316:	48 89 c7             	mov    rdi,rax
   37319:	e8 d4 09 00 00       	call   37cf2 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator+(long) const>
   3731e:	c9                   	leave  
   3731f:	c3                   	ret    

0000000000037320 <void std::_Destroy_aux<true>::__destroy<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)>:
   37320:	55                   	push   rbp
   37321:	48 89 e5             	mov    rbp,rsp
   37324:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37328:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3732c:	90                   	nop
   3732d:	5d                   	pop    rbp
   3732e:	c3                   	ret    

000000000003732f <unsigned int* std::__copy_move_a1<false, unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>:
   3732f:	55                   	push   rbp
   37330:	48 89 e5             	mov    rbp,rsp
   37333:	48 83 ec 20          	sub    rsp,0x20
   37337:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3733b:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3733f:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37343:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37347:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   3734b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3734f:	48 89 ce             	mov    rsi,rcx
   37352:	48 89 c7             	mov    rdi,rax
   37355:	e8 fa 09 00 00       	call   37d54 <unsigned int* std::__copy_move_a2<false, unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>
   3735a:	c9                   	leave  
   3735b:	c3                   	ret    

000000000003735c <unsigned int* std::__niter_wrap<unsigned int*>(unsigned int* const&, unsigned int*)>:
   3735c:	55                   	push   rbp
   3735d:	48 89 e5             	mov    rbp,rsp
   37360:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37364:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37368:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3736c:	5d                   	pop    rbp
   3736d:	c3                   	ret    

000000000003736e <unsigned int* std::__uninitialized_copy<true>::__uninit_copy<unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>:
   3736e:	55                   	push   rbp
   3736f:	48 89 e5             	mov    rbp,rsp
   37372:	48 83 ec 20          	sub    rsp,0x20
   37376:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3737a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3737e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37382:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37386:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   3738a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3738e:	48 89 ce             	mov    rsi,rcx
   37391:	48 89 c7             	mov    rdi,rax
   37394:	e8 b8 ca ff ff       	call   33e51 <unsigned int* std::copy<unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>
   37399:	c9                   	leave  
   3739a:	c3                   	ret    
   3739b:	90                   	nop

000000000003739c <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::operator-(long) const>:
   3739c:	55                   	push   rbp
   3739d:	48 89 e5             	mov    rbp,rsp
   373a0:	48 83 ec 30          	sub    rsp,0x30
   373a4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   373a8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   373ac:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   373b5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   373b9:	31 c0                	xor    eax,eax
   373bb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   373bf:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   373c2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   373c6:	48 c1 e0 05          	shl    rax,0x5
   373ca:	48 f7 d8             	neg    rax
   373cd:	48 01 d0             	add    rax,rdx
   373d0:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   373d4:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   373d8:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   373dc:	48 89 d6             	mov    rsi,rdx
   373df:	48 89 c7             	mov    rdi,rax
   373e2:	e8 b7 27 ff ff       	call   29b9e <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::__normal_iterator(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* const&)>
   373e7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   373eb:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   373ef:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   373f8:	74 05                	je     373ff <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::operator-(long) const+0x63>
   373fa:	e8 e1 d0 fc ff       	call   44e0 <__stack_chk_fail@plt>
   373ff:	c9                   	leave  
   37400:	c3                   	ret    
   37401:	90                   	nop

0000000000037402 <__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::operator*() const>:
   37402:	55                   	push   rbp
   37403:	48 89 e5             	mov    rbp,rsp
   37406:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3740a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3740e:	48 8b 00             	mov    rax,QWORD PTR [rax]
   37411:	5d                   	pop    rbp
   37412:	c3                   	ret    
   37413:	90                   	nop

0000000000037414 <__gnu_cxx::new_allocator<objl::Mesh>::deallocate(objl::Mesh*, unsigned long)>:
   37414:	55                   	push   rbp
   37415:	48 89 e5             	mov    rbp,rsp
   37418:	48 83 ec 20          	sub    rsp,0x20
   3741c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37420:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37424:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37428:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3742c:	48 69 d0 68 01 00 00 	imul   rdx,rax,0x168
   37433:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37437:	48 89 d6             	mov    rsi,rdx
   3743a:	48 89 c7             	mov    rdi,rax
   3743d:	e8 fe cf fc ff       	call   4440 <operator delete(void*, unsigned long)@plt>
   37442:	c9                   	leave  
   37443:	c3                   	ret    

0000000000037444 <void std::_Destroy_aux<false>::__destroy<objl::Mesh*>(objl::Mesh*, objl::Mesh*)>:
   37444:	55                   	push   rbp
   37445:	48 89 e5             	mov    rbp,rsp
   37448:	48 83 ec 10          	sub    rsp,0x10
   3744c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37450:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37454:	eb 1c                	jmp    37472 <void std::_Destroy_aux<false>::__destroy<objl::Mesh*>(objl::Mesh*, objl::Mesh*)+0x2e>
   37456:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3745a:	48 89 c7             	mov    rdi,rax
   3745d:	e8 1f 09 00 00       	call   37d81 <objl::Mesh* std::__addressof<objl::Mesh>(objl::Mesh&)>
   37462:	48 89 c7             	mov    rdi,rax
   37465:	e8 25 09 00 00       	call   37d8f <void std::_Destroy<objl::Mesh>(objl::Mesh*)>
   3746a:	48 81 45 f8 68 01 00 00 	add    QWORD PTR [rbp-0x8],0x168
   37472:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37476:	48 3b 45 f0          	cmp    rax,QWORD PTR [rbp-0x10]
   3747a:	75 da                	jne    37456 <void std::_Destroy_aux<false>::__destroy<objl::Mesh*>(objl::Mesh*, objl::Mesh*)+0x12>
   3747c:	90                   	nop
   3747d:	90                   	nop
   3747e:	c9                   	leave  
   3747f:	c3                   	ret    

0000000000037480 <__gnu_cxx::new_allocator<objl::Material>::deallocate(objl::Material*, unsigned long)>:
   37480:	55                   	push   rbp
   37481:	48 89 e5             	mov    rbp,rsp
   37484:	48 83 ec 20          	sub    rsp,0x20
   37488:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3748c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37490:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37494:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37498:	48 69 d0 18 01 00 00 	imul   rdx,rax,0x118
   3749f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   374a3:	48 89 d6             	mov    rsi,rdx
   374a6:	48 89 c7             	mov    rdi,rax
   374a9:	e8 92 cf fc ff       	call   4440 <operator delete(void*, unsigned long)@plt>
   374ae:	c9                   	leave  
   374af:	c3                   	ret    

00000000000374b0 <void std::_Destroy_aux<false>::__destroy<objl::Material*>(objl::Material*, objl::Material*)>:
   374b0:	55                   	push   rbp
   374b1:	48 89 e5             	mov    rbp,rsp
   374b4:	48 83 ec 10          	sub    rsp,0x10
   374b8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   374bc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   374c0:	eb 1c                	jmp    374de <void std::_Destroy_aux<false>::__destroy<objl::Material*>(objl::Material*, objl::Material*)+0x2e>
   374c2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   374c6:	48 89 c7             	mov    rdi,rax
   374c9:	e8 dc 08 00 00       	call   37daa <objl::Material* std::__addressof<objl::Material>(objl::Material&)>
   374ce:	48 89 c7             	mov    rdi,rax
   374d1:	e8 e2 08 00 00       	call   37db8 <void std::_Destroy<objl::Material>(objl::Material*)>
   374d6:	48 81 45 f8 18 01 00 00 	add    QWORD PTR [rbp-0x8],0x118
   374de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   374e2:	48 3b 45 f0          	cmp    rax,QWORD PTR [rbp-0x10]
   374e6:	75 da                	jne    374c2 <void std::_Destroy_aux<false>::__destroy<objl::Material*>(objl::Material*, objl::Material*)+0x12>
   374e8:	90                   	nop
   374e9:	90                   	nop
   374ea:	c9                   	leave  
   374eb:	c3                   	ret    

00000000000374ec <__gnu_cxx::new_allocator<objl::Vector3>::deallocate(objl::Vector3*, unsigned long)>:
   374ec:	55                   	push   rbp
   374ed:	48 89 e5             	mov    rbp,rsp
   374f0:	48 83 ec 20          	sub    rsp,0x20
   374f4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   374f8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   374fc:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37500:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37504:	48 89 d0             	mov    rax,rdx
   37507:	48 01 c0             	add    rax,rax
   3750a:	48 01 d0             	add    rax,rdx
   3750d:	48 c1 e0 02          	shl    rax,0x2
   37511:	48 89 c2             	mov    rdx,rax
   37514:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37518:	48 89 d6             	mov    rsi,rdx
   3751b:	48 89 c7             	mov    rdi,rax
   3751e:	e8 1d cf fc ff       	call   4440 <operator delete(void*, unsigned long)@plt>
   37523:	c9                   	leave  
   37524:	c3                   	ret    

0000000000037525 <void std::_Destroy_aux<true>::__destroy<objl::Vector3*>(objl::Vector3*, objl::Vector3*)>:
   37525:	55                   	push   rbp
   37526:	48 89 e5             	mov    rbp,rsp
   37529:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3752d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37531:	90                   	nop
   37532:	5d                   	pop    rbp
   37533:	c3                   	ret    

0000000000037534 <__gnu_cxx::new_allocator<objl::Vector2>::deallocate(objl::Vector2*, unsigned long)>:
   37534:	55                   	push   rbp
   37535:	48 89 e5             	mov    rbp,rsp
   37538:	48 83 ec 20          	sub    rsp,0x20
   3753c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37540:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37544:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37548:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3754c:	48 8d 14 c5 00 00 00 00 	lea    rdx,[rax*8+0x0]
   37554:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37558:	48 89 d6             	mov    rsi,rdx
   3755b:	48 89 c7             	mov    rdi,rax
   3755e:	e8 dd ce fc ff       	call   4440 <operator delete(void*, unsigned long)@plt>
   37563:	c9                   	leave  
   37564:	c3                   	ret    

0000000000037565 <void std::_Destroy_aux<true>::__destroy<objl::Vector2*>(objl::Vector2*, objl::Vector2*)>:
   37565:	55                   	push   rbp
   37566:	48 89 e5             	mov    rbp,rsp
   37569:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3756d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37571:	90                   	nop
   37572:	5d                   	pop    rbp
   37573:	c3                   	ret    

0000000000037574 <std::allocator<objl::Vertex>::allocator(std::allocator<objl::Vertex> const&)>:
   37574:	55                   	push   rbp
   37575:	48 89 e5             	mov    rbp,rsp
   37578:	48 83 ec 10          	sub    rsp,0x10
   3757c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37580:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37584:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   37588:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3758c:	48 89 d6             	mov    rsi,rdx
   3758f:	48 89 c7             	mov    rdi,rax
   37592:	e8 3d 08 00 00       	call   37dd4 <__gnu_cxx::new_allocator<objl::Vertex>::new_allocator(__gnu_cxx::new_allocator<objl::Vertex> const&)>
   37597:	90                   	nop
   37598:	c9                   	leave  
   37599:	c3                   	ret    

000000000003759a <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base(std::allocator<objl::Vertex> const&)>:
   3759a:	55                   	push   rbp
   3759b:	48 89 e5             	mov    rbp,rsp
   3759e:	48 83 ec 10          	sub    rsp,0x10
   375a2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   375a6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   375aa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   375ae:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   375b2:	48 89 d6             	mov    rsi,rdx
   375b5:	48 89 c7             	mov    rdi,rax
   375b8:	e8 a9 f6 ff ff       	call   36c66 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::_Vector_impl(std::allocator<objl::Vertex> const&)>
   375bd:	90                   	nop
   375be:	c9                   	leave  
   375bf:	c3                   	ret    

00000000000375c0 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data const&)>:
   375c0:	55                   	push   rbp
   375c1:	48 89 e5             	mov    rbp,rsp
   375c4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   375c8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   375cc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   375d0:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   375d3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   375d7:	48 89 10             	mov    QWORD PTR [rax],rdx
   375da:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   375de:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   375e2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   375e6:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   375ea:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   375ee:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   375f2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   375f6:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   375fa:	90                   	nop
   375fb:	5d                   	pop    rbp
   375fc:	c3                   	ret    

00000000000375fd <std::remove_reference<std::allocator<objl::Vertex>&>::type&& std::move<std::allocator<objl::Vertex>&>(std::allocator<objl::Vertex>&)>:
   375fd:	55                   	push   rbp
   375fe:	48 89 e5             	mov    rbp,rsp
   37601:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37605:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37609:	5d                   	pop    rbp
   3760a:	c3                   	ret    
   3760b:	90                   	nop

000000000003760c <std::allocator<unsigned int>::allocator(std::allocator<unsigned int> const&)>:
   3760c:	55                   	push   rbp
   3760d:	48 89 e5             	mov    rbp,rsp
   37610:	48 83 ec 10          	sub    rsp,0x10
   37614:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37618:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3761c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   37620:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37624:	48 89 d6             	mov    rsi,rdx
   37627:	48 89 c7             	mov    rdi,rax
   3762a:	e8 b5 07 00 00       	call   37de4 <__gnu_cxx::new_allocator<unsigned int>::new_allocator(__gnu_cxx::new_allocator<unsigned int> const&)>
   3762f:	90                   	nop
   37630:	c9                   	leave  
   37631:	c3                   	ret    

0000000000037632 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base(std::allocator<unsigned int> const&)>:
   37632:	55                   	push   rbp
   37633:	48 89 e5             	mov    rbp,rsp
   37636:	48 83 ec 10          	sub    rsp,0x10
   3763a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3763e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37642:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37646:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3764a:	48 89 d6             	mov    rsi,rdx
   3764d:	48 89 c7             	mov    rdi,rax
   37650:	e8 9f 07 00 00       	call   37df4 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl(std::allocator<unsigned int> const&)>
   37655:	90                   	nop
   37656:	c9                   	leave  
   37657:	c3                   	ret    

0000000000037658 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data const&)>:
   37658:	55                   	push   rbp
   37659:	48 89 e5             	mov    rbp,rsp
   3765c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37660:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37664:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37668:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   3766b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3766f:	48 89 10             	mov    QWORD PTR [rax],rdx
   37672:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37676:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   3767a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3767e:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   37682:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37686:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   3768a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3768e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   37692:	90                   	nop
   37693:	5d                   	pop    rbp
   37694:	c3                   	ret    

0000000000037695 <std::remove_reference<std::allocator<unsigned int>&>::type&& std::move<std::allocator<unsigned int>&>(std::allocator<unsigned int>&)>:
   37695:	55                   	push   rbp
   37696:	48 89 e5             	mov    rbp,rsp
   37699:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3769d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   376a1:	5d                   	pop    rbp
   376a2:	c3                   	ret    
   376a3:	90                   	nop

00000000000376a4 <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::vector<unsigned int, std::allocator<unsigned int> > const&)>:
   376a4:	55                   	push   rbp
   376a5:	48 89 e5             	mov    rbp,rsp
   376a8:	41 55                	push   r13
   376aa:	41 54                	push   r12
   376ac:	53                   	push   rbx
   376ad:	48 83 ec 28          	sub    rsp,0x28
   376b1:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
   376b5:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
   376b9:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   376c2:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
   376c6:	31 c0                	xor    eax,eax
   376c8:	48 8b 5d c8          	mov    rbx,QWORD PTR [rbp-0x38]
   376cc:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   376d0:	48 89 c7             	mov    rdi,rax
   376d3:	e8 d8 3c ff ff       	call   2b3b0 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator() const>
   376d8:	48 89 c2             	mov    rdx,rax
   376db:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   376df:	48 89 d6             	mov    rsi,rdx
   376e2:	48 89 c7             	mov    rdi,rax
   376e5:	e8 3c 07 00 00       	call   37e26 <__gnu_cxx::__alloc_traits<std::allocator<unsigned int>, unsigned int>::_S_select_on_copy(std::allocator<unsigned int> const&)>
   376ea:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   376ee:	48 89 c7             	mov    rdi,rax
   376f1:	e8 ba ee fe ff       	call   265b0 <std::vector<unsigned int, std::allocator<unsigned int> >::size() const>
   376f6:	48 89 c1             	mov    rcx,rax
   376f9:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   376fd:	48 89 c2             	mov    rdx,rax
   37700:	48 89 ce             	mov    rsi,rcx
   37703:	48 89 df             	mov    rdi,rbx
   37706:	e8 67 07 00 00       	call   37e72 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base(unsigned long, std::allocator<unsigned int> const&)>
   3770b:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   3770f:	48 89 c7             	mov    rdi,rax
   37712:	e8 43 f6 fe ff       	call   26d5a <std::allocator<unsigned int>::~allocator()>
   37717:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3771b:	48 89 c7             	mov    rdi,rax
   3771e:	e8 0f 11 ff ff       	call   28832 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_get_Tp_allocator()>
   37723:	49 89 c5             	mov    r13,rax
   37726:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3772a:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   3772d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   37731:	48 89 c7             	mov    rdi,rax
   37734:	e8 c1 c5 ff ff       	call   33cfa <std::vector<unsigned int, std::allocator<unsigned int> >::end() const>
   37739:	49 89 c4             	mov    r12,rax
   3773c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   37740:	48 89 c7             	mov    rdi,rax
   37743:	e8 6a c5 ff ff       	call   33cb2 <std::vector<unsigned int, std::allocator<unsigned int> >::begin() const>
   37748:	4c 89 e9             	mov    rcx,r13
   3774b:	48 89 da             	mov    rdx,rbx
   3774e:	4c 89 e6             	mov    rsi,r12
   37751:	48 89 c7             	mov    rdi,rax
   37754:	e8 ae e1 ff ff       	call   35907 <unsigned int* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*, std::allocator<unsigned int>&)>
   37759:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
   3775d:	48 89 42 08          	mov    QWORD PTR [rdx+0x8],rax
   37761:	90                   	nop
   37762:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   37766:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   3776f:	74 3b                	je     377ac <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x108>
   37771:	eb 34                	jmp    377a7 <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::vector<unsigned int, std::allocator<unsigned int> > const&)+0x103>
   37773:	48 89 c3             	mov    rbx,rax
   37776:	48 8d 45 d7          	lea    rax,[rbp-0x29]
   3777a:	48 89 c7             	mov    rdi,rax
   3777d:	e8 d8 f5 fe ff       	call   26d5a <std::allocator<unsigned int>::~allocator()>
   37782:	48 89 d8             	mov    rax,rbx
   37785:	48 89 c7             	mov    rdi,rax
   37788:	e8 d3 cf fc ff       	call   4760 <_Unwind_Resume@plt>
   3778d:	48 89 c3             	mov    rbx,rax
   37790:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   37794:	48 89 c7             	mov    rdi,rax
   37797:	e8 da f5 fe ff       	call   26d76 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::~_Vector_base()>
   3779c:	48 89 d8             	mov    rax,rbx
   3779f:	48 89 c7             	mov    rdi,rax
   377a2:	e8 b9 cf fc ff       	call   4760 <_Unwind_Resume@plt>
   377a7:	e8 34 cd fc ff       	call   44e0 <__stack_chk_fail@plt>
   377ac:	48 83 c4 28          	add    rsp,0x28
   377b0:	5b                   	pop    rbx
   377b1:	41 5c                	pop    r12
   377b3:	41 5d                	pop    r13
   377b5:	5d                   	pop    rbp
   377b6:	c3                   	ret    
   377b7:	90                   	nop

00000000000377b8 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::max_size() const>:
   377b8:	55                   	push   rbp
   377b9:	48 89 e5             	mov    rbp,rsp
   377bc:	48 83 ec 10          	sub    rsp,0x10
   377c0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   377c4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   377c8:	48 89 c7             	mov    rdi,rax
   377cb:	e8 64 07 00 00       	call   37f34 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator() const>
   377d0:	48 89 c7             	mov    rdi,rax
   377d3:	e8 f7 06 00 00       	call   37ecf <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_max_size(std::allocator<objl::Mesh> const&)>
   377d8:	c9                   	leave  
   377d9:	c3                   	ret    

00000000000377da <std::allocator_traits<std::allocator<objl::Mesh> >::allocate(std::allocator<objl::Mesh>&, unsigned long)>:
   377da:	55                   	push   rbp
   377db:	48 89 e5             	mov    rbp,rsp
   377de:	48 83 ec 10          	sub    rsp,0x10
   377e2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   377e6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   377ea:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   377ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   377f2:	ba 00 00 00 00       	mov    edx,0x0
   377f7:	48 89 ce             	mov    rsi,rcx
   377fa:	48 89 c7             	mov    rdi,rax
   377fd:	e8 54 07 00 00       	call   37f56 <__gnu_cxx::new_allocator<objl::Mesh>::allocate(unsigned long, void const*)>
   37802:	c9                   	leave  
   37803:	c3                   	ret    

0000000000037804 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_do_relocate(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&, std::integral_constant<bool, true>)>:
   37804:	55                   	push   rbp
   37805:	48 89 e5             	mov    rbp,rsp
   37808:	48 83 ec 20          	sub    rsp,0x20
   3780c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37810:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37814:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37818:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   3781c:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   37820:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37824:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   37828:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3782c:	48 89 c7             	mov    rdi,rax
   3782f:	e8 86 07 00 00       	call   37fba <objl::Mesh* std::__relocate_a<objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   37834:	c9                   	leave  
   37835:	c3                   	ret    

0000000000037836 <void __gnu_cxx::new_allocator<objl::Mesh>::destroy<objl::Mesh>(objl::Mesh*)>:
   37836:	55                   	push   rbp
   37837:	48 89 e5             	mov    rbp,rsp
   3783a:	48 83 ec 10          	sub    rsp,0x10
   3783e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37842:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37846:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3784a:	48 89 c7             	mov    rdi,rax
   3784d:	e8 64 a2 ff ff       	call   31ab6 <objl::Mesh::~Mesh()>
   37852:	90                   	nop
   37853:	c9                   	leave  
   37854:	c3                   	ret    
   37855:	90                   	nop

0000000000037856 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::max_size() const>:
   37856:	55                   	push   rbp
   37857:	48 89 e5             	mov    rbp,rsp
   3785a:	48 83 ec 10          	sub    rsp,0x10
   3785e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37862:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37866:	48 89 c7             	mov    rdi,rax
   37869:	e8 14 08 00 00       	call   38082 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_get_Tp_allocator() const>
   3786e:	48 89 c7             	mov    rdi,rax
   37871:	e8 a7 07 00 00       	call   3801d <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_max_size(std::allocator<objl::Vector3> const&)>
   37876:	c9                   	leave  
   37877:	c3                   	ret    

0000000000037878 <std::allocator_traits<std::allocator<objl::Vector3> >::allocate(std::allocator<objl::Vector3>&, unsigned long)>:
   37878:	55                   	push   rbp
   37879:	48 89 e5             	mov    rbp,rsp
   3787c:	48 83 ec 10          	sub    rsp,0x10
   37880:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37884:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37888:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   3788c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37890:	ba 00 00 00 00       	mov    edx,0x0
   37895:	48 89 ce             	mov    rsi,rcx
   37898:	48 89 c7             	mov    rdi,rax
   3789b:	e8 04 08 00 00       	call   380a4 <__gnu_cxx::new_allocator<objl::Vector3>::allocate(unsigned long, void const*)>
   378a0:	c9                   	leave  
   378a1:	c3                   	ret    

00000000000378a2 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_do_relocate(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&, std::integral_constant<bool, true>)>:
   378a2:	55                   	push   rbp
   378a3:	48 89 e5             	mov    rbp,rsp
   378a6:	48 83 ec 20          	sub    rsp,0x20
   378aa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   378ae:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   378b2:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   378b6:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   378ba:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   378be:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   378c2:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   378c6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   378ca:	48 89 c7             	mov    rdi,rax
   378cd:	e8 3c 08 00 00       	call   3810e <objl::Vector3* std::__relocate_a<objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>
   378d2:	c9                   	leave  
   378d3:	c3                   	ret    

00000000000378d4 <void __gnu_cxx::new_allocator<objl::Vector3>::destroy<objl::Vector3>(objl::Vector3*)>:
   378d4:	55                   	push   rbp
   378d5:	48 89 e5             	mov    rbp,rsp
   378d8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   378dc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   378e0:	90                   	nop
   378e1:	5d                   	pop    rbp
   378e2:	c3                   	ret    
   378e3:	90                   	nop

00000000000378e4 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::max_size() const>:
   378e4:	55                   	push   rbp
   378e5:	48 89 e5             	mov    rbp,rsp
   378e8:	48 83 ec 10          	sub    rsp,0x10
   378ec:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   378f0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   378f4:	48 89 c7             	mov    rdi,rax
   378f7:	e8 da 08 00 00       	call   381d6 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_get_Tp_allocator() const>
   378fc:	48 89 c7             	mov    rdi,rax
   378ff:	e8 6d 08 00 00       	call   38171 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_max_size(std::allocator<objl::Vector2> const&)>
   37904:	c9                   	leave  
   37905:	c3                   	ret    

0000000000037906 <std::allocator_traits<std::allocator<objl::Vector2> >::allocate(std::allocator<objl::Vector2>&, unsigned long)>:
   37906:	55                   	push   rbp
   37907:	48 89 e5             	mov    rbp,rsp
   3790a:	48 83 ec 10          	sub    rsp,0x10
   3790e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37912:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37916:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   3791a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3791e:	ba 00 00 00 00       	mov    edx,0x0
   37923:	48 89 ce             	mov    rsi,rcx
   37926:	48 89 c7             	mov    rdi,rax
   37929:	e8 ca 08 00 00       	call   381f8 <__gnu_cxx::new_allocator<objl::Vector2>::allocate(unsigned long, void const*)>
   3792e:	c9                   	leave  
   3792f:	c3                   	ret    

0000000000037930 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_do_relocate(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&, std::integral_constant<bool, true>)>:
   37930:	55                   	push   rbp
   37931:	48 89 e5             	mov    rbp,rsp
   37934:	48 83 ec 20          	sub    rsp,0x20
   37938:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3793c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37940:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37944:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   37948:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   3794c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37950:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   37954:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37958:	48 89 c7             	mov    rdi,rax
   3795b:	e8 f9 08 00 00       	call   38259 <objl::Vector2* std::__relocate_a<objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>
   37960:	c9                   	leave  
   37961:	c3                   	ret    

0000000000037962 <void __gnu_cxx::new_allocator<objl::Vector2>::destroy<objl::Vector2>(objl::Vector2*)>:
   37962:	55                   	push   rbp
   37963:	48 89 e5             	mov    rbp,rsp
   37966:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3796a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3796e:	90                   	nop
   3796f:	5d                   	pop    rbp
   37970:	c3                   	ret    
   37971:	90                   	nop

0000000000037972 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::max_size() const>:
   37972:	55                   	push   rbp
   37973:	48 89 e5             	mov    rbp,rsp
   37976:	48 83 ec 10          	sub    rsp,0x10
   3797a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3797e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37982:	48 89 c7             	mov    rdi,rax
   37985:	e8 26 c0 ff ff       	call   339b0 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_M_get_Tp_allocator() const>
   3798a:	48 89 c7             	mov    rdi,rax
   3798d:	e8 2a 09 00 00       	call   382bc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_max_size(std::allocator<objl::Vertex> const&)>
   37992:	c9                   	leave  
   37993:	c3                   	ret    

0000000000037994 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_do_relocate(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&, std::integral_constant<bool, true>)>:
   37994:	55                   	push   rbp
   37995:	48 89 e5             	mov    rbp,rsp
   37998:	48 83 ec 20          	sub    rsp,0x20
   3799c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   379a0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   379a4:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   379a8:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   379ac:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   379b0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   379b4:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   379b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   379bc:	48 89 c7             	mov    rdi,rax
   379bf:	e8 5d 09 00 00       	call   38321 <objl::Vertex* std::__relocate_a<objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   379c4:	c9                   	leave  
   379c5:	c3                   	ret    

00000000000379c6 <void __gnu_cxx::new_allocator<objl::Vertex>::destroy<objl::Vertex>(objl::Vertex*)>:
   379c6:	55                   	push   rbp
   379c7:	48 89 e5             	mov    rbp,rsp
   379ca:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   379ce:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   379d2:	90                   	nop
   379d3:	5d                   	pop    rbp
   379d4:	c3                   	ret    

00000000000379d5 <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)>:
   379d5:	55                   	push   rbp
   379d6:	48 89 e5             	mov    rbp,rsp
   379d9:	53                   	push   rbx
   379da:	48 83 ec 38          	sub    rsp,0x38
   379de:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   379e2:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   379e6:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   379ea:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   379ee:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   379f2:	eb 37                	jmp    37a2b <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)+0x56>
   379f4:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   379f8:	48 89 c7             	mov    rdi,rax
   379fb:	e8 e0 09 00 00       	call   383e0 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator*() const>
   37a00:	48 89 c3             	mov    rbx,rax
   37a03:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37a07:	48 89 c7             	mov    rdi,rax
   37a0a:	e8 22 02 00 00       	call   37c31 <objl::Vertex* std::__addressof<objl::Vertex>(objl::Vertex&)>
   37a0f:	48 89 de             	mov    rsi,rbx
   37a12:	48 89 c7             	mov    rdi,rax
   37a15:	e8 d7 09 00 00       	call   383f1 <void std::_Construct<objl::Vertex, objl::Vertex const&>(objl::Vertex*, objl::Vertex const&)>
   37a1a:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   37a1e:	48 89 c7             	mov    rdi,rax
   37a21:	e8 9a 09 00 00       	call   383c0 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator++()>
   37a26:	48 83 45 e8 20       	add    QWORD PTR [rbp-0x18],0x20
   37a2b:	48 8d 55 d0          	lea    rdx,[rbp-0x30]
   37a2f:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   37a33:	48 89 d6             	mov    rsi,rdx
   37a36:	48 89 c7             	mov    rdi,rax
   37a39:	e8 46 09 00 00       	call   38384 <bool __gnu_cxx::operator!=<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>
   37a3e:	84 c0                	test   al,al
   37a40:	75 b2                	jne    379f4 <objl::Vertex* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)+0x1f>
   37a42:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37a46:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   37a4a:	c9                   	leave  
   37a4b:	c3                   	ret    

0000000000037a4c <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__miter_base<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   37a4c:	55                   	push   rbp
   37a4d:	48 89 e5             	mov    rbp,rsp
   37a50:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37a54:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37a58:	5d                   	pop    rbp
   37a59:	c3                   	ret    

0000000000037a5a <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__copy_move_a<true, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, __gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>:
   37a5a:	55                   	push   rbp
   37a5b:	48 89 e5             	mov    rbp,rsp
   37a5e:	41 54                	push   r12
   37a60:	53                   	push   rbx
   37a61:	48 83 ec 20          	sub    rsp,0x20
   37a65:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   37a69:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   37a6d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   37a71:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   37a75:	48 89 c7             	mov    rdi,rax
   37a78:	e8 93 f6 ff ff       	call   37110 <objl::Vertex* std::__niter_base<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   37a7d:	49 89 c4             	mov    r12,rax
   37a80:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   37a84:	48 89 c7             	mov    rdi,rax
   37a87:	e8 84 f6 ff ff       	call   37110 <objl::Vertex* std::__niter_base<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   37a8c:	48 89 c3             	mov    rbx,rax
   37a8f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37a93:	48 89 c7             	mov    rdi,rax
   37a96:	e8 75 f6 ff ff       	call   37110 <objl::Vertex* std::__niter_base<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >)>
   37a9b:	4c 89 e2             	mov    rdx,r12
   37a9e:	48 89 de             	mov    rsi,rbx
   37aa1:	48 89 c7             	mov    rdi,rax
   37aa4:	e8 a1 09 00 00       	call   3844a <objl::Vertex* std::__copy_move_a1<true, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   37aa9:	48 89 c2             	mov    rdx,rax
   37aac:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   37ab0:	48 89 d6             	mov    rsi,rdx
   37ab3:	48 89 c7             	mov    rdi,rax
   37ab6:	e8 9f f6 ff ff       	call   3715a <__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*>(__gnu_cxx::__normal_iterator<objl::Vertex*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >, objl::Vertex*)>
   37abb:	48 83 c4 20          	add    rsp,0x20
   37abf:	5b                   	pop    rbx
   37ac0:	41 5c                	pop    r12
   37ac2:	5d                   	pop    rbp
   37ac3:	c3                   	ret    

0000000000037ac4 <std::vector<objl::Material, std::allocator<objl::Material> >::max_size() const>:
   37ac4:	55                   	push   rbp
   37ac5:	48 89 e5             	mov    rbp,rsp
   37ac8:	48 83 ec 10          	sub    rsp,0x10
   37acc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37ad0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37ad4:	48 89 c7             	mov    rdi,rax
   37ad7:	e8 00 0a 00 00       	call   384dc <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_get_Tp_allocator() const>
   37adc:	48 89 c7             	mov    rdi,rax
   37adf:	e8 93 09 00 00       	call   38477 <std::vector<objl::Material, std::allocator<objl::Material> >::_S_max_size(std::allocator<objl::Material> const&)>
   37ae4:	c9                   	leave  
   37ae5:	c3                   	ret    

0000000000037ae6 <std::allocator_traits<std::allocator<objl::Material> >::allocate(std::allocator<objl::Material>&, unsigned long)>:
   37ae6:	55                   	push   rbp
   37ae7:	48 89 e5             	mov    rbp,rsp
   37aea:	48 83 ec 10          	sub    rsp,0x10
   37aee:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37af2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37af6:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37afa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37afe:	ba 00 00 00 00       	mov    edx,0x0
   37b03:	48 89 ce             	mov    rsi,rcx
   37b06:	48 89 c7             	mov    rdi,rax
   37b09:	e8 f0 09 00 00       	call   384fe <__gnu_cxx::new_allocator<objl::Material>::allocate(unsigned long, void const*)>
   37b0e:	c9                   	leave  
   37b0f:	c3                   	ret    

0000000000037b10 <std::vector<objl::Material, std::allocator<objl::Material> >::_S_do_relocate(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&, std::integral_constant<bool, true>)>:
   37b10:	55                   	push   rbp
   37b11:	48 89 e5             	mov    rbp,rsp
   37b14:	48 83 ec 20          	sub    rsp,0x20
   37b18:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37b1c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37b20:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37b24:	48 89 4d e0          	mov    QWORD PTR [rbp-0x20],rcx
   37b28:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
   37b2c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37b30:	48 8b 75 f0          	mov    rsi,QWORD PTR [rbp-0x10]
   37b34:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37b38:	48 89 c7             	mov    rdi,rax
   37b3b:	e8 22 0a 00 00       	call   38562 <objl::Material* std::__relocate_a<objl::Material*, objl::Material*, std::allocator<objl::Material> >(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)>
   37b40:	c9                   	leave  
   37b41:	c3                   	ret    

0000000000037b42 <void __gnu_cxx::new_allocator<objl::Material>::destroy<objl::Material>(objl::Material*)>:
   37b42:	55                   	push   rbp
   37b43:	48 89 e5             	mov    rbp,rsp
   37b46:	48 83 ec 10          	sub    rsp,0x10
   37b4a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37b4e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37b52:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37b56:	48 89 c7             	mov    rdi,rax
   37b59:	e8 08 98 ff ff       	call   31366 <objl::Material::~Material()>
   37b5e:	90                   	nop
   37b5f:	c9                   	leave  
   37b60:	c3                   	ret    
   37b61:	90                   	nop

0000000000037b62 <__gnu_cxx::new_allocator<objl::Vertex>::_M_max_size() const>:
   37b62:	55                   	push   rbp
   37b63:	48 89 e5             	mov    rbp,rsp
   37b66:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37b6a:	48 b8 ff ff ff ff ff ff ff 03 	movabs rax,0x3ffffffffffffff
   37b74:	5d                   	pop    rbp
   37b75:	c3                   	ret    

0000000000037b76 <__gnu_cxx::new_allocator<objl::Vertex>::allocate(unsigned long, void const*)>:
   37b76:	55                   	push   rbp
   37b77:	48 89 e5             	mov    rbp,rsp
   37b7a:	48 83 ec 20          	sub    rsp,0x20
   37b7e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37b82:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37b86:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37b8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37b8e:	48 89 c7             	mov    rdi,rax
   37b91:	e8 cc ff ff ff       	call   37b62 <__gnu_cxx::new_allocator<objl::Vertex>::_M_max_size() const>
   37b96:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   37b9a:	0f 97 c0             	seta   al
   37b9d:	0f b6 c0             	movzx  eax,al
   37ba0:	48 85 c0             	test   rax,rax
   37ba3:	0f 95 c0             	setne  al
   37ba6:	84 c0                	test   al,al
   37ba8:	74 1a                	je     37bc4 <__gnu_cxx::new_allocator<objl::Vertex>::allocate(unsigned long, void const*)+0x4e>
   37baa:	48 b8 ff ff ff ff ff ff ff 07 	movabs rax,0x7ffffffffffffff
   37bb4:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   37bb8:	76 05                	jbe    37bbf <__gnu_cxx::new_allocator<objl::Vertex>::allocate(unsigned long, void const*)+0x49>
   37bba:	e8 51 c7 fc ff       	call   4310 <std::__throw_bad_array_new_length()@plt>
   37bbf:	e8 4c c5 fc ff       	call   4110 <std::__throw_bad_alloc()@plt>
   37bc4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37bc8:	48 c1 e0 05          	shl    rax,0x5
   37bcc:	48 89 c7             	mov    rdi,rax
   37bcf:	e8 5c c8 fc ff       	call   4430 <operator new(unsigned long)@plt>
   37bd4:	90                   	nop
   37bd5:	c9                   	leave  
   37bd6:	c3                   	ret    

0000000000037bd7 <objl::Vertex* std::__copy_move_a2<false, objl::Vertex const*, objl::Vertex*>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>:
   37bd7:	55                   	push   rbp
   37bd8:	48 89 e5             	mov    rbp,rsp
   37bdb:	48 83 ec 20          	sub    rsp,0x20
   37bdf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37be3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37be7:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37beb:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37bef:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37bf3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37bf7:	48 89 ce             	mov    rsi,rcx
   37bfa:	48 89 c7             	mov    rdi,rax
   37bfd:	e8 c3 09 00 00       	call   385c5 <objl::Vertex* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<objl::Vertex>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>
   37c02:	c9                   	leave  
   37c03:	c3                   	ret    

0000000000037c04 <objl::Vertex* std::__copy_move_a2<false, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   37c04:	55                   	push   rbp
   37c05:	48 89 e5             	mov    rbp,rsp
   37c08:	48 83 ec 20          	sub    rsp,0x20
   37c0c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37c10:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37c14:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37c18:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37c1c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37c20:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37c24:	48 89 ce             	mov    rsi,rcx
   37c27:	48 89 c7             	mov    rdi,rax
   37c2a:	e8 96 09 00 00       	call   385c5 <objl::Vertex* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<objl::Vertex>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>
   37c2f:	c9                   	leave  
   37c30:	c3                   	ret    

0000000000037c31 <objl::Vertex* std::__addressof<objl::Vertex>(objl::Vertex&)>:
   37c31:	55                   	push   rbp
   37c32:	48 89 e5             	mov    rbp,rsp
   37c35:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37c39:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37c3d:	5d                   	pop    rbp
   37c3e:	c3                   	ret    

0000000000037c3f <void std::_Construct<objl::Vertex, objl::Vertex&>(objl::Vertex*, objl::Vertex&)>:
   37c3f:	55                   	push   rbp
   37c40:	48 89 e5             	mov    rbp,rsp
   37c43:	53                   	push   rbx
   37c44:	48 83 ec 18          	sub    rsp,0x18
   37c48:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   37c4c:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   37c50:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   37c54:	48 89 c7             	mov    rdi,rax
   37c57:	e8 c6 09 00 00       	call   38622 <objl::Vertex& std::forward<objl::Vertex&>(std::remove_reference<objl::Vertex&>::type&)>
   37c5c:	48 89 c3             	mov    rbx,rax
   37c5f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37c63:	48 89 c6             	mov    rsi,rax
   37c66:	bf 20 00 00 00       	mov    edi,0x20
   37c6b:	e8 41 d5 fe ff       	call   251b1 <operator new(unsigned long, void*)>
   37c70:	48 89 c1             	mov    rcx,rax
   37c73:	48 8b 03             	mov    rax,QWORD PTR [rbx]
   37c76:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
   37c7a:	48 89 01             	mov    QWORD PTR [rcx],rax
   37c7d:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   37c81:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
   37c85:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
   37c89:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   37c8d:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
   37c91:	90                   	nop
   37c92:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   37c96:	c9                   	leave  
   37c97:	c3                   	ret    

0000000000037c98 <unsigned int* std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>:
   37c98:	55                   	push   rbp
   37c99:	48 89 e5             	mov    rbp,rsp
   37c9c:	48 83 ec 20          	sub    rsp,0x20
   37ca0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37ca4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37ca8:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37cac:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37cb0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37cb4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37cb8:	48 89 ce             	mov    rsi,rcx
   37cbb:	48 89 c7             	mov    rdi,rax
   37cbe:	e8 6d 09 00 00       	call   38630 <unsigned int* std::copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>
   37cc3:	c9                   	leave  
   37cc4:	c3                   	ret    

0000000000037cc5 <unsigned int* std::__copy_move_a2<false, unsigned int const*, unsigned int*>(unsigned int const*, unsigned int const*, unsigned int*)>:
   37cc5:	55                   	push   rbp
   37cc6:	48 89 e5             	mov    rbp,rsp
   37cc9:	48 83 ec 20          	sub    rsp,0x20
   37ccd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37cd1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37cd5:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37cd9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37cdd:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37ce1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37ce5:	48 89 ce             	mov    rsi,rcx
   37ce8:	48 89 c7             	mov    rdi,rax
   37ceb:	e8 8b 09 00 00       	call   3867b <unsigned int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<unsigned int>(unsigned int const*, unsigned int const*, unsigned int*)>
   37cf0:	c9                   	leave  
   37cf1:	c3                   	ret    

0000000000037cf2 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator+(long) const>:
   37cf2:	55                   	push   rbp
   37cf3:	48 89 e5             	mov    rbp,rsp
   37cf6:	48 83 ec 30          	sub    rsp,0x30
   37cfa:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   37cfe:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   37d02:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   37d0b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   37d0f:	31 c0                	xor    eax,eax
   37d11:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   37d15:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   37d18:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   37d1c:	48 c1 e0 02          	shl    rax,0x2
   37d20:	48 01 d0             	add    rax,rdx
   37d23:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   37d27:	48 8d 55 e8          	lea    rdx,[rbp-0x18]
   37d2b:	48 8d 45 f0          	lea    rax,[rbp-0x10]
   37d2f:	48 89 d6             	mov    rsi,rdx
   37d32:	48 89 c7             	mov    rdi,rax
   37d35:	e8 e2 1b ff ff       	call   2991c <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::__normal_iterator(unsigned int* const&)>
   37d3a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37d3e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   37d42:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   37d4b:	74 05                	je     37d52 <__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >::operator+(long) const+0x60>
   37d4d:	e8 8e c7 fc ff       	call   44e0 <__stack_chk_fail@plt>
   37d52:	c9                   	leave  
   37d53:	c3                   	ret    

0000000000037d54 <unsigned int* std::__copy_move_a2<false, unsigned int*, unsigned int*>(unsigned int*, unsigned int*, unsigned int*)>:
   37d54:	55                   	push   rbp
   37d55:	48 89 e5             	mov    rbp,rsp
   37d58:	48 83 ec 20          	sub    rsp,0x20
   37d5c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37d60:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37d64:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37d68:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   37d6c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   37d70:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37d74:	48 89 ce             	mov    rsi,rcx
   37d77:	48 89 c7             	mov    rdi,rax
   37d7a:	e8 fc 08 00 00       	call   3867b <unsigned int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<unsigned int>(unsigned int const*, unsigned int const*, unsigned int*)>
   37d7f:	c9                   	leave  
   37d80:	c3                   	ret    

0000000000037d81 <objl::Mesh* std::__addressof<objl::Mesh>(objl::Mesh&)>:
   37d81:	55                   	push   rbp
   37d82:	48 89 e5             	mov    rbp,rsp
   37d85:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37d89:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37d8d:	5d                   	pop    rbp
   37d8e:	c3                   	ret    

0000000000037d8f <void std::_Destroy<objl::Mesh>(objl::Mesh*)>:
   37d8f:	55                   	push   rbp
   37d90:	48 89 e5             	mov    rbp,rsp
   37d93:	48 83 ec 10          	sub    rsp,0x10
   37d97:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37d9b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37d9f:	48 89 c7             	mov    rdi,rax
   37da2:	e8 0f 9d ff ff       	call   31ab6 <objl::Mesh::~Mesh()>
   37da7:	90                   	nop
   37da8:	c9                   	leave  
   37da9:	c3                   	ret    

0000000000037daa <objl::Material* std::__addressof<objl::Material>(objl::Material&)>:
   37daa:	55                   	push   rbp
   37dab:	48 89 e5             	mov    rbp,rsp
   37dae:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37db2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37db6:	5d                   	pop    rbp
   37db7:	c3                   	ret    

0000000000037db8 <void std::_Destroy<objl::Material>(objl::Material*)>:
   37db8:	55                   	push   rbp
   37db9:	48 89 e5             	mov    rbp,rsp
   37dbc:	48 83 ec 10          	sub    rsp,0x10
   37dc0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37dc4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37dc8:	48 89 c7             	mov    rdi,rax
   37dcb:	e8 96 95 ff ff       	call   31366 <objl::Material::~Material()>
   37dd0:	90                   	nop
   37dd1:	c9                   	leave  
   37dd2:	c3                   	ret    
   37dd3:	90                   	nop

0000000000037dd4 <__gnu_cxx::new_allocator<objl::Vertex>::new_allocator(__gnu_cxx::new_allocator<objl::Vertex> const&)>:
   37dd4:	55                   	push   rbp
   37dd5:	48 89 e5             	mov    rbp,rsp
   37dd8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37ddc:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37de0:	90                   	nop
   37de1:	5d                   	pop    rbp
   37de2:	c3                   	ret    
   37de3:	90                   	nop

0000000000037de4 <__gnu_cxx::new_allocator<unsigned int>::new_allocator(__gnu_cxx::new_allocator<unsigned int> const&)>:
   37de4:	55                   	push   rbp
   37de5:	48 89 e5             	mov    rbp,rsp
   37de8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37dec:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37df0:	90                   	nop
   37df1:	5d                   	pop    rbp
   37df2:	c3                   	ret    
   37df3:	90                   	nop

0000000000037df4 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl(std::allocator<unsigned int> const&)>:
   37df4:	55                   	push   rbp
   37df5:	48 89 e5             	mov    rbp,rsp
   37df8:	48 83 ec 10          	sub    rsp,0x10
   37dfc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37e00:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37e04:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   37e08:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37e0c:	48 89 d6             	mov    rsi,rdx
   37e0f:	48 89 c7             	mov    rdi,rax
   37e12:	e8 f5 f7 ff ff       	call   3760c <std::allocator<unsigned int>::allocator(std::allocator<unsigned int> const&)>
   37e17:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37e1b:	48 89 c7             	mov    rdi,rax
   37e1e:	e8 9f 09 ff ff       	call   287c2 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_Vector_impl_data()>
   37e23:	90                   	nop
   37e24:	c9                   	leave  
   37e25:	c3                   	ret    

0000000000037e26 <__gnu_cxx::__alloc_traits<std::allocator<unsigned int>, unsigned int>::_S_select_on_copy(std::allocator<unsigned int> const&)>:
   37e26:	55                   	push   rbp
   37e27:	48 89 e5             	mov    rbp,rsp
   37e2a:	48 83 ec 20          	sub    rsp,0x20
   37e2e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   37e32:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   37e36:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   37e3f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   37e43:	31 c0                	xor    eax,eax
   37e45:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37e49:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   37e4d:	48 89 d6             	mov    rsi,rdx
   37e50:	48 89 c7             	mov    rdi,rax
   37e53:	e8 82 08 00 00       	call   386da <std::allocator_traits<std::allocator<unsigned int> >::select_on_container_copy_construction(std::allocator<unsigned int> const&)>
   37e58:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37e5c:	64 48 2b 04 25 28 00 00 00 	sub    rax,QWORD PTR fs:0x28
   37e65:	74 05                	je     37e6c <__gnu_cxx::__alloc_traits<std::allocator<unsigned int>, unsigned int>::_S_select_on_copy(std::allocator<unsigned int> const&)+0x46>
   37e67:	e8 74 c6 fc ff       	call   44e0 <__stack_chk_fail@plt>
   37e6c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37e70:	c9                   	leave  
   37e71:	c3                   	ret    

0000000000037e72 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base(unsigned long, std::allocator<unsigned int> const&)>:
   37e72:	55                   	push   rbp
   37e73:	48 89 e5             	mov    rbp,rsp
   37e76:	53                   	push   rbx
   37e77:	48 83 ec 28          	sub    rsp,0x28
   37e7b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   37e7f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   37e83:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   37e87:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37e8b:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
   37e8f:	48 89 d6             	mov    rsi,rdx
   37e92:	48 89 c7             	mov    rdi,rax
   37e95:	e8 5a ff ff ff       	call   37df4 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl(std::allocator<unsigned int> const&)>
   37e9a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
   37e9e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37ea2:	48 89 d6             	mov    rsi,rdx
   37ea5:	48 89 c7             	mov    rdi,rax
   37ea8:	e8 57 08 00 00       	call   38704 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_create_storage(unsigned long)>
   37ead:	eb 1a                	jmp    37ec9 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base(unsigned long, std::allocator<unsigned int> const&)+0x57>
   37eaf:	48 89 c3             	mov    rbx,rax
   37eb2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37eb6:	48 89 c7             	mov    rdi,rax
   37eb9:	e8 6e d8 fe ff       	call   2572c <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::~_Vector_impl()>
   37ebe:	48 89 d8             	mov    rax,rbx
   37ec1:	48 89 c7             	mov    rdi,rax
   37ec4:	e8 97 c8 fc ff       	call   4760 <_Unwind_Resume@plt>
   37ec9:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   37ecd:	c9                   	leave  
   37ece:	c3                   	ret    

0000000000037ecf <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_max_size(std::allocator<objl::Mesh> const&)>:
   37ecf:	55                   	push   rbp
   37ed0:	48 89 e5             	mov    rbp,rsp
   37ed3:	48 83 ec 30          	sub    rsp,0x30
   37ed7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   37edb:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   37ee4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   37ee8:	31 c0                	xor    eax,eax
   37eea:	48 b8 5b b0 05 5b b0 05 5b 00 	movabs rax,0x5b05b05b05b05b
   37ef4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   37ef8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   37efc:	48 89 c7             	mov    rdi,rax
   37eff:	e8 56 08 00 00       	call   3875a <std::allocator_traits<std::allocator<objl::Mesh> >::max_size(std::allocator<objl::Mesh> const&)>
   37f04:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   37f08:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   37f0c:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   37f10:	48 89 d6             	mov    rsi,rdx
   37f13:	48 89 c7             	mov    rdi,rax
   37f16:	e8 2c d5 fe ff       	call   25447 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   37f1b:	48 8b 00             	mov    rax,QWORD PTR [rax]
   37f1e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   37f22:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   37f2b:	74 05                	je     37f32 <std::vector<objl::Mesh, std::allocator<objl::Mesh> >::_S_max_size(std::allocator<objl::Mesh> const&)+0x63>
   37f2d:	e8 ae c5 fc ff       	call   44e0 <__stack_chk_fail@plt>
   37f32:	c9                   	leave  
   37f33:	c3                   	ret    

0000000000037f34 <std::_Vector_base<objl::Mesh, std::allocator<objl::Mesh> >::_M_get_Tp_allocator() const>:
   37f34:	55                   	push   rbp
   37f35:	48 89 e5             	mov    rbp,rsp
   37f38:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37f3c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37f40:	5d                   	pop    rbp
   37f41:	c3                   	ret    

0000000000037f42 <__gnu_cxx::new_allocator<objl::Mesh>::_M_max_size() const>:
   37f42:	55                   	push   rbp
   37f43:	48 89 e5             	mov    rbp,rsp
   37f46:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37f4a:	48 b8 5b b0 05 5b b0 05 5b 00 	movabs rax,0x5b05b05b05b05b
   37f54:	5d                   	pop    rbp
   37f55:	c3                   	ret    

0000000000037f56 <__gnu_cxx::new_allocator<objl::Mesh>::allocate(unsigned long, void const*)>:
   37f56:	55                   	push   rbp
   37f57:	48 89 e5             	mov    rbp,rsp
   37f5a:	48 83 ec 20          	sub    rsp,0x20
   37f5e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   37f62:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   37f66:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   37f6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   37f6e:	48 89 c7             	mov    rdi,rax
   37f71:	e8 cc ff ff ff       	call   37f42 <__gnu_cxx::new_allocator<objl::Mesh>::_M_max_size() const>
   37f76:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   37f7a:	0f 97 c0             	seta   al
   37f7d:	0f b6 c0             	movzx  eax,al
   37f80:	48 85 c0             	test   rax,rax
   37f83:	0f 95 c0             	setne  al
   37f86:	84 c0                	test   al,al
   37f88:	74 1a                	je     37fa4 <__gnu_cxx::new_allocator<objl::Mesh>::allocate(unsigned long, void const*)+0x4e>
   37f8a:	48 b8 b6 60 0b b6 60 0b b6 00 	movabs rax,0xb60b60b60b60b6
   37f94:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   37f98:	76 05                	jbe    37f9f <__gnu_cxx::new_allocator<objl::Mesh>::allocate(unsigned long, void const*)+0x49>
   37f9a:	e8 71 c3 fc ff       	call   4310 <std::__throw_bad_array_new_length()@plt>
   37f9f:	e8 6c c1 fc ff       	call   4110 <std::__throw_bad_alloc()@plt>
   37fa4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   37fa8:	48 69 c0 68 01 00 00 	imul   rax,rax,0x168
   37faf:	48 89 c7             	mov    rdi,rax
   37fb2:	e8 79 c4 fc ff       	call   4430 <operator new(unsigned long)@plt>
   37fb7:	90                   	nop
   37fb8:	c9                   	leave  
   37fb9:	c3                   	ret    

0000000000037fba <objl::Mesh* std::__relocate_a<objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>:
   37fba:	55                   	push   rbp
   37fbb:	48 89 e5             	mov    rbp,rsp
   37fbe:	41 54                	push   r12
   37fc0:	53                   	push   rbx
   37fc1:	48 83 ec 20          	sub    rsp,0x20
   37fc5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   37fc9:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   37fcd:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   37fd1:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   37fd5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   37fd9:	48 89 c7             	mov    rdi,rax
   37fdc:	e8 93 07 00 00       	call   38774 <objl::Mesh* std::__niter_base<objl::Mesh*>(objl::Mesh*)>
   37fe1:	49 89 c4             	mov    r12,rax
   37fe4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   37fe8:	48 89 c7             	mov    rdi,rax
   37feb:	e8 84 07 00 00       	call   38774 <objl::Mesh* std::__niter_base<objl::Mesh*>(objl::Mesh*)>
   37ff0:	48 89 c3             	mov    rbx,rax
   37ff3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   37ff7:	48 89 c7             	mov    rdi,rax
   37ffa:	e8 75 07 00 00       	call   38774 <objl::Mesh* std::__niter_base<objl::Mesh*>(objl::Mesh*)>
   37fff:	48 89 c7             	mov    rdi,rax
   38002:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   38006:	48 89 c1             	mov    rcx,rax
   38009:	4c 89 e2             	mov    rdx,r12
   3800c:	48 89 de             	mov    rsi,rbx
   3800f:	e8 6e 07 00 00       	call   38782 <objl::Mesh* std::__relocate_a_1<objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   38014:	48 83 c4 20          	add    rsp,0x20
   38018:	5b                   	pop    rbx
   38019:	41 5c                	pop    r12
   3801b:	5d                   	pop    rbp
   3801c:	c3                   	ret    

000000000003801d <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_max_size(std::allocator<objl::Vector3> const&)>:
   3801d:	55                   	push   rbp
   3801e:	48 89 e5             	mov    rbp,rsp
   38021:	48 83 ec 30          	sub    rsp,0x30
   38025:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   38029:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   38032:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   38036:	31 c0                	xor    eax,eax
   38038:	48 b8 aa aa aa aa aa aa aa 0a 	movabs rax,0xaaaaaaaaaaaaaaa
   38042:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   38046:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3804a:	48 89 c7             	mov    rdi,rax
   3804d:	e8 a7 07 00 00       	call   387f9 <std::allocator_traits<std::allocator<objl::Vector3> >::max_size(std::allocator<objl::Vector3> const&)>
   38052:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   38056:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   3805a:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   3805e:	48 89 d6             	mov    rsi,rdx
   38061:	48 89 c7             	mov    rdi,rax
   38064:	e8 de d3 fe ff       	call   25447 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   38069:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3806c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   38070:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   38079:	74 05                	je     38080 <std::vector<objl::Vector3, std::allocator<objl::Vector3> >::_S_max_size(std::allocator<objl::Vector3> const&)+0x63>
   3807b:	e8 60 c4 fc ff       	call   44e0 <__stack_chk_fail@plt>
   38080:	c9                   	leave  
   38081:	c3                   	ret    

0000000000038082 <std::_Vector_base<objl::Vector3, std::allocator<objl::Vector3> >::_M_get_Tp_allocator() const>:
   38082:	55                   	push   rbp
   38083:	48 89 e5             	mov    rbp,rsp
   38086:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3808a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3808e:	5d                   	pop    rbp
   3808f:	c3                   	ret    

0000000000038090 <__gnu_cxx::new_allocator<objl::Vector3>::_M_max_size() const>:
   38090:	55                   	push   rbp
   38091:	48 89 e5             	mov    rbp,rsp
   38094:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38098:	48 b8 aa aa aa aa aa aa aa 0a 	movabs rax,0xaaaaaaaaaaaaaaa
   380a2:	5d                   	pop    rbp
   380a3:	c3                   	ret    

00000000000380a4 <__gnu_cxx::new_allocator<objl::Vector3>::allocate(unsigned long, void const*)>:
   380a4:	55                   	push   rbp
   380a5:	48 89 e5             	mov    rbp,rsp
   380a8:	48 83 ec 20          	sub    rsp,0x20
   380ac:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   380b0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   380b4:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   380b8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   380bc:	48 89 c7             	mov    rdi,rax
   380bf:	e8 cc ff ff ff       	call   38090 <__gnu_cxx::new_allocator<objl::Vector3>::_M_max_size() const>
   380c4:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   380c8:	0f 97 c0             	seta   al
   380cb:	0f b6 c0             	movzx  eax,al
   380ce:	48 85 c0             	test   rax,rax
   380d1:	0f 95 c0             	setne  al
   380d4:	84 c0                	test   al,al
   380d6:	74 1a                	je     380f2 <__gnu_cxx::new_allocator<objl::Vector3>::allocate(unsigned long, void const*)+0x4e>
   380d8:	48 b8 55 55 55 55 55 55 55 15 	movabs rax,0x1555555555555555
   380e2:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   380e6:	76 05                	jbe    380ed <__gnu_cxx::new_allocator<objl::Vector3>::allocate(unsigned long, void const*)+0x49>
   380e8:	e8 23 c2 fc ff       	call   4310 <std::__throw_bad_array_new_length()@plt>
   380ed:	e8 1e c0 fc ff       	call   4110 <std::__throw_bad_alloc()@plt>
   380f2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   380f6:	48 89 d0             	mov    rax,rdx
   380f9:	48 01 c0             	add    rax,rax
   380fc:	48 01 d0             	add    rax,rdx
   380ff:	48 c1 e0 02          	shl    rax,0x2
   38103:	48 89 c7             	mov    rdi,rax
   38106:	e8 25 c3 fc ff       	call   4430 <operator new(unsigned long)@plt>
   3810b:	90                   	nop
   3810c:	c9                   	leave  
   3810d:	c3                   	ret    

000000000003810e <objl::Vector3* std::__relocate_a<objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>:
   3810e:	55                   	push   rbp
   3810f:	48 89 e5             	mov    rbp,rsp
   38112:	41 54                	push   r12
   38114:	53                   	push   rbx
   38115:	48 83 ec 20          	sub    rsp,0x20
   38119:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3811d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   38121:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   38125:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   38129:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3812d:	48 89 c7             	mov    rdi,rax
   38130:	e8 de 06 00 00       	call   38813 <objl::Vector3* std::__niter_base<objl::Vector3*>(objl::Vector3*)>
   38135:	49 89 c4             	mov    r12,rax
   38138:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3813c:	48 89 c7             	mov    rdi,rax
   3813f:	e8 cf 06 00 00       	call   38813 <objl::Vector3* std::__niter_base<objl::Vector3*>(objl::Vector3*)>
   38144:	48 89 c3             	mov    rbx,rax
   38147:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3814b:	48 89 c7             	mov    rdi,rax
   3814e:	e8 c0 06 00 00       	call   38813 <objl::Vector3* std::__niter_base<objl::Vector3*>(objl::Vector3*)>
   38153:	48 89 c7             	mov    rdi,rax
   38156:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   3815a:	48 89 c1             	mov    rcx,rax
   3815d:	4c 89 e2             	mov    rdx,r12
   38160:	48 89 de             	mov    rsi,rbx
   38163:	e8 b9 06 00 00       	call   38821 <objl::Vector3* std::__relocate_a_1<objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>
   38168:	48 83 c4 20          	add    rsp,0x20
   3816c:	5b                   	pop    rbx
   3816d:	41 5c                	pop    r12
   3816f:	5d                   	pop    rbp
   38170:	c3                   	ret    

0000000000038171 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_max_size(std::allocator<objl::Vector2> const&)>:
   38171:	55                   	push   rbp
   38172:	48 89 e5             	mov    rbp,rsp
   38175:	48 83 ec 30          	sub    rsp,0x30
   38179:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   3817d:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   38186:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   3818a:	31 c0                	xor    eax,eax
   3818c:	48 b8 ff ff ff ff ff ff ff 0f 	movabs rax,0xfffffffffffffff
   38196:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   3819a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3819e:	48 89 c7             	mov    rdi,rax
   381a1:	e8 ec 06 00 00       	call   38892 <std::allocator_traits<std::allocator<objl::Vector2> >::max_size(std::allocator<objl::Vector2> const&)>
   381a6:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   381aa:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   381ae:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   381b2:	48 89 d6             	mov    rsi,rdx
   381b5:	48 89 c7             	mov    rdi,rax
   381b8:	e8 8a d2 fe ff       	call   25447 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   381bd:	48 8b 00             	mov    rax,QWORD PTR [rax]
   381c0:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   381c4:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   381cd:	74 05                	je     381d4 <std::vector<objl::Vector2, std::allocator<objl::Vector2> >::_S_max_size(std::allocator<objl::Vector2> const&)+0x63>
   381cf:	e8 0c c3 fc ff       	call   44e0 <__stack_chk_fail@plt>
   381d4:	c9                   	leave  
   381d5:	c3                   	ret    

00000000000381d6 <std::_Vector_base<objl::Vector2, std::allocator<objl::Vector2> >::_M_get_Tp_allocator() const>:
   381d6:	55                   	push   rbp
   381d7:	48 89 e5             	mov    rbp,rsp
   381da:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   381de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   381e2:	5d                   	pop    rbp
   381e3:	c3                   	ret    

00000000000381e4 <__gnu_cxx::new_allocator<objl::Vector2>::_M_max_size() const>:
   381e4:	55                   	push   rbp
   381e5:	48 89 e5             	mov    rbp,rsp
   381e8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   381ec:	48 b8 ff ff ff ff ff ff ff 0f 	movabs rax,0xfffffffffffffff
   381f6:	5d                   	pop    rbp
   381f7:	c3                   	ret    

00000000000381f8 <__gnu_cxx::new_allocator<objl::Vector2>::allocate(unsigned long, void const*)>:
   381f8:	55                   	push   rbp
   381f9:	48 89 e5             	mov    rbp,rsp
   381fc:	48 83 ec 20          	sub    rsp,0x20
   38200:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38204:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38208:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3820c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38210:	48 89 c7             	mov    rdi,rax
   38213:	e8 cc ff ff ff       	call   381e4 <__gnu_cxx::new_allocator<objl::Vector2>::_M_max_size() const>
   38218:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   3821c:	0f 97 c0             	seta   al
   3821f:	0f b6 c0             	movzx  eax,al
   38222:	48 85 c0             	test   rax,rax
   38225:	0f 95 c0             	setne  al
   38228:	84 c0                	test   al,al
   3822a:	74 1a                	je     38246 <__gnu_cxx::new_allocator<objl::Vector2>::allocate(unsigned long, void const*)+0x4e>
   3822c:	48 b8 ff ff ff ff ff ff ff 1f 	movabs rax,0x1fffffffffffffff
   38236:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   3823a:	76 05                	jbe    38241 <__gnu_cxx::new_allocator<objl::Vector2>::allocate(unsigned long, void const*)+0x49>
   3823c:	e8 cf c0 fc ff       	call   4310 <std::__throw_bad_array_new_length()@plt>
   38241:	e8 ca be fc ff       	call   4110 <std::__throw_bad_alloc()@plt>
   38246:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3824a:	48 c1 e0 03          	shl    rax,0x3
   3824e:	48 89 c7             	mov    rdi,rax
   38251:	e8 da c1 fc ff       	call   4430 <operator new(unsigned long)@plt>
   38256:	90                   	nop
   38257:	c9                   	leave  
   38258:	c3                   	ret    

0000000000038259 <objl::Vector2* std::__relocate_a<objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>:
   38259:	55                   	push   rbp
   3825a:	48 89 e5             	mov    rbp,rsp
   3825d:	41 54                	push   r12
   3825f:	53                   	push   rbx
   38260:	48 83 ec 20          	sub    rsp,0x20
   38264:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   38268:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3826c:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   38270:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   38274:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38278:	48 89 c7             	mov    rdi,rax
   3827b:	e8 2c 06 00 00       	call   388ac <objl::Vector2* std::__niter_base<objl::Vector2*>(objl::Vector2*)>
   38280:	49 89 c4             	mov    r12,rax
   38283:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   38287:	48 89 c7             	mov    rdi,rax
   3828a:	e8 1d 06 00 00       	call   388ac <objl::Vector2* std::__niter_base<objl::Vector2*>(objl::Vector2*)>
   3828f:	48 89 c3             	mov    rbx,rax
   38292:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38296:	48 89 c7             	mov    rdi,rax
   38299:	e8 0e 06 00 00       	call   388ac <objl::Vector2* std::__niter_base<objl::Vector2*>(objl::Vector2*)>
   3829e:	48 89 c7             	mov    rdi,rax
   382a1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   382a5:	48 89 c1             	mov    rcx,rax
   382a8:	4c 89 e2             	mov    rdx,r12
   382ab:	48 89 de             	mov    rsi,rbx
   382ae:	e8 07 06 00 00       	call   388ba <objl::Vector2* std::__relocate_a_1<objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>
   382b3:	48 83 c4 20          	add    rsp,0x20
   382b7:	5b                   	pop    rbx
   382b8:	41 5c                	pop    r12
   382ba:	5d                   	pop    rbp
   382bb:	c3                   	ret    

00000000000382bc <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_max_size(std::allocator<objl::Vertex> const&)>:
   382bc:	55                   	push   rbp
   382bd:	48 89 e5             	mov    rbp,rsp
   382c0:	48 83 ec 30          	sub    rsp,0x30
   382c4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   382c8:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   382d1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   382d5:	31 c0                	xor    eax,eax
   382d7:	48 b8 ff ff ff ff ff ff ff 03 	movabs rax,0x3ffffffffffffff
   382e1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   382e5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   382e9:	48 89 c7             	mov    rdi,rax
   382ec:	e8 3a 06 00 00       	call   3892b <std::allocator_traits<std::allocator<objl::Vertex> >::max_size(std::allocator<objl::Vertex> const&)>
   382f1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   382f5:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   382f9:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   382fd:	48 89 d6             	mov    rsi,rdx
   38300:	48 89 c7             	mov    rdi,rax
   38303:	e8 3f d1 fe ff       	call   25447 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   38308:	48 8b 00             	mov    rax,QWORD PTR [rax]
   3830b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   3830f:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   38318:	74 05                	je     3831f <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::_S_max_size(std::allocator<objl::Vertex> const&)+0x63>
   3831a:	e8 c1 c1 fc ff       	call   44e0 <__stack_chk_fail@plt>
   3831f:	c9                   	leave  
   38320:	c3                   	ret    

0000000000038321 <objl::Vertex* std::__relocate_a<objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>:
   38321:	55                   	push   rbp
   38322:	48 89 e5             	mov    rbp,rsp
   38325:	41 54                	push   r12
   38327:	53                   	push   rbx
   38328:	48 83 ec 20          	sub    rsp,0x20
   3832c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   38330:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   38334:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   38338:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   3833c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38340:	48 89 c7             	mov    rdi,rax
   38343:	e8 5f ee ff ff       	call   371a7 <objl::Vertex* std::__niter_base<objl::Vertex*>(objl::Vertex*)>
   38348:	49 89 c4             	mov    r12,rax
   3834b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   3834f:	48 89 c7             	mov    rdi,rax
   38352:	e8 50 ee ff ff       	call   371a7 <objl::Vertex* std::__niter_base<objl::Vertex*>(objl::Vertex*)>
   38357:	48 89 c3             	mov    rbx,rax
   3835a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3835e:	48 89 c7             	mov    rdi,rax
   38361:	e8 41 ee ff ff       	call   371a7 <objl::Vertex* std::__niter_base<objl::Vertex*>(objl::Vertex*)>
   38366:	48 89 c7             	mov    rdi,rax
   38369:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   3836d:	48 89 c1             	mov    rcx,rax
   38370:	4c 89 e2             	mov    rdx,r12
   38373:	48 89 de             	mov    rsi,rbx
   38376:	e8 ca 05 00 00       	call   38945 <objl::Vertex* std::__relocate_a_1<objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   3837b:	48 83 c4 20          	add    rsp,0x20
   3837f:	5b                   	pop    rbx
   38380:	41 5c                	pop    r12
   38382:	5d                   	pop    rbp
   38383:	c3                   	ret    

0000000000038384 <bool __gnu_cxx::operator!=<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >(__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&, __gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > > const&)>:
   38384:	55                   	push   rbp
   38385:	48 89 e5             	mov    rbp,rsp
   38388:	53                   	push   rbx
   38389:	48 83 ec 18          	sub    rsp,0x18
   3838d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   38391:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   38395:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38399:	48 89 c7             	mov    rdi,rax
   3839c:	e8 83 da ff ff       	call   35e24 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   383a1:	48 8b 18             	mov    rbx,QWORD PTR [rax]
   383a4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   383a8:	48 89 c7             	mov    rdi,rax
   383ab:	e8 74 da ff ff       	call   35e24 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::base() const>
   383b0:	48 8b 00             	mov    rax,QWORD PTR [rax]
   383b3:	48 39 c3             	cmp    rbx,rax
   383b6:	0f 95 c0             	setne  al
   383b9:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   383bd:	c9                   	leave  
   383be:	c3                   	ret    
   383bf:	90                   	nop

00000000000383c0 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator++()>:
   383c0:	55                   	push   rbp
   383c1:	48 89 e5             	mov    rbp,rsp
   383c4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   383c8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   383cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
   383cf:	48 8d 50 20          	lea    rdx,[rax+0x20]
   383d3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   383d7:	48 89 10             	mov    QWORD PTR [rax],rdx
   383da:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   383de:	5d                   	pop    rbp
   383df:	c3                   	ret    

00000000000383e0 <__gnu_cxx::__normal_iterator<objl::Vertex const*, std::vector<objl::Vertex, std::allocator<objl::Vertex> > >::operator*() const>:
   383e0:	55                   	push   rbp
   383e1:	48 89 e5             	mov    rbp,rsp
   383e4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   383e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   383ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
   383ef:	5d                   	pop    rbp
   383f0:	c3                   	ret    

00000000000383f1 <void std::_Construct<objl::Vertex, objl::Vertex const&>(objl::Vertex*, objl::Vertex const&)>:
   383f1:	55                   	push   rbp
   383f2:	48 89 e5             	mov    rbp,rsp
   383f5:	53                   	push   rbx
   383f6:	48 83 ec 18          	sub    rsp,0x18
   383fa:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   383fe:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   38402:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   38406:	48 89 c7             	mov    rdi,rax
   38409:	e8 14 e6 ff ff       	call   36a22 <objl::Vertex const& std::forward<objl::Vertex const&>(std::remove_reference<objl::Vertex const&>::type&)>
   3840e:	48 89 c3             	mov    rbx,rax
   38411:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38415:	48 89 c6             	mov    rsi,rax
   38418:	bf 20 00 00 00       	mov    edi,0x20
   3841d:	e8 8f cd fe ff       	call   251b1 <operator new(unsigned long, void*)>
   38422:	48 89 c1             	mov    rcx,rax
   38425:	48 8b 03             	mov    rax,QWORD PTR [rbx]
   38428:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
   3842c:	48 89 01             	mov    QWORD PTR [rcx],rax
   3842f:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   38433:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
   38437:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
   3843b:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   3843f:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
   38443:	90                   	nop
   38444:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   38448:	c9                   	leave  
   38449:	c3                   	ret    

000000000003844a <objl::Vertex* std::__copy_move_a1<true, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   3844a:	55                   	push   rbp
   3844b:	48 89 e5             	mov    rbp,rsp
   3844e:	48 83 ec 20          	sub    rsp,0x20
   38452:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38456:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3845a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   3845e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   38462:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   38466:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3846a:	48 89 ce             	mov    rsi,rcx
   3846d:	48 89 c7             	mov    rdi,rax
   38470:	e8 41 05 00 00       	call   389b6 <objl::Vertex* std::__copy_move_a2<true, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>
   38475:	c9                   	leave  
   38476:	c3                   	ret    

0000000000038477 <std::vector<objl::Material, std::allocator<objl::Material> >::_S_max_size(std::allocator<objl::Material> const&)>:
   38477:	55                   	push   rbp
   38478:	48 89 e5             	mov    rbp,rsp
   3847b:	48 83 ec 30          	sub    rsp,0x30
   3847f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   38483:	64 48 8b 04 25 28 00 00 00 	mov    rax,QWORD PTR fs:0x28
   3848c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   38490:	31 c0                	xor    eax,eax
   38492:	48 b8 75 50 07 75 50 07 75 00 	movabs rax,0x75075075075075
   3849c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   384a0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   384a4:	48 89 c7             	mov    rdi,rax
   384a7:	e8 37 05 00 00       	call   389e3 <std::allocator_traits<std::allocator<objl::Material> >::max_size(std::allocator<objl::Material> const&)>
   384ac:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
   384b0:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
   384b4:	48 8d 45 e8          	lea    rax,[rbp-0x18]
   384b8:	48 89 d6             	mov    rsi,rdx
   384bb:	48 89 c7             	mov    rdi,rax
   384be:	e8 84 cf fe ff       	call   25447 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
   384c3:	48 8b 00             	mov    rax,QWORD PTR [rax]
   384c6:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   384ca:	64 48 2b 14 25 28 00 00 00 	sub    rdx,QWORD PTR fs:0x28
   384d3:	74 05                	je     384da <std::vector<objl::Material, std::allocator<objl::Material> >::_S_max_size(std::allocator<objl::Material> const&)+0x63>
   384d5:	e8 06 c0 fc ff       	call   44e0 <__stack_chk_fail@plt>
   384da:	c9                   	leave  
   384db:	c3                   	ret    

00000000000384dc <std::_Vector_base<objl::Material, std::allocator<objl::Material> >::_M_get_Tp_allocator() const>:
   384dc:	55                   	push   rbp
   384dd:	48 89 e5             	mov    rbp,rsp
   384e0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   384e4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   384e8:	5d                   	pop    rbp
   384e9:	c3                   	ret    

00000000000384ea <__gnu_cxx::new_allocator<objl::Material>::_M_max_size() const>:
   384ea:	55                   	push   rbp
   384eb:	48 89 e5             	mov    rbp,rsp
   384ee:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   384f2:	48 b8 75 50 07 75 50 07 75 00 	movabs rax,0x75075075075075
   384fc:	5d                   	pop    rbp
   384fd:	c3                   	ret    

00000000000384fe <__gnu_cxx::new_allocator<objl::Material>::allocate(unsigned long, void const*)>:
   384fe:	55                   	push   rbp
   384ff:	48 89 e5             	mov    rbp,rsp
   38502:	48 83 ec 20          	sub    rsp,0x20
   38506:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3850a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   3850e:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38512:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38516:	48 89 c7             	mov    rdi,rax
   38519:	e8 cc ff ff ff       	call   384ea <__gnu_cxx::new_allocator<objl::Material>::_M_max_size() const>
   3851e:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   38522:	0f 97 c0             	seta   al
   38525:	0f b6 c0             	movzx  eax,al
   38528:	48 85 c0             	test   rax,rax
   3852b:	0f 95 c0             	setne  al
   3852e:	84 c0                	test   al,al
   38530:	74 1a                	je     3854c <__gnu_cxx::new_allocator<objl::Material>::allocate(unsigned long, void const*)+0x4e>
   38532:	48 b8 ea a0 0e ea a0 0e ea 00 	movabs rax,0xea0ea0ea0ea0ea
   3853c:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
   38540:	76 05                	jbe    38547 <__gnu_cxx::new_allocator<objl::Material>::allocate(unsigned long, void const*)+0x49>
   38542:	e8 c9 bd fc ff       	call   4310 <std::__throw_bad_array_new_length()@plt>
   38547:	e8 c4 bb fc ff       	call   4110 <std::__throw_bad_alloc()@plt>
   3854c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38550:	48 69 c0 18 01 00 00 	imul   rax,rax,0x118
   38557:	48 89 c7             	mov    rdi,rax
   3855a:	e8 d1 be fc ff       	call   4430 <operator new(unsigned long)@plt>
   3855f:	90                   	nop
   38560:	c9                   	leave  
   38561:	c3                   	ret    

0000000000038562 <objl::Material* std::__relocate_a<objl::Material*, objl::Material*, std::allocator<objl::Material> >(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)>:
   38562:	55                   	push   rbp
   38563:	48 89 e5             	mov    rbp,rsp
   38566:	41 54                	push   r12
   38568:	53                   	push   rbx
   38569:	48 83 ec 20          	sub    rsp,0x20
   3856d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   38571:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   38575:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   38579:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
   3857d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38581:	48 89 c7             	mov    rdi,rax
   38584:	e8 74 04 00 00       	call   389fd <objl::Material* std::__niter_base<objl::Material*>(objl::Material*)>
   38589:	49 89 c4             	mov    r12,rax
   3858c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   38590:	48 89 c7             	mov    rdi,rax
   38593:	e8 65 04 00 00       	call   389fd <objl::Material* std::__niter_base<objl::Material*>(objl::Material*)>
   38598:	48 89 c3             	mov    rbx,rax
   3859b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3859f:	48 89 c7             	mov    rdi,rax
   385a2:	e8 56 04 00 00       	call   389fd <objl::Material* std::__niter_base<objl::Material*>(objl::Material*)>
   385a7:	48 89 c7             	mov    rdi,rax
   385aa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
   385ae:	48 89 c1             	mov    rcx,rax
   385b1:	4c 89 e2             	mov    rdx,r12
   385b4:	48 89 de             	mov    rsi,rbx
   385b7:	e8 4f 04 00 00       	call   38a0b <objl::Material* std::__relocate_a_1<objl::Material*, objl::Material*, std::allocator<objl::Material> >(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)>
   385bc:	48 83 c4 20          	add    rsp,0x20
   385c0:	5b                   	pop    rbx
   385c1:	41 5c                	pop    r12
   385c3:	5d                   	pop    rbp
   385c4:	c3                   	ret    

00000000000385c5 <objl::Vertex* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<objl::Vertex>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>:
   385c5:	55                   	push   rbp
   385c6:	48 89 e5             	mov    rbp,rsp
   385c9:	48 83 ec 30          	sub    rsp,0x30
   385cd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   385d1:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   385d5:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   385d9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   385dd:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   385e1:	48 c1 f8 05          	sar    rax,0x5
   385e5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   385e9:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   385ee:	74 1e                	je     3860e <objl::Vertex* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<objl::Vertex>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)+0x49>
   385f0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   385f4:	48 c1 e0 05          	shl    rax,0x5
   385f8:	48 89 c2             	mov    rdx,rax
   385fb:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   385ff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38603:	48 89 ce             	mov    rsi,rcx
   38606:	48 89 c7             	mov    rdi,rax
   38609:	e8 f2 c0 fc ff       	call   4700 <memmove@plt>
   3860e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38612:	48 c1 e0 05          	shl    rax,0x5
   38616:	48 89 c2             	mov    rdx,rax
   38619:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3861d:	48 01 d0             	add    rax,rdx
   38620:	c9                   	leave  
   38621:	c3                   	ret    

0000000000038622 <objl::Vertex& std::forward<objl::Vertex&>(std::remove_reference<objl::Vertex&>::type&)>:
   38622:	55                   	push   rbp
   38623:	48 89 e5             	mov    rbp,rsp
   38626:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3862a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3862e:	5d                   	pop    rbp
   3862f:	c3                   	ret    

0000000000038630 <unsigned int* std::copy<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>:
   38630:	55                   	push   rbp
   38631:	48 89 e5             	mov    rbp,rsp
   38634:	53                   	push   rbx
   38635:	48 83 ec 28          	sub    rsp,0x28
   38639:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3863d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   38641:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   38645:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   38649:	48 89 c7             	mov    rdi,rax
   3864c:	e8 e7 d2 ff ff       	call   35938 <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__miter_base<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   38651:	48 89 c3             	mov    rbx,rax
   38654:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38658:	48 89 c7             	mov    rdi,rax
   3865b:	e8 d8 d2 ff ff       	call   35938 <__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > std::__miter_base<__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   38660:	48 89 c1             	mov    rcx,rax
   38663:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38667:	48 89 c2             	mov    rdx,rax
   3866a:	48 89 de             	mov    rsi,rbx
   3866d:	48 89 cf             	mov    rdi,rcx
   38670:	e8 0d 04 00 00       	call   38a82 <unsigned int* std::__copy_move_a<false, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>
   38675:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   38679:	c9                   	leave  
   3867a:	c3                   	ret    

000000000003867b <unsigned int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<unsigned int>(unsigned int const*, unsigned int const*, unsigned int*)>:
   3867b:	55                   	push   rbp
   3867c:	48 89 e5             	mov    rbp,rsp
   3867f:	48 83 ec 30          	sub    rsp,0x30
   38683:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   38687:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3868b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   3868f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   38693:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   38697:	48 c1 f8 02          	sar    rax,0x2
   3869b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   3869f:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   386a4:	74 1f                	je     386c5 <unsigned int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<unsigned int>(unsigned int const*, unsigned int const*, unsigned int*)+0x4a>
   386a6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   386aa:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   386b2:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   386b6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   386ba:	48 89 ce             	mov    rsi,rcx
   386bd:	48 89 c7             	mov    rdi,rax
   386c0:	e8 3b c0 fc ff       	call   4700 <memmove@plt>
   386c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   386c9:	48 8d 14 85 00 00 00 00 	lea    rdx,[rax*4+0x0]
   386d1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   386d5:	48 01 d0             	add    rax,rdx
   386d8:	c9                   	leave  
   386d9:	c3                   	ret    

00000000000386da <std::allocator_traits<std::allocator<unsigned int> >::select_on_container_copy_construction(std::allocator<unsigned int> const&)>:
   386da:	55                   	push   rbp
   386db:	48 89 e5             	mov    rbp,rsp
   386de:	48 83 ec 10          	sub    rsp,0x10
   386e2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   386e6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   386ea:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   386ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   386f2:	48 89 d6             	mov    rsi,rdx
   386f5:	48 89 c7             	mov    rdi,rax
   386f8:	e8 0f ef ff ff       	call   3760c <std::allocator<unsigned int>::allocator(std::allocator<unsigned int> const&)>
   386fd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38701:	c9                   	leave  
   38702:	c3                   	ret    
   38703:	90                   	nop

0000000000038704 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_create_storage(unsigned long)>:
   38704:	55                   	push   rbp
   38705:	48 89 e5             	mov    rbp,rsp
   38708:	48 83 ec 10          	sub    rsp,0x10
   3870c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38710:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38714:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38718:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3871c:	48 89 d6             	mov    rsi,rdx
   3871f:	48 89 c7             	mov    rdi,rax
   38722:	e8 87 13 ff ff       	call   29aae <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_M_allocate(unsigned long)>
   38727:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
   3872b:	48 89 02             	mov    QWORD PTR [rdx],rax
   3872e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38732:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   38735:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38739:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   3873d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38741:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   38744:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38748:	48 c1 e0 02          	shl    rax,0x2
   3874c:	48 01 c2             	add    rdx,rax
   3874f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38753:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   38757:	90                   	nop
   38758:	c9                   	leave  
   38759:	c3                   	ret    

000000000003875a <std::allocator_traits<std::allocator<objl::Mesh> >::max_size(std::allocator<objl::Mesh> const&)>:
   3875a:	55                   	push   rbp
   3875b:	48 89 e5             	mov    rbp,rsp
   3875e:	48 83 ec 10          	sub    rsp,0x10
   38762:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38766:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3876a:	48 89 c7             	mov    rdi,rax
   3876d:	e8 7a 03 00 00       	call   38aec <__gnu_cxx::new_allocator<objl::Mesh>::max_size() const>
   38772:	c9                   	leave  
   38773:	c3                   	ret    

0000000000038774 <objl::Mesh* std::__niter_base<objl::Mesh*>(objl::Mesh*)>:
   38774:	55                   	push   rbp
   38775:	48 89 e5             	mov    rbp,rsp
   38778:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3877c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38780:	5d                   	pop    rbp
   38781:	c3                   	ret    

0000000000038782 <objl::Mesh* std::__relocate_a_1<objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>:
   38782:	55                   	push   rbp
   38783:	48 89 e5             	mov    rbp,rsp
   38786:	53                   	push   rbx
   38787:	48 83 ec 38          	sub    rsp,0x38
   3878b:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   3878f:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   38793:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   38797:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   3879b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3879f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   387a3:	eb 40                	jmp    387e5 <objl::Mesh* std::__relocate_a_1<objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)+0x63>
   387a5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   387a9:	48 89 c7             	mov    rdi,rax
   387ac:	e8 d0 f5 ff ff       	call   37d81 <objl::Mesh* std::__addressof<objl::Mesh>(objl::Mesh&)>
   387b1:	48 89 c3             	mov    rbx,rax
   387b4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   387b8:	48 89 c7             	mov    rdi,rax
   387bb:	e8 c1 f5 ff ff       	call   37d81 <objl::Mesh* std::__addressof<objl::Mesh>(objl::Mesh&)>
   387c0:	48 89 c1             	mov    rcx,rax
   387c3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   387c7:	48 89 c2             	mov    rdx,rax
   387ca:	48 89 de             	mov    rsi,rbx
   387cd:	48 89 cf             	mov    rdi,rcx
   387d0:	e8 31 03 00 00       	call   38b06 <void std::__relocate_object_a<objl::Mesh, objl::Mesh, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>
   387d5:	48 81 45 d8 68 01 00 00 	add    QWORD PTR [rbp-0x28],0x168
   387dd:	48 81 45 e8 68 01 00 00 	add    QWORD PTR [rbp-0x18],0x168
   387e5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   387e9:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
   387ed:	75 b6                	jne    387a5 <objl::Mesh* std::__relocate_a_1<objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)+0x23>
   387ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   387f3:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   387f7:	c9                   	leave  
   387f8:	c3                   	ret    

00000000000387f9 <std::allocator_traits<std::allocator<objl::Vector3> >::max_size(std::allocator<objl::Vector3> const&)>:
   387f9:	55                   	push   rbp
   387fa:	48 89 e5             	mov    rbp,rsp
   387fd:	48 83 ec 10          	sub    rsp,0x10
   38801:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38805:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38809:	48 89 c7             	mov    rdi,rax
   3880c:	e8 4d 03 00 00       	call   38b5e <__gnu_cxx::new_allocator<objl::Vector3>::max_size() const>
   38811:	c9                   	leave  
   38812:	c3                   	ret    

0000000000038813 <objl::Vector3* std::__niter_base<objl::Vector3*>(objl::Vector3*)>:
   38813:	55                   	push   rbp
   38814:	48 89 e5             	mov    rbp,rsp
   38817:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3881b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3881f:	5d                   	pop    rbp
   38820:	c3                   	ret    

0000000000038821 <objl::Vector3* std::__relocate_a_1<objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>:
   38821:	55                   	push   rbp
   38822:	48 89 e5             	mov    rbp,rsp
   38825:	53                   	push   rbx
   38826:	48 83 ec 38          	sub    rsp,0x38
   3882a:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   3882e:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   38832:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   38836:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   3883a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   3883e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   38842:	eb 3a                	jmp    3887e <objl::Vector3* std::__relocate_a_1<objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)+0x5d>
   38844:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38848:	48 89 c7             	mov    rdi,rax
   3884b:	e8 28 03 00 00       	call   38b78 <objl::Vector3* std::__addressof<objl::Vector3>(objl::Vector3&)>
   38850:	48 89 c3             	mov    rbx,rax
   38853:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38857:	48 89 c7             	mov    rdi,rax
   3885a:	e8 19 03 00 00       	call   38b78 <objl::Vector3* std::__addressof<objl::Vector3>(objl::Vector3&)>
   3885f:	48 89 c1             	mov    rcx,rax
   38862:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   38866:	48 89 c2             	mov    rdx,rax
   38869:	48 89 de             	mov    rsi,rbx
   3886c:	48 89 cf             	mov    rdi,rcx
   3886f:	e8 12 03 00 00       	call   38b86 <void std::__relocate_object_a<objl::Vector3, objl::Vector3, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>
   38874:	48 83 45 d8 0c       	add    QWORD PTR [rbp-0x28],0xc
   38879:	48 83 45 e8 0c       	add    QWORD PTR [rbp-0x18],0xc
   3887e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38882:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
   38886:	75 bc                	jne    38844 <objl::Vector3* std::__relocate_a_1<objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)+0x23>
   38888:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3888c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   38890:	c9                   	leave  
   38891:	c3                   	ret    

0000000000038892 <std::allocator_traits<std::allocator<objl::Vector2> >::max_size(std::allocator<objl::Vector2> const&)>:
   38892:	55                   	push   rbp
   38893:	48 89 e5             	mov    rbp,rsp
   38896:	48 83 ec 10          	sub    rsp,0x10
   3889a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   3889e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   388a2:	48 89 c7             	mov    rdi,rax
   388a5:	e8 34 03 00 00       	call   38bde <__gnu_cxx::new_allocator<objl::Vector2>::max_size() const>
   388aa:	c9                   	leave  
   388ab:	c3                   	ret    

00000000000388ac <objl::Vector2* std::__niter_base<objl::Vector2*>(objl::Vector2*)>:
   388ac:	55                   	push   rbp
   388ad:	48 89 e5             	mov    rbp,rsp
   388b0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   388b4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   388b8:	5d                   	pop    rbp
   388b9:	c3                   	ret    

00000000000388ba <objl::Vector2* std::__relocate_a_1<objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>:
   388ba:	55                   	push   rbp
   388bb:	48 89 e5             	mov    rbp,rsp
   388be:	53                   	push   rbx
   388bf:	48 83 ec 38          	sub    rsp,0x38
   388c3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   388c7:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   388cb:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   388cf:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   388d3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   388d7:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   388db:	eb 3a                	jmp    38917 <objl::Vector2* std::__relocate_a_1<objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)+0x5d>
   388dd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   388e1:	48 89 c7             	mov    rdi,rax
   388e4:	e8 0f 03 00 00       	call   38bf8 <objl::Vector2* std::__addressof<objl::Vector2>(objl::Vector2&)>
   388e9:	48 89 c3             	mov    rbx,rax
   388ec:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   388f0:	48 89 c7             	mov    rdi,rax
   388f3:	e8 00 03 00 00       	call   38bf8 <objl::Vector2* std::__addressof<objl::Vector2>(objl::Vector2&)>
   388f8:	48 89 c1             	mov    rcx,rax
   388fb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   388ff:	48 89 c2             	mov    rdx,rax
   38902:	48 89 de             	mov    rsi,rbx
   38905:	48 89 cf             	mov    rdi,rcx
   38908:	e8 f9 02 00 00       	call   38c06 <void std::__relocate_object_a<objl::Vector2, objl::Vector2, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>
   3890d:	48 83 45 d8 08       	add    QWORD PTR [rbp-0x28],0x8
   38912:	48 83 45 e8 08       	add    QWORD PTR [rbp-0x18],0x8
   38917:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3891b:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
   3891f:	75 bc                	jne    388dd <objl::Vector2* std::__relocate_a_1<objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)+0x23>
   38921:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38925:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   38929:	c9                   	leave  
   3892a:	c3                   	ret    

000000000003892b <std::allocator_traits<std::allocator<objl::Vertex> >::max_size(std::allocator<objl::Vertex> const&)>:
   3892b:	55                   	push   rbp
   3892c:	48 89 e5             	mov    rbp,rsp
   3892f:	48 83 ec 10          	sub    rsp,0x10
   38933:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38937:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3893b:	48 89 c7             	mov    rdi,rax
   3893e:	e8 1b 03 00 00       	call   38c5e <__gnu_cxx::new_allocator<objl::Vertex>::max_size() const>
   38943:	c9                   	leave  
   38944:	c3                   	ret    

0000000000038945 <objl::Vertex* std::__relocate_a_1<objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>:
   38945:	55                   	push   rbp
   38946:	48 89 e5             	mov    rbp,rsp
   38949:	53                   	push   rbx
   3894a:	48 83 ec 38          	sub    rsp,0x38
   3894e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   38952:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   38956:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   3895a:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   3895e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   38962:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   38966:	eb 3a                	jmp    389a2 <objl::Vertex* std::__relocate_a_1<objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)+0x5d>
   38968:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   3896c:	48 89 c7             	mov    rdi,rax
   3896f:	e8 bd f2 ff ff       	call   37c31 <objl::Vertex* std::__addressof<objl::Vertex>(objl::Vertex&)>
   38974:	48 89 c3             	mov    rbx,rax
   38977:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   3897b:	48 89 c7             	mov    rdi,rax
   3897e:	e8 ae f2 ff ff       	call   37c31 <objl::Vertex* std::__addressof<objl::Vertex>(objl::Vertex&)>
   38983:	48 89 c1             	mov    rcx,rax
   38986:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   3898a:	48 89 c2             	mov    rdx,rax
   3898d:	48 89 de             	mov    rsi,rbx
   38990:	48 89 cf             	mov    rdi,rcx
   38993:	e8 e0 02 00 00       	call   38c78 <void std::__relocate_object_a<objl::Vertex, objl::Vertex, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>
   38998:	48 83 45 d8 20       	add    QWORD PTR [rbp-0x28],0x20
   3899d:	48 83 45 e8 20       	add    QWORD PTR [rbp-0x18],0x20
   389a2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   389a6:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
   389aa:	75 bc                	jne    38968 <objl::Vertex* std::__relocate_a_1<objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)+0x23>
   389ac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   389b0:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   389b4:	c9                   	leave  
   389b5:	c3                   	ret    

00000000000389b6 <objl::Vertex* std::__copy_move_a2<true, objl::Vertex*, objl::Vertex*>(objl::Vertex*, objl::Vertex*, objl::Vertex*)>:
   389b6:	55                   	push   rbp
   389b7:	48 89 e5             	mov    rbp,rsp
   389ba:	48 83 ec 20          	sub    rsp,0x20
   389be:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   389c2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   389c6:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   389ca:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
   389ce:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   389d2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   389d6:	48 89 ce             	mov    rsi,rcx
   389d9:	48 89 c7             	mov    rdi,rax
   389dc:	e8 ee 02 00 00       	call   38ccf <objl::Vertex* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<objl::Vertex>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>
   389e1:	c9                   	leave  
   389e2:	c3                   	ret    

00000000000389e3 <std::allocator_traits<std::allocator<objl::Material> >::max_size(std::allocator<objl::Material> const&)>:
   389e3:	55                   	push   rbp
   389e4:	48 89 e5             	mov    rbp,rsp
   389e7:	48 83 ec 10          	sub    rsp,0x10
   389eb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   389ef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   389f3:	48 89 c7             	mov    rdi,rax
   389f6:	e8 31 03 00 00       	call   38d2c <__gnu_cxx::new_allocator<objl::Material>::max_size() const>
   389fb:	c9                   	leave  
   389fc:	c3                   	ret    

00000000000389fd <objl::Material* std::__niter_base<objl::Material*>(objl::Material*)>:
   389fd:	55                   	push   rbp
   389fe:	48 89 e5             	mov    rbp,rsp
   38a01:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38a05:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38a09:	5d                   	pop    rbp
   38a0a:	c3                   	ret    

0000000000038a0b <objl::Material* std::__relocate_a_1<objl::Material*, objl::Material*, std::allocator<objl::Material> >(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)>:
   38a0b:	55                   	push   rbp
   38a0c:	48 89 e5             	mov    rbp,rsp
   38a0f:	53                   	push   rbx
   38a10:	48 83 ec 38          	sub    rsp,0x38
   38a14:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   38a18:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   38a1c:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
   38a20:	48 89 4d c0          	mov    QWORD PTR [rbp-0x40],rcx
   38a24:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
   38a28:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
   38a2c:	eb 40                	jmp    38a6e <objl::Material* std::__relocate_a_1<objl::Material*, objl::Material*, std::allocator<objl::Material> >(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)+0x63>
   38a2e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38a32:	48 89 c7             	mov    rdi,rax
   38a35:	e8 70 f3 ff ff       	call   37daa <objl::Material* std::__addressof<objl::Material>(objl::Material&)>
   38a3a:	48 89 c3             	mov    rbx,rax
   38a3d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38a41:	48 89 c7             	mov    rdi,rax
   38a44:	e8 61 f3 ff ff       	call   37daa <objl::Material* std::__addressof<objl::Material>(objl::Material&)>
   38a49:	48 89 c1             	mov    rcx,rax
   38a4c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
   38a50:	48 89 c2             	mov    rdx,rax
   38a53:	48 89 de             	mov    rsi,rbx
   38a56:	48 89 cf             	mov    rdi,rcx
   38a59:	e8 e8 02 00 00       	call   38d46 <void std::__relocate_object_a<objl::Material, objl::Material, std::allocator<objl::Material> >(objl::Material*, objl::Material*, std::allocator<objl::Material>&)>
   38a5e:	48 81 45 d8 18 01 00 00 	add    QWORD PTR [rbp-0x28],0x118
   38a66:	48 81 45 e8 18 01 00 00 	add    QWORD PTR [rbp-0x18],0x118
   38a6e:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38a72:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
   38a76:	75 b6                	jne    38a2e <objl::Material* std::__relocate_a_1<objl::Material*, objl::Material*, std::allocator<objl::Material> >(objl::Material*, objl::Material*, objl::Material*, std::allocator<objl::Material>&)+0x23>
   38a78:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38a7c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   38a80:	c9                   	leave  
   38a81:	c3                   	ret    

0000000000038a82 <unsigned int* std::__copy_move_a<false, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*>(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int*)>:
   38a82:	55                   	push   rbp
   38a83:	48 89 e5             	mov    rbp,rsp
   38a86:	41 54                	push   r12
   38a88:	53                   	push   rbx
   38a89:	48 83 ec 20          	sub    rsp,0x20
   38a8d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   38a91:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   38a95:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   38a99:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38a9d:	48 89 c7             	mov    rdi,rax
   38aa0:	e8 a1 30 ff ff       	call   2bb46 <unsigned int* std::__niter_base<unsigned int*>(unsigned int*)>
   38aa5:	49 89 c4             	mov    r12,rax
   38aa8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   38aac:	48 89 c7             	mov    rdi,rax
   38aaf:	e8 c7 e7 ff ff       	call   3727b <unsigned int const* std::__niter_base<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   38ab4:	48 89 c3             	mov    rbx,rax
   38ab7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38abb:	48 89 c7             	mov    rdi,rax
   38abe:	e8 b8 e7 ff ff       	call   3727b <unsigned int const* std::__niter_base<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >(__gnu_cxx::__normal_iterator<unsigned int const*, std::vector<unsigned int, std::allocator<unsigned int> > >)>
   38ac3:	4c 89 e2             	mov    rdx,r12
   38ac6:	48 89 de             	mov    rsi,rbx
   38ac9:	48 89 c7             	mov    rdi,rax
   38acc:	e8 e4 e7 ff ff       	call   372b5 <unsigned int* std::__copy_move_a1<false, unsigned int const*, unsigned int*>(unsigned int const*, unsigned int const*, unsigned int*)>
   38ad1:	48 89 c2             	mov    rdx,rax
   38ad4:	48 8d 45 d8          	lea    rax,[rbp-0x28]
   38ad8:	48 89 d6             	mov    rsi,rdx
   38adb:	48 89 c7             	mov    rdi,rax
   38ade:	e8 79 e8 ff ff       	call   3735c <unsigned int* std::__niter_wrap<unsigned int*>(unsigned int* const&, unsigned int*)>
   38ae3:	48 83 c4 20          	add    rsp,0x20
   38ae7:	5b                   	pop    rbx
   38ae8:	41 5c                	pop    r12
   38aea:	5d                   	pop    rbp
   38aeb:	c3                   	ret    

0000000000038aec <__gnu_cxx::new_allocator<objl::Mesh>::max_size() const>:
   38aec:	55                   	push   rbp
   38aed:	48 89 e5             	mov    rbp,rsp
   38af0:	48 83 ec 10          	sub    rsp,0x10
   38af4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38af8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38afc:	48 89 c7             	mov    rdi,rax
   38aff:	e8 3e f4 ff ff       	call   37f42 <__gnu_cxx::new_allocator<objl::Mesh>::_M_max_size() const>
   38b04:	c9                   	leave  
   38b05:	c3                   	ret    

0000000000038b06 <void std::__relocate_object_a<objl::Mesh, objl::Mesh, std::allocator<objl::Mesh> >(objl::Mesh*, objl::Mesh*, std::allocator<objl::Mesh>&)>:
   38b06:	55                   	push   rbp
   38b07:	48 89 e5             	mov    rbp,rsp
   38b0a:	48 83 ec 20          	sub    rsp,0x20
   38b0e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38b12:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38b16:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38b1a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38b1e:	48 89 c7             	mov    rdi,rax
   38b21:	e8 77 02 00 00       	call   38d9d <std::remove_reference<objl::Mesh&>::type&& std::move<objl::Mesh&>(objl::Mesh&)>
   38b26:	48 89 c2             	mov    rdx,rax
   38b29:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   38b2d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38b31:	48 89 ce             	mov    rsi,rcx
   38b34:	48 89 c7             	mov    rdi,rax
   38b37:	e8 6f 02 00 00       	call   38dab <void std::allocator_traits<std::allocator<objl::Mesh> >::construct<objl::Mesh, objl::Mesh>(std::allocator<objl::Mesh>&, objl::Mesh*, objl::Mesh&&)>
   38b3c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38b40:	48 89 c7             	mov    rdi,rax
   38b43:	e8 39 f2 ff ff       	call   37d81 <objl::Mesh* std::__addressof<objl::Mesh>(objl::Mesh&)>
   38b48:	48 89 c2             	mov    rdx,rax
   38b4b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38b4f:	48 89 d6             	mov    rsi,rdx
   38b52:	48 89 c7             	mov    rdi,rax
   38b55:	e8 93 d9 ff ff       	call   364ed <void std::allocator_traits<std::allocator<objl::Mesh> >::destroy<objl::Mesh>(std::allocator<objl::Mesh>&, objl::Mesh*)>
   38b5a:	90                   	nop
   38b5b:	c9                   	leave  
   38b5c:	c3                   	ret    
   38b5d:	90                   	nop

0000000000038b5e <__gnu_cxx::new_allocator<objl::Vector3>::max_size() const>:
   38b5e:	55                   	push   rbp
   38b5f:	48 89 e5             	mov    rbp,rsp
   38b62:	48 83 ec 10          	sub    rsp,0x10
   38b66:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38b6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38b6e:	48 89 c7             	mov    rdi,rax
   38b71:	e8 1a f5 ff ff       	call   38090 <__gnu_cxx::new_allocator<objl::Vector3>::_M_max_size() const>
   38b76:	c9                   	leave  
   38b77:	c3                   	ret    

0000000000038b78 <objl::Vector3* std::__addressof<objl::Vector3>(objl::Vector3&)>:
   38b78:	55                   	push   rbp
   38b79:	48 89 e5             	mov    rbp,rsp
   38b7c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38b80:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38b84:	5d                   	pop    rbp
   38b85:	c3                   	ret    

0000000000038b86 <void std::__relocate_object_a<objl::Vector3, objl::Vector3, std::allocator<objl::Vector3> >(objl::Vector3*, objl::Vector3*, std::allocator<objl::Vector3>&)>:
   38b86:	55                   	push   rbp
   38b87:	48 89 e5             	mov    rbp,rsp
   38b8a:	48 83 ec 20          	sub    rsp,0x20
   38b8e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38b92:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38b96:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38b9a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38b9e:	48 89 c7             	mov    rdi,rax
   38ba1:	e8 3e 02 00 00       	call   38de4 <std::remove_reference<objl::Vector3&>::type&& std::move<objl::Vector3&>(objl::Vector3&)>
   38ba6:	48 89 c2             	mov    rdx,rax
   38ba9:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   38bad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38bb1:	48 89 ce             	mov    rsi,rcx
   38bb4:	48 89 c7             	mov    rdi,rax
   38bb7:	e8 36 02 00 00       	call   38df2 <void std::allocator_traits<std::allocator<objl::Vector3> >::construct<objl::Vector3, objl::Vector3>(std::allocator<objl::Vector3>&, objl::Vector3*, objl::Vector3&&)>
   38bbc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38bc0:	48 89 c7             	mov    rdi,rax
   38bc3:	e8 b0 ff ff ff       	call   38b78 <objl::Vector3* std::__addressof<objl::Vector3>(objl::Vector3&)>
   38bc8:	48 89 c2             	mov    rdx,rax
   38bcb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38bcf:	48 89 d6             	mov    rsi,rdx
   38bd2:	48 89 c7             	mov    rdi,rax
   38bd5:	e8 a6 db ff ff       	call   36780 <void std::allocator_traits<std::allocator<objl::Vector3> >::destroy<objl::Vector3>(std::allocator<objl::Vector3>&, objl::Vector3*)>
   38bda:	90                   	nop
   38bdb:	c9                   	leave  
   38bdc:	c3                   	ret    
   38bdd:	90                   	nop

0000000000038bde <__gnu_cxx::new_allocator<objl::Vector2>::max_size() const>:
   38bde:	55                   	push   rbp
   38bdf:	48 89 e5             	mov    rbp,rsp
   38be2:	48 83 ec 10          	sub    rsp,0x10
   38be6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38bea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38bee:	48 89 c7             	mov    rdi,rax
   38bf1:	e8 ee f5 ff ff       	call   381e4 <__gnu_cxx::new_allocator<objl::Vector2>::_M_max_size() const>
   38bf6:	c9                   	leave  
   38bf7:	c3                   	ret    

0000000000038bf8 <objl::Vector2* std::__addressof<objl::Vector2>(objl::Vector2&)>:
   38bf8:	55                   	push   rbp
   38bf9:	48 89 e5             	mov    rbp,rsp
   38bfc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38c00:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38c04:	5d                   	pop    rbp
   38c05:	c3                   	ret    

0000000000038c06 <void std::__relocate_object_a<objl::Vector2, objl::Vector2, std::allocator<objl::Vector2> >(objl::Vector2*, objl::Vector2*, std::allocator<objl::Vector2>&)>:
   38c06:	55                   	push   rbp
   38c07:	48 89 e5             	mov    rbp,rsp
   38c0a:	48 83 ec 20          	sub    rsp,0x20
   38c0e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38c12:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38c16:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38c1a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38c1e:	48 89 c7             	mov    rdi,rax
   38c21:	e8 05 02 00 00       	call   38e2b <std::remove_reference<objl::Vector2&>::type&& std::move<objl::Vector2&>(objl::Vector2&)>
   38c26:	48 89 c2             	mov    rdx,rax
   38c29:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   38c2d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38c31:	48 89 ce             	mov    rsi,rcx
   38c34:	48 89 c7             	mov    rdi,rax
   38c37:	e8 fd 01 00 00       	call   38e39 <void std::allocator_traits<std::allocator<objl::Vector2> >::construct<objl::Vector2, objl::Vector2>(std::allocator<objl::Vector2>&, objl::Vector2*, objl::Vector2&&)>
   38c3c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38c40:	48 89 c7             	mov    rdi,rax
   38c43:	e8 b0 ff ff ff       	call   38bf8 <objl::Vector2* std::__addressof<objl::Vector2>(objl::Vector2&)>
   38c48:	48 89 c2             	mov    rdx,rax
   38c4b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38c4f:	48 89 d6             	mov    rsi,rdx
   38c52:	48 89 c7             	mov    rdi,rax
   38c55:	e8 a2 dd ff ff       	call   369fc <void std::allocator_traits<std::allocator<objl::Vector2> >::destroy<objl::Vector2>(std::allocator<objl::Vector2>&, objl::Vector2*)>
   38c5a:	90                   	nop
   38c5b:	c9                   	leave  
   38c5c:	c3                   	ret    
   38c5d:	90                   	nop

0000000000038c5e <__gnu_cxx::new_allocator<objl::Vertex>::max_size() const>:
   38c5e:	55                   	push   rbp
   38c5f:	48 89 e5             	mov    rbp,rsp
   38c62:	48 83 ec 10          	sub    rsp,0x10
   38c66:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38c6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38c6e:	48 89 c7             	mov    rdi,rax
   38c71:	e8 ec ee ff ff       	call   37b62 <__gnu_cxx::new_allocator<objl::Vertex>::_M_max_size() const>
   38c76:	c9                   	leave  
   38c77:	c3                   	ret    

0000000000038c78 <void std::__relocate_object_a<objl::Vertex, objl::Vertex, std::allocator<objl::Vertex> >(objl::Vertex*, objl::Vertex*, std::allocator<objl::Vertex>&)>:
   38c78:	55                   	push   rbp
   38c79:	48 89 e5             	mov    rbp,rsp
   38c7c:	48 83 ec 20          	sub    rsp,0x20
   38c80:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38c84:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38c88:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38c8c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38c90:	48 89 c7             	mov    rdi,rax
   38c93:	e8 da 01 00 00       	call   38e72 <std::remove_reference<objl::Vertex&>::type&& std::move<objl::Vertex&>(objl::Vertex&)>
   38c98:	48 89 c2             	mov    rdx,rax
   38c9b:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   38c9f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38ca3:	48 89 ce             	mov    rsi,rcx
   38ca6:	48 89 c7             	mov    rdi,rax
   38ca9:	e8 d2 01 00 00       	call   38e80 <void std::allocator_traits<std::allocator<objl::Vertex> >::construct<objl::Vertex, objl::Vertex>(std::allocator<objl::Vertex>&, objl::Vertex*, objl::Vertex&&)>
   38cae:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38cb2:	48 89 c7             	mov    rdi,rax
   38cb5:	e8 77 ef ff ff       	call   37c31 <objl::Vertex* std::__addressof<objl::Vertex>(objl::Vertex&)>
   38cba:	48 89 c2             	mov    rdx,rax
   38cbd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38cc1:	48 89 d6             	mov    rsi,rdx
   38cc4:	48 89 c7             	mov    rdi,rax
   38cc7:	e8 1e df ff ff       	call   36bea <void std::allocator_traits<std::allocator<objl::Vertex> >::destroy<objl::Vertex>(std::allocator<objl::Vertex>&, objl::Vertex*)>
   38ccc:	90                   	nop
   38ccd:	c9                   	leave  
   38cce:	c3                   	ret    

0000000000038ccf <objl::Vertex* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<objl::Vertex>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)>:
   38ccf:	55                   	push   rbp
   38cd0:	48 89 e5             	mov    rbp,rsp
   38cd3:	48 83 ec 30          	sub    rsp,0x30
   38cd7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   38cdb:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   38cdf:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   38ce3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   38ce7:	48 2b 45 e8          	sub    rax,QWORD PTR [rbp-0x18]
   38ceb:	48 c1 f8 05          	sar    rax,0x5
   38cef:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
   38cf3:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
   38cf8:	74 1e                	je     38d18 <objl::Vertex* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<objl::Vertex>(objl::Vertex const*, objl::Vertex const*, objl::Vertex*)+0x49>
   38cfa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38cfe:	48 c1 e0 05          	shl    rax,0x5
   38d02:	48 89 c2             	mov    rdx,rax
   38d05:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
   38d09:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38d0d:	48 89 ce             	mov    rsi,rcx
   38d10:	48 89 c7             	mov    rdi,rax
   38d13:	e8 e8 b9 fc ff       	call   4700 <memmove@plt>
   38d18:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38d1c:	48 c1 e0 05          	shl    rax,0x5
   38d20:	48 89 c2             	mov    rdx,rax
   38d23:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   38d27:	48 01 d0             	add    rax,rdx
   38d2a:	c9                   	leave  
   38d2b:	c3                   	ret    

0000000000038d2c <__gnu_cxx::new_allocator<objl::Material>::max_size() const>:
   38d2c:	55                   	push   rbp
   38d2d:	48 89 e5             	mov    rbp,rsp
   38d30:	48 83 ec 10          	sub    rsp,0x10
   38d34:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38d38:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38d3c:	48 89 c7             	mov    rdi,rax
   38d3f:	e8 a6 f7 ff ff       	call   384ea <__gnu_cxx::new_allocator<objl::Material>::_M_max_size() const>
   38d44:	c9                   	leave  
   38d45:	c3                   	ret    

0000000000038d46 <void std::__relocate_object_a<objl::Material, objl::Material, std::allocator<objl::Material> >(objl::Material*, objl::Material*, std::allocator<objl::Material>&)>:
   38d46:	55                   	push   rbp
   38d47:	48 89 e5             	mov    rbp,rsp
   38d4a:	48 83 ec 20          	sub    rsp,0x20
   38d4e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38d52:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38d56:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38d5a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38d5e:	48 89 c7             	mov    rdi,rax
   38d61:	e8 53 01 00 00       	call   38eb9 <std::remove_reference<objl::Material&>::type&& std::move<objl::Material&>(objl::Material&)>
   38d66:	48 89 c2             	mov    rdx,rax
   38d69:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
   38d6d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38d71:	48 89 ce             	mov    rsi,rcx
   38d74:	48 89 c7             	mov    rdi,rax
   38d77:	e8 4b 01 00 00       	call   38ec7 <void std::allocator_traits<std::allocator<objl::Material> >::construct<objl::Material, objl::Material>(std::allocator<objl::Material>&, objl::Material*, objl::Material&&)>
   38d7c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   38d80:	48 89 c7             	mov    rdi,rax
   38d83:	e8 22 f0 ff ff       	call   37daa <objl::Material* std::__addressof<objl::Material>(objl::Material&)>
   38d88:	48 89 c2             	mov    rdx,rax
   38d8b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38d8f:	48 89 d6             	mov    rsi,rdx
   38d92:	48 89 c7             	mov    rdi,rax
   38d95:	e8 9e e2 ff ff       	call   37038 <void std::allocator_traits<std::allocator<objl::Material> >::destroy<objl::Material>(std::allocator<objl::Material>&, objl::Material*)>
   38d9a:	90                   	nop
   38d9b:	c9                   	leave  
   38d9c:	c3                   	ret    

0000000000038d9d <std::remove_reference<objl::Mesh&>::type&& std::move<objl::Mesh&>(objl::Mesh&)>:
   38d9d:	55                   	push   rbp
   38d9e:	48 89 e5             	mov    rbp,rsp
   38da1:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38da5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38da9:	5d                   	pop    rbp
   38daa:	c3                   	ret    

0000000000038dab <void std::allocator_traits<std::allocator<objl::Mesh> >::construct<objl::Mesh, objl::Mesh>(std::allocator<objl::Mesh>&, objl::Mesh*, objl::Mesh&&)>:
   38dab:	55                   	push   rbp
   38dac:	48 89 e5             	mov    rbp,rsp
   38daf:	48 83 ec 20          	sub    rsp,0x20
   38db3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38db7:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38dbb:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38dbf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38dc3:	48 89 c7             	mov    rdi,rax
   38dc6:	e8 35 01 00 00       	call   38f00 <objl::Mesh&& std::forward<objl::Mesh>(std::remove_reference<objl::Mesh>::type&)>
   38dcb:	48 89 c2             	mov    rdx,rax
   38dce:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   38dd2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38dd6:	48 89 ce             	mov    rsi,rcx
   38dd9:	48 89 c7             	mov    rdi,rax
   38ddc:	e8 9f 03 00 00       	call   39180 <void __gnu_cxx::new_allocator<objl::Mesh>::construct<objl::Mesh, objl::Mesh>(objl::Mesh*, objl::Mesh&&)>
   38de1:	90                   	nop
   38de2:	c9                   	leave  
   38de3:	c3                   	ret    

0000000000038de4 <std::remove_reference<objl::Vector3&>::type&& std::move<objl::Vector3&>(objl::Vector3&)>:
   38de4:	55                   	push   rbp
   38de5:	48 89 e5             	mov    rbp,rsp
   38de8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38dec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38df0:	5d                   	pop    rbp
   38df1:	c3                   	ret    

0000000000038df2 <void std::allocator_traits<std::allocator<objl::Vector3> >::construct<objl::Vector3, objl::Vector3>(std::allocator<objl::Vector3>&, objl::Vector3*, objl::Vector3&&)>:
   38df2:	55                   	push   rbp
   38df3:	48 89 e5             	mov    rbp,rsp
   38df6:	48 83 ec 20          	sub    rsp,0x20
   38dfa:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38dfe:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38e02:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38e06:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38e0a:	48 89 c7             	mov    rdi,rax
   38e0d:	e8 b5 03 00 00       	call   391c7 <objl::Vector3&& std::forward<objl::Vector3>(std::remove_reference<objl::Vector3>::type&)>
   38e12:	48 89 c2             	mov    rdx,rax
   38e15:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   38e19:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38e1d:	48 89 ce             	mov    rsi,rcx
   38e20:	48 89 c7             	mov    rdi,rax
   38e23:	e8 ae 03 00 00       	call   391d6 <void __gnu_cxx::new_allocator<objl::Vector3>::construct<objl::Vector3, objl::Vector3>(objl::Vector3*, objl::Vector3&&)>
   38e28:	90                   	nop
   38e29:	c9                   	leave  
   38e2a:	c3                   	ret    

0000000000038e2b <std::remove_reference<objl::Vector2&>::type&& std::move<objl::Vector2&>(objl::Vector2&)>:
   38e2b:	55                   	push   rbp
   38e2c:	48 89 e5             	mov    rbp,rsp
   38e2f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38e33:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38e37:	5d                   	pop    rbp
   38e38:	c3                   	ret    

0000000000038e39 <void std::allocator_traits<std::allocator<objl::Vector2> >::construct<objl::Vector2, objl::Vector2>(std::allocator<objl::Vector2>&, objl::Vector2*, objl::Vector2&&)>:
   38e39:	55                   	push   rbp
   38e3a:	48 89 e5             	mov    rbp,rsp
   38e3d:	48 83 ec 20          	sub    rsp,0x20
   38e41:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38e45:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38e49:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38e4d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38e51:	48 89 c7             	mov    rdi,rax
   38e54:	e8 c5 03 00 00       	call   3921e <objl::Vector2&& std::forward<objl::Vector2>(std::remove_reference<objl::Vector2>::type&)>
   38e59:	48 89 c2             	mov    rdx,rax
   38e5c:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   38e60:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38e64:	48 89 ce             	mov    rsi,rcx
   38e67:	48 89 c7             	mov    rdi,rax
   38e6a:	e8 bd 03 00 00       	call   3922c <void __gnu_cxx::new_allocator<objl::Vector2>::construct<objl::Vector2, objl::Vector2>(objl::Vector2*, objl::Vector2&&)>
   38e6f:	90                   	nop
   38e70:	c9                   	leave  
   38e71:	c3                   	ret    

0000000000038e72 <std::remove_reference<objl::Vertex&>::type&& std::move<objl::Vertex&>(objl::Vertex&)>:
   38e72:	55                   	push   rbp
   38e73:	48 89 e5             	mov    rbp,rsp
   38e76:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38e7a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38e7e:	5d                   	pop    rbp
   38e7f:	c3                   	ret    

0000000000038e80 <void std::allocator_traits<std::allocator<objl::Vertex> >::construct<objl::Vertex, objl::Vertex>(std::allocator<objl::Vertex>&, objl::Vertex*, objl::Vertex&&)>:
   38e80:	55                   	push   rbp
   38e81:	48 89 e5             	mov    rbp,rsp
   38e84:	48 83 ec 20          	sub    rsp,0x20
   38e88:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38e8c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38e90:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38e94:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38e98:	48 89 c7             	mov    rdi,rax
   38e9b:	e8 ce 03 00 00       	call   3926e <objl::Vertex&& std::forward<objl::Vertex>(std::remove_reference<objl::Vertex>::type&)>
   38ea0:	48 89 c2             	mov    rdx,rax
   38ea3:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   38ea7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38eab:	48 89 ce             	mov    rsi,rcx
   38eae:	48 89 c7             	mov    rdi,rax
   38eb1:	e8 c6 03 00 00       	call   3927c <void __gnu_cxx::new_allocator<objl::Vertex>::construct<objl::Vertex, objl::Vertex>(objl::Vertex*, objl::Vertex&&)>
   38eb6:	90                   	nop
   38eb7:	c9                   	leave  
   38eb8:	c3                   	ret    

0000000000038eb9 <std::remove_reference<objl::Material&>::type&& std::move<objl::Material&>(objl::Material&)>:
   38eb9:	55                   	push   rbp
   38eba:	48 89 e5             	mov    rbp,rsp
   38ebd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38ec1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38ec5:	5d                   	pop    rbp
   38ec6:	c3                   	ret    

0000000000038ec7 <void std::allocator_traits<std::allocator<objl::Material> >::construct<objl::Material, objl::Material>(std::allocator<objl::Material>&, objl::Material*, objl::Material&&)>:
   38ec7:	55                   	push   rbp
   38ec8:	48 89 e5             	mov    rbp,rsp
   38ecb:	48 83 ec 20          	sub    rsp,0x20
   38ecf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38ed3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38ed7:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
   38edb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   38edf:	48 89 c7             	mov    rdi,rax
   38ee2:	e8 f2 03 00 00       	call   392d9 <objl::Material&& std::forward<objl::Material>(std::remove_reference<objl::Material>::type&)>
   38ee7:	48 89 c2             	mov    rdx,rax
   38eea:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
   38eee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38ef2:	48 89 ce             	mov    rsi,rcx
   38ef5:	48 89 c7             	mov    rdi,rax
   38ef8:	e8 eb 03 00 00       	call   392e8 <void __gnu_cxx::new_allocator<objl::Material>::construct<objl::Material, objl::Material>(objl::Material*, objl::Material&&)>
   38efd:	90                   	nop
   38efe:	c9                   	leave  
   38eff:	c3                   	ret    

0000000000038f00 <objl::Mesh&& std::forward<objl::Mesh>(std::remove_reference<objl::Mesh>::type&)>:
   38f00:	55                   	push   rbp
   38f01:	48 89 e5             	mov    rbp,rsp
   38f04:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38f08:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38f0c:	5d                   	pop    rbp
   38f0d:	c3                   	ret    

0000000000038f0e <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >&&)>:
   38f0e:	55                   	push   rbp
   38f0f:	48 89 e5             	mov    rbp,rsp
   38f12:	48 83 ec 10          	sub    rsp,0x10
   38f16:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38f1a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38f1e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38f22:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38f26:	48 89 d6             	mov    rsi,rdx
   38f29:	48 89 c7             	mov    rdi,rax
   38f2c:	e8 ff 03 00 00       	call   39330 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::_Vector_impl(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&&)>
   38f31:	90                   	nop
   38f32:	c9                   	leave  
   38f33:	c3                   	ret    

0000000000038f34 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&&)>:
   38f34:	55                   	push   rbp
   38f35:	48 89 e5             	mov    rbp,rsp
   38f38:	48 83 ec 10          	sub    rsp,0x10
   38f3c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38f40:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38f44:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38f48:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38f4c:	48 89 d6             	mov    rsi,rdx
   38f4f:	48 89 c7             	mov    rdi,rax
   38f52:	e8 b7 ff ff ff       	call   38f0e <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_base(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >&&)>
   38f57:	90                   	nop
   38f58:	c9                   	leave  
   38f59:	c3                   	ret    

0000000000038f5a <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base(std::_Vector_base<unsigned int, std::allocator<unsigned int> >&&)>:
   38f5a:	55                   	push   rbp
   38f5b:	48 89 e5             	mov    rbp,rsp
   38f5e:	48 83 ec 10          	sub    rsp,0x10
   38f62:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38f66:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38f6a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38f6e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38f72:	48 89 d6             	mov    rsi,rdx
   38f75:	48 89 c7             	mov    rdi,rax
   38f78:	e8 05 04 00 00       	call   39382 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&&)>
   38f7d:	90                   	nop
   38f7e:	c9                   	leave  
   38f7f:	c3                   	ret    

0000000000038f80 <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::vector<unsigned int, std::allocator<unsigned int> >&&)>:
   38f80:	55                   	push   rbp
   38f81:	48 89 e5             	mov    rbp,rsp
   38f84:	48 83 ec 10          	sub    rsp,0x10
   38f88:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38f8c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38f90:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38f94:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38f98:	48 89 d6             	mov    rsi,rdx
   38f9b:	48 89 c7             	mov    rdi,rax
   38f9e:	e8 b7 ff ff ff       	call   38f5a <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_base(std::_Vector_base<unsigned int, std::allocator<unsigned int> >&&)>
   38fa3:	90                   	nop
   38fa4:	c9                   	leave  
   38fa5:	c3                   	ret    

0000000000038fa6 <objl::Material::Material(objl::Material&&)>:
   38fa6:	55                   	push   rbp
   38fa7:	48 89 e5             	mov    rbp,rsp
   38faa:	48 83 ec 10          	sub    rsp,0x10
   38fae:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   38fb2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   38fb6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38fba:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38fbe:	48 89 d6             	mov    rsi,rdx
   38fc1:	48 89 c7             	mov    rdi,rax
   38fc4:	e8 77 b2 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   38fc9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38fcd:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38fd1:	48 8b 4a 20          	mov    rcx,QWORD PTR [rdx+0x20]
   38fd5:	48 89 48 20          	mov    QWORD PTR [rax+0x20],rcx
   38fd9:	8b 52 28             	mov    edx,DWORD PTR [rdx+0x28]
   38fdc:	89 50 28             	mov    DWORD PTR [rax+0x28],edx
   38fdf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38fe3:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38fe7:	48 8b 4a 2c          	mov    rcx,QWORD PTR [rdx+0x2c]
   38feb:	48 89 48 2c          	mov    QWORD PTR [rax+0x2c],rcx
   38fef:	8b 52 34             	mov    edx,DWORD PTR [rdx+0x34]
   38ff2:	89 50 34             	mov    DWORD PTR [rax+0x34],edx
   38ff5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   38ff9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   38ffd:	48 8b 4a 38          	mov    rcx,QWORD PTR [rdx+0x38]
   39001:	48 89 48 38          	mov    QWORD PTR [rax+0x38],rcx
   39005:	8b 52 40             	mov    edx,DWORD PTR [rdx+0x40]
   39008:	89 50 40             	mov    DWORD PTR [rax+0x40],edx
   3900b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3900f:	f3 0f 10 40 44       	movss  xmm0,DWORD PTR [rax+0x44]
   39014:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   39018:	f3 0f 11 40 44       	movss  DWORD PTR [rax+0x44],xmm0
   3901d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39021:	f3 0f 10 40 48       	movss  xmm0,DWORD PTR [rax+0x48]
   39026:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3902a:	f3 0f 11 40 48       	movss  DWORD PTR [rax+0x48],xmm0
   3902f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39033:	f3 0f 10 40 4c       	movss  xmm0,DWORD PTR [rax+0x4c]
   39038:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3903c:	f3 0f 11 40 4c       	movss  DWORD PTR [rax+0x4c],xmm0
   39041:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39045:	8b 50 50             	mov    edx,DWORD PTR [rax+0x50]
   39048:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3904c:	89 50 50             	mov    DWORD PTR [rax+0x50],edx
   3904f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   39053:	48 83 c0 58          	add    rax,0x58
   39057:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3905b:	48 83 c2 58          	add    rdx,0x58
   3905f:	48 89 d6             	mov    rsi,rdx
   39062:	48 89 c7             	mov    rdi,rax
   39065:	e8 d6 b1 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   3906a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3906e:	48 83 c0 78          	add    rax,0x78
   39072:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   39076:	48 83 c2 78          	add    rdx,0x78
   3907a:	48 89 d6             	mov    rsi,rdx
   3907d:	48 89 c7             	mov    rdi,rax
   39080:	e8 bb b1 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   39085:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   39089:	48 05 98 00 00 00    	add    rax,0x98
   3908f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   39093:	48 81 c2 98 00 00 00 	add    rdx,0x98
   3909a:	48 89 d6             	mov    rsi,rdx
   3909d:	48 89 c7             	mov    rdi,rax
   390a0:	e8 9b b1 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   390a5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   390a9:	48 05 b8 00 00 00    	add    rax,0xb8
   390af:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   390b3:	48 81 c2 b8 00 00 00 	add    rdx,0xb8
   390ba:	48 89 d6             	mov    rsi,rdx
   390bd:	48 89 c7             	mov    rdi,rax
   390c0:	e8 7b b1 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   390c5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   390c9:	48 05 d8 00 00 00    	add    rax,0xd8
   390cf:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   390d3:	48 81 c2 d8 00 00 00 	add    rdx,0xd8
   390da:	48 89 d6             	mov    rsi,rdx
   390dd:	48 89 c7             	mov    rdi,rax
   390e0:	e8 5b b1 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   390e5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   390e9:	48 05 f8 00 00 00    	add    rax,0xf8
   390ef:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   390f3:	48 81 c2 f8 00 00 00 	add    rdx,0xf8
   390fa:	48 89 d6             	mov    rsi,rdx
   390fd:	48 89 c7             	mov    rdi,rax
   39100:	e8 3b b1 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   39105:	90                   	nop
   39106:	c9                   	leave  
   39107:	c3                   	ret    

0000000000039108 <objl::Mesh::Mesh(objl::Mesh&&)>:
   39108:	55                   	push   rbp
   39109:	48 89 e5             	mov    rbp,rsp
   3910c:	48 83 ec 10          	sub    rsp,0x10
   39110:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   39114:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   39118:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3911c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   39120:	48 89 d6             	mov    rsi,rdx
   39123:	48 89 c7             	mov    rdi,rax
   39126:	e8 15 b1 fc ff       	call   4240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   3912b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3912f:	48 83 c0 20          	add    rax,0x20
   39133:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   39137:	48 83 c2 20          	add    rdx,0x20
   3913b:	48 89 d6             	mov    rsi,rdx
   3913e:	48 89 c7             	mov    rdi,rax
   39141:	e8 ee fd ff ff       	call   38f34 <std::vector<objl::Vertex, std::allocator<objl::Vertex> >::vector(std::vector<objl::Vertex, std::allocator<objl::Vertex> >&&)>
   39146:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3914a:	48 83 c0 38          	add    rax,0x38
   3914e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   39152:	48 83 c2 38          	add    rdx,0x38
   39156:	48 89 d6             	mov    rsi,rdx
   39159:	48 89 c7             	mov    rdi,rax
   3915c:	e8 1f fe ff ff       	call   38f80 <std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::vector<unsigned int, std::allocator<unsigned int> >&&)>
   39161:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   39165:	48 83 c0 50          	add    rax,0x50
   39169:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
   3916d:	48 83 c2 50          	add    rdx,0x50
   39171:	48 89 d6             	mov    rsi,rdx
   39174:	48 89 c7             	mov    rdi,rax
   39177:	e8 2a fe ff ff       	call   38fa6 <objl::Material::Material(objl::Material&&)>
   3917c:	90                   	nop
   3917d:	c9                   	leave  
   3917e:	c3                   	ret    
   3917f:	90                   	nop

0000000000039180 <void __gnu_cxx::new_allocator<objl::Mesh>::construct<objl::Mesh, objl::Mesh>(objl::Mesh*, objl::Mesh&&)>:
   39180:	55                   	push   rbp
   39181:	48 89 e5             	mov    rbp,rsp
   39184:	53                   	push   rbx
   39185:	48 83 ec 28          	sub    rsp,0x28
   39189:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3918d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   39191:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   39195:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   39199:	48 89 c7             	mov    rdi,rax
   3919c:	e8 5f fd ff ff       	call   38f00 <objl::Mesh&& std::forward<objl::Mesh>(std::remove_reference<objl::Mesh>::type&)>
   391a1:	48 89 c3             	mov    rbx,rax
   391a4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   391a8:	48 89 c6             	mov    rsi,rax
   391ab:	bf 68 01 00 00       	mov    edi,0x168
   391b0:	e8 fc bf fe ff       	call   251b1 <operator new(unsigned long, void*)>
   391b5:	48 89 de             	mov    rsi,rbx
   391b8:	48 89 c7             	mov    rdi,rax
   391bb:	e8 48 ff ff ff       	call   39108 <objl::Mesh::Mesh(objl::Mesh&&)>
   391c0:	90                   	nop
   391c1:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   391c5:	c9                   	leave  
   391c6:	c3                   	ret    

00000000000391c7 <objl::Vector3&& std::forward<objl::Vector3>(std::remove_reference<objl::Vector3>::type&)>:
   391c7:	55                   	push   rbp
   391c8:	48 89 e5             	mov    rbp,rsp
   391cb:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   391cf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   391d3:	5d                   	pop    rbp
   391d4:	c3                   	ret    
   391d5:	90                   	nop

00000000000391d6 <void __gnu_cxx::new_allocator<objl::Vector3>::construct<objl::Vector3, objl::Vector3>(objl::Vector3*, objl::Vector3&&)>:
   391d6:	55                   	push   rbp
   391d7:	48 89 e5             	mov    rbp,rsp
   391da:	53                   	push   rbx
   391db:	48 83 ec 28          	sub    rsp,0x28
   391df:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   391e3:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   391e7:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   391eb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   391ef:	48 89 c7             	mov    rdi,rax
   391f2:	e8 d0 ff ff ff       	call   391c7 <objl::Vector3&& std::forward<objl::Vector3>(std::remove_reference<objl::Vector3>::type&)>
   391f7:	48 89 c3             	mov    rbx,rax
   391fa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   391fe:	48 89 c6             	mov    rsi,rax
   39201:	bf 0c 00 00 00       	mov    edi,0xc
   39206:	e8 a6 bf fe ff       	call   251b1 <operator new(unsigned long, void*)>
   3920b:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
   3920e:	48 89 10             	mov    QWORD PTR [rax],rdx
   39211:	8b 53 08             	mov    edx,DWORD PTR [rbx+0x8]
   39214:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
   39217:	90                   	nop
   39218:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3921c:	c9                   	leave  
   3921d:	c3                   	ret    

000000000003921e <objl::Vector2&& std::forward<objl::Vector2>(std::remove_reference<objl::Vector2>::type&)>:
   3921e:	55                   	push   rbp
   3921f:	48 89 e5             	mov    rbp,rsp
   39222:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   39226:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3922a:	5d                   	pop    rbp
   3922b:	c3                   	ret    

000000000003922c <void __gnu_cxx::new_allocator<objl::Vector2>::construct<objl::Vector2, objl::Vector2>(objl::Vector2*, objl::Vector2&&)>:
   3922c:	55                   	push   rbp
   3922d:	48 89 e5             	mov    rbp,rsp
   39230:	53                   	push   rbx
   39231:	48 83 ec 28          	sub    rsp,0x28
   39235:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   39239:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3923d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   39241:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   39245:	48 89 c7             	mov    rdi,rax
   39248:	e8 d1 ff ff ff       	call   3921e <objl::Vector2&& std::forward<objl::Vector2>(std::remove_reference<objl::Vector2>::type&)>
   3924d:	48 89 c3             	mov    rbx,rax
   39250:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   39254:	48 89 c6             	mov    rsi,rax
   39257:	bf 08 00 00 00       	mov    edi,0x8
   3925c:	e8 50 bf fe ff       	call   251b1 <operator new(unsigned long, void*)>
   39261:	48 8b 13             	mov    rdx,QWORD PTR [rbx]
   39264:	48 89 10             	mov    QWORD PTR [rax],rdx
   39267:	90                   	nop
   39268:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3926c:	c9                   	leave  
   3926d:	c3                   	ret    

000000000003926e <objl::Vertex&& std::forward<objl::Vertex>(std::remove_reference<objl::Vertex>::type&)>:
   3926e:	55                   	push   rbp
   3926f:	48 89 e5             	mov    rbp,rsp
   39272:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   39276:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3927a:	5d                   	pop    rbp
   3927b:	c3                   	ret    

000000000003927c <void __gnu_cxx::new_allocator<objl::Vertex>::construct<objl::Vertex, objl::Vertex>(objl::Vertex*, objl::Vertex&&)>:
   3927c:	55                   	push   rbp
   3927d:	48 89 e5             	mov    rbp,rsp
   39280:	53                   	push   rbx
   39281:	48 83 ec 28          	sub    rsp,0x28
   39285:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   39289:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   3928d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   39291:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   39295:	48 89 c7             	mov    rdi,rax
   39298:	e8 d1 ff ff ff       	call   3926e <objl::Vertex&& std::forward<objl::Vertex>(std::remove_reference<objl::Vertex>::type&)>
   3929d:	48 89 c3             	mov    rbx,rax
   392a0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   392a4:	48 89 c6             	mov    rsi,rax
   392a7:	bf 20 00 00 00       	mov    edi,0x20
   392ac:	e8 00 bf fe ff       	call   251b1 <operator new(unsigned long, void*)>
   392b1:	48 89 c1             	mov    rcx,rax
   392b4:	48 8b 03             	mov    rax,QWORD PTR [rbx]
   392b7:	48 8b 53 08          	mov    rdx,QWORD PTR [rbx+0x8]
   392bb:	48 89 01             	mov    QWORD PTR [rcx],rax
   392be:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
   392c2:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
   392c6:	48 8b 53 18          	mov    rdx,QWORD PTR [rbx+0x18]
   392ca:	48 89 41 10          	mov    QWORD PTR [rcx+0x10],rax
   392ce:	48 89 51 18          	mov    QWORD PTR [rcx+0x18],rdx
   392d2:	90                   	nop
   392d3:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   392d7:	c9                   	leave  
   392d8:	c3                   	ret    

00000000000392d9 <objl::Material&& std::forward<objl::Material>(std::remove_reference<objl::Material>::type&)>:
   392d9:	55                   	push   rbp
   392da:	48 89 e5             	mov    rbp,rsp
   392dd:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   392e1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   392e5:	5d                   	pop    rbp
   392e6:	c3                   	ret    
   392e7:	90                   	nop

00000000000392e8 <void __gnu_cxx::new_allocator<objl::Material>::construct<objl::Material, objl::Material>(objl::Material*, objl::Material&&)>:
   392e8:	55                   	push   rbp
   392e9:	48 89 e5             	mov    rbp,rsp
   392ec:	53                   	push   rbx
   392ed:	48 83 ec 28          	sub    rsp,0x28
   392f1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   392f5:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   392f9:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
   392fd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
   39301:	48 89 c7             	mov    rdi,rax
   39304:	e8 d0 ff ff ff       	call   392d9 <objl::Material&& std::forward<objl::Material>(std::remove_reference<objl::Material>::type&)>
   39309:	48 89 c3             	mov    rbx,rax
   3930c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   39310:	48 89 c6             	mov    rsi,rax
   39313:	bf 18 01 00 00       	mov    edi,0x118
   39318:	e8 94 be fe ff       	call   251b1 <operator new(unsigned long, void*)>
   3931d:	48 89 de             	mov    rsi,rbx
   39320:	48 89 c7             	mov    rdi,rax
   39323:	e8 7e fc ff ff       	call   38fa6 <objl::Material::Material(objl::Material&&)>
   39328:	90                   	nop
   39329:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3932d:	c9                   	leave  
   3932e:	c3                   	ret    
   3932f:	90                   	nop

0000000000039330 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl::_Vector_impl(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&&)>:
   39330:	55                   	push   rbp
   39331:	48 89 e5             	mov    rbp,rsp
   39334:	53                   	push   rbx
   39335:	48 83 ec 18          	sub    rsp,0x18
   39339:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3933d:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   39341:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   39345:	48 89 c7             	mov    rdi,rax
   39348:	e8 86 00 00 00       	call   393d3 <std::remove_reference<std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&>::type&& std::move<std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&>(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&)>
   3934d:	48 89 c2             	mov    rdx,rax
   39350:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   39354:	48 89 d6             	mov    rsi,rdx
   39357:	48 89 c7             	mov    rdi,rax
   3935a:	e8 15 e2 ff ff       	call   37574 <std::allocator<objl::Vertex>::allocator(std::allocator<objl::Vertex> const&)>
   3935f:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   39363:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   39367:	48 89 c7             	mov    rdi,rax
   3936a:	e8 64 00 00 00       	call   393d3 <std::remove_reference<std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&>::type&& std::move<std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&>(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&)>
   3936f:	48 89 c6             	mov    rsi,rax
   39372:	48 89 df             	mov    rdi,rbx
   39375:	e8 68 00 00 00       	call   393e2 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_Vector_impl_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data&&)>
   3937a:	90                   	nop
   3937b:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   3937f:	c9                   	leave  
   39380:	c3                   	ret    
   39381:	90                   	nop

0000000000039382 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl::_Vector_impl(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&&)>:
   39382:	55                   	push   rbp
   39383:	48 89 e5             	mov    rbp,rsp
   39386:	53                   	push   rbx
   39387:	48 83 ec 18          	sub    rsp,0x18
   3938b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
   3938f:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
   39393:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   39397:	48 89 c7             	mov    rdi,rax
   3939a:	e8 ab 00 00 00       	call   3944a <std::remove_reference<std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&>::type&& std::move<std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&>(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&)>
   3939f:	48 89 c2             	mov    rdx,rax
   393a2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
   393a6:	48 89 d6             	mov    rsi,rdx
   393a9:	48 89 c7             	mov    rdi,rax
   393ac:	e8 5b e2 ff ff       	call   3760c <std::allocator<unsigned int>::allocator(std::allocator<unsigned int> const&)>
   393b1:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
   393b5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
   393b9:	48 89 c7             	mov    rdi,rax
   393bc:	e8 89 00 00 00       	call   3944a <std::remove_reference<std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&>::type&& std::move<std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&>(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&)>
   393c1:	48 89 c6             	mov    rsi,rax
   393c4:	48 89 df             	mov    rdi,rbx
   393c7:	e8 8c 00 00 00       	call   39458 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_Vector_impl_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data&&)>
   393cc:	90                   	nop
   393cd:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
   393d1:	c9                   	leave  
   393d2:	c3                   	ret    

00000000000393d3 <std::remove_reference<std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&>::type&& std::move<std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&>(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl&)>:
   393d3:	55                   	push   rbp
   393d4:	48 89 e5             	mov    rbp,rsp
   393d7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   393db:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   393df:	5d                   	pop    rbp
   393e0:	c3                   	ret    
   393e1:	90                   	nop

00000000000393e2 <std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data::_Vector_impl_data(std::_Vector_base<objl::Vertex, std::allocator<objl::Vertex> >::_Vector_impl_data&&)>:
   393e2:	55                   	push   rbp
   393e3:	48 89 e5             	mov    rbp,rsp
   393e6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   393ea:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   393ee:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   393f2:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   393f5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   393f9:	48 89 10             	mov    QWORD PTR [rax],rdx
   393fc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39400:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   39404:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   39408:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   3940c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39410:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   39414:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   39418:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   3941c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39420:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   39428:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3942c:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   39430:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39434:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   39438:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   3943c:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   39440:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39444:	48 89 10             	mov    QWORD PTR [rax],rdx
   39447:	90                   	nop
   39448:	5d                   	pop    rbp
   39449:	c3                   	ret    

000000000003944a <std::remove_reference<std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&>::type&& std::move<std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&>(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl&)>:
   3944a:	55                   	push   rbp
   3944b:	48 89 e5             	mov    rbp,rsp
   3944e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   39452:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   39456:	5d                   	pop    rbp
   39457:	c3                   	ret    

0000000000039458 <std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data::_Vector_impl_data(std::_Vector_base<unsigned int, std::allocator<unsigned int> >::_Vector_impl_data&&)>:
   39458:	55                   	push   rbp
   39459:	48 89 e5             	mov    rbp,rsp
   3945c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
   39460:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
   39464:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39468:	48 8b 10             	mov    rdx,QWORD PTR [rax]
   3946b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3946f:	48 89 10             	mov    QWORD PTR [rax],rdx
   39472:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39476:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   3947a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3947e:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   39482:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39486:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   3948a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
   3948e:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
   39492:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   39496:	48 c7 40 10 00 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
   3949e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   394a2:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
   394a6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   394aa:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
   394ae:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   394b2:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
   394b6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
   394ba:	48 89 10             	mov    QWORD PTR [rax],rdx
   394bd:	90                   	nop
   394be:	5d                   	pop    rbp
   394bf:	c3                   	ret    

00000000000394c0 <__libc_csu_init>:
   394c0:	f3 0f 1e fa          	endbr64 
   394c4:	41 57                	push   r15
   394c6:	4c 8d 3d 8b 08 01 00 	lea    r15,[rip+0x1088b]        # 49d58 <__frame_dummy_init_array_entry>
   394cd:	41 56                	push   r14
   394cf:	49 89 d6             	mov    r14,rdx
   394d2:	41 55                	push   r13
   394d4:	49 89 f5             	mov    r13,rsi
   394d7:	41 54                	push   r12
   394d9:	41 89 fc             	mov    r12d,edi
   394dc:	55                   	push   rbp
   394dd:	48 8d 2d 8c 08 01 00 	lea    rbp,[rip+0x1088c]        # 49d70 <__do_global_dtors_aux_fini_array_entry>
   394e4:	53                   	push   rbx
   394e5:	4c 29 fd             	sub    rbp,r15
   394e8:	48 83 ec 08          	sub    rsp,0x8
   394ec:	e8 0f ab fc ff       	call   4000 <_init>
   394f1:	48 c1 fd 03          	sar    rbp,0x3
   394f5:	74 1f                	je     39516 <__libc_csu_init+0x56>
   394f7:	31 db                	xor    ebx,ebx
   394f9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
   39500:	4c 89 f2             	mov    rdx,r14
   39503:	4c 89 ee             	mov    rsi,r13
   39506:	44 89 e7             	mov    edi,r12d
   39509:	41 ff 14 df          	call   QWORD PTR [r15+rbx*8]
   3950d:	48 83 c3 01          	add    rbx,0x1
   39511:	48 39 dd             	cmp    rbp,rbx
   39514:	75 ea                	jne    39500 <__libc_csu_init+0x40>
   39516:	48 83 c4 08          	add    rsp,0x8
   3951a:	5b                   	pop    rbx
   3951b:	5d                   	pop    rbp
   3951c:	41 5c                	pop    r12
   3951e:	41 5d                	pop    r13
   39520:	41 5e                	pop    r14
   39522:	41 5f                	pop    r15
   39524:	c3                   	ret    
   39525:	66 66 2e 0f 1f 84 00 00 00 00 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]

0000000000039530 <__libc_csu_fini>:
   39530:	f3 0f 1e fa          	endbr64 
   39534:	c3                   	ret    

Disassembly of section .fini:

0000000000039538 <_fini>:
   39538:	f3 0f 1e fa          	endbr64 
   3953c:	48 83 ec 08          	sub    rsp,0x8
   39540:	48 83 c4 08          	add    rsp,0x8
   39544:	c3                   	ret    
